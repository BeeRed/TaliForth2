# Raw word list for Tali Forth 2, adapted from Liara Forth 
# Scot W. Stevenson <scot.stevenson@gmail.com>
# First version: 21. Nov 2017
# This version: 24. Nov 2017

# This file is used as the basis to generate the JSON word list
# file via the Python tool text_to_json.py in the tools folder.
# The list consists of three whitespace-separated columns: The
# Forth word in lowercase, the name of the instruction in lowercase,
# and the group it belongs to. The first two columns may not contain
# spaces, the third column can.

.               dot         
.(              dot-parens    
."              dot-quote    
.byte           dot-byte    
.r              dot-r      
.s              dot-s    
/               slash     
/mod            slash-mod    
/string         slash-string    
,               comma    
:               colon
;               semicolon    
#               number-sign
#>              number-greater
#s              number-s
!               store
?               question
?do             q-do   
?dup            q-dup    
@               fetch
(               p-open
(+loop)         p-plus-loop    
(?do)           p-q-do    
(do)            p-do    
)               p-close
[               left-bracket   
[']             bracket-tick
[char]          bracket-char  
]               right-bracket   
\               backslash
'               tick            
*               star
*/              star-slash
*/mod           star-slash-mod    
+               plus
+!              plus-store    
+loop           plus-loop    
-               minus 
-rot            minus-rot    
-trailing       minus-trailing    
=               equal    
<               less    
<>              unequal
<#              less-number
>               greater    
>body           greater-body    
>in             greater-in    
>number         greater-number    
>r              greater-r    
0               zero    
0=              zero-equal    
0<              zero-less    
0>              zero-greater
0<>             zero-unequal    
0branch         zero-branch    
1               one    
1-              one-minus    
1+              one-plus    
2               two    
2*              two-star    
2>r             two-greater-r    
2r>             two-r-greater    
2drop           two-drop    
2dup            two-dup
2over           two-over    
2r@             two-r-fetch    
2swap           two-swap    
2variable       two-variable    
abort           abort    
abort"          abort-quote    
abs             abs    
accept          accept              
again           again               
align           align               
aligned         aligned             
allot           allot               
and             and                 
at-xy           at-xt
base            base                
bell            bell                
begin           begin               
bl              bl    
bounds          bounds     
branch          branch
bye             bye    
c,              c-comma    
c!              c-store    
c@              c-fetch    
cell+           cell-plus    
cells           cells    
char            char    
char+           char-plus    
chars           chars
cmove           cmove    
cmove>          cmove-greater    
cold            cold    
compile,        compile-comma     
compile-only    compile-only    
constant        constant    
count           count    
cr              cr    
create          create    
d+              d-plus    
d-              d-minus     
d.              d-dot    
d.r             d-r    
d>s             d-greater-s    
dabs            dabs    
decimal         decimal
defer           defer    
depth           depth    
digit?          digit-q    
dnegate         dnegate    
do              do    
does>           does-greater    
drop            drop       
dump            dump       
dup             dup        
else            else       
emit            emit       
erase           erase      
evaluate        evaluate   
execute         execute    
exit            exit       
false           false      
fill            fill       
find            find       
find-name       find-name  
fm/mod          fm/mod     
here            here       
hex             hex        
hold            hold       
i               i         
if              if        
immediate       immediate 
input           input     
int>name        int-greater-name
invert          invert          
j               j               
key             key             
key?            key-q
latestnt        latestnt        
latestxt        latestxt        
leave           leave           
literal         literal         
loop            loop            
lshift          lshift          
m*              m-mstar
marker          marker          
max             max             
min             min             
mod             mod             
move            move            
name>int        name-greater-int        
name>string     name-greater-string     
nc-limit        nc-limit        
negate          negate          
never-compile   never-compile   
nip             nip             
number          number          
or              or              
output          output          
over            over            
pad             pad             
page            page            
parse           parse           
parse-name      parse-name      
pick            pick            
postpone        postpone        
quit            quit            
r@              r-fetch
r>              r-greater
recurse         recurse         
refill          refill          
repeat          repeat          
rshift          rshift          
rot             rot             
s"              s-quote
s>d             s-greater-d             
sign            sign            
sliteral        sliteral        
sm/rem          sm-slash-rem          
source          source          
source-id       source-id       
space           space           
spaces          spaces          
state           state           
swap            swap            
then            then            
to              to              
true            true            
tuck            tuck            
type            type            
u.              u-dot
u.r             u-dot-r             
ud.             ud-dot
ud.r            ud-dot-r            
ud/mod          ud-slash-mod          
um*             um-star
um/mod          um-slash-mod          
unloop          unloop          
unused          unused          
value           value           
variable        variable        
within          within          
word            word            
words           words           
words&sizes     words-and-sizes     
wordsize        wordsize        
xor             xor   
