#!/usr/bin/env python3
# Generate wordlist for documentation from native_words.asm
# For Tali Forth 2
# Scot W. Stevenson <scot.stevenson@gmail.com>
# First version: 21. Nov 2017
# This version: 16. Apr 2018

import sys

SOURCE = '../native_words.asm'
MARKER = '; ## '

# Counters for statistics. We just brutally use global variables for these
not_tested = 0
missing_size = 0
missing_cycles = 0


def print_intro():
    """Print a brief introduction to the information that follows
    in GitHub markdown
    """
    print('# Tali Forth 2 native words')
    print('This file is automatically generated by a script in `tools`.')
    print('Note these are not all the words in Tali Forth 2, the high-level')
    print('and user-defined words coded in Forth are in `forth_code`.')
    print()


def print_footer(size):
    """Print statistical information at bottom of table"""
    global not_tested, missing_size, missing_cycles

    print()
    print('Found **{0}** native words in `native_words.asm`'.format(size))
    print()
    print('Of those, **{0}** are not marked as "tested",'.format(not_tested))
    print('**{0}** are missing size information,'.format(missing_size))
    print('and **{0}** are missing cycle information'.format(missing_cycles))
    print()


def print_header():
    """Print the header of the table in markup"""
    print('| NAME | FORTH WORD | SOURCE | BYTES | CYCLES | STATUS |')
    print('| :--- | :--------- | :---   | ----: | -----: | :----  |')


def print_line(fl, sl):
    """Given the first and second line as strings, return a string with
    formatted information for WORDLIST.md
    """
    global not_tested, missing_size, missing_cycles

    HAVE_TEST = 'tested'
    MISSING = 'TBA'
    TEMPLATE = '| {0} | {1} | {2} | {3} | {4} | {5} |'

    l1 = fl[len(MARKER):].split()
    l2 = sl[len(MARKER):].split()

    name = l1[0]
    word = '`{0}`'.format(l2[0][1:-1]) # Include backticks
    size = l2[-5]
    cycles = l2[-3]
    status = l2[-1]

    # Source is a little bit trickier because it can be more than one word
    s_start = sl.find('src:')+5
    s_end = sl.find('b:')-2
    source = sl[s_start:s_end]

    # Statistics
    if size == MISSING:
        missing_size += 1

    if cycles == MISSING:
        missing_cycles += 1

    if status != HAVE_TEST:
        not_tested += 1

    print(TEMPLATE.format(name, word, source, size, cycles, status))


def main():

    with open(SOURCE) as f:
        raw_list = f.readlines()

    data_list = []

    for line in raw_list:

        if line.startswith(MARKER):
            data_list.append(line.strip())

    # Primitive internal testing: If we found an uneven number of lines,
    # something is wrong
    if len(data_list) % 2 != 0:
        print('Found odd number of lines, aborting')
        sys.exit(1)

    use_list = iter(data_list)
    number_of_words = int(len(data_list)/2)

    print_intro()
    print_header()

    while True:

        try:
            first_line = next(use_list)
            second_line = next(use_list)
        except StopIteration:
            break

        print_line(first_line, second_line)

    # At the moment, we only print the number of native words
    print_footer(number_of_words)


if __name__ == '__main__':
    main()
