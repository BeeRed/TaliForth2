 : ( [char] ) parse 2drop ; immediate : .( [char] ) parse type ; immediate : if postpone 0branch here 0 , ; immediate compile-only : then here swap ! ; immediate compile-only : else postpone branch here 0 , here rot ! ; immediate compile-only : repeat postpone again here swap ! ; immediate compile-only : until postpone 0branch , ; immediate compile-only : while postpone 0branch here 0 , swap ; immediate compile-only : case 0 ; immediate compile-only : of postpone over postpone = postpone if postpone drop ; immediate compile-only : endof postpone else ; immediate compile-only : endcase postpone drop begin ?dup while postpone then repeat ; immediate compile-only : defer! >body ! ; : defer@ >body @ ; : is state @ if postpone ['] postpone defer! else ' defer! then ; immediate : action-of state @ if postpone ['] postpone defer@ else ' defer@ then ; immediate : u.r >r 0 <# #s #> r> over - spaces type ; : .r >r dup abs 0 <# #s rot sign #> r> over - spaces type ; : ud. <# #s #> type space ; : ud.r >r <# #s #> r> over - spaces type ; : d. tuck dabs <# #s rot sign #> type space ; : d.r >r tuck dabs <# #s rot sign #> r> over - spaces type ; : 2constant create swap , , does> dup @ swap cell+ @ ; : 2literal swap postpone literal postpone literal ; immediate decimal create blkbuffer 1024 allot variable buffblocknum 0 buffblocknum ! variable buffstatus 0 buffstatus ! variable blk 0 blk ! variable scr 0 scr ! defer BLOCKREAD defer BLOCKWRITE : block_words_deferred cr ." Please assign deferred words BLOCKREAD and BLOCKWRITE " ." to your routines, eg. " cr ." ' myreadroutine IS BLOCKREAD" cr abort ; ' block_words_deferred is BLOCKREAD ' block_words_deferred is BLOCKWRITE : SAVE-BUFFERS buffstatus @ 3 = if blkbuffer buffblocknum @ BLOCKWRITE 1 buffstatus ! then ; : BLOCK dup buffblocknum @ = if buffstatus @ 1 and if drop blkbuffer exit then then buffstatus @ 3 = if blkbuffer buffblocknum @ BLOCKWRITE then dup buffblocknum ! blkbuffer swap BLOCKREAD 1 buffstatus ! blkbuffer ; : UPDATE buffstatus @ 2 or buffstatus ! ; : BUFFER buffstatus @ 3 = if blkbuffer buffblocknum @ BLOCKWRITE then buffblocknum ! 1 buffstatus ! blkbuffer ; : EMPTY-BUFFERS 0 buffstatus ! ; : FLUSH save-buffers empty-buffers ; decimal : LOAD BLK @ >R BLK ! 16 0 do BLK @ block i 64 * + 64 evaluate loop R> dup BLK ! ?dup if block drop then ; : THRU 1+ swap ?do i load loop ; : evaluate blk @ >r 0 blk ! evaluate r> blk ! ; : block_init_ramdrive s" decimal : ramblocks create 1024 4 * allot does> swap 1024 * + ; ramblocks ramdrive : blockread_ramdrive ramdrive swap 1024 move ; : blockwrite_ramdrive ramdrive 1024 move ; ' blockread_ramdrive is blockread ' blockwrite_ramdrive is blockwrite 0 ramdrive 1024 4 * blank" evaluate ; cr .( Tali Forth 2 for the 65c02) cr .( Version BETA 10. Oct 2018 ) cr .( Copyright 2014-2018 Scot W. Stevenson) cr .( Tali Forth 2 comes with absolutely NO WARRANTY) cr .( Type 'bye' to exit) cr 