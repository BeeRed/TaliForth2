 : ( [char] ) parse 2drop ; immediate : .( [char] ) parse type ; immediate : if postpone 0branch here 0 , ; immediate compile-only : then here swap ! ; immediate compile-only : else postpone branch here 0 , here rot ! ; immediate compile-only : repeat postpone again here swap ! ; immediate compile-only : until postpone 0branch , ; immediate compile-only : while postpone 0branch here 0 , swap ; immediate compile-only : case 0 ; immediate compile-only : of postpone over postpone = postpone if postpone drop ; immediate compile-only : endof postpone else ; immediate compile-only : endcase postpone drop begin ?dup while postpone then repeat ; immediate compile-only : defer! >body ! ; : defer@ >body @ ; : is state @ if postpone ['] postpone defer! else ' defer! then ; immediate : action-of state @ if postpone ['] postpone defer@ else ' defer@ then ; immediate : .r >r dup abs 0 <# #s rot sign #> r> over - spaces type ; : ud. <# #s #> type space ; : ud.r >r <# #s #> r> over - spaces type ; : d. tuck dabs <# #s rot sign #> type space ; : d.r >r tuck dabs <# #s rot sign #> r> over - spaces type ; : 2constant create swap , , does> dup @ swap cell+ @ ; : 2literal swap postpone literal postpone literal ; immediate : hexstore dup 2>r begin dup 0<> while bl cleave 2>r 0. 2r> >number dup 0= if 2drop d>s r@ c! r> 1+ >r else 2drop 2drop then repeat 2drop 2r> swap - ; : .wid dup 0= if ." FORTH " drop else dup 1 = if ." EDITOR " drop else dup 2 = if ." ASSEMBLER " drop else dup 3 = if ." ROOT " drop else . then then then then ; : ORDER cr get-order 0 ?do .wid loop space space get-current .wid ; cr .( Tali Forth 2 for the 65c02) cr .( Version BETA 17. Dec 2018 ) cr .( Copyright 2014-2018 Scot W. Stevenson) cr .( Tali Forth 2 comes with absolutely NO WARRANTY) cr .( Type 'bye' to exit) cr 