; Low-level Forth word routines
; Tali Forth 2 for the 65c02
; Scot W. Stevenson <scot.stevenson@gmail.com>
; First version: FEHLT (Tali Forth)
; This version: 24. November 2017

; The skeleton for this file was generated by a script, 
; see the tools folder for more information

; This list is ordered alphabetically by the names of the 
; words, not their strings (so "!" is sorted as "store"). 
; Each word two special status line that begins with "; ##"
; and allows auto-generation of the WORDLIST.md file in the
; docs folder

; ## ABORT ( -- ) "<TBA>"
; ## "abort"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_abort:       nop
z_abort:        rts
.scend

; ## ABORT-QUOTE ( -- ) "<TBA>"
; ## "abort""  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_abort-quote: nop
z_abort-quote:  rts
.scend

; ## ABS ( -- ) "<TBA>"
; ## "abs"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_abs:         nop
z_abs:          rts
.scend

; ## ACCEPT ( -- ) "<TBA>"
; ## "accept"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_accept:      nop
z_accept:       rts
.scend

; ## AGAIN ( -- ) "<TBA>"
; ## "again"  src: ANSI core ext  b: TBA  c: TBA  status: TBA
.scope
xt_again:       nop
z_again:        rts
.scend

; ## ALIGN ( -- ) "<TBA>"
; ## "align"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_align:       nop
z_align:        rts
.scend

; ## ALIGNED ( -- ) "<TBA>"
; ## "aligned"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_aligned:     nop
z_aligned:      rts
.scend

; ## ALLOT ( -- ) "<TBA>"
; ## "allot"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_allot:       nop
z_allot:        rts
.scend

; ## AND ( -- ) "<TBA>"
; ## "and"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_and:         nop
z_and:          rts
.scend

; ## AT-XT ( -- ) "<TBA>"
; ## "at-xy"  src: ANSI facility  b: TBA  c: TBA  status: TBA
.scope
xt_at-xt:       nop
z_at-xt:        rts
.scend

; ## BACKSLASH ( -- ) "<TBA>"
; ## "\"  src: ANSI core ext  b: TBA  c: TBA  status: TBA
.scope
xt_backslash:   nop
z_backslash:    rts
.scend

; ## BASE ( -- ) "<TBA>"
; ## "base"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_base:        nop
z_base:         rts
.scend

; ## BEGIN ( -- ) "<TBA>"
; ## "begin"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_begin:       nop
z_begin:        rts
.scend

; ## BELL ( -- ) "<TBA>"
; ## "bell"  src: Tali Forth  b: TBA  c: TBA  status: TBA
.scope
xt_bell:        nop
z_bell:         rts
.scend

; ## BL ( -- ) "<TBA>"
; ## "bl"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_bl:          nop
z_bl:           rts
.scend

; ## BOUNDS ( -- ) "<TBA>"
; ## "bounds"  src: Gforth  b: TBA  c: TBA  status: TBA
.scope
xt_bounds:      nop
z_bounds:       rts
.scend

; ## BRACKET-CHAR ( -- ) "<TBA>"
; ## "[char]"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_bracket-char:
                nop
z_bracket-char: rts
.scend

; ## BRACKET-TICK ( -- ) "<TBA>"
; ## "[']"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_bracket-tick:
                nop
z_bracket-tick: rts
.scend

; ## BRANCH ( -- ) "<TBA>"
; ## "branch"  src: Tali Forth  b: TBA  c: TBA  status: TBA
.scope
xt_branch:      nop
z_branch:       rts
.scend

; ## BYE ( -- ) "<TBA>"
; ## "bye"  src: ANSI tools ext  b: TBA  c: TBA  status: TBA
.scope
xt_bye:         nop
z_bye:          rts
.scend

; ## C-COMMA ( -- ) "<TBA>"
; ## "c,"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_c-comma:     nop
z_c-comma:      rts
.scend

; ## C-FETCH ( -- ) "<TBA>"
; ## "c@"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_c-fetch:     nop
z_c-fetch:      rts
.scend

; ## C-STORE ( -- ) "<TBA>"
; ## "c!"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_c-store:     nop
z_c-store:      rts
.scend

; ## CELL-PLUS ( -- ) "<TBA>"
; ## "cell+"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_cell-plus:   nop
z_cell-plus:    rts
.scend

; ## CELLS ( -- ) "<TBA>"
; ## "cells"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_cells:       nop
z_cells:        rts
.scend

; ## CHAR ( -- ) "<TBA>"
; ## "char"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_char:        nop
z_char:         rts
.scend

; ## CHAR-PLUS ( -- ) "<TBA>"
; ## "char+"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_char-plus:   nop
z_char-plus:    rts
.scend

; ## CHARS ( -- ) "<TBA>"
; ## "chars"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_chars:       nop
z_chars:        rts
.scend

; ## CMOVE ( -- ) "<TBA>"
; ## "cmove"  src: ANSI string  b: TBA  c: TBA  status: TBA
.scope
xt_cmove:       nop
z_cmove:        rts
.scend

; ## CMOVE-GREATER ( -- ) "<TBA>"
; ## "cmove>"  src: ANSI string  b: TBA  c: TBA  status: TBA
.scope
xt_cmove-greater:
                nop
z_cmove-greater:
                rts
.scend

; ## COLD ( -- ) "<TBA>"
; ## "cold"  src: Tali Forth  b: TBA  c: TBA  status: TBA
.scope
xt_cold:        nop
z_cold:         rts
.scend

; ## COLON ( -- ) "<TBA>"
; ## ":"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_colon:       nop
z_colon:        rts
.scend

; ## COMMA ( -- ) "<TBA>"
; ## ","  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_comma:       nop
z_comma:        rts
.scend

; ## COMPILE-COMMA ( -- ) "<TBA>"
; ## "compile,"  src: ANSI core ext  b: TBA  c: TBA  status: TBA
.scope
xt_compile-comma:
                nop
z_compile-comma:
                rts
.scend

; ## COMPILE-ONLY ( -- ) "<TBA>"
; ## "compile-only"  src: Tali Forth  b: TBA  c: TBA  status: TBA
.scope
xt_compile-only:
                nop
z_compile-only: rts
.scend

; ## CONSTANT ( -- ) "<TBA>"
; ## "constant"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_constant:    nop
z_constant:     rts
.scend

; ## COUNT ( -- ) "<TBA>"
; ## "count"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_count:       nop
z_count:        rts
.scend

; ## CR ( -- ) "<TBA>"
; ## "cr"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_cr:          nop
z_cr:           rts
.scend

; ## CREATE ( -- ) "<TBA>"
; ## "create"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_create:      nop
z_create:       rts
.scend

; ## D-DOT ( -- ) "<TBA>"
; ## "d."  src: ANSI double  b: TBA  c: TBA  status: TBA
.scope
xt_d-dot:       nop
z_d-dot:        rts
.scend

; ## D-MINUS ( -- ) "<TBA>"
; ## "d-"  src: ANSI double  b: TBA  c: TBA  status: TBA
.scope
xt_d-minus:     nop
z_d-minus:      rts
.scend

; ## D-PLUS ( -- ) "<TBA>"
; ## "d+"  src: ANSI double  b: TBA  c: TBA  status: TBA
.scope
xt_d-plus:      nop
z_d-plus:       rts
.scend

; ## D-R ( -- ) "<TBA>"
; ## "d.r"  src: ANSI double  b: TBA  c: TBA  status: TBA
.scope
xt_d-r:         nop
z_d-r:          rts
.scend

; ## D-TO-S ( -- ) "<TBA>"
; ## "d>s"  src: ANSI double  b: TBA  c: TBA  status: TBA
.scope
xt_d-to-s:      nop
z_d-to-s:       rts
.scend

; ## DABS ( -- ) "<TBA>"
; ## "dabs"  src: ANSI double  b: TBA  c: TBA  status: TBA
.scope
xt_dabs:        nop
z_dabs:         rts
.scend

; ## DECIMAL ( -- ) "<TBA>"
; ## "decimal"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_decimal:     nop
z_decimal:      rts
.scend

; ## DEFER ( -- ) "<TBA>"
; ## "defer"  src: ANSI core ext  b: TBA  c: TBA  status: TBA
.scope
xt_defer:       nop
z_defer:        rts
.scend

; ## DEPTH ( -- ) "<TBA>"
; ## "depth"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_depth:       nop
z_depth:        rts
.scend

; ## DIGIT-Q ( -- ) "<TBA>"
; ## "digit?"  src: Tali Forth  b: TBA  c: TBA  status: TBA
.scope
xt_digit-q:     nop
z_digit-q:      rts
.scend

; ## DNEGATE ( -- ) "<TBA>"
; ## "dnegate"  src: ANSI double  b: TBA  c: TBA  status: TBA
.scope
xt_dnegate:     nop
z_dnegate:      rts
.scend

; ## DO ( -- ) "<TBA>"
; ## "do"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_do:          nop
z_do:           rts
.scend

; ## DOES ( -- ) "<TBA>"
; ## "does>"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_does:        nop
z_does:         rts
.scend

; ## DOT ( -- ) "<TBA>"
; ## "."  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_dot:         nop
z_dot:          rts
.scend

; ## DOT-BYTE ( -- ) "<TBA>"
; ## ".byte"  src: Tali Forth  b: TBA  c: TBA  status: TBA
.scope
xt_dot-byte:    nop
z_dot-byte:     rts
.scend

; ## DOT-PARENS ( -- ) "<TBA>"
; ## ".("  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_dot-parens:  nop
z_dot-parens:   rts
.scend

; ## DOT-QUOTE ( -- ) "<TBA>"
; ## ".""  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_dot-quote:   nop
z_dot-quote:    rts
.scend

; ## DOT-R ( -- ) "<TBA>"
; ## ".r"  src: ANSI core ext  b: TBA  c: TBA  status: TBA
.scope
xt_dot-r:       nop
z_dot-r:        rts
.scend

; ## DOT-S ( -- ) "<TBA>"
; ## ".s"  src: ANSI tools  b: TBA  c: TBA  status: TBA
.scope
xt_dot-s:       nop
z_dot-s:        rts
.scend

; ## DROP ( -- ) "<TBA>"
; ## "drop"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_drop:        nop
z_drop:         rts
.scend

; ## DUMP ( -- ) "<TBA>"
; ## "dump"  src: ANSI tools  b: TBA  c: TBA  status: TBA
.scope
xt_dump:        nop
z_dump:         rts
.scend

; ## DUP ( -- ) "<TBA>"
; ## "dup"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_dup:         nop
z_dup:          rts
.scend

; ## ELSE ( -- ) "<TBA>"
; ## "else"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_else:        nop
z_else:         rts
.scend

; ## EMIT ( -- ) "<TBA>"
; ## "emit"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_emit:        nop
z_emit:         rts
.scend

; ## EQUAL ( -- ) "<TBA>"
; ## "="  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_equal:       nop
z_equal:        rts
.scend

; ## ERASE ( -- ) "<TBA>"
; ## "erase"  src: ANSI core ext  b: TBA  c: TBA  status: TBA
.scope
xt_erase:       nop
z_erase:        rts
.scend

; ## EVALUATE ( -- ) "<TBA>"
; ## "evaluate"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_evaluate:    nop
z_evaluate:     rts
.scend

; ## EXECUTE ( -- ) "<TBA>"
; ## "execute"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_execute:     nop
z_execute:      rts
.scend

; ## EXIT ( -- ) "<TBA>"
; ## "exit"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_exit:        nop
z_exit:         rts
.scend

; ## FALSE ( -- ) "<TBA>"
; ## "false"  src: ANSI core ext  b: TBA  c: TBA  status: TBA
.scope
xt_false:       nop
z_false:        rts
.scend

; ## FETCH ( -- ) "<TBA>"
; ## "@"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_fetch:       nop
z_fetch:        rts
.scend

; ## FILL ( -- ) "<TBA>"
; ## "fill"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_fill:        nop
z_fill:         rts
.scend

; ## FIND ( -- ) "<TBA>"
; ## "find"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_find:        nop
z_find:         rts
.scend

; ## FIND-NAME ( -- ) "<TBA>"
; ## "find-name"  src: Gforth  b: TBA  c: TBA  status: TBA
.scope
xt_find-name:   nop
z_find-name:    rts
.scend

; ## FM/MOD ( -- ) "<TBA>"
; ## "fm/mod"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_fm/mod:      nop
z_fm/mod:       rts
.scend

; ## GREATER-BODY ( -- ) "<TBA>"
; ## ">body"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_greater-body:
                nop
z_greater-body: rts
.scend

; ## GREATER-R ( -- ) "<TBA>"
; ## ">r"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_greater-r:   nop
z_greater-r:    rts
.scend

; ## GREATER-THAN ( -- ) "<TBA>"
; ## ">"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_greater-than:
                nop
z_greater-than: rts
.scend

; ## HERE ( -- ) "<TBA>"
; ## "here"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_here:        nop
z_here:         rts
.scend

; ## HEX ( -- ) "<TBA>"
; ## "hex"  src: ANSI core ext  b: TBA  c: TBA  status: TBA
.scope
xt_hex:         nop
z_hex:          rts
.scend

; ## HOLD ( -- ) "<TBA>"
; ## "hold"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_hold:        nop
z_hold:         rts
.scend

; ## I ( -- ) "<TBA>"
; ## "i"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_i:           nop
z_i:            rts
.scend

; ## IF ( -- ) "<TBA>"
; ## "if"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_if:          nop
z_if:           rts
.scend

; ## IMMEDIATE ( -- ) "<TBA>"
; ## "immediate"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_immediate:   nop
z_immediate:    rts
.scend

; ## INPUT ( -- ) "<TBA>"
; ## "input"  src: Tali Forth  b: TBA  c: TBA  status: TBA
.scope
xt_input:       nop
z_input:        rts
.scend

; ## INT-TO-NAME ( -- ) "<TBA>"
; ## "int>name"  src: Tali Forth  b: TBA  c: TBA  status: TBA
.scope
xt_int-to-name: nop
z_int-to-name:  rts
.scend

; ## INVERT ( -- ) "<TBA>"
; ## "invert"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_invert:      nop
z_invert:       rts
.scend

; ## J ( -- ) "<TBA>"
; ## "j"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_j:           nop
z_j:            rts
.scend

; ## KEY ( -- ) "<TBA>"
; ## "key"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_key:         nop
z_key:          rts
.scend

; ## KEY-QUESTION ( -- ) "<TBA>"
; ## "key?"  src: ANSI facility  b: TBA  c: TBA  status: TBA
.scope
xt_key-question:
                nop
z_key-question: rts
.scend

; ## LATESTNT ( -- ) "<TBA>"
; ## "latestnt"  src: Tali Forth  b: TBA  c: TBA  status: TBA
.scope
xt_latestnt:    nop
z_latestnt:     rts
.scend

; ## LATESTXT ( -- ) "<TBA>"
; ## "latestxt"  src: Gforth  b: TBA  c: TBA  status: TBA
.scope
xt_latestxt:    nop
z_latestxt:     rts
.scend

; ## LEAVE ( -- ) "<TBA>"
; ## "leave"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_leave:       nop
z_leave:        rts
.scend

; ## LEFT-BRACKET ( -- ) "<TBA>"
; ## "["  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_left-bracket:
                nop
z_left-bracket: rts
.scend

; ## LESS-NUMBER ( -- ) "<TBA>"
; ## "<#"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_less-number: nop
z_less-number:  rts
.scend

; ## LESS-THAN ( -- ) "<TBA>"
; ## "<"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_less-than:   nop
z_less-than:    rts
.scend

; ## LITERAL ( -- ) "<TBA>"
; ## "literal"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_literal:     nop
z_literal:      rts
.scend

; ## LOOP ( -- ) "<TBA>"
; ## "loop"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_loop:        nop
z_loop:         rts
.scend

; ## LSHIFT ( -- ) "<TBA>"
; ## "lshift"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_lshift:      nop
z_lshift:       rts
.scend

; ## M-STAR ( -- ) "<TBA>"
; ## "m*"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_m-star:      nop
z_m-star:       rts
.scend

; ## MARKER ( -- ) "<TBA>"
; ## "marker"  src: ANSI core ext  b: TBA  c: TBA  status: TBA
.scope
xt_marker:      nop
z_marker:       rts
.scend

; ## MAX ( -- ) "<TBA>"
; ## "max"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_max:         nop
z_max:          rts
.scend

; ## MIN ( -- ) "<TBA>"
; ## "min"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_min:         nop
z_min:          rts
.scend

; ## MINUS ( -- ) "<TBA>"
; ## "-"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_minus:       nop
z_minus:        rts
.scend

; ## MINUS-ROT ( -- ) "<TBA>"
; ## "-rot"  src: Gforth  b: TBA  c: TBA  status: TBA
.scope
xt_minus-rot:   nop
z_minus-rot:    rts
.scend

; ## MINUS-TRAILING ( -- ) "<TBA>"
; ## "-trailing"  src: ANSI string  b: TBA  c: TBA  status: TBA
.scope
xt_minus-trailing:
                nop
z_minus-trailing:
                rts
.scend

; ## MOD ( -- ) "<TBA>"
; ## "mod"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_mod:         nop
z_mod:          rts
.scend

; ## MOVE ( -- ) "<TBA>"
; ## "move"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_move:        nop
z_move:         rts
.scend

; ## NAME-TO-INT ( -- ) "<TBA>"
; ## "name>int"  src: Gforth  b: TBA  c: TBA  status: TBA
.scope
xt_name-to-int: nop
z_name-to-int:  rts
.scend

; ## NAME-TO-STRING ( -- ) "<TBA>"
; ## "name>string"  src: Gforth  b: TBA  c: TBA  status: TBA
.scope
xt_name-to-string:
                nop
z_name-to-string:
                rts
.scend

; ## NC-LIMIT ( -- ) "<TBA>"
; ## "nc-limit"  src: Tali Forth  b: TBA  c: TBA  status: TBA
.scope
xt_nc-limit:    nop
z_nc-limit:     rts
.scend

; ## NEGATE ( -- ) "<TBA>"
; ## "negate"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_negate:      nop
z_negate:       rts
.scend

; ## NEVER-COMPILE ( -- ) "<TBA>"
; ## "never-compile"  src: Tali Forth  b: TBA  c: TBA  status: TBA
.scope
xt_never-compile:
                nop
z_never-compile:
                rts
.scend

; ## NIP ( -- ) "<TBA>"
; ## "nip"  src: ANSI core ext  b: TBA  c: TBA  status: TBA
.scope
xt_nip:         nop
z_nip:          rts
.scend

; ## NUMBER ( -- ) "<TBA>"
; ## "number"  src: Tali Forth  b: TBA  c: TBA  status: TBA
.scope
xt_number:      nop
z_number:       rts
.scend

; ## ONE ( -- ) "<TBA>"
; ## "1"  src: Tali Forth  b: TBA  c: TBA  status: TBA
.scope
xt_one:         nop
z_one:          rts
.scend

; ## ONE-MINUS ( -- ) "<TBA>"
; ## "1-"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_one-minus:   nop
z_one-minus:    rts
.scend

; ## ONE-PLUS ( -- ) "<TBA>"
; ## "1+"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_one-plus:    nop
z_one-plus:     rts
.scend

; ## OR ( -- ) "<TBA>"
; ## "or"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_or:          nop
z_or:           rts
.scend

; ## OUTPUT ( -- ) "<TBA>"
; ## "output"  src: Tali Forth  b: TBA  c: TBA  status: TBA
.scope
xt_output:      nop
z_output:       rts
.scend

; ## OVER ( -- ) "<TBA>"
; ## "over"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_over:        nop
z_over:         rts
.scend

; ## P-CLOSE ( -- ) "<TBA>"
; ## ")"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_p-close:     nop
z_p-close:      rts
.scend

; ## P-DO ( -- ) "<TBA>"
; ## "(do)"  src: Tali Forth  b: TBA  c: TBA  status: TBA
.scope
xt_p-do:        nop
z_p-do:         rts
.scend

; ## P-OPEN ( -- ) "<TBA>"
; ## "("  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_p-open:      nop
z_p-open:       rts
.scend

; ## P-PLUS-LOOP ( -- ) "<TBA>"
; ## "(+loop)"  src: Tali Forth  b: TBA  c: TBA  status: TBA
.scope
xt_p-plus-loop: nop
z_p-plus-loop:  rts
.scend

; ## P-Q-DO ( -- ) "<TBA>"
; ## "(?do)"  src: Tali Forth  b: TBA  c: TBA  status: TBA
.scope
xt_p-q-do:      nop
z_p-q-do:       rts
.scend

; ## PAD ( -- ) "<TBA>"
; ## "pad"  src: ANSI core ext  b: TBA  c: TBA  status: TBA
.scope
xt_pad:         nop
z_pad:          rts
.scend

; ## PAGE ( -- ) "<TBA>"
; ## "page"  src: ANSI facility  b: TBA  c: TBA  status: TBA
.scope
xt_page:        nop
z_page:         rts
.scend

; ## PARSE ( -- ) "<TBA>"
; ## "parse"  src: ANSI core ext  b: TBA  c: TBA  status: TBA
.scope
xt_parse:       nop
z_parse:        rts
.scend

; ## PARSE-NAME ( -- ) "<TBA>"
; ## "parse-name"  src: ANSI core ext  b: TBA  c: TBA  status: TBA
.scope
xt_parse-name:  nop
z_parse-name:   rts
.scend

; ## PICK ( -- ) "<TBA>"
; ## "pick"  src: ANSI core ext  b: TBA  c: TBA  status: TBA
.scope
xt_pick:        nop
z_pick:         rts
.scend

; ## PLUS ( -- ) "<TBA>"
; ## "+"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_plus:        nop
z_plus:         rts
.scend

; ## PLUS-LOOP ( -- ) "<TBA>"
; ## "+loop"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_plus-loop:   nop
z_plus-loop:    rts
.scend

; ## PLUS-STORE ( -- ) "<TBA>"
; ## "+!"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_plus-store:  nop
z_plus-store:   rts
.scend

; ## POSTPONE ( -- ) "<TBA>"
; ## "postpone"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_postpone:    nop
z_postpone:     rts
.scend

; ## QUESTION ( -- ) "<TBA>"
; ## "?"  src: ANSI tools  b: TBA  c: TBA  status: TBA
.scope
xt_question:    nop
z_question:     rts
.scend

; ## QUESTION-DO ( -- ) "<TBA>"
; ## "?do"  src: ANSI core ext  b: TBA  c: TBA  status: TBA
.scope
xt_question-do: nop
z_question-do:  rts
.scend

; ## QUESTION-DUP ( -- ) "<TBA>"
; ## "?dup"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_question-dup:
                nop
z_question-dup: rts
.scend

; ## QUIT ( -- ) "<TBA>"
; ## "quit"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_quit:        nop
z_quit:         rts
.scend

; ## R-FETCH ( -- ) "<TBA>"
; ## "r@"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_r-fetch:     nop
z_r-fetch:      rts
.scend

; ## R-FROM ( -- ) "<TBA>"
; ## "r>"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_r-from:      nop
z_r-from:       rts
.scend

; ## RECURSE ( -- ) "<TBA>"
; ## "recurse"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_recurse:     nop
z_recurse:      rts
.scend

; ## REFILL ( -- ) "<TBA>"
; ## "refill"  src: ANSI core ext  b: TBA  c: TBA  status: TBA
.scope
xt_refill:      nop
z_refill:       rts
.scend

; ## REPEAT ( -- ) "<TBA>"
; ## "repeat"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_repeat:      nop
z_repeat:       rts
.scend

; ## RIGHT-BRACKET ( -- ) "<TBA>"
; ## "]"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_right-bracket:
                nop
z_right-bracket:
                rts
.scend

; ## ROT ( -- ) "<TBA>"
; ## "rot"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_rot:         nop
z_rot:          rts
.scend

; ## RSHIFT ( -- ) "<TBA>"
; ## "rshift"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_rshift:      nop
z_rshift:       rts
.scend

; ## S-QUOTE ( -- ) "<TBA>"
; ## "s""  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_s-quote:     nop
z_s-quote:      rts
.scend

; ## S-TO-D ( -- ) "<TBA>"
; ## "s>d"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_s-to-d:      nop
z_s-to-d:       rts
.scend

; ## SEMICOLON ( -- ) "<TBA>"
; ## ";"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_semicolon:   nop
z_semicolon:    rts
.scend

; ## SIGN ( -- ) "<TBA>"
; ## "sign"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_sign:        nop
z_sign:         rts
.scend

; ## SLASH ( -- ) "<TBA>"
; ## "/"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_slash:       nop
z_slash:        rts
.scend

; ## SLASH-MOD ( -- ) "<TBA>"
; ## "/mod"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_slash-mod:   nop
z_slash-mod:    rts
.scend

; ## SLASH-STRING ( -- ) "<TBA>"
; ## "/string"  src: ANSI string  b: TBA  c: TBA  status: TBA
.scope
xt_slash-string:
                nop
z_slash-string: rts
.scend

; ## SLITERAL ( -- ) "<TBA>"
; ## "sliteral"  src: ANSI string  b: TBA  c: TBA  status: TBA
.scope
xt_sliteral:    nop
z_sliteral:     rts
.scend

; ## SM-SLASH-REM ( -- ) "<TBA>"
; ## "sm/rem"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_sm-slash-rem:
                nop
z_sm-slash-rem: rts
.scend

; ## SOURCE ( -- ) "<TBA>"
; ## "source"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_source:      nop
z_source:       rts
.scend

; ## SOURCE-ID ( -- ) "<TBA>"
; ## "source-id"  src: ANSI core ext  b: TBA  c: TBA  status: TBA
.scope
xt_source-id:   nop
z_source-id:    rts
.scend

; ## SPACE ( -- ) "<TBA>"
; ## "space"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_space:       nop
z_space:        rts
.scend

; ## SPACES ( -- ) "<TBA>"
; ## "spaces"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_spaces:      nop
z_spaces:       rts
.scend

; ## STAR ( -- ) "<TBA>"
; ## "*"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_star:        nop
z_star:         rts
.scend

; ## STAR-SLASH ( -- ) "<TBA>"
; ## "*/"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_star-slash:  nop
z_star-slash:   rts
.scend

; ## STAR-SLASH-MOD ( -- ) "<TBA>"
; ## "*/mod"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_star-slash-mod:
                nop
z_star-slash-mod:
                rts
.scend

; ## STATE ( -- ) "<TBA>"
; ## "state"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_state:       nop
z_state:        rts
.scend

; ## STORE ( -- ) "<TBA>"
; ## "!"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_store:       nop
z_store:        rts
.scend

; ## SWAP ( -- ) "<TBA>"
; ## "swap"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_swap:        nop
z_swap:         rts
.scend

; ## THEN ( -- ) "<TBA>"
; ## "then"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_then:        nop
z_then:         rts
.scend

; ## TICK ( -- ) "<TBA>"
; ## "'"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_tick:        nop
z_tick:         rts
.scend

; ## TO ( -- ) "<TBA>"
; ## "to"  src: ANSI core ext  b: TBA  c: TBA  status: TBA
.scope
xt_to:          nop
z_to:           rts
.scend

; ## TO-IN ( -- ) "<TBA>"
; ## ">in"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_to-in:       nop
z_to-in:        rts
.scend

; ## TO-NUMBER ( -- ) "<TBA>"
; ## ">number"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_to-number:   nop
z_to-number:    rts
.scend

; ## TRUE ( -- ) "<TBA>"
; ## "true"  src: ANSI core ext  b: TBA  c: TBA  status: TBA
.scope
xt_true:        nop
z_true:         rts
.scend

; ## TUCK ( -- ) "<TBA>"
; ## "tuck"  src: ANSI core ext  b: TBA  c: TBA  status: TBA
.scope
xt_tuck:        nop
z_tuck:         rts
.scend

; ## TWO ( -- ) "<TBA>"
; ## "2"  src: Tali Forth  b: TBA  c: TBA  status: TBA
.scope
xt_two:         nop
z_two:          rts
.scend

; ## TWO-DROP ( -- ) "<TBA>"
; ## "2drop"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_two-drop:    nop
z_two-drop:     rts
.scend

; ## TWO-DUP ( -- ) "<TBA>"
; ## "2dup"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_two-dup:     nop
z_two-dup:      rts
.scend

; ## TWO-GREATER-R ( -- ) "<TBA>"
; ## "2>r"  src: ANSI core ext  b: TBA  c: TBA  status: TBA
.scope
xt_two-greater-r:
                nop
z_two-greater-r:
                rts
.scend

; ## TWO-OVER ( -- ) "<TBA>"
; ## "2over"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_two-over:    nop
z_two-over:     rts
.scend

; ## TWO-R-FETCH ( -- ) "<TBA>"
; ## "2r@"  src: ANSI core ext  b: TBA  c: TBA  status: TBA
.scope
xt_two-r-fetch: nop
z_two-r-fetch:  rts
.scend

; ## TWO-R-GREATER ( -- ) "<TBA>"
; ## "2r>"  src: ANSI core ext  b: TBA  c: TBA  status: TBA
.scope
xt_two-r-greater:
                nop
z_two-r-greater:
                rts
.scend

; ## TWO-STAR ( -- ) "<TBA>"
; ## "2*"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_two-star:    nop
z_two-star:     rts
.scend

; ## TWO-SWAP ( -- ) "<TBA>"
; ## "2swap"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_two-swap:    nop
z_two-swap:     rts
.scend

; ## TWO-VARIABLE ( -- ) "<TBA>"
; ## "2variable"  src: ANSI double  b: TBA  c: TBA  status: TBA
.scope
xt_two-variable:
                nop
z_two-variable: rts
.scend

; ## TYPE ( -- ) "<TBA>"
; ## "type"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_type:        nop
z_type:         rts
.scend

; ## U-DOT ( -- ) "<TBA>"
; ## "u."  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_u-dot:       nop
z_u-dot:        rts
.scend

; ## U-DOT-R ( -- ) "<TBA>"
; ## "u.r"  src: ANSI core ext  b: TBA  c: TBA  status: TBA
.scope
xt_u-dot-r:     nop
z_u-dot-r:      rts
.scend

; ## UD-DOT ( -- ) "<TBA>"
; ## "ud."  src: Gforth  b: TBA  c: TBA  status: TBA
.scope
xt_ud-dot:      nop
z_ud-dot:       rts
.scend

; ## UD-DOT-R ( -- ) "<TBA>"
; ## "ud.r"  src: Gforth  b: TBA  c: TBA  status: TBA
.scope
xt_ud-dot-r:    nop
z_ud-dot-r:     rts
.scend

; ## UD-SLASH-MOD ( -- ) "<TBA>"
; ## "ud/mod"  src: Gforth  b: TBA  c: TBA  status: TBA
.scope
xt_ud-slash-mod:
                nop
z_ud-slash-mod: rts
.scend

; ## UM-SLASH-MOD ( -- ) "<TBA>"
; ## "um/mod"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_um-slash-mod:
                nop
z_um-slash-mod: rts
.scend

; ## UM-STAR ( -- ) "<TBA>"
; ## "um*"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_um-star:     nop
z_um-star:      rts
.scend

; ## UNEQUAL ( -- ) "<TBA>"
; ## "<>"  src: ANSI core ext  b: TBA  c: TBA  status: TBA
.scope
xt_unequal:     nop
z_unequal:      rts
.scend

; ## UNLOOP ( -- ) "<TBA>"
; ## "unloop"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_unloop:      nop
z_unloop:       rts
.scend

; ## UNUSED ( -- ) "<TBA>"
; ## "unused"  src: ANSI core ext  b: TBA  c: TBA  status: TBA
.scope
xt_unused:      nop
z_unused:       rts
.scend

; ## VALUE ( -- ) "<TBA>"
; ## "value"  src: ANSI core ext  b: TBA  c: TBA  status: TBA
.scope
xt_value:       nop
z_value:        rts
.scend

; ## VARIABLE ( -- ) "<TBA>"
; ## "variable"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_variable:    nop
z_variable:     rts
.scend

; ## WITHIN ( -- ) "<TBA>"
; ## "within"  src: ANSI core ext  b: TBA  c: TBA  status: TBA
.scope
xt_within:      nop
z_within:       rts
.scend

; ## WORD ( -- ) "<TBA>"
; ## "word"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_word:        nop
z_word:         rts
.scend

; ## WORDS ( -- ) "<TBA>"
; ## "words"  src: ANSI tools  b: TBA  c: TBA  status: TBA
.scope
xt_words:       nop
z_words:        rts
.scend

; ## WORDS-AND-SIZES ( -- ) "<TBA>"
; ## "words&sizes"  src: Tali Forth  b: TBA  c: TBA  status: TBA
.scope
xt_words-and-sizes:
                nop
z_words-and-sizes:
                rts
.scend

; ## WORDSIZE ( -- ) "<TBA>"
; ## "wordsize"  src: ANSI searc  b: TBA  c: TBA  status: TBA
.scope
xt_wordsize:    nop
z_wordsize:     rts
.scend

; ## XOR ( -- ) "<TBA>"
; ## "xor"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_xor:         nop
z_xor:          rts
.scend

; ## ZERO ( -- ) "<TBA>"
; ## "0"  src: Tali Forth  b: TBA  c: TBA  status: TBA
.scope
xt_zero:        nop
z_zero:         rts
.scend

; ## ZERO-BRANCH ( -- ) "<TBA>"
; ## "0branch"  src: Tali Forth  b: TBA  c: TBA  status: TBA
.scope
xt_zero-branch: nop
z_zero-branch:  rts
.scend

; ## ZERO-EQUAL ( -- ) "<TBA>"
; ## "0="  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_zero-equal:  nop
z_zero-equal:   rts
.scend

; ## ZERO-GREATER ( -- ) "<TBA>"
; ## "0>"  src: ANSI core ext  b: TBA  c: TBA  status: TBA
.scope
xt_zero-greater:
                nop
z_zero-greater: rts
.scend

; ## ZERO-LESS ( -- ) "<TBA>"
; ## "0<"  src: ANSI core  b: TBA  c: TBA  status: TBA
.scope
xt_zero-less:   nop
z_zero-less:    rts
.scend

; ## ZERO-UNEQUAL ( -- ) "<TBA>"
; ## "0<>"  src: ANSI core ext  b: TBA  c: TBA  status: TBA
.scope
xt_zero-unequal:
                nop
z_zero-unequal: rts
.scend
