; Assembler for Tali Forth 2 
; Scot W. Stevenson <scot.stevenson@gmail.com>
; First version: 07. Nov 2014 (as tasm65c02)
; This version: 15. Dez 2018

; This is the built-in assembler for Tali Forth 2. Once the assembler wordlist
; is established, the opcodes are available as normal Forth words. The format
; is Simpler Assembler Notation (SAN) which separates the opcode completely
; from the operand. In this case, the operand is entered before the opcode in
; the normal postfix Forth notation (for example, "2000 lda.#"). See the
; assembler documenation in the manual for more detail. SAN itself is discussed
; at https://github.com/scotws/SAN.
;
; The code here was originally used in A Typist's Assembler for the 65c02
; (tasm65c02), see https://github.com/scotws/tasm65c02 for the standalone
; version.

; ==========================================================
; MNEMONICS

; The assembler instructions are realized as individual Forth words with
; entries in the assembler wordlist (see header.asm). We pass the opcode in
; A and the total length of the instruction in bytes (1 to 3) in Y. Note an
; alterantive method would be along the lines of
;
;               jsr asm_common
;               .byte $EA, 01
;
; where the asm_common then uses the address on the Return Stack to pick up the
; opcode and the length. Though this uses one byte and one cycle less per
; assembler instruction in these routines, the current version makes up for
; this by simplifying the code of asm_common.

; The routines are organized alphabetically by SAN mnemonic, not by opcode. The
; SAN and traditional mnemonics are listed after the opcode load instruction.
; This list was generated by a Python script in the tools folder, see there
; for more detail

; TODO make sure lower words are BRA not JMP to asm_common

xt_asm_adc_h:		; adc.# \ ADC.#
		lda #$69
		ldy #2
		jmp asm_common
z_asm_adc_h:

xt_asm_adc_x:		; adc.x \ ADC.X
		lda #$7D
		ldy #3
		jmp asm_common
z_asm_adc_x:

xt_asm_adc_y:		; adc.y \ ADC.Y
		lda #$79
		ldy #3
		jmp asm_common
z_asm_adc_y:

xt_asm_adc_z:		; adc.z \ ADC.Z
		lda #$65
		ldy #2
		jmp asm_common
z_asm_adc_z:

xt_asm_adc_zi:		; adc.zi \ ADC.ZI
		lda #$72
		ldy #2
		jmp asm_common
z_asm_adc_zi:

xt_asm_adc_ziy:		; adc.ziy \ ADC.ZIY
		lda #$71
		ldy #2
		jmp asm_common
z_asm_adc_ziy:

xt_asm_adc_zx:		; adc.zx \ ADC.ZX
		lda #$75
		ldy #2
		jmp asm_common
z_asm_adc_zx:

xt_asm_adc_zxi:		; adc.zxi \ ADC.ZXI
		lda #$61
		ldy #2
		jmp asm_common
z_asm_adc_zxi:

xt_asm_and:		; and \ AND
		lda #$2D
		ldy #3
		jmp asm_common
z_asm_and:

xt_asm_and_h:		; and.# \ AND.#
		lda #$29
		ldy #2
		jmp asm_common
z_asm_and_h:

xt_asm_and_x:		; and.x \ AND.X
		lda #$3D
		ldy #3
		jmp asm_common
z_asm_and_x:

xt_asm_and_y:		; and.y \ AND.Y
		lda #$39
		ldy #3
		jmp asm_common
z_asm_and_y:

xt_asm_and_z:		; and.z \ AND.Z
		lda #$25
		ldy #2
		jmp asm_common
z_asm_and_z:

xt_asm_and_zi:		; and.zi \ AND.ZI
		lda #$32
		ldy #2
		jmp asm_common
z_asm_and_zi:

xt_asm_and_ziy:		; and.ziy \ AND.ZIY
		lda #$31
		ldy #2
		jmp asm_common
z_asm_and_ziy:

xt_asm_and_zx:		; and.zx \ AND.ZX
		lda #$35
		ldy #2
		jmp asm_common
z_asm_and_zx:

xt_asm_and_zxi:		; and.zxi \ AND.ZXI
		lda #$21
		ldy #2
		jmp asm_common
z_asm_and_zxi:

xt_asm_asl:		; asl \ ASL
		lda #$0E
		ldy #3
		jmp asm_common
z_asm_asl:

xt_asm_asl_a:		; asl.a \ ASL.A
		lda #$0A
		ldy #1
		jmp asm_common
z_asm_asl_a:

xt_asm_asl_x:		; asl.x \ ASL.X
		lda #$1E
		ldy #3
		jmp asm_common
z_asm_asl_x:

xt_asm_asl_z:		; asl.z \ ASL.Z
		lda #$06
		ldy #2
		jmp asm_common
z_asm_asl_z:

xt_asm_asl_zx:		; asl.zx \ ASL.ZX
		lda #$16
		ldy #2
		jmp asm_common
z_asm_asl_zx:

xt_asm_bcc:		; bcc \ BCC
		lda #$90
		ldy #2
		jmp asm_common
z_asm_bcc:

xt_asm_bcs:		; bcs \ BCS
		lda #$B0
		ldy #2
		jmp asm_common
z_asm_bcs:

xt_asm_beq:		; beq \ BEQ
		lda #$F0
		ldy #2
		jmp asm_common
z_asm_beq:

xt_asm_bit:		; bit \ BIT
		lda #$2C
		ldy #3
		jmp asm_common
z_asm_bit:

xt_asm_bit_h:		; bit.# \ BIT.#
		lda #$89
		ldy #2
		jmp asm_common
z_asm_bit_h:

xt_asm_bit_x:		; bit.x \ BIT.X
		lda #$3C
		ldy #3
		jmp asm_common
z_asm_bit_x:

xt_asm_bit_z:		; bit.z \ BIT.Z
		lda #$24
		ldy #2
		jmp asm_common
z_asm_bit_z:

xt_asm_bit_zx:		; bit.zx \ BIT.ZX
		lda #$34
		ldy #2
		jmp asm_common
z_asm_bit_zx:

xt_asm_bmi:		; bmi \ BMI
		lda #$30
		ldy #2
		jmp asm_common
z_asm_bmi:

xt_asm_bne:		; bne \ BNE
		lda #$D0
		ldy #2
		jmp asm_common
z_asm_bne:

xt_asm_bpl:		; bpl \ BPL
		lda #$10
		ldy #2
		jmp asm_common
z_asm_bpl:

xt_asm_bra:		; bra \ BRA
		lda #$80
		ldy #2
		jmp asm_common
z_asm_bra:

xt_asm_brk:		; brk \ BRK
		lda #$00
		ldy #2
		jmp asm_common
z_asm_brk:

xt_asm_bvc:		; bvc \ BVC
		lda #$50
		ldy #2
		jmp asm_common
z_asm_bvc:

xt_asm_bvs:		; bvs \ BVS
		lda #$70
		ldy #2
		jmp asm_common
z_asm_bvs:

xt_asm_clc:		; clc \ CLC
		lda #$18
		ldy #1
		jmp asm_common
z_asm_clc:

xt_asm_cld:		; cld \ CLD
		lda #$D8
		ldy #1
		jmp asm_common
z_asm_cld:

xt_asm_cli:		; cli \ CLI
		lda #$58
		ldy #1
		jmp asm_common
z_asm_cli:

xt_asm_clv:		; clv \ CLV
		lda #$B8
		ldy #1
		jmp asm_common
z_asm_clv:

xt_asm_cmp:		; cmp \ CMP
		lda #$CD
		ldy #3
		jmp asm_common
z_asm_cmp:

xt_asm_cmp_h:		; cmp.# \ CMP.#
		lda #$C9
		ldy #2
		jmp asm_common
z_asm_cmp_h:

xt_asm_cmp_x:		; cmp.x \ CMP.X
		lda #$DD
		ldy #3
		jmp asm_common
z_asm_cmp_x:

xt_asm_cmp_y:		; cmp.y \ CMP.Y
		lda #$D9
		ldy #3
		jmp asm_common
z_asm_cmp_y:

xt_asm_cmp_z:		; cmp.z \ CMP.Z
		lda #$C5
		ldy #2
		jmp asm_common
z_asm_cmp_z:

xt_asm_cmp_zi:		; cmp.zi \ CMP.ZI
		lda #$D2
		ldy #2
		jmp asm_common
z_asm_cmp_zi:

xt_asm_cmp_ziy:		; cmp.ziy \ CMP.ZIY
		lda #$D1
		ldy #2
		jmp asm_common
z_asm_cmp_ziy:

xt_asm_cmp_zx:		; cmp.zx \ CMP.ZX
		lda #$D5
		ldy #2
		jmp asm_common
z_asm_cmp_zx:

xt_asm_cmp_zxi:		; cmp.zxi \ CMP.ZXI
		lda #$C1
		ldy #2
		jmp asm_common
z_asm_cmp_zxi:

xt_asm_cpx:		; cpx \ CPX
		lda #$EC
		ldy #3
		jmp asm_common
z_asm_cpx:

xt_asm_cpx_h:		; cpx.# \ CPX.#
		lda #$E0
		ldy #2
		jmp asm_common
z_asm_cpx_h:

xt_asm_cpx_z:		; cpx.z \ CPX.Z
		lda #$E4
		ldy #2
		jmp asm_common
z_asm_cpx_z:

xt_asm_cpy:		; cpy \ CPY
		lda #$CC
		ldy #3
		jmp asm_common
z_asm_cpy:

xt_asm_cpy_h:		; cpy.# \ CPY.#
		lda #$C0
		ldy #2
		jmp asm_common
z_asm_cpy_h:

xt_asm_cpy_z:		; cpy.z \ CPY.Z
		lda #$C4
		ldy #2
		jmp asm_common
z_asm_cpy_z:

xt_asm_dec:		; dec \ DEC
		lda #$CE
		ldy #3
		jmp asm_common
z_asm_dec:

xt_asm_dec_a:		; dec.a \ DEC.A
		lda #$3A
		ldy #1
		jmp asm_common
z_asm_dec_a:

xt_asm_dec_x:		; dec.x \ DEC.X
		lda #$DE
		ldy #3
		jmp asm_common
z_asm_dec_x:

xt_asm_dec_z:		; dec.z \ DEC.Z
		lda #$C6
		ldy #2
		jmp asm_common
z_asm_dec_z:

xt_asm_dec_zx:		; dec.zx \ DEC.ZX
		lda #$D6
		ldy #2
		jmp asm_common
z_asm_dec_zx:

xt_asm_dex:		; dex \ DEX
		lda #$CA
		ldy #1
		jmp asm_common
z_asm_dex:

xt_asm_dey:		; dey \ DEY
		lda #$88
		ldy #1
		jmp asm_common
z_asm_dey:

xt_asm_eor:		; eor \ EOR
		lda #$4D
		ldy #3
		jmp asm_common
z_asm_eor:

xt_asm_eor_h:		; eor.# \ EOR.#
		lda #$49
		ldy #2
		jmp asm_common
z_asm_eor_h:

xt_asm_eor_x:		; eor.x \ EOR.X
		lda #$5D
		ldy #3
		jmp asm_common
z_asm_eor_x:

xt_asm_eor_y:		; eor.y \ EOR.Y
		lda #$59
		ldy #3
		jmp asm_common
z_asm_eor_y:

xt_asm_eor_z:		; eor.z \ EOR.Z
		lda #$45
		ldy #2
		jmp asm_common
z_asm_eor_z:

xt_asm_eor_zi:		; eor.zi \ EOR.ZI
		lda #$52
		ldy #2
		jmp asm_common
z_asm_eor_zi:

xt_asm_eor_ziy:		; eor.ziy \ EOR.ZIY
		lda #$51
		ldy #2
		jmp asm_common
z_asm_eor_ziy:

xt_asm_eor_zx:		; eor.zx \ EOR.ZX
		lda #$55
		ldy #2
		jmp asm_common
z_asm_eor_zx:

xt_asm_eor_zxi:		; eor.zxi \ EOR.ZXI
		lda #$41
		ldy #2
		jmp asm_common
z_asm_eor_zxi:

xt_asm_inc:		; inc \ INC
		lda #$EE
		ldy #3
		jmp asm_common
z_asm_inc:

xt_asm_inc_a:		; inc.a \ INC.A
		lda #$1A
		ldy #1
		jmp asm_common
z_asm_inc_a:

xt_asm_inc_x:		; inc.x \ INC.X
		lda #$FE
		ldy #3
		jmp asm_common
z_asm_inc_x:

xt_asm_inc_z:		; inc.z \ INC.Z
		lda #$E6
		ldy #2
		jmp asm_common
z_asm_inc_z:

xt_asm_inc_zx:		; inc.zx \ INC.ZX
		lda #$F6
		ldy #2
		jmp asm_common
z_asm_inc_zx:

xt_asm_inx:		; inx \ INX
		lda #$E8
		ldy #1
		jmp asm_common
z_asm_inx:

xt_asm_iny:		; iny \ INY
		lda #$C8
		ldy #1
		jmp asm_common
z_asm_iny:

xt_asm_jmp:		; jmp \ JMP
		lda #$4C
		ldy #3
		jmp asm_common
z_asm_jmp:

xt_asm_jmp_i:		; jmp.i \ JMP.I
		lda #$6C
		ldy #3
		jmp asm_common
z_asm_jmp_i:

xt_asm_jmp_xi:		; jmp.xi \ JMP.XI
		lda #$7C
		ldy #3
		jmp asm_common
z_asm_jmp_xi:

xt_asm_jsr:		; jsr \ JSR
		lda #$20
		ldy #3
		jmp asm_common
z_asm_jsr:

xt_asm_lda:		; lda \ LDA
		lda #$AD
		ldy #3
		jmp asm_common
z_asm_lda:

xt_asm_lda_h:		; lda.# \ LDA.#
		lda #$A9
		ldy #2
		jmp asm_common
z_asm_lda_h:

xt_asm_lda_x:		; lda.x \ LDA.X
		lda #$BD
		ldy #3
		jmp asm_common
z_asm_lda_x:

xt_asm_lda_y:		; lda.y \ LDA.Y
		lda #$B9
		ldy #3
		jmp asm_common
z_asm_lda_y:

xt_asm_lda_z:		; lda.z \ LDA.Z
		lda #$A5
		ldy #2
		jmp asm_common
z_asm_lda_z:

xt_asm_lda_zi:		; lda.zi \ LDA.ZI
		lda #$B2
		ldy #2
		jmp asm_common
z_asm_lda_zi:

xt_asm_lda_ziy:		; lda.ziy \ LDA.ZIY
		lda #$B1
		ldy #2
		jmp asm_common
z_asm_lda_ziy:

xt_asm_lda_zx:		; lda.zx \ LDA.ZX
		lda #$B5
		ldy #2
		jmp asm_common
z_asm_lda_zx:

xt_asm_lda_zxi:		; lda.zxi \ LDA.ZXI
		lda #$A1
		ldy #2
		jmp asm_common
z_asm_lda_zxi:

xt_asm_ldx:		; ldx \ LDX
		lda #$AE
		ldy #3
		jmp asm_common
z_asm_ldx:

xt_asm_ldx_h:		; ldx.# \ LDX.#
		lda #$A2
		ldy #2
		jmp asm_common
z_asm_ldx_h:

xt_asm_ldx_y:		; ldx.y \ LDX.Y
		lda #$BE
		ldy #3
		jmp asm_common
z_asm_ldx_y:

xt_asm_ldx_z:		; ldx.z \ LDX.Z
		lda #$A6
		ldy #2
		jmp asm_common
z_asm_ldx_z:

xt_asm_ldx_zy:		; ldx.zy \ LDX.ZY
		lda #$B6
		ldy #2
		jmp asm_common
z_asm_ldx_zy:

xt_asm_ldy:		; ldy \ LDY
		lda #$AC
		ldy #3
		jmp asm_common
z_asm_ldy:

xt_asm_ldy_h:		; ldy.# \ LDY.#
		lda #$A0
		ldy #2
		jmp asm_common
z_asm_ldy_h:

xt_asm_ldy_x:		; ldy.x \ LDY.X
		lda #$BC
		ldy #3
		jmp asm_common
z_asm_ldy_x:

xt_asm_ldy_z:		; ldy.z \ LDY.Z
		lda #$A4
		ldy #2
		jmp asm_common
z_asm_ldy_z:

xt_asm_ldy_zx:		; ldy.zx \ LDY.ZX
		lda #$B4
		ldy #2
		jmp asm_common
z_asm_ldy_zx:

xt_asm_lsr:		; lsr \ LSR
		lda #$4E
		ldy #3
		jmp asm_common
z_asm_lsr:

xt_asm_lsr_a:		; lsr.a \ LSR.A
		lda #$4A
		ldy #1
		jmp asm_common
z_asm_lsr_a:

xt_asm_lsr_x:		; lsr.x \ LSR.X
		lda #$5E
		ldy #3
		jmp asm_common
z_asm_lsr_x:

xt_asm_lsr_z:		; lsr.z \ LSR.Z
		lda #$46
		ldy #2
		jmp asm_common
z_asm_lsr_z:

xt_asm_lsr_zx:		; lsr.zx \ LSR.ZX
		lda #$56
		ldy #2
		jmp asm_common
z_asm_lsr_zx:

xt_asm_nop:		; nop \ NOP
		lda #$EA
		ldy #1
		jmp asm_common
z_asm_nop:

xt_asm_ora:		; ora \ ORA
		lda #$0D
		ldy #3
		jmp asm_common
z_asm_ora:

xt_asm_ora_h:		; ora.# \ ORA.#
		lda #$09
		ldy #2
		jmp asm_common
z_asm_ora_h:

xt_asm_ora_x:		; ora.x \ ORA.X
		lda #$1D
		ldy #3
		jmp asm_common
z_asm_ora_x:

xt_asm_ora_y:		; ora.y \ ORA.Y
		lda #$19
		ldy #3
		jmp asm_common
z_asm_ora_y:

xt_asm_ora_z:		; ora.z \ ORA.Z
		lda #$05
		ldy #2
		jmp asm_common
z_asm_ora_z:

xt_asm_ora_zi:		; ora.zi \ ORA.ZI
		lda #$12
		ldy #2
		jmp asm_common
z_asm_ora_zi:

xt_asm_ora_ziy:		; ora.ziy \ ORA.ZIY
		lda #$11
		ldy #2
		jmp asm_common
z_asm_ora_ziy:

xt_asm_ora_zx:		; ora.zx \ ORA.ZX
		lda #$15
		ldy #2
		jmp asm_common
z_asm_ora_zx:

xt_asm_ora_zxi:		; ora.zxi \ ORA.ZXI
		lda #$01
		ldy #2
		jmp asm_common
z_asm_ora_zxi:

xt_asm_pha:		; pha \ PHA
		lda #$48
		ldy #1
		jmp asm_common
z_asm_pha:

xt_asm_php:		; php \ PHP
		lda #$08
		ldy #1
		jmp asm_common
z_asm_php:

xt_asm_phx:		; phx \ PHX
		lda #$DA
		ldy #1
		jmp asm_common
z_asm_phx:

xt_asm_phy:		; phy \ PHY
		lda #$5A
		ldy #1
		jmp asm_common
z_asm_phy:

xt_asm_pla:		; pla \ PLA
		lda #$68
		ldy #1
		jmp asm_common
z_asm_pla:

xt_asm_plp:		; plp \ PLP
		lda #$28
		ldy #1
		jmp asm_common
z_asm_plp:

xt_asm_plx:		; plx \ PLX
		lda #$FA
		ldy #1
		jmp asm_common
z_asm_plx:

xt_asm_ply:		; ply \ PLY
		lda #$7A
		ldy #1
		jmp asm_common
z_asm_ply:

xt_asm_rol:		; rol \ ROL
		lda #$2E
		ldy #3
		jmp asm_common
z_asm_rol:

xt_asm_rol_a:		; rol.a \ ROL.A
		lda #$2A
		ldy #1
		jmp asm_common
z_asm_rol_a:

xt_asm_rol_x:		; rol.x \ ROL.X
		lda #$3E
		ldy #3
		jmp asm_common
z_asm_rol_x:

xt_asm_rol_z:		; rol.z \ ROL.Z
		lda #$26
		ldy #2
		jmp asm_common
z_asm_rol_z:

xt_asm_rol_zx:		; rol.zx \ ROL.ZX
		lda #$36
		ldy #2
		jmp asm_common
z_asm_rol_zx:

xt_asm_ror:		; ror \ ROR
		lda #$6E
		ldy #3
		jmp asm_common
z_asm_ror:

xt_asm_ror_a:		; ror.a \ ROR.A
		lda #$6A
		ldy #1
		jmp asm_common
z_asm_ror_a:

xt_asm_ror_x:		; ror.x \ ROR.X
		lda #$7E
		ldy #3
		jmp asm_common
z_asm_ror_x:

xt_asm_ror_z:		; ror.z \ ROR.Z
		lda #$66
		ldy #2
		jmp asm_common
z_asm_ror_z:

xt_asm_ror_zx:		; ror.zx \ ROR.ZX
		lda #$76
		ldy #2
		jmp asm_common
z_asm_ror_zx:

xt_asm_rti:		; rti \ RTI
		lda #$40
		ldy #1
		jmp asm_common
z_asm_rti:

xt_asm_rts:		; rts \ RTS
		lda #$60
		ldy #1
		jmp asm_common
z_asm_rts:

xt_asm_sbc:		; sbc \ SBC
		lda #$ED
		ldy #3
		jmp asm_common
z_asm_sbc:

xt_asm_sbc_h:		; sbc.# \ SBC.#
		lda #$E9
		ldy #2
		jmp asm_common
z_asm_sbc_h:

xt_asm_sbc_x:		; sbc.x \ SBC.X
		lda #$FD
		ldy #3
		jmp asm_common
z_asm_sbc_x:

xt_asm_sbc_y:		; sbc.y \ SBC.Y
		lda #$F9
		ldy #3
		jmp asm_common
z_asm_sbc_y:

xt_asm_sbc_z:		; sbc.z \ SBC.Z
		lda #$E5
		ldy #2
		jmp asm_common
z_asm_sbc_z:

xt_asm_sbc_zi:		; sbc.zi \ SBC.ZI
		lda #$F2
		ldy #2
		jmp asm_common
z_asm_sbc_zi:

xt_asm_sbc_ziy:		; sbc.ziy \ SBC.ZIY
		lda #$F1
		ldy #2
		jmp asm_common
z_asm_sbc_ziy:

xt_asm_sbc_zx:		; sbc.zx \ SBC.ZX
		lda #$F5
		ldy #2
		jmp asm_common
z_asm_sbc_zx:

xt_asm_sbc_zxi:		; sbc.zxi \ SBC.ZXI
		lda #$E1
		ldy #2
		jmp asm_common
z_asm_sbc_zxi:

xt_asm_sec:		; sec \ SEC
		lda #$38
		ldy #1
		jmp asm_common
z_asm_sec:

xt_asm_sed:		; sed \ SED
		lda #$F8
		ldy #1
		jmp asm_common
z_asm_sed:

xt_asm_sei:		; sei \ SEI
		lda #$78
		ldy #1
		jmp asm_common
z_asm_sei:

xt_asm_sta:		; sta \ STA
		lda #$8D
		ldy #3
		jmp asm_common
z_asm_sta:

xt_asm_sta_x:		; sta.x \ STA.X
		lda #$9D
		ldy #3
		jmp asm_common
z_asm_sta_x:

xt_asm_sta_y:		; sta.y \ STA.Y
		lda #$99
		ldy #3
		jmp asm_common
z_asm_sta_y:

xt_asm_sta_z:		; sta.z \ STA.Z
		lda #$85
		ldy #2
		jmp asm_common
z_asm_sta_z:

xt_asm_sta_zi:		; sta.zi \ STA.ZI
		lda #$92
		ldy #2
		jmp asm_common
z_asm_sta_zi:

xt_asm_sta_ziy:		; sta.ziy \ STA.ZIY
		lda #$91
		ldy #2
		jmp asm_common
z_asm_sta_ziy:

xt_asm_sta_zx:		; sta.zx \ STA.ZX
		lda #$95
		ldy #2
		jmp asm_common
z_asm_sta_zx:

xt_asm_sta_zxi:		; sta.zxi \ STA.ZXI
		lda #$81
		ldy #2
		jmp asm_common
z_asm_sta_zxi:

xt_asm_stx:		; stx \ STX
		lda #$8E
		ldy #3
		jmp asm_common
z_asm_stx:

xt_asm_stx_z:		; stx.z \ STX.Z
		lda #$86
		ldy #2
		jmp asm_common
z_asm_stx_z:

xt_asm_stx_zy:		; stx.zy \ STX.ZY
		lda #$96
		ldy #2
		jmp asm_common
z_asm_stx_zy:

xt_asm_sty:		; sty \ STY
		lda #$8C
		ldy #3
		jmp asm_common
z_asm_sty:

xt_asm_sty_z:		; sty.z \ STY.Z
		lda #$84
		ldy #2
		jmp asm_common
z_asm_sty_z:

xt_asm_sty_zx:		; sty.zx \ STY.ZX
		lda #$94
		ldy #2
		jmp asm_common
z_asm_sty_zx:

xt_asm_stz:		; stz \ STZ
		lda #$9C
		ldy #3
		jmp asm_common
z_asm_stz:

xt_asm_stz_x:		; stz.x \ STZ.X
		lda #$9E
		ldy #3
		jmp asm_common
z_asm_stz_x:

xt_asm_stz_z:		; stz.z \ STZ.Z
		lda #$64
		ldy #2
		jmp asm_common
z_asm_stz_z:

xt_asm_stz_zx:		; stz.zx \ STZ.ZX
		lda #$74
		ldy #2
		jmp asm_common
z_asm_stz_zx:

xt_asm_tax:		; tax \ TAX
		lda #$AA
		ldy #1
		jmp asm_common
z_asm_tax:

xt_asm_tay:		; tay \ TAY
		lda #$A8
		ldy #1
		jmp asm_common
z_asm_tay:

xt_asm_trb:		; trb \ TRB
		lda #$1C
		ldy #3
		jmp asm_common
z_asm_trb:

xt_asm_trb_z:		; trb.z \ TRB.Z
		lda #$14
		ldy #2
		jmp asm_common
z_asm_trb_z:

xt_asm_tsb:		; tsb \ TSB
		lda #$0C
		ldy #3
		jmp asm_common
z_asm_tsb:

xt_asm_tsb_z:		; tsb.z \ TSB.Z
		lda #$04
		ldy #2
		jmp asm_common
z_asm_tsb_z:

xt_asm_tsx:		; tsx \ TSX
		lda #$BA
		ldy #1
		jmp asm_common
z_asm_tsx:

xt_asm_txa:		; txa \ TXA
		lda #$8A
		ldy #1
		jmp asm_common
z_asm_txa:

xt_asm_txs:		; txs \ TXS
		lda #$9A
		ldy #1
		jmp asm_common
z_asm_txs:

xt_asm_tya:		; tya \ TYA
		lda #$98
		ldy #1
		jmp asm_common
z_asm_tya:

; ==========================================================
; PSEUDO-INSTRUCTIONS AND MACROS

xt_asm_push_a:
        ; """push-a puts the content of the 65c02 Accumulator on the Forth
        ; data stack as the TOS. This is a convience routine that encodes the
        ; instructions  DEX  DEX  STA 0,X  STZ 1,X
        ; """
        ; TODO if we have more than one pseudo-instruction like this, consider
        ; using a common loop for the various byte sequences
.scope
                ldy #0
_loop:
                lda _data,y
                cmp #$FF
                beq _done

                jsr cmpl_a      ; does not change Y
                iny
                bra _loop
_done:
z_asm_push_a:
                rts
_data:
        ; We can't use 00 as a terminator because STA 0,X assembles to 95 00
        .byte $CA, $CA, $95, 00, $74, $01 
        .byte $FF               ; terminator 
.scend


; ==========================================================
; DIRECTIVES

        ; TODO there are currently no directives available. See 
        ; https://github.com/scotws/tasm65c02 for possible future directives


; ==========================================================
; ASSEMBLER HELPER FUNCTIONS

asm_common:
.scope
        ; """Common routine for all opcodes. We arrive here with the opcode in
        ; A and the total length in bytes of the instruction in Y (1 to 3). We
        ; do not need to check for the correct values because we are coming
        ; from the assembler Dictionary and trust our external test suite.
        ; """
                ; Compile opcode. Note cmpl_a does not use Y
                jsr cmpl_a

                cpy #1          ; One byte means no operand, we're done
                beq _done

                ; We have an operand which must be TOS
                cpx #dsp0-1
                bmi +
                jmp underflow
*
                ; We compile the LSB of TOS as the operand we definitely have
                ; before we even test if this is a two- or three-byte
                ; instruction. Little endian CPU means we store this byte first
                lda 0,x
                jsr cmpl_a

                ; If this is a two-byte instruction, we're done
                cpy #2
                beq _done_drop

                ; This must be a three-byte instruction, get the MSB. 
                lda 1,x
                jsr cmpl_a      ; Fall through to _done_drop

_done_drop:
                inx
                inx             ; Fall through to _done
_done:
                rts             ; Returns to original caller
.scend        

; END
