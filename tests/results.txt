Tali Forth 2 default kernel for py65mon (18. Feb 2018)

redefined evaluate 
Tali Forth 2 for the 65c02
Version BETA 03. Nov 2018 
Copyright 2014-2018 Scot W. Stevenson
Tali Forth 2 comes with absolutely NO WARRANTY
Type 'bye' to exit
\ From: John Hayes S1I  ok
\ Subject: tester.fr  ok
\ Date: Mon, 27 Nov 95 13:10:09 PST    ok
  ok
\ Modified by SamCo 2018-05 for testing Tali Forth 2.  ok
\ The main change is lowercasing all of the words as Tali  ok
\ is case sensitive, as well as replacing tabs with spaces.  ok
\ A word to display the actual (erroneous) results was also added.  ok
\ Modified by SamCo 2018-10 to facilitate using standard ANS tests.  ok
\ The testing words were changed from { and } to T{ and }T to  ok
\ match the testing words currently being used by ANS standard tests.  ok
  ok
\ (C) 1995 JOHNS HOPKINS UNIVERSITY / APPLIED PHYSICS LABORATORY  ok
\ MAY BE DISTRIBUTED FREELY AS LONG AS THIS COPYRIGHT NOTICE REMAINS.  ok
hex  ok
  ok
\ Set the following flag to true for more verbose output; this may allow you to  ok
\ tell which test caused your system to hang. With Tali Forth, this is useless  ok
\ because the Python script echoes all the output anyway.  ok
variable verbose  false verbose !  ok
  ok
variable actual-depth   \ stack record  ok
create actual-results  20 cells allot  ok
  ok
\ Empty stack: handles underflowed stack too  ok
: empty-stack ( ... -- )   compiled
   depth ?dup if   compiled
      dup 0< if   compiled
         negate 0 do 0 loop   compiled
      else   compiled
         0 do drop loop   compiled
      then   compiled
   then ;  ok
  ok
\ Print the previous test's actual results. Added by SamCo 2018-05   ok
: show-results ( -- )   compiled
   s"  ACTUAL RESULT: { " type  compiled
   actual-depth @ 0 ?do  compiled
      actual-results   compiled
      actual-depth @ i - 1- \ Print them in reverse order to match test.  compiled
      cells + @ .  compiled
   loop  compiled
   s" }" type ;  ok
  ok
\ Display an error message followed by the line that had the error  ok
: error  \ ( C-ADDR U -- )   compiled
   type source type \ display line corresponding to error  compiled
   empty-stack      \ throw away every thing else  compiled
   show-results ;   \ added by SamCo to show what actually happened  ok
  ok
\ Syntactic sugar  ok
: T{  ( -- ) ;  ok
  ok
\ Record depth and content of stack  ok
: ->  ( ... -- )   compiled
   depth dup actual-depth !  \ record depth  compiled
   ?dup if                   \ if there is something on stack ...  compiled
      0 do   compiled
         actual-results i cells + !   compiled
      loop                   \ ... save it  compiled
   then ;  ok
  ok
\ Compare stack (expected) contents with saved (actual) contents  ok
: }T  ( ... -- )   compiled
   depth actual-depth @ = if     \ if depths match  compiled
      depth ?dup if              \ if there is something on the stack  compiled
         0 do                    \ for each stack item  compiled
            actual-results i cells + @  \ compare actual with expected  compiled
            <> if   compiled
               s" INCORRECT RESULT: " error leave   compiled
            then  compiled
         loop  compiled
      then  compiled
   else                          \ depth mismatch  compiled
      s" WRONG NUMBER OF RESULTS: " error  compiled
   then ;  ok
  ok
\ Talking comment  ok
: testing ( -- )   compiled
   source verbose @ if   compiled
      dup >r type cr r> >in !  compiled
   else >in ! drop  compiled
   then ;  ok
  ok
 ( Running test 'ed' from file 'ed.fs' )  ok
\ -----------------------------------------------------------    ok
testing ed words: ed  ok
  ok
marker ed_test_marker  ok
  ok
\ Ed is not part of the ANS Forth specification so we're making this  ok
\ up ourselves as we go along. Note that ed doesn't give responses  ok
\ for a lot of things, and errors are only '?'. Also, even worse, our  ok
\ test suite is set to check what's on the stack, and that isn't  ok
\ useful, so we have to create a whole new harness.  ok
  ok
create abuf 40 chars allot  ok
  ok
\ Pass an accumator with a input string and the output string we  ok
\ looking for. We have to explicitly check for 0 from compare  ok
\ because it might return a -1, which could hide errors if we just  ok
\ add up the responses  ok
: in->out? ( f addr1 u1 addr2 u2 -- f )   compiled
   cr 2swap type ."  <> "  ( f addr2 u2 )  compiled
   abuf 40 accept          ( f addr2 u2 u3 )  compiled
   abuf swap               ( f addr2 u2 addr3 u3 )  compiled
   compare                 ( f n )  \ is 0 if strings are equal, what we want  compiled
   0=                      ( f f )   compiled
   and                     ( f )    \ If one respose is not 0, we flip the flag  compiled
;   ok
  ok
: ed-test ( -- f )   compiled
   true                    \ all is well at the beginning  compiled
   s" ed" s"  " in->out?    \ empty string  compiled
   s" d" s" ?" in->out?    \ can't delete what we don't have   compiled
   s" q" s"  " in->out?     \ should be able to quit  compiled
;  ok
  ok
\ This is weird, but this is how it works: The responses to the challenges  ok
\ in the line above come line-by-line below the test function call, including  ok
\ empty lines. This makes it really, really hard to see what is going on,  ok
\ because we have to type whitespace and all, but this is how it works. Note  ok
\ a command that has no response has to have one empty space. This will get  ok
\ easier once we include the comment command to ed  ok
T{ ed-test -> true }T 
ed <>   
d <> ? 
q <>    ok
\ Release memory used  ok
ed_test_marker  ok
  ok
bye 