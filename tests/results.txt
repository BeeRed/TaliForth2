Tali Forth 2 default kernel for py65mon (18. Feb 2018)


Tali Forth 2 for the 65c02
Version BETA 28. Dec 2018 
Copyright 2014-2018 Scot W. Stevenson
Tali Forth 2 comes with absolutely NO WARRANTY
Type 'bye' to exit
\ From: John Hayes S1I  ok
\ Subject: tester.fr  ok
\ Date: Mon, 27 Nov 95 13:10:09 PST    ok
  ok
\ Modified by SamCo 2018-05 for testing Tali Forth 2.  ok
\ The main change is lowercasing all of the words as Tali  ok
\ is case sensitive, as well as replacing tabs with spaces.  ok
\ A word to display the actual (erroneous) results was also added.  ok
\ Modified by SamCo 2018-10 to facilitate using standard ANS tests.  ok
\ The testing words were changed from { and } to T{ and }T to  ok
\ match the testing words currently being used by ANS standard tests.  ok
  ok
\ (C) 1995 JOHNS HOPKINS UNIVERSITY / APPLIED PHYSICS LABORATORY  ok
\ MAY BE DISTRIBUTED FREELY AS LONG AS THIS COPYRIGHT NOTICE REMAINS.  ok
hex  ok
  ok
\ Set the following flag to true for more verbose output; this may allow you to  ok
\ tell which test caused your system to hang. With Tali Forth, this is useless  ok
\ because the Python script echoes all the output anyway.  ok
variable verbose  false verbose !  ok
  ok
variable actual-depth   \ stack record  ok
create actual-results  20 cells allot  ok
  ok
  ok
\ Empty stack: handles underflowed stack too  ok
: empty-stack ( ... -- )   compiled
   depth ?dup if   compiled
      dup 0< if   compiled
         negate 0 do 0 loop   compiled
      else   compiled
         0 do drop loop   compiled
      then   compiled
   then ;  ok
  ok
\ Print the previous test's actual results. Added by SamCo 2018-05   ok
: show-results ( -- )   compiled
   s"  ACTUAL RESULT: { " type  compiled
   actual-depth @ 0 ?do  compiled
      actual-results   compiled
      actual-depth @ i - 1- \ Print them in reverse order to match test.  compiled
      cells + @ .  compiled
   loop  compiled
   s" }" type ;  ok
  ok
\ Display an error message followed by the line that had the error  ok
: error  \ ( C-ADDR U -- )   compiled
   type source type \ display line corresponding to error  compiled
   empty-stack      \ throw away every thing else  compiled
   show-results ;   \ added by SamCo to show what actually happened  ok
  ok
\ Syntactic sugar  ok
: T{  ( -- ) ;  ok
  ok
\ Record depth and content of stack  ok
: ->  ( ... -- )   compiled
   depth dup actual-depth !  \ record depth  compiled
   ?dup if                   \ if there is something on stack ...  compiled
      0 do   compiled
         actual-results i cells + !   compiled
      loop                   \ ... save it  compiled
   then ;  ok
  ok
\ Compare stack (expected) contents with saved (actual) contents  ok
: }T  ( ... -- )   compiled
   depth actual-depth @ = if     \ if depths match  compiled
      depth ?dup if              \ if there is something on the stack  compiled
         0 do                    \ for each stack item  compiled
            actual-results i cells + @  \ compare actual with expected  compiled
            <> if   compiled
               s" INCORRECT RESULT: " error leave   compiled
            then  compiled
         loop  compiled
      then  compiled
   else                          \ depth mismatch  compiled
      s" WRONG NUMBER OF RESULTS: " error  compiled
   then ;  ok
  ok
\ Talking comment  ok
: testing ( -- )   compiled
   source verbose @ if   compiled
      dup >r type cr r> >in !  compiled
   else >in ! drop  compiled
   then ;  ok
  ok
 ( Running test 'ed' from file 'ed.fs' )  ok
\ ------------------------------------------------------------------------  ok
testing editor words: ed  ok
  ok
decimal  ok
marker ed-tests   ok
  ok
\ Use 10000 (decimal) as write area. This may have to be changed if tests crash  ok
\ to a higher value. Currently, we are already using 7000 (check with HERE).  ok
\ Note ed tests will usually return with ( 0 0 ) on the stack because of the   ok
\ target address  ok
  ok
\ === SIMPLE TESTS ===  ok
  ok
\ --- a command ---  ok
  ok
\ Simple adding of text; want aaaa bbbb  ok
ed 
a 
aaaa 
bbbb 
. 
10000w 
10 
q  ok
  ok
T{ 10000 10  s\" aaaa\nbbbb\n" compare -> 10000 10 0 }T  ok
  ok
\ Add text to end of existing text; want aaaa bbbb cccc  ok
ed 
a 
aaaa 
bbbb 
. 
a 
cccc 
. 
10000w 
15 
q  ok
T{ 10000 15  s\" aaaa\nbbbb\ncccc\n" compare -> 10000 15 0 }T  ok
  ok
  ok
\ Add a line between two lines of existing text  ok
\ Want aaaa cccc bbbb  ok
ed 
a 
aaaa 
bbbb 
. 
1a 
cccc 
. 
10000w 
15 
q  ok
T{ 10000 15  s\" aaaa\ncccc\nbbbb\n" compare -> 10000 15 0 }T  ok
  ok
\ Add two lines between two existing lines of existing text  ok
\ Want: aaaa cccc dddd bbbb  ok
ed 
a 
aaaa 
bbbb 
. 
1a 
cccc 
dddd 
. 
10000w 
20 
q  ok
T{ 10000 20  s\" aaaa\ncccc\ndddd\nbbbb\n" compare -> 10000 20 0 }T  ok
  ok
\ Add a line above existing text; want bbbb aaaa   ok
ed 
a 
aaaa 
. 
0a 
bbbb 
. 
10000w 
10 
q  ok
T{ 10000 10  s\" bbbb\naaaa\n" compare -> 10000 10 0 }T  ok
  ok
  ok
\ --- d command ---  ok
  ok
\ Delete first of two lines; want bbbb  ok
ed 
a 
aaaa 
bbbb 
. 
1d 
10000w 
5 
q  ok
T{ 10000 5  s\" bbbb\n" compare -> 10000 5 0 }T  ok
  ok
\ Delete second of two lines; want aaaa  ok
ed 
a 
aaaa 
bbbb 
. 
2d 
10000w 
5 
q  ok
T{ 10000 5  s\" aaaa\n" compare -> 10000 5 0 }T  ok
  ok
\ --- i command ---  ok
  ok
\ Simple adding of text; want qqqq rrrr  ok
ed 
i 
qqqq 
rrrr 
. 
10000w 
10 
q  ok
T{ 10000 10  s\" qqqq\nrrrr\n" compare -> 10000 10 0 }T  ok
  ok
\ Add text to start of existing text; want tttt dddd aaaa  ok
ed 
a 
dddd 
aaaa 
. 
1i 
tttt 
. 
10000w 
15 
q  ok
T{ 10000 15  s\" tttt\ndddd\naaaa\n" compare -> 10000 15 0 }T  ok
  ok
  ok
\ Add a line between two lines of existing text  ok
\ Want mmmm oooo gggg  ok
ed 
a 
mmmm 
gggg 
. 
2i 
oooo 
. 
10000w 
15 
q  ok
T{ 10000 15  s\" mmmm\noooo\ngggg\n" compare -> 10000 15 0 }T  ok
  ok
\ Add two lines between two existing lines of existing text  ok
\ Want: tttt cccc dddd ssss  ok
ed 
a 
tttt 
ssss 
. 
2i 
cccc 
dddd 
. 
10000w 
20 
q  ok
T{ 10000 20  s\" tttt\ncccc\ndddd\nssss\n" compare -> 10000 20 0 }T  ok
  ok
\ Add a line above existing text; want uuuu zzzz   ok
ed 
a 
zzzz 
. 
0i 
uuuu 
. 
10000w 
10 
q  ok
T{ 10000 10  s\" uuuu\nzzzz\n" compare -> 10000 10 0 }T  ok
  ok
  ok
\ === OUTPUT TESTS ===  ok
  ok
\ These involve redirecting output and have the potential to crash the system.  ok
\ They also assume that the assembler is working as well as the wordlist  ok
\ functions. Note that the tests have to be defined as part of a word to work  ok
\ correctly. Based on code by Sam Colwell, see  ok
\ https://github.com/scotws/TaliForth2/issues/159 for a discussion of how this  ok
\ works  ok
  ok
assembler-wordlist >order  ok
assembler-wordlist set-current  ok
  ok
variable 'old-output  ok
variable #saved-output  ok
create 'saved-output  1000 allot  ok
  ok
\ Retrieves the output string we saved after redirection  ok
: saved-string ( -- addr u )  'saved-output #saved-output @ ;  ok
  ok
\ We write our own output routine to replace the built-in one. Uses the  ok
\ assembler macro push-a  ok
: save-output ( c -- )   compiled
   [ push-a ]  \ "dex dex  sta 0,x  stz 1,x" - push A to TOS  compiled
   [ phy 36 lda.z pha  37 lda.z pha ] \ Save y and tmp1.  compiled
   saved-string + c!  \ Save the character.  compiled
   1 #saved-output +! \ Increment the string length.  compiled
   [ pla 37 sta.z pla  36 sta.z ply ] \ Restore y and tmp1.  compiled
;  ok
  ok
: redirect-output ( -- )  compiled
   output @  'old-output !     \ save the original vector  compiled
   ['] save-output  output !   \ replace vector with our routine  compiled
   0 #saved-output ! ;         \ empty the string to start  ok
  ok
: restore-output ( -- )  'old-output @  output ! ;   ok
  ok
\ ---- Internal test for output redirection (tests within tests!) ----  ok
  ok
: internal-output-test  ( -- )  compiled
   redirect-output ." Redirection works, let's do this! " restore-output ;   ok
  ok
internal-output-test  ok
cr .( >>>> )  saved-string type  .( <<<< ) cr 
>>>> Redirection works, let's do this! <<<< 
 ok
  ok
  ok
\ ---- Finally the actual redirection tests ----  ok
  ok
  ok
\ Most simple test: Start and end  ok
redirect-output  ok
2drop   ok
T{ saved-string s\"  ok\ned \nq  ok\nrestore-output  " compare -> 0 }T  ok
  ok
  ok
\ ---- Cleanup from redirection tests ----  ok
previous  ok
forth-wordlist set-current  ok
  ok
  ok
\ === END OF ED TESTS ===  ok
  ok
\ Free memory used for these tests  ok
ed-tests  ok
  ok
bye 