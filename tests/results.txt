\ From: John Hayes S1I  ok
\ Subject: tester.fr  ok
\ Date: Mon, 27 Nov 95 13:10:09 PST    ok
  ok
\ Modified by SamCo 2018-05 for testing Tali Forth 2.  ok
\ The main change is lowercasing all of the words as Tali  ok
\ is case sensitive, as well as replacing tabs with spaces.  ok
\ A word to display the actual (erroneous) results was also added.  ok
  ok
\ (C) 1995 JOHNS HOPKINS UNIVERSITY / APPLIED PHYSICS LABORATORY  ok
\ MAY BE DISTRIBUTED FREELY AS LONG AS THIS COPYRIGHT NOTICE REMAINS.  ok
hex  ok
  ok
\ Set the following flag to true for more verbose output; this may allow you to  ok
\ tell which test caused your system to hang. With Tali Forth, this is useless  ok
\ because the Python script echoes all the output anyway.  ok
variable verbose  false verbose !  ok
  ok
variable actual-depth   \ stack record  ok
create actual-results  20 cells allot  ok
  ok
\ Empty stack: handles underflowed stack too  ok
: empty-stack ( ... -- )   compiled
   depth ?dup if   compiled
      dup 0< if   compiled
         negate 0 do 0 loop   compiled
      else   compiled
         0 do drop loop   compiled
      then   compiled
   then ;  ok
  ok
\ Print the previous test's actual results. Added by SamCo 2018-05   ok
: show-results ( -- )   compiled
   s"  ACTUAL RESULT: { " type  compiled
   actual-depth @ 0 ?do  compiled
      actual-results   compiled
      actual-depth @ i - 1- \ Print them in reverse order to match test.  compiled
      cells + @ .  compiled
   loop  compiled
   s" }" type ;  ok
  ok
\ Display an error message followed by the line that had the error  ok
: error  \ ( C-ADDR U -- )   compiled
   type source type \ display line corresponding to error  compiled
   empty-stack      \ throw away every thing else  compiled
   show-results ;   \ added by SamCo to show what actually happened  ok
  ok
\ Syntactic sugar  ok
: {  ( -- ) ;  ok
  ok
\ Record depth and content of stack  ok
: ->  ( ... -- )   compiled
   depth dup actual-depth !  \ record depth  compiled
   ?dup if                   \ if there is something on stack ...  compiled
      0 do   compiled
         actual-results i cells + !   compiled
      loop                   \ ... save it  compiled
   then ;  ok
  ok
\ Compare stack (expected) contents with saved (actual) contents  ok
: }  ( ... -- )   compiled
   depth actual-depth @ = if     \ if depths match  compiled
      depth ?dup if              \ if there is something on the stack  compiled
         0 do                    \ for each stack item  compiled
            actual-results i cells + @  \ compare actual with expected  compiled
            <> if   compiled
               s" INCORRECT RESULT: " error leave   compiled
            then  compiled
         loop  compiled
      then  compiled
   else                          \ depth mismatch  compiled
      s" WRONG NUMBER OF RESULTS: " error  compiled
   then ;  ok
  ok
\ Talking comment  ok
: testing ( -- )   compiled
   source verbose @ if   compiled
      dup >r type cr r> >in !  compiled
   else >in ! drop  compiled
   then ;  ok
\ ------------------------------------------------------------------------  ok
testing string words: /string -trailing blank sliteral  ok
decimal  ok
  ok
\ Note the sequence of tests is fixed by https://forth-standard.org/standard/testsuite  ok
  ok
{ : s1 s" abcdefghijklmnopqrstuvwxyz" ; -> }  ok
   ok
{ s1  5 /string -> s1 swap 5 + swap 5 - }  ok
{ s1 10 /string -4 /string -> s1 6 /string }  ok
{ s1  0 /string -> s1 }  ok
  ok
{ : s2 s" abc"   ; -> }  ok
{ : s3 s" jklmn" ; -> }  ok
{ : s4 s" z"     ; -> }  ok
{ : s5 s" mnoq"  ; -> }  ok
{ : s6 s" 12345" ; -> }  ok
{ : s7 s" "      ; -> }  ok
  ok
( TODO SEARCH not implemented )  ok
\ { s1 s2 search -> s1 <true>  }    ok
\ { s1 s3 search -> s1  9 /string <true>  }  ok
\ { s1 s4 search -> s1 25 /string <true>  }  ok
\ { s1 s5 search -> s1 <false> }  ok
\ { s1 s6 search -> s1 <false> }  ok
\ { s1 s7 search -> s1 <true>  }   ok
  ok
{ :  s8 s" abc  " ; -> }  ok
{ :  s9 s"      " ; -> }  ok
{ : s10 s"    a " ; -> }  ok
  ok
{  s1 -trailing -> s1 }        \ "abcdefghijklmnopqrstuvwxyz"  ok
{  s8 -trailing -> s8 2 - }    \ "abc "  ok
{  s7 -trailing -> s7 }        \ " " Stack underflow
{  s9 -trailing -> s9 drop 0 } \ " "  ok
{ s10 -trailing -> s10 1- }    \ " a "  ok
  ok
( TODO COMPARE not implemented )  ok
\ { s1        s1 compare ->  0  }  ok
\ { s1  pad swap cmove   ->     }    \ copy s1 to PAD  ok
\ { s1  pad over compare ->  0  }  ok
\ { s1     pad 6 compare ->  1  }  ok
\ { pad 10    s1 compare -> -1  }  ok
\ { s1     pad 0 compare ->  1  }  ok
\ { pad  0    s1 compare -> -1  }  ok
\ { s1        s6 compare ->  1  }  ok
\ { s6        s1 compare -> -1  }  ok
  ok
\ : "abdde" s" abdde" ;  ok
\ : "abbde" s" abbde" ;  ok
\ : "abcdf" s" abcdf" ;  ok
\ : "abcdee" s" abcdee" ;  ok
  ok
\ { s1 "abdde"  compare -> -1 }  ok
\ { s1 "abbde"  compare ->  1 }  ok
\ { s1 "abcdf"  compare -> -1 }  ok
\ { s1 "abcdee" compare ->  1 }  ok
  ok
: s11 s" 0abc" ;  ok
: s12 s" 0aBc" ;  ok
  ok
\ { s11 s12 compare ->  1 }  ok
\ { s12 s11 compare -> -1 }  ok
  ok
: s13 s" aaaaa a" ;            \ six spaces  ok
  ok
{ pad 25 char a fill -> }      \ fill PAD with 25 'a's  ok
{ pad 5 chars + 6 blank -> }   \ put 6 spaced from character 5  ok
\ { pad 12 s13 compare -> 0 }    \ PAD should now be same as s13 TODO  ok
  ok
\ CMOVE and CMOVE> propogation tests taken from   ok
\ https://forth-standard.org/standard/string/CMOVE and .../CMOVEtop  ok
decimal  ok
create cmbuf  97 c, 98 c, 99 c, 100 c, \ "abcd"  ok
: seecmbuf  cmbuf c@  cmbuf char+ c@  cmbuf char+ char+ c@  cmbuf char+ char+ char+ c@ ;  ok
{ cmbuf dup char+ 3 cmove -> }  ok
{ seecmbuf -> 97 97 97 97 } \ "aaaa"  ok
  ok
create cmubuf  97 c, 98 c, 99 c, 100 c, \ "abcd"  ok
: seecmubuf  cmubuf c@  cmubuf char+ c@  cmubuf char+ char+ c@  cmubuf char+ char+ char+ c@ ;  ok
{ cmubuf dup char+ swap 3 cmove> -> }  ok
{ seecmubuf -> 100 100 100 100 } \ "dddd"  ok
  ok
( TODO SLITERAL test not implemented yet because it requires COMPARE)   ok
\ { : s14 [ s1 ] sliteral ; -> }   ok
\ { s1 s14 compare -> 0 }  ok
\ { s1 s14 rot = rot rot = -> <true> <false> }  ok
  ok
( TODO REPLACES not implemented yet )  ok
( TODO SUBSTITUTE not implemented yet )  ok
( TODO UNESCAPE not implemented yet )  ok
  ok
  ok
