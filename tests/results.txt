Tali Forth 2 default kernel for py65mon (18. Feb 2018)

Tali Forth 2 for the 65c02
Version BETA 04. July 2018 
Copyright 2014-2018 Scot W. Stevenson
Tali Forth 2 comes with absolutely NO WARRANTY
Type 'bye' to exit
\ From: John Hayes S1I  ok
\ Subject: tester.fr  ok
\ Date: Mon, 27 Nov 95 13:10:09 PST    ok
  ok
\ Modified by SamCo 2018-05 for testing Tali Forth 2.  ok
\ The main change is lowercasing all of the words as Tali  ok
\ is case sensitive, as well as replacing tabs with spaces.  ok
\ A word to display the actual (erroneous) results was also added.  ok
  ok
\ (C) 1995 JOHNS HOPKINS UNIVERSITY / APPLIED PHYSICS LABORATORY  ok
\ MAY BE DISTRIBUTED FREELY AS LONG AS THIS COPYRIGHT NOTICE REMAINS.  ok
hex  ok
  ok
\ Set the following flag to true for more verbose output; this may allow you to  ok
\ tell which test caused your system to hang. With Tali Forth, this is useless  ok
\ because the Python script echoes all the output anyway.  ok
variable verbose  false verbose !  ok
  ok
variable actual-depth   \ stack record  ok
create actual-results  20 cells allot  ok
  ok
\ Empty stack: handles underflowed stack too  ok
: empty-stack ( ... -- )   compiled
   depth ?dup if   compiled
      dup 0< if   compiled
         negate 0 do 0 loop   compiled
      else   compiled
         0 do drop loop   compiled
      then   compiled
   then ;  ok
  ok
\ Print the previous test's actual results. Added by SamCo 2018-05   ok
: show-results ( -- )   compiled
   s"  ACTUAL RESULT: { " type  compiled
   actual-depth @ 0 ?do  compiled
      actual-results   compiled
      actual-depth @ i - 1- \ Print them in reverse order to match test.  compiled
      cells + @ .  compiled
   loop  compiled
   s" }" type ;  ok
  ok
\ Display an error message followed by the line that had the error  ok
: error  \ ( C-ADDR U -- )   compiled
   type source type \ display line corresponding to error  compiled
   empty-stack      \ throw away every thing else  compiled
   show-results ;   \ added by SamCo to show what actually happened  ok
  ok
\ Syntactic sugar  ok
: {  ( -- ) ;  ok
  ok
\ Record depth and content of stack  ok
: ->  ( ... -- )   compiled
   depth dup actual-depth !  \ record depth  compiled
   ?dup if                   \ if there is something on stack ...  compiled
      0 do   compiled
         actual-results i cells + !   compiled
      loop                   \ ... save it  compiled
   then ;  ok
  ok
\ Compare stack (expected) contents with saved (actual) contents  ok
: }  ( ... -- )   compiled
   depth actual-depth @ = if     \ if depths match  compiled
      depth ?dup if              \ if there is something on the stack  compiled
         0 do                    \ for each stack item  compiled
            actual-results i cells + @  \ compare actual with expected  compiled
            <> if   compiled
               s" INCORRECT RESULT: " error leave   compiled
            then  compiled
         loop  compiled
      then  compiled
   else                          \ depth mismatch  compiled
      s" WRONG NUMBER OF RESULTS: " error  compiled
   then ;  ok
  ok
\ Talking comment  ok
: testing ( -- )   compiled
   source verbose @ if   compiled
      dup >r type cr r> >in !  compiled
   else >in ! drop  compiled
   then ;  ok
  ok
 ( Running test 'cycles' from file 'cycles.fs' )  ok
\ ------------------------------------------------------------------------  ok
testing cycle counts  ok
  ok
\ These tests time the number of cylcles each word takes to run for a  ok
\ given input.  These tests only work with the talitest.py script  ok
\ which has handlers watching for the reading of the special addresses  ok
\ $F002 and $F003 that calculate the number of cycles between reading  ok
\ from the special addresses.  The cycles elapsed can then be read  ok
\ from the virtual memory location $FF00 (as a double word)  ok
  ok
  ok
\ The test access words  ok
hex  ok
\ begin_cycles direct byte compiled into ram.  ok
\ lda $f002  ok
\ rts  ok
: begin_cycles [ AD c, 02 c, F0 c, 60 c, ] ;  ok
\ end_cycles direct byte compiled into ram.  ok
\ lda $f003  ok
\ rts  ok
: end_cycles [ AD c, 03 c, F0 c, 60 c, ] ;  ok
  ok
\ The location of the result  ok
FF00 constant cycles  ok
  ok
\ Forth versions  ok
\ : begin_cycles F002 c@ drop ;  ok
\ : end_cycles F003 c@ drop ;  ok
  ok
\ Determine the overhead of the testing words themselves.  ok
: cycles_overhead_test begin_cycles end_cycles ;  ok
2variable cycles_overhead  ok
cycles_overhead_test cycles 2@ cycles_overhead 2!  ok
cycles_overhead 2@ decimal ud. 16  ok
  ok
\ Print the number of cycles (in decimal) with the overhead removed.  ok
: print_cycles base @ decimal cycles 2@ cycles_overhead 2@ d- ud. base ! ;  ok
\ Test a word.  ok  ok
: cycles_/ 1234 7 begin_cycles / end_cycles ;  ok
cycles_/ print_cycles 1480  ok
  ok
\ Test a word with lookup overhead.  ok
begin_cycles end_cycles ( overhead ) print_cycles 1367  ok
1234 7 begin_cycles / end_cycles ( actual test ) print_cycles 4971  ok
  ok
\ Test what should be a very small word.  ok
: cycles_drop 5 begin_cycles drop end_cycles ;  ok
cycles_drop print_cycles 9  ok
  ok
bye 