\ From: John Hayes S1I  ok
\ Subject: tester.fr  ok
\ Date: Mon, 27 Nov 95 13:10:09 PST    ok
  ok
\ Modified by SamCo 2018-05 for testing Tali Forth 2.  ok
\ The main change is lowercasing all of the words as Tali  ok
\ is case sensitive, as well as replacing tabs with spaces.  ok
\ A word to display the actual (erroneous) results was also added.  ok
  ok
\ (C) 1995 JOHNS HOPKINS UNIVERSITY / APPLIED PHYSICS LABORATORY  ok
\ MAY BE DISTRIBUTED FREELY AS LONG AS THIS COPYRIGHT NOTICE REMAINS.  ok
hex  ok
  ok
\ Set the following flag to true for more verbose output; this may allow you to  ok
\ tell which test caused your system to hang. With Tali Forth, this is useless  ok
\ because the Python script echoes all the output anyway.  ok
variable verbose  false verbose !  ok
  ok
variable actual-depth   \ stack record  ok
create actual-results  20 cells allot  ok
  ok
\ Empty stack: handles underflowed stack too  ok
: empty-stack ( ... -- )   compiled
   depth ?dup if   compiled
      dup 0< if   compiled
         negate 0 do 0 loop   compiled
      else   compiled
         0 do drop loop   compiled
      then   compiled
   then ;  ok
  ok
\ Print the previous test's actual results. Added by SamCo 2018-05   ok
: show-results ( -- )   compiled
   s"  ACTUAL RESULT: { " type  compiled
   actual-depth @ 0 ?do  compiled
      actual-results   compiled
      actual-depth @ i - 1- \ Print them in reverse order to match test.  compiled
      cells + @ .  compiled
   loop  compiled
   s" }" type ;  ok
  ok
\ Display an error message followed by the line that had the error  ok
: error  \ ( C-ADDR U -- )   compiled
   type source type \ display line corresponding to error  compiled
   empty-stack      \ throw away every thing else  compiled
   show-results ;   \ added by SamCo to show what actually happened  ok
  ok
\ Syntactic sugar  ok
: {  ( -- ) ;  ok
  ok
\ Record depth and content of stack  ok
: ->  ( ... -- )   compiled
   depth dup actual-depth !  \ record depth  compiled
   ?dup if                   \ if there is something on stack ...  compiled
      0 do   compiled
         actual-results i cells + !   compiled
      loop                   \ ... save it  compiled
   then ;  ok
  ok
\ Compare stack (expected) contents with saved (actual) contents  ok
: }  ( ... -- )   compiled
   depth actual-depth @ = if     \ if depths match  compiled
      depth ?dup if              \ if there is something on the stack  compiled
         0 do                    \ for each stack item  compiled
            actual-results i cells + @  \ compare actual with expected  compiled
            <> if   compiled
               s" INCORRECT RESULT: " error leave   compiled
            then  compiled
         loop  compiled
      then  compiled
   else                          \ depth mismatch  compiled
      s" WRONG NUMBER OF RESULTS: " error  compiled
   then ;  ok
  ok
\ Talking comment  ok
: testing ( -- )   compiled
   source verbose @ if   compiled
      dup >r type cr r> >in !  compiled
   else >in ! drop  compiled
   then ;  ok
\ ------------------------------------------------------------------------  ok
testing double words: 2constant 2variable d+ d- d. d.r d>s dabs dnegate  ok
decimal  ok
  ok
( 2LITERAL not implemented )  ok
  ok
{ 2variable 2v1 -> }  ok
{ 0. 2v1 2! -> }  ok
{ 2v1 2@ -> 0. }  ok
{ -1 -2 2v1 2! -> }  ok
{ 2v1 2@ -> -1 -2 }  ok
{ : cd2 2variable ; -> }  ok
{ cd2 2v2 -> }  ok
{ : cd3 2v2 2! ; -> }  ok
{ -2 -1 cd3 -> }  ok
{ 2v2 2@ -> -2 -1 }  ok
{ 2variable 2v3 immediate 5 6 2v3 2! -> }  ok
{ 2v3 2@ -> 5 6 }  ok
  ok
\ Repeats in case we call this test alone  ok
0 constant 0s  ok
0 invert constant 1s  ok
0 invert 1 rshift  constant max-int  ok
0 invert 1 rshift invert  constant min-int  ok
  ok
{  0.  5. d+ ->  5. }                         \ small integers   ok
{ -5.  0. d+ -> -5. }   ok
{  1.  2. d+ ->  3. }   ok
{  1. -2. d+ -> -1. }   ok
{ -1.  2. d+ ->  1. }   ok
{ -1. -2. d+ -> -3. }   ok
{ -1.  1. d+ ->  0. }  ok
{  0  0  0  5 d+ ->  0  5 }                  \ mid range integers   ok
{ -1  5  0  0 d+ -> -1  5 }   ok
{  0  0  0 -5 d+ ->  0 -5 }   ok
{  0 -5 -1  0 d+ -> -1 -5 }   ok
{  0  1  0  2 d+ ->  0  3 }   ok
{ -1  1  0 -2 d+ -> -1 -1 }   ok
{  0 -1  0  2 d+ ->  0  1 }   ok
{  0 -1 -1 -2 d+ -> -1 -3 }   ok
{ -1 -1  0  1 d+ -> -1  0 }  ok
  ok
{ min-int 0 2dup d+ -> 0 1 }  ok
{ min-int s>d min-int 0 d+ -> 0 0 }  ok
  ok
{ 1 2 2constant 2c1 -> }  ok
{ 2c1 -> 1 2 }  ok
{ : cd1 2c1 ; -> }  ok
{ cd1 -> 1 2 }  ok
{ : cd2 2constant ; -> }  ok
{ -1 -2 cd2 2c2 -> }  ok
{ 2c2 -> -1 -2 }  ok
{ 4 5 2constant 2c3 immediate 2c3 -> 4 5 }  ok
\ { : cd6 2c3 2literal ; cd6 -> 4 5 }  ok
  ok
1s max-int  2constant max-2int \ 01...1   ok
0 min-int   2constant min-2int \ 10...0   ok
max-2int 2/ 2constant hi-2int  \ 001...1   ok
min-2int 2/ 2constant lo-2int  \ 110...0  ok
  ok
\ TODO hi-2int etc not implemented yet  ok
\ {  hi-2int       1. d+ -> 0 hi-int 1+ }     \ large double integers   ok
\ {  hi-2int     2dup d+ -> 1s 1- max-int }  ok
\ { max-2int min-2int d+ -> -1. }  ok
\ { max-2int  lo-2int d+ -> hi-2int }  ok
\ {  lo-2int     2dup d+ -> min-2int }  ok
\ {  hi-2int min-2int d+ 1. d+ -> lo-2int }  ok
  ok
{  0.  5. d- -> -5. }              \ small integers   ok
{  5.  0. d- ->  5. }   ok
{  0. -5. d- ->  5. }   ok
{  1.  2. d- -> -1. }   ok
{  1. -2. d- ->  3. }   ok
{ -1.  2. d- -> -3. }   ok
{ -1. -2. d- ->  1. }   ok
{ -1. -1. d- ->  0. }   ok
{  0  0  0  5 d- ->  0 -5 }        \ mid-range integers   ok
{ -1  5  0  0 d- -> -1  5 }   ok
{  0  0 -1 -5 d- ->  1  4 }   ok
{  0 -5  0  0 d- ->  0 -5 }   ok
{ -1  1  0  2 d- -> -1 -1 }   ok
{  0  1 -1 -2 d- ->  1  2 }   ok
{  0 -1  0  2 d- ->  0 -3 }   ok
{  0 -1  0 -2 d- ->  0  1 }   ok
{  0  0  0  1 d- ->  0 -1 }  ok
{ min-int 0 2dup d- -> 0. }   ok
{ min-int s>d max-int 0 d- -> 1 1s }   ok
  ok
\ TODO max-2int etc not implemented yet  ok
\ { max-2int max-2int d- -> 0. }    \ large integers   ok
\ { min-2int min-2int d- -> 0. }  ok
\ { max-2int  hi-2int d- -> lo-2int dnegate }   ok
\ {  hi-2int  lo-2int d- -> max-2int }  ok
\ {  lo-2int  hi-2int d- -> min-2int 1. d+ }  ok
\ { min-2int min-2int d- -> 0. }  ok
\ { min-2int  lo-2int d- -> lo-2int }  ok
  ok
\ D. and D.R  ok
\ TODO max2int etc not implemented yet  ok
\ TODO 2CONSTANT not implemented yet  ok
\ max-2int 71 73 m*/ 2constant dbl1   ok
\ min-2int 73 79 m*/ 2constant dbl2  ok
\ : d>ascii ( d -- caddr u )   ok
   \ dup >r <# dabs #s r> sign #>    ( -- caddr1 u )   ok
   \ here swap 2dup 2>r chars dup allot move 2r>   ok
\ ;  ok
  ok
\ dbl1 d>ascii 2constant "dbl1"   ok
\ dbl2 d>ascii 2constant "dbl2"  ok
  ok
\ : doubleoutput   ok
   \ cr ." you should see lines duplicated:" cr   ok
   \ 5 spaces "dbl1" type cr   ok
   \ 5 spaces dbl1 d. cr   ok
   \ 8 spaces "dbl1" dup >r type cr   ok
   \ 5 spaces dbl1 r> 3 + d.r cr   ok
   \ 5 spaces "dbl2" type cr   ok
   \ 5 spaces dbl2 d. cr   ok
   \ 10 spaces "dbl2" dup >r type cr   ok
   \ 5 spaces dbl2 r> 5 + d.r cr   ok
\ ;  ok
  ok
\ { doubleoutput -> }  ok
  ok
( TODO D0< not implemented yet )  ok
( TODO D0= not implemented yet )  ok
( TODO D2* not implemented yet )  ok
( TODO D2/ not implemented yet )  ok
( TODO D< not implemented yet )  ok
( TODO D= not implemented yet )  ok
  ok
{    1234  0 d>s ->  1234   }   ok
{   -1234 -1 d>s -> -1234   }   ok
{ max-int  0 d>s -> max-int }   ok
{ min-int -1 d>s -> min-int }  ok
  ok
{       1. dabs -> 1.       }   ok
{      -1. dabs -> 1.       }   ok
\ TODO max-2int not implemented yet  ok
\ { max-2int dabs -> max-2int }   ok
\ { min-2int 1. d+ dabs -> max-2int }  ok
  ok
( TODO DMAX not implemented yet )  ok
( TODO DMIN not implemented yet )  ok
  ok
{ 0. dnegate -> 0. }  ok
{ 1. dnegate -> -1. }  ok
{ -1. dnegate -> 1. }  ok
\ TODO max-2int not implemented yet  ok
\ { max-2int dnegate -> min-2int swap 1+ swap }  ok
\ { min-2int swap 1+ swap dnegate -> max-2int }  ok
  ok
( TODO M*/ not implemented yet )  ok
( TODO M+ not implemented yet )  ok
( TODO 2ROT not implemented yet )  ok
( TODO 2VALUE not implemented yet )  ok
( TODO DU< not implemented yet )  ok
  ok
  ok
