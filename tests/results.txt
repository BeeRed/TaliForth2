Tali Forth 2 default kernel for py65mon (18. Feb 2018)


Tali Forth 2 for the 65c02
Version BETA 24. Dec 2018 
Copyright 2014-2018 Scot W. Stevenson
Tali Forth 2 comes with absolutely NO WARRANTY
Type 'bye' to exit
\ From: John Hayes S1I  ok
\ Subject: tester.fr  ok
\ Date: Mon, 27 Nov 95 13:10:09 PST    ok
  ok
\ Modified by SamCo 2018-05 for testing Tali Forth 2.  ok
\ The main change is lowercasing all of the words as Tali  ok
\ is case sensitive, as well as replacing tabs with spaces.  ok
\ A word to display the actual (erroneous) results was also added.  ok
\ Modified by SamCo 2018-10 to facilitate using standard ANS tests.  ok
\ The testing words were changed from { and } to T{ and }T to  ok
\ match the testing words currently being used by ANS standard tests.  ok
  ok
\ (C) 1995 JOHNS HOPKINS UNIVERSITY / APPLIED PHYSICS LABORATORY  ok
\ MAY BE DISTRIBUTED FREELY AS LONG AS THIS COPYRIGHT NOTICE REMAINS.  ok
hex  ok
  ok
\ Set the following flag to true for more verbose output; this may allow you to  ok
\ tell which test caused your system to hang. With Tali Forth, this is useless  ok
\ because the Python script echoes all the output anyway.  ok
variable verbose  false verbose !  ok
  ok
variable actual-depth   \ stack record  ok
create actual-results  20 cells allot  ok
  ok
  ok
\ Empty stack: handles underflowed stack too  ok
: empty-stack ( ... -- )   compiled
   depth ?dup if   compiled
      dup 0< if   compiled
         negate 0 do 0 loop   compiled
      else   compiled
         0 do drop loop   compiled
      then   compiled
   then ;  ok
  ok
\ Print the previous test's actual results. Added by SamCo 2018-05   ok
: show-results ( -- )   compiled
   s"  ACTUAL RESULT: { " type  compiled
   actual-depth @ 0 ?do  compiled
      actual-results   compiled
      actual-depth @ i - 1- \ Print them in reverse order to match test.  compiled
      cells + @ .  compiled
   loop  compiled
   s" }" type ;  ok
  ok
\ Display an error message followed by the line that had the error  ok
: error  \ ( C-ADDR U -- )   compiled
   type source type \ display line corresponding to error  compiled
   empty-stack      \ throw away every thing else  compiled
   show-results ;   \ added by SamCo to show what actually happened  ok
  ok
\ Syntactic sugar  ok
: T{  ( -- ) ;  ok
  ok
\ Record depth and content of stack  ok
: ->  ( ... -- )   compiled
   depth dup actual-depth !  \ record depth  compiled
   ?dup if                   \ if there is something on stack ...  compiled
      0 do   compiled
         actual-results i cells + !   compiled
      loop                   \ ... save it  compiled
   then ;  ok
  ok
\ Compare stack (expected) contents with saved (actual) contents  ok
: }T  ( ... -- )   compiled
   depth actual-depth @ = if     \ if depths match  compiled
      depth ?dup if              \ if there is something on the stack  compiled
         0 do                    \ for each stack item  compiled
            actual-results i cells + @  \ compare actual with expected  compiled
            <> if   compiled
               s" INCORRECT RESULT: " error leave   compiled
            then  compiled
         loop  compiled
      then  compiled
   else                          \ depth mismatch  compiled
      s" WRONG NUMBER OF RESULTS: " error  compiled
   then ;  ok
  ok
\ Talking comment  ok
: testing ( -- )   compiled
   source verbose @ if   compiled
      dup >r type cr r> >in !  compiled
   else >in ! drop  compiled
   then ;  ok
  ok
 ( Running test 'tali' from file 'tali.fs' )  ok
\ ------------------------------------------------------------------------  ok
hex  ok
  ok
marker tali_tests  ok
  ok
  ok
\ Repeat definitions for standalone testing  ok
0 constant 0s  ok
0 invert constant 1s  ok
0s constant <false>  ok
1s constant <true>  ok
  ok
\ ------------------------------------------------------------------------  ok
testing gforth words: bounds find-name latestxt name>int name>string  ok
\ Test for COLD not implemented  ok
  ok
( TODO NAME>INT test missing)  ok
( TODO NAME>STRING test missing)  ok
  ok
\ Test for FIND-NAME assumes that PARSE-NAME has been tested in core.fs  ok
T{ parse-name drop     find-name  0<> -> <true> }T \ need to find any nt  ok
T{ parse-name Chatika  find-name  0=  -> <true> }T \ shouldn't find Tali's drone  ok
  ok
T{ hex -> }T  ok
T{ 1000 10 bounds -> 1010 1000 }T  ok
T{ ffff 2 bounds -> 0001 ffff }T  \ BOUNDS wraps on Tali with 16 bit address space  ok
T{ decimal -> }T  ok
  ok
\ ------------------------------------------------------------------------  ok
\ testing tali-only words: cleave hexstore  ok
  ok
\ Cleave: Normal cases. KNOWN issue: CLEAVE fails if we have multiple  ok
\ delimiters, for example "aaa  bbb" with two strings. This is also true if we  ok
\ start the string with a delimiter  ok
  ok
T{ : s1 s" " ; -> }T \ case 1: empty string  ok
T{ s1 cleave  s" " compare  -rot  s" " compare -> 0 0 }T  ok
  ok
T{ : s1 s" aaa" ; -> }T  \ case 2: one word redefined s1  ok
T{ s1 cleave  s" aaa" compare  -rot  s" " compare -> 0 0 }T  ok
  ok
T{ : s1 s" aaa bbb ccc" ; -> }T  \ case 3: lots of words, single space delimiter redefined s1  ok
T{ s1 cleave  s" aaa" compare  -rot  s" bbb ccc" compare -> 0 0 }T  ok
  ok
T{ : s1 s" bbb  ccc  ddd" ; -> }T  \ case 3a: lots of words, multiple space delimiter redefined s1  ok
T{ s1 cleave  s" bbb" compare  -rot  s" ccc  ddd" compare -> 0 0 }T  ok
  ok
T{ : s1 s\" eee\tfff\tggg" ; -> }T  \ case 3b: lots of words, tab delimter redefined s1  ok
T{ s1 cleave  s" eee" compare  -rot  s\" fff\tggg" compare -> 0 0 }T  ok
  ok
T{ : s1 s\" aaa\nAAA\nqqq" ; -> }T  \ case 3c: lots of words, EOL delimiter redefined s1  ok
T{ s1 cleave  s" aaa" compare  -rot  s\" AAA\nqqq" compare -> 0 0 }T  ok
  ok
T{ : s1 s"  xxx yyy zzz" ; -> }T  \ case 3d: lots of words, start with space delimiter redefined s1  ok
T{ s1 cleave  s" xxx" compare  -rot  s" yyy zzz" compare -> 0 0 }T INCORRECT RESULT: T{ s1 cleave  s" xxx" compare  -rot  s" yyy zzz" compare -> 0 0 }T ACTUAL RESULT: { 0 -1 } ok
  ok
  ok
\ Cleave: Pathological cases  ok
  ok
T{ : s1 s"  aaa bbb ccc" ; -> }T \ case 4: Leading space is cleaved redefined s1  ok
T{ s1 cleave  s" " compare  -rot  s" aaa bbb ccc" compare -> 0 0 }T INCORRECT RESULT: T{ s1 cleave  s" " compare  -rot  s" aaa bbb ccc" compare -> 0 0 }T ACTUAL RESULT: { 1 -1 } ok
  ok
T{ : s1 s" aaa bbb ccc " ; -> }T \ case 5: Trailing space is left redefined s1  ok
T{ s1 cleave  s" aaa" compare  -rot  s" bbb ccc " compare -> 0 0 }T  ok
  ok
T{ : s1 s" aaa " ; -> }T  \ case 6: Trailing space on single word is empty redefined s1  ok
T{ s1 cleave  s" aaa" compare  -rot  s" " compare -> 0 0 }T  ok
  ok
T{ : s1 s"  " ; -> }T  \ case 7: Single space as word is two empty words redefined s1  ok
T{ s1 cleave  s" " compare  -rot  s" " compare -> 0 0 }T INCORRECT RESULT: T{ s1 cleave  s" " compare  -rot  s" " compare -> 0 0 }T ACTUAL RESULT: { 0 1 } ok
  ok
  ok
\ Hexstore: Normal cases  ok
  ok
create hs-test 5 allot  ok
  ok
decimal  ok
create hs-want-dec  1 c, 2 c, 3 c, 4 c, 5 c,   ok
T{ s" 1 2 3 4 5" hs-test hexstore  hs-test swap  hs-want-dec 5  compare -> 0 }T  ok
T{ s" 1" hs-test hexstore  hs-test swap  hs-want-dec 1  compare -> 0 }T  ok
  ok
hex  ok
create hs-want-hex  0A c, 0B c, 0C c, 0D c, 0E c,   ok
T{ s" 0A 0B 0C 0D 0E" hs-test hexstore  hs-test swap  hs-want-hex 5  compare -> 0 }T  ok
T{ s" 0A" hs-test hexstore  hs-test swap  hs-want-hex 1  compare -> 0 }T  ok
  ok
\ Hexstore: Pathological cases  ok
  ok
decimal  ok
T{ s" " hs-test hexstore  hs-test swap  s" " compare -> 0 }T  ok
T{ s" emergency" hs-test hexstore  hs-test swap  s" " compare -> 0 }T  ok
T{ s" emergency induction port" hs-test hexstore  hs-test swap  s" " compare -> 0 }T  ok
  ok
create hs-want-dec-path  01 c, 02 c,  ok
T{ s" 01 HONK! 02" hs-test hexstore  hs-test swap  hs-want-dec-path 2 compare -> 0 }T  ok
T{ s" HONK! 01 02" hs-test hexstore  hs-test swap  hs-want-dec-path 2 compare -> 0 }T  ok
T{ s" 01 02 HONK!" hs-test hexstore  hs-test swap  hs-want-dec-path 2 compare -> 0 }T  ok
  ok
\ ------------------------------------------------------------------------  ok
testing tali-only words: always-native bell compile-only digit? int>name  ok
testing tali-only words: latestnt latestxt number 0 1 2  ok
testing tali-only words: allow-native never-native wordsize nc-limit  ok
decimal  ok
  ok
\ Test for 0BRANCH not implemented  ok
\ Test for BRANCH not implemented  ok
\ Test for DISASM not implemented  ok
\ Test for INPUT not implemented  ok
\ Test for OUTPUT not implemented  ok
\ Test for UF-STRIP not implemented  ok
  ok
( TODO BELL test missing)  ok
( TODO COMPILE-ONLY test missing)  ok
  ok
\ Test int>name, latestnt, latestxt, and wordsize  ok
: one 1 ;  ok
T{ ' one int>name wordsize    -> 8 }T  ok
T{ latestxt int>name wordsize -> 8 }T  ok
T{ latestnt wordsize          -> 8 }T  ok
  ok
\ One should have been created with NN flag, so it should be compiled  ok
\ as a JSR when used (3-bytes).  ok
: one-a one ;  ok
T{ ' one-a int>name wordsize -> 3 }T  ok
  ok
\ Test allow-native  ok
: two 1 1 ; allow-native  ok
\ This should just barely prevent two from being natively compiled.  ok
15 nc-limit !  ok
: two-a two ;  ok
\ This should just barely allow two to be natively compiled.  ok
16 nc-limit !  ok
: two-b two ;  ok
  ok
T{ ' two   int>name wordsize -> 16 }T  ok
T{ ' two-a int>name wordsize ->  3 }T  ok
T{ ' two-b int>name wordsize -> 16 }T  ok
  ok
\ Test always-native.  ok
: three 2 1 ; always-native  ok
\ Three should always natively compile regardless of nc-limit.  ok
15 nc-limit !  ok
: three-a three ;  ok
16 nc-limit !  ok
: three-b three ;  ok
  ok
T{ ' three   int>name wordsize -> 16 }T  ok
T{ ' three-a int>name wordsize -> 16 }T  ok
T{ ' three-b int>name wordsize -> 16 }T  ok
\ Sneak in extra tests for latestnt and latestxt.  ok
T{ latestnt wordsize           -> 16 }T  ok
T{ latestxt int>name wordsize  -> 16 }T  ok
  ok
  ok
\ Test never-native.  ok
\ Because NN is the default, we have to switch to one of the other modes first.  ok
: four 2 2 ; always-native never-native  ok
\ Four should never natively compile regardless of nc-limit.  ok
\ It will always be a JSR when used in another word.  ok
15 nc-limit !  ok
: four-a four ;  ok
16 nc-limit !  ok
: four-b four ;  ok
  ok
T{ ' four   int>name wordsize -> 16 }T  ok
T{ ' four-a int>name wordsize ->  3 }T  ok
T{ ' four-b int>name wordsize ->  3 }T  ok
\ Sneak in extra tests for latestnt and latestxt.  ok
T{ latestnt wordsize          ->  3 }T  ok
T{ latestxt int>name wordsize ->  3 }T  ok
  ok
\ Nothing is too trivial for testing!  ok
T{ 0 -> 0 }T  ok
T{ 1 -> 1 }T  ok
T{ 2 -> 2 }T  ok
\ Slightly less trivial...  ok
T{ 0 -> 5 5 - }T  ok
T{ 1 -> 5 4 - }T  ok
T{ 2 -> 5 3 - }T  ok
  ok
\ Test for DIGIT? ( char -- u f | char f )  ok
  ok
T{ 36 constant max-base -> }T \ ANS standard says 2 - 36  ok
T{ base @  constant orig-base -> }T  ok
T{ s" 0123456789" ( addr u ) drop  constant digit_numeral -> }T  ok
T{ s" abcdefghijklmnopqrstuvwxyz" ( addr u ) drop  constant digit_lower -> }T  ok
T{ s" ABCDEFGHIJKLMNOPQRSTUVWXYZ" ( addr u ) drop  constant digit_upper -> }T  ok
  ok
\ "/" and ":" are before and after ASCII numbers  ok
\ "@" and "[" are before and after upper case ASCII letters  ok
\ "`" and "{" are before and after lower case ASCII letters  ok
T{ s" /:@[`{"  ( addr u )  drop  constant digit_bad -> }T  ok
  ok
: digit_numeral ( -- f )  compiled
   true  compiled
   base @  10 min  ( don't go outside chars )  0 ?do  compiled
      digit_numeral i +  ( addr ) c@   compiled
      dup emit  \ Show user what is going on  compiled
      dup digit?  ( char  u | char  f )   compiled
      swap 48 ( ASCII "0" ) +   ( char  f  u | char )   compiled
      rot =  ( f f )       \ is number what it's supposed to be?  compiled
      and  ( f )           \ conversion was signaled as success?  compiled
      and                  \ merge with running tab flag  compiled
   loop ;  redefined digit_numeral  ok
  ok
: digit_letters ( -- f )   compiled
   true  compiled
   base @  10 - ( grow index with base)  0 ?do  compiled
      digit_lower i + c@    compiled
      dup emit  compiled
      dup digit?    compiled
      swap 97 ( ASCII "a" ) 10 -  +  compiled
      rot =   compiled
      and and   compiled
  compiled
      digit_upper i + c@    compiled
      dup emit  compiled
      dup digit?   compiled
      swap 65 ( ASCII "A" ) 10 -  +  compiled
      rot =   compiled
      and and   compiled
   loop ;   ok
  ok
: digit_oneoff ( -- f )   compiled
   true   compiled
   7 0 ?do  compiled
      digit_bad i + c@  compiled
      dup emit  compiled
      digit?  ( char 0 )   compiled
      nip invert   compiled
      and  compiled
   loop ;  ok
  ok
\ All your bases are belong to us. In theory, we could condense this  ok
\ code further, because Forth, but it would become harder to understand  ok
: digit_all ( -- f )  compiled
   true  compiled
  compiled
   max-base 1+  2 ?do  compiled
      decimal cr ." Numerals, base " i . ." : "   compiled
      i base !  compiled
      digit_numeral and  compiled
      dup ."  -> " .  \ print status of base to help find errors  compiled
   loop   compiled
     compiled
   decimal cr  compiled
   max-base 1+  11 ?do  compiled
      decimal cr ." Letters, base " i . ." : "   compiled
      i base !  compiled
      digit_letters and  compiled
      dup ."  -> " . \ uncomment for debugging  compiled
   loop   compiled
  compiled
   decimal cr  compiled
   max-base 1+ 2 ?do  compiled
      decimal cr ." One-off chars, base " i . ." : "   compiled
      i base !  compiled
      digit_oneoff and  compiled
      dup ."  -> " .  \ uncomment for debugging  compiled
   loop ;  ok
  ok
T{ digit_all -> <true> }T 
Numerals, base 2 : 01 -> -1 
Numerals, base 3 : 012 -> -1 
Numerals, base 4 : 0123 -> -1 
Numerals, base 5 : 01234 -> -1 
Numerals, base 6 : 012345 -> -1 
Numerals, base 7 : 0123456 -> -1 
Numerals, base 8 : 01234567 -> -1 
Numerals, base 9 : 012345678 -> -1 
Numerals, base 10 : 0123456789 -> -1 
Numerals, base 11 : 0123456789 -> -1 
Numerals, base 12 : 0123456789 -> -1 
Numerals, base 13 : 0123456789 -> -1 
Numerals, base 14 : 0123456789 -> -1 
Numerals, base 15 : 0123456789 -> -1 
Numerals, base 16 : 0123456789 -> -1 
Numerals, base 17 : 0123456789 -> -1 
Numerals, base 18 : 0123456789 -> -1 
Numerals, base 19 : 0123456789 -> -1 
Numerals, base 20 : 0123456789 -> -1 
Numerals, base 21 : 0123456789 -> -1 
Numerals, base 22 : 0123456789 -> -1 
Numerals, base 23 : 0123456789 -> -1 
Numerals, base 24 : 0123456789 -> -1 
Numerals, base 25 : 0123456789 -> -1 
Numerals, base 26 : 0123456789 -> -1 
Numerals, base 27 : 0123456789 -> -1 
Numerals, base 28 : 0123456789 -> -1 
Numerals, base 29 : 0123456789 -> -1 
Numerals, base 30 : 0123456789 -> -1 
Numerals, base 31 : 0123456789 -> -1 
Numerals, base 32 : 0123456789 -> -1 
Numerals, base 33 : 0123456789 -> -1 
Numerals, base 34 : 0123456789 -> -1 
Numerals, base 35 : 0123456789 -> -1 
Numerals, base 36 : 0123456789 -> -1 

Letters, base 11 : aA -> -1 
Letters, base 12 : aAbB -> -1 
Letters, base 13 : aAbBcC -> -1 
Letters, base 14 : aAbBcCdD -> -1 
Letters, base 15 : aAbBcCdDeE -> -1 
Letters, base 16 : aAbBcCdDeEfF -> -1 
Letters, base 17 : aAbBcCdDeEfFgG -> -1 
Letters, base 18 : aAbBcCdDeEfFgGhH -> -1 
Letters, base 19 : aAbBcCdDeEfFgGhHiI -> -1 
Letters, base 20 : aAbBcCdDeEfFgGhHiIjJ -> -1 
Letters, base 21 : aAbBcCdDeEfFgGhHiIjJkK -> -1 
Letters, base 22 : aAbBcCdDeEfFgGhHiIjJkKlL -> -1 
Letters, base 23 : aAbBcCdDeEfFgGhHiIjJkKlLmM -> -1 
Letters, base 24 : aAbBcCdDeEfFgGhHiIjJkKlLmMnN -> -1 
Letters, base 25 : aAbBcCdDeEfFgGhHiIjJkKlLmMnNoO -> -1 
Letters, base 26 : aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpP -> -1 
Letters, base 27 : aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQ -> -1 
Letters, base 28 : aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrR -> -1 
Letters, base 29 : aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsS -> -1 
Letters, base 30 : aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStT -> -1 
Letters, base 31 : aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuU -> -1 
Letters, base 32 : aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvV -> -1 
Letters, base 33 : aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwW -> -1 
Letters, base 34 : aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxX -> -1 
Letters, base 35 : aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyY -> -1 
Letters, base 36 : aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ -> -1 

One-off chars, base 2 : /:@[`{	 -> -1 
One-off chars, base 3 : /:@[`{	 -> -1 
One-off chars, base 4 : /:@[`{	 -> -1 
One-off chars, base 5 : /:@[`{	 -> -1 
One-off chars, base 6 : /:@[`{	 -> -1 
One-off chars, base 7 : /:@[`{	 -> -1 
One-off chars, base 8 : /:@[`{	 -> -1 
One-off chars, base 9 : /:@[`{	 -> -1 
One-off chars, base 10 : /:@[`{	 -> -1 
One-off chars, base 11 : /:@[`{	 -> -1 
One-off chars, base 12 : /:@[`{	 -> -1 
One-off chars, base 13 : /:@[`{	 -> -1 
One-off chars, base 14 : /:@[`{	 -> -1 
One-off chars, base 15 : /:@[`{	 -> -1 
One-off chars, base 16 : /:@[`{	 -> -1 
One-off chars, base 17 : /:@[`{	 -> -1 
One-off chars, base 18 : /:@[`{	 -> -1 
One-off chars, base 19 : /:@[`{	 -> -1 
One-off chars, base 20 : /:@[`{	 -> -1 
One-off chars, base 21 : /:@[`{	 -> -1 
One-off chars, base 22 : /:@[`{	 -> -1 
One-off chars, base 23 : /:@[`{	 -> -1 
One-off chars, base 24 : /:@[`{	 -> -1 
One-off chars, base 25 : /:@[`{	 -> -1 
One-off chars, base 26 : /:@[`{	 -> -1 
One-off chars, base 27 : /:@[`{	 -> -1 
One-off chars, base 28 : /:@[`{	 -> -1 
One-off chars, base 29 : /:@[`{	 -> -1 
One-off chars, base 30 : /:@[`{	 -> -1 
One-off chars, base 31 : /:@[`{	 -> -1 
One-off chars, base 32 : /:@[`{	 -> -1 
One-off chars, base 33 : /:@[`{	 -> -1 
One-off chars, base 34 : /:@[`{	 -> -1 
One-off chars, base 35 : /:@[`{	 -> -1 
One-off chars, base 36 : /:@[`{	 -> -1  ok
T{ decimal -> }T  ok
  ok
  ok
\ TODO find more edge cases for NUMBER  ok
T{ s" 0" number -> 0 }T  ok
T{ s" 10" number -> 10 }T  ok
T{ s" 100" number -> 100 }T  ok
T{ s" 1." number -> 1 0 }T  ok
T{ hex -> }T  ok
T{ s" 0" number -> 0 }T  ok
T{ s" 10" number -> 10 }T  ok
T{ s" ff" number -> FF }T  ok
T{ decimal -> }T  ok
  ok
\ ------------------------------------------------------------------------  ok
testing case-insensitivity in Tali using dup  ok
  ok
T{ 5 dup -> 5 5 }T  ok
T{ 5 duP -> 5 5 }T  ok
T{ 5 dUp -> 5 5 }T  ok
T{ 5 dUP -> 5 5 }T  ok
T{ 5 Dup -> 5 5 }T  ok
T{ 5 DuP -> 5 5 }T  ok
T{ 5 DUp -> 5 5 }T  ok
T{ 5 DUP -> 5 5 }T  ok
  ok
\ Free memory used for these tests  ok
tali_tests  ok
  ok
  ok
bye 