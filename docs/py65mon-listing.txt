
; 64tass Turbo Assembler Macro V1.57.2900 listing file
; 64tass --nostart --list=docs/py65mon-listing.txt --labels=docs/py65mon-labelmap.txt --output taliforth-py65mon.bin platform/platform-py65mon.asm
; Sun Jun 25 15:21:50 2023

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: platform/platform-py65mon.asm

=$0000					ram_start = $0000          ; start of installed 32 KiB of RAM
=32767					ram_end   = $8000-1        ; end of installed RAM
=$0000					zpage     = ram_start      ; begin of Zero Page ($0000-$00ff)
=$7f					zpage_end = $7F            ; end of Zero Page used ($0000-$007f)
=$0100					stack0    = $0100          ; begin of Return Stack ($0100-$01ff)
=31744					hist_buff = ram_end-$03ff  ; begin of history buffers
=$0000					user0     = zpage            ; user and system variables
=$ff					rsp0      = $ff              ; initial Return Stack Pointer (65c02 stack)
=$ff					bsize     = $ff              ; size of input/output buffers
=512					buffer0   = stack0+$100      ; input buffer ($0200-$027f)
=768					cp0       = buffer0+bsize+1  ; Dictionary starts after last buffer
=31744					cp_end    = hist_buff        ; Last RAM byte available for code
=$ff					padoffset = $ff              ; offset from CP to PAD (holds number strings)
=					TALI_OPTIONAL_WORDS := [ "ed", "editor", "ramdrive", "block", "environment?", "assembler", "wordlist" ]

;******  Processing file: platform/../taliforth.asm

.8000					code0:

;******  Processing file: platform/../definitions.asm

=0					cp        = user0+0   ; Compiler Pointer
=2					dp        = user0+2   ; Dictionary Pointer
=4					workword  = user0+4   ; nt (not xt!) of word being compiled, except in
=6					insrc     = user0+6   ; input Source for SOURCE-ID
=8					cib       = user0+8   ; address of current input buffer
=10					ciblen    = user0+10  ; length of current input buffer
=12					toin      = user0+12  ; pointer to CIB (>IN in Forth)
=14					ip        = user0+14  ; Instruction Pointer (current xt)
=16					output    = user0+16  ; vector for EMIT
=18					input     = user0+18  ; vector for KEY
=20					havekey   = user0+20  ; vector for KEY?
=22					state     = user0+22  ; STATE: -1 compile, 0 interpret
=24					base      = user0+24  ; number radix, default decimal
=26					nc_limit  = user0+26  ; limit for Native Compile size
=28					uf_strip  = user0+28  ; flag to strip underflow detection code
=30					up        = user0+30  ; User Pointer (Address of user variables)
=32					status    = user0+32  ; internal status information
=34					tmpbranch = user0+34  ; temporary storage for 0BRANCH, BRANCH only
=36					tmp1      = user0+36  ; temporary storage
=38					tmp2      = user0+38  ; temporary storage
=40					tmp3      = user0+40  ; temporary storage (especially for print)
=42					tmpdsp    = user0+42  ; temporary DSP (X) storage (two bytes)
=44					tmptos    = user0+44  ; temporary TOS storage
=46					editor1   = user0+46  ; temporary for editors
=48					editor2   = user0+48  ; temporary for editors
=50					editor3   = user0+50  ; temporary for editors
=52					tohold    = user0+52  ; pointer for formatted output
=54					scratch   = user0+54  ; 8 byte scratchpad (see UM/MOD)
=120					dsp0      = zpage_end-7    ; initial Data Stack Pointer
=0					blk_offset = 0        ; BLK : UP + 0
=2					scr_offset = 2        ; SCR : UP + 2
=4					current_offset = 4    ; CURRENT (byte) : UP + 4 (Compilation wordlist)
=5					num_wordlists_offset = 5
=6					wordlists_offset = 6  ; WORDLISTS (cells) : UP + 6 to UP + 29
=30					num_order_offset = 30 ; #ORDER (byte) : UP + 30
=31					search_order_offset = 31
=12					max_wordlists = 12    ; Maximum number of wordlists supported
=40					blkbuffer_offset    = 40   ; Address of buffer
=42					buffblocknum_offset = 42   ; Block number current in buffer
=44					buffstatus_offset   = 44   ; Status of buffer (bit 0 = used, bit 1 = dirty)
=46					blockread_offset    = 46   ; Vector to block reading routine
=48					blockwrite_offset   = 48   ; Vector to block writing routine
=$03					AscCC   = $03  ; break (CTRL-c)
=$07					AscBELL = $07  ; bell sound
=$08					AscBS   = $08  ; backspace
=$0a					AscLF   = $0a  ; line feed
=$0d					AscCR   = $0d  ; carriage return
=$1b					AscESC  = $1b  ; escape
=$20					AscSP   = $20  ; space
=$7f					AscDEL  = $7f  ; delete (CTRL-h)
=$10					AscCP   = $10  ; CTRL-p (used to recall previous input history)
=$0e					AscCN   = $0e  ; CTRL-n (used to recall next input history)
=1					CO = 1  ; Compile Only
=2					AN = 2  ; Always Native Compile
=4					IM = 4  ; Immediate Word
=8					NN = 8  ; Never Native Compile
=16					UF = 16 ; Includes Underflow Check (RESERVED)
=32					HC = 32 ; Word has Code Field Area (CFA)
=79					MAX_LINE_LENGTH  = 79      ; assumes 80 character lines

;******  Return to file: platform/../taliforth.asm

.8000					forth:

;******  Processing file: platform/../native_words.asm

.8000					xt_cold:
.8000	d8		cld		                cld
.8001	a9 27		lda #$27	                lda #<kernel_putc
.8003	85 10		sta $10		                sta output
.8005	a9 f0		lda #$f0	                lda #>kernel_putc
.8007	85 11		sta $11		                sta output+1
.8009	a2 21		ldx #$21	                ldx #cold_zp_table_end-cold_zp_table-1
.800b					_load_zp_loop:
.800b	bd c5 80	lda $80c5,x	                lda cold_zp_table,x
.800e	95 00		sta $00,x	                sta zpage,x
.8010	ca		dex		                dex
.8011	d0 f8		bne $800b	                bne _load_zp_loop
.8013	ad c5 80	lda $80c5	                lda cold_zp_table
.8016	85 00		sta $00		                sta zpage
.8018	a2 ff		ldx #$ff	                ldx #rsp0
.801a	9a		txs		                txs
.801b	a2 78		ldx #$78	                ldx #dsp0
.801d	a0 31		ldy #$31	                ldy #cold_user_table_end-cold_user_table-1
.801f	a9 00		lda #$00	                lda #0
.8021					_load_user_vars_loop:
.8021	b9 e7 80	lda $80e7,y	                lda cold_user_table,y
.8024	91 1e		sta ($1e),y	                sta (up),y
.8026	88		dey		                dey
.8027	d0 f8		bne $8021	                bne _load_user_vars_loop
.8029	ad e7 80	lda $80e7	                lda cold_user_table
.802c	92 1e		sta ($1e)	                sta (up)
.802e	20 63 89	jsr $8963	                jsr xt_cr
.8031	ca		dex		                dex
.8032	ca		dex		                dex
.8033	ca		dex		                dex
.8034	ca		dex		                dex
.8035	a9 6b		lda #$6b	                lda #<forth_words_start
.8037	95 02		sta $02,x	                sta 2,x
.8039	a9 bb		lda #$bb	                lda #>forth_words_start
.803b	95 03		sta $03,x	                sta 3,x
.803d	a9 3c		lda #$3c	                lda #<forth_words_end
.803f	38		sec		                sec
.8040	e9 6b		sbc #$6b	                sbc #<forth_words_start
.8042	95 00		sta $00,x	                sta 0,x
.8044	a9 bc		lda #$bc	                lda #>forth_words_end
.8046	e9 bb		sbc #$bb	                sbc #>forth_words_start
.8048	95 01		sta $01,x	                sta 1,x
.804a	20 d5 90	jsr $90d5	                jsr xt_evaluate
.804d	ca		dex		                dex
.804e	ca		dex		                dex
.804f	ca		dex		                dex
.8050	ca		dex		                dex
.8051	a9 3c		lda #$3c	                lda #<user_words_start
.8053	95 02		sta $02,x	                sta 2,x
.8055	a9 bc		lda #$bc	                lda #>user_words_start
.8057	95 03		sta $03,x	                sta 3,x
.8059	a9 3e		lda #$3e	                lda #<user_words_end
.805b	38		sec		                sec
.805c	e9 3c		sbc #$3c	                sbc #<user_words_start
.805e	95 00		sta $00,x	                sta 0,x
.8060	a9 bc		lda #$bc	                lda #>user_words_end
.8062	e9 bc		sbc #$bc	                sbc #>user_words_start
.8064	95 01		sta $01,x	                sta 1,x
.8066	20 d5 90	jsr $90d5	                jsr xt_evaluate
.8069	9c 00 7c	stz $7c00	                stz hist_buff
.806c	9c 80 7c	stz $7c80	                stz hist_buff+$80
.806f	9c 00 7d	stz $7d00	                stz hist_buff+$100
.8072	9c 80 7d	stz $7d80	                stz hist_buff+$180
.8075	9c 00 7e	stz $7e00	                stz hist_buff+$200
.8078	9c 80 7e	stz $7e80	                stz hist_buff+$280
.807b	9c 00 7f	stz $7f00	                stz hist_buff+$300
.807e	9c 80 7f	stz $7f80	                stz hist_buff+$380
.8081					xt_abort:
.8081	a2 78		ldx #$78	                ldx #dsp0
.8083					xt_quit:
.8083	8a		txa		                txa             ; Save the DSP that we just defined
.8084	a2 ff		ldx #$ff	                ldx #rsp0
.8086	9a		txs		                txs
.8087	aa		tax		                tax             ; Restore the DSP. Dude, seriously.
.8088	64 0e		stz $0e		                stz ip
.808a	64 0f		stz $0f		                stz ip+1
.808c	64 06		stz $06		                stz insrc
.808e	64 07		stz $07		                stz insrc+1
.8090	64 16		stz $16		                stz state
.8092	64 17		stz $17		                stz state+1
.8094					_get_line:
.8094	a9 00		lda #$00	                lda #<buffer0   ; input buffer, this is paranoid
.8096	85 08		sta $08		                sta cib
.8098	a9 02		lda #$02	                lda #>buffer0
.809a	85 09		sta $09		                sta cib+1
.809c	64 0a		stz $0a		                stz ciblen
.809e	64 0b		stz $0b		                stz ciblen+1
.80a0	20 f8 9a	jsr $9af8	                jsr xt_refill           ; ( -- f )
.80a3	b5 00		lda $00,x	                lda 0,x
.80a5	d0 05		bne $80ac	                bne _success
.80a7	a9 06		lda #$06	                lda #err_refill
.80a9	4c 3f d8	jmp $d83f	                jmp error
.80ac					_success:
.80ac	e8		inx		                inx                     ; drop
.80ad	e8		inx		                inx
.80ae	20 91 d7	jsr $d791	                jsr interpret
.80b1	e0 78		cpx #$78	                cpx #dsp0
.80b3	f0 05		beq $80ba	                beq _stack_ok
.80b5	90 03		bcc $80ba	                bcc _stack_ok           ; DSP must always be smaller than DSP0
.80b7	4c 3d d8	jmp $d83d	                jmp underflow_error
.80ba					_stack_ok:
.80ba	a5 16		lda $16		                lda state
.80bc	f0 02		beq $80c0	                beq _print
.80be	a9 01		lda #$01	                lda #1                  ; number for "compile" string
.80c0					_print:
.80c0	20 6f d8	jsr $d86f	                jsr print_string
.80c3	80 cf		bra $8094	                bra _get_line
.80c5					z_cold:
.80c5					z_abort:
.80c5					z_quit:
.80c5					cold_zp_table:
>80c5	00 08				        .word cp0+256+1024      ; cp moved to make room for user vars and
>80c7	3e bc				        .word dictionary_start  ; dp
>80c9	00 00				        .word 0                 ; workword
>80cb	00 00				        .word 0                 ; insrc (SOURCE-ID is 0 for keyboard)
>80cd	00 02				        .word buffer0           ; cib
>80cf	00 00				        .word 0                 ; ciblen
>80d1	00 00				        .word 0                 ; toin
>80d3	00 00				        .word 0                 ; ip
>80d5	27 f0				        .word kernel_putc       ; output
>80d7	21 f0				        .word kernel_getc       ; input
>80d9	00 00				        .word 0                 ; havekey
>80db	00 00				        .word 0                 ; state (0 = interpret)
>80dd	0a 00				        .word 10                ; base
>80df	14 00				        .word 20                ; nc-limit
>80e1	00 00				        .word 0                 ; uf_strip (off by default)
>80e3	00 03				        .word cp0               ; up (user vars put right at beginning of
>80e5	00 00				        .word 0                 ; status
.80e7					cold_zp_table_end:
.80e7					cold_user_table:
>80e7	00 00				        .word 0                         ; BLK
>80e9	00 00				        .word 0                         ; SCR
>80eb	00				        .byte 0                         ; CURRENT = FORTH-WORDLIST
>80ec	04				        .byte 4                         ; #WORDLISTS (FORTH EDITOR ASSEMBLER ROOT)
>80ed	3e bc				        .word dictionary_start          ; FORTH-WORDLIST
>80ef	86 ca				        .word editor_dictionary_start   ; EDITOR-WORDLIST
>80f1	d6 ca				        .word assembler_dictionary_start ; ASSEMBLER-WORDLIST
>80f3	45 ca				        .word root_dictionary_start     ; ROOT-WORDLIST
>80f5	00 00 00 00 00 00 00 00		        .word 0,0,0,0,0,0,0,0           ; User wordlists
>80fd	00 00 00 00 00 00 00 00
>8105	01				        .byte 1                         ; #ORDER
>8106	00 00 00 00 00 00 00 00		        .byte 0,0,0,0,0,0,0,0,0         ; search-order
>810e	00
>810f	00 04				        .word cp0+256                   ; Address of buffer (right after USER vars)
>8111	00 00				        .word 0                         ; block in buffer
>8113	00 00				        .word 0                         ; buffer status (not in use)
>8115	5b 85				        .word xt_block_word_error       ; block-read vector
>8117	5b 85				        .word xt_block_word_error       ; block-write vector
.8119					cold_user_table_end:
.8119					xt_abort_quote:
.8119	20 4f 9d	jsr $9d4f	                jsr xt_s_quote          ; S"
.811c	a0 81		ldy #$81	                ldy #>abort_quote_runtime
.811e	a9 24		lda #$24	                lda #<abort_quote_runtime
.8120	20 cc d6	jsr $d6cc	                jsr cmpl_subroutine     ; may not be JMP as JSR/RTS
.8123	60		rts		z_abort_quote:  rts
.8124					abort_quote_runtime:
.8124	b5 04		lda $04,x	                lda 4,x
.8126	15 05		ora $05,x	                ora 5,x
.8128	f0 09		beq $8133	                beq _done       ; if FALSE, we're done
.812a	20 fd a4	jsr $a4fd	                jsr xt_type
.812d	20 63 89	jsr $8963	                jsr xt_cr
.8130	4c 81 80	jmp $8081	                jmp xt_abort    ; not JSR, so never come back
.8133					_done:
.8133	8a		txa		                txa
.8134	18		clc		                clc
.8135	69 06		adc #$06	                adc #6
.8137	aa		tax		                tax
.8138	60		rts		                rts
.8139					xt_abs:
.8139	20 29 d8	jsr $d829	                jsr underflow_1
.813c	b5 01		lda $01,x	                lda 1,x
.813e	10 0d		bpl $814d	                bpl _done       ; positive number, easy money!
.8140	38		sec		                sec
.8141	a9 00		lda #$00	                lda #0
.8143	f5 00		sbc $00,x	                sbc 0,x         ; LSB
.8145	95 00		sta $00,x	                sta 0,x
.8147	a9 00		lda #$00	                lda #0          ; MSB
.8149	f5 01		sbc $01,x	                sbc 1,x
.814b	95 01		sta $01,x	                sta 1,x
.814d					_done:
.814d	60		rts		z_abs:          rts
.814e					xt_accept:
.814e	20 2e d8	jsr $d82e	                jsr underflow_2
.8151	b5 00		lda $00,x	                lda 0,x
.8153	15 01		ora $01,x	                ora 1,x
.8155	d0 09		bne $8160	                bne _not_zero
.8157	e8		inx		                inx
.8158	e8		inx		                inx
.8159	74 00		stz $00,x	                stz 0,x
.815b	74 01		stz $01,x	                stz 1,x
.815d	4c 2c 82	jmp $822c	                jmp accept_done
.8160					_not_zero:
.8160	b5 00		lda $00,x	                lda 0,x         ; number of chars to get in tmp2 ...
.8162	85 26		sta $26		                sta tmp2
.8164	64 27		stz $27		                stz tmp2+1      ; ... but we only accept max 255 chars
.8166	b5 02		lda $02,x	                lda 2,x         ; address of buffer is NOS, to tmp1
.8168	85 24		sta $24		                sta tmp1
.816a	b5 03		lda $03,x	                lda 3,x
.816c	85 25		sta $25		                sta tmp1+1
.816e	e8		inx		                inx
.816f	e8		inx		                inx
.8170	a0 00		ldy #$00	                ldy #0
.8172	a5 20		lda $20		                lda status
.8174	29 f7		and #$f7	                and #$f7
.8176	1a		inc a		               ina
.8177	09 08		ora #$08	                ora #$08
.8179	85 20		sta $20		                sta status
.817b					accept_loop:
.817b	20 38 93	jsr $9338	                jsr key_a
.817e	c9 0a		cmp #$0a	                cmp #AscLF
.8180	f0 20		beq $81a2	                beq _eol
.8182	c9 0d		cmp #$0d	                cmp #AscCR
.8184	f0 1c		beq $81a2	                beq _eol
.8186	c9 08		cmp #$08	                cmp #AscBS
.8188	f0 22		beq $81ac	                beq _backspace
.818a	c9 7f		cmp #$7f	                cmp #AscDEL     ; (CTRL-h)
.818c	f0 1e		beq $81ac	                beq _backspace
.818e	c9 10		cmp #$10	                cmp #AscCP
.8190	f0 36		beq $81c8	                beq _ctrl_p
.8192	c9 0e		cmp #$0e	                cmp #AscCN
.8194	f0 44		beq $81da	                beq _ctrl_n
.8196	91 24		sta ($24),y	                sta (tmp1),y
.8198	c8		iny		                iny
.8199	20 f6 8d	jsr $8df6	                jsr emit_a
.819c	c4 26		cpy $26		                cpy tmp2        ; reached character limit?
.819e	d0 db		bne $817b	                bne accept_loop       ; fall through if buffer limit reached
.81a0	80 03		bra $81a5	                bra _buffer_full
.81a2					_eol:
.81a2	20 1e a1	jsr $a11e	                jsr xt_space    ; print final space
.81a5					_buffer_full:
.81a5	94 00		sty $00,x	                sty 0,x         ; Y contains number of chars accepted already
.81a7	74 01		stz $01,x	                stz 1,x         ; we only accept 256 chars
.81a9	4c 2c 82	jmp $822c	                jmp accept_done
.81ac					_backspace:
.81ac	c0 00		cpy #$00	                cpy #0          ; buffer empty?
.81ae	d0 06		bne $81b6	                bne +
.81b0	a9 07		lda #$07	                lda #AscBELL    ; complain and don't delete beyond the start of line
.81b2	20 f6 8d	jsr $8df6	                jsr emit_a
.81b5	c8		iny		                iny
.81b6					+
.81b6	88		dey		                dey
.81b7	a9 08		lda #$08	                lda #AscBS      ; move back one
.81b9	20 f6 8d	jsr $8df6	                jsr emit_a
.81bc	a9 20		lda #$20	                lda #AscSP      ; print a space (rubout)
.81be	20 f6 8d	jsr $8df6	                jsr emit_a
.81c1	a9 08		lda #$08	                lda #AscBS      ; move back over space
.81c3	20 f6 8d	jsr $8df6	                jsr emit_a
.81c6	80 b3		bra $817b	                bra accept_loop
.81c8					_ctrl_p:
.81c8	a5 20		lda $20		                lda status
.81ca	29 07		and #$07	                and #7
.81cc	d0 08		bne $81d6	                bne _ctrl_p_dec
.81ce	a5 20		lda $20		                lda status
.81d0	09 07		ora #$07	                ora #7
.81d2	85 20		sta $20		                sta status
.81d4	80 11		bra $81e7	                bra _recall_history
.81d6					_ctrl_p_dec:
.81d6	c6 20		dec $20		                dec status
.81d8	80 0d		bra $81e7	                bra _recall_history
.81da					_ctrl_n:
.81da	a9 08		lda #$08	                lda #$8
.81dc	24 20		bit $20		                bit status
.81de	d0 07		bne $81e7	                bne _recall_history
.81e0	a5 20		lda $20		                lda status
.81e2	29 f7		and #$f7	                and #$f7
.81e4	1a		inc a		               ina
.81e5	85 20		sta $20		                sta status
.81e7					_recall_history:
.81e7	a9 08		lda #$08	                lda #%00001000
.81e9	14 20		trb $20		                trb status
.81eb	20 47 82	jsr $8247	                jsr accept_total_recall
.81ee	a9 0d		lda #$0d	                lda #AscCR
.81f0	20 f6 8d	jsr $8df6	                jsr emit_a
.81f3					input_clear:
.81f3	c0 00		cpy #$00	                cpy #0
.81f5	f0 08		beq $81ff	                beq input_cleared
.81f7	a9 20		lda #$20	                lda #AscSP
.81f9	20 f6 8d	jsr $8df6	                jsr emit_a
.81fc	88		dey		                dey
.81fd	80 f4		bra $81f3	                bra input_clear
.81ff					input_cleared:
.81ff	a9 0d		lda #$0d	                lda #AscCR
.8201	20 f6 8d	jsr $8df6	                jsr emit_a
.8204	b1 28		lda ($28),y	                lda (tmp3),y
.8206	85 21		sta $21		                sta status+1
.8208	e6 28		inc $28		                inc tmp3
.820a	d0 02		bne $820e	                bne +           ; Increment the upper byte on carry.
.820c	e6 29		inc $29		                inc tmp3+1
.820e					+
.820e	a9 0d		lda #$0d	                lda #AscCR
.8210	20 f6 8d	jsr $8df6	                jsr emit_a
.8213					_history_loop:
.8213	c4 21		cpy $21		                cpy status+1
.8215	d0 03		bne $821a	                bne +
.8217	4c 7b 81	jmp $817b	                jmp accept_loop       ; Needs a long jump
.821a					+
.821a	c4 26		cpy $26		                cpy tmp2
.821c	f0 0a		beq $8228	                beq _hist_filled_buffer
.821e	b1 28		lda ($28),y	                lda (tmp3),y
.8220	91 24		sta ($24),y	                sta (tmp1),y
.8222	20 f6 8d	jsr $8df6	                jsr emit_a
.8225	c8		iny		                iny
.8226	80 eb		bra $8213	                bra _history_loop
.8228					_hist_filled_buffer:
.8228	88		dey		                dey
.8229	4c 7b 81	jmp $817b	                jmp accept_loop
.822c					accept_done:
.822c	20 47 82	jsr $8247	                jsr accept_total_recall
.822f	85 21		sta $21		                sta status+1
.8231	a0 00		ldy #$00	                ldy #0
.8233	91 28		sta ($28),y	                sta (tmp3),y
.8235	e6 28		inc $28		                inc tmp3
.8237	d0 02		bne $823b	                bne +           ; Increment the upper byte on carry.
.8239	e6 29		inc $29		                inc tmp3+1
.823b					+
.823b					_save_history_loop:
.823b	c4 21		cpy $21		                cpy status+1
.823d	f0 07		beq $8246	                beq _save_history_done
.823f	b1 24		lda ($24),y	                lda (tmp1),y
.8241	91 28		sta ($28),y	                sta (tmp3),y
.8243	c8		iny		                iny
.8244	80 f5		bra $823b	                bra _save_history_loop
.8246					_save_history_done:
.8246					z_accept:
.8246	60		rts		                rts
.8247					accept_total_recall:
.8247	a9 00		lda #$00	                lda #<hist_buff
.8249	85 28		sta $28		                sta tmp3
.824b	a9 7c		lda #$7c	                lda #>hist_buff
.824d	85 29		sta $29		                sta tmp3+1
.824f	a5 20		lda $20		                lda status
.8251	6a		ror a		                ror
.8252	29 03		and #$03	                and #3
.8254	18		clc		                clc
.8255	65 29		adc $29		                adc tmp3+1
.8257	85 29		sta $29		                sta tmp3+1
.8259	a5 20		lda $20		                lda status
.825b	6a		ror a		                ror             ; Rotate through carry into msb.
.825c	6a		ror a		                ror
.825d	29 80		and #$80	                and #$80
.825f	18		clc		                clc
.8260	65 28		adc $28		                adc tmp3
.8262	85 28		sta $28		                sta tmp3
.8264	90 02		bcc $8268	                bcc +           ; Increment the upper byte on carry.
.8266	e6 29		inc $29		                inc tmp3+1
.8268					+
.8268	98		tya		                tya
.8269	c9 80		cmp #$80	                cmp #$80
.826b	90 02		bcc $826f	                bcc +
.826d	a9 7f		lda #$7f	                lda #$7F
.826f					+
.826f	60		rts		                rts
.8270					xt_action_of:
.8270	a5 16		lda $16		                lda state
.8272	05 17		ora $17		                ora state+1
.8274	f0 0c		beq $8282	                beq _interpreting
.8276					_compiling:
.8276	20 9e 85	jsr $859e	                jsr xt_bracket_tick
.8279	a0 8a		ldy #$8a	                ldy #>xt_defer_fetch
.827b	a9 df		lda #$df	                lda #<xt_defer_fetch
.827d	20 cc d6	jsr $d6cc	                jsr cmpl_subroutine
.8280	80 06		bra $8288	                bra _done
.8282					_interpreting:
.8282	20 0b a2	jsr $a20b	                jsr xt_tick
.8285	20 df 8a	jsr $8adf	                jsr xt_defer_fetch
.8288					_done:
.8288	60		rts		z_action_of:           rts
.8289					xt_again:
.8289	20 29 d8	jsr $d829	                jsr underflow_1
.828c	a0 00		ldy #$00	                ldy #0
.828e	a9 4c		lda #$4c	                lda #$4C        ; JMP
.8290	91 00		sta ($00),y	                sta (cp),y
.8292	c8		iny		                iny
.8293	b5 00		lda $00,x	                lda 0,x         ; LSB of address
.8295	91 00		sta ($00),y	                sta (cp),y
.8297	c8		iny		                iny
.8298	b5 01		lda $01,x	                lda 1,x         ; MSB of address
.829a	91 00		sta ($00),y	                sta (cp),y
.829c	c8		iny		                iny
.829d	98		tya		                tya
.829e	18		clc		                clc
.829f	65 00		adc $00		                adc cp
.82a1	85 00		sta $00		                sta cp
.82a3	90 02		bcc $82a7	                bcc _done
.82a5	e6 01		inc $01		                inc cp+1
.82a7					_done:
.82a7	e8		inx		                inx
.82a8	e8		inx		                inx
.82a9	60		rts		z_again:        rts
.82aa					xt_align:
.82aa					xt_aligned:
.82aa					z_align:
.82aa	60		rts		z_aligned:      rts             ; stripped out during native compile
.82ab					xt_allot:
.82ab	20 29 d8	jsr $d829	                jsr underflow_1
.82ae	b5 01		lda $01,x	                lda 1,x
.82b0	30 22		bmi $82d4	                bmi _release
.82b2	18		clc		                clc
.82b3	a5 00		lda $00		                lda cp
.82b5	75 00		adc $00,x	                adc 0,x
.82b7	85 00		sta $00		                sta cp
.82b9	a5 01		lda $01		                lda cp+1
.82bb	75 01		adc $01,x	                adc 1,x
.82bd	85 01		sta $01		                sta cp+1
.82bf	a0 00		ldy #$00	                ldy #<cp_end
.82c1	c4 00		cpy $00		                cpy cp
.82c3	a9 7c		lda #$7c	                lda #>cp_end
.82c5	e5 01		sbc $01		                sbc cp+1
.82c7	b0 48		bcs $8311	                bcs _done               ; we're fine.
.82c9	84 00		sty $00		                sty cp                  ; still #<cp_end
.82cb	a9 7c		lda #$7c	                lda #>cp_end
.82cd	85 01		sta $01		                sta cp+1
.82cf	a9 00		lda #$00	                lda #err_allot
.82d1	4c 3f d8	jmp $d83f	                jmp error
.82d4					_release:
.82d4	ca		dex		                dex
.82d5	ca		dex		                dex
.82d6	a5 00		lda $00		                lda cp
.82d8	95 00		sta $00,x	                sta 0,x
.82da	a5 01		lda $01		                lda cp+1
.82dc	95 01		sta $01,x	                sta 1,x
.82de	20 e3 99	jsr $99e3	                jsr xt_plus                     ; new CP is now TOS
.82e1	ca		dex		                dex
.82e2	ca		dex		                dex                             ; new CP now NOS
.82e3	a9 00		lda #$00	                lda #<cp0
.82e5	95 00		sta $00,x	                sta 0,x
.82e7	a9 03		lda #$03	                lda #>cp0
.82e9	95 01		sta $01,x	                sta 1,x                         ; CP0 is TOS
.82eb	20 50 d7	jsr $d750	                jsr compare_16bit               ; still ( CP CP0 )
.82ee	f0 17		beq $8307	                beq _nega_done
.82f0	30 15		bmi $8307	                bmi _nega_done
.82f2	a9 00		lda #$00	                lda #<cp0
.82f4	85 00		sta $00		                sta cp
.82f6	a9 03		lda #$03	                lda #>cp0
.82f8	85 01		sta $01		                sta cp+1
.82fa	a9 3e		lda #$3e	                lda #<dictionary_start
.82fc	85 02		sta $02		                sta dp
.82fe	a9 bc		lda #$bc	                lda #>dictionary_start
.8300	85 03		sta $03		                sta dp+1
.8302	a9 0a		lda #$0a	                lda #err_negallot
.8304	4c 3f d8	jmp $d83f	                jmp error
.8307					_nega_done:
.8307	b5 02		lda $02,x	                lda 2,x
.8309	85 00		sta $00		                sta cp
.830b	b5 03		lda $03,x	                lda 3,x
.830d	85 01		sta $01		                sta cp+1
.830f	e8		inx		                inx
.8310	e8		inx		                inx                     ; drop through to _done
.8311					_done:
.8311	e8		inx		                inx
.8312	e8		inx		                inx
.8313					z_allot:
.8313	60		rts		                rts
.8314					xt_allow_native:
.8314	20 6b d7	jsr $d76b	                jsr current_to_dp
.8317	a0 01		ldy #$01	                ldy #1          ; offset for status byte
.8319	b1 02		lda ($02),y	                lda (dp),y
.831b	29 f5		and #$f5	                and #$ff-NN-AN  ; AN and NN flag is clear.
.831d	91 02		sta ($02),y	                sta (dp),y
.831f					z_allow_native:
.831f	60		rts		                rts
.8320					xt_also:
.8320	20 34 91	jsr $9134	                jsr xt_get_order
.8323	20 93 98	jsr $9893	                jsr xt_over
.8326	20 a8 a1	jsr $a1a8	                jsr xt_swap
.8329	20 1d 98	jsr $981d	                jsr xt_one_plus
.832c	20 1b 9d	jsr $9d1b	                jsr xt_set_order
.832f	60		rts		z_also:         rts
.8330					xt_always_native:
.8330	20 6b d7	jsr $d76b	                jsr current_to_dp
.8333	a0 01		ldy #$01	                ldy #1          ; offset for status byte
.8335	b1 02		lda ($02),y	                lda (dp),y
.8337	09 02		ora #$02	                ora #AN         ; Make sure AN flag is set
.8339	29 f7		and #$f7	                and #$ff-NN     ; and NN flag is clear.
.833b	91 02		sta ($02),y	                sta (dp),y
.833d					z_always_native:
.833d	60		rts		                rts
.833e					xt_and:
.833e	20 2e d8	jsr $d82e	                jsr underflow_2
.8341	b5 00		lda $00,x	                lda 0,x
.8343	35 02		and $02,x	                and 2,x
.8345	95 02		sta $02,x	                sta 2,x
.8347	b5 01		lda $01,x	                lda 1,x
.8349	35 03		and $03,x	                and 3,x
.834b	95 03		sta $03,x	                sta 3,x
.834d	e8		inx		                inx
.834e	e8		inx		                inx
.834f	60		rts		z_and:          rts
.8350					xt_at_xy:
.8350	20 2e d8	jsr $d82e	                jsr underflow_2
.8353	a5 18		lda $18		                lda base
.8355	48		pha		                pha
.8356	a9 0a		lda #$0a	                lda #10
.8358	85 18		sta $18		                sta base
.835a	a9 1b		lda #$1b	                lda #AscESC
.835c	20 f6 8d	jsr $8df6	                jsr emit_a
.835f	a9 5b		lda #$5b	                lda #$5B        ; ASCII for "["
.8361	20 f6 8d	jsr $8df6	                jsr emit_a
.8364	20 1d 98	jsr $981d	                jsr xt_one_plus ; AT-XY is zero based, but ANSI is 1 based
.8367	20 75 d8	jsr $d875	                jsr print_u
.836a	a9 3b		lda #$3b	                lda #$3B        ; ASCII for ";"
.836c	20 f6 8d	jsr $8df6	                jsr emit_a
.836f	20 1d 98	jsr $981d	                jsr xt_one_plus ; AT-XY is zero based, but ANSI is 1 based
.8372	20 75 d8	jsr $d875	                jsr print_u
.8375	a9 48		lda #$48	                lda #'H'
.8377	20 f6 8d	jsr $8df6	                jsr emit_a
.837a	68		pla		                pla
.837b	85 18		sta $18		                sta base
.837d	60		rts		z_at_xy:        rts
.837e					xt_backslash:
.837e	a5 0a		lda $0a		                lda ciblen
.8380	85 0c		sta $0c		                sta toin
.8382	a5 0b		lda $0b		                lda ciblen+1
.8384	85 0d		sta $0d		                sta toin+1
.8386	60		rts		z_backslash:    rts
.8387					xt_base:
.8387	ca		dex		                dex
.8388	ca		dex		                dex
.8389	a9 18		lda #$18	                lda #<base
.838b	95 00		sta $00,x	                sta 0,x         ; LSB
.838d	74 01		stz $01,x	                stz 1,x         ; MSB is always 0
.838f	60		rts		z_base:         rts
.8390					xt_begin:
.8390	20 72 91	jsr $9172	                jsr xt_here
.8393	60		rts		z_begin:        rts
.8394					xt_bell:
.8394	a9 07		lda #$07	                lda #7          ; ASCII value for BELl
.8396	20 f6 8d	jsr $8df6	                jsr emit_a
.8399	60		rts		z_bell:         rts
.839a					xt_bl:
.839a	ca		dex		                dex
.839b	ca		dex		                dex
.839c	a9 20		lda #$20	                lda #AscSP
.839e	95 00		sta $00,x	                sta 0,x
.83a0	74 01		stz $01,x	                stz 1,x
.83a2	60		rts		z_bl:           rts
.83a3					xt_blk:
.83a3	ca		dex		                dex
.83a4	ca		dex		                dex
.83a5	18		clc		                clc
.83a6	a5 1e		lda $1e		                lda up
.83a8	69 00		adc #$00	                adc #blk_offset ; Add offset
.83aa	95 00		sta $00,x	                sta 0,x
.83ac	a5 1f		lda $1f		                lda up+1
.83ae	69 00		adc #$00	                adc #0          ; Adding carry
.83b0	95 01		sta $01,x	                sta 1,x
.83b2	60		rts		z_blk:          rts
.83b3					xt_blkbuffer:
.83b3	ca		dex		                dex
.83b4	ca		dex		                dex
.83b5	a0 28		ldy #$28	                ldy #blkbuffer_offset
.83b7	b1 1e		lda ($1e),y	                lda (up),y
.83b9	95 00		sta $00,x	                sta 0,x
.83bb	c8		iny		                iny             ; Move along to the next byte
.83bc	b1 1e		lda ($1e),y	                lda (up),y
.83be	95 01		sta $01,x	                sta 1,x
.83c0	60		rts		z_blkbuffer:    rts
.83c1					xt_block:
.83c1	a0 2a		ldy #$2a	                ldy #buffblocknum_offset
.83c3	b1 1e		lda ($1e),y	                lda (up),y
.83c5	d5 00		cmp $00,x	                cmp 0,x
.83c7	d0 0f		bne $83d8	                bne _not_in_buffer
.83c9	c8		iny		                iny
.83ca	b1 1e		lda ($1e),y	                lda (up),y
.83cc	d5 01		cmp $01,x	                cmp 1,x
.83ce	d0 08		bne $83d8	                bne _not_in_buffer
.83d0	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.83d2	b1 1e		lda ($1e),y	                lda (up),y
.83d4	29 01		and #$01	                and #1          ; Check the in-use flag (bit 0)
.83d6	d0 30		bne $8408	                bne _done       ; It's already in the buffer and in use.
.83d8					_not_in_buffer:
.83d8	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.83da	b1 1e		lda ($1e),y	                lda (up),y      ; Only bits 0 and 1 are used, so only
.83dc	c9 03		cmp #$03	                cmp #3          ; LSB is needed.
.83de	d0 0c		bne $83ec	                bne _buffer_available ; Unused or not dirty = available
.83e0	20 b3 83	jsr $83b3	                jsr xt_blkbuffer
.83e3	20 a5 85	jsr $85a5	                jsr xt_buffblocknum
.83e6	20 80 8f	jsr $8f80	                jsr xt_fetch
.83e9	20 60 85	jsr $8560	                jsr xt_block_write
.83ec					_buffer_available:
.83ec	a0 2a		ldy #$2a	                ldy #buffblocknum_offset
.83ee	b5 00		lda $00,x	                lda 0,x
.83f0	91 1e		sta ($1e),y	                sta (up),y
.83f2	c8		iny		                iny
.83f3	b5 01		lda $01,x	                lda 1,x
.83f5	91 1e		sta ($1e),y	                sta (up),y
.83f7	20 b3 83	jsr $83b3	                jsr xt_blkbuffer
.83fa	20 a8 a1	jsr $a1a8	                jsr xt_swap
.83fd	20 3d 85	jsr $853d	                jsr xt_block_read
.8400	a9 01		lda #$01	                lda #1
.8402	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.8404	91 1e		sta ($1e),y	                sta (up),y
.8406	ca		dex		                dex
.8407	ca		dex		                dex
.8408					_done:
.8408	a0 28		ldy #$28	                ldy #blkbuffer_offset
.840a	b1 1e		lda ($1e),y	                lda (up),y
.840c	95 00		sta $00,x	                sta 0,x
.840e	c8		iny		                iny
.840f	b1 1e		lda ($1e),y	                lda (up),y
.8411	95 01		sta $01,x	                sta 1,x
.8413	60		rts		z_block:        rts
.8414					xt_block_ramdrive_init:
.8414	20 29 d8	jsr $d829	                jsr underflow_1
.8417	4c 32 85	jmp $8532	                jmp _after_ramdrive_code
.841a					_ramdrive_code:
>841a	62 61 73 65 20 40 20 73		        .text "base @ swap decimal"
>8422	77 61 70 20 64 65 63 69 6d 61 6c
>842d	20 31 30 32 34 20 2a		        .text " 1024 *" ; ( Calculate how many bytes are needed for numblocks blocks )
>8434	20 64 75 70			        .text " dup"    ; ( Save a copy for formatting it at the end )
>8438	20 62 75 66 66 65 72 3a		        .text " buffer: ramdrive" ; ( Create ramdrive )
>8440	20 72 61 6d 64 72 69 76 65
>8449	20 3a 20 62 6c 6f 63 6b		        .text " : block-read-ramdrive"  ; ( addr u -- )
>8451	2d 72 65 61 64 2d 72 61 6d 64 72 69 76 65
>845f	20 72 61 6d 64 72 69 76		        .text " ramdrive swap 1024 * + swap 1024 move ;"
>8467	65 20 73 77 61 70 20 31 30 32 34 20 2a 20 2b 20
>8477	73 77 61 70 20 31 30 32 34 20 6d 6f 76 65 20 3b
>8487	20 3a 20 62 6c 6f 63 6b		        .text " : block-write-ramdrive" ; ( addr u -- )
>848f	2d 77 72 69 74 65 2d 72 61 6d 64 72 69 76 65
>849e	20 72 61 6d 64 72 69 76		        .text " ramdrive swap 1024 * + 1024 move ;"
>84a6	65 20 73 77 61 70 20 31 30 32 34 20 2a 20 2b 20
>84b6	31 30 32 34 20 6d 6f 76 65 20 3b
>84c1	20 27 20 62 6c 6f 63 6b		        .text " ' block-read-ramdrive block-read-vector !" ; ( Replace I/O vectors )
>84c9	2d 72 65 61 64 2d 72 61 6d 64 72 69 76 65 20 62
>84d9	6c 6f 63 6b 2d 72 65 61 64 2d 76 65 63 74 6f 72
>84e9	20 21
>84eb	20 27 20 62 6c 6f 63 6b		        .text " ' block-write-ramdrive block-write-vector !"
>84f3	2d 77 72 69 74 65 2d 72 61 6d 64 72 69 76 65 20
>8503	62 6c 6f 63 6b 2d 77 72 69 74 65 2d 76 65 63 74
>8513	6f 72 20 21
>8517	20 72 61 6d 64 72 69 76		        .text " ramdrive swap blank base !"
>851f	65 20 73 77 61 70 20 62 6c 61 6e 6b 20 62 61 73
>852f	65 20 21
.8532					_after_ramdrive_code:
.8532	20 a9 a0	jsr $a0a9	                jsr sliteral_runtime
>8535	1a 84 18 01			.word _ramdrive_code, _after_ramdrive_code-_ramdrive_code
.8539	20 d5 90	jsr $90d5	                jsr xt_evaluate
.853c					z_block_ramdrive_init:
.853c	60		rts		                rts
.853d					xt_block_read:
.853d	a0 2e		ldy #$2e	                ldy #blockread_offset
.853f	b1 1e		lda ($1e),y	                lda (up),y
.8541	85 24		sta $24		                sta tmp1
.8543	c8		iny		                iny
.8544	b1 1e		lda ($1e),y	                lda (up),y
.8546	85 25		sta $25		                sta tmp1+1
.8548	6c 24 00	jmp ($0024)	                jmp (tmp1)
.854b					z_block_read:
.854b					xt_block_read_vector:
.854b	ca		dex		                dex
.854c	ca		dex		                dex
.854d	18		clc		                clc
.854e	a5 1e		lda $1e		                lda up
.8550	69 2e		adc #$2e	                adc #blockread_offset
.8552	95 00		sta $00,x	                sta 0,x
.8554	a5 1f		lda $1f		                lda up+1
.8556	69 00		adc #$00	                adc #0          ; Add carry
.8558	95 01		sta $01,x	                sta 1,x
.855a					z_block_read_vector:
.855a	60		rts		                rts
.855b					xt_block_word_error:
.855b	a9 0c		lda #$0c	                lda #err_blockwords
.855d	4c 3f d8	jmp $d83f	                jmp error       ; no RTS needed
.8560					z_block_word_error:
.8560					xt_block_write:
.8560	a0 30		ldy #$30	                ldy #blockwrite_offset
.8562	b1 1e		lda ($1e),y	                lda (up),y
.8564	85 24		sta $24		                sta tmp1
.8566	c8		iny		                iny
.8567	b1 1e		lda ($1e),y	                lda (up),y
.8569	85 25		sta $25		                sta tmp1+1
.856b	6c 24 00	jmp ($0024)	                jmp (tmp1)
.856e					z_block_write:
.856e					xt_block_write_vector:
.856e	ca		dex		                dex
.856f	ca		dex		                dex
.8570	18		clc		                clc
.8571	a5 1e		lda $1e		                lda up
.8573	69 30		adc #$30	                adc #blockwrite_offset
.8575	95 00		sta $00,x	                sta 0,x
.8577	a5 1f		lda $1f		                lda up+1
.8579	69 00		adc #$00	                adc #0          ; Add carry
.857b	95 01		sta $01,x	                sta 1,x
.857d					z_block_write_vector:
.857d	60		rts		                rts
.857e					xt_bounds:
.857e	20 2e d8	jsr $d82e	                jsr underflow_2
.8581	18		clc		                clc
.8582	b5 00		lda $00,x	                lda 0,x                 ; LSB u
.8584	b4 02		ldy $02,x	                ldy 2,x                 ; LSB addr
.8586	75 02		adc $02,x	                adc 2,x
.8588	95 02		sta $02,x	                sta 2,x                 ; LSB addr+u
.858a	94 00		sty $00,x	                sty 0,x
.858c	b5 01		lda $01,x	                lda 1,x                 ; MSB u
.858e	b4 03		ldy $03,x	                ldy 3,x                 ; MSB addr
.8590	75 03		adc $03,x	                adc 3,x
.8592	95 03		sta $03,x	                sta 3,x                 ; MSB addr+u
.8594	94 01		sty $01,x	                sty 1,x
.8596	60		rts		z_bounds:       rts
.8597					xt_bracket_char:
.8597	20 31 86	jsr $8631	                jsr xt_char
.859a	20 8a 93	jsr $938a	                jsr xt_literal
.859d	60		rts		z_bracket_char: rts
.859e					xt_bracket_tick:
.859e	20 0b a2	jsr $a20b	                jsr xt_tick
.85a1	20 8a 93	jsr $938a	                jsr xt_literal
.85a4	60		rts		z_bracket_tick: rts
.85a5					xt_buffblocknum:
.85a5	ca		dex		                dex
.85a6	ca		dex		                dex
.85a7	18		clc		                clc
.85a8	a5 1e		lda $1e		                lda up
.85aa	69 2a		adc #$2a	                adc #buffblocknum_offset        ; Add offset
.85ac	95 00		sta $00,x	                sta 0,x
.85ae	a5 1f		lda $1f		                lda up+1
.85b0	69 00		adc #$00	                adc #0                          ; Adding carry
.85b2	95 01		sta $01,x	                sta 1,x
.85b4	60		rts		z_buffblocknum: rts
.85b5					xt_buffer:
.85b5	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.85b7	b1 1e		lda ($1e),y	                lda (up),y      ; Only bits 0 and 1 are used, so only
.85b9	c9 03		cmp #$03	                cmp #3          ; LSB is needed.
.85bb	d0 0c		bne $85c9	                bne _buffer_available ; Unused or not dirty = available
.85bd	20 b3 83	jsr $83b3	                jsr xt_blkbuffer
.85c0	20 a5 85	jsr $85a5	                jsr xt_buffblocknum
.85c3	20 80 8f	jsr $8f80	                jsr xt_fetch
.85c6	20 60 85	jsr $8560	                jsr xt_block_write
.85c9					_buffer_available:
.85c9	a0 2a		ldy #$2a	                ldy #buffblocknum_offset
.85cb	b5 00		lda $00,x	                lda 0,x
.85cd	91 1e		sta ($1e),y	                sta (up),y
.85cf	c8		iny		                iny
.85d0	b5 01		lda $01,x	                lda 1,x
.85d2	91 1e		sta ($1e),y	                sta (up),y
.85d4	a9 01		lda #$01	                lda #1
.85d6	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.85d8	91 1e		sta ($1e),y	                sta (up),y
.85da					_done:
.85da	a0 28		ldy #$28	                ldy #blkbuffer_offset
.85dc	b1 1e		lda ($1e),y	                lda (up),y
.85de	95 00		sta $00,x	                sta 0,x
.85e0	c8		iny		                iny
.85e1	b1 1e		lda ($1e),y	                lda (up),y
.85e3	95 01		sta $01,x	                sta 1,x
.85e5	60		rts		z_buffer:       rts
.85e6					xt_buffer_colon:
.85e6	20 69 89	jsr $8969	                jsr xt_create
.85e9	20 ab 82	jsr $82ab	                jsr xt_allot
.85ec	60		rts		z_buffer_colon: rts
.85ed					xt_buffstatus:
.85ed	ca		dex		                dex
.85ee	ca		dex		                dex
.85ef	18		clc		                clc
.85f0	a5 1e		lda $1e		                lda up
.85f2	69 2c		adc #$2c	                adc #buffstatus_offset  ; Add offset
.85f4	95 00		sta $00,x	                sta 0,x
.85f6	a5 1f		lda $1f		                lda up+1
.85f8	69 00		adc #$00	                adc #0                  ; Adding carry
.85fa	95 01		sta $01,x	                sta 1,x
.85fc	60		rts		z_buffstatus:   rts
.85fd					xt_bye:
.85fd	4c 2b f0	jmp $f02b	                jmp platform_bye
.8600					z_bye:
.8600					xt_c_comma:
.8600	20 29 d8	jsr $d829	                jsr underflow_1
.8603	b5 00		lda $00,x	                lda 0,x
.8605	20 dc d6	jsr $d6dc	                jsr cmpl_a
.8608	e8		inx		                inx
.8609	e8		inx		                inx
.860a	60		rts		z_c_comma:      rts
.860b					xt_c_fetch:
.860b	20 29 d8	jsr $d829	                jsr underflow_1
.860e	a1 00		lda ($00,x)	                lda (0,x)
.8610	95 00		sta $00,x	                sta 0,x
.8612	74 01		stz $01,x	                stz 1,x         ; Ignore LSB
.8614	60		rts		z_c_fetch:      rts
.8615					xt_c_store:
.8615	20 2e d8	jsr $d82e	                jsr underflow_2
.8618	b5 02		lda $02,x	                lda 2,x
.861a	81 00		sta ($00,x)	                sta (0,x)
.861c	e8		inx		                inx
.861d	e8		inx		                inx
.861e	e8		inx		                inx
.861f	e8		inx		                inx
.8620	60		rts		z_c_store:      rts
.8621					xt_cell_plus:
.8621	20 29 d8	jsr $d829	                jsr underflow_1
.8624	f6 00		inc $00,x	                inc 0,x
.8626	d0 02		bne $862a	                bne +
.8628	f6 01		inc $01,x	                inc 1,x
.862a					+
.862a	f6 00		inc $00,x	                inc 0,x
.862c	d0 02		bne $8630	                bne _done
.862e	f6 01		inc $01,x	                inc 1,x
.8630					_done:
.8630	60		rts		z_cell_plus:    rts
.8631					xt_char:
.8631	20 df 98	jsr $98df	                jsr xt_parse_name
.8634	b5 00		lda $00,x	                lda 0,x
.8636	15 01		ora $01,x	                ora 1,x
.8638	d0 05		bne $863f	                bne _not_empty
.863a	a9 05		lda #$05	                lda #err_noname
.863c	4c 3f d8	jmp $d83f	                jmp error
.863f					_not_empty:
.863f	e8		inx		                inx             ; drop number of characters, leave addr
.8640	e8		inx		                inx
.8641	a1 00		lda ($00,x)	                lda (0,x)       ; get character (equivalent to C@)
.8643	95 00		sta $00,x	                sta 0,x
.8645	74 01		stz $01,x	                stz 1,x         ; MSB is always zero
.8647	60		rts		z_char:         rts
.8648					xt_chars:
.8648	20 29 d8	jsr $d829	                jsr underflow_1
.864b	60		rts		z_chars:        rts
.864c					xt_cleave:
.864c	20 2e d8	jsr $d82e	                jsr underflow_2
.864f	20 63 95	jsr $9563	                jsr xt_minus_leading    ; -LEADING ( addr u )
.8652	20 62 92	jsr $9262	                jsr xt_input_to_r       ; save old imput state
.8655	b5 00		lda $00,x	                lda 0,x         ; u is new ciblen
.8657	85 0a		sta $0a		                sta ciblen
.8659	b5 01		lda $01,x	                lda 1,x
.865b	85 0b		sta $0b		                sta ciblen+1
.865d	b5 02		lda $02,x	                lda 2,x         ; addr is new cib
.865f	85 08		sta $08		                sta cib
.8661	b5 03		lda $03,x	                lda 3,x
.8663	85 09		sta $09		                sta cib+1
.8665	64 0c		stz $0c		                stz toin        ; >IN pointer is zero
.8667	64 0d		stz $0d		                stz toin+1
.8669	20 df 98	jsr $98df	                jsr xt_parse_name       ; ( addr u addr-s u-s )
.866c	b5 00		lda $00,x	                lda 0,x
.866e	15 01		ora $01,x	                ora 1,x
.8670	f0 23		beq $8695	                beq _done
.8672	b5 04		lda $04,x	                lda 4,x         ; LSB of original u
.8674	38		sec		                sec
.8675	f5 00		sbc $00,x	                sbc 0,x
.8677	95 04		sta $04,x	                sta 4,x
.8679	b5 05		lda $05,x	                lda 5,x         ; MSB of original u
.867b	f5 01		sbc $01,x	                sbc 1,x
.867d	95 05		sta $05,x	                sta 5,x
.867f	b5 06		lda $06,x	                lda 6,x         ; LSB of original addr
.8681	18		clc		                clc
.8682	75 00		adc $00,x	                adc 0,x
.8684	95 06		sta $06,x	                sta 6,x
.8686	b5 07		lda $07,x	                lda 7,x         ; MSB of original addr
.8688	75 01		adc $01,x	                adc 1,x
.868a	95 07		sta $07,x	                sta 7,x
.868c	20 78 a4	jsr $a478	                jsr xt_two_swap         ; ( addr-s u-s addr u )
.868f	20 63 95	jsr $9563	                jsr xt_minus_leading
.8692	20 78 a4	jsr $a478	                jsr xt_two_swap         ; ( addr u addr-s u-s )
.8695					_done:
.8695	20 a3 9a	jsr $9aa3	                jsr xt_r_to_input
.8698	60		rts		z_cleave:       rts
.8699					xt_cmove:
.8699	20 33 d8	jsr $d833	                jsr underflow_3
.869c	b5 02		lda $02,x	                lda 2,x
.869e	85 26		sta $26		                sta tmp2        ; use tmp2 because easier to remember
.86a0	b5 03		lda $03,x	                lda 3,x
.86a2	85 27		sta $27		                sta tmp2+1
.86a4	b5 04		lda $04,x	                lda 4,x
.86a6	85 24		sta $24		                sta tmp1        ; use tmp1 because easier to remember
.86a8	b5 05		lda $05,x	                lda 5,x
.86aa	85 25		sta $25		                sta tmp1+1
.86ac	a0 00		ldy #$00	                ldy #0
.86ae	b5 01		lda $01,x	                lda 1,x         ; number of whole pages to move
.86b0	f0 0f		beq $86c1	                beq _dopartial
.86b2					_page:
.86b2	b1 24		lda ($24),y	                lda (tmp1),y
.86b4	91 26		sta ($26),y	                sta (tmp2),y
.86b6	c8		iny		                iny
.86b7	d0 f9		bne $86b2	                bne _page
.86b9	e6 25		inc $25		                inc tmp1+1
.86bb	e6 27		inc $27		                inc tmp2+1
.86bd	d6 01		dec $01,x	                dec 1,x
.86bf	d0 f1		bne $86b2	                bne _page
.86c1					_dopartial:
.86c1	b5 00		lda $00,x	                lda 0,x         ; length of last page
.86c3	f0 09		beq $86ce	                beq _done
.86c5					_partial:
.86c5	b1 24		lda ($24),y	                lda (tmp1),y
.86c7	91 26		sta ($26),y	                sta (tmp2),y
.86c9	c8		iny		                iny
.86ca	d6 00		dec $00,x	                dec 0,x
.86cc	d0 f7		bne $86c5	                bne _partial
.86ce					_done:
.86ce	8a		txa		                txa
.86cf	18		clc		                clc
.86d0	69 06		adc #$06	                adc #6
.86d2	aa		tax		                tax
.86d3	60		rts		z_cmove:        rts
.86d4					xt_cmove_up:
.86d4	20 33 d8	jsr $d833	                jsr underflow_3
.86d7	b5 02		lda $02,x	                lda 2,x
.86d9	85 26		sta $26		                sta tmp2        ; use tmp2 because easier to remember
.86db	b5 03		lda $03,x	                lda 3,x
.86dd	18		clc		                clc
.86de	75 01		adc $01,x	                adc 1,x
.86e0	85 27		sta $27		                sta tmp2+1      ; point to last page of destination
.86e2	b5 04		lda $04,x	                lda 4,x
.86e4	85 24		sta $24		                sta tmp1        ; use tmp1 because easier to remember
.86e6	b5 05		lda $05,x	                lda 5,x
.86e8	18		clc		                clc
.86e9	75 01		adc $01,x	                adc 1,x
.86eb	85 25		sta $25		                sta tmp1+1      ; point to last page of source
.86ed	f6 01		inc $01,x	                inc 1,x         ; allows us to use bne with dec 1,x below
.86ef	b4 00		ldy $00,x	                ldy 0,x         ; length of last page
.86f1	f0 0e		beq $8701	                beq _nopartial
.86f3					_outerloop:
.86f3	88		dey		                dey
.86f4	f0 07		beq $86fd	                beq _finishpage
.86f6					_innerloop:
.86f6	b1 24		lda ($24),y	                lda (tmp1),y
.86f8	91 26		sta ($26),y	                sta (tmp2),y
.86fa	88		dey		                dey
.86fb	d0 f9		bne $86f6	                bne _innerloop
.86fd					_finishpage:
.86fd	b2 24		lda ($24)	                lda (tmp1)      ; handle y = 0 separately
.86ff	92 26		sta ($26)	                sta (tmp2)
.8701					_nopartial:
.8701	c6 25		dec $25		                dec tmp1+1      ; back up to previous pages
.8703	c6 27		dec $27		                dec tmp2+1
.8705	d6 01		dec $01,x	                dec 1,x
.8707	d0 ea		bne $86f3	                bne _outerloop
.8709					_done:
.8709	8a		txa		                txa
.870a	18		clc		                clc
.870b	69 06		adc #$06	                adc #6
.870d	aa		tax		                tax
.870e	60		rts		z_cmove_up:     rts
.870f					xt_colon:
.870f	a5 16		lda $16		                lda state
.8711	05 17		ora $17		                ora state+1
.8713	f0 05		beq $871a	                beq +
.8715	a9 07		lda #$07	                lda #err_state
.8717	4c 3f d8	jmp $d83f	                jmp error
.871a					+
.871a	c6 16		dec $16		                dec state
.871c	c6 17		dec $17		                dec state+1
.871e	a9 40		lda #$40	                lda #%01000000
.8720	04 20		tsb $20		                tsb status
.8722	20 6b d7	jsr $d76b	                jsr current_to_dp
.8725	a5 03		lda $03		                lda dp+1            ; CREATE uses a lot of variables
.8727	48		pha		                pha
.8728	a5 02		lda $02		                lda dp
.872a	48		pha		                pha
.872b	a9 80		lda #$80	                lda #%10000000
.872d	04 20		tsb $20		                tsb status
.872f	20 69 89	jsr $8969	                jsr xt_create
.8732	20 6b d7	jsr $d76b	                jsr current_to_dp   ; This might be able to be omitted
.8735	a5 02		lda $02		                lda dp
.8737	85 04		sta $04		                sta workword
.8739	a5 03		lda $03		                lda dp+1
.873b	85 05		sta $05		                sta workword+1
.873d	68		pla		                pla
.873e	85 02		sta $02		                sta dp
.8740	68		pla		                pla
.8741	85 03		sta $03		                sta dp+1
.8743	20 7e d7	jsr $d77e	                jsr dp_to_current
.8746	a5 00		lda $00		                lda cp
.8748	38		sec		                sec
.8749	e9 03		sbc #$03	                sbc #3
.874b	85 00		sta $00		                sta cp
.874d	b0 02		bcs $8751	                bcs _done
.874f	c6 01		dec $01		                dec cp+1
.8751					_done:
.8751	60		rts		z_colon:        rts
.8752					xt_colon_noname:
.8752	a5 16		lda $16		                lda state
.8754	05 17		ora $17		                ora state+1
.8756	f0 05		beq $875d	                beq +
.8758	a9 07		lda #$07	                lda #err_state
.875a	4c 3f d8	jmp $d83f	                jmp error
.875d					+
.875d	c6 16		dec $16		                dec state
.875f	c6 17		dec $17		                dec state+1
.8761	a9 40		lda #$40	                lda #%01000000
.8763	14 20		trb $20		                trb status
.8765	a5 00		lda $00		                lda cp
.8767	85 04		sta $04		                sta workword
.8769	a5 01		lda $01		                lda cp+1
.876b	85 05		sta $05		                sta workword+1
.876d					_done:
.876d	60		rts		z_colon_noname:        rts
.876e					xt_comma:
.876e	20 29 d8	jsr $d829	                jsr underflow_1
.8771	b5 00		lda $00,x	                lda 0,x
.8773	92 00		sta ($00)	                sta (cp)
.8775	e6 00		inc $00		                inc cp
.8777	d0 02		bne $877b	                bne +
.8779	e6 01		inc $01		                inc cp+1
.877b					+
.877b	b5 01		lda $01,x	                lda 1,x
.877d	92 00		sta ($00)	                sta (cp)
.877f	e6 00		inc $00		                inc cp
.8781	d0 02		bne $8785	                bne _done
.8783	e6 01		inc $01		                inc cp+1
.8785					_done:
.8785	e8		inx		                inx
.8786	e8		inx		                inx
.8787	60		rts		z_comma:        rts
.8788					xt_compare:
.8788	20 38 d8	jsr $d838	                jsr underflow_4
.878b	b5 02		lda $02,x	                lda 2,x
.878d	85 26		sta $26		                sta tmp2
.878f	b5 03		lda $03,x	                lda 3,x
.8791	85 27		sta $27		                sta tmp2+1
.8793	b5 06		lda $06,x	                lda 6,x
.8795	85 24		sta $24		                sta tmp1
.8797	b5 07		lda $07,x	                lda 7,x
.8799	85 25		sta $25		                sta tmp1+1
.879b					_compare_loop:
.879b	b5 04		lda $04,x	                lda 4,x
.879d	15 05		ora $05,x	                ora 5,x
.879f	f0 2c		beq $87cd	                beq _str1_done
.87a1	b5 00		lda $00,x	                lda 0,x
.87a3	15 01		ora $01,x	                ora 1,x
.87a5	f0 3a		beq $87e1	                beq _greater    ; Str2 empty first
.87a7					_check_letter:
.87a7	b2 24		lda ($24)	                lda (tmp1)
.87a9	d2 26		cmp ($26)	                cmp (tmp2)
.87ab	90 26		bcc $87d3	                bcc _less
.87ad	d0 32		bne $87e1	                bne _greater
.87af					_next_letter:
.87af	e6 24		inc $24		                inc tmp1
.87b1	d0 02		bne $87b5	                bne +
.87b3	e6 25		inc $25		                inc tmp1+1
.87b5					+
.87b5	e6 26		inc $26		                inc tmp2
.87b7	d0 02		bne $87bb	                bne +
.87b9	e6 27		inc $27		                inc tmp2+1
.87bb					+
.87bb	b5 04		lda $04,x	                lda 4,x
.87bd	d0 02		bne $87c1	                bne +
.87bf	d6 05		dec $05,x	                dec 5,x
.87c1					+
.87c1	d6 04		dec $04,x	                dec 4,x
.87c3	b5 00		lda $00,x	                lda 0,x
.87c5	d0 02		bne $87c9	                bne +
.87c7	d6 01		dec $01,x	                dec 1,x
.87c9					+
.87c9	d6 00		dec $00,x	                dec 0,x
.87cb	80 ce		bra $879b	                bra _compare_loop
.87cd					_str1_done:
.87cd	b5 00		lda $00,x	                lda 0,x
.87cf	15 01		ora $01,x	                ora 1,x
.87d1	f0 08		beq $87db	                beq _equal      ; Both out of letters
.87d3					_less:
.87d3	a9 ff		lda #$ff	                lda #$FF
.87d5	95 06		sta $06,x	                sta 6,x
.87d7	95 07		sta $07,x	                sta 7,x
.87d9	80 0c		bra $87e7	                bra _done
.87db					_equal:
.87db	74 06		stz $06,x	                stz 6,x
.87dd	74 07		stz $07,x	                stz 7,x
.87df	80 06		bra $87e7	                bra _done
.87e1					_greater:
.87e1	a9 01		lda #$01	                lda #1
.87e3	95 06		sta $06,x	                sta 6,x
.87e5	74 07		stz $07,x	                stz 7,x
.87e7					_done:
.87e7	8a		txa		                txa
.87e8	18		clc		                clc
.87e9	69 06		adc #$06	                adc #6
.87eb	aa		tax		                tax
.87ec	60		rts		z_compare:      rts
.87ed					xt_compile_comma:
.87ed	20 29 d8	jsr $d829	                jsr underflow_1
.87f0	b5 01		lda $01,x	                lda 1,x                 ; MSB
.87f2	48		pha		                pha
.87f3	b5 00		lda $00,x	                lda 0,x
.87f5	48		pha		                pha                     ; LSB
.87f6	20 78 92	jsr $9278	                jsr xt_int_to_name      ; ( xt -- nt )
.87f9	b5 00		lda $00,x	                lda 0,x
.87fb	15 01		ora $01,x	                ora 1,x
.87fd	d0 03		bne $8802	                bne _check_nt
.87ff	4c ea 88	jmp $88ea	                jmp _compile_as_jump
.8802					_check_nt:
.8802	b5 00		lda $00,x	                lda 0,x
.8804	85 2c		sta $2c		                sta tmptos
.8806	b5 01		lda $01,x	                lda 1,x
.8808	85 2d		sta $2d		                sta tmptos+1
.880a	f6 00		inc $00,x	                inc 0,x
.880c	d0 02		bne $8810	                bne +
.880e	f6 01		inc $01,x	                inc 1,x                 ; ( nt -- nt+1 )
.8810					+
.8810	a1 00		lda ($00,x)	                lda (0,x)
.8812	85 28		sta $28		                sta tmp3                ; keep copy of status byte for NN
.8814	29 02		and #$02	                and #AN                 ; mask all but Always Native (AN) bit
.8816	f0 0d		beq $8825	                beq _compile_check
.8818	a5 2c		lda $2c		                lda tmptos
.881a	95 00		sta $00,x	                sta 0,x
.881c	a5 2d		lda $2d		                lda tmptos+1
.881e	95 01		sta $01,x	                sta 1,x
.8820	20 6f a7	jsr $a76f	                jsr xt_wordsize         ; ( nt -- u )
.8823	80 27		bra $884c	                bra _compile_as_code
.8825					_compile_check:
.8825	a5 28		lda $28		                lda tmp3
.8827	29 08		and #$08	                and #NN
.8829	f0 03		beq $882e	                beq _check_size_limit
.882b	4c ea 88	jmp $88ea	                jmp _compile_as_jump    ; too far for BRA
.882e					_check_size_limit:
.882e	a5 2c		lda $2c		                lda tmptos
.8830	95 00		sta $00,x	                sta 0,x
.8832	a5 2d		lda $2d		                lda tmptos+1
.8834	95 01		sta $01,x	                sta 1,x
.8836	20 6f a7	jsr $a76f	                jsr xt_wordsize         ; ( nt -- u )
.8839	b5 01		lda $01,x	                lda 1,x
.883b	c5 1b		cmp $1b		                cmp nc_limit+1
.883d	90 0d		bcc $884c	                bcc _compile_as_code    ; user-defined limit MSB
.883f	d0 08		bne $8849	                bne _jumpto_compile_as_jump
.8841	b5 00		lda $00,x	                lda 0,x
.8843	c5 1a		cmp $1a		                cmp nc_limit            ; user-defined limit LSB
.8845	90 05		bcc $884c	                bcc _compile_as_code    ; Allow native compiling for less
.8847	f0 03		beq $884c	                beq _compile_as_code    ; than or equal to the limit.
.8849					_jumpto_compile_as_jump:
.8849	4c ea 88	jmp $88ea	                jmp _compile_as_jump    ; too far for BRA
.884c					_compile_as_code:
.884c	ca		dex		                dex
.884d	ca		dex		                dex                     ; ( -- u ? )
.884e	ca		dex		                dex
.884f	ca		dex		                dex                     ; ( -- u ? ? )
.8850	b5 04		lda $04,x	                lda 4,x
.8852	95 00		sta $00,x	                sta 0,x                 ; LSB of u
.8854	b5 05		lda $05,x	                lda 5,x
.8856	95 01		sta $01,x	                sta 1,x                 ; ( -- u ? u )
.8858	68		pla		                pla
.8859	95 04		sta $04,x	                sta 4,x                 ; LSB of xt
.885b	68		pla		                pla
.885c	95 05		sta $05,x	                sta 5,x                 ; ( -- xt ? u )
.885e	a5 00		lda $00		                lda cp                  ; LSB of cp
.8860	95 02		sta $02,x	                sta 2,x
.8862	a5 01		lda $01		                lda cp+1
.8864	95 03		sta $03,x	                sta 3,x                 ; ( -- xt cp u )
.8866	a0 00		ldy #$00	                ldy #0
.8868					_strip_loop:
.8868	b9 d8 88	lda $88d8,y	                lda _strip_table,y      ; LSB of first word
.886b	d5 04		cmp $04,x	                cmp 4,x                 ; LSB of xt
.886d	d0 07		bne $8876	                bne _next_entry
.886f	b9 d9 88	lda $88d9,y	                lda _strip_table+1,y
.8872	d5 05		cmp $05,x	                cmp 5,x
.8874	f0 0c		beq $8882	                beq _found_entry
.8876					_next_entry:
.8876	b9 d8 88	lda $88d8,y	                lda _strip_table,y      ; pointing to LSB
.8879	19 d9 88	ora $88d9,y	                ora _strip_table+1,y    ; get MSB
.887c	f0 22		beq $88a0	                beq _underflow_strip    ; table done, let's get out of here
.887e	c8		iny		                iny
.887f	c8		iny		                iny
.8880	80 e6		bra $8868	                bra _strip_loop
.8882					_found_entry:
.8882	98		tya		                tya
.8883	4a		lsr a		                lsr
.8884	a8		tay		                tay
.8885	b9 e4 88	lda $88e4,y	                lda _strip_size,y
.8888	85 2c		sta $2c		                sta tmptos              ; save a copy
.888a	18		clc		                clc
.888b	75 04		adc $04,x	                adc 4,x
.888d	95 04		sta $04,x	                sta 4,x
.888f	90 02		bcc $8893	                bcc+
.8891	f6 05		inc $05,x	                inc 5,x                 ; we just care about the carry
.8893					+
.8893	06 2c		asl $2c		                asl tmptos
.8895	38		sec		                sec
.8896	b5 00		lda $00,x	                lda 0,x
.8898	e5 2c		sbc $2c		                sbc tmptos
.889a	95 00		sta $00,x	                sta 0,x
.889c	b0 02		bcs $88a0	                bcs +
.889e	d6 01		dec $01,x	                dec 1,x                 ; we just care about the borrow
.88a0					+
.88a0					_underflow_strip:
.88a0	a5 1c		lda $1c		                lda uf_strip
.88a2	05 1d		ora $1d		                ora uf_strip+1
.88a4	f0 1c		beq $88c2	                beq _specials_done
.88a6	a5 28		lda $28		                lda tmp3
.88a8	29 10		and #$10	                and #UF
.88aa	f0 16		beq $88c2	                beq _specials_done
.88ac	18		clc		                clc
.88ad	b5 04		lda $04,x	                lda 4,x
.88af	69 03		adc #$03	                adc #3
.88b1	95 04		sta $04,x	                sta 4,x
.88b3	90 02		bcc $88b7	                bcc +
.88b5	f6 05		inc $05,x	                inc 5,x                  ; we just care about the carry
.88b7					+
.88b7	38		sec		                sec
.88b8	b5 00		lda $00,x	                lda 0,x
.88ba	e9 03		sbc #$03	                sbc #3
.88bc	95 00		sta $00,x	                sta 0,x
.88be	b0 02		bcs $88c2	                bcs +
.88c0	d6 01		dec $01,x	                dec 1,x                  ; we just care about the borrow
.88c2					+
.88c2					_specials_done:
.88c2	b5 01		lda $01,x	                lda 1,x                 ; MSB
.88c4	48		pha		                pha
.88c5	b5 00		lda $00,x	                lda 0,x                 ; LSB
.88c7	48		pha		                pha
.88c8	20 c2 95	jsr $95c2	                jsr xt_move
.88cb	18		clc		                clc
.88cc	68		pla		                pla                     ; LSB
.88cd	65 00		adc $00		                adc cp
.88cf	85 00		sta $00		                sta cp
.88d1	68		pla		                pla                     ; MSB
.88d2	65 01		adc $01		                adc cp+1
.88d4	85 01		sta $01		                sta cp+1
.88d6	80 2c		bra $8904	                bra _done
.88d8					_strip_table:
>88d8	92 9a 7d 9a 6a a3		                .word xt_r_from, xt_r_fetch, xt_to_r    ; R>, R@, >R
>88de	9c a4 22 a4 00 00		                .word xt_two_to_r, xt_two_r_from, 0000  ; 2>R, 2R>, EOL
.88e4					_strip_size:
>88e4	04 04 04 06 06 00		                .byte 4, 4, 4, 6, 6, 0          ; R>, R@, >R, 2>R, 2R>, EOL
.88ea					_compile_as_jump:
.88ea	a9 20		lda #$20	                lda #$20
.88ec	92 00		sta ($00)	                sta (cp)
.88ee	a0 01		ldy #$01	                ldy #1
.88f0	68		pla		                pla             ; LSB
.88f1	91 00		sta ($00),y	                sta (cp),y
.88f3	c8		iny		                iny
.88f4	68		pla		                pla             ; MSB
.88f5	91 00		sta ($00),y	                sta (cp),y
.88f7	a9 03		lda #$03	                lda #3
.88f9	18		clc		                clc
.88fa	65 00		adc $00		                adc cp
.88fc	85 00		sta $00		                sta cp
.88fe	90 02		bcc $8902	                bcc +
.8900	e6 01		inc $01		                inc cp+1
.8902					+
.8902	e8		inx		                inx             ; drop xt
.8903	e8		inx		                inx
.8904					_done:
.8904					z_compile_comma:
.8904	60		rts		                rts
.8905					xt_compile_only:
.8905	20 6b d7	jsr $d76b	                jsr current_to_dp
.8908	a0 01		ldy #$01	                ldy #1          ; offset for status byte
.890a	b1 02		lda ($02),y	                lda (dp),y
.890c	09 01		ora #$01	                ora #CO        ; make sure bit 7 is set
.890e	91 02		sta ($02),y	                sta (dp),y
.8910	60		rts		z_compile_only: rts
.8911					xt_value:
.8911					xt_constant:
.8911	20 29 d8	jsr $d829	                jsr underflow_1
.8914	20 69 89	jsr $8969	                jsr xt_create
.8917	38		sec		                sec
.8918	a5 00		lda $00		                lda cp
.891a	e9 02		sbc #$02	                sbc #2
.891c	85 24		sta $24		                sta tmp1
.891e	a5 01		lda $01		                lda cp+1
.8920	e9 00		sbc #$00	                sbc #0
.8922	85 25		sta $25		                sta tmp1+1
.8924	a9 e5		lda #$e5	                lda #<doconst           ; LSB of DOCONST
.8926	92 24		sta ($24)	                sta (tmp1)
.8928	a0 01		ldy #$01	                ldy #1
.892a	a9 d6		lda #$d6	                lda #>doconst           ; MSB of DOCONST
.892c	91 24		sta ($24),y	                sta (tmp1),y
.892e	20 6e 87	jsr $876e	                jsr xt_comma            ; drop through to adjust_z
.8931					adjust_z:
.8931	20 3b 93	jsr $933b	                jsr xt_latestnt         ; gives us ( -- nt )
.8934	b5 00		lda $00,x	                lda 0,x
.8936	85 24		sta $24		                sta tmp1
.8938	b5 01		lda $01,x	                lda 1,x
.893a	85 25		sta $25		                sta tmp1+1
.893c	a0 06		ldy #$06	                ldy #6
.893e	b1 24		lda ($24),y	                lda (tmp1),y
.8940	18		clc		                clc
.8941	69 02		adc #$02	                adc #2
.8943	91 24		sta ($24),y	                sta (tmp1),y
.8945	c8		iny		                iny
.8946	b1 24		lda ($24),y	                lda (tmp1),y
.8948	69 00		adc #$00	                adc #0                  ; only need carry
.894a	91 24		sta ($24),y	                sta (tmp1),y
.894c	e8		inx		                inx
.894d	e8		inx		                inx
.894e					z_value:
.894e	60		rts		z_constant:     rts
.894f					xt_count:
.894f	20 29 d8	jsr $d829	                jsr underflow_1
.8952	a1 00		lda ($00,x)	                lda (0,x)       ; Get number of characters (255 max)
.8954	a8		tay		                tay
.8955	f6 00		inc $00,x	                inc 0,x         ; LSB
.8957	d0 02		bne $895b	                bne +
.8959	f6 01		inc $01,x	                inc 1,x         ; MSB
.895b	98		tya		+               tya
.895c	ca		dex		                dex
.895d	ca		dex		                dex
.895e	95 00		sta $00,x	                sta 0,x         ; LSB
.8960	74 01		stz $01,x	                stz 1,x         ; MSB, always zero
.8962	60		rts		z_count:        rts
.8963					xt_cr:
.8963	a9 0a		lda #$0a	                lda #AscLF
.8965	20 f6 8d	jsr $8df6	                jsr emit_a
.8968	60		rts		z_cr:           rts
.8969					xt_create:
.8969	20 df 98	jsr $98df	                jsr xt_parse_name       ; ( addr u )
.896c	b5 00		lda $00,x	                lda 0,x
.896e	15 01		ora $01,x	                ora 1,x
.8970	d0 05		bne $8977	                bne _got_name
.8972	a9 05		lda #$05	                lda #err_noname
.8974	4c 3f d8	jmp $d83f	                jmp error
.8977					_got_name:
.8977	74 01		stz $01,x	                stz 1,x
.8979	20 b2 a3	jsr $a3b2	                jsr xt_two_dup          ; ( addr u addr u )
.897c	20 db 8f	jsr $8fdb	                jsr xt_find_name        ; ( addr u flag ) (non-zero nt as flag)
.897f	b5 00		lda $00,x	                lda 0,x
.8981	15 01		ora $01,x	                ora 1,x
.8983	f0 1e		beq $89a3	                beq _new_name           ; We haven't seen this one before.
.8985	e8		inx		                inx                     ; Drop flag (nt) from find-name.
.8986	e8		inx		                inx
.8987	24 20		bit $20		                bit status
.8989	10 08		bpl $8993	                bpl _redefined_name     ; Bit 7 is zero, so print the message.
.898b	a9 80		lda #$80	                lda #$80                ; Set bit 7 to indicate dup
.898d	05 20		ora $20		                ora status
.898f	85 20		sta $20		                sta status
.8991	80 18		bra $89ab	                bra _process_name
.8993					_redefined_name:
.8993	a9 02		lda #$02	                lda #str_redefined
.8995	20 55 d8	jsr $d855	                jsr print_string_no_lf
.8998	20 b2 a3	jsr $a3b2	                jsr xt_two_dup           ; ( addr u addr u )
.899b	20 fd a4	jsr $a4fd	                jsr xt_type
.899e	20 1e a1	jsr $a11e	                jsr xt_space
.89a1	80 08		bra $89ab	                bra _process_name
.89a3					_new_name:
.89a3	e8		inx		                inx                     ; Drop flag (0) from find-name.
.89a4	e8		inx		                inx
.89a5	a9 7f		lda #$7f	                lda #$7F                ; Clear bit 0 of status to indicate new word.
.89a7	25 20		and $20		                and status
.89a9	85 20		sta $20		                sta status
.89ab					_process_name:
.89ab	b5 00		lda $00,x	                lda 0,x
.89ad	85 26		sta $26		                sta tmp2                ; store length of string in tmp2
.89af	a5 00		lda $00		                lda cp
.89b1	85 24		sta $24		                sta tmp1
.89b3	a5 01		lda $01		                lda cp+1
.89b5	85 25		sta $25		                sta tmp1+1
.89b7	b5 00		lda $00,x	                lda 0,x
.89b9	18		clc		                clc
.89ba	69 08		adc #$08	                adc #8
.89bc	85 28		sta $28		                sta tmp3                ; total header length
.89be	18		clc		                clc
.89bf	69 03		adc #$03	                adc #3
.89c1	95 00		sta $00,x	                sta 0,x
.89c3	74 01		stz $01,x	                stz 1,x         ; max header size is 255 chars
.89c5	20 ab 82	jsr $82ab	                jsr xt_allot    ; ( addr )
.89c8	20 6b d7	jsr $d76b	                jsr current_to_dp
.89cb	a0 00		ldy #$00	                ldy #0
.89cd	a5 26		lda $26		                lda tmp2
.89cf	91 24		sta ($24),y	                sta (tmp1),y
.89d1	a9 08		lda #$08	                lda #NN
.89d3	09 20		ora #$20	                ora #HC
.89d5	c8		iny		                iny
.89d6	91 24		sta ($24),y	                sta (tmp1),y
.89d8	c8		iny		                iny
.89d9	a5 02		lda $02		                lda dp
.89db	91 24		sta ($24),y	                sta (tmp1),y
.89dd	c8		iny		                iny
.89de	a5 03		lda $03		                lda dp+1
.89e0	91 24		sta ($24),y	                sta (tmp1),y
.89e2	c8		iny		                iny
.89e3	a5 25		lda $25		                lda tmp1+1
.89e5	85 03		sta $03		                sta dp+1
.89e7	a5 24		lda $24		                lda tmp1
.89e9	85 02		sta $02		                sta dp
.89eb	18		clc		                clc
.89ec	65 28		adc $28		                adc tmp3        ; add total header length
.89ee	91 24		sta ($24),y	                sta (tmp1),y
.89f0	48		pha		                pha             ; we need this in the next step
.89f1	c8		iny		                iny
.89f2	a5 25		lda $25		                lda tmp1+1
.89f4	69 00		adc #$00	                adc #0          ; only need the carry
.89f6	91 24		sta ($24),y	                sta (tmp1),y
.89f8	c8		iny		                iny
.89f9	68		pla		                pla             ; LSB of "z_" address
.89fa	18		clc		                clc
.89fb	69 03		adc #$03	                adc #3
.89fd	91 24		sta ($24),y	                sta (tmp1),y
.89ff	88		dey		                dey             ; get the MSB of xt back
.8a00	b1 24		lda ($24),y	                lda (tmp1),y
.8a02	69 00		adc #$00	                adc #0          ; only need the carry
.8a04	c8		iny		                iny
.8a05	c8		iny		                iny
.8a06	91 24		sta ($24),y	                sta (tmp1),y
.8a08	c8		iny		                iny
.8a09	b5 00		lda $00,x	                lda 0,x
.8a0b	38		sec		                sec
.8a0c	e9 08		sbc #$08	                sbc #8
.8a0e	85 2c		sta $2c		                sta tmptos
.8a10	b5 01		lda $01,x	                lda 1,x
.8a12	e9 00		sbc #$00	                sbc #0          ; only need carry
.8a14	85 2d		sta $2d		                sta tmptos+1
.8a16					_name_loop:
.8a16	b1 2c		lda ($2c),y	                lda (tmptos),y
.8a18	c9 5b		cmp #$5b	                cmp #$5B         ; ASCII '[' (one past Z)
.8a1a	b0 07		bcs $8a23	                bcs _store_name
.8a1c	c9 41		cmp #$41	                cmp #$41        ; ASCII 'A'
.8a1e	90 03		bcc $8a23	                bcc _store_name
.8a20	18		clc		                clc
.8a21	69 20		adc #$20	                adc #$20
.8a23					_store_name:
.8a23	91 24		sta ($24),y	                sta (tmp1),y
.8a25	c8		iny		                iny
.8a26	c6 26		dec $26		                dec tmp2
.8a28	d0 ec		bne $8a16	                bne _name_loop
.8a2a	a9 20		lda #$20	                lda #$20        ; opcode of JSR
.8a2c	91 24		sta ($24),y	                sta (tmp1),y
.8a2e	c8		iny		                iny
.8a2f	a9 2b		lda #$2b	                lda #<dovar
.8a31	91 24		sta ($24),y	                sta (tmp1),y
.8a33	c8		iny		                iny
.8a34	a9 d7		lda #$d7	                lda #>dovar
.8a36	91 24		sta ($24),y	                sta (tmp1),y
.8a38	20 7e d7	jsr $d77e	                jsr dp_to_current
.8a3b	e8		inx		                inx
.8a3c	e8		inx		                inx
.8a3d	60		rts		z_create:       rts
.8a3e					xt_d_minus:
.8a3e	20 38 d8	jsr $d838	                jsr underflow_4 ; two double numbers
.8a41	38		sec		                sec
.8a42	b5 06		lda $06,x	                lda 6,x         ; LSB of lower word
.8a44	f5 02		sbc $02,x	                sbc 2,x
.8a46	95 06		sta $06,x	                sta 6,x
.8a48	b5 07		lda $07,x	                lda 7,x         ; MSB of lower word
.8a4a	f5 03		sbc $03,x	                sbc 3,x
.8a4c	95 07		sta $07,x	                sta 7,x
.8a4e	b5 04		lda $04,x	                lda 4,x         ; LSB of upper word
.8a50	f5 00		sbc $00,x	                sbc 0,x
.8a52	95 04		sta $04,x	                sta 4,x
.8a54	b5 05		lda $05,x	                lda 5,x         ; MSB of upper word
.8a56	f5 01		sbc $01,x	                sbc 1,x
.8a58	95 05		sta $05,x	                sta 5,x
.8a5a	e8		inx		                inx
.8a5b	e8		inx		                inx
.8a5c	e8		inx		                inx
.8a5d	e8		inx		                inx
.8a5e	60		rts		z_d_minus:      rts
.8a5f					xt_d_plus:
.8a5f	20 38 d8	jsr $d838	                jsr underflow_4 ; two double numbers
.8a62	18		clc		                clc
.8a63	b5 02		lda $02,x	                lda 2,x         ; LSB of lower word
.8a65	75 06		adc $06,x	                adc 6,x
.8a67	95 06		sta $06,x	                sta 6,x
.8a69	b5 03		lda $03,x	                lda 3,x         ; MSB of lower word
.8a6b	75 07		adc $07,x	                adc 7,x
.8a6d	95 07		sta $07,x	                sta 7,x
.8a6f	b5 00		lda $00,x	                lda 0,x         ; LSB of upper word
.8a71	75 04		adc $04,x	                adc 4,x
.8a73	95 04		sta $04,x	                sta 4,x
.8a75	b5 01		lda $01,x	                lda 1,x         ; MSB of upper word
.8a77	75 05		adc $05,x	                adc 5,x
.8a79	95 05		sta $05,x	                sta 5,x
.8a7b	e8		inx		                inx
.8a7c	e8		inx		                inx
.8a7d	e8		inx		                inx
.8a7e	e8		inx		                inx
.8a7f	60		rts		z_d_plus:       rts
.8a80					xt_d_to_s:
.8a80	20 2e d8	jsr $d82e	                jsr underflow_2
.8a83	e8		inx		                inx
.8a84	e8		inx		                inx
.8a85	60		rts		z_d_to_s:       rts
.8a86					xt_dabs:
.8a86	20 2e d8	jsr $d82e	                jsr underflow_2 ; double number
.8a89	b5 01		lda $01,x	                lda 1,x         ; MSB of high cell
.8a8b	10 17		bpl $8aa4	                bpl _done       ; positive, we get off light
.8a8d	a0 00		ldy #$00	                ldy #0
.8a8f	38		sec		                sec
.8a90	98		tya		                tya
.8a91	f5 02		sbc $02,x	                sbc 2,x         ; LSB of low cell
.8a93	95 02		sta $02,x	                sta 2,x
.8a95	98		tya		                tya
.8a96	f5 03		sbc $03,x	                sbc 3,x         ; MSB of low cell
.8a98	95 03		sta $03,x	                sta 3,x
.8a9a	98		tya		                tya
.8a9b	f5 00		sbc $00,x	                sbc 0,x         ; LSB of high cell
.8a9d	95 00		sta $00,x	                sta 0,x
.8a9f	98		tya		                tya
.8aa0	f5 01		sbc $01,x	                sbc 1,x         ; MSB of high cell
.8aa2	95 01		sta $01,x	                sta 1,x
.8aa4					_done:
.8aa4	60		rts		z_dabs:         rts
.8aa5					xt_decimal:
.8aa5	a9 0a		lda #$0a	                lda #10
.8aa7	85 18		sta $18		                sta base
.8aa9	64 19		stz $19		                stz base+1              ; paranoid
.8aab	60		rts		z_decimal:      rts
.8aac					xt_defer:
.8aac	20 69 89	jsr $8969	                jsr xt_create
.8aaf	a5 00		lda $00		                lda cp          ; LSB
.8ab1	38		sec		                sec
.8ab2	e9 02		sbc #$02	                sbc #2
.8ab4	85 24		sta $24		                sta tmp1
.8ab6	a5 01		lda $01		                lda cp+1        ; MSB
.8ab8	e9 00		sbc #$00	                sbc #0          ; we only care about the borrow
.8aba	85 25		sta $25		                sta tmp1+1
.8abc	a0 00		ldy #$00	                ldy #0
.8abe	a9 f9		lda #$f9	                lda #<dodefer   ; LSB
.8ac0	91 24		sta ($24),y	                sta (tmp1),y
.8ac2	c8		iny		                iny
.8ac3	a9 d6		lda #$d6	                lda #>dodefer   ; MSB
.8ac5	91 24		sta ($24),y	                sta (tmp1),y
.8ac7	a9 0d		lda #$0d	                lda #<defer_error
.8ac9	92 00		sta ($00)	                sta (cp)
.8acb	e6 00		inc $00		                inc cp
.8acd	d0 02		bne $8ad1	                bne +
.8acf	e6 01		inc $01		                inc cp+1
.8ad1					+
.8ad1	a9 d7		lda #$d7	                lda #>defer_error
.8ad3	92 00		sta ($00)	                sta (cp)
.8ad5	e6 00		inc $00		                inc cp
.8ad7	d0 02		bne $8adb	                bne +
.8ad9	e6 01		inc $01		                inc cp+1
.8adb					+
.8adb	20 31 89	jsr $8931	                jsr adjust_z    ; adjust header to correct length
.8ade	60		rts		z_defer:        rts
.8adf					xt_defer_fetch:
.8adf	20 87 a2	jsr $a287	                jsr xt_to_body
.8ae2	20 80 8f	jsr $8f80	                jsr xt_fetch
.8ae5	60		rts		z_defer_fetch:  rts
.8ae6					xt_defer_store:
.8ae6	20 87 a2	jsr $a287	                jsr xt_to_body
.8ae9	20 87 a1	jsr $a187	                jsr xt_store
.8aec	60		rts		z_defer_store:  rts
.8aed					xt_definitions:
.8aed	a0 1f		ldy #$1f	                ldy #search_order_offset    ; Transfer byte variable
.8aef	b1 1e		lda ($1e),y	                lda (up),y                  ; SEARCH_ORDER[0] to
.8af1	a0 04		ldy #$04	                ldy #current_offset         ; byte variable CURRENT.
.8af3	91 1e		sta ($1e),y	                sta (up),y
.8af5	60		rts		z_definitions:  rts
.8af6					xt_depth:
.8af6	a9 78		lda #$78	                lda #dsp0
.8af8	86 2a		stx $2a		                stx tmpdsp
.8afa	38		sec		                sec
.8afb	e5 2a		sbc $2a		                sbc tmpdsp
.8afd	4a		lsr a		                lsr
.8afe	ca		dex		                dex
.8aff	ca		dex		                dex
.8b00	95 00		sta $00,x	                sta 0,x
.8b02	74 01		stz $01,x	                stz 1,x
.8b04	60		rts		z_depth:        rts
.8b05					xt_digit_question:
.8b05	20 29 d8	jsr $d829	                jsr underflow_1
.8b08	ca		dex		                dex
.8b09	ca		dex		                dex
.8b0a	74 00		stz $00,x	                stz 0,x                 ; default flag is failure
.8b0c	74 01		stz $01,x	                stz 1,x
.8b0e	74 03		stz $03,x	                stz 3,x                 ; paranoid
.8b10	b5 02		lda $02,x	                lda 2,x
.8b12	c9 30		cmp #$30	                cmp #'0'
.8b14	90 23		bcc $8b39	                bcc _done               ; failure flag already set
.8b16	c9 3a		cmp #$3a	                cmp #'9'+1               ; this is actually ":"
.8b18	90 12		bcc $8b2c	                bcc _checkbase
.8b1a	c9 41		cmp #$41	                cmp #'A'
.8b1c	90 1b		bcc $8b39	                bcc _done               ; failure flag is already set
.8b1e	c9 61		cmp #$61	                cmp #'a'
.8b20	90 07		bcc $8b29	                bcc _case_done          ; not lower case, too low
.8b22	c9 7b		cmp #$7b	                cmp #'z'+1
.8b24	b0 03		bcs $8b29	                bcs _case_done          ; not lower case, too high
.8b26	18		clc		                clc                     ; just right
.8b27	69 e0		adc #$e0	                adc #$e0                ; offset to upper case (wraps)
.8b29					_case_done:
.8b29	38		sec		                sec
.8b2a	e9 07		sbc #$07	                sbc #7                  ; fall through to _checkbase
.8b2c					_checkbase:
.8b2c	38		sec		                sec
.8b2d	e9 30		sbc #$30	                sbc #'0'                 ; this is also the conversion step
.8b2f	c5 18		cmp $18		                cmp base
.8b31	b0 06		bcs $8b39	                bcs _done               ; already have false flag
.8b33	95 02		sta $02,x	                sta 2,x                 ; put number in NOS
.8b35	d6 00		dec $00,x	                dec 0,x                 ; set success flag
.8b37	d6 01		dec $01,x	                dec 1,x
.8b39					_done:
.8b39					z_digit_question:
.8b39	60		rts		                rts
.8b3a					xt_disasm:
.8b3a	20 2e d8	jsr $d82e	                jsr underflow_2
.8b3d	20 d1 ac	jsr $acd1	                jsr disassembler
.8b40	60		rts		z_disasm:       rts
.8b41					xt_dnegate:
.8b41	20 2e d8	jsr $d82e	                jsr underflow_2 ; double number
.8b44	a0 00		ldy #$00	     		ldy #0
.8b46	38		sec		                sec
.8b47	98		tya		                tya
.8b48	f5 02		sbc $02,x	                sbc 2,x         ; LSB of low cell
.8b4a	95 02		sta $02,x	                sta 2,x
.8b4c	98		tya		                tya
.8b4d	f5 03		sbc $03,x	                sbc 3,x         ; MSB of low cell
.8b4f	95 03		sta $03,x	                sta 3,x
.8b51	98		tya		                tya
.8b52	f5 00		sbc $00,x	                sbc 0,x         ; LSB of high cell
.8b54	95 00		sta $00,x	                sta 0,x
.8b56	98		tya		                tya
.8b57	f5 01		sbc $01,x	                sbc 1,x         ; MSB of high cell
.8b59	95 01		sta $01,x	                sta 1,x
.8b5b	60		rts		z_dnegate:      rts
.8b5c					xt_question_do:
.8b5c	a9 ff		lda #$ff	                lda #$ff                ; -1 is ?DO, jump to common code
.8b5e	85 24		sta $24		                sta tmp1
.8b60	80 02		bra $8b64	                bra do_common           ; skip flag for DO
.8b62					xt_do:
.8b62	64 24		stz $24		                stz tmp1                ; 0 is DO, drop through to DO_COMMON
.8b64					do_common:
.8b64	ca		dex		                dex
.8b65	ca		dex		                dex
.8b66	a5 00		lda $00		                lda cp
.8b68	95 00		sta $00,x	                sta 0,x                 ; LSB
.8b6a	a5 01		lda $01		                lda cp+1
.8b6c	95 01		sta $01,x	                sta 1,x                 ; MSB   ( limit start here )
.8b6e	a9 05		lda #$05	                lda #5                  ; we don't really care about the value,
.8b70	a8		tay		                tay                     ; so we use 5 to be tricky
.8b71					_loop:
.8b71	91 00		sta ($00),y	                sta (CP),y
.8b73	88		dey		                dey
.8b74	10 fb		bpl $8b71	                bpl _loop
.8b76	1a		inc a		                ina             ; we used 5 as a dummy value, this is why
.8b77	18		clc		                clc
.8b78	65 00		adc $00		                adc CP
.8b7a	85 00		sta $00		                sta CP
.8b7c	90 02		bcc $8b80	                bcc +
.8b7e	e6 01		inc $01		                inc CP+1
.8b80					+
.8b80	a5 24		lda $24		                lda tmp1
.8b82	f0 17		beq $8b9b	                beq _compile_do
.8b84	a0 14		ldy #$14	                ldy #question_do_runtime_end-question_do_runtime
.8b86	5a		phy		                phy             ; save counter to calculate new CP
.8b87					-
.8b87	b9 e1 8b	lda $8be1,y	                lda question_do_runtime,y
.8b8a	91 00		sta ($00),y	                sta (cp),y
.8b8c	88		dey		                dey
.8b8d	10 f8		bpl $8b87	                bpl -
.8b8f	68		pla		                pla             ; retrieve counter
.8b90	18		clc		                clc
.8b91	65 00		adc $00		                adc cp
.8b93	85 00		sta $00		                sta cp
.8b95	a5 01		lda $01		                lda cp+1
.8b97	69 00		adc #$00	                adc #0          ; only care about carry
.8b99	85 01		sta $01		                sta cp+1        ; fall through to _compile_do
.8b9b					_compile_do:
.8b9b	a0 24		ldy #$24	                ldy #do_runtime_end-do_runtime  ; counter
.8b9d	5a		phy		                phy             ; save counter to calculate new CP
.8b9e					-
.8b9e	b9 bd 8b	lda $8bbd,y	                lda do_runtime,y
.8ba1	91 00		sta ($00),y	                sta (cp),y
.8ba3	88		dey		                dey
.8ba4	10 f8		bpl $8b9e	                bpl -
.8ba6	68		pla		                pla             ; retrieve counter
.8ba7	18		clc		                clc
.8ba8	65 00		adc $00		                adc cp
.8baa	85 00		sta $00		                sta cp
.8bac	a5 01		lda $01		                lda cp+1
.8bae	69 00		adc #$00	                adc #0          ; only care about carry
.8bb0	85 01		sta $01		                sta cp+1
.8bb2	ca		dex		                dex
.8bb3	ca		dex		                dex
.8bb4	a5 00		lda $00		                lda CP          ; LSB
.8bb6	95 00		sta $00,x	                sta 0,x
.8bb8	a5 01		lda $01		                lda CP+1        ; MSB
.8bba	95 01		sta $01,x	                sta 1,x
.8bbc					z_question_do:
.8bbc	60		rts		z_do:           rts
.8bbd					do_runtime:
.8bbd	38		sec		                sec
.8bbe	a9 00		lda #$00	                lda #0
.8bc0	f5 02		sbc $02,x	                sbc 2,x         ; LSB of limit
.8bc2	95 02		sta $02,x	                sta 2,x         ; save FUFA for later use
.8bc4	a9 80		lda #$80	                lda #$80
.8bc6	f5 03		sbc $03,x	                sbc 3,x         ; MSB of limit
.8bc8	95 03		sta $03,x	                sta 3,x         ; save FUFA for later use
.8bca	48		pha		                pha             ; FUFA replaces limit on R stack
.8bcb	b5 02		lda $02,x	                lda 2,x         ; LSB of limit
.8bcd	48		pha		                pha
.8bce	18		clc		                clc
.8bcf	b5 00		lda $00,x	                lda 0,x         ; LSB of original index
.8bd1	75 02		adc $02,x	                adc 2,x         ; add LSB of FUFA
.8bd3	95 00		sta $00,x	                sta 0,x
.8bd5	b5 01		lda $01,x	                lda 1,x         ; MSB of orginal index
.8bd7	75 03		adc $03,x	                adc 3,x         ; add MSB of FUFA
.8bd9	48		pha		                pha
.8bda	b5 00		lda $00,x	                lda 0,x         ; LSB of index
.8bdc	48		pha		                pha
.8bdd	e8		inx		                inx
.8bde	e8		inx		                inx
.8bdf	e8		inx		                inx
.8be0	e8		inx		                inx             ; no RTS because this is copied into code
.8be1					do_runtime_end:
.8be1					question_do_runtime:
.8be1	20 b2 a3	jsr $a3b2	                jsr xt_two_dup          ; ( n1 n2 n1 n2 )
.8be4	20 ce 8e	jsr $8ece	                jsr xt_equal            ; ( -- n1 n2 f )
.8be7	b5 00		lda $00,x	                lda 0,x
.8be9	15 01		ora $01,x	                ora 1,x
.8beb	f0 06		beq $8bf3	                beq _do_do
.8bed	8a		txa		                txa
.8bee	18		clc		                clc
.8bef	69 06		adc #$06	                adc #6
.8bf1	aa		tax		                tax
.8bf2	60		rts		                rts
.8bf3					_do_do:
.8bf3	e8		inx		                inx             ; clear flag from EQUAL off stack
.8bf4	e8		inx		                inx             ; no RTS because this is copied into code
.8bf5					question_do_runtime_end:
.8bf5					xt_does:
.8bf5	a0 8c		ldy #$8c	                ldy #>does_runtime
.8bf7	a9 04		lda #$04	                lda #<does_runtime
.8bf9	20 cc d6	jsr $d6cc	                jsr cmpl_subroutine
.8bfc	a0 d7		ldy #$d7	                ldy #>dodoes
.8bfe	a9 12		lda #$12	                lda #<dodoes
.8c00	20 cc d6	jsr $d6cc	                jsr cmpl_subroutine
.8c03	60		rts		z_does:         rts
.8c04					does_runtime:
.8c04	7a		ply		                ply             ; LSB
.8c05	68		pla		                pla             ; MSB
.8c06	c8		iny		                iny
.8c07	d0 01		bne $8c0a	                bne +
.8c09	1a		inc a		                ina
.8c0a					+
.8c0a	84 24		sty $24		                sty tmp1
.8c0c	85 25		sta $25		                sta tmp1+1
.8c0e	20 6b d7	jsr $d76b	                jsr current_to_dp   ; Grab the DP from the CURRENT wordlist.
.8c11	a5 02		lda $02		                lda dp
.8c13	18		clc		                clc
.8c14	69 04		adc #$04	                adc #4
.8c16	85 26		sta $26		                sta tmp2
.8c18	a5 03		lda $03		                lda dp+1
.8c1a	69 00		adc #$00	                adc #0          ; we only care about the carry
.8c1c	85 27		sta $27		                sta tmp2+1
.8c1e	b2 26		lda ($26)	                lda (tmp2)
.8c20	18		clc		                clc
.8c21	69 01		adc #$01	                adc #1
.8c23	85 28		sta $28		                sta tmp3
.8c25	a0 01		ldy #$01	                ldy #1
.8c27	b1 26		lda ($26),y	                lda (tmp2),y
.8c29	69 00		adc #$00	                adc #0          ; we only care about the carry
.8c2b	85 29		sta $29		                sta tmp3+1
.8c2d	a5 24		lda $24		                lda tmp1        ; LSB
.8c2f	92 28		sta ($28)	                sta (tmp3)
.8c31	a5 25		lda $25		                lda tmp1+1
.8c33	91 28		sta ($28),y	                sta (tmp3),y    ; Y is still 1
.8c35	60		rts		                rts
.8c36					xt_dot:
.8c36	20 29 d8	jsr $d829	                jsr underflow_1
.8c39	20 af 8d	jsr $8daf	                jsr xt_dup                      ; ( n n )
.8c3c	20 39 81	jsr $8139	                jsr xt_abs                      ; ( n u )
.8c3f	20 a2 a7	jsr $a7a2	                jsr xt_zero                     ; ( n u 0 )
.8c42	20 5a 93	jsr $935a	                jsr xt_less_number_sign         ; ( n u 0 )
.8c45	20 de 97	jsr $97de	                jsr xt_number_sign_s            ; ( n ud )
.8c48	20 57 9b	jsr $9b57	                jsr xt_rot                      ; ( ud n )
.8c4b	20 e7 9f	jsr $9fe7	                jsr xt_sign                     ; ( ud )
.8c4e	20 bc 97	jsr $97bc	                jsr xt_number_sign_greater      ; ( addr u )
.8c51	20 fd a4	jsr $a4fd	                jsr xt_type
.8c54	20 1e a1	jsr $a11e	                jsr xt_space
.8c57	60		rts		z_dot:          rts
.8c58					xt_dot_paren:
.8c58	ca		dex		                dex
.8c59	ca		dex		                dex
.8c5a	a9 29		lda #$29	                lda #41     ; Right parenthesis
.8c5c	95 00		sta $00,x	                sta 0,x
.8c5e	74 01		stz $01,x	                stz 1,x
.8c60	20 3a 99	jsr $993a	                jsr xt_parse
.8c63	20 fd a4	jsr $a4fd	                jsr xt_type
.8c66	60		rts		z_dot_paren:    rts
.8c67					xt_dot_quote:
.8c67	20 4f 9d	jsr $9d4f	                jsr xt_s_quote
.8c6a	a0 a4		ldy #$a4	                ldy #>xt_type
.8c6c	a9 fd		lda #$fd	                lda #<xt_type
.8c6e	20 cc d6	jsr $d6cc	                jsr cmpl_subroutine
.8c71	60		rts		z_dot_quote:    rts
.8c72					xt_dot_r:
.8c72	20 2e d8	jsr $d82e	                jsr underflow_2
.8c75	20 6a a3	jsr $a36a	                jsr xt_to_r
.8c78	20 af 8d	jsr $8daf	                jsr xt_dup
.8c7b	20 39 81	jsr $8139	                jsr xt_abs
.8c7e	20 a2 a7	jsr $a7a2	                jsr xt_zero
.8c81	20 5a 93	jsr $935a	                jsr xt_less_number_sign
.8c84	20 de 97	jsr $97de	                jsr xt_number_sign_s
.8c87	20 57 9b	jsr $9b57	                jsr xt_rot
.8c8a	20 e7 9f	jsr $9fe7	                jsr xt_sign
.8c8d	20 bc 97	jsr $97bc	                jsr xt_number_sign_greater
.8c90	20 92 9a	jsr $9a92	                jsr xt_r_from
.8c93	20 93 98	jsr $9893	                jsr xt_over
.8c96	20 50 95	jsr $9550	                jsr xt_minus
.8c99	20 24 a1	jsr $a124	                jsr xt_spaces
.8c9c	20 fd a4	jsr $a4fd	                jsr xt_type
.8c9f	60		rts		z_dot_r:        rts
.8ca0					xt_dot_s:
.8ca0	20 f6 8a	jsr $8af6	                jsr xt_depth    ; ( -- u )
.8ca3	a9 3c		lda #$3c	                lda #$3c        ; ASCII for "<"
.8ca5	20 f6 8d	jsr $8df6	                jsr emit_a
.8ca8	b5 00		lda $00,x	                lda 0,x
.8caa	48		pha		                pha
.8cab	ca		dex		                dex             ; DUP
.8cac	ca		dex		                dex
.8cad	95 00		sta $00,x	                sta 0,x
.8caf	74 01		stz $01,x	                stz 1,x
.8cb1	20 75 d8	jsr $d875	                jsr print_u
.8cb4	a9 3e		lda #$3e	                lda #$3e        ; ASCII for ">"
.8cb6	20 f6 8d	jsr $8df6	                jsr emit_a
.8cb9	a9 20		lda #$20	                lda #AscSP      ; ASCII for SPACE
.8cbb	20 f6 8d	jsr $8df6	                jsr emit_a
.8cbe	e8		inx		                inx
.8cbf	e8		inx		                inx
.8cc0	e0 78		cpx #$78	                cpx #dsp0
.8cc2	f0 1e		beq $8ce2	                beq _done
.8cc4					_have_stack:
.8cc4	7a		ply		                ply
.8cc5	a9 77		lda #$77	                lda #dsp0-1     ; go up one to avoid garbage
.8cc7	85 28		sta $28		                sta tmp3
.8cc9	64 29		stz $29		                stz tmp3+1      ; must be zero page on the 65c02
.8ccb					_loop:
.8ccb	ca		dex		                dex
.8ccc	ca		dex		                dex
.8ccd	b2 28		lda ($28)	                lda (tmp3)
.8ccf	95 01		sta $01,x	                sta 1,x
.8cd1	c6 28		dec $28		                dec tmp3
.8cd3	b2 28		lda ($28)	                lda (tmp3)
.8cd5	95 00		sta $00,x	                sta 0,x
.8cd7	c6 28		dec $28		                dec tmp3
.8cd9	5a		phy		                phy
.8cda	20 36 8c	jsr $8c36	                jsr xt_dot
.8cdd	7a		ply		                ply
.8cde	88		dey		                dey
.8cdf	d0 ea		bne $8ccb	                bne _loop
.8ce1	48		pha		                pha             ; dummy to balance stack
.8ce2					_done:
.8ce2	68		pla		                pla
.8ce3	60		rts		z_dot_s:        rts
.8ce4					xt_d_dot:
.8ce4	20 2e d8	jsr $d82e	                jsr underflow_2
.8ce7	20 87 a3	jsr $a387	                jsr xt_tuck
.8cea	20 86 8a	jsr $8a86	                jsr xt_dabs
.8ced	20 5a 93	jsr $935a	                jsr xt_less_number_sign
.8cf0	20 de 97	jsr $97de	                jsr xt_number_sign_s
.8cf3	20 57 9b	jsr $9b57	                jsr xt_rot
.8cf6	20 e7 9f	jsr $9fe7	                jsr xt_sign
.8cf9	20 bc 97	jsr $97bc	                jsr xt_number_sign_greater
.8cfc	20 fd a4	jsr $a4fd	                jsr xt_type
.8cff	20 1e a1	jsr $a11e	                jsr xt_space
.8d02	60		rts		z_d_dot:        rts
.8d03					xt_d_dot_r:
.8d03	20 33 d8	jsr $d833	                jsr underflow_3
.8d06	20 6a a3	jsr $a36a	                jsr xt_to_r
.8d09	20 87 a3	jsr $a387	                jsr xt_tuck
.8d0c	20 86 8a	jsr $8a86	                jsr xt_dabs
.8d0f	20 5a 93	jsr $935a	                jsr xt_less_number_sign
.8d12	20 de 97	jsr $97de	                jsr xt_number_sign_s
.8d15	20 57 9b	jsr $9b57	                jsr xt_rot
.8d18	20 e7 9f	jsr $9fe7	                jsr xt_sign
.8d1b	20 bc 97	jsr $97bc	                jsr xt_number_sign_greater
.8d1e	20 92 9a	jsr $9a92	                jsr xt_r_from
.8d21	20 93 98	jsr $9893	                jsr xt_over
.8d24	20 50 95	jsr $9550	                jsr xt_minus
.8d27	20 24 a1	jsr $a124	                jsr xt_spaces
.8d2a	20 fd a4	jsr $a4fd	                jsr xt_type
.8d2d	60		rts		z_d_dot_r:      rts
.8d2e					xt_drop:
.8d2e	20 29 d8	jsr $d829	                jsr underflow_1
.8d31	e8		inx		                inx
.8d32	e8		inx		                inx
.8d33	60		rts		z_drop:         rts
.8d34					xt_dump:
.8d34	20 2e d8	jsr $d82e	                jsr underflow_2
.8d37					_row:
.8d37	a0 10		ldy #$10	                ldy #16
.8d39	64 26		stz $26		                stz tmp2
.8d3b	20 63 89	jsr $8963	                jsr xt_cr
.8d3e	b5 03		lda $03,x	                lda 3,x
.8d40	20 39 d7	jsr $d739	                jsr byte_to_ascii
.8d43	b5 02		lda $02,x	                lda 2,x
.8d45	20 39 d7	jsr $d739	                jsr byte_to_ascii
.8d48	20 1e a1	jsr $a11e	                jsr xt_space
.8d4b	20 1e a1	jsr $a11e	                jsr xt_space
.8d4e					_loop:
.8d4e	b5 00		lda $00,x	                lda 0,x
.8d50	15 01		ora $01,x	                ora 1,x
.8d52	f0 39		beq $8d8d	                beq _all_printed
.8d54	a1 02		lda ($02,x)	                lda (2,x)
.8d56	48		pha		                pha                     ; byte_to_ascii destroys A
.8d57	20 39 d7	jsr $d739	                jsr byte_to_ascii
.8d5a	20 1e a1	jsr $a11e	                jsr xt_space
.8d5d	68		pla		                pla
.8d5e	20 0f d8	jsr $d80f	                jsr is_printable
.8d61	b0 02		bcs $8d65	                bcs _printable
.8d63	a9 2e		lda #$2e	                lda #'.'                 ; Print dot if not printable
.8d65					_printable:
.8d65	5a		phy		                phy                     ; save counter
.8d66	a4 26		ldy $26		                ldy tmp2
.8d68	91 00		sta ($00),y	                sta (cp),y
.8d6a	e6 26		inc $26		                inc tmp2
.8d6c	7a		ply		                ply
.8d6d	c0 09		cpy #$09	                cpy #9
.8d6f	d0 03		bne $8d74	                bne _next_char
.8d71	20 1e a1	jsr $a11e	                jsr xt_space
.8d74					_next_char:
.8d74	f6 02		inc $02,x	                inc 2,x
.8d76	d0 02		bne $8d7a	                bne _counter
.8d78	f6 03		inc $03,x	                inc 3,x
.8d7a					_counter:
.8d7a	b5 00		lda $00,x	                lda 0,x
.8d7c	d0 02		bne $8d80	                bne +
.8d7e	d6 01		dec $01,x	                dec 1,x
.8d80					+
.8d80	d6 00		dec $00,x	                dec 0,x
.8d82	88		dey		                dey
.8d83	d0 c9		bne $8d4e	                bne _loop               ; next byte
.8d85	20 1e a1	jsr $a11e	                jsr xt_space
.8d88	20 9b 8d	jsr $8d9b	                jsr dump_print_ascii
.8d8b	80 aa		bra $8d37	                bra _row                ; new row
.8d8d					_all_printed:
.8d8d	a5 26		lda $26		                lda tmp2
.8d8f	f0 06		beq $8d97	                beq _done
.8d91	20 1e a1	jsr $a11e	                jsr xt_space
.8d94	20 9b 8d	jsr $8d9b	                jsr dump_print_ascii
.8d97					_done:
.8d97	20 aa a3	jsr $a3aa	                jsr xt_two_drop         ; one byte less than 4x INX
.8d9a	60		rts		z_dump:         rts
.8d9b					dump_print_ascii:
.8d9b	a0 00		ldy #$00	                ldy #0
.8d9d					_ascii_loop:
.8d9d	b1 00		lda ($00),y	                lda (cp),y
.8d9f	20 f6 8d	jsr $8df6	                jsr emit_a
.8da2	c8		iny		                iny
.8da3	c0 08		cpy #$08	                cpy #8
.8da5	d0 03		bne $8daa	                bne +
.8da7	20 1e a1	jsr $a11e	                jsr xt_space
.8daa					+
.8daa	c6 26		dec $26		                dec tmp2
.8dac	d0 ef		bne $8d9d	                bne _ascii_loop
.8dae	60		rts		                rts
.8daf					xt_dup:
.8daf	20 29 d8	jsr $d829	                jsr underflow_1
.8db2	ca		dex		                dex
.8db3	ca		dex		                dex
.8db4	b5 02		lda $02,x	                lda 2,x         ; LSB
.8db6	95 00		sta $00,x	                sta 0,x
.8db8	b5 03		lda $03,x	                lda 3,x         ; MSB
.8dba	95 01		sta $01,x	                sta 1,x
.8dbc	60		rts		z_dup:          rts
.8dbd					xt_ed:
.8dbd	20 7c b5	jsr $b57c	                jsr ed6502      ; kept in separate file
.8dc0	60		rts		z_ed:           rts
.8dc1					xt_else:
.8dc1					xt_endof:
.8dc1	a0 8d		ldy #$8d	                ldy #>branch_runtime
.8dc3	a9 db		lda #$db	                lda #<branch_runtime
.8dc5	20 cc d6	jsr $d6cc	                jsr cmpl_subroutine
.8dc8	20 72 91	jsr $9172	                jsr xt_here
.8dcb	20 a2 a7	jsr $a7a2	                jsr xt_zero
.8dce	20 6e 87	jsr $876e	                jsr xt_comma
.8dd1	20 72 91	jsr $9172	                jsr xt_here
.8dd4	20 57 9b	jsr $9b57	                jsr xt_rot
.8dd7	20 87 a1	jsr $a187	                jsr xt_store
.8dda					z_else:
.8dda					z_endof:
.8dda	60		rts		                rts
.8ddb					branch_runtime:
.8ddb	68		pla		                pla
.8ddc	85 22		sta $22		                sta tmpbranch
.8dde	68		pla		                pla
.8ddf	85 23		sta $23		                sta tmpbranch+1
.8de1	a0 01		ldy #$01	                ldy #1
.8de3	b1 22		lda ($22),y	                lda (tmpbranch),y  ; LSB
.8de5	85 24		sta $24		                sta tmp1
.8de7	c8		iny		                iny
.8de8	b1 22		lda ($22),y	                lda (tmpbranch),y  ; MSB
.8dea	85 25		sta $25		                sta tmp1+1
.8dec	6c 24 00	jmp ($0024)	                jmp (tmp1)
.8def					xt_emit:
.8def	20 29 d8	jsr $d829	                jsr underflow_1
.8df2	b5 00		lda $00,x	                lda 0,x
.8df4	e8		inx		                inx
.8df5	e8		inx		                inx
.8df6					emit_a:
.8df6	6c 10 00	jmp ($0010)	                jmp (output)            ; JSR/RTS
.8df9					z_emit:
.8df9					xt_empty_buffers:
.8df9	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.8dfb	a9 00		lda #$00	                lda #0
.8dfd	91 1e		sta ($1e),y	                sta (up),y      ; Only LSB is used.
.8dff					z_empty_buffers:
.8dff	60		rts		                rts
.8e00					xt_endcase:
.8e00	a0 8d		ldy #$8d	                ldy #>xt_drop
.8e02	a9 2e		lda #$2e	                lda #<xt_drop
.8e04	20 cc d6	jsr $d6cc	                jsr cmpl_subroutine
.8e07					_endcase_loop:
.8e07	b5 00		lda $00,x	                lda 0,x
.8e09	15 01		ora $01,x	                ora 1,x
.8e0b	f0 05		beq $8e12	                beq _done
.8e0d	20 bc a1	jsr $a1bc	                jsr xt_then
.8e10	80 f5		bra $8e07	                bra _endcase_loop
.8e12					_done:
.8e12	e8		inx		                inx
.8e13	e8		inx		                inx
.8e14	60		rts		z_endcase:      rts
.8e15					xt_environment_q:
.8e15	20 29 d8	jsr $d829	                jsr underflow_1
.8e18	a0 00		ldy #$00	                ldy #00                 ; counter for table
.8e1a	5a		phy		                phy
.8e1b					_table_loop:
.8e1b	20 b2 a3	jsr $a3b2	                jsr xt_two_dup          ; ( addr u addr u ) 2DUP does not use Y
.8e1e	ca		dex		                dex
.8e1f	ca		dex		                dex                     ; ( addr u addr u ? )
.8e20	b9 92 8e	lda $8e92,y	                lda env_table_single,y
.8e23	95 00		sta $00,x	                sta 0,x
.8e25	c8		iny		                iny
.8e26	b9 92 8e	lda $8e92,y	                lda env_table_single,y
.8e29	95 01		sta $01,x	                sta 1,x                 ; ( addr u addr u addr-t )
.8e2b	c8		iny		                iny
.8e2c	15 00		ora $00,x	                ora 0,x
.8e2e	f0 4d		beq $8e7d	                beq _table_done
.8e30	5a		phy		                phy                     ; save Y, which is used by COUNT
.8e31	20 4f 89	jsr $894f	                jsr xt_count            ; ( addr u addr u addr-s u-s )
.8e34	20 88 87	jsr $8788	                jsr xt_compare          ; ( addr u f )
.8e37	7a		ply		                ply
.8e38	b5 00		lda $00,x	                lda 0,x
.8e3a	15 01		ora $01,x	                ora 1,x
.8e3c	f0 04		beq $8e42	                beq _got_result
.8e3e	e8		inx		                inx                     ; DROP, now ( addr u )
.8e3f	e8		inx		                inx
.8e40	80 d9		bra $8e1b	                bra _table_loop
.8e42					_got_result:
.8e42	e8		inx		                inx                     ; drop flag, now ( addr u )
.8e43	e8		inx		                inx
.8e44	88		dey		                dey                     ; go back to index we had
.8e45	88		dey		                dey
.8e46	68		pla		                pla
.8e47	d0 0d		bne $8e56	                bne _double_result
.8e49	b9 b0 8e	lda $8eb0,y	                lda env_results_single,y
.8e4c	95 02		sta $02,x	                sta 2,x
.8e4e	c8		iny		                iny
.8e4f	b9 b0 8e	lda $8eb0,y	                lda env_results_single,y
.8e52	95 03		sta $03,x	                sta 3,x                 ; ( res u )
.8e54	80 1f		bra $8e75	                bra _set_flag
.8e56					_double_result:
.8e56	ca		dex		                dex                     ; ( addr u ? )
.8e57	ca		dex		                dex
.8e58	98		tya		                tya
.8e59	38		sec		                sec
.8e5a	e9 18		sbc #$18	                sbc #24
.8e5c	0a		asl a		                asl
.8e5d	a8		tay		                tay
.8e5e	b9 c6 8e	lda $8ec6,y	                lda env_results_double,y
.8e61	95 02		sta $02,x	                sta 2,x
.8e63	c8		iny		                iny
.8e64	b9 c6 8e	lda $8ec6,y	                lda env_results_double,y
.8e67	95 03		sta $03,x	                sta 3,x                 ; ( res u ? )
.8e69	c8		iny		                iny
.8e6a	b9 c6 8e	lda $8ec6,y	                lda env_results_double,y
.8e6d	95 04		sta $04,x	                sta 4,x
.8e6f	c8		iny		                iny
.8e70	b9 c6 8e	lda $8ec6,y	                lda env_results_double,y
.8e73	95 05		sta $05,x	                sta 5,x                 ; ( res res ? )
.8e75					_set_flag:
.8e75	a9 ff		lda #$ff	                lda #$ff
.8e77	95 00		sta $00,x	                sta 0,x
.8e79	95 01		sta $01,x	                sta 1,x                 ; ( res f )
.8e7b	80 14		bra $8e91	                bra _done
.8e7d					_table_done:
.8e7d	68		pla		                pla
.8e7e	d0 09		bne $8e89	                bne _no_match
.8e80	1a		inc a		                ina
.8e81	48		pha		                pha
.8e82	8a		txa		                txa
.8e83	18		clc		                clc
.8e84	69 06		adc #$06	                adc #6                  ; skip six bytes
.8e86	aa		tax		                tax                     ; ( addr u )
.8e87	80 92		bra $8e1b	                bra _table_loop
.8e89					_no_match:
.8e89	8a		txa		                txa
.8e8a	18		clc		                clc
.8e8b	69 0a		adc #$0a	                adc #10
.8e8d	aa		tax		                tax                     ; ( addr ) - not ( 0 ) !
.8e8e	20 79 8f	jsr $8f79	                jsr xt_false
.8e91					_done:
.8e91					z_environment_q:
.8e91	60		rts		                rts
.8e92					env_table_single:
>8e92	4c d6 5c d6 62 d6 67 d6		        .word envs_cs, envs_hold, envs_pad, envs_aub, envs_floored
>8e9a	79 d6
>8e9c	81 d6 8a d6 90 d6 96 d6		        .word envs_max_char, envs_max_n, envs_max_u, envs_rsc
>8ea4	a9 d6 b5 d6 00 00		        .word envs_sc, envs_wl, 0000
.8eaa					env_table_double:
>8eaa	bf d6 c5 d6 00 00		        .word envs_max_d, envs_max_ud, 0000
.8eb0					env_results_single:
>8eb0	ff 7f				        .word $7FFF     ; /COUNTED-STRING
>8eb2	ff 00				        .word $00FF     ; /HOLD
>8eb4	54 00				        .word $0054     ; /PAD (this is 84 decimal)
>8eb6	08 00				        .word $0008     ; ADDRESS-UNIT-BITS (keep "$" to avoid octal!)
>8eb8	00 00				        .word 0000      ; FLOORED ("FALSE", we have symmetric)
>8eba	ff 00				        .word $00FF     ; MAX-CHAR
>8ebc	ff 7f				        .word $7FFF     ; MAX-N
>8ebe	ff ff				        .word $FFFF     ; MAX-U
>8ec0	80 00				        .word $0080     ; RETURN-STACK-CELLS
>8ec2	20 00				        .word $0020     ; STACK-CELLS (from definitions.asm)
>8ec4	09 00				        .word $0009     ; WORDLISTS
.8ec6					env_results_double:
>8ec6	ff 7f ff ff			        .word $7FFF, $FFFF      ; MAX-D
>8eca	ff ff ff ff			        .word $FFFF, $FFFF      ; MAX-UD
.8ece					xt_equal:
.8ece	20 2e d8	jsr $d82e	                jsr underflow_2
.8ed1	b5 00		lda $00,x	                lda 0,x                 ; LSB
.8ed3	d5 02		cmp $02,x	                cmp 2,x
.8ed5	d0 0a		bne $8ee1	                bne _false
.8ed7	b5 01		lda $01,x	                lda 1,x                 ; MSB
.8ed9	d5 03		cmp $03,x	                cmp 3,x
.8edb	d0 04		bne $8ee1	                bne _false
.8edd	a9 ff		lda #$ff	                lda #$ff
.8edf	80 02		bra $8ee3	                bra _done
.8ee1	a9 00		lda #$00	_false:         lda #0                  ; drop thru to done
.8ee3	95 02		sta $02,x	_done:          sta 2,x
.8ee5	95 03		sta $03,x	                sta 3,x
.8ee7	e8		inx		                inx
.8ee8	e8		inx		                inx
.8ee9	60		rts		z_equal:        rts
.8eea					xt_blank:
.8eea	ca		dex		                dex
.8eeb	ca		dex		                dex
.8eec	a9 20		lda #$20	                lda #AscSP
.8eee	95 00		sta $00,x	                sta 0,x
.8ef0	74 01		stz $01,x	                stz 1,x
.8ef2	80 06		bra $8efa	                bra xt_fill     ; skip over code for ERASE
.8ef4					xt_erase:
.8ef4	ca		dex		                dex
.8ef5	ca		dex		                dex
.8ef6	74 00		stz $00,x	                stz 0,x
.8ef8	74 01		stz $01,x	                stz 1,x
.8efa					xt_fill:
.8efa	20 33 d8	jsr $d833	                jsr underflow_3
.8efd	b5 04		lda $04,x	                lda 4,x         ; LSB
.8eff	85 24		sta $24		                sta tmp1
.8f01	b5 05		lda $05,x	                lda 5,x
.8f03	85 25		sta $25		                sta tmp1+1
.8f05	b5 02		lda $02,x	                lda 2,x
.8f07	85 26		sta $26		                sta tmp2
.8f09	b5 03		lda $03,x	                lda 3,x
.8f0b	85 27		sta $27		                sta tmp2+1
.8f0d	b5 00		lda $00,x	                lda 0,x
.8f0f	a8		tay		                tay
.8f10					_loop:
.8f10	a9 7f		lda #$7f	                lda #>ram_end           ; MSB
.8f12	c5 25		cmp $25		                cmp tmp1+1
.8f14	90 21		bcc $8f37	                bcc _done               ; RAM_END < TMP1, so leave
.8f16	d0 06		bne $8f1e	                bne _check_counter      ; RAM_END is not smaller and not equal
.8f18	a9 ff		lda #$ff	                lda #<ram_end           ; LSB, because MSBs were equal
.8f1a	c5 24		cmp $24		                cmp tmp1
.8f1c	90 19		bcc $8f37	                bcc _done               ; RAM_END < TMP1, so leave
.8f1e					_check_counter:
.8f1e	a5 26		lda $26		                lda tmp2
.8f20	05 27		ora $27		                ora tmp2+1
.8f22	f0 13		beq $8f37	                beq _done
.8f24	98		tya		                tya
.8f25	92 24		sta ($24)	                sta (tmp1)
.8f27	a5 26		lda $26		                lda tmp2
.8f29	d0 02		bne $8f2d	                bne +
.8f2b	c6 27		dec $27		                dec tmp2+1
.8f2d	c6 26		dec $26		+               dec tmp2
.8f2f	e6 24		inc $24		                inc tmp1
.8f31	d0 dd		bne $8f10	                bne _loop
.8f33	e6 25		inc $25		                inc tmp1+1
.8f35	80 d9		bra $8f10	                bra _loop
.8f37					_done:
.8f37	8a		txa		                txa
.8f38	18		clc		                clc
.8f39	69 06		adc #$06	                adc #6
.8f3b	aa		tax		                tax
.8f3c					z_blank:
.8f3c					z_erase:
.8f3c	60		rts		z_fill:         rts
.8f3d					xt_execute:
.8f3d	20 29 d8	jsr $d829	                jsr underflow_1
.8f40	20 44 8f	jsr $8f44	                jsr doexecute   ; do not combine to JMP (native coding)
.8f43	60		rts		z_execute:      rts
.8f44					doexecute:
.8f44	b5 00		lda $00,x	                lda 0,x
.8f46	85 0e		sta $0e		                sta ip
.8f48	b5 01		lda $01,x	                lda 1,x
.8f4a	85 0f		sta $0f		                sta ip+1
.8f4c	e8		inx		                inx
.8f4d	e8		inx		                inx
.8f4e	6c 0e 00	jmp ($000e)	                jmp (ip)
.8f51					xt_execute_parsing:
.8f51	20 33 d8	jsr $d833	                jsr underflow_3
.8f54	20 62 92	jsr $9262	                jsr xt_input_to_r       ; save normal input for later
.8f57	20 6e 96	jsr $966e	                jsr xt_not_rote         ; -ROT ( xt addr u )
.8f5a	b5 00		lda $00,x	                lda 0,x                 ; TOS is new ciblen
.8f5c	85 0a		sta $0a		                sta ciblen
.8f5e	b5 01		lda $01,x	                lda 1,x
.8f60	85 0b		sta $0b		                sta ciblen+1
.8f62	b5 02		lda $02,x	                lda 2,x                 ; NOS is new cib
.8f64	85 08		sta $08		                sta cib
.8f66	b5 03		lda $03,x	                lda 3,x
.8f68	85 09		sta $09		                sta cib+1
.8f6a	64 0c		stz $0c		                stz toin                ; Set >IN to zero
.8f6c	64 0d		stz $0d		                stz toin+1
.8f6e	20 aa a3	jsr $a3aa	                jsr xt_two_drop         ; 2DROP ( xt )
.8f71	20 3d 8f	jsr $8f3d	                jsr xt_execute
.8f74	20 a3 9a	jsr $9aa3	                jsr xt_r_to_input
.8f77					z_execute_parsing:
.8f77	60		rts		                rts
.8f78					xt_exit:
.8f78	60		rts		                rts             ; keep before z_exit
.8f79					z_exit:
.8f79					xt_false:
.8f79	ca		dex		                dex
.8f7a	ca		dex		                dex
.8f7b	74 00		stz $00,x	                stz 0,x
.8f7d	74 01		stz $01,x	                stz 1,x
.8f7f	60		rts		z_false:        rts
.8f80					xt_fetch:
.8f80	20 29 d8	jsr $d829	                jsr underflow_1
.8f83	a1 00		lda ($00,x)	                lda (0,x)               ; LSB
.8f85	a8		tay		                tay
.8f86	f6 00		inc $00,x	                inc 0,x
.8f88	d0 02		bne $8f8c	                bne +
.8f8a	f6 01		inc $01,x	                inc 1,x
.8f8c					+
.8f8c	a1 00		lda ($00,x)	                lda (0,x)               ; MSB
.8f8e	95 01		sta $01,x	                sta 1,x
.8f90	94 00		sty $00,x	                sty 0,x
.8f92	60		rts		z_fetch:        rts
.8f93					xt_find:
.8f93	20 29 d8	jsr $d829	                jsr underflow_1
.8f96	b5 01		lda $01,x	                lda 1,x                 ; MSB
.8f98	48		pha		                pha
.8f99	b5 00		lda $00,x	                lda 0,x                 ; LSB
.8f9b	48		pha		                pha
.8f9c	20 4f 89	jsr $894f	                jsr xt_count            ; ( caddr -- addr u )
.8f9f	20 db 8f	jsr $8fdb	                jsr xt_find_name        ; ( addr u -- nt | 0 )
.8fa2	b5 00		lda $00,x	                lda 0,x
.8fa4	15 01		ora $01,x	                ora 1,x
.8fa6	d0 0b		bne $8fb3	                bne _found_word
.8fa8	20 79 8f	jsr $8f79	                jsr xt_false            ; ( 0 0 )
.8fab	68		pla		                pla                     ; LSB of address
.8fac	95 02		sta $02,x	                sta 2,x
.8fae	68		pla		                pla
.8faf	95 03		sta $03,x	                sta 3,x                 ; MSB of address
.8fb1	80 27		bra $8fda	                bra _done               ; ( addr 0 )
.8fb3					_found_word:
.8fb3	68		pla		                pla
.8fb4	68		pla		                pla
.8fb5	20 af 8d	jsr $8daf	                jsr xt_dup              ; ( nt nt )
.8fb8	20 e1 95	jsr $95e1	                jsr xt_name_to_int      ; ( nt xt )
.8fbb	20 a8 a1	jsr $a1a8	                jsr xt_swap             ; ( xt nt )
.8fbe	a0 00		ldy #$00	                ldy #0                  ; Prepare flag
.8fc0	f6 00		inc $00,x	                inc 0,x
.8fc2	d0 02		bne $8fc6	                bne +
.8fc4	f6 01		inc $01,x	                inc 1,x                 ; ( xt nt+1 )
.8fc6					+
.8fc6	a1 00		lda ($00,x)	                lda (0,x)               ; ( xt char )
.8fc8	29 04		and #$04	                and #IM
.8fca	d0 08		bne $8fd4	                bne _immediate          ; bit set, we're immediate
.8fcc	a9 ff		lda #$ff	                lda #$FF                ; We're not immediate, return -1
.8fce	95 00		sta $00,x	                sta 0,x
.8fd0	95 01		sta $01,x	                sta 1,x
.8fd2	80 06		bra $8fda	                bra _done
.8fd4					_immediate:
.8fd4	a9 01		lda #$01	                lda #1                  ; We're immediate, return 1
.8fd6	95 00		sta $00,x	                sta 0,x
.8fd8	74 01		stz $01,x	                stz 1,x
.8fda					_done:
.8fda	60		rts		z_find:         rts
.8fdb					xt_find_name:
.8fdb	20 2e d8	jsr $d82e	                jsr underflow_2
.8fde	b5 00		lda $00,x	                lda 0,x
.8fe0	15 01		ora $01,x	                ora 1,x
.8fe2	d0 03		bne $8fe7	                bne _nonempty
.8fe4	4c 80 90	jmp $9080	                jmp _fail_done
.8fe7					_nonempty:
.8fe7	64 28		stz $28		                stz tmp3                ; Start at the beginning
.8fe9					_wordlist_loop:
.8fe9	a0 1e		ldy #$1e	                ldy #num_order_offset   ; Compare to byte variable #ORDER
.8feb	a5 28		lda $28		                lda tmp3
.8fed	d1 1e		cmp ($1e),y	                cmp (up),y              ; Check to see if we are done
.8fef	d0 03		bne $8ff4	                bne _have_string
.8ff1	4c 80 90	jmp $9080	                jmp _fail_done
.8ff4					_have_string:
.8ff4	18		clc		                clc             ; SEARCH-ORDER is array of bytes.
.8ff5	69 1f		adc #$1f	                adc #search_order_offset
.8ff7	a8		tay		                tay
.8ff8	b1 1e		lda ($1e),y	                lda (up),y      ; Get the id byte, which is the offset
.8ffa	0a		asl a		                asl                     ; Turn offset into cells offset.
.8ffb	18		clc		                clc
.8ffc	69 06		adc #$06	                adc #wordlists_offset
.8ffe	a8		tay		                tay
.8fff	b1 1e		lda ($1e),y	                lda (up),y
.9001	85 24		sta $24		                sta tmp1
.9003	c8		iny		                iny
.9004	b1 1e		lda ($1e),y	                lda (up),y
.9006	85 25		sta $25		                sta tmp1+1
.9008	b5 02		lda $02,x	                lda 2,x                 ; Address of mystery string
.900a	85 26		sta $26		                sta tmp2
.900c	b5 03		lda $03,x	                lda 3,x
.900e	85 27		sta $27		                sta tmp2+1
.9010					_loop:
.9010	b2 24		lda ($24)	                lda (tmp1)
.9012	d5 00		cmp $00,x	                cmp 0,x
.9014	d0 54		bne $906a	                bne _next_entry
.9016					_compare_string:
.9016	b2 26		lda ($26)	                lda (tmp2)      ; first character of mystery string
.9018	c9 5b		cmp #$5b	                cmp #$5B        ; ASCII '[' (one past Z)
.901a	b0 07		bcs $9023	                bcs _compare_first
.901c	c9 41		cmp #$41	                cmp #$41        ; ASCII 'A'
.901e	90 03		bcc $9023	                bcc _compare_first
.9020	18		clc		                clc
.9021	69 20		adc #$20	                adc #$20
.9023					_compare_first:
.9023	a0 08		ldy #$08	                ldy #8          ; Offset in nt to name
.9025	d1 24		cmp ($24),y	                cmp (tmp1),y    ; first character of current word
.9027	d0 41		bne $906a	                bne _next_entry
.9029	b5 00		lda $00,x	                lda 0,x
.902b	3a		dec a		                dea
.902c	f0 2c		beq $905a	                beq _success
.902e	a5 24		lda $24		                lda tmp1
.9030	48		pha		                pha             ; Preserve tmp1 on the return stack.
.9031	18		clc		                clc
.9032	69 08		adc #$08	                adc #8
.9034	85 24		sta $24		                sta tmp1        ; Reusing tmp1 temporarily for string check.
.9036	a5 25		lda $25		                lda tmp1+1
.9038	48		pha		                pha             ; Preserve tmp1+1 on the return stack.
.9039	69 00		adc #$00	                adc #0          ; we only need the carry
.903b	85 25		sta $25		                sta tmp1+1
.903d	b4 00		ldy $00,x	                ldy 0,x         ; index is length of string minus 1
.903f	88		dey		                dey
.9040					_string_loop:
.9040	b1 26		lda ($26),y	                lda (tmp2),y    ; last char of mystery string
.9042	c9 5b		cmp #$5b	                cmp #$5B         ; ASCII '[' (one past Z)
.9044	b0 07		bcs $904d	                bcs _check_char
.9046	c9 41		cmp #$41	                cmp #$41        ; ASCII 'A'
.9048	90 03		bcc $904d	                bcc _check_char
.904a	18		clc		                clc
.904b	69 20		adc #$20	                adc #$20
.904d					_check_char:
.904d	d1 24		cmp ($24),y	                cmp (tmp1),y    ; last char of word we're testing against
.904f	d0 13		bne $9064	                bne _next_entry_tmp1
.9051	88		dey		                dey
.9052	d0 ec		bne $9040	                bne _string_loop
.9054					_success_tmp1:
.9054	68		pla		                pla             ; Restore tmp1 from the return stack.
.9055	85 25		sta $25		                sta tmp1+1
.9057	68		pla		                pla
.9058	85 24		sta $24		                sta tmp1
.905a					_success:
.905a	a5 24		lda $24		                lda tmp1
.905c	95 02		sta $02,x	                sta 2,x
.905e	a5 25		lda $25		                lda tmp1+1
.9060	95 03		sta $03,x	                sta 3,x
.9062	80 20		bra $9084	                bra _done
.9064					_next_entry_tmp1:
.9064	68		pla		                pla             ; Restore tmp1 from the return stack.
.9065	85 25		sta $25		                sta tmp1+1
.9067	68		pla		                pla
.9068	85 24		sta $24		                sta tmp1
.906a					_next_entry:
.906a	a0 02		ldy #$02	                ldy #2
.906c	b1 24		lda ($24),y	                lda (tmp1),y
.906e	48		pha		                pha
.906f	c8		iny		                iny
.9070	b1 24		lda ($24),y	                lda (tmp1),y
.9072	85 25		sta $25		                sta tmp1+1
.9074	68		pla		                pla
.9075	85 24		sta $24		                sta tmp1
.9077	05 25		ora $25		                ora tmp1+1
.9079	d0 95		bne $9010	                bne _loop
.907b	e6 28		inc $28		                inc tmp3
.907d	4c e9 8f	jmp $8fe9	                jmp _wordlist_loop
.9080					_fail_done:
.9080	74 02		stz $02,x	                stz 2,x         ; failure flag
.9082	74 03		stz $03,x	                stz 3,x
.9084					_done:
.9084	e8		inx		                inx
.9085	e8		inx		                inx
.9086	60		rts		z_find_name:    rts
.9087					xt_flush:
.9087	20 be 9e	jsr $9ebe	                jsr xt_save_buffers
.908a	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.908c	a9 00		lda #$00	                lda #0
.908e	91 1e		sta ($1e),y	                sta (up),y      ; Only LSB is used.
.9090					z_flush:
.9090	60		rts		                rts
.9091					xt_fm_slash_mod:
.9091	20 33 d8	jsr $d833	                jsr underflow_3
.9094	64 26		stz $26		                stz tmp2        ; default: n is positive
.9096	b5 01		lda $01,x	                lda 1,x         ; MSB of n1
.9098	10 0e		bpl $90a8	                bpl _check_d
.909a	e6 26		inc $26		                inc tmp2        ; set flag to negative for n1
.909c	20 23 96	jsr $9623	                jsr xt_negate   ; NEGATE
.909f	20 6a a3	jsr $a36a	                jsr xt_to_r     ; >R
.90a2	20 41 8b	jsr $8b41	                jsr xt_dnegate  ; DNEGATE
.90a5	20 92 9a	jsr $9a92	                jsr xt_r_from   ; R>
.90a8					_check_d:
.90a8	b5 03		lda $03,x	                lda 3,x         ; MSB of high word of d
.90aa	10 0d		bpl $90b9	                bpl _multiply
.90ac	18		clc		                clc
.90ad	b5 00		lda $00,x	                lda 0,x         ; LSB of n1
.90af	75 02		adc $02,x	                adc 2,x         ; LSB of dh
.90b1	95 02		sta $02,x	                sta 2,x
.90b3	b5 01		lda $01,x	                lda 1,x         ; MSB of n1
.90b5	75 03		adc $03,x	                adc 3,x         ; MSB of dh
.90b7	95 03		sta $03,x	                sta 3,x
.90b9					_multiply:
.90b9	20 b4 a5	jsr $a5b4	                jsr xt_um_slash_mod     ; ( d n1 -- rem n2 )
.90bc	a5 26		lda $26		                lda tmp2
.90be	f0 07		beq $90c7	                beq _done
.90c0	e8		inx		                inx             ; pretend that we SWAP
.90c1	e8		inx		                inx
.90c2	20 23 96	jsr $9623	                jsr xt_negate
.90c5	ca		dex		                dex
.90c6	ca		dex		                dex
.90c7					_done:
.90c7	60		rts		z_fm_slash_mod: rts
.90c8					xt_forth:
.90c8	a0 1f		ldy #$1f	                ldy #search_order_offset
.90ca	a9 00		lda #$00	                lda #0          ; The WID for Forth is 0.
.90cc	91 1e		sta ($1e),y	                sta (up),y
.90ce					z_forth:
.90ce	60		rts		                rts
.90cf					load_evaluate:
.90cf	a9 ff		lda #$ff	                lda #$FF
.90d1	85 24		sta $24		                sta tmp1
.90d3	80 11		bra $90e6	                bra load_evaluate_start
.90d5					xt_evaluate:
.90d5	20 2e d8	jsr $d82e	                jsr underflow_2
.90d8	64 24		stz $24		                stz tmp1
.90da	b5 00		lda $00,x	                lda 0,x
.90dc	15 01		ora $01,x	                ora 1,x
.90de	d0 06		bne $90e6	                bne evaluate_got_work
.90e0	e8		inx		                inx
.90e1	e8		inx		                inx
.90e2	e8		inx		                inx
.90e3	e8		inx		                inx
.90e4	80 42		bra $9128	                bra evaluate_done
.90e6					load_evaluate_start:
.90e6					evaluate_got_work:
.90e6	a0 01		ldy #$01	                ldy #blk_offset+1
.90e8	b1 1e		lda ($1e),y	                lda (up),y
.90ea	48		pha		                pha
.90eb	88		dey		                dey
.90ec	b1 1e		lda ($1e),y	                lda (up),y
.90ee	48		pha		                pha
.90ef	a5 24		lda $24		                lda tmp1
.90f1	d0 05		bne $90f8	                bne _nozero
.90f3	91 1e		sta ($1e),y	                sta (up),y
.90f5	c8		iny		                iny
.90f6	91 1e		sta ($1e),y	                sta (up),y
.90f8					_nozero:
.90f8	20 62 92	jsr $9262	                jsr xt_input_to_r
.90fb	a9 ff		lda #$ff	                lda #$ff
.90fd	85 06		sta $06		                sta insrc
.90ff	85 07		sta $07		                sta insrc+1
.9101	64 0c		stz $0c		                stz toin
.9103	64 0d		stz $0d		                stz toin+1
.9105	b5 00		lda $00,x	                lda 0,x
.9107	85 0a		sta $0a		                sta ciblen
.9109	b5 01		lda $01,x	                lda 1,x
.910b	85 0b		sta $0b		                sta ciblen+1
.910d	b5 02		lda $02,x	                lda 2,x
.910f	85 08		sta $08		                sta cib
.9111	b5 03		lda $03,x	                lda 3,x
.9113	85 09		sta $09		                sta cib+1
.9115	e8		inx		                inx             ; A clean stack is a clean mind
.9116	e8		inx		                inx
.9117	e8		inx		                inx
.9118	e8		inx		                inx
.9119	20 91 d7	jsr $d791	                jsr interpret   ; ( -- )
.911c	20 a3 9a	jsr $9aa3	                jsr xt_r_to_input
.911f	a0 00		ldy #$00	                ldy #blk_offset
.9121	68		pla		                pla
.9122	91 1e		sta ($1e),y	                sta (up),y
.9124	c8		iny		                iny
.9125	68		pla		                pla
.9126	91 1e		sta ($1e),y	                sta (up),y
.9128					evaluate_done:
.9128	60		rts		z_evaluate:     rts
.9129					xt_get_current:
.9129	ca		dex		                dex
.912a	ca		dex		                dex
.912b	a0 04		ldy #$04	                ldy #current_offset
.912d	b1 1e		lda ($1e),y	                lda (up),y
.912f	95 00		sta $00,x	                sta 0,x         ; CURRENT is a byte variable
.9131	74 01		stz $01,x	                stz 1,x         ; so the MSB is zero.
.9133	60		rts		z_get_current:  rts
.9134					xt_get_order:
.9134	a0 1e		ldy #$1e	                ldy #num_order_offset
.9136	b1 1e		lda ($1e),y	                lda (up),y
.9138	85 24		sta $24		                sta tmp1
.913a	f0 16		beq $9152	                beq _done       ; If zero, there are no wordlists.
.913c					_loop:
.913c	c6 24		dec $24		                dec tmp1        ; Count down by bytes.
.913e	a9 1f		lda #$1f	                lda #search_order_offset
.9140	18		clc		                clc
.9141	65 24		adc $24		                adc tmp1
.9143	a8		tay		                tay
.9144	ca		dex		                dex
.9145	ca		dex		                dex
.9146	b1 1e		lda ($1e),y	                lda (up),y
.9148	95 00		sta $00,x	                sta 0,x         ; Search order array is bytes, so
.914a	74 01		stz $01,x	                stz 1,x         ; put a zero in the high byte.
.914c	a9 00		lda #$00	                lda #0
.914e	c5 24		cmp $24		                cmp tmp1
.9150	d0 ea		bne $913c	                bne _loop
.9152					_done:
.9152	ca		dex		                dex
.9153	ca		dex		                dex
.9154	a0 1e		ldy #$1e	                ldy #num_order_offset
.9156	b1 1e		lda ($1e),y	                lda (up),y
.9158	95 00		sta $00,x	                sta 0,x
.915a	74 01		stz $01,x	                stz 1,x         ; We only support 8 wordlists.
.915c	60		rts		z_get_order:    rts
.915d					xt_greater_than:
.915d	20 2e d8	jsr $d82e	                jsr underflow_2
.9160	a0 00		ldy #$00	                ldy #0          ; default false
.9162	20 50 d7	jsr $d750	                jsr compare_16bit
.9165	f0 03		beq $916a	                beq _false
.9167	10 01		bpl $916a	                bpl _false
.9169	88		dey		                dey
.916a					_false:
.916a	98		tya		                tya
.916b	e8		inx		                inx
.916c	e8		inx		                inx
.916d	95 00		sta $00,x	                sta 0,x
.916f	95 01		sta $01,x	                sta 1,x
.9171	60		rts		z_greater_than: rts
.9172					xt_here:
.9172					xt_asm_arrow:
.9172	ca		dex		                dex
.9173	ca		dex		                dex
.9174	a5 00		lda $00		                lda cp
.9176	95 00		sta $00,x	                sta 0,x
.9178	a5 01		lda $01		                lda cp+1
.917a	95 01		sta $01,x	                sta 1,x
.917c					z_asm_arrow:
.917c	60		rts		z_here:         rts
.917d					xt_hex:
.917d	a9 10		lda #$10	                lda #16
.917f	85 18		sta $18		                sta base
.9181	64 19		stz $19		                stz base+1              ; paranoid
.9183	60		rts		z_hex:          rts
.9184					xt_hexstore:
.9184	20 33 d8	jsr $d833	                jsr underflow_3
.9187	20 af 8d	jsr $8daf	                jsr xt_dup              ; Save copy of original address
.918a	20 9c a4	jsr $a49c	                jsr xt_two_to_r         ; ( addr1 u1 ) ( R: addr2 addr2 )
.918d					_loop:
.918d	b5 00		lda $00,x	                lda 0,x
.918f	15 01		ora $01,x	                ora 1,x
.9191	f0 36		beq $91c9	                beq _done
.9193	20 4c 86	jsr $864c	                jsr xt_cleave           ; ( addr1 u1 addr3 u3 ) ( R: addr2 addr2 )
.9196	20 9c a4	jsr $a49c	                jsr xt_two_to_r
.9199	20 a2 a7	jsr $a7a2	                jsr xt_zero
.919c	20 a2 a7	jsr $a7a2	                jsr xt_zero
.919f	20 22 a4	jsr $a422	                jsr xt_two_r_from       ; ( addr1 u1 0 0 addr3 u3 ) ( R: addr2 addr2 )
.91a2	20 b7 a2	jsr $a2b7	                jsr xt_to_number        ; ( addr1 u1 n n addr4 u4 ) ( R: addr2 addr2 )
.91a5	b5 00		lda $00,x	                lda 0,x
.91a7	15 01		ora $01,x	                ora 1,x
.91a9	d0 17		bne $91c2	                bne _have_chars_left
.91ab	20 aa a3	jsr $a3aa	                jsr xt_two_drop         ; ( addr1 u1 n n ) ( R: addr2 addr2 )
.91ae	20 80 8a	jsr $8a80	                jsr xt_d_to_s           ; ( addr1 u1 n ) ( R: addr2 addr2 )
.91b1	20 7d 9a	jsr $9a7d	                jsr xt_r_fetch          ; ( addr1 u1 n addr2 ) ( R: addr2 addr2 )
.91b4	20 15 86	jsr $8615	                jsr xt_c_store          ; ( addr1 u1 ) ( R: addr2 addr2 )
.91b7	20 92 9a	jsr $9a92	                jsr xt_r_from           ; R>
.91ba	20 1d 98	jsr $981d	                jsr xt_one_plus         ; 1+
.91bd	20 6a a3	jsr $a36a	                jsr xt_to_r             ; >R ( addr1 u1 ) ( R: addr2+1 addr2 )
.91c0	80 cb		bra $918d	                bra _loop
.91c2					_have_chars_left:
.91c2	8a		txa		                txa
.91c3	18		clc		                clc
.91c4	69 08		adc #$08	                adc #8
.91c6	aa		tax		                tax
.91c7	80 c4		bra $918d	                bra _loop
.91c9					_done:
.91c9	e8		inx		                inx
.91ca	e8		inx		                inx
.91cb	e8		inx		                inx
.91cc	e8		inx		                inx                     ; 2DROP
.91cd	20 22 a4	jsr $a422	                jsr xt_two_r_from       ; ( addr2+n addr2 )
.91d0	20 a8 a1	jsr $a1a8	                jsr xt_swap
.91d3	20 50 95	jsr $9550	                jsr xt_minus            ; ( n )
.91d6	60		rts		z_hexstore:     rts
.91d7					xt_hold:
.91d7	20 29 d8	jsr $d829	                jsr underflow_1
.91da	a5 34		lda $34		                lda tohold
.91dc	d0 02		bne $91e0	                bne +
.91de	c6 35		dec $35		                dec tohold+1
.91e0					+
.91e0	c6 34		dec $34		                dec tohold
.91e2	b5 00		lda $00,x	                lda 0,x
.91e4	92 34		sta ($34)	                sta (tohold)
.91e6	e8		inx		                inx
.91e7	e8		inx		                inx
.91e8	60		rts		z_hold:         rts
.91e9					xt_i:
.91e9	ca		dex		                dex
.91ea	ca		dex		                dex
.91eb	86 2a		stx $2a		                stx tmpdsp
.91ed	ba		tsx		                tsx
.91ee	38		sec		                sec
.91ef	bd 01 01	lda $0101,x	                lda $0101,x     ; LSB
.91f2	fd 03 01	sbc $0103,x	                sbc $0103,x
.91f5	a8		tay		                tay
.91f6	bd 02 01	lda $0102,x	                lda $0102,x     ; MSB
.91f9	fd 04 01	sbc $0104,x	                sbc $0104,x
.91fc	a6 2a		ldx $2a		                ldx tmpdsp
.91fe	95 01		sta $01,x	                sta 1,x         ; MSB of de-fudged index
.9200	94 00		sty $00,x	                sty 0,x         ; LSB of de-fudged index
.9202	60		rts		z_i:            rts
.9203					xt_if:
.9203	a0 92		ldy #$92	                ldy #>zero_branch_runtime
.9205	a9 14		lda #$14	                lda #<zero_branch_runtime
.9207	20 cc d6	jsr $d6cc	                jsr cmpl_subroutine
.920a	20 72 91	jsr $9172	                jsr xt_here
.920d	20 a2 a7	jsr $a7a2	                jsr xt_zero
.9210	20 6e 87	jsr $876e	                jsr xt_comma
.9213	60		rts		z_if:           rts
.9214					zero_branch_runtime:
.9214	68		pla		                pla
.9215	85 22		sta $22		                sta tmpbranch
.9217	68		pla		                pla
.9218	85 23		sta $23		                sta tmpbranch+1
.921a	b5 00		lda $00,x	                lda 0,x
.921c	15 01		ora $01,x	                ora 1,x
.921e	f0 0f		beq $922f	                beq _zero
.9220	a5 22		lda $22		                lda tmpbranch   ; LSB
.9222	18		clc		                clc
.9223	69 02		adc #$02	                adc #2
.9225	85 24		sta $24		                sta tmp1
.9227	a5 23		lda $23		                lda tmpbranch+1 ; MSB
.9229	69 00		adc #$00	                adc #0          ; For carry
.922b	85 25		sta $25		                sta tmp1+1
.922d	80 13		bra $9242	                bra _done
.922f					_zero:
.922f	a0 01		ldy #$01	                ldy #1
.9231	b1 22		lda ($22),y	                lda (tmpbranch),y
.9233	85 24		sta $24		                sta tmp1
.9235	c8		iny		                iny
.9236	b1 22		lda ($22),y	                lda (tmpbranch),y
.9238	85 25		sta $25		                sta tmp1+1
.923a	a5 24		lda $24		                lda tmp1
.923c	d0 02		bne $9240	                bne +
.923e	c6 25		dec $25		                dec tmp1+1
.9240					+
.9240	c6 24		dec $24		                dec tmp1
.9242					_done:
.9242	a5 25		lda $25		                lda tmp1+1
.9244	48		pha		                pha             ; MSB first
.9245	a5 24		lda $24		                lda tmp1
.9247	48		pha		                pha
.9248	e8		inx		                inx
.9249	e8		inx		                inx
.924a	60		rts		                rts
.924b					xt_immediate:
.924b	20 6b d7	jsr $d76b	                jsr current_to_dp
.924e	a0 01		ldy #$01	                ldy #1          ; offset for status byte
.9250	b1 02		lda ($02),y	                lda (dp),y
.9252	09 04		ora #$04	                ora #IM        ; make sure bit 7 is set
.9254	91 02		sta ($02),y	                sta (dp),y
.9256	60		rts		z_immediate:    rts
.9257					xt_input:
.9257	ca		dex		                dex
.9258	ca		dex		                dex
.9259	a9 12		lda #$12	                lda #<input
.925b	95 00		sta $00,x	                sta 0,x
.925d	a9 00		lda #$00	                lda #>input
.925f	95 01		sta $01,x	                sta 1,x
.9261	60		rts		z_input:        rts
.9262					xt_input_to_r:
.9262	68		pla		                pla
.9263	85 24		sta $24		                sta tmp1
.9265	68		pla		                pla
.9266	85 25		sta $25		                sta tmp1+1
.9268	a0 07		ldy #$07	                ldy #7
.926a					_loop:
.926a	b9 06 00	lda $0006,y	                lda insrc,y     ; insrc+7 is toin+1
.926d	48		pha		                pha
.926e	88		dey		                dey
.926f	10 f9		bpl $926a	                bpl _loop
.9271	a5 25		lda $25		                lda tmp1+1
.9273	48		pha		                pha
.9274	a5 24		lda $24		                lda tmp1
.9276	48		pha		                pha
.9277	60		rts		z_input_to_r: 	rts
.9278					xt_int_to_name:
.9278	20 29 d8	jsr $d829	                jsr underflow_1
.927b	ca		dex		                dex
.927c	ca		dex		                dex
.927d	74 00		stz $00,x	                stz 0,x
.927f	74 01		stz $01,x	                stz 1,x
.9281					_wordlist_loop:
.9281	b5 00		lda $00,x	                lda 0,x                 ; Get the current wordlist.
.9283	0a		asl a		                asl                     ; Turn offset into cells offset.
.9284	18		clc		                clc
.9285	69 06		adc #$06	                adc #wordlists_offset
.9287	a8		tay		                tay
.9288	b1 1e		lda ($1e),y	                lda (up),y              ; Save the DP for this wordlist
.928a	85 26		sta $26		                sta tmp2                ; into tmp2
.928c	c8		iny		                iny
.928d	b1 1e		lda ($1e),y	                lda (up),y
.928f	85 27		sta $27		                sta tmp2+1
.9291	a5 26		lda $26		                lda tmp2
.9293	05 27		ora $27		                ora tmp2+1
.9295	f0 38		beq $92cf	                beq _next_wordlist
.9297	b5 02		lda $02,x	                lda 2,x         ; Target xt is now behind wordlist id.
.9299	85 28		sta $28		                sta tmp3        ; Save target xt in tmp3
.929b	b5 03		lda $03,x	                lda 3,x
.929d	85 29		sta $29		                sta tmp3+1
.929f					_loop:
.929f	a0 04		ldy #$04	                ldy #4          ; xt is four bytes down
.92a1	b1 26		lda ($26),y	                lda (tmp2),y    ; LSB of xt of current nt
.92a3	c5 28		cmp $28		                cmp tmp3
.92a5	d0 07		bne $92ae	                bne _no_match
.92a7	c8		iny		                iny
.92a8	b1 26		lda ($26),y	                lda (tmp2),y    ; MSB of xt of current nt
.92aa	c5 29		cmp $29		                cmp tmp3+1
.92ac	f0 32		beq $92e0	                beq _match
.92ae					_no_match:
.92ae	18		clc		                clc
.92af	a5 26		lda $26		                lda tmp2
.92b1	69 02		adc #$02	                adc #2
.92b3	85 26		sta $26		                sta tmp2
.92b5	a5 27		lda $27		                lda tmp2+1
.92b7	69 00		adc #$00	                adc #0          ; only care about carry
.92b9	85 27		sta $27		                sta tmp2+1
.92bb	a0 00		ldy #$00	                ldy #0
.92bd	b1 26		lda ($26),y	                lda (tmp2),y
.92bf	48		pha		                pha
.92c0	c8		iny		                iny
.92c1	11 26		ora ($26),y	                ora (tmp2),y
.92c3	f0 09		beq $92ce	                beq _zero
.92c5	b1 26		lda ($26),y	                lda (tmp2),y
.92c7	85 27		sta $27		                sta tmp2+1
.92c9	68		pla		                pla
.92ca	85 26		sta $26		                sta tmp2
.92cc	80 d1		bra $929f	                bra _loop
.92ce					_zero:
.92ce	68		pla		                pla             ; Leftover from above loop
.92cf					_next_wordlist:
.92cf	b5 00		lda $00,x	                lda 0,x
.92d1	1a		inc a		                ina
.92d2	95 00		sta $00,x	                sta 0,x
.92d4	c9 0c		cmp #$0c	                cmp #max_wordlists
.92d6	d0 a9		bne $9281	                bne _wordlist_loop
.92d8	e8		inx		                inx
.92d9	e8		inx		                inx
.92da	74 00		stz $00,x	                stz 0,x
.92dc	74 01		stz $01,x	                stz 1,x
.92de	80 0a		bra $92ea	                bra z_int_to_name
.92e0					_match:
.92e0	e8		inx		                inx
.92e1	e8		inx		                inx
.92e2	a5 26		lda $26		                lda tmp2
.92e4	95 00		sta $00,x	                sta 0,x
.92e6	a5 27		lda $27		                lda tmp2+1
.92e8	95 01		sta $01,x	                sta 1,x
.92ea	60		rts		z_int_to_name:  rts
.92eb					xt_invert:
.92eb	20 29 d8	jsr $d829	                jsr underflow_1
.92ee	a9 ff		lda #$ff	                lda #$FF
.92f0	55 00		eor $00,x	                eor 0,x         ; LSB
.92f2	95 00		sta $00,x	                sta 0,x
.92f4	a9 ff		lda #$ff	                lda #$FF
.92f6	55 01		eor $01,x	                eor 1,x         ; MSB
.92f8	95 01		sta $01,x	                sta 1,x
.92fa	60		rts		z_invert:       rts
.92fb					xt_is:
.92fb	a5 16		lda $16		                lda state
.92fd	05 17		ora $17		                ora state+1
.92ff	f0 0c		beq $930d	                beq _interpreting
.9301					_compiling:
.9301	20 9e 85	jsr $859e	                jsr xt_bracket_tick
.9304	a0 8a		ldy #$8a	                ldy #>xt_defer_store
.9306	a9 e6		lda #$e6	                lda #<xt_defer_store
.9308	20 cc d6	jsr $d6cc	                jsr cmpl_subroutine
.930b	80 06		bra $9313	                bra _done
.930d					_interpreting:
.930d	20 0b a2	jsr $a20b	                jsr xt_tick
.9310	20 e6 8a	jsr $8ae6	                jsr xt_defer_store
.9313					_done:
.9313	60		rts		z_is:           rts
.9314					xt_j:
.9314	ca		dex		                dex
.9315	ca		dex		                dex
.9316	86 2a		stx $2a		                stx tmpdsp
.9318	ba		tsx		                tsx
.9319	38		sec		                sec
.931a	bd 07 01	lda $0107,x	                lda $0107,x     ; LSB
.931d	fd 09 01	sbc $0109,x	                sbc $0109,x
.9320	a8		tay		                tay
.9321	bd 08 01	lda $0108,x	                lda $0108,x     ; MSB
.9324	fd 0a 01	sbc $010a,x	                sbc $010A,x
.9327	a6 2a		ldx $2a		                ldx tmpdsp
.9329	95 01		sta $01,x	                sta 1,x         ; MSB of de-fudged index
.932b	94 00		sty $00,x	                sty 0,x         ; LSB of de-fudged index
.932d	60		rts		z_j:            rts
.932e					xt_key:
.932e	20 38 93	jsr $9338	                jsr key_a               ; returns char in A
.9331	ca		dex		                dex
.9332	ca		dex		                dex
.9333	95 00		sta $00,x	                sta 0,x
.9335	74 01		stz $01,x	                stz 1,x
.9337	60		rts		z_key:          rts
.9338					key_a:
.9338	6c 12 00	jmp ($0012)	                jmp (input)             ; JSR/RTS
.933b					xt_latestnt:
.933b	ca		dex		                dex
.933c	ca		dex		                dex
.933d	20 6b d7	jsr $d76b	                jsr current_to_dp
.9340	a5 02		lda $02		                lda dp
.9342	95 00		sta $00,x	                sta 0,x
.9344	a5 03		lda $03		                lda dp+1
.9346	95 01		sta $01,x	                sta 1,x
.9348	60		rts		z_latestnt:     rts
.9349					xt_latestxt:
.9349	20 3b 93	jsr $933b	                jsr xt_latestnt         ; ( nt )
.934c	20 e1 95	jsr $95e1	                jsr xt_name_to_int      ; ( xt )
.934f	60		rts		z_latestxt:     rts
.9350					xt_leave:
.9350	68		pla		                pla
.9351	68		pla		                pla
.9352	68		pla		                pla
.9353	68		pla		                pla
.9354	60		rts		                rts             ; this must be compiled, so keep before z_leave
.9355					z_leave:
.9355					xt_left_bracket:
.9355	64 16		stz $16		                stz state
.9357	64 17		stz $17		                stz state+1
.9359	60		rts		z_left_bracket: rts
.935a					xt_less_number_sign:
.935a	20 a1 98	jsr $98a1	                jsr xt_pad      ; ( addr )
.935d	b5 00		lda $00,x	                lda 0,x
.935f	85 34		sta $34		                sta tohold
.9361	b5 01		lda $01,x	                lda 1,x
.9363	85 35		sta $35		                sta tohold+1
.9365	e8		inx		                inx
.9366	e8		inx		                inx
.9367					z_less_number_sign:
.9367	60		rts		                rts
.9368					xt_less_than:
.9368	20 2e d8	jsr $d82e	                jsr underflow_2
.936b	a0 00		ldy #$00	                ldy #0          ; default false
.936d	20 50 d7	jsr $d750	                jsr compare_16bit
.9370	f0 03		beq $9375	                beq _false
.9372	30 01		bmi $9375	                bmi _false
.9374	88		dey		                dey
.9375					_false:
.9375	98		tya		                tya
.9376	e8		inx		                inx
.9377	e8		inx		                inx
.9378	95 00		sta $00,x	                sta 0,x
.937a	95 01		sta $01,x	                sta 1,x
.937c	60		rts		z_less_than:    rts
.937d					xt_list:
.937d	20 29 d8	jsr $d829	                jsr underflow_1
.9380	20 d9 9e	jsr $9ed9	                jsr xt_scr
.9383	20 87 a1	jsr $a187	                jsr xt_store
.9386	20 40 a8	jsr $a840	                jsr xt_editor_l
.9389	60		rts		z_list:         rts
.938a					xt_literal:
.938a	20 29 d8	jsr $d829	                jsr underflow_1
.938d	a0 93		ldy #$93	                ldy #>literal_runtime
.938f	a9 98		lda #$98	                lda #<literal_runtime
.9391	20 cc d6	jsr $d6cc	                jsr cmpl_subroutine
.9394	20 6e 87	jsr $876e	                jsr xt_comma
.9397	60		rts		z_literal:      rts
.9398					literal_runtime:
.9398	ca		dex		                dex
.9399	ca		dex		                dex
.939a	68		pla		                pla             ; LSB
.939b	85 24		sta $24		                sta tmp1
.939d	68		pla		                pla             ; MSB
.939e	85 25		sta $25		                sta tmp1+1
.93a0	a0 01		ldy #$01	                ldy #1
.93a2	b1 24		lda ($24),y	                lda (tmp1),y    ; LSB
.93a4	95 00		sta $00,x	                sta 0,x
.93a6	c8		iny		                iny
.93a7	b1 24		lda ($24),y	                lda (tmp1),y    ; MSB
.93a9	95 01		sta $01,x	                sta 1,x
.93ab	98		tya		                tya
.93ac	18		clc		                clc
.93ad	65 24		adc $24		                adc tmp1
.93af	a8		tay		                tay
.93b0	a5 25		lda $25		                lda tmp1+1
.93b2	69 00		adc #$00	                adc #0
.93b4	48		pha		                pha
.93b5	5a		phy		                phy
.93b6	60		rts		                rts
.93b7					xt_load:
.93b7	20 29 d8	jsr $d829	                jsr underflow_1
.93ba	a0 01		ldy #$01	                ldy #blk_offset+1
.93bc	b1 1e		lda ($1e),y	                lda (up),y
.93be	48		pha		                pha
.93bf	88		dey		                dey
.93c0	b1 1e		lda ($1e),y	                lda (up),y
.93c2	48		pha		                pha
.93c3	b5 00		lda $00,x	                lda 0,x
.93c5	91 1e		sta ($1e),y	                sta (up),y
.93c7	c8		iny		                iny
.93c8	b5 01		lda $01,x	                lda 1,x
.93ca	91 1e		sta ($1e),y	                sta (up),y
.93cc	20 c1 83	jsr $83c1	                jsr xt_block
.93cf	ca		dex		                dex
.93d0	ca		dex		                dex
.93d1	a9 04		lda #$04	                lda #4
.93d3	95 01		sta $01,x	                sta 1,x
.93d5	74 00		stz $00,x	                stz 0,x
.93d7	20 cf 90	jsr $90cf	                jsr load_evaluate
.93da	a0 00		ldy #$00	                ldy #blk_offset
.93dc	68		pla		                pla
.93dd	91 1e		sta ($1e),y	                sta (up),y
.93df	c8		iny		                iny
.93e0	68		pla		                pla
.93e1	91 1e		sta ($1e),y	                sta (up),y
.93e3	88		dey		                dey
.93e4	11 1e		ora ($1e),y	                ora (up),y
.93e6	f0 12		beq $93fa	                beq _done
.93e8	ca		dex		                dex
.93e9	ca		dex		                dex
.93ea	a0 00		ldy #$00	                ldy #blk_offset
.93ec	b1 1e		lda ($1e),y	                lda (up),y
.93ee	95 00		sta $00,x	                sta 0,x
.93f0	c8		iny		                iny
.93f1	b1 1e		lda ($1e),y	                lda (up),y
.93f3	95 01		sta $01,x	                sta 1,x
.93f5	20 c1 83	jsr $83c1	                jsr xt_block
.93f8	e8		inx		                inx
.93f9	e8		inx		                inx
.93fa					_done:
.93fa	60		rts		z_load:         rts
.93fb					xt_loop:
.93fb	a0 98		ldy #$98	                ldy #>xt_one
.93fd	a9 08		lda #$08	                lda #<xt_one
.93ff	20 cc d6	jsr $d6cc	                jsr cmpl_subroutine     ; drop through to +LOOP
.9402					xt_plus_loop:
.9402	a0 11		ldy #$11	                ldy #plus_loop_runtime_end-plus_loop_runtime
.9404	5a		phy		                phy             ; save counter to adjust CP
.9405					-
.9405	b9 69 94	lda $9469,y	                lda plus_loop_runtime,y
.9408	91 00		sta ($00),y	                sta (cp),y
.940a	88		dey		                dey
.940b	10 f8		bpl $9405	                bpl -
.940d	68		pla		                pla
.940e	18		clc		                clc
.940f	65 00		adc $00		                adc cp
.9411	85 00		sta $00		                sta cp
.9413	a5 01		lda $01		                lda cp+1
.9415	69 00		adc #$00	                adc #0          ; only need carry
.9417	85 01		sta $01		                sta cp+1
.9419	20 6e 87	jsr $876e	                jsr xt_comma
.941c	a9 68		lda #$68	                lda #$68                ; opcode for PLA
.941e	a0 06		ldy #$06	                ldy #6
.9420					-
.9420	91 00		sta ($00),y	                sta (cp),y
.9422	88		dey		                dey
.9423	10 fb		bpl $9420	                bpl -
.9425	a9 06		lda #$06	                lda #6
.9427	18		clc		                clc
.9428	65 00		adc $00		                adc cp
.942a	85 00		sta $00		                sta cp
.942c	a5 01		lda $01		                lda cp+1
.942e	69 00		adc #$00	                adc #0                  ; only need carry
.9430	85 01		sta $01		                sta cp+1
.9432	b5 00		lda $00,x	                lda 0,x
.9434	85 24		sta $24		                sta tmp1
.9436	b5 01		lda $01,x	                lda 1,x
.9438	85 25		sta $25		                sta tmp1+1
.943a	e8		inx		                inx
.943b	e8		inx		                inx
.943c	a5 00		lda $00		                lda cp
.943e	38		sec		                sec
.943f	e9 01		sbc #$01	                sbc #1
.9441	85 26		sta $26		                sta tmp2
.9443	a5 01		lda $01		                lda cp+1
.9445	e9 00		sbc #$00	                sbc #0
.9447	85 27		sta $27		                sta tmp2+1
.9449	a0 00		ldy #$00	                ldy #0
.944b	a9 a9		lda #$a9	                lda #$A9        ; opcode for LDA immediate
.944d	91 24		sta ($24),y	                sta (tmp1),y
.944f	c8		iny		                iny
.9450	a5 27		lda $27		                lda tmp2+1      ; MSB
.9452	91 24		sta ($24),y	                sta (tmp1),y
.9454	c8		iny		                iny
.9455	a9 48		lda #$48	                lda #$48        ; Opcode for PHA
.9457	91 24		sta ($24),y	                sta (tmp1),y
.9459	c8		iny		                iny
.945a	a9 a9		lda #$a9	                lda #$A9        ; opcode for LDA immediate
.945c	91 24		sta ($24),y	                sta (tmp1),y
.945e	c8		iny		                iny
.945f	a5 26		lda $26		                lda tmp2        ; LSB
.9461	91 24		sta ($24),y	                sta (tmp1),y
.9463	c8		iny		                iny
.9464	a9 48		lda #$48	                lda #$48        ; Opcode for PHA
.9466	91 24		sta ($24),y	                sta (tmp1),y
.9468					z_loop:
.9468	60		rts		z_plus_loop:    rts
.9469					plus_loop_runtime:
.9469	18		clc		                clc
.946a	68		pla		                pla             ; LSB of index
.946b	75 00		adc $00,x	                adc 0,x         ; LSB of step
.946d	a8		tay		                tay             ; temporary storage of LSB
.946e	b8		clv		                clv
.946f	68		pla		                pla             ; MSB of index
.9470	75 01		adc $01,x	                adc 1,x         ; MSB of step
.9472	48		pha		                pha             ; put MSB of index back on stack
.9473	98		tya		                tya             ; put LSB of index back on stack
.9474	48		pha		                pha
.9475	e8		inx		                inx             ; dump step from TOS
.9476	e8		inx		                inx
.9477	70 03		bvs $947c	                bvs _hack+3     ; skip over JMP instruction
.9479					_hack:
>9479	4c				                .byte $4C
.947a					plus_loop_runtime_end:
.947a					xt_lshift:
.947a	20 2e d8	jsr $d82e	                jsr underflow_2
.947d	b5 00		lda $00,x	                lda 0,x
.947f	29 0f		and #$0f	                and #%00001111
.9481	f0 08		beq $948b	                beq _done
.9483	a8		tay		                tay
.9484					_loop:
.9484	16 02		asl $02,x	                asl 2,x
.9486	36 03		rol $03,x	                rol 3,x
.9488	88		dey		                dey
.9489	d0 f9		bne $9484	                bne _loop
.948b					_done:
.948b	e8		inx		                inx
.948c	e8		inx		                inx
.948d	60		rts		z_lshift:       rts
.948e					xt_m_star:
.948e	20 2e d8	jsr $d82e	                jsr underflow_2
.9491	b5 01		lda $01,x	                lda 1,x         ; MSB of n1
.9493	55 03		eor $03,x	                eor 3,x         ; MSB of n2
.9495	48		pha		                pha
.9496	20 39 81	jsr $8139	                jsr xt_abs
.9499	20 a8 a1	jsr $a1a8	                jsr xt_swap
.949c	20 39 81	jsr $8139	                jsr xt_abs
.949f	20 f6 a5	jsr $a5f6	                jsr xt_um_star          ; ( d )
.94a2	68		pla		                pla
.94a3	10 03		bpl $94a8	                bpl _done
.94a5	20 41 8b	jsr $8b41	                jsr xt_dnegate
.94a8					_done:
.94a8	60		rts		z_m_star:       rts
.94a9					xt_marker:
.94a9	20 6b d7	jsr $d76b	                jsr current_to_dp
.94ac	a5 02		lda $02		                lda dp
.94ae	48		pha		                pha
.94af	a5 03		lda $03		                lda dp+1
.94b1	48		pha		                pha
.94b2	a5 00		lda $00		                lda cp
.94b4	48		pha		                pha
.94b5	a5 01		lda $01		                lda cp+1
.94b7	48		pha		                pha
.94b8	20 69 89	jsr $8969	                jsr xt_create
.94bb	a5 00		lda $00		                lda cp          ; LSB
.94bd	38		sec		                sec
.94be	e9 02		sbc #$02	                sbc #2
.94c0	85 00		sta $00		                sta cp
.94c2	a5 01		lda $01		                lda cp+1        ; MSB
.94c4	e9 00		sbc #$00	                sbc #0          ; we only care about the borrow
.94c6	85 01		sta $01		                sta cp+1
.94c8	a0 94		ldy #$94	                ldy #>marker_runtime
.94ca	a9 e7		lda #$e7	                lda #<marker_runtime
.94cc	20 d8 d6	jsr $d6d8	                jsr cmpl_word
.94cf	7a		ply		                ply                     ; MSB
.94d0	68		pla		                pla                     ; LSB
.94d1	20 d8 d6	jsr $d6d8	                jsr cmpl_word
.94d4	7a		ply		                ply                     ; MSB
.94d5	68		pla		                pla                     ; LSB
.94d6	20 d8 d6	jsr $d6d8	                jsr cmpl_word
.94d9	a0 04		ldy #$04	                ldy #4                  ; Start at CURRENT
.94db					_marker_loop:
.94db	b1 1e		lda ($1e),y	                lda (up),y
.94dd	20 dc d6	jsr $d6dc	                jsr cmpl_a
.94e0	c8		iny		                iny
.94e1	98		tya		                tya
.94e2	c9 28		cmp #$28	                cmp #40                 ; One past the end of the search order.
.94e4	d0 f5		bne $94db	                bne _marker_loop
.94e6	60		rts		z_marker:       rts
.94e7					marker_runtime:
.94e7	68		pla		                pla
.94e8	85 24		sta $24		                sta tmp1        ; LSB of address
.94ea	68		pla		                pla
.94eb	85 25		sta $25		                sta tmp1+1      ; MSB of address
.94ed	e6 24		inc $24		                inc tmp1
.94ef	d0 02		bne $94f3	                bne +
.94f1	e6 25		inc $25		                inc tmp1+1
.94f3					+
.94f3	a0 00		ldy #$00	                ldy #0
.94f5	b1 24		lda ($24),y	                lda (tmp1),y
.94f7	85 00		sta $00		                sta cp
.94f9	c8		iny		                iny
.94fa	b1 24		lda ($24),y	                lda (tmp1),y
.94fc	85 01		sta $01		                sta cp+1
.94fe	c8		iny		                iny
.94ff	b1 24		lda ($24),y	                lda (tmp1),y
.9501	85 02		sta $02		                sta dp
.9503	c8		iny		                iny
.9504	b1 24		lda ($24),y	                lda (tmp1),y
.9506	85 03		sta $03		                sta dp+1
.9508	a0 04		ldy #$04	                ldy #4
.950a					_marker_restore_loop:
.950a	b1 24		lda ($24),y	                lda (tmp1), y
.950c	91 1e		sta ($1e),y	                sta (up), y
.950e	c8		iny		                iny
.950f	98		tya		                tya
.9510	c9 28		cmp #$28	                cmp #40                 ; One past the end of the search order.
.9512	d0 f6		bne $950a	                bne _marker_restore_loop
.9514	20 7e d7	jsr $d77e	                jsr dp_to_current       ; Move the CURRENT DP back.
.9517	60		rts		                rts
.9518					xt_max:
.9518	20 2e d8	jsr $d82e	                jsr underflow_2
.951b	b5 00		lda $00,x	                lda 0,x         ; LSB of TOS
.951d	d5 02		cmp $02,x	                cmp 2,x         ; LSB of NOS, this sets the carry
.951f	b5 01		lda $01,x	                lda 1,x         ; MSB of TOS
.9521	f5 03		sbc $03,x	                sbc 3,x         ; MSB of NOS
.9523	50 02		bvc $9527	                bvc _no_overflow
.9525	49 80		eor #$80	                eor #$80        ; complement negative flag
.9527					_no_overflow:
.9527	30 08		bmi $9531	                bmi _keep_nos
.9529	b5 00		lda $00,x	                lda 0,x
.952b	95 02		sta $02,x	                sta 2,x
.952d	b5 01		lda $01,x	                lda 1,x
.952f	95 03		sta $03,x	                sta 3,x
.9531					_keep_nos:
.9531	e8		inx		                inx
.9532	e8		inx		                inx
.9533	60		rts		z_max:          rts
.9534					xt_min:
.9534	20 2e d8	jsr $d82e	                jsr underflow_2
.9537	b5 00		lda $00,x	                lda 0,x         ; LSB of TOS
.9539	d5 02		cmp $02,x	                cmp 2,x         ; LSB of NOS, this sets carry
.953b	b5 01		lda $01,x	                lda 1,x         ; MSB of TOS
.953d	f5 03		sbc $03,x	                sbc 3,x         ; MSB of NOS
.953f	50 02		bvc $9543	                bvc _no_overflow
.9541	49 80		eor #$80	                eor #$80
.9543					_no_overflow:
.9543	10 08		bpl $954d	                bpl _keep_nos
.9545	b5 00		lda $00,x	                lda 0,x
.9547	95 02		sta $02,x	                sta 2,x
.9549	b5 01		lda $01,x	                lda 1,x
.954b	95 03		sta $03,x	                sta 3,x
.954d					_keep_nos:
.954d	e8		inx		                inx
.954e	e8		inx		                inx
.954f	60		rts		z_min:          rts
.9550					xt_minus:
.9550	20 2e d8	jsr $d82e	                jsr underflow_2
.9553	38		sec		                sec
.9554	b5 02		lda $02,x	                lda 2,x         ; LSB
.9556	f5 00		sbc $00,x	                sbc 0,x
.9558	95 02		sta $02,x	                sta 2,x
.955a	b5 03		lda $03,x	                lda 3,x         ; MSB
.955c	f5 01		sbc $01,x	                sbc 1,x
.955e	95 03		sta $03,x	                sta 3,x
.9560	e8		inx		                inx
.9561	e8		inx		                inx
.9562	60		rts		z_minus:        rts
.9563					xt_minus_leading:
.9563	20 2e d8	jsr $d82e	                jsr underflow_2
.9566					_loop:
.9566	b5 00		lda $00,x	                lda 0,x
.9568	15 01		ora $01,x	                ora 1,x
.956a	f0 0f		beq $957b	                beq _done
.956c	a1 02		lda ($02,x)	                lda (2,x)               ; get first character
.956e	20 1c d8	jsr $d81c	                jsr is_whitespace
.9571	90 08		bcc $957b	                bcc _done
.9573	20 08 98	jsr $9808	                jsr xt_one              ; ( addr u 1 )
.9576	20 19 a0	jsr $a019	                jsr xt_slash_string     ; ( addr+ u-1 )
.9579	80 eb		bra $9566	                bra _loop
.957b					_done:
.957b					z_minus_leading:
.957b	60		rts		                rts
.957c					xt_minus_trailing:
.957c	20 2e d8	jsr $d82e	                jsr underflow_2
.957f	b5 00		lda $00,x	                lda 0,x         ; LSB of n
.9581	15 01		ora $01,x	                ora 1,x         ; MSB of n
.9583	f0 33		beq $95b8	                beq _done
.9585	18		clc		                clc
.9586	b5 02		lda $02,x	                lda 2,x         ; LSB of addr
.9588	75 00		adc $00,x	                adc 0,x
.958a	85 24		sta $24		                sta tmp1
.958c	b5 03		lda $03,x	                lda 3,x         ; MSB of addr
.958e	75 01		adc $01,x	                adc 1,x
.9590	85 25		sta $25		                sta tmp1+1
.9592	a5 24		lda $24		                lda tmp1
.9594	d0 02		bne $9598	                bne +
.9596	c6 25		dec $25		                dec tmp1+1
.9598					+
.9598	c6 24		dec $24		                dec tmp1
.959a					_loop:
.959a	b2 24		lda ($24)	                lda (tmp1)
.959c	c9 20		cmp #$20	                cmp #AscSP
.959e	d0 18		bne $95b8	                bne _done
.95a0	a5 24		lda $24		                lda tmp1
.95a2	d0 02		bne $95a6	                bne +
.95a4	c6 25		dec $25		                dec tmp1+1
.95a6					+
.95a6	c6 24		dec $24		                dec tmp1
.95a8	b5 00		lda $00,x	                lda 0,x
.95aa	d0 02		bne $95ae	                bne +
.95ac	d6 01		dec $01,x	                dec 1,x
.95ae					+
.95ae	d6 00		dec $00,x	                dec 0,x
.95b0	b5 00		lda $00,x	                lda 0,x
.95b2	15 01		ora $01,x	                ora 1,x
.95b4	f0 02		beq $95b8	                beq _done       ; Count has reached zero - we're done!
.95b6	80 e2		bra $959a	                bra _loop
.95b8					_done:
.95b8					z_minus_trailing:
.95b8	60		rts		                rts
.95b9					xt_mod:
.95b9	20 2e d8	jsr $d82e	                jsr underflow_2
.95bc	20 01 a0	jsr $a001	                jsr xt_slash_mod
.95bf	e8		inx		                inx             ; DROP
.95c0	e8		inx		                inx
.95c1					z_mod:
.95c1	60		rts		                rts
.95c2					xt_move:
.95c2	b5 03		lda $03,x	                lda 3,x                 ; MSB of addr2
.95c4	d5 05		cmp $05,x	                cmp 5,x                 ; MSB of addr1
.95c6	f0 05		beq $95cd	                beq _lsb                ; wasn't helpful, move to LSB
.95c8	b0 0e		bcs $95d8	                bcs _to_move_up         ; we want CMOVE>
.95ca	4c 99 86	jmp $8699	                jmp xt_cmove            ; JSR/RTS
.95cd					_lsb:
.95cd	b5 02		lda $02,x	                lda 2,x                 ; LSB of addr2
.95cf	d5 04		cmp $04,x	                cmp 4,x                 ; LSB of addr1
.95d1	f0 08		beq $95db	                beq _equal              ; LSB is equal as well
.95d3	b0 03		bcs $95d8	                bcs _to_move_up         ; we want CMOVE>
.95d5	4c 99 86	jmp $8699	                jmp xt_cmove            ; JSR/RTS
.95d8					_to_move_up:
.95d8	4c d4 86	jmp $86d4	                jmp xt_cmove_up         ; JSR/RTS
.95db					_equal:
.95db	8a		txa		                txa
.95dc	18		clc		                clc
.95dd	69 06		adc #$06	                adc #6
.95df	aa		tax		                tax
.95e0	60		rts		z_move:         rts
.95e1					xt_name_to_int:
.95e1	20 29 d8	jsr $d829	                jsr underflow_1
.95e4	b5 00		lda $00,x	                lda 0,x
.95e6	18		clc		                clc
.95e7	69 04		adc #$04	                adc #4
.95e9	85 28		sta $28		                sta tmp3
.95eb	b5 01		lda $01,x	                lda 1,x
.95ed	90 01		bcc $95f0	                bcc _done
.95ef	1a		inc a		                ina
.95f0					_done:
.95f0	85 29		sta $29		                sta tmp3+1
.95f2	a0 00		ldy #$00	                ldy #0
.95f4	b1 28		lda ($28),y	                lda (tmp3),y
.95f6	95 00		sta $00,x	                sta 0,x
.95f8	c8		iny		                iny
.95f9	b1 28		lda ($28),y	                lda (tmp3),y
.95fb	95 01		sta $01,x	                sta 1,x
.95fd	60		rts		z_name_to_int:  rts
.95fe					xt_name_to_string:
.95fe	20 29 d8	jsr $d829	                jsr underflow_1
.9601	ca		dex		                dex
.9602	ca		dex		                dex
.9603	a1 02		lda ($02,x)	                lda (2,x)
.9605	95 00		sta $00,x	                sta 0,x
.9607	74 01		stz $01,x	                stz 1,x
.9609	b5 02		lda $02,x	                lda 2,x         ; LSB
.960b	18		clc		                clc
.960c	69 08		adc #$08	                adc #8
.960e	a8		tay		                tay
.960f	b5 03		lda $03,x	                lda 3,x         ; MSB
.9611	69 00		adc #$00	                adc #0          ; just need carry
.9613	95 03		sta $03,x	                sta 3,x
.9615	94 02		sty $02,x	                sty 2,x
.9617					z_name_to_string:
.9617	60		rts		                rts
.9618					xt_nc_limit:
.9618	ca		dex		                dex
.9619	ca		dex		                dex
.961a	a9 1a		lda #$1a	                lda #<nc_limit
.961c	95 00		sta $00,x	                sta 0,x
.961e	a9 00		lda #$00	                lda #>nc_limit
.9620	95 01		sta $01,x	                sta 1,x
.9622	60		rts		z_nc_limit:     rts
.9623					xt_negate:
.9623	20 29 d8	jsr $d829	                jsr underflow_1
.9626	a9 00		lda #$00	        	lda #0
.9628	38		sec		                sec
.9629	f5 00		sbc $00,x	                sbc 0,x         ; LSB
.962b	95 00		sta $00,x	                sta 0,x
.962d	a9 00		lda #$00	                lda #0
.962f	f5 01		sbc $01,x	                sbc 1,x         ; MSB
.9631	95 01		sta $01,x	                sta 1,x
.9633	60		rts		z_negate:       rts
.9634					xt_never_native:
.9634	20 6b d7	jsr $d76b	                jsr current_to_dp
.9637	a0 01		ldy #$01	                ldy #1          ; offset for status byte
.9639	b1 02		lda ($02),y	                lda (dp),y
.963b	09 08		ora #$08	                ora #NN         ; Make sure NN flag is set
.963d	29 fd		and #$fd	                and #$ff-AN     ; and AN flag is clear.
.963f	91 02		sta ($02),y	                sta (dp),y
.9641					z_never_native:
.9641	60		rts		                rts
.9642					xt_nip:
.9642	20 2e d8	jsr $d82e	                jsr underflow_2
.9645	b5 00		lda $00,x	                lda 0,x         ; LSB
.9647	95 02		sta $02,x	                sta 2,x
.9649	b5 01		lda $01,x	                lda 1,x         ; MSB
.964b	95 03		sta $03,x	                sta 3,x
.964d	e8		inx		                inx
.964e	e8		inx		                inx
.964f	60		rts		z_nip:          rts
.9650					xt_not_equals:
.9650	20 2e d8	jsr $d82e	                jsr underflow_2
.9653	a0 00		ldy #$00	                ldy #0                  ; default is true
.9655	b5 00		lda $00,x	                lda 0,x                 ; LSB
.9657	d5 02		cmp $02,x	                cmp 2,x
.9659	d0 0a		bne $9665	                bne _not_equal
.965b	b5 01		lda $01,x	                lda 1,x                 ; MSB
.965d	d5 03		cmp $03,x	                cmp 3,x
.965f	d0 04		bne $9665	                bne _not_equal
.9661	a9 ff		lda #$ff	                lda #$FF
.9663	80 01		bra $9666	                bra _done
.9665					_not_equal:
.9665	88		dey		                dey                     ; drop thru to done
.9666					_done:
.9666	98		tya		                tya
.9667	e8		inx		                inx
.9668	e8		inx		                inx
.9669	95 00		sta $00,x	                sta 0,x
.966b	95 01		sta $01,x	                sta 1,x
.966d	60		rts		z_not_equals:   rts
.966e					xt_not_rote:
.966e	20 33 d8	jsr $d833	                jsr underflow_3
.9671	b4 01		ldy $01,x	                ldy 1,x         ; MSB first
.9673	b5 03		lda $03,x	                lda 3,x
.9675	95 01		sta $01,x	                sta 1,x
.9677	b5 05		lda $05,x	                lda 5,x
.9679	95 03		sta $03,x	                sta 3,x
.967b	94 05		sty $05,x	                sty 5,x
.967d	b4 00		ldy $00,x	                ldy 0,x         ; LSB second
.967f	b5 02		lda $02,x	                lda 2,x
.9681	95 00		sta $00,x	                sta 0,x
.9683	b5 04		lda $04,x	                lda 4,x
.9685	95 02		sta $02,x	                sta 2,x
.9687	94 04		sty $04,x	                sty 4,x
.9689	60		rts		z_not_rote:     rts
.968a					xt_number:
.968a	20 2e d8	jsr $d82e	                jsr underflow_2
.968d	64 2a		stz $2a		                stz tmpdsp      ; flag for double
.968f	64 2b		stz $2b		                stz tmpdsp+1    ; flag for minus
.9691	a5 18		lda $18		                lda base
.9693	48		pha		                pha
.9694	20 b2 a3	jsr $a3b2	                jsr xt_two_dup
.9697	a1 02		lda ($02,x)	                lda (2,x)
.9699					_check_dec:
.9699	c9 23		cmp #$23	                cmp #$23        ; ASCII for "#"
.969b	d0 04		bne $96a1	                bne _check_hex
.969d	a9 0a		lda #$0a	                lda #$0A
.969f	80 42		bra $96e3	                bra _base_changed
.96a1					_check_hex:
.96a1	c9 24		cmp #$24	                cmp #$24        ; ASCII for "$"
.96a3	d0 04		bne $96a9	                bne _check_binary
.96a5	a9 10		lda #$10	                lda #$10
.96a7	80 3a		bra $96e3	                bra _base_changed
.96a9					_check_binary:
.96a9	c9 25		cmp #$25	                cmp #$25        ; ASCII for "%"
.96ab	d0 04		bne $96b1	                bne _check_char
.96ad	a9 02		lda #$02	                lda #$02
.96af	80 32		bra $96e3	                bra _base_changed
.96b1					_check_char:
.96b1	c9 27		cmp #$27	                cmp #$27        ; ASCII for "'"
.96b3	d0 3a		bne $96ef	                bne _check_minus
.96b5	b5 00		lda $00,x	                lda 0,x         ; Get the length
.96b7	c9 03		cmp #$03	                cmp #$03
.96b9	d0 26		bne $96e1	                bne _not_a_char
.96bb	b5 01		lda $01,x	                lda 1,x
.96bd	d0 22		bne $96e1	                bne _not_a_char ; No compare needed to check for non-zero.
.96bf	b5 02		lda $02,x	                lda 2,x         ; LSB of address
.96c1	18		clc		                clc
.96c2	69 02		adc #$02	                adc #2          ; length of string
.96c4	85 2c		sta $2c		                sta tmptos
.96c6	b5 03		lda $03,x	                lda 3,x
.96c8	69 00		adc #$00	                adc #0          ; only need carry
.96ca	85 2d		sta $2d		                sta tmptos+1
.96cc	b2 2c		lda ($2c)	                lda (tmptos)
.96ce	c9 27		cmp #$27	                cmp #$27        ; ASCII for "'"
.96d0	d0 0f		bne $96e1	                bne _not_a_char
.96d2	f6 02		inc $02,x	                inc 2,x
.96d4	d0 02		bne $96d8	                bne +
.96d6	f6 03		inc $03,x	                inc 3,x
.96d8					+
.96d8	a1 02		lda ($02,x)	                lda (2,x)
.96da	95 02		sta $02,x	                sta 2,x
.96dc	74 03		stz $03,x	                stz 3,x
.96de	4c 5f 97	jmp $975f	                jmp _drop_original_string ; Single flag will drop the TOS for us.
.96e1					_not_a_char:
.96e1	80 5a		bra $973d	                bra _number_error
.96e3					_base_changed:
.96e3	85 18		sta $18		                sta base        ; Switch to the new base
.96e5	f6 02		inc $02,x	                inc 2,x         ; start one character later
.96e7	d0 02		bne $96eb	                bne +
.96e9	f6 03		inc $03,x	                inc 3,x
.96eb					+
.96eb	d6 00		dec $00,x	                dec 0,x         ; decrease string length by one
.96ed	a1 02		lda ($02,x)	                lda (2,x)       ; Load the first char again
.96ef					_check_minus:
.96ef	c9 2d		cmp #$2d	                cmp #$2D        ; ASCII for "-"
.96f1	d0 0a		bne $96fd	                bne _check_dot
.96f3	c6 2b		dec $2b		                dec tmpdsp+1
.96f5	f6 02		inc $02,x	                inc 2,x         ; start one character later
.96f7	d0 02		bne $96fb	                bne +
.96f9	f6 03		inc $03,x	                inc 3,x
.96fb					+
.96fb	d6 00		dec $00,x	                dec 0,x         ; decrease string length by one
.96fd					_check_dot:
.96fd	b5 02		lda $02,x	                lda 2,x         ; LSB of address
.96ff	18		clc		                clc
.9700	75 00		adc $00,x	                adc 0,x         ; length of string
.9702	85 2c		sta $2c		                sta tmptos
.9704	b5 03		lda $03,x	                lda 3,x
.9706	69 00		adc #$00	                adc #0          ; only need carry
.9708	85 2d		sta $2d		                sta tmptos+1
.970a	a5 2c		lda $2c		                lda tmptos
.970c	d0 02		bne $9710	                bne +
.970e	c6 2d		dec $2d		                dec tmptos+1
.9710					+
.9710	c6 2c		dec $2c		                dec tmptos
.9712	b2 2c		lda ($2c)	                lda (tmptos)
.9714	c9 2e		cmp #$2e	                cmp #'.'
.9716	d0 04		bne $971c	                bne _main
.9718	c6 2a		dec $2a		                dec tmpdsp
.971a	d6 00		dec $00,x	                dec 0,x
.971c					_main:
.971c	ca		dex		                dex
.971d	ca		dex		                dex
.971e	ca		dex		                dex
.971f	ca		dex		                dex
.9720	b5 04		lda $04,x	                lda 4,x         ; LSB of length
.9722	95 00		sta $00,x	                sta 0,x
.9724	74 01		stz $01,x	                stz 1,x         ; MSB, max length 255 chars
.9726	b5 06		lda $06,x	                lda 6,x         ; LSB of address
.9728	95 02		sta $02,x	                sta 2,x
.972a	b5 07		lda $07,x	                lda 7,x         ; MSB of address
.972c	95 03		sta $03,x	                sta 3,x
.972e	74 04		stz $04,x	                stz 4,x         ; clear space for ud
.9730	74 05		stz $05,x	                stz 5,x
.9732	74 06		stz $06,x	                stz 6,x
.9734	74 07		stz $07,x	                stz 7,x
.9736	20 b7 a2	jsr $a2b7	                jsr xt_to_number        ; (ud addr u -- ud addr u )
.9739	b5 00		lda $00,x	                lda 0,x
.973b	f0 1e		beq $975b	                beq _all_converted
.973d					_number_error:
.973d	20 aa a3	jsr $a3aa	                jsr xt_two_drop ; >NUMBER modified addr u
.9740	20 aa a3	jsr $a3aa	                jsr xt_two_drop ; ud   (partially converted number)
.9743	a9 3e		lda #$3e	                lda #$3E        ; ASCII for ">"
.9745	20 f6 8d	jsr $8df6	                jsr emit_a
.9748	20 fd a4	jsr $a4fd	                jsr xt_type
.974b	a9 3c		lda #$3c	                lda #$3C        ; ASCII for "<"
.974d	20 f6 8d	jsr $8df6	                jsr emit_a
.9750	20 1e a1	jsr $a11e	                jsr xt_space
.9753	68		pla		                pla
.9754	85 18		sta $18		                sta base
.9756	a9 08		lda #$08	                lda #err_syntax
.9758	4c 3f d8	jmp $d83f	                jmp error
.975b					_all_converted:
.975b	e8		inx		                inx ; Drop the current addr u
.975c	e8		inx		                inx
.975d	e8		inx		                inx
.975e	e8		inx		                inx
.975f					_drop_original_string:
.975f	20 78 a4	jsr $a478	                jsr xt_two_swap  ; Drop the original addr u
.9762	20 aa a3	jsr $a3aa	                jsr xt_two_drop  ; (was saved for unknown word error message)
.9765	a5 2a		lda $2a		                lda tmpdsp      ; flag for double
.9767	f0 0d		beq $9776	                beq _single
.9769	a9 20		lda #$20	                lda #%00100000
.976b	04 20		tsb $20		                tsb status
.976d	a5 2b		lda $2b		                lda tmpdsp+1
.976f	f0 12		beq $9783	                beq _done       ; no minus, all done
.9771	20 41 8b	jsr $8b41	                jsr xt_dnegate
.9774	80 0d		bra $9783	                bra _done
.9776					_single:
.9776	e8		inx		                inx
.9777	e8		inx		                inx
.9778	a9 20		lda #$20	                lda #%00100000
.977a	14 20		trb $20		                trb status
.977c	a5 2b		lda $2b		                lda tmpdsp+1
.977e	f0 03		beq $9783	                beq _done       ; no minus, all done
.9780	20 23 96	jsr $9623	                jsr xt_negate
.9783					_done:
.9783	68		pla		                pla
.9784	85 18		sta $18		                sta base
.9786	60		rts		z_number:       rts
.9787					xt_number_sign:
.9787	20 2e d8	jsr $d82e	                jsr underflow_2         ; double number
.978a	20 87 83	jsr $8387	                jsr xt_base
.978d	20 80 8f	jsr $8f80	                jsr xt_fetch            ; ( ud1 base )
.9790	20 6a a3	jsr $a36a	                jsr xt_to_r             ; >r
.9793	20 a2 a7	jsr $a7a2	                jsr xt_zero             ; 0
.9796	20 7d 9a	jsr $9a7d	                jsr xt_r_fetch          ; r@
.9799	20 b4 a5	jsr $a5b4	                jsr xt_um_slash_mod     ; um/mod
.979c	20 57 9b	jsr $9b57	                jsr xt_rot              ; rot
.979f	20 57 9b	jsr $9b57	                jsr xt_rot              ; rot
.97a2	20 92 9a	jsr $9a92	                jsr xt_r_from           ; r>
.97a5	20 b4 a5	jsr $a5b4	                jsr xt_um_slash_mod     ; um/mod
.97a8	20 57 9b	jsr $9b57	                jsr xt_rot              ; rot
.97ab	20 57 9b	jsr $9b57	                jsr xt_rot              ; ( ud rem )
.97ae	b5 00		lda $00,x	                lda 0,x
.97b0	a8		tay		                tay
.97b1	b9 1d d4	lda $d41d,y	                lda s_abc_upper,y
.97b4	95 00		sta $00,x	                sta 0,x
.97b6	74 01		stz $01,x	                stz 1,x                 ; paranoid; now ( ud char )
.97b8	20 d7 91	jsr $91d7	                jsr xt_hold
.97bb					z_number_sign:
.97bb	60		rts		                rts
.97bc					xt_number_sign_greater:
.97bc	20 2e d8	jsr $d82e	                jsr underflow_2         ; double number
.97bf	a5 34		lda $34		                lda tohold
.97c1	95 00		sta $00,x	                sta 0,x         ; LSB of tohold
.97c3	95 02		sta $02,x	                sta 2,x
.97c5	a5 35		lda $35		                lda tohold+1
.97c7	95 01		sta $01,x	                sta 1,x         ; MSB of addr
.97c9	95 03		sta $03,x	                sta 3,x         ; ( addr addr )
.97cb	20 a1 98	jsr $98a1	                jsr xt_pad      ; ( addr addr pad )
.97ce	38		sec		                sec
.97cf	b5 00		lda $00,x	                lda 0,x         ; LSB of pad address
.97d1	f5 02		sbc $02,x	                sbc 2,x
.97d3	95 02		sta $02,x	                sta 2,x
.97d5	b5 01		lda $01,x	                lda 1,x         ; MSB, which should always be zero
.97d7	f5 03		sbc $03,x	                sbc 3,x
.97d9	95 03		sta $03,x	                sta 3,x         ; ( addr u pad )
.97db	e8		inx		                inx
.97dc	e8		inx		                inx
.97dd					z_number_sign_greater:
.97dd	60		rts		                rts
.97de					xt_number_sign_s:
.97de	20 2e d8	jsr $d82e	                jsr underflow_2
.97e1					_loop:
.97e1	20 87 97	jsr $9787	                jsr xt_number_sign
.97e4	b5 00		lda $00,x	                lda 0,x
.97e6	15 01		ora $01,x	                ora 1,x
.97e8	15 02		ora $02,x	                ora 2,x
.97ea	15 03		ora $03,x	                ora 3,x
.97ec	d0 f3		bne $97e1	                bne _loop
.97ee					z_number_sign_s:
.97ee	60		rts		                rts
.97ef					xt_of:
.97ef	a0 98		ldy #$98	                ldy #>xt_over
.97f1	a9 93		lda #$93	                lda #<xt_over
.97f3	20 cc d6	jsr $d6cc	                jsr cmpl_subroutine
.97f6	a0 8e		ldy #$8e	                ldy #>xt_equal
.97f8	a9 ce		lda #$ce	                lda #<xt_equal
.97fa	20 cc d6	jsr $d6cc	                jsr cmpl_subroutine
.97fd	20 03 92	jsr $9203	                jsr xt_if
.9800	a0 8d		ldy #$8d	                ldy #>xt_drop
.9802	a9 2e		lda #$2e	                lda #<xt_drop
.9804	20 cc d6	jsr $d6cc	                jsr cmpl_subroutine
.9807	60		rts		z_of:           rts
.9808					xt_editor_wordlist:
.9808					xt_one:
.9808	ca		dex		                dex
.9809	ca		dex		                dex
.980a	a9 01		lda #$01	                lda #1
.980c	95 00		sta $00,x	                sta 0,x
.980e	74 01		stz $01,x	                stz 1,x
.9810					z_editor_wordlist:
.9810					z_one:
.9810	60		rts		                rts
.9811					xt_one_minus:
.9811	20 29 d8	jsr $d829	                jsr underflow_1
.9814	b5 00		lda $00,x	                lda 0,x
.9816	d0 02		bne $981a	                bne +
.9818	d6 01		dec $01,x	                dec 1,x
.981a					+
.981a	d6 00		dec $00,x	                dec 0,x
.981c	60		rts		z_one_minus:    rts
.981d					xt_char_plus:
.981d					xt_one_plus:
.981d	20 29 d8	jsr $d829	                jsr underflow_1
.9820	f6 00		inc $00,x	                inc 0,x
.9822	d0 02		bne $9826	                bne _done
.9824	f6 01		inc $01,x	                inc 1,x
.9826					_done:
.9826					z_char_plus:
.9826	60		rts		z_one_plus:     rts
.9827					xt_only:
.9827	ca		dex		                dex
.9828	ca		dex		                dex
.9829	a9 ff		lda #$ff	                lda #$FF
.982b	95 00		sta $00,x	                sta 0,x
.982d	95 01		sta $01,x	                sta 1,x
.982f	20 1b 9d	jsr $9d1b	                jsr xt_set_order
.9832	60		rts		z_only:         rts
.9833					xt_or:
.9833	20 2e d8	jsr $d82e	                jsr underflow_2
.9836	b5 00		lda $00,x	                lda 0,x
.9838	15 02		ora $02,x	                ora 2,x
.983a	95 02		sta $02,x	                sta 2,x
.983c	b5 01		lda $01,x	                lda 1,x
.983e	15 03		ora $03,x	                ora 3,x
.9840	95 03		sta $03,x	                sta 3,x
.9842	e8		inx		                inx
.9843	e8		inx		                inx
.9844	60		rts		z_or:           rts
.9845					xt_order:
.9845	20 63 89	jsr $8963	                jsr xt_cr
.9848	20 34 91	jsr $9134	                jsr xt_get_order        ; ( wid_n ... wid_1 n )
.984b	b5 00		lda $00,x	                lda 0,x                 ; assumes no more than 255 wordlists
.984d	f0 1e		beq $986d	                beq _drop_done
.984f					_have_wordlists:
.984f	a8		tay		                tay
.9850					_loop:
.9850	e8		inx		                inx
.9851	e8		inx		                inx                     ; DROP, now ( wid_n ... wid_1 )
.9852	b5 00		lda $00,x	                lda 0,x
.9854	5a		phy		                phy
.9855	20 70 98	jsr $9870	                jsr order_print_wid_string   ; internal helper function
.9858	7a		ply		                ply
.9859	88		dey		                dey
.985a	d0 f4		bne $9850	                bne _loop
.985c	20 1e a1	jsr $a11e	                jsr xt_space
.985f	20 1e a1	jsr $a11e	                jsr xt_space
.9862	20 29 91	jsr $9129	                jsr xt_get_current      ; ( wid )
.9865	b5 00		lda $00,x	                lda 0,x
.9867	20 70 98	jsr $9870	                jsr order_print_wid_string
.986a	20 63 89	jsr $8963	                jsr xt_cr
.986d					_drop_done:
.986d	e8		inx		                inx
.986e	e8		inx		                inx
.986f					z_order:
.986f	60		rts		                rts
.9870					order_print_wid_string:
.9870	c9 04		cmp #$04	                cmp #4
.9872	90 09		bcc $987d	                bcc _output_string      ; less than 4, print a real string
.9874	ca		dex		                dex
.9875	ca		dex		                dex
.9876	95 00		sta $00,x	                sta 0,x
.9878	74 01		stz $01,x	                stz 1,x
.987a	4c 28 a5	jmp $a528	                jmp xt_u_dot            ; JSR/RTS as this routine is not compiled
.987d					_output_string:
.987d	a8		tay		                tay
.987e	b9 84 98	lda $9884,y	                lda _wid_data,y
.9881	4c 55 d8	jmp $d855	                jmp print_string_no_lf  ; JSR/RTS as this routine is not compiled
.9884					_wid_data:
>9884	03				        .byte str_wid_forth            ; WID 0: "Forth"
>9885	06				        .byte str_wid_editor           ; WID 1: "Editor"
>9886	07				        .byte str_wid_assembler        ; WID 2: "Assembler"
>9887	08				        .byte str_wid_root             ; WID 3: "Root"
.9888					xt_output:
.9888	ca		dex		                dex
.9889	ca		dex		                dex
.988a	a9 10		lda #$10	                lda #<output
.988c	95 00		sta $00,x	                sta 0,x
.988e	a9 00		lda #$00	                lda #>output
.9890	95 01		sta $01,x	                sta 1,x
.9892	60		rts		z_output:       rts
.9893					xt_over:
.9893	20 2e d8	jsr $d82e	                jsr underflow_2
.9896	ca		dex		                dex
.9897	ca		dex		                dex
.9898	b5 04		lda $04,x	                lda 4,x         ; LSB
.989a	95 00		sta $00,x	                sta 0,x
.989c	b5 05		lda $05,x	                lda 5,x         ; MSB
.989e	95 01		sta $01,x	                sta 1,x
.98a0	60		rts		z_over:         rts
.98a1					xt_pad:
.98a1	ca		dex		                dex
.98a2	ca		dex		                dex
.98a3	a5 00		lda $00		                lda cp
.98a5	18		clc		                clc
.98a6	69 ff		adc #$ff	                adc #padoffset  ; assumes padoffset one byte in size
.98a8	95 00		sta $00,x	                sta 0,x
.98aa	a5 01		lda $01		                lda cp+1
.98ac	69 00		adc #$00	                adc #0          ; only need carry
.98ae	95 01		sta $01,x	                sta 1,x
.98b0	60		rts		z_pad:          rts
.98b1					xt_page:
.98b1	a9 1b		lda #$1b	                lda #AscESC
.98b3	20 f6 8d	jsr $8df6	                jsr emit_a
.98b6	a9 5b		lda #$5b	                lda #$5B        ; ASCII for "["
.98b8	20 f6 8d	jsr $8df6	                jsr emit_a
.98bb	a9 32		lda #$32	                lda #'2'
.98bd	20 f6 8d	jsr $8df6	                jsr emit_a
.98c0	a9 4a		lda #$4a	                lda #'J'
.98c2	20 f6 8d	jsr $8df6	                jsr emit_a
.98c5	20 a2 a7	jsr $a7a2	                jsr xt_zero
.98c8	20 a2 a7	jsr $a7a2	                jsr xt_zero
.98cb	20 50 83	jsr $8350	                jsr xt_at_xy
.98ce	60		rts		z_page:         rts
.98cf					xt_paren:
.98cf	ca		dex		                dex
.98d0	ca		dex		                dex
.98d1	a9 29		lda #$29	                lda #41     ; Right parenthesis
.98d3	95 00		sta $00,x	                sta 0,x
.98d5	74 01		stz $01,x	                stz 1,x
.98d7	20 3a 99	jsr $993a	                jsr xt_parse
.98da	e8		inx		                inx
.98db	e8		inx		                inx
.98dc	e8		inx		                inx
.98dd	e8		inx		                inx
.98de	60		rts		z_paren:        rts
.98df					xt_parse_name:
.98df	a5 0a		lda $0a		                lda ciblen              ; LSB of counter
.98e1	38		sec		                sec
.98e2	e5 0c		sbc $0c		                sbc toin
.98e4	85 24		sta $24		                sta tmp1
.98e6	a5 0b		lda $0b		                lda ciblen+1            ; MSB
.98e8	e5 0d		sbc $0d		                sbc toin+1
.98ea	85 25		sta $25		                sta tmp1+1
.98ec	a5 24		lda $24		                lda tmp1
.98ee	05 25		ora $25		                ora tmp1+1
.98f0	f0 28		beq $991a	                beq _empty_line
.98f2	a5 08		lda $08		                lda cib
.98f4	18		clc		                clc
.98f5	65 0c		adc $0c		                adc toin
.98f7	85 26		sta $26		                sta tmp2                ; LSB of first character
.98f9	a5 09		lda $09		                lda cib+1
.98fb	65 0d		adc $0d		                adc toin+1
.98fd	85 27		sta $27		                sta tmp2+1              ; MSB
.98ff					_skip_loop:
.98ff	b2 26		lda ($26)	                lda (tmp2)              ; work copy of cib
.9901	20 1c d8	jsr $d81c	                jsr is_whitespace
.9904	90 1f		bcc $9925	                bcc _char_found
.9906	e6 26		inc $26		                inc tmp2
.9908	d0 02		bne $990c	                bne +
.990a	e6 27		inc $27		                inc tmp2+1
.990c					+
.990c	a5 24		lda $24		                lda tmp1
.990e	d0 02		bne $9912	                bne +
.9910	c6 25		dec $25		                dec tmp1+1
.9912	c6 24		dec $24		+               dec tmp1
.9914	a5 24		lda $24		                lda tmp1
.9916	05 25		ora $25		                ora tmp1+1
.9918	d0 e5		bne $98ff	                bne _skip_loop          ; fall through if empty line
.991a					_empty_line:
.991a	ca		dex		                dex
.991b	ca		dex		                dex
.991c	ca		dex		                dex
.991d	ca		dex		                dex
.991e	74 00		stz $00,x	                stz 0,x                 ; TOS is zero
.9920	74 01		stz $01,x	                stz 1,x
.9922	4c d1 99	jmp $99d1	                jmp z_parse_name        ; skip over PARSE
.9925					_char_found:
.9925	a5 26		lda $26		                lda tmp2
.9927	38		sec		                sec
.9928	e5 08		sbc $08		                sbc cib
.992a	85 0c		sta $0c		                sta toin
.992c	a5 27		lda $27		                lda tmp2+1
.992e	e5 09		sbc $09		                sbc cib+1
.9930	85 0d		sta $0d		                sta toin+1
.9932	ca		dex		                dex
.9933	ca		dex		                dex
.9934	a9 20		lda #$20	                lda #AscSP
.9936	95 00		sta $00,x	                sta 0,x
.9938	74 01		stz $01,x	                stz 1,x                 ; paranoid, now ( "name" c )
.993a					xt_parse:
.993a	20 29 d8	jsr $d829	                jsr underflow_1
.993d	a5 0a		lda $0a		                lda ciblen
.993f	05 0b		ora $0b		                ora ciblen+1
.9941	f0 0c		beq $994f	                beq _abort_parse
.9943	a5 0d		lda $0d		                lda toin+1              ; MSB
.9945	c5 0b		cmp $0b		                cmp ciblen+1
.9947	90 0e		bcc $9957	                bcc _go_parse           ; unsigned comparison
.9949	a5 0c		lda $0c		                lda toin                ; LSB
.994b	c5 0a		cmp $0a		                cmp ciblen
.994d	90 08		bcc $9957	                bcc _go_parse
.994f					_abort_parse:
.994f	ca		dex		                dex
.9950	ca		dex		                dex
.9951	74 00		stz $00,x	                stz 0,x
.9953	74 01		stz $01,x	                stz 1,x
.9955	80 7a		bra $99d1	                bra _done
.9957					_go_parse:
.9957	b5 00		lda $00,x	                lda 0,x
.9959	85 2c		sta $2c		                sta tmptos
.995b	ca		dex		                dex
.995c	ca		dex		                dex
.995d	a5 08		lda $08		                lda cib
.995f	18		clc		                clc
.9960	65 0c		adc $0c		                adc toin        ; LSB
.9962	85 24		sta $24		                sta tmp1
.9964	85 26		sta $26		                sta tmp2
.9966	95 02		sta $02,x	                sta 2,x
.9968	a5 09		lda $09		                lda cib+1
.996a	65 0d		adc $0d		                adc toin+1      ; MSB
.996c	85 25		sta $25		                sta tmp1+1
.996e	85 27		sta $27		                sta tmp2+1
.9970	95 03		sta $03,x	                sta 3,x
.9972	a5 08		lda $08		                lda cib
.9974	18		clc		                clc
.9975	65 0a		adc $0a		                adc ciblen
.9977	85 28		sta $28		                sta tmp3
.9979	a5 09		lda $09		                lda cib+1
.997b	65 0b		adc $0b		                adc ciblen+1
.997d	85 29		sta $29		                sta tmp3+1
.997f	64 2d		stz $2d		                stz tmptos+1
.9981					_loop:
.9981	a5 26		lda $26		                lda tmp2
.9983	c5 28		cmp $28		                cmp tmp3
.9985	d0 06		bne $998d	                bne _not_empty
.9987	a5 27		lda $27		                lda tmp2+1
.9989	c5 29		cmp $29		                cmp tmp3+1
.998b	f0 1d		beq $99aa	                beq _eol
.998d					_not_empty:
.998d	b2 26		lda ($26)	                lda (tmp2)
.998f	a4 2c		ldy $2c		                ldy tmptos
.9991	c0 20		cpy #$20	                cpy #AscSP
.9993	d0 07		bne $999c	                bne _not_whitespace
.9995	20 1c d8	jsr $d81c	                jsr is_whitespace
.9998	90 02		bcc $999c	                bcc _not_whitespace
.999a	80 0c		bra $99a8	                bra _found_delimiter
.999c					_not_whitespace:
.999c	c5 2c		cmp $2c		                cmp tmptos
.999e	f0 08		beq $99a8	                beq _found_delimiter
.99a0	e6 26		inc $26		                inc tmp2
.99a2	d0 dd		bne $9981	                bne _loop
.99a4	e6 27		inc $27		                inc tmp2+1
.99a6	80 d9		bra $9981	                bra _loop
.99a8					_found_delimiter:
.99a8	e6 2d		inc $2d		                inc tmptos+1
.99aa					_eol:
.99aa	a5 26		lda $26		                lda tmp2
.99ac	38		sec		                sec
.99ad	e5 24		sbc $24		                sbc tmp1
.99af	95 00		sta $00,x	                sta 0,x
.99b1	a5 27		lda $27		                lda tmp2+1
.99b3	e5 25		sbc $25		                sbc tmp1+1
.99b5	95 01		sta $01,x	                sta 1,x
.99b7	a5 26		lda $26		                lda tmp2
.99b9	38		sec		                sec
.99ba	e5 08		sbc $08		                sbc cib
.99bc	85 0c		sta $0c		                sta toin
.99be	a5 27		lda $27		                lda tmp2+1
.99c0	e5 09		sbc $09		                sbc cib+1
.99c2	85 0d		sta $0d		                sta toin+1
.99c4	a5 0c		lda $0c		                lda toin
.99c6	18		clc		                clc
.99c7	65 2d		adc $2d		                adc tmptos+1
.99c9	85 0c		sta $0c		                sta toin
.99cb	a5 0d		lda $0d		                lda toin+1
.99cd	69 00		adc #$00	                adc #0          ; we only need the carry
.99cf	85 0d		sta $0d		                sta toin+1
.99d1					_done:
.99d1					z_parse_name:
.99d1	60		rts		z_parse:        rts
.99d2					xt_pick:
.99d2	16 00		asl $00,x	                asl 0,x         ; we assume u < 128 (stack is small)
.99d4	8a		txa		                txa
.99d5	75 00		adc $00,x	                adc 0,x
.99d7	a8		tay		                tay
.99d8	b9 02 00	lda $0002,y	                lda 0002,y
.99db	95 00		sta $00,x	                sta 0,x
.99dd	b9 03 00	lda $0003,y	                lda 0003,y
.99e0	95 01		sta $01,x	                sta 1,x
.99e2	60		rts		z_pick:         rts
.99e3					xt_plus:
.99e3	20 2e d8	jsr $d82e	                jsr underflow_2
.99e6	18		clc		                clc
.99e7	b5 00		lda $00,x	                lda 0,x         ; LSB
.99e9	75 02		adc $02,x	                adc 2,x
.99eb	95 02		sta $02,x	                sta 2,x
.99ed	b5 01		lda $01,x	                lda 1,x         ; MSB. No CLC, conserve carry bit
.99ef	75 03		adc $03,x	                adc 3,x
.99f1	95 03		sta $03,x	                sta 3,x
.99f3	e8		inx		                inx
.99f4	e8		inx		                inx
.99f5	60		rts		z_plus:         rts
.99f6					xt_plus_store:
.99f6	20 2e d8	jsr $d82e	                jsr underflow_2
.99f9	b5 00		lda $00,x	                lda 0,x
.99fb	85 24		sta $24		                sta tmp1
.99fd	b5 01		lda $01,x	                lda 1,x
.99ff	85 25		sta $25		                sta tmp1+1
.9a01	a0 00		ldy #$00	                ldy #0          ; LSB
.9a03	b1 24		lda ($24),y	                lda (tmp1),y
.9a05	18		clc		                clc
.9a06	75 02		adc $02,x	                adc 2,x
.9a08	91 24		sta ($24),y	                sta (tmp1),y
.9a0a	c8		iny		                iny             ; MSB
.9a0b	b1 24		lda ($24),y	                lda (tmp1),y
.9a0d	75 03		adc $03,x	                adc 3,x
.9a0f	91 24		sta ($24),y	                sta (tmp1),y
.9a11	e8		inx		                inx
.9a12	e8		inx		                inx
.9a13	e8		inx		                inx
.9a14	e8		inx		                inx
.9a15	60		rts		z_plus_store:   rts
.9a16					xt_postpone:
.9a16	20 df 98	jsr $98df	                jsr xt_parse_name               ; ( -- addr n )
.9a19	b5 00		lda $00,x	                lda 0,x
.9a1b	15 01		ora $01,x	                ora 1,x
.9a1d	d0 05		bne $9a24	                bne +
.9a1f	a9 05		lda #$05	                lda #err_noname
.9a21	4c 3f d8	jmp $d83f	                jmp error
.9a24					+
.9a24	20 db 8f	jsr $8fdb	                jsr xt_find_name                ; ( -- nt | 0 )
.9a27	d0 05		bne $9a2e	                bne +
.9a29	a9 05		lda #$05	                lda #err_noname
.9a2b	4c 3f d8	jmp $d83f	                jmp error
.9a2e					+
.9a2e	b5 00		lda $00,x	                lda 0,x
.9a30	85 24		sta $24		                sta tmp1
.9a32	b5 01		lda $01,x	                lda 1,x
.9a34	85 25		sta $25		                sta tmp1+1
.9a36	20 e1 95	jsr $95e1	                jsr xt_name_to_int              ; ( nt -- xt )
.9a39	e6 24		inc $24		                inc tmp1
.9a3b	d0 02		bne $9a3f	                bne +
.9a3d	e6 25		inc $25		                inc tmp1+1
.9a3f					+
.9a3f	b2 24		lda ($24)	                lda (tmp1)
.9a41	29 04		and #$04	                and #IM         ; mask all but Intermediate flag
.9a43	f0 05		beq $9a4a	                beq _not_immediate
.9a45	20 ed 87	jsr $87ed	                jsr xt_compile_comma
.9a48	80 0a		bra $9a54	                bra _done
.9a4a					_not_immediate:
.9a4a	20 8a 93	jsr $938a	                jsr xt_literal
.9a4d	a0 87		ldy #$87	                ldy #>xt_compile_comma
.9a4f	a9 ed		lda #$ed	                lda #<xt_compile_comma
.9a51	20 cc d6	jsr $d6cc	                jsr cmpl_subroutine
.9a54					_done:
.9a54	60		rts		z_postpone:     rts
.9a55					xt_previous:
.9a55	20 34 91	jsr $9134	                jsr xt_get_order
.9a58	20 42 96	jsr $9642	                jsr xt_nip
.9a5b	20 11 98	jsr $9811	                jsr xt_one_minus
.9a5e	20 1b 9d	jsr $9d1b	                jsr xt_set_order
.9a61	60		rts		z_previous:     rts
.9a62					xt_question:
.9a62	20 80 8f	jsr $8f80	                jsr xt_fetch
.9a65	20 36 8c	jsr $8c36	                jsr xt_dot
.9a68	60		rts		z_question:     rts
.9a69					xt_question_dup:
.9a69	20 29 d8	jsr $d829	                jsr underflow_1
.9a6c	b5 00		lda $00,x	                lda 0,x
.9a6e	15 01		ora $01,x	                ora 1,x
.9a70	f0 0a		beq $9a7c	                beq _done
.9a72	ca		dex		                dex
.9a73	ca		dex		                dex
.9a74	b5 02		lda $02,x	                lda 2,x
.9a76	95 00		sta $00,x	                sta 0,x
.9a78	b5 03		lda $03,x	                lda 3,x
.9a7a	95 01		sta $01,x	                sta 1,x
.9a7c					_done:
.9a7c	60		rts		z_question_dup: rts
.9a7d					xt_r_fetch:
.9a7d	7a		ply		                ply             ; LSB
.9a7e	84 24		sty $24		                sty tmp1
.9a80	7a		ply		                ply             ; MSB
.9a81	ca		dex		                dex
.9a82	ca		dex		                dex
.9a83	68		pla		                pla             ; LSB
.9a84	95 00		sta $00,x	                sta 0,x
.9a86	68		pla		                pla             ; MSB
.9a87	95 01		sta $01,x	                sta 1,x
.9a89	48		pha		                pha
.9a8a	b5 00		lda $00,x	                lda 0,x
.9a8c	48		pha		                pha
.9a8d	5a		phy		                phy             ; MSB
.9a8e	a4 24		ldy $24		                ldy tmp1
.9a90	5a		phy		                phy             ; LSB
.9a91	60		rts		z_r_fetch:      rts
.9a92					xt_r_from:
.9a92	68		pla		                pla             ; LSB
.9a93	85 2c		sta $2c		                sta tmptos
.9a95	7a		ply		                ply             ; MSB
.9a96	ca		dex		                dex
.9a97	ca		dex		                dex
.9a98	68		pla		                pla             ; LSB
.9a99	95 00		sta $00,x	                sta 0,x
.9a9b	68		pla		                pla             ; MSB
.9a9c	95 01		sta $01,x	                sta 1,x
.9a9e	5a		phy		                phy             ; MSB
.9a9f	a5 2c		lda $2c		                lda tmptos
.9aa1	48		pha		                pha             ; LSB
.9aa2	60		rts		z_r_from:       rts
.9aa3					xt_r_to_input:
.9aa3	68		pla		                pla
.9aa4	85 24		sta $24		                sta tmp1
.9aa6	68		pla		                pla
.9aa7	85 25		sta $25		                sta tmp1+1
.9aa9	a0 00		ldy #$00	                ldy #0
.9aab					_loop:
.9aab	68		pla		                pla
.9aac	99 06 00	sta $0006,y	                sta insrc,y
.9aaf	c8		iny		                iny
.9ab0	c0 08		cpy #$08	                cpy #8
.9ab2	d0 f7		bne $9aab	                bne _loop
.9ab4	a5 25		lda $25		                lda tmp1+1
.9ab6	48		pha		                pha
.9ab7	a5 24		lda $24		                lda tmp1
.9ab9	48		pha		                pha
.9aba	60		rts		z_r_to_input: 	rts
.9abb					xt_recurse:
.9abb	a0 00		ldy #$00	                ldy #0
.9abd	a9 20		lda #$20	                lda #$20        ; opcode for JSR
.9abf	91 00		sta ($00),y	                sta (cp),y
.9ac1	c8		iny		                iny
.9ac2	24 20		bit $20		                bit status
.9ac4	70 0c		bvs $9ad2	                bvs _nt_in_workword
.9ac6	a5 04		lda $04		                lda workword
.9ac8	91 00		sta ($00),y	                sta (cp),y
.9aca	c8		iny		                iny
.9acb	a5 05		lda $05		                lda workword+1
.9acd	91 00		sta ($00),y	                sta (cp),y
.9acf	c8		iny		                iny
.9ad0	80 1b		bra $9aed	                bra _update_cp
.9ad2					_nt_in_workword:
.9ad2	a5 04		lda $04		                lda workword            ; LSB
.9ad4	18		clc		                clc
.9ad5	69 04		adc #$04	                adc #4
.9ad7	85 24		sta $24		                sta tmp1
.9ad9	a5 05		lda $05		                lda workword+1          ; MSB
.9adb	69 00		adc #$00	                adc #0
.9add	85 25		sta $25		                sta tmp1+1
.9adf	b2 24		lda ($24)	                lda (tmp1)
.9ae1	91 00		sta ($00),y	                sta (cp),y
.9ae3	5a		phy		                phy
.9ae4	a0 01		ldy #$01	                ldy #1
.9ae6	b1 24		lda ($24),y	                lda (tmp1),y
.9ae8	7a		ply		                ply
.9ae9	c8		iny		                iny
.9aea	91 00		sta ($00),y	                sta (cp),y
.9aec	c8		iny		                iny
.9aed					_update_cp:
.9aed	98		tya		                tya
.9aee	18		clc		                clc
.9aef	65 00		adc $00		                adc cp
.9af1	85 00		sta $00		                sta cp
.9af3	90 02		bcc $9af7	                bcc _done
.9af5	e6 01		inc $01		                inc cp+1
.9af7					_done:
.9af7	60		rts		z_recurse:      rts
.9af8					xt_refill:
.9af8	a5 06		lda $06		                lda insrc               ; cheat: We only check LSB
.9afa	d0 2d		bne $9b29	                bne _src_not_kbd
.9afc	ca		dex		                dex
.9afd	ca		dex		                dex
.9afe	ca		dex		                dex
.9aff	ca		dex		                dex
.9b00	a5 08		lda $08		                lda cib                 ; address of CIB is NOS
.9b02	95 02		sta $02,x	                sta 2,x
.9b04	a5 09		lda $09		                lda cib+1
.9b06	95 03		sta $03,x	                sta 3,x
.9b08	64 0a		stz $0a		                stz ciblen              ; go in with empty buffer
.9b0a	64 0b		stz $0b		                stz ciblen+1
.9b0c	a9 ff		lda #$ff	                lda #bsize              ; max number of chars is TOS
.9b0e	95 00		sta $00,x	                sta 0,x
.9b10	74 01		stz $01,x	                stz 1,x                 ; cheat: We only accept max 255
.9b12	20 4e 81	jsr $814e	                jsr xt_accept           ; ( addr n1 -- n2)
.9b15	b5 00		lda $00,x	                lda 0,x
.9b17	85 0a		sta $0a		                sta ciblen
.9b19	b5 01		lda $01,x	                lda 1,x
.9b1b	85 0b		sta $0b		                sta ciblen+1            ; though we only accept 255 chars
.9b1d	64 0c		stz $0c		                stz toin
.9b1f	64 0d		stz $0d		                stz toin+1
.9b21	a9 ff		lda #$ff	                lda #$FF                ; overwrite with TRUE flag
.9b23	95 00		sta $00,x	                sta 0,x
.9b25	95 01		sta $01,x	                sta 1,x
.9b27	80 10		bra $9b39	                bra _done
.9b29					_src_not_kbd:
.9b29	1a		inc a		                ina
.9b2a	d0 08		bne $9b34	                bne _src_not_string
.9b2c	ca		dex		                dex
.9b2d	ca		dex		                dex
.9b2e	74 00		stz $00,x	                stz 0,x
.9b30	74 01		stz $01,x	                stz 1,x
.9b32	80 05		bra $9b39	                bra z_refill
.9b34					_src_not_string:
.9b34	a9 01		lda #$01	                lda #err_badsource
.9b36	4c 3f d8	jmp $d83f	                jmp error
.9b39					_done:
.9b39	60		rts		z_refill:       rts
.9b3a					xt_repeat:
.9b3a	20 89 82	jsr $8289	                jsr xt_again
.9b3d	20 72 91	jsr $9172	                jsr xt_here
.9b40	20 a8 a1	jsr $a1a8	                jsr xt_swap
.9b43	20 87 a1	jsr $a187	                jsr xt_store
.9b46	60		rts		z_repeat:       rts
.9b47					xt_right_bracket:
.9b47	a9 ff		lda #$ff	                lda #$FF
.9b49	85 16		sta $16		                sta state
.9b4b	85 17		sta $17		                sta state+1
.9b4d					z_right_bracket:
.9b4d	60		rts		                rts
.9b4e					xt_root_wordlist:
.9b4e	ca		dex		                dex             ; The WID for the Root wordlist is 3.
.9b4f	ca		dex		                dex
.9b50	a9 03		lda #$03	                lda #3
.9b52	95 00		sta $00,x	                sta 0,x
.9b54	74 01		stz $01,x	                stz 1,x
.9b56					z_root_wordlist:
.9b56	60		rts		                rts
.9b57					xt_rot:
.9b57	20 33 d8	jsr $d833	                jsr underflow_3
.9b5a	b4 05		ldy $05,x	                ldy 5,x         ; MSB first
.9b5c	b5 03		lda $03,x	                lda 3,x
.9b5e	95 05		sta $05,x	                sta 5,x
.9b60	b5 01		lda $01,x	                lda 1,x
.9b62	95 03		sta $03,x	                sta 3,x
.9b64	94 01		sty $01,x	                sty 1,x
.9b66	b4 04		ldy $04,x	                ldy 4,x         ; LSB next
.9b68	b5 02		lda $02,x	                lda 2,x
.9b6a	95 04		sta $04,x	                sta 4,x
.9b6c	b5 00		lda $00,x	                lda 0,x
.9b6e	95 02		sta $02,x	                sta 2,x
.9b70	94 00		sty $00,x	                sty 0,x
.9b72	60		rts		z_rot:          rts
.9b73					xt_rshift:
.9b73	20 2e d8	jsr $d82e	                jsr underflow_2
.9b76	b5 00		lda $00,x	                lda 0,x
.9b78	29 0f		and #$0f	                and #%00001111
.9b7a	f0 08		beq $9b84	                beq _done               ; if 0 shifts, quit
.9b7c	a8		tay		                tay
.9b7d					_loop:
.9b7d	56 03		lsr $03,x	                lsr 3,x
.9b7f	76 02		ror $02,x	                ror 2,x
.9b81	88		dey		                dey
.9b82	d0 f9		bne $9b7d	                bne _loop
.9b84					_done:
.9b84	e8		inx		                inx
.9b85	e8		inx		                inx
.9b86	60		rts		z_rshift:       rts
.9b87					xt_s_backslash_quote:
.9b87	a9 ff		lda #$ff	                lda #$FF
.9b89	85 26		sta $26		                sta tmp2
.9b8b	64 27		stz $27		                stz tmp2+1
.9b8d	20 53 9d	jsr $9d53	                jsr s_quote_start
.9b90					_done:
.9b90					z_s_backslash_quote:
.9b90	60		rts		                rts
.9b91					convert_hex_value:
.9b91	c9 41		cmp #$41	        cmp #'A'
.9b93	90 07		bcc $9b9c	        bcc _digit
.9b95	29 df		and #$df	        and #$DF                ; Make it uppercase.
.9b97	38		sec		        sec
.9b98	e9 37		sbc #$37	        sbc #'7'                 ; gives value 10 for 'A'
.9b9a	80 03		bra $9b9f	        bra _done
.9b9c					_digit:
.9b9c	38		sec		        sec
.9b9d	e9 30		sbc #$30	        sbc #'0'
.9b9f					_done:
.9b9f	60		rts		        rts
.9ba0					xt_search_wordlist:
.9ba0	20 33 d8	jsr $d833	                jsr underflow_3
.9ba3	a5 1e		lda $1e		                lda up
.9ba5	18		clc		                clc
.9ba6	69 06		adc #$06	                adc #wordlists_offset
.9ba8	85 26		sta $26		                sta tmp2
.9baa	a5 1f		lda $1f		                lda up+1
.9bac	69 00		adc #$00	                adc #0          ; Adding carry
.9bae	85 27		sta $27		                sta tmp2+1
.9bb0	b5 00		lda $00,x	                lda 0,x
.9bb2	0a		asl a		                asl             ; Convert wid to offset in cells (x2)
.9bb3	65 26		adc $26		                adc tmp2
.9bb5	85 26		sta $26		                sta tmp2
.9bb7	90 02		bcc $9bbb	                bcc +
.9bb9	e6 27		inc $27		                inc tmp2+1      ; Propagate carry if needed.
.9bbb					+
.9bbb	e8		inx		                inx
.9bbc	e8		inx		                inx
.9bbd	b5 00		lda $00,x	                lda 0,x
.9bbf	15 01		ora $01,x	                ora 1,x
.9bc1	d0 03		bne $9bc6	                bne _check_wordlist
.9bc3	4c 7e 9c	jmp $9c7e	                jmp _done
.9bc6					_check_wordlist:
.9bc6	a5 26		lda $26		                lda tmp2
.9bc8	05 27		ora $27		                ora tmp2+1
.9bca	d0 03		bne $9bcf	                bne _have_string
.9bcc	4c 7e 9c	jmp $9c7e	                jmp _done
.9bcf					_have_string:
.9bcf	b2 26		lda ($26)	                lda (tmp2)              ; nt of first word in Dictionary
.9bd1	85 24		sta $24		                sta tmp1
.9bd3	e6 26		inc $26		                inc tmp2                ; Move to the upper byte
.9bd5	d0 02		bne $9bd9	                bne +
.9bd7	e6 27		inc $27		                inc tmp2+1
.9bd9					+
.9bd9	b2 26		lda ($26)	                lda (tmp2)
.9bdb	85 25		sta $25		                sta tmp1+1
.9bdd	b5 02		lda $02,x	                lda 2,x                 ; Address of mystery string
.9bdf	85 26		sta $26		                sta tmp2
.9be1	b5 03		lda $03,x	                lda 3,x
.9be3	85 27		sta $27		                sta tmp2+1
.9be5					_loop:
.9be5	b2 24		lda ($24)	                lda (tmp1)
.9be7	d5 00		cmp $00,x	                cmp 0,x
.9be9	d0 7b		bne $9c66	                bne _next_entry
.9beb					_compare_string:
.9beb	b2 26		lda ($26)	                lda (tmp2)      ; first character of mystery string
.9bed	c9 5b		cmp #$5b	                cmp #$5B        ; ASCII '[' (one past Z)
.9bef	b0 07		bcs $9bf8	                bcs _compare_first
.9bf1	c9 41		cmp #$41	                cmp #$41        ; ASCII 'A'
.9bf3	90 03		bcc $9bf8	                bcc _compare_first
.9bf5	18		clc		                clc
.9bf6	69 20		adc #$20	                adc #$20
.9bf8					_compare_first:
.9bf8	a0 08		ldy #$08	                ldy #8          ; Offset in nt to name
.9bfa	d1 24		cmp ($24),y	                cmp (tmp1),y    ; first character of current word
.9bfc	d0 68		bne $9c66	                bne _next_entry
.9bfe	b5 00		lda $00,x	                lda 0,x
.9c00	3a		dec a		                dea
.9c01	f0 2c		beq $9c2f	                beq _success
.9c03	a5 24		lda $24		                lda tmp1
.9c05	48		pha		                pha             ; Preserve tmp1 on the return stack.
.9c06	18		clc		                clc
.9c07	69 08		adc #$08	                adc #8
.9c09	85 24		sta $24		                sta tmp1        ; Reusing tmp1 temporarily for string check.
.9c0b	a5 25		lda $25		                lda tmp1+1
.9c0d	48		pha		                pha             ; Preserve tmp1+1 on the return stack.
.9c0e	69 00		adc #$00	                adc #0          ; we only need the carry
.9c10	85 25		sta $25		                sta tmp1+1
.9c12	b4 00		ldy $00,x	                ldy 0,x         ; index is length of string minus 1
.9c14	88		dey		                dey
.9c15					_string_loop:
.9c15	b1 26		lda ($26),y	                lda (tmp2),y    ; last char of mystery string
.9c17	c9 5b		cmp #$5b	                cmp #$5B         ; ASCII '[' (one past Z)
.9c19	b0 07		bcs $9c22	                bcs _check_char
.9c1b	c9 41		cmp #$41	                cmp #$41        ; ASCII 'A'
.9c1d	90 03		bcc $9c22	                bcc _check_char
.9c1f	18		clc		                clc
.9c20	69 20		adc #$20	                adc #$20
.9c22					_check_char:
.9c22	d1 24		cmp ($24),y	                cmp (tmp1),y    ; last char of word we're testing against
.9c24	d0 3a		bne $9c60	                bne _next_entry_tmp1
.9c26	88		dey		                dey
.9c27	d0 ec		bne $9c15	                bne _string_loop
.9c29					_success_tmp1:
.9c29	68		pla		                pla             ; Restore tmp1 from the return stack.
.9c2a	85 25		sta $25		                sta tmp1+1
.9c2c	68		pla		                pla
.9c2d	85 24		sta $24		                sta tmp1
.9c2f					_success:
.9c2f	e8		inx		                inx
.9c30	e8		inx		                inx
.9c31	a5 24		lda $24		                lda tmp1
.9c33	95 00		sta $00,x	                sta 0,x
.9c35	a5 25		lda $25		                lda tmp1+1
.9c37	95 01		sta $01,x	                sta 1,x
.9c39	20 af 8d	jsr $8daf	                jsr xt_dup              ; ( nt nt )
.9c3c	20 e1 95	jsr $95e1	                jsr xt_name_to_int      ; ( nt xt )
.9c3f	20 a8 a1	jsr $a1a8	                jsr xt_swap             ; ( xt nt )
.9c42	a0 00		ldy #$00	                ldy #0                  ; Prepare flag
.9c44	f6 00		inc $00,x	                inc 0,x
.9c46	d0 02		bne $9c4a	                bne +
.9c48	f6 01		inc $01,x	                inc 1,x                 ; ( xt nt+1 )
.9c4a					+
.9c4a	a1 00		lda ($00,x)	                lda (0,x)               ; ( xt char )
.9c4c	29 04		and #$04	                and #IM
.9c4e	d0 08		bne $9c58	                bne _immediate          ; bit set, we're immediate
.9c50	a9 ff		lda #$ff	                lda #$FF                ; We're not immediate, return -1
.9c52	95 00		sta $00,x	                sta 0,x
.9c54	95 01		sta $01,x	                sta 1,x
.9c56	80 28		bra $9c80	                bra _done_nodrop
.9c58					_immediate:
.9c58	a9 01		lda #$01	                lda #1                  ; We're immediate, return 1
.9c5a	95 00		sta $00,x	                sta 0,x
.9c5c	74 01		stz $01,x	                stz 1,x
.9c5e	80 20		bra $9c80	                bra _done_nodrop
.9c60					_next_entry_tmp1:
.9c60	68		pla		                pla             ; Restore tmp1 from the return stack.
.9c61	85 25		sta $25		                sta tmp1+1
.9c63	68		pla		                pla
.9c64	85 24		sta $24		                sta tmp1
.9c66					_next_entry:
.9c66	a0 02		ldy #$02	                ldy #2
.9c68	b1 24		lda ($24),y	                lda (tmp1),y
.9c6a	48		pha		                pha
.9c6b	c8		iny		                iny
.9c6c	b1 24		lda ($24),y	                lda (tmp1),y
.9c6e	85 25		sta $25		                sta tmp1+1
.9c70	68		pla		                pla
.9c71	85 24		sta $24		                sta tmp1
.9c73	05 25		ora $25		                ora tmp1+1
.9c75	f0 03		beq $9c7a	                beq _fail_done
.9c77	4c e5 9b	jmp $9be5	                jmp _loop
.9c7a					_fail_done:
.9c7a	74 02		stz $02,x	                stz 2,x         ; failure flag
.9c7c	74 03		stz $03,x	                stz 3,x
.9c7e					_done:
.9c7e	e8		inx		                inx
.9c7f	e8		inx		                inx
.9c80					_done_nodrop:
.9c80					z_search_wordlist:
.9c80	60		rts		                rts
.9c81					xt_see:
.9c81	20 df 98	jsr $98df	                jsr xt_parse_name       ; ( addr u )
.9c84	20 db 8f	jsr $8fdb	                jsr xt_find_name        ; ( nt | 0 )
.9c87	b5 00		lda $00,x	                lda 0,x
.9c89	15 01		ora $01,x	                ora 1,x
.9c8b	d0 05		bne $9c92	                bne +
.9c8d	a9 05		lda #$05	                lda #err_noname
.9c8f	4c 3f d8	jmp $d83f	                jmp error
.9c92					+
.9c92	20 63 89	jsr $8963	                jsr xt_cr
.9c95	a5 18		lda $18		                lda base
.9c97	48		pha		                pha
.9c98	20 7d 91	jsr $917d	                jsr xt_hex
.9c9b	a9 0a		lda #$0a	                lda #str_see_nt
.9c9d	20 55 d8	jsr $d855	                jsr print_string_no_lf
.9ca0	20 af 8d	jsr $8daf	                jsr xt_dup              ; ( nt nt )
.9ca3	20 28 a5	jsr $a528	                jsr xt_u_dot
.9ca6	20 1e a1	jsr $a11e	                jsr xt_space            ; ( nt )
.9ca9	20 af 8d	jsr $8daf	                jsr xt_dup              ; ( nt nt )
.9cac	20 e1 95	jsr $95e1	                jsr xt_name_to_int      ; ( nt xt )
.9caf	a9 0b		lda #$0b	                lda #str_see_xt
.9cb1	20 55 d8	jsr $d855	                jsr print_string_no_lf
.9cb4	20 af 8d	jsr $8daf	                jsr xt_dup              ; ( nt xt xt )
.9cb7	20 28 a5	jsr $a528	                jsr xt_u_dot
.9cba	20 63 89	jsr $8963	                jsr xt_cr               ; ( nt xt )
.9cbd	a9 09		lda #$09	                lda #str_see_flags
.9cbf	20 55 d8	jsr $d855	                jsr print_string_no_lf
.9cc2	20 93 98	jsr $9893	                jsr xt_over             ; ( nt xt nt )
.9cc5	20 1d 98	jsr $981d	                jsr xt_one_plus         ; ( nt xt nt+1 )
.9cc8	20 80 8f	jsr $8f80	                jsr xt_fetch            ; ( nt xt flags )
.9ccb	b5 00		lda $00,x	                lda 0,x
.9ccd	a0 06		ldy #$06	                ldy #6                  ; Not all bits are used
.9ccf					_flag_loop:
.9ccf	48		pha		                pha
.9cd0	29 01		and #$01	                and #%00000001
.9cd2	18		clc		                clc
.9cd3	69 30		adc #$30	                adc #$30                ; ASCII "0"
.9cd5	20 f6 8d	jsr $8df6	                jsr emit_a
.9cd8	20 1e a1	jsr $a11e	                jsr xt_space
.9cdb	68		pla		                pla
.9cdc	6a		ror a		                ror                     ; Next flag
.9cdd	88		dey		                dey
.9cde	d0 ef		bne $9ccf	                bne _flag_loop
.9ce0	20 63 89	jsr $8963	                jsr xt_cr
.9ce3	e8		inx		                inx
.9ce4	e8		inx		                inx                     ; ( nt xt )
.9ce5	a9 0c		lda #$0c	                lda #str_see_size
.9ce7	20 55 d8	jsr $d855	                jsr print_string_no_lf
.9cea	20 a8 a1	jsr $a1a8	                jsr xt_swap             ; ( xt nt )
.9ced	20 6f a7	jsr $a76f	                jsr xt_wordsize         ; ( xt u )
.9cf0	20 af 8d	jsr $8daf	                jsr xt_dup              ; ( xt u u ) for DUMP and DISASM
.9cf3	20 a5 8a	jsr $8aa5	                jsr xt_decimal
.9cf6	20 28 a5	jsr $a528	                jsr xt_u_dot            ; ( xt u )
.9cf9	20 7d 91	jsr $917d	                jsr xt_hex
.9cfc	20 63 89	jsr $8963	                jsr xt_cr
.9cff	20 b2 a3	jsr $a3b2	                jsr xt_two_dup          ; ( xt u xt u )
.9d02	20 34 8d	jsr $8d34	                jsr xt_dump
.9d05	20 63 89	jsr $8963	                jsr xt_cr
.9d08	20 3a 8b	jsr $8b3a	                jsr xt_disasm
.9d0b	68		pla		                pla
.9d0c	85 18		sta $18		                sta base
.9d0e	60		rts		z_see:          rts
.9d0f					xt_set_current:
.9d0f	20 29 d8	jsr $d829	                jsr underflow_1
.9d12	a0 04		ldy #$04	                ldy #current_offset
.9d14	b5 00		lda $00,x	                lda 0,x         ; CURRENT is byte variable
.9d16	91 1e		sta ($1e),y	                sta (up),y      ; so only the LSB is used.
.9d18	e8		inx		                inx
.9d19	e8		inx		                inx
.9d1a	60		rts		z_set_current:  rts
.9d1b					xt_set_order:
.9d1b	a9 ff		lda #$ff	                lda #$FF
.9d1d	d5 01		cmp $01,x	                cmp 1,x
.9d1f	d0 12		bne $9d33	                bne _start
.9d21	d5 00		cmp $00,x	                cmp 0,x
.9d23	d0 0e		bne $9d33	                bne _start
.9d25	ca		dex		                dex             ; Make room for the count.
.9d26	ca		dex		                dex
.9d27	74 03		stz $03,x	                stz 3,x         ; ROOT-WORDLIST is 3
.9d29	a9 03		lda #$03	                lda #3
.9d2b	95 02		sta $02,x	                sta 2,x
.9d2d	74 01		stz $01,x	                stz 1,x         ; Count is 1.
.9d2f	a9 01		lda #$01	                lda #1
.9d31	95 00		sta $00,x	                sta 0,x
.9d33					_start:
.9d33	a0 1e		ldy #$1e	                ldy #num_order_offset
.9d35	b5 00		lda $00,x	                lda 0,x
.9d37	91 1e		sta ($1e),y	                sta (up),y      ; #ORDER is a byte variable.
.9d39	85 24		sta $24		                sta tmp1        ; Save a copy for zero check and looping.
.9d3b	e8		inx		                inx             ; Drop the count off the data stack.
.9d3c	e8		inx		                inx
.9d3d	a5 24		lda $24		                lda tmp1
.9d3f	f0 0d		beq $9d4e	                beq _done       ; If zero, there are no wordlists.
.9d41	a0 1f		ldy #$1f	                ldy #search_order_offset
.9d43					_loop:
.9d43	b5 00		lda $00,x	                lda 0,x         ; The search order is a byte array
.9d45	91 1e		sta ($1e),y	                sta (up),y      ; so only save the LSB
.9d47	c8		iny		                iny
.9d48	e8		inx		                inx
.9d49	e8		inx		                inx
.9d4a	c6 24		dec $24		                dec tmp1
.9d4c	d0 f5		bne $9d43	                bne _loop
.9d4e					_done:
.9d4e	60		rts		z_set_order:    rts
.9d4f					xt_s_quote:
.9d4f	64 26		stz $26		                stz tmp2
.9d51	64 27		stz $27		                stz tmp2+1
.9d53					s_quote_start:
.9d53	ca		dex		                dex
.9d54	ca		dex		                dex
.9d55	ca		dex		                dex
.9d56	ca		dex		                dex
.9d57	a9 4c		lda #$4c	                lda #$4C
.9d59	20 dc d6	jsr $d6dc	                jsr cmpl_a
.9d5c	20 dc d6	jsr $d6dc	                jsr cmpl_a
.9d5f	20 dc d6	jsr $d6dc	                jsr cmpl_a
.9d62	a5 00		lda $00		                lda cp
.9d64	95 02		sta $02,x	                sta 2,x
.9d66	a5 01		lda $01		                lda cp+1
.9d68	95 03		sta $03,x	                sta 3,x
.9d6a					_savechars_loop:
.9d6a	a5 0d		lda $0d		                lda toin+1              ; MSB
.9d6c	c5 0b		cmp $0b		                cmp ciblen+1
.9d6e	90 2a		bcc $9d9a	                bcc _input_fine         ; unsigned comparison
.9d70	a5 0c		lda $0c		                lda toin                ; LSB
.9d72	c5 0a		cmp $0a		                cmp ciblen
.9d74	90 24		bcc $9d9a	                bcc _input_fine
.9d76	a5 26		lda $26		                lda tmp2
.9d78	48		pha		                pha
.9d79	a5 27		lda $27		                lda tmp2+1
.9d7b	48		pha		                pha
.9d7c	a5 28		lda $28		                lda tmp3    ; Only tmp3 used, so don't bother with tmp3+1
.9d7e	48		pha		                pha
.9d7f	20 f8 9a	jsr $9af8	                jsr xt_refill           ; ( -- f )
.9d82	68		pla		                pla
.9d83	85 28		sta $28		                sta tmp3
.9d85	68		pla		                pla
.9d86	85 27		sta $27		                sta tmp2+1
.9d88	68		pla		                pla
.9d89	85 26		sta $26		                sta tmp2
.9d8b	b5 00		lda $00,x	                lda 0,x
.9d8d	15 01		ora $01,x	                ora 1,x
.9d8f	d0 05		bne $9d96	                bne _refill_ok
.9d91	a9 06		lda #$06	                lda #err_refill
.9d93	4c 3f d8	jmp $d83f	                jmp error
.9d96					_refill_ok:
.9d96	e8		inx		                inx
.9d97	e8		inx		                inx
.9d98	80 d0		bra $9d6a	                bra _savechars_loop
.9d9a					_input_fine:
.9d9a	a5 08		lda $08		                lda cib
.9d9c	18		clc		                clc
.9d9d	65 0c		adc $0c		                adc toin        ; LSB
.9d9f	85 24		sta $24		                sta tmp1
.9da1	a5 09		lda $09		                lda cib+1
.9da3	65 0d		adc $0d		                adc toin+1      ; MSB
.9da5	85 25		sta $25		                sta tmp1+1
.9da7	b2 24		lda ($24)	                lda (tmp1)
.9da9	24 26		bit $26		                bit tmp2
.9dab	30 03		bmi $9db0	                bmi _handle_escapes    ; Only checking bit 7
.9dad	4c 68 9e	jmp $9e68	                jmp _regular_char
.9db0					_handle_escapes:
.9db0	24 27		bit $27		                bit tmp2+1
.9db2	30 03		bmi $9db7	                bmi _escaped
.9db4	4c 5e 9e	jmp $9e5e	                jmp _not_escaped
.9db7					_escaped:
.9db7	70 22		bvs $9ddb	                bvs _check_esc_chars
.9db9	a9 01		lda #$01	                lda #1
.9dbb	24 27		bit $27		                bit tmp2+1
.9dbd	d0 10		bne $9dcf	                bne _esc_x_second_digit
.9dbf	e6 27		inc $27		                inc tmp2+1  ; Adjust flag for second digit next time.
.9dc1	b2 24		lda ($24)	                lda (tmp1)  ; Get the char again.
.9dc3	20 91 9b	jsr $9b91	                jsr convert_hex_value
.9dc6	0a		asl a		                asl
.9dc7	0a		asl a		                asl
.9dc8	0a		asl a		                asl
.9dc9	0a		asl a		                asl
.9dca	85 28		sta $28		                sta tmp3    ; Save it for later.
.9dcc	4c 6f 9e	jmp $9e6f	                jmp _next_character
.9dcf					_esc_x_second_digit:
.9dcf	64 27		stz $27		                stz tmp2+1
.9dd1	b2 24		lda ($24)	                lda (tmp1)
.9dd3	20 91 9b	jsr $9b91	                jsr convert_hex_value
.9dd6	05 28		ora $28		                ora tmp3
.9dd8	4c 6c 9e	jmp $9e6c	                jmp _save_character
.9ddb					_check_esc_chars:
.9ddb	64 27		stz $27		                stz tmp2+1
.9ddd					_check_esc_a:
.9ddd	c9 61		cmp #$61	                cmp #'a'
.9ddf	d0 05		bne $9de6	                bne _check_esc_b
.9de1	a9 07		lda #$07	                lda #7
.9de3	4c 6c 9e	jmp $9e6c	                jmp _save_character
.9de6					_check_esc_b:
.9de6	c9 62		cmp #$62	                cmp #'b'
.9de8	d0 05		bne $9def	                bne _check_esc_e
.9dea	a9 08		lda #$08	                lda #8
.9dec	4c 6c 9e	jmp $9e6c	                jmp _save_character
.9def					_check_esc_e:
.9def	c9 65		cmp #$65	                cmp #'e'
.9df1	d0 04		bne $9df7	                bne _check_esc_f
.9df3	a9 1b		lda #$1b	                lda #27
.9df5	80 75		bra $9e6c	                bra _save_character
.9df7					_check_esc_f:
.9df7	c9 66		cmp #$66	                cmp #'f'
.9df9	d0 04		bne $9dff	                bne _check_esc_l
.9dfb	a9 0c		lda #$0c	                lda #12
.9dfd	80 6d		bra $9e6c	                bra _save_character
.9dff					_check_esc_l:
.9dff	c9 6c		cmp #$6c	                cmp #'l'
.9e01	d0 04		bne $9e07	                bne _check_esc_m
.9e03	a9 0a		lda #$0a	                lda #10
.9e05	80 65		bra $9e6c	                bra _save_character
.9e07					_check_esc_m:
.9e07	c9 6d		cmp #$6d	                cmp #'m'
.9e09	d0 09		bne $9e14	                bne _check_esc_n
.9e0b	a9 0d		lda #$0d	                lda #13
.9e0d	20 dc d6	jsr $d6dc	                jsr cmpl_a
.9e10	a9 0a		lda #$0a	                lda #10
.9e12	80 58		bra $9e6c	                bra _save_character
.9e14					_check_esc_n:
.9e14	c9 6e		cmp #$6e	                cmp #'n'
.9e16	d0 04		bne $9e1c	                bne _check_esc_q
.9e18	a9 0a		lda #$0a	                lda #10
.9e1a	80 50		bra $9e6c	                bra _save_character
.9e1c					_check_esc_q:
.9e1c	c9 71		cmp #$71	                cmp #'q'
.9e1e	d0 04		bne $9e24	                bne _check_esc_r
.9e20	a9 22		lda #$22	                lda #34
.9e22	80 48		bra $9e6c	                bra _save_character
.9e24					_check_esc_r:
.9e24	c9 72		cmp #$72	                cmp #'r'
.9e26	d0 04		bne $9e2c	                bne _check_esc_t
.9e28	a9 0d		lda #$0d	                lda #13
.9e2a	80 40		bra $9e6c	                bra _save_character
.9e2c					_check_esc_t:
.9e2c	c9 74		cmp #$74	                cmp #'t'
.9e2e	d0 04		bne $9e34	                bne _check_esc_v
.9e30	a9 09		lda #$09	                lda #9
.9e32	80 38		bra $9e6c	                bra _save_character
.9e34					_check_esc_v:
.9e34	c9 76		cmp #$76	                cmp #'v'
.9e36	d0 04		bne $9e3c	                bne _check_esc_z
.9e38	a9 0b		lda #$0b	                lda #11
.9e3a	80 30		bra $9e6c	                bra _save_character
.9e3c					_check_esc_z:
.9e3c	c9 7a		cmp #$7a	                cmp #'z'
.9e3e	d0 04		bne $9e44	                bne _check_esc_quote
.9e40	a9 00		lda #$00	                lda #0
.9e42	80 28		bra $9e6c	                bra _save_character
.9e44					_check_esc_quote:
.9e44	c9 22		cmp #$22	                cmp #$22
.9e46	d0 04		bne $9e4c	                bne _check_esc_x
.9e48	a9 22		lda #$22	                lda #34
.9e4a	80 20		bra $9e6c	                bra _save_character
.9e4c					_check_esc_x:
.9e4c	c9 78		cmp #$78	                cmp #'x'
.9e4e	d0 06		bne $9e56	                bne _check_esc_backslash
.9e50	a9 be		lda #$be	                lda #$BE        ; Clear bits 6 and 0
.9e52	85 27		sta $27		                sta tmp2+1
.9e54	80 19		bra $9e6f	                bra _next_character
.9e56					_check_esc_backslash:
.9e56	c9 5c		cmp #$5c	                cmp #$5C
.9e58	d0 04		bne $9e5e	                bne _not_escaped
.9e5a	a9 5c		lda #$5c	                lda #92
.9e5c	80 0e		bra $9e6c	                bra _save_character
.9e5e					_not_escaped:
.9e5e	c9 5c		cmp #$5c	                cmp #$5C        ; The backslash char
.9e60	d0 06		bne $9e68	                bne _regular_char
.9e62	a9 ff		lda #$ff	                lda #$FF
.9e64	85 27		sta $27		                sta tmp2+1
.9e66	80 07		bra $9e6f	                bra _next_character
.9e68					_regular_char:
.9e68	c9 22		cmp #$22	                cmp #$22        ; ASCII for "
.9e6a	f0 0c		beq $9e78	                beq _found_string_end
.9e6c					_save_character:
.9e6c	20 dc d6	jsr $d6dc	                jsr cmpl_a
.9e6f					_next_character:
.9e6f	e6 0c		inc $0c		                inc toin
.9e71	d0 02		bne $9e75	                bne _savechars_loop_longjump
.9e73	e6 0d		inc $0d		                inc toin+1
.9e75					_savechars_loop_longjump:
.9e75	4c 6a 9d	jmp $9d6a	                jmp _savechars_loop
.9e78					_found_string_end:
.9e78	e6 0c		inc $0c		                inc toin
.9e7a	d0 02		bne $9e7e	                bne +
.9e7c	e6 0d		inc $0d		                inc toin+1
.9e7e					+
.9e7e	a5 00		lda $00		                lda cp
.9e80	38		sec		                sec
.9e81	f5 02		sbc $02,x	                sbc 2,x
.9e83	95 00		sta $00,x	                sta 0,x         ; LSB
.9e85	a5 01		lda $01		                lda cp+1
.9e87	f5 03		sbc $03,x	                sbc 3,x
.9e89	95 01		sta $01,x	                sta 1,x         ; MSB
.9e8b	b5 02		lda $02,x	                lda 2,x
.9e8d	38		sec		                sec
.9e8e	e9 02		sbc #$02	                sbc #2
.9e90	85 24		sta $24		                sta tmp1
.9e92	b5 03		lda $03,x	                lda 3,x
.9e94	e9 00		sbc #$00	                sbc #0          ; Propagate borrow
.9e96	85 25		sta $25		                sta tmp1+1
.9e98	a5 00		lda $00		                lda cp
.9e9a	92 24		sta ($24)	                sta (tmp1)
.9e9c	a0 01		ldy #$01	                ldy #1
.9e9e	a5 01		lda $01		                lda cp+1
.9ea0	91 24		sta ($24),y	                sta (tmp1),y
.9ea2	a5 16		lda $16		                lda state
.9ea4	05 17		ora $17		                ora state+1             ; paranoid
.9ea6	f0 03		beq $9eab	                beq _done
.9ea8	20 8f a0	jsr $a08f	                jsr sliteral_const_str         ; ( addr u -- )
.9eab					_done:
.9eab	60		rts		z_s_quote:      rts
.9eac					xt_s_to_d:
.9eac	20 29 d8	jsr $d829	                jsr underflow_1
.9eaf	ca		dex		                dex
.9eb0	ca		dex		                dex
.9eb1	74 00		stz $00,x	                stz 0,x
.9eb3	74 01		stz $01,x	                stz 1,x
.9eb5	b5 03		lda $03,x	                lda 3,x
.9eb7	10 04		bpl $9ebd	                bpl _done
.9eb9	d6 00		dec $00,x	                dec 0,x
.9ebb	d6 01		dec $01,x	                dec 1,x
.9ebd					_done:
.9ebd	60		rts		z_s_to_d:       rts
.9ebe					xt_save_buffers:
.9ebe	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.9ec0	b1 1e		lda ($1e),y	                lda (up),y      ; Only bits 0 and 1 are used, so only
.9ec2	c9 03		cmp #$03	                cmp #3          ; LSB is needed.
.9ec4	d0 12		bne $9ed8	                bne _done       ; Either not used or not dirty = done!
.9ec6	20 b3 83	jsr $83b3	                jsr xt_blkbuffer
.9ec9	20 a5 85	jsr $85a5	                jsr xt_buffblocknum
.9ecc	20 80 8f	jsr $8f80	                jsr xt_fetch
.9ecf	20 60 85	jsr $8560	                jsr xt_block_write
.9ed2	a9 01		lda #$01	                lda #1
.9ed4	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.9ed6	91 1e		sta ($1e),y	                sta (up),y
.9ed8					_done:
.9ed8	60		rts		z_save_buffers: rts
.9ed9					xt_scr:
.9ed9	ca		dex		                dex
.9eda	ca		dex		                dex
.9edb	18		clc		                clc
.9edc	a5 1e		lda $1e		                lda up
.9ede	69 02		adc #$02	                adc #scr_offset ; Add offset
.9ee0	95 00		sta $00,x	                sta 0,x
.9ee2	a5 1f		lda $1f		                lda up+1
.9ee4	69 00		adc #$00	                adc #0          ; Adding carry
.9ee6	95 01		sta $01,x	                sta 1,x
.9ee8	60		rts		z_scr:          rts
.9ee9					xt_search:
.9ee9	20 38 d8	jsr $d838	                jsr underflow_4
.9eec	b5 00		lda $00,x	                lda 0,x
.9eee	15 01		ora $01,x	                ora 1,x
.9ef0	d0 0b		bne $9efd	                bne _start_search
.9ef2	e8		inx		                inx             ; Remove u2
.9ef3	e8		inx		                inx
.9ef4	a9 ff		lda #$ff	                lda #$FF        ; Turn addr2 into a true flag
.9ef6	95 00		sta $00,x	                sta 0,x
.9ef8	95 01		sta $01,x	                sta 1,x
.9efa	4c 87 9f	jmp $9f87	                jmp z_search
.9efd					_start_search:
.9efd	20 a2 a7	jsr $a7a2	                jsr xt_zero
.9f00					_search_loop:
.9f00	18		clc		                clc
.9f01	b5 00		lda $00,x	                lda 0,x
.9f03	75 02		adc $02,x	                adc 2,x
.9f05	85 24		sta $24		                sta tmp1
.9f07	b5 01		lda $01,x	                lda 1,x
.9f09	75 03		adc $03,x	                adc 3,x
.9f0b	d5 07		cmp $07,x	                cmp 7,x
.9f0d	90 12		bcc $9f21	                bcc _init_comparison ; Obviously less
.9f0f	d0 06		bne $9f17	                bne _not_found
.9f11	b5 06		lda $06,x	                lda 6,x
.9f13	c5 24		cmp $24		                cmp tmp1
.9f15	b0 0a		bcs $9f21	                bcs _init_comparison
.9f17					_not_found:
.9f17	e8		inx		                inx             ; Remove offset
.9f18	e8		inx		                inx
.9f19	e8		inx		                inx             ; Remove u2
.9f1a	e8		inx		                inx
.9f1b	74 00		stz $00,x	                stz 0,x         ; Turn addr2 into a false flag
.9f1d	74 01		stz $01,x	                stz 1,x
.9f1f	80 66		bra $9f87	                bra z_search
.9f21					_init_comparison:
.9f21	18		clc		                clc
.9f22	b5 08		lda $08,x	                lda 8,x
.9f24	75 00		adc $00,x	                adc 0,x
.9f26	85 24		sta $24		                sta tmp1
.9f28	b5 09		lda $09,x	                lda 9,x
.9f2a	75 01		adc $01,x	                adc 1,x
.9f2c	85 25		sta $25		                sta tmp1+1
.9f2e	b5 04		lda $04,x	                lda 4,x
.9f30	85 26		sta $26		                sta tmp2
.9f32	b5 05		lda $05,x	                lda 5,x
.9f34	85 27		sta $27		                sta tmp2+1
.9f36	b5 02		lda $02,x	                lda 2,x
.9f38	85 28		sta $28		                sta tmp3
.9f3a	b5 03		lda $03,x	                lda 3,x
.9f3c	85 29		sta $29		                sta tmp3+1
.9f3e					_comparison_loop:
.9f3e	b2 24		lda ($24)	                lda (tmp1)
.9f40	d2 26		cmp ($26)	                cmp (tmp2)
.9f42	f0 05		beq $9f49	                beq _letters_match
.9f44	20 1d 98	jsr $981d	                jsr xt_one_plus
.9f47	80 b7		bra $9f00	                bra _search_loop
.9f49					_letters_match:
.9f49	e6 24		inc $24		                inc tmp1
.9f4b	d0 02		bne $9f4f	                bne +
.9f4d	e6 25		inc $25		                inc tmp1+1
.9f4f					+
.9f4f	e6 26		inc $26		                inc tmp2
.9f51	d0 02		bne $9f55	                bne +
.9f53	e6 27		inc $27		                inc tmp2+1
.9f55					+
.9f55	a5 28		lda $28		                lda tmp3
.9f57	d0 02		bne $9f5b	                bne +
.9f59	c6 29		dec $29		                dec tmp3+1
.9f5b					+
.9f5b	c6 28		dec $28		                dec tmp3
.9f5d	a5 28		lda $28		                lda tmp3
.9f5f	05 29		ora $29		                ora tmp3+1
.9f61	d0 db		bne $9f3e	                bne _comparison_loop ; Check the next letter
.9f63	18		clc		                clc
.9f64	b5 00		lda $00,x	                lda 0,x
.9f66	75 08		adc $08,x	                adc 8,x
.9f68	95 08		sta $08,x	                sta 8,x
.9f6a	b5 01		lda $01,x	                lda 1,x
.9f6c	75 09		adc $09,x	                adc 9,x
.9f6e	95 09		sta $09,x	                sta 9,x
.9f70	38		sec		                sec
.9f71	b5 06		lda $06,x	                lda 6,x
.9f73	f5 00		sbc $00,x	                sbc 0,x
.9f75	95 06		sta $06,x	                sta 6,x
.9f77	b5 07		lda $07,x	                lda 7,x
.9f79	f5 01		sbc $01,x	                sbc 1,x
.9f7b	95 07		sta $07,x	                sta 7,x
.9f7d	e8		inx		                inx             ; drop offset
.9f7e	e8		inx		                inx
.9f7f	e8		inx		                inx             ; drop u2
.9f80	e8		inx		                inx
.9f81	a9 ff		lda #$ff	                lda #$FF
.9f83	95 00		sta $00,x	                sta 0,x         ; Turn addr2 into a true flag.
.9f85	95 01		sta $01,x	                sta 1,x
.9f87	60		rts		z_search:       rts
.9f88					xt_semicolon:
.9f88	24 20		bit $20		                bit status
.9f8a	70 11		bvs $9f9d	                bvs _colonword
.9f8c	a9 60		lda #$60	                lda #$60                ; opcode for RTS
.9f8e	20 dc d6	jsr $d6dc	                jsr cmpl_a
.9f91	ca		dex		                dex
.9f92	ca		dex		                dex
.9f93	a5 04		lda $04		                lda workword
.9f95	95 00		sta $00,x	                sta 0,x
.9f97	a5 05		lda $05		                lda workword+1
.9f99	95 01		sta $01,x	                sta 1,x
.9f9b	80 45		bra $9fe2	                bra _semicolon_done
.9f9d					_colonword:
.9f9d	a0 06		ldy #$06	                ldy #6
.9f9f	a5 00		lda $00		                lda cp
.9fa1	91 04		sta ($04),y	                sta (workword),y
.9fa3	c8		iny		                iny
.9fa4	a5 01		lda $01		                lda cp+1
.9fa6	91 04		sta ($04),y	                sta (workword),y
.9fa8	a9 60		lda #$60	                lda #$60                ; opcode for RTS
.9faa	20 dc d6	jsr $d6dc	                jsr cmpl_a
.9fad	24 20		bit $20		                bit status
.9faf	10 26		bpl $9fd7	                bpl _new_word   ; Bit 7 is clear = new word
.9fb1	ca		dex		                dex
.9fb2	ca		dex		                dex
.9fb3	ca		dex		                dex
.9fb4	ca		dex		                dex
.9fb5	b2 04		lda ($04)	                lda (workword)
.9fb7	95 00		sta $00,x	                sta 0,x
.9fb9	74 01		stz $01,x	                stz 1,x
.9fbb	a5 04		lda $04		                lda workword
.9fbd	18		clc		                clc
.9fbe	69 08		adc #$08	                adc #8
.9fc0	95 02		sta $02,x	                sta 2,x
.9fc2	a5 05		lda $05		                lda workword+1
.9fc4	69 00		adc #$00	                adc #0                  ; only want carry
.9fc6	95 03		sta $03,x	                sta 3,x
.9fc8	a9 02		lda #$02	                lda #str_redefined       ; address of string "redefined"
.9fca	20 55 d8	jsr $d855	                jsr print_string_no_lf
.9fcd	20 fd a4	jsr $a4fd	                jsr xt_type
.9fd0	20 1e a1	jsr $a11e	                jsr xt_space
.9fd3	a9 80		lda #$80	                lda #%10000000
.9fd5	14 20		trb $20		                trb status
.9fd7					_new_word:
.9fd7	a5 04		lda $04		                lda workword
.9fd9	85 02		sta $02		                sta dp
.9fdb	a5 05		lda $05		                lda workword+1
.9fdd	85 03		sta $03		                sta dp+1
.9fdf	20 7e d7	jsr $d77e	                jsr dp_to_current       ; Save the updated DP to the
.9fe2					_semicolon_done:
.9fe2	64 16		stz $16		                stz state
.9fe4	64 17		stz $17		                stz state+1
.9fe6	60		rts		z_semicolon:    rts
.9fe7					xt_sign:
.9fe7	20 29 d8	jsr $d829	                jsr underflow_1
.9fea	b5 01		lda $01,x	                lda 1,x         ; check MSB of TOS
.9fec	30 04		bmi $9ff2	                bmi _minus
.9fee	e8		inx		                inx
.9fef	e8		inx		                inx
.9ff0	80 09		bra $9ffb	                bra _done
.9ff2					_minus:
.9ff2	a9 2d		lda #$2d	                lda #$2D        ; ASCII for "-"
.9ff4	95 00		sta $00,x	                sta 0,x         ; overwrite TOS
.9ff6	74 01		stz $01,x	                stz 1,x         ; paranoid
.9ff8	20 d7 91	jsr $91d7	                jsr xt_hold
.9ffb					_done:
.9ffb	60		rts		z_sign:         rts
.9ffc					xt_slash:
.9ffc	a9 00		lda #$00	                lda #0
.9ffe	48		pha		                pha
.9fff	80 03		bra $a004	                bra slashmod_common
.a001					xt_slash_mod:
.a001	a9 ff		lda #$ff	                lda #$FF
.a003	48		pha		                pha             ; falls through to _common
.a004					slashmod_common:
.a004	20 6a a3	jsr $a36a	                jsr xt_to_r             ; >R
.a007	20 ac 9e	jsr $9eac	                jsr xt_s_to_d           ; S>D
.a00a	20 92 9a	jsr $9a92	                jsr xt_r_from           ; R>
.a00d	20 d5 a0	jsr $a0d5	                jsr xt_sm_slash_rem     ; SM/REM
.a010	68		pla		                pla
.a011	d0 05		bne $a018	                bne _done
.a013	20 a8 a1	jsr $a1a8	                jsr xt_swap
.a016	e8		inx		                inx             ; DROP
.a017	e8		inx		                inx
.a018					_done:
.a018					z_slash_mod:
.a018	60		rts		z_slash:        rts
.a019					xt_slash_string:
.a019	20 33 d8	jsr $d833	                jsr underflow_3
.a01c	18		clc		                clc             ; 3OS+TOS
.a01d	b5 00		lda $00,x	                lda 0,x
.a01f	75 04		adc $04,x	                adc 4,x
.a021	95 04		sta $04,x	                sta 4,x
.a023	b5 01		lda $01,x	                lda 1,x
.a025	75 05		adc $05,x	                adc 5,x
.a027	95 05		sta $05,x	                sta 5,x
.a029	38		sec		                sec             ; NOS-TOS
.a02a	b5 02		lda $02,x	                lda 2,x
.a02c	f5 00		sbc $00,x	                sbc 0,x
.a02e	95 02		sta $02,x	                sta 2,x
.a030	b5 03		lda $03,x	                lda 3,x
.a032	f5 01		sbc $01,x	                sbc 1,x
.a034	95 03		sta $03,x	                sta 3,x
.a036	e8		inx		                inx
.a037	e8		inx		                inx
.a038	60		rts		z_slash_string: rts
.a039					xt_sliteral:
.a039	20 2e d8	jsr $d82e	                jsr underflow_2
.a03c	a9 4c		lda #$4c	                lda #$4C
.a03e	20 dc d6	jsr $d6dc	                jsr cmpl_a
.a041	20 dc d6	jsr $d6dc	                jsr cmpl_a
.a044	20 dc d6	jsr $d6dc	                jsr cmpl_a
.a047	8a		txa		                txa
.a048	38		sec		                sec
.a049	e9 06		sbc #$06	                sbc #6
.a04b	aa		tax		                tax
.a04c	b5 08		lda $08,x	                lda 8,x
.a04e	95 04		sta $04,x	                sta 4,x
.a050	b5 09		lda $09,x	                lda 9,x
.a052	95 05		sta $05,x	                sta 5,x
.a054	b5 06		lda $06,x	                lda 6,x
.a056	95 00		sta $00,x	                sta 0,x
.a058	b5 07		lda $07,x	                lda 7,x
.a05a	95 01		sta $01,x	                sta 1,x
.a05c	a5 00		lda $00		                lda cp
.a05e	95 08		sta $08,x	                sta 8,x
.a060	95 02		sta $02,x	                sta 2,x
.a062	a5 01		lda $01		                lda cp+1
.a064	95 09		sta $09,x	                sta 9,x
.a066	95 03		sta $03,x	                sta 3,x
.a068	20 c2 95	jsr $95c2	                jsr xt_move
.a06b	18		clc		                clc
.a06c	a5 00		lda $00		                lda cp
.a06e	75 00		adc $00,x	                adc 0,x
.a070	85 00		sta $00		                sta cp
.a072	a5 01		lda $01		                lda cp+1
.a074	75 01		adc $01,x	                adc 1,x
.a076	85 01		sta $01		                sta cp+1
.a078	b5 02		lda $02,x	                lda 2,x
.a07a	38		sec		                sec
.a07b	e9 02		sbc #$02	                sbc #2
.a07d	85 24		sta $24		                sta tmp1
.a07f	b5 03		lda $03,x	                lda 3,x
.a081	e9 00		sbc #$00	                sbc #0          ; Propagate borrow
.a083	85 25		sta $25		                sta tmp1+1
.a085	a5 00		lda $00		                lda cp
.a087	92 24		sta ($24)	                sta (tmp1)
.a089	a0 01		ldy #$01	                ldy #1
.a08b	a5 01		lda $01		                lda cp+1
.a08d	91 24		sta ($24),y	                sta (tmp1),y
.a08f					sliteral_const_str:
.a08f	a0 a0		ldy #$a0	                ldy #>sliteral_runtime
.a091	a9 a9		lda #$a9	                lda #<sliteral_runtime
.a093	20 cc d6	jsr $d6cc	                jsr cmpl_subroutine
.a096	b4 03		ldy $03,x	                ldy 3,x                ; address MSB
.a098	b5 02		lda $02,x	                lda 2,x                ; address LSB
.a09a	20 d8 d6	jsr $d6d8	                jsr cmpl_word
.a09d	b4 01		ldy $01,x	                ldy 1,x                ; length MSB
.a09f	b5 00		lda $00,x	                lda 0,x                ; length LSB
.a0a1	20 d8 d6	jsr $d6d8	                jsr cmpl_word
.a0a4	e8		inx		                inx
.a0a5	e8		inx		                inx
.a0a6	e8		inx		                inx
.a0a7	e8		inx		                inx
.a0a8	60		rts		z_sliteral:     rts
.a0a9					sliteral_runtime:
.a0a9	ca		dex		                dex
.a0aa	ca		dex		                dex
.a0ab	ca		dex		                dex
.a0ac	ca		dex		                dex
.a0ad	68		pla		                pla
.a0ae	85 24		sta $24		                sta tmp1        ; LSB of address
.a0b0	68		pla		                pla
.a0b1	85 25		sta $25		                sta tmp1+1      ; MSB of address
.a0b3	a0 01		ldy #$01	                ldy #1          ; adjust for JSR/RTS mechanics on 65c02
.a0b5	b1 24		lda ($24),y	                lda (tmp1),y
.a0b7	95 02		sta $02,x	                sta 2,x         ; LSB of address
.a0b9	c8		iny		                iny
.a0ba	b1 24		lda ($24),y	                lda (tmp1),y
.a0bc	95 03		sta $03,x	                sta 3,x         ; MSB of address
.a0be	c8		iny		                iny
.a0bf	b1 24		lda ($24),y	                lda (tmp1),y
.a0c1	95 00		sta $00,x	                sta 0,x         ; LSB of length
.a0c3	c8		iny		                iny
.a0c4	b1 24		lda ($24),y	                lda (tmp1),y
.a0c6	95 01		sta $01,x	                sta 1,x         ; MSB of length
.a0c8	18		clc		                clc
.a0c9	a5 24		lda $24		                lda tmp1
.a0cb	69 04		adc #$04	                adc #4
.a0cd	a8		tay		                tay             ; LSB
.a0ce	a5 25		lda $25		                lda tmp1+1
.a0d0	69 00		adc #$00	                adc #0          ; we only need carry
.a0d2	48		pha		                pha             ; MSB
.a0d3	5a		phy		                phy
.a0d4	60		rts		                rts
.a0d5					xt_sm_slash_rem:
.a0d5	20 33 d8	jsr $d833	                jsr underflow_3 ; contains double number
.a0d8	b5 03		lda $03,x	                lda 3,x
.a0da	48		pha		                pha
.a0db	b5 01		lda $01,x	                lda 1,x
.a0dd	55 03		eor $03,x	                eor 3,x
.a0df	48		pha		                pha
.a0e0	20 39 81	jsr $8139	                jsr xt_abs
.a0e3	e8		inx		                inx             ; pretend we pushed n1 to R
.a0e4	e8		inx		                inx
.a0e5	20 86 8a	jsr $8a86	                jsr xt_dabs
.a0e8	ca		dex		                dex
.a0e9	ca		dex		                dex
.a0ea	20 b4 a5	jsr $a5b4	                jsr xt_um_slash_mod     ; UM/MOD
.a0ed	68		pla		                pla
.a0ee	10 03		bpl $a0f3	                bpl +
.a0f0	20 23 96	jsr $9623	                jsr xt_negate
.a0f3					+
.a0f3	68		pla		                pla
.a0f4	10 07		bpl $a0fd	                bpl _done
.a0f6	e8		inx		                inx             ; pretend we pushed quotient to R
.a0f7	e8		inx		                inx
.a0f8	20 23 96	jsr $9623	                jsr xt_negate
.a0fb	ca		dex		                dex
.a0fc	ca		dex		                dex
.a0fd					_done:
.a0fd	60		rts		z_sm_slash_rem: rts
.a0fe					xt_source:
.a0fe	ca		dex		                dex
.a0ff	ca		dex		                dex
.a100	a5 08		lda $08		                lda cib
.a102	95 00		sta $00,x	                sta 0,x
.a104	a5 09		lda $09		                lda cib+1
.a106	95 01		sta $01,x	                sta 1,x
.a108	ca		dex		                dex
.a109	ca		dex		                dex
.a10a	a5 0a		lda $0a		                lda ciblen
.a10c	95 00		sta $00,x	                sta 0,x
.a10e	a5 0b		lda $0b		                lda ciblen+1
.a110	95 01		sta $01,x	                sta 1,x
.a112	60		rts		z_source:       rts
.a113					xt_source_id:
.a113	ca		dex		                dex
.a114	ca		dex		                dex
.a115	a5 06		lda $06		                lda insrc
.a117	95 00		sta $00,x	                sta 0,x
.a119	a5 07		lda $07		                lda insrc+1
.a11b	95 01		sta $01,x	                sta 1,x
.a11d	60		rts		z_source_id:    rts
.a11e					xt_space:
.a11e	a9 20		lda #$20	                lda #AscSP
.a120	20 f6 8d	jsr $8df6	                jsr emit_a
.a123	60		rts		z_space:        rts
.a124					xt_spaces:
.a124	20 29 d8	jsr $d829	                jsr underflow_1
.a127	b5 00		lda $00,x	                lda 0,x
.a129	15 01		ora $01,x	                ora 1,x
.a12b	f0 2a		beq $a157	                beq _done
.a12d	b4 01		ldy $01,x	                ldy 1,x
.a12f	d0 0c		bne $a13d	                bne _lots_of_spaces
.a131	b4 00		ldy $00,x	                ldy 0,x
.a133					_quick_loop:
.a133	a9 20		lda #$20	                lda #AscSP
.a135	20 f6 8d	jsr $8df6	                jsr emit_a
.a138	88		dey		                dey
.a139	f0 1c		beq $a157	                beq _done
.a13b	80 f6		bra $a133	                bra _quick_loop
.a13d					_lots_of_spaces:
.a13d	b4 00		ldy $00,x	                ldy 0,x
.a13f					_first_slow_loop:
.a13f	f0 08		beq $a149	                beq _slow_outer_loop
.a141	a9 20		lda #$20	                lda #AscSP
.a143	20 f6 8d	jsr $8df6	                jsr emit_a
.a146	88		dey		                dey
.a147	80 f6		bra $a13f	                bra _first_slow_loop
.a149					_slow_outer_loop:
.a149	a0 00		ldy #$00	                ldy #00
.a14b					_slow_inner_loop:
.a14b	a9 20		lda #$20	                lda #AscSP
.a14d	20 f6 8d	jsr $8df6	                jsr emit_a
.a150	88		dey		                dey
.a151	d0 f8		bne $a14b	                bne _slow_inner_loop
.a153	d6 01		dec $01,x	                dec 1,x
.a155	d0 f2		bne $a149	                bne _slow_outer_loop
.a157					_done:
.a157	e8		inx		                inx             ; drop
.a158	e8		inx		                inx
.a159	60		rts		z_spaces:       rts
.a15a					xt_star:
.a15a	20 2e d8	jsr $d82e	                jsr underflow_2
.a15d	20 f6 a5	jsr $a5f6	                jsr xt_um_star
.a160	e8		inx		                inx
.a161	e8		inx		                inx
.a162	60		rts		z_star:         rts
.a163					xt_star_slash:
.a163	20 6c a1	jsr $a16c	                jsr xt_star_slash_mod
.a166	20 a8 a1	jsr $a1a8	                jsr xt_swap
.a169	e8		inx		                inx
.a16a	e8		inx		                inx
.a16b					z_star_slash:
.a16b	60		rts		                rts
.a16c					xt_star_slash_mod:
.a16c	20 33 d8	jsr $d833	                jsr underflow_3
.a16f	20 6a a3	jsr $a36a	                jsr xt_to_r
.a172	20 8e 94	jsr $948e	                jsr xt_m_star
.a175	20 92 9a	jsr $9a92	                jsr xt_r_from
.a178	20 d5 a0	jsr $a0d5	                jsr xt_sm_slash_rem
.a17b					z_star_slash_mod:
.a17b	60		rts		                rts
.a17c					xt_state:
.a17c	ca		dex		                dex
.a17d	ca		dex		                dex
.a17e	a9 16		lda #$16	                lda #<state
.a180	95 00		sta $00,x	                sta 0,x
.a182	a9 00		lda #$00	                lda #>state
.a184	95 01		sta $01,x	                sta 1,x
.a186	60		rts		z_state:        rts
.a187					xt_store:
.a187	20 2e d8	jsr $d82e	                jsr underflow_2
.a18a	b5 02		lda $02,x	                lda 2,x         ; LSB
.a18c	81 00		sta ($00,x)	                sta (0,x)
.a18e	f6 00		inc $00,x	                inc 0,x
.a190	d0 02		bne $a194	                bne +
.a192	f6 01		inc $01,x	                inc 1,x
.a194					+
.a194	b5 03		lda $03,x	                lda 3,x         ; MSB
.a196	81 00		sta ($00,x)	                sta (0,x)
.a198	e8		inx		                inx             ; 2DROP
.a199	e8		inx		                inx
.a19a	e8		inx		                inx
.a19b	e8		inx		                inx
.a19c	60		rts		z_store:        rts
.a19d					xt_strip_underflow:
.a19d	ca		dex		                dex
.a19e	ca		dex		                dex
.a19f	a9 1c		lda #$1c	                lda #<uf_strip
.a1a1	95 00		sta $00,x	                sta 0,x
.a1a3	a9 00		lda #$00	                lda #>uf_strip
.a1a5	95 01		sta $01,x	                sta 1,x
.a1a7					z_strip_underflow:
.a1a7	60		rts		                rts
.a1a8					xt_swap:
.a1a8	20 2e d8	jsr $d82e	                jsr underflow_2
.a1ab	b5 00		lda $00,x	                lda 0,x         ; LSB
.a1ad	b4 02		ldy $02,x	                ldy 2,x
.a1af	95 02		sta $02,x	                sta 2,x
.a1b1	94 00		sty $00,x	                sty 0,x
.a1b3	b5 01		lda $01,x	                lda 1,x         ; MSB
.a1b5	b4 03		ldy $03,x	                ldy 3,x
.a1b7	95 03		sta $03,x	                sta 3,x
.a1b9	94 01		sty $01,x	                sty 1,x
.a1bb	60		rts		z_swap:         rts
.a1bc					xt_then:
.a1bc	20 72 91	jsr $9172	                jsr xt_here
.a1bf	20 a8 a1	jsr $a1a8	                jsr xt_swap
.a1c2	20 87 a1	jsr $a187	                jsr xt_store
.a1c5	60		rts		z_then:         rts
.a1c6					xt_thru:
.a1c6	20 2e d8	jsr $d82e	                jsr underflow_2
.a1c9	b5 01		lda $01,x	                lda 1,x
.a1cb	48		pha		                pha
.a1cc	b5 00		lda $00,x	                lda 0,x
.a1ce	48		pha		                pha
.a1cf	e8		inx		                inx
.a1d0	e8		inx		                inx
.a1d1					_thru_loop:
.a1d1	b5 01		lda $01,x	                lda 1,x
.a1d3	48		pha		                pha
.a1d4	b5 00		lda $00,x	                lda 0,x
.a1d6	48		pha		                pha
.a1d7	20 b7 93	jsr $93b7	                jsr xt_load
.a1da	68		pla		                pla
.a1db	85 24		sta $24		                sta tmp1
.a1dd	68		pla		                pla
.a1de	85 25		sta $25		                sta tmp1+1
.a1e0	68		pla		                pla
.a1e1	85 26		sta $26		                sta tmp2
.a1e3	68		pla		                pla
.a1e4	85 27		sta $27		                sta tmp2+1
.a1e6	c5 25		cmp $25		                cmp tmp1+1
.a1e8	d0 08		bne $a1f2	                bne _next_screen
.a1ea	a5 26		lda $26		                lda tmp2        ; Compare the LSB
.a1ec	c5 24		cmp $24		                cmp tmp1
.a1ee	d0 02		bne $a1f2	                bne _next_screen
.a1f0	80 18		bra $a20a	                bra _done       ; We just did the last screen.
.a1f2					_next_screen:
.a1f2	a5 27		lda $27		                lda tmp2+1
.a1f4	48		pha		                pha
.a1f5	a5 26		lda $26		                lda tmp2
.a1f7	48		pha		                pha
.a1f8	e6 24		inc $24		                inc tmp1
.a1fa	d0 02		bne $a1fe	                bne +
.a1fc	e6 25		inc $25		                inc tmp1+1
.a1fe					+
.a1fe	ca		dex		                dex
.a1ff	ca		dex		                dex
.a200	a5 24		lda $24		                lda tmp1
.a202	95 00		sta $00,x	                sta 0,x
.a204	a5 25		lda $25		                lda tmp1+1
.a206	95 01		sta $01,x	                sta 1,x
.a208	80 c7		bra $a1d1	                bra _thru_loop
.a20a					_done:
.a20a	60		rts		z_thru:         rts
.a20b					xt_tick:
.a20b	20 df 98	jsr $98df	                jsr xt_parse_name       ; ( -- addr u )
.a20e	b5 00		lda $00,x	                lda 0,x
.a210	15 01		ora $01,x	                ora 1,x
.a212	d0 05		bne $a219	                bne +
.a214	a9 05		lda #$05	                lda #err_noname
.a216	4c 3f d8	jmp $d83f	                jmp error
.a219					+
.a219	20 db 8f	jsr $8fdb	                jsr xt_find_name        ; ( addr u -- nt )
.a21c	b5 00		lda $00,x	                lda 0,x
.a21e	15 01		ora $01,x	                ora 1,x
.a220	d0 05		bne $a227	                bne +
.a222	a9 08		lda #$08	                lda #err_syntax
.a224	4c 3f d8	jmp $d83f	                jmp error
.a227					+
.a227	20 e1 95	jsr $95e1	                jsr xt_name_to_int      ; ( nt -- xt )
.a22a	60		rts		z_tick:         rts
.a22b					xt_to:
.a22b	20 0b a2	jsr $a20b	                jsr xt_tick             ; ( [n] xt )
.a22e	b5 00		lda $00,x	                lda 0,x                 ; LSB
.a230	18		clc		                clc
.a231	69 03		adc #$03	                adc #3
.a233	85 24		sta $24		                sta tmp1
.a235	b5 01		lda $01,x	                lda 1,x                 ; MSB
.a237	69 00		adc #$00	                adc #0                  ; we just want the carry
.a239	85 25		sta $25		                sta tmp1+1
.a23b	e8		inx		                inx
.a23c	e8		inx		                inx                     ; ( [n] )
.a23d	a5 16		lda $16		                lda state
.a23f	05 17		ora $17		                ora state+1
.a241	f0 34		beq $a277	                beq _interpret
.a243	a0 00		ldy #$00	                ldy #$00                ; Code for LDA 0,X
.a245	a9 b5		lda #$b5	                lda #$B5
.a247	20 d8 d6	jsr $d6d8	                jsr cmpl_word
.a24a	a9 8d		lda #$8d	                lda #$8D                ; Code for STA abs
.a24c	20 dc d6	jsr $d6dc	                jsr cmpl_a
.a24f	a4 25		ldy $25		                ldy tmp1+1              ; MSB goes in Y
.a251	a5 24		lda $24		                lda tmp1
.a253	20 d8 d6	jsr $d6d8	                jsr cmpl_word
.a256	a0 01		ldy #$01	                ldy #$01                ; Code for LDA 1,X
.a258	a9 b5		lda #$b5	                lda #$B5
.a25a	20 d8 d6	jsr $d6d8	                jsr cmpl_word
.a25d	a9 8d		lda #$8d	                lda #$8D                ; Code for STA abs
.a25f	20 dc d6	jsr $d6dc	                jsr cmpl_a
.a262	e6 24		inc $24		                inc tmp1                ; Calculate MSB
.a264	d0 02		bne $a268	                bne +
.a266	e6 25		inc $25		                inc tmp1+1
.a268					+
.a268	a4 25		ldy $25		                ldy tmp1+1              ; MSB goes in Y
.a26a	a5 24		lda $24		                lda tmp1
.a26c	20 d8 d6	jsr $d6d8	                jsr cmpl_word
.a26f	a0 e8		ldy #$e8	                ldy #$E8                ; Code for INX
.a271	98		tya		                tya
.a272	20 d8 d6	jsr $d6d8	                jsr cmpl_word
.a275	80 0f		bra $a286	                bra _done
.a277					_interpret:
.a277	20 29 d8	jsr $d829	                jsr underflow_1
.a27a	b5 00		lda $00,x	                lda 0,x
.a27c	92 24		sta ($24)	                sta (tmp1)              ; LSB
.a27e	a0 01		ldy #$01	                ldy #1
.a280	b5 01		lda $01,x	                lda 1,x                 ; MSB
.a282	91 24		sta ($24),y	                sta (tmp1),y            ; fall through to common
.a284	e8		inx		                inx                     ; DROP
.a285	e8		inx		                inx
.a286					_done:
.a286	60		rts		z_to:           rts
.a287					xt_to_body:
.a287	20 29 d8	jsr $d829	                jsr underflow_1
.a28a	20 af 8d	jsr $8daf	                jsr xt_dup              ; ( xt xt )
.a28d	20 78 92	jsr $9278	                jsr xt_int_to_name      ; ( xt nt )
.a290	f6 00		inc $00,x	                inc 0,x
.a292	d0 02		bne $a296	                bne +
.a294	f6 01		inc $01,x	                inc 1,x
.a296					+
.a296	a1 00		lda ($00,x)	                lda (0,x)               ; get status byte
.a298	29 20		and #$20	                and #HC
.a29a	f0 0d		beq $a2a9	                beq _no_cfa
.a29c	18		clc		                clc
.a29d	b5 02		lda $02,x	                lda 2,x         ; LSB
.a29f	69 03		adc #$03	                adc #3
.a2a1	95 02		sta $02,x	                sta 2,x
.a2a3	b5 03		lda $03,x	                lda 3,x         ; MSB
.a2a5	69 00		adc #$00	                adc #0          ; we conly care about the carry
.a2a7	95 03		sta $03,x	                sta 3,x         ; Fall through to _no_cfa
.a2a9					_no_cfa:
.a2a9	e8		inx		                inx             ; get rid of the nt
.a2aa	e8		inx		                inx
.a2ab					_done:
.a2ab	60		rts		z_to_body:      rts
.a2ac					xt_to_in:
.a2ac	ca		dex		                dex
.a2ad	ca		dex		                dex
.a2ae	a9 0c		lda #$0c	                lda #<toin
.a2b0	95 00		sta $00,x	                sta 0,x
.a2b2	a9 00		lda #$00	                lda #>toin      ; paranoid, should be zero
.a2b4	95 01		sta $01,x	                sta 1,x
.a2b6	60		rts		z_to_in:        rts
.a2b7					xt_to_number:
.a2b7	20 38 d8	jsr $d838	                jsr underflow_4
.a2ba	b5 06		lda $06,x	                lda 6,x         ; ud-lo LSB
.a2bc	85 36		sta $36		                sta scratch
.a2be	b5 07		lda $07,x	                lda 7,x         ; ud-lo MSB
.a2c0	85 37		sta $37		                sta scratch+1
.a2c2	b5 04		lda $04,x	                lda 4,x         ; ud-hi LSB
.a2c4	85 38		sta $38		                sta scratch+2
.a2c6	b5 05		lda $05,x	                lda 5,x         ; ud-hi MSB
.a2c8	85 39		sta $39		                sta scratch+3
.a2ca	ca		dex		                dex
.a2cb	ca		dex		                dex
.a2cc					_loop:
.a2cc	a1 04		lda ($04,x)	                lda (4,x)
.a2ce	95 00		sta $00,x	                sta 0,x                 ; ( ud-lo ud-hi addr u char )
.a2d0	74 01		stz $01,x	                stz 1,x                 ; paranoid
.a2d2	20 05 8b	jsr $8b05	                jsr xt_digit_question   ; ( char -- n -1 | char 0 )
.a2d5	b5 00		lda $00,x	                lda 0,x
.a2d7	d0 04		bne $a2dd	                bne _digit_ok
.a2d9	e8		inx		                inx
.a2da	e8		inx		                inx
.a2db	80 67		bra $a344	                bra _done       ; ( ud-lo ud-hi addr u char )
.a2dd					_digit_ok:
.a2dd	b5 02		lda $02,x	                lda 2,x
.a2df	85 3a		sta $3a		                sta scratch+4
.a2e1	b5 03		lda $03,x	                lda 3,x
.a2e3	85 3b		sta $3b		                sta scratch+5
.a2e5	a5 38		lda $38		                lda scratch+2
.a2e7	95 02		sta $02,x	                sta 2,x         ; NOS
.a2e9	a5 39		lda $39		                lda scratch+3
.a2eb	95 03		sta $03,x	                sta 3,x
.a2ed	a5 18		lda $18		                lda base
.a2ef	95 00		sta $00,x	                sta 0,x         ; TOS
.a2f1	74 01		stz $01,x	                stz 1,x         ; now ( ud-lo ud-hi addr u ud-hi base)
.a2f3	20 f6 a5	jsr $a5f6	                jsr xt_um_star  ; ( ud-lo ud-hi addr u ud-hi-lo ud-hi-hi )
.a2f6	b5 02		lda $02,x	                lda 2,x         ; ud-hi-lo
.a2f8	85 3c		sta $3c		                sta scratch+6
.a2fa	b5 03		lda $03,x	                lda 3,x
.a2fc	85 3d		sta $3d		                sta scratch+7
.a2fe	a5 36		lda $36		                lda scratch
.a300	95 02		sta $02,x	                sta 2,x
.a302	a5 37		lda $37		                lda scratch+1
.a304	95 03		sta $03,x	                sta 3,x         ; ( ud-lo ud-hi addr u ud-lo ud-hi-hi )
.a306	a5 18		lda $18		                lda base
.a308	95 00		sta $00,x	                sta 0,x
.a30a	74 01		stz $01,x	                stz 1,x         ; ( ud-lo ud-hi addr u ud-lo base )
.a30c	20 f6 a5	jsr $a5f6	                jsr xt_um_star  ; ( ud-lo ud-hi addr u ud-lo-lo ud-lo-hi )
.a30f	b5 00		lda $00,x	                lda 0,x
.a311	85 38		sta $38		                sta scratch+2
.a313	b5 01		lda $01,x	                lda 1,x
.a315	85 39		sta $39		                sta scratch+3
.a317	b5 02		lda $02,x	                lda 2,x
.a319	85 36		sta $36		                sta scratch
.a31b	b5 03		lda $03,x	                lda 3,x
.a31d	85 37		sta $37		                sta scratch+1
.a31f	18		clc		                clc
.a320	a5 36		lda $36		                lda scratch     ; ud-lo LSB
.a322	65 3a		adc $3a		                adc scratch+4   ; n LSB
.a324	85 36		sta $36		                sta scratch     ; this is the new ud-lo
.a326	a5 37		lda $37		                lda scratch+1   ; ud-lo MSB
.a328	65 3b		adc $3b		                adc scratch+5   ; n MSB
.a32a	85 37		sta $37		                sta scratch+1
.a32c	a5 38		lda $38		                lda scratch+2   ; LSB
.a32e	65 3c		adc $3c		                adc scratch+6
.a330	85 38		sta $38		                sta scratch+2   ; this is the new ud-hi
.a332	a5 39		lda $39		                lda scratch+3   ; MSB
.a334	65 3d		adc $3d		                adc scratch+7
.a336	85 39		sta $39		                sta scratch+3
.a338	e8		inx		                inx
.a339	e8		inx		                inx             ; ( ud-lo ud-hi addr u ud-lo-lo )
.a33a	f6 04		inc $04,x	                inc 4,x
.a33c	d0 02		bne $a340	                bne +
.a33e	f6 05		inc $05,x	                inc 5,x
.a340					+
.a340	d6 02		dec $02,x	                dec 2,x
.a342	d0 88		bne $a2cc	                bne _loop
.a344					_done:
.a344	e8		inx		                inx
.a345	e8		inx		                inx             ; ( ud-lo ud-hi addr u )
.a346	a5 36		lda $36		                lda scratch     ; new ud-lo
.a348	95 06		sta $06,x	                sta 6,x
.a34a	a5 37		lda $37		                lda scratch+1
.a34c	95 07		sta $07,x	                sta 7,x
.a34e	a5 38		lda $38		                lda scratch+2
.a350	95 04		sta $04,x	                sta 4,x
.a352	a5 39		lda $39		                lda scratch+3
.a354	95 05		sta $05,x	                sta 5,x
.a356	60		rts		z_to_number:    rts
.a357					xt_to_order:
.a357	20 6a a3	jsr $a36a	                jsr xt_to_r
.a35a	20 34 91	jsr $9134	                jsr xt_get_order
.a35d	20 92 9a	jsr $9a92	                jsr xt_r_from
.a360	20 a8 a1	jsr $a1a8	                jsr xt_swap
.a363	20 1d 98	jsr $981d	                jsr xt_one_plus
.a366	20 1b 9d	jsr $9d1b	                jsr xt_set_order
.a369	60		rts		z_to_order:     rts
.a36a					xt_to_r:
.a36a	68		pla		                pla             ; LSB
.a36b	85 2c		sta $2c		                sta tmptos
.a36d	7a		ply		                ply             ; MSB
.a36e	20 29 d8	jsr $d829	                jsr underflow_1
.a371	b5 01		lda $01,x	                lda 1,x         ; MSB
.a373	48		pha		                pha
.a374	b5 00		lda $00,x	                lda 0,x         ; LSB
.a376	48		pha		                pha
.a377	e8		inx		                inx
.a378	e8		inx		                inx
.a379	5a		phy		                phy             ; MSB
.a37a	a5 2c		lda $2c		                lda tmptos
.a37c	48		pha		                pha             ; LSB
.a37d	60		rts		z_to_r:         rts
.a37e					xt_true:
.a37e	ca		dex		                dex
.a37f	ca		dex		                dex
.a380	a9 ff		lda #$ff	                lda #$FF
.a382	95 00		sta $00,x	                sta 0,x
.a384	95 01		sta $01,x	                sta 1,x
.a386	60		rts		z_true:         rts
.a387					xt_tuck:
.a387	20 2e d8	jsr $d82e	                jsr underflow_2
.a38a	ca		dex		                dex
.a38b	ca		dex		                dex
.a38c	b4 04		ldy $04,x	                ldy 4,x         ; LSB
.a38e	b5 02		lda $02,x	                lda 2,x
.a390	95 04		sta $04,x	                sta 4,x
.a392	94 02		sty $02,x	                sty 2,x
.a394	95 00		sta $00,x	                sta 0,x
.a396	b4 05		ldy $05,x	                ldy 5,x         ; MSB
.a398	b5 03		lda $03,x	                lda 3,x
.a39a	95 05		sta $05,x	                sta 5,x
.a39c	94 03		sty $03,x	                sty 3,x         ; bba
.a39e	95 01		sta $01,x	                sta 1,x         ; baa
.a3a0	60		rts		z_tuck:         rts
.a3a1					xt_assembler_wordlist:
.a3a1					xt_two:
.a3a1	ca		dex		                dex
.a3a2	ca		dex		                dex
.a3a3	a9 02		lda #$02	                lda #2
.a3a5	95 00		sta $00,x	                sta 0,x
.a3a7	74 01		stz $01,x	                stz 1,x
.a3a9					z_assembler_wordlist:
.a3a9	60		rts		z_two:          rts
.a3aa					xt_two_drop:
.a3aa	20 2e d8	jsr $d82e	                jsr underflow_2
.a3ad	e8		inx		                inx
.a3ae	e8		inx		                inx
.a3af	e8		inx		                inx
.a3b0	e8		inx		                inx
.a3b1	60		rts		z_two_drop:     rts
.a3b2					xt_two_dup:
.a3b2	20 2e d8	jsr $d82e	                jsr underflow_2
.a3b5	ca		dex		                dex
.a3b6	ca		dex		                dex
.a3b7	ca		dex		                dex
.a3b8	ca		dex		                dex
.a3b9	b5 04		lda $04,x	                lda 4,x         ; TOS
.a3bb	95 00		sta $00,x	                sta 0,x
.a3bd	b5 05		lda $05,x	                lda 5,x
.a3bf	95 01		sta $01,x	                sta 1,x
.a3c1	b5 06		lda $06,x	                lda 6,x         ; NOS
.a3c3	95 02		sta $02,x	                sta 2,x
.a3c5	b5 07		lda $07,x	                lda 7,x
.a3c7	95 03		sta $03,x	                sta 3,x
.a3c9	60		rts		z_two_dup:      rts
.a3ca					xt_two_fetch:
.a3ca	20 29 d8	jsr $d829	                jsr underflow_1
.a3cd	b5 00		lda $00,x	                lda 0,x
.a3cf	85 24		sta $24		                sta tmp1
.a3d1	b4 01		ldy $01,x	                ldy 1,x
.a3d3	84 25		sty $25		                sty tmp1+1
.a3d5	ca		dex		                dex             ; reuse one stack element
.a3d6	ca		dex		                dex
.a3d7	b2 24		lda ($24)	                lda (tmp1)      ; copy LSB
.a3d9	95 00		sta $00,x	                sta 0,x
.a3db	a0 01		ldy #$01	                ldy #1          ; copy next
.a3dd	b1 24		lda ($24),y	                lda (tmp1),y
.a3df	95 01		sta $01,x	                sta 1,x
.a3e1	c8		iny		                iny             ; copy next
.a3e2	b1 24		lda ($24),y	                lda (tmp1),y
.a3e4	95 02		sta $02,x	                sta 2,x
.a3e6	c8		iny		                iny             ; copy next
.a3e7	b1 24		lda ($24),y	                lda (tmp1),y
.a3e9	95 03		sta $03,x	                sta 3,x
.a3eb	60		rts		z_two_fetch:    rts
.a3ec					xt_two_over:
.a3ec	20 38 d8	jsr $d838	                jsr underflow_4
.a3ef	ca		dex		                dex
.a3f0	ca		dex		                dex
.a3f1	ca		dex		                dex
.a3f2	ca		dex		                dex
.a3f3	b5 08		lda $08,x	                lda 8,x
.a3f5	95 00		sta $00,x	                sta 0,x
.a3f7	b5 09		lda $09,x	                lda 9,x
.a3f9	95 01		sta $01,x	                sta 1,x
.a3fb	b5 0a		lda $0a,x	                lda 10,x
.a3fd	95 02		sta $02,x	                sta 2,x
.a3ff	b5 0b		lda $0b,x	                lda 11,x
.a401	95 03		sta $03,x	                sta 3,x
.a403	60		rts		z_two_over:     rts
.a404					xt_two_r_fetch:
.a404	ca		dex		                dex
.a405	ca		dex		                dex
.a406	ca		dex		                dex
.a407	ca		dex		                dex
.a408	8a		txa		                txa
.a409	ba		tsx		                tsx
.a40a	da		phx		                phx             ; 65c02 has no TXY, so do it the hard way
.a40b	7a		ply		                ply
.a40c	aa		tax		                tax
.a40d	b9 03 01	lda $0103,y	                lda $0103,y     ; LSB of top entry
.a410	95 00		sta $00,x	                sta 0,x
.a412	b9 04 01	lda $0104,y	                lda $0104,y     ; MSB of top entry
.a415	95 01		sta $01,x	                sta 1,x
.a417	b9 05 01	lda $0105,y	                lda $0105,y     ; LSB of bottom entry
.a41a	95 02		sta $02,x	                sta 2,x
.a41c	b9 06 01	lda $0106,y	                lda $0106,y     ; MSB of top entry
.a41f	95 03		sta $03,x	                sta 3,x
.a421	60		rts		z_two_r_fetch:  rts
.a422					xt_two_r_from:
.a422	68		pla		                pla                     ; LSB
.a423	85 24		sta $24		                sta tmp1
.a425	68		pla		                pla                     ; MSB
.a426	85 25		sta $25		                sta tmp1+1
.a428	ca		dex		                dex
.a429	ca		dex		                dex
.a42a	ca		dex		                dex
.a42b	ca		dex		                dex
.a42c	68		pla		                pla                     ; LSB
.a42d	95 00		sta $00,x	                sta 0,x
.a42f	68		pla		                pla                     ; MSB
.a430	95 01		sta $01,x	                sta 1,x
.a432	68		pla		                pla                     ; LSB
.a433	95 02		sta $02,x	                sta 2,x
.a435	68		pla		                pla                     ; MSB
.a436	95 03		sta $03,x	                sta 3,x
.a438	a5 25		lda $25		                lda tmp1+1              ; MSB
.a43a	48		pha		                pha
.a43b	a5 24		lda $24		                lda tmp1                ; LSB
.a43d	48		pha		                pha
.a43e	60		rts		z_two_r_from:   rts
.a43f					xt_two_slash:
.a43f	20 29 d8	jsr $d829	                jsr underflow_1
.a442	b5 01		lda $01,x	                lda 1,x
.a444	0a		asl a		                asl                     ; save the sign
.a445	76 01		ror $01,x	                ror 1,x
.a447	76 00		ror $00,x	                ror 0,x
.a449	60		rts		z_two_slash:    rts
.a44a					xt_two_star:
.a44a					xt_cells:
.a44a	20 29 d8	jsr $d829	                jsr underflow_1
.a44d	16 00		asl $00,x	                asl 0,x
.a44f	36 01		rol $01,x	                rol 1,x
.a451					z_cells:
.a451	60		rts		z_two_star:     rts
.a452					xt_two_store:
.a452	20 33 d8	jsr $d833	                jsr underflow_3
.a455	b5 00		lda $00,x	                lda 0,x
.a457	85 24		sta $24		                sta tmp1
.a459	b4 01		ldy $01,x	                ldy 1,x
.a45b	84 25		sty $25		                sty tmp1+1
.a45d	e8		inx		                inx
.a45e	e8		inx		                inx
.a45f	b5 00		lda $00,x	                lda 0,x         ; copy MSB
.a461	92 24		sta ($24)	                sta (tmp1)
.a463	b5 01		lda $01,x	                lda 1,x         ; copy next
.a465	a0 01		ldy #$01	                ldy #1
.a467	91 24		sta ($24),y	                sta (tmp1),y
.a469	b5 02		lda $02,x	                lda 2,x         ; copy next
.a46b	c8		iny		                iny
.a46c	91 24		sta ($24),y	                sta (tmp1),y
.a46e	b5 03		lda $03,x	                lda 3,x         ; copy MSB
.a470	c8		iny		                iny
.a471	91 24		sta ($24),y	                sta (tmp1),y
.a473	e8		inx		                inx             ; 2DROP
.a474	e8		inx		                inx
.a475	e8		inx		                inx
.a476	e8		inx		                inx
.a477	60		rts		z_two_store:    rts
.a478					xt_two_swap:
.a478	20 38 d8	jsr $d838	                jsr underflow_4
.a47b	b5 00		lda $00,x	                lda 0,x
.a47d	b4 04		ldy $04,x	                ldy 4,x
.a47f	95 04		sta $04,x	                sta 4,x
.a481	94 00		sty $00,x	                sty 0,x
.a483	b5 01		lda $01,x	                lda 1,x
.a485	b4 05		ldy $05,x	                ldy 5,x
.a487	95 05		sta $05,x	                sta 5,x
.a489	94 01		sty $01,x	                sty 1,x
.a48b	b5 02		lda $02,x	                lda 2,x
.a48d	b4 06		ldy $06,x	                ldy 6,x
.a48f	95 06		sta $06,x	                sta 6,x
.a491	94 02		sty $02,x	                sty 2,x
.a493	b5 03		lda $03,x	                lda 3,x
.a495	b4 07		ldy $07,x	                ldy 7,x
.a497	95 07		sta $07,x	                sta 7,x
.a499	94 03		sty $03,x	                sty 3,x
.a49b	60		rts		z_two_swap:     rts
.a49c					xt_two_to_r:
.a49c	68		pla		                pla             ; LSB
.a49d	85 24		sta $24		                sta tmp1
.a49f	68		pla		                pla             ; MSB
.a4a0	85 25		sta $25		                sta tmp1+1
.a4a2	20 2e d8	jsr $d82e	                jsr underflow_2
.a4a5	b5 03		lda $03,x	                lda 3,x         ; MSB
.a4a7	48		pha		                pha
.a4a8	b5 02		lda $02,x	                lda 2,x         ; LSB
.a4aa	48		pha		                pha
.a4ab	b5 01		lda $01,x	                lda 1,x         ; MSB
.a4ad	48		pha		                pha
.a4ae	b5 00		lda $00,x	                lda 0,x         ; LSB
.a4b0	48		pha		                pha
.a4b1	e8		inx		                inx
.a4b2	e8		inx		                inx
.a4b3	e8		inx		                inx
.a4b4	e8		inx		                inx
.a4b5	a5 25		lda $25		                lda tmp1+1      ; MSB
.a4b7	48		pha		                pha
.a4b8	a5 24		lda $24		                lda tmp1        ; LSB
.a4ba	48		pha		                pha
.a4bb	60		rts		z_two_to_r:     rts
.a4bc					xt_two_constant:
.a4bc	20 2e d8	jsr $d82e	                jsr underflow_2
.a4bf	20 69 89	jsr $8969	                jsr xt_create
.a4c2	20 a8 a1	jsr $a1a8	                jsr xt_swap
.a4c5	20 6e 87	jsr $876e	                jsr xt_comma
.a4c8	20 6e 87	jsr $876e	                jsr xt_comma
.a4cb	20 04 8c	jsr $8c04	                jsr does_runtime    ; does> turns into these two routines.
.a4ce	20 12 d7	jsr $d712	                jsr dodoes
.a4d1	20 af 8d	jsr $8daf	                jsr xt_dup
.a4d4	20 80 8f	jsr $8f80	                jsr xt_fetch
.a4d7	20 a8 a1	jsr $a1a8	                jsr xt_swap
.a4da	20 21 86	jsr $8621	                jsr xt_cell_plus
.a4dd	20 80 8f	jsr $8f80	                jsr xt_fetch
.a4e0	60		rts		z_two_constant: rts
.a4e1					xt_two_literal:
.a4e1	20 2e d8	jsr $d82e	                jsr underflow_2 ; double number
.a4e4	20 a8 a1	jsr $a1a8	                jsr xt_swap
.a4e7	20 8a 93	jsr $938a	                jsr xt_literal
.a4ea	20 8a 93	jsr $938a	                jsr xt_literal
.a4ed	60		rts		z_two_literal:  rts
.a4ee					xt_two_variable:
.a4ee	20 69 89	jsr $8969	                jsr xt_create
.a4f1	ca		dex		                dex
.a4f2	ca		dex		                dex
.a4f3	a9 04		lda #$04	                lda #4
.a4f5	95 00		sta $00,x	                sta 0,x
.a4f7	74 01		stz $01,x	                stz 1,x
.a4f9	20 ab 82	jsr $82ab	                jsr xt_allot
.a4fc	60		rts		z_two_variable: rts
.a4fd					xt_type:
.a4fd	20 2e d8	jsr $d82e	                jsr underflow_2
.a500	b5 02		lda $02,x	                lda 2,x
.a502	85 24		sta $24		                sta tmp1
.a504	b5 03		lda $03,x	                lda 3,x
.a506	85 25		sta $25		                sta tmp1+1
.a508					_loop:
.a508	b5 00		lda $00,x	                lda 0,x
.a50a	15 01		ora $01,x	                ora 1,x
.a50c	f0 15		beq $a523	                beq _done
.a50e	b2 24		lda ($24)	                lda (tmp1)
.a510	20 f6 8d	jsr $8df6	                jsr emit_a      ; avoids stack foolery
.a513	e6 24		inc $24		                inc tmp1
.a515	d0 02		bne $a519	                bne +
.a517	e6 25		inc $25		                inc tmp1+1
.a519					+
.a519	b5 00		lda $00,x	                lda 0,x
.a51b	d0 02		bne $a51f	                bne +
.a51d	d6 01		dec $01,x	                dec 1,x
.a51f					+
.a51f	d6 00		dec $00,x	                dec 0,x
.a521	80 e5		bra $a508	                bra _loop
.a523					_done:
.a523	e8		inx		                inx
.a524	e8		inx		                inx
.a525	e8		inx		                inx
.a526	e8		inx		                inx
.a527	60		rts		z_type:         rts
.a528					xt_u_dot:
.a528	20 29 d8	jsr $d829	                jsr underflow_1
.a52b	20 75 d8	jsr $d875	                jsr print_u
.a52e	a9 20		lda #$20	                lda #AscSP
.a530	20 f6 8d	jsr $8df6	                jsr emit_a
.a533	60		rts		z_u_dot:        rts
.a534					xt_u_dot_r:
.a534	20 2e d8	jsr $d82e	                jsr underflow_2
.a537	20 6a a3	jsr $a36a	                jsr xt_to_r
.a53a	20 a2 a7	jsr $a7a2	                jsr xt_zero
.a53d	20 5a 93	jsr $935a	                jsr xt_less_number_sign
.a540	20 de 97	jsr $97de	                jsr xt_number_sign_s
.a543	20 bc 97	jsr $97bc	                jsr xt_number_sign_greater
.a546	20 92 9a	jsr $9a92	                jsr xt_r_from
.a549	20 93 98	jsr $9893	                jsr xt_over
.a54c	20 50 95	jsr $9550	                jsr xt_minus
.a54f	20 24 a1	jsr $a124	                jsr xt_spaces
.a552	20 fd a4	jsr $a4fd	                jsr xt_type
.a555	60		rts		z_u_dot_r:      rts
.a556					xt_u_greater_than:
.a556	20 2e d8	jsr $d82e	                jsr underflow_2
.a559	b5 00		lda $00,x	                lda 0,x
.a55b	d5 02		cmp $02,x	                cmp 2,x
.a55d	b5 01		lda $01,x	                lda 1,x
.a55f	f5 03		sbc $03,x	                sbc 3,x
.a561	e8		inx		                inx
.a562	e8		inx		                inx
.a563	a9 00		lda #$00	                lda #0
.a565	69 ff		adc #$ff	                adc #$ff
.a567	95 00		sta $00,x	                sta 0,x         ; store flag
.a569	95 01		sta $01,x	                sta 1,x
.a56b	60		rts		z_u_greater_than:    rts
.a56c					xt_u_less_than:
.a56c	20 2e d8	jsr $d82e	                jsr underflow_2
.a56f	b5 02		lda $02,x	                lda 2,x
.a571	d5 00		cmp $00,x	                cmp 0,x
.a573	b5 03		lda $03,x	                lda 3,x
.a575	f5 01		sbc $01,x	                sbc 1,x
.a577	e8		inx		                inx
.a578	e8		inx		                inx
.a579	a9 00		lda #$00	                lda #0
.a57b	69 ff		adc #$ff	                adc #$ff
.a57d	95 00		sta $00,x	                sta 0,x         ; store flag
.a57f	95 01		sta $01,x	                sta 1,x
.a581	60		rts		z_u_less_than:    rts
.a582					xt_ud_dot:
.a582	20 2e d8	jsr $d82e	                jsr underflow_2 ; double number
.a585	20 5a 93	jsr $935a	                jsr xt_less_number_sign
.a588	20 de 97	jsr $97de	                jsr xt_number_sign_s
.a58b	20 bc 97	jsr $97bc	                jsr xt_number_sign_greater
.a58e	20 fd a4	jsr $a4fd	                jsr xt_type
.a591	20 1e a1	jsr $a11e	                jsr xt_space
.a594	60		rts		z_ud_dot:        rts
.a595					xt_ud_dot_r:
.a595	20 33 d8	jsr $d833	                jsr underflow_3
.a598	20 6a a3	jsr $a36a	                jsr xt_to_r
.a59b	20 5a 93	jsr $935a	                jsr xt_less_number_sign
.a59e	20 de 97	jsr $97de	                jsr xt_number_sign_s
.a5a1	20 bc 97	jsr $97bc	                jsr xt_number_sign_greater
.a5a4	20 92 9a	jsr $9a92	                jsr xt_r_from
.a5a7	20 93 98	jsr $9893	                jsr xt_over
.a5aa	20 50 95	jsr $9550	                jsr xt_minus
.a5ad	20 24 a1	jsr $a124	                jsr xt_spaces
.a5b0	20 fd a4	jsr $a4fd	                jsr xt_type
.a5b3	60		rts		z_ud_dot_r:      rts
.a5b4					xt_um_slash_mod:
.a5b4	20 33 d8	jsr $d833	                jsr underflow_3
.a5b7	b5 00		lda $00,x	                lda 0,x
.a5b9	15 01		ora $01,x	                ora 1,x
.a5bb	d0 05		bne $a5c2	                bne _not_zero
.a5bd	a9 04		lda #$04	                lda #err_divzero
.a5bf	4c 3f d8	jmp $d83f	                jmp error
.a5c2					_not_zero:
.a5c2	a9 11		lda #$11	                lda #17
.a5c4	85 2c		sta $2c		                sta tmptos
.a5c6					_loop:
.a5c6	36 04		rol $04,x	                rol 4,x
.a5c8	36 05		rol $05,x	                rol 5,x
.a5ca	c6 2c		dec $2c		                dec tmptos
.a5cc	f0 22		beq $a5f0	                beq _done
.a5ce	36 02		rol $02,x	                rol 2,x
.a5d0	36 03		rol $03,x	                rol 3,x
.a5d2	64 24		stz $24		                stz tmp1        ; store the bit we got from hi cell (MSB)
.a5d4	26 24		rol $24		                rol tmp1
.a5d6	38		sec		                sec
.a5d7	b5 02		lda $02,x	                lda 2,x
.a5d9	f5 00		sbc $00,x	                sbc 0,x
.a5db	85 25		sta $25		                sta tmp1+1
.a5dd	b5 03		lda $03,x	                lda 3,x
.a5df	f5 01		sbc $01,x	                sbc 1,x
.a5e1	a8		tay		                tay
.a5e2	a5 24		lda $24		                lda tmp1
.a5e4	e9 00		sbc #$00	                sbc #0
.a5e6	90 de		bcc $a5c6	                bcc _loop
.a5e8	a5 25		lda $25		                lda tmp1+1
.a5ea	95 02		sta $02,x	                sta 2,x
.a5ec	94 03		sty $03,x	                sty 3,x         ; used as temp storage
.a5ee	80 d6		bra $a5c6	                bra _loop
.a5f0					_done:
.a5f0	e8		inx		                inx
.a5f1	e8		inx		                inx
.a5f2	20 a8 a1	jsr $a1a8	                jsr xt_swap
.a5f5	60		rts		z_um_slash_mod: rts
.a5f6					xt_um_star:
.a5f6	20 2e d8	jsr $d82e	                jsr underflow_2
.a5f9	18		clc		                clc
.a5fa	b5 00		lda $00,x	                lda 0,x         ; copy TOS to tmp2
.a5fc	e9 00		sbc #$00	                sbc #0
.a5fe	85 26		sta $26		                sta tmp2
.a600	b5 01		lda $01,x	                lda 1,x
.a602	e9 00		sbc #$00	                sbc #0
.a604	90 31		bcc $a637	                bcc _zero       ; is TOS zero?
.a606	85 27		sta $27		                sta tmp2+1
.a608	a9 00		lda #$00	                lda #0
.a60a	85 24		sta $24		                sta tmp1
.a60c	86 28		stx $28		                stx tmp3        ; tested for exit from outer loop
.a60e	ca		dex		                dex
.a60f	ca		dex		                dex
.a610					_outer_loop:
.a610	a0 08		ldy #$08	                ldy #8          ; counter inner loop
.a612	56 04		lsr $04,x	                lsr 4,x         ; think "2,x" then later "3,x"
.a614					_inner_loop:
.a614	90 0c		bcc $a622	                bcc _no_add
.a616	85 25		sta $25		                sta tmp1+1      ; save time, don't CLC
.a618	a5 24		lda $24		                lda tmp1
.a61a	65 26		adc $26		                adc tmp2
.a61c	85 24		sta $24		                sta tmp1
.a61e	a5 25		lda $25		                lda tmp1+1
.a620	65 27		adc $27		                adc tmp2+1
.a622					_no_add:
.a622	6a		ror a		                ror
.a623	66 24		ror $24		                ror tmp1
.a625	76 04		ror $04,x	                ror 4,x         ; think "2,x" then later "3,x"
.a627	88		dey		                dey
.a628	d0 ea		bne $a614	                bne _inner_loop ; go back for one more shift?
.a62a	e8		inx		                inx
.a62b	e4 28		cpx $28		                cpx tmp3
.a62d	d0 e1		bne $a610	                bne _outer_loop ; go back for eight more shifts?
.a62f	95 01		sta $01,x	                sta 1,x
.a631	a5 24		lda $24		                lda tmp1
.a633	95 00		sta $00,x	                sta 0,x
.a635	80 04		bra $a63b	                bra _done
.a637					_zero:
.a637	74 02		stz $02,x	                stz 2,x
.a639	74 03		stz $03,x	                stz 3,x
.a63b					_done:
.a63b	60		rts		z_um_star:      rts
.a63c					xt_unloop:
.a63c	68		pla		                pla
.a63d	68		pla		                pla
.a63e	68		pla		                pla
.a63f	68		pla		                pla
.a640	68		pla		                pla
.a641	68		pla		                pla
.a642	60		rts		z_unloop:       rts
.a643					xt_until:
.a643	a0 92		ldy #$92	                ldy #>zero_branch_runtime
.a645	a9 14		lda #$14	                lda #<zero_branch_runtime
.a647	20 cc d6	jsr $d6cc	                jsr cmpl_subroutine
.a64a	20 6e 87	jsr $876e	                jsr xt_comma
.a64d	60		rts		z_until:        rts
.a64e					xt_unused:
.a64e	ca		dex		                dex
.a64f	ca		dex		                dex
.a650	a9 00		lda #$00	                lda #<cp_end
.a652	38		sec		                sec
.a653	e5 00		sbc $00		                sbc cp
.a655	95 00		sta $00,x	                sta 0,x
.a657	a9 7c		lda #$7c	                lda #>cp_end
.a659	e5 01		sbc $01		                sbc cp+1
.a65b	95 01		sta $01,x	                sta 1,x
.a65d	60		rts		z_unused:       rts
.a65e					xt_update:
.a65e	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.a660	b1 1e		lda ($1e),y	                lda (up),y
.a662	09 02		ora #$02	                ora #2          ; Turn on dirty flag (bit 2)
.a664	91 1e		sta ($1e),y	                sta (up),y
.a666	60		rts		z_update:       rts
.a667					xt_useraddr:
.a667	ca		dex		                dex
.a668	ca		dex		                dex
.a669	a9 1e		lda #$1e	                lda #<up
.a66b	95 00		sta $00,x	                sta 0,x
.a66d	a9 00		lda #$00	                lda #>up
.a66f	95 01		sta $01,x	                sta 1,x
.a671	60		rts		z_useraddr:     rts
.a672					xt_variable:
.a672	20 69 89	jsr $8969	                jsr xt_create
.a675	a9 00		lda #$00	                lda #0
.a677	92 00		sta ($00)	                sta (cp)
.a679	e6 00		inc $00		                inc cp
.a67b	d0 02		bne $a67f	                bne +
.a67d	e6 01		inc $01		                inc cp+1
.a67f					+
.a67f	92 00		sta ($00)	                sta (cp)
.a681	e6 00		inc $00		                inc cp
.a683	d0 02		bne $a687	                bne +
.a685	e6 01		inc $01		                inc cp+1
.a687					+
.a687	20 31 89	jsr $8931	                jsr adjust_z
.a68a	60		rts		z_variable:     rts
.a68b					xt_while:
.a68b	a0 92		ldy #$92	                ldy #>zero_branch_runtime
.a68d	a9 14		lda #$14	                lda #<zero_branch_runtime
.a68f	20 cc d6	jsr $d6cc	                jsr cmpl_subroutine
.a692	20 72 91	jsr $9172	                jsr xt_here
.a695	20 a2 a7	jsr $a7a2	                jsr xt_zero
.a698	20 6e 87	jsr $876e	                jsr xt_comma
.a69b	20 a8 a1	jsr $a1a8	                jsr xt_swap
.a69e	60		rts		z_while:        rts
.a69f					xt_within:
.a69f	20 33 d8	jsr $d833	                jsr underflow_3
.a6a2	20 93 98	jsr $9893	                jsr xt_over
.a6a5	20 50 95	jsr $9550	                jsr xt_minus
.a6a8	20 6a a3	jsr $a36a	                jsr xt_to_r
.a6ab	20 50 95	jsr $9550	                jsr xt_minus
.a6ae	20 92 9a	jsr $9a92	                jsr xt_r_from
.a6b1	20 6c a5	jsr $a56c	                jsr xt_u_less_than
.a6b4	60		rts		z_within:       rts
.a6b5					xt_word:
.a6b5	20 29 d8	jsr $d829	                jsr underflow_1
.a6b8	a4 0c		ldy $0c		                ldy toin                ; >IN
.a6ba					_loop:
.a6ba	c4 0a		cpy $0a		                cpy ciblen              ; quit if end of input
.a6bc	f0 09		beq $a6c7	                beq _found_char
.a6be	b1 08		lda ($08),y	                lda (cib),y
.a6c0	d5 00		cmp $00,x	                cmp 0,x                 ; ASCII of delimiter
.a6c2	d0 03		bne $a6c7	                bne _found_char
.a6c4	c8		iny		                iny
.a6c5	80 f3		bra $a6ba	                bra _loop
.a6c7					_found_char:
.a6c7	84 0c		sty $0c		                sty toin
.a6c9	20 3a 99	jsr $993a	                jsr xt_parse            ; Returns ( addr u )
.a6cc	b5 00		lda $00,x	                lda 0,x
.a6ce	92 00		sta ($00)	                sta (cp)                ; Save length of string
.a6d0	48		pha		                pha                     ; Keep copy of length for later
.a6d1	20 af 8d	jsr $8daf	                jsr xt_dup              ; ( addr u u )
.a6d4	a5 00		lda $00		                lda cp
.a6d6	18		clc		                clc
.a6d7	69 01		adc #$01	                adc #1
.a6d9	95 02		sta $02,x	                sta 2,x                 ; LSB of CP
.a6db	a5 01		lda $01		                lda cp+1
.a6dd	69 00		adc #$00	                adc #0
.a6df	95 03		sta $03,x	                sta 3,x                 ; ( addr cp+1 u )
.a6e1	20 c2 95	jsr $95c2	                jsr xt_move
.a6e4	ca		dex		                dex
.a6e5	ca		dex		                dex
.a6e6	a5 00		lda $00		                lda cp
.a6e8	95 00		sta $00,x	                sta 0,x
.a6ea	a5 01		lda $01		                lda cp+1
.a6ec	95 01		sta $01,x	                sta 1,x
.a6ee	68		pla		                pla                     ; length of string
.a6ef	18		clc		                clc
.a6f0	65 00		adc $00		                adc cp
.a6f2	85 00		sta $00		                sta cp
.a6f4	a5 01		lda $01		                lda cp+1
.a6f6	69 00		adc #$00	                adc #0                  ; we only need the carry
.a6f8	85 01		sta $01		                sta cp+1
.a6fa	60		rts		z_word:         rts
.a6fb					xt_wordlist:
.a6fb	a0 05		ldy #$05	                ldy #num_wordlists_offset
.a6fd	b1 1e		lda ($1e),y	                lda (up),y      ; This is a byte variable, so only
.a6ff	c9 0c		cmp #$0c	                cmp #max_wordlists
.a701	d0 05		bne $a708	                bne _ok
.a703	a9 0b		lda #$0b	                lda #err_wordlist
.a705	4c 3f d8	jmp $d83f	                jmp error
.a708					_ok:
.a708	1a		inc a		                ina             ; Increment the wordlist#
.a709	91 1e		sta ($1e),y	                sta (up),y      ; Save it into byte variable #wordlists
.a70b	ca		dex		                dex             ; and put it on the stack.
.a70c	ca		dex		                dex
.a70d	95 00		sta $00,x	                sta 0,x
.a70f	74 01		stz $01,x	                stz 1,x         ; 12 is the max, so upper byte is always zero.
.a711	60		rts		z_wordlist:     rts
.a712					xt_words:
.a712	20 63 89	jsr $8963	                jsr xt_cr
.a715	a9 00		lda #$00	                lda #0
.a717	48		pha		                pha
.a718	ca		dex		                dex                     ; Make room on the stack for
.a719	ca		dex		                dex                     ; a dictionary pointer.
.a71a	64 28		stz $28		                stz tmp3                ; Start at the beginning of
.a71c					_wordlist_loop:
.a71c	a0 1e		ldy #$1e	                ldy #num_order_offset   ; Check against byte variable #ORDER.
.a71e	a5 28		lda $28		                lda tmp3
.a720	d1 1e		cmp ($1e),y	                cmp (up),y              ; See if we are done.
.a722	d0 02		bne $a726	                bne _have_wordlist
.a724	80 45		bra $a76b	                bra _words_done
.a726					_have_wordlist:
.a726	18		clc		                clc                     ; Index into byte array SEARCH-ORDER.
.a727	69 1f		adc #$1f	                adc #search_order_offset
.a729	a8		tay		                tay
.a72a	b1 1e		lda ($1e),y	                lda (up),y              ; Get the index into array WORDLISTS
.a72c	0a		asl a		                asl                     ; Turn offset into cells offset.
.a72d	18		clc		                clc
.a72e	69 06		adc #$06	                adc #wordlists_offset
.a730	a8		tay		                tay
.a731	b1 1e		lda ($1e),y	                lda (up),y              ; Save the DP for this wordlist
.a733	95 00		sta $00,x	                sta 0,x                 ; on the stack. ( nt )
.a735	c8		iny		                iny
.a736	b1 1e		lda ($1e),y	                lda (up),y
.a738	95 01		sta $01,x	                sta 1,x
.a73a					_loop:
.a73a	20 af 8d	jsr $8daf	                jsr xt_dup              ; ( nt nt )
.a73d	20 fe 95	jsr $95fe	                jsr xt_name_to_string   ; ( nt addr u )
.a740	68		pla		                pla
.a741	18		clc		                clc
.a742	75 00		adc $00,x	                adc 0,x
.a744	1a		inc a		                ina                     ; don't forget the space between words
.a745	c9 4f		cmp #$4f	                cmp #MAX_LINE_LENGTH    ; usually 79
.a747	90 06		bcc $a74f	                bcc +
.a749	20 63 89	jsr $8963	                jsr xt_cr
.a74c	b5 00		lda $00,x	                lda 0,x                 ; After going to next line, start
.a74e	1a		inc a		                ina                     ; with length of this word.
.a74f					+
.a74f	48		pha		                pha
.a750	20 fd a4	jsr $a4fd	                jsr xt_type             ; ( nt )
.a753	a9 20		lda #$20	                lda #AscSP
.a755	20 f6 8d	jsr $8df6	                jsr emit_a
.a758	20 1d 98	jsr $981d	                jsr xt_one_plus         ; 1+
.a75b	20 1d 98	jsr $981d	                jsr xt_one_plus         ; 1+
.a75e	20 80 8f	jsr $8f80	                jsr xt_fetch            ; @ ( nt+1 )
.a761	b5 00		lda $00,x	                lda 0,x
.a763	15 01		ora $01,x	                ora 1,x
.a765	d0 d3		bne $a73a	                bne _loop
.a767	e6 28		inc $28		                inc tmp3
.a769	80 b1		bra $a71c	                bra _wordlist_loop
.a76b					_words_done:
.a76b	68		pla		                pla                     ; dump counter
.a76c	e8		inx		                inx
.a76d	e8		inx		                inx
.a76e	60		rts		z_words:        rts
.a76f					xt_wordsize:
.a76f	20 29 d8	jsr $d829	                jsr underflow_1
.a772	b5 00		lda $00,x	                lda 0,x
.a774	85 24		sta $24		                sta tmp1
.a776	b5 01		lda $01,x	                lda 1,x
.a778	85 25		sta $25		                sta tmp1+1
.a77a	a0 06		ldy #$06	                ldy #6
.a77c	b1 24		lda ($24),y	                lda (tmp1),y    ; LSB of z
.a77e	88		dey		                dey
.a77f	88		dey		                dey
.a780	38		sec		                sec
.a781	f1 24		sbc ($24),y	                sbc (tmp1),y    ; LSB of xt
.a783	95 00		sta $00,x	                sta 0,x
.a785	a0 07		ldy #$07	                ldy #7
.a787	b1 24		lda ($24),y	                lda (tmp1),y    ; MSB of z
.a789	88		dey		                dey
.a78a	88		dey		                dey
.a78b	f1 24		sbc ($24),y	                sbc (tmp1),y    ; MSB of xt
.a78d	95 01		sta $01,x	                sta 1,x
.a78f	60		rts		z_wordsize:     rts
.a790					xt_xor:
.a790	20 2e d8	jsr $d82e	                jsr underflow_2
.a793	b5 00		lda $00,x	                lda 0,x
.a795	55 02		eor $02,x	                eor 2,x
.a797	95 02		sta $02,x	                sta 2,x
.a799	b5 01		lda $01,x	                lda 1,x
.a79b	55 03		eor $03,x	                eor 3,x
.a79d	95 03		sta $03,x	                sta 3,x
.a79f	e8		inx		                inx
.a7a0	e8		inx		                inx
.a7a1	60		rts		z_xor:          rts
.a7a2					xt_case:
.a7a2					xt_forth_wordlist:
.a7a2					xt_zero:
.a7a2	ca		dex		                dex             ; push
.a7a3	ca		dex		                dex
.a7a4	74 00		stz $00,x	                stz 0,x
.a7a6	74 01		stz $01,x	                stz 1,x
.a7a8					z_case:
.a7a8					z_forth_wordlist:
.a7a8					z_zero:
.a7a8	60		rts		                rts
.a7a9					xt_zero_equal:
.a7a9	20 29 d8	jsr $d829	                jsr underflow_1
.a7ac	b5 00		lda $00,x	                lda 0,x
.a7ae	15 01		ora $01,x	                ora 1,x
.a7b0	f0 04		beq $a7b6	                beq _zero
.a7b2	a9 00		lda #$00	                lda #0
.a7b4	80 02		bra $a7b8	                bra _store
.a7b6					_zero:
.a7b6	a9 ff		lda #$ff	                lda #$ff
.a7b8					_store:
.a7b8	95 00		sta $00,x	                sta 0,x
.a7ba	95 01		sta $01,x	                sta 1,x
.a7bc	60		rts		z_zero_equal:   rts
.a7bd					xt_zero_greater:
.a7bd	20 29 d8	jsr $d829	                jsr underflow_1
.a7c0	a0 00		ldy #$00	                ldy #0          ; Default is FALSE (TOS is negative)
.a7c2	b5 01		lda $01,x	                lda 1,x         ; MSB
.a7c4	30 05		bmi $a7cb	                bmi _done       ; TOS is negative, keep FLASE
.a7c6	15 00		ora $00,x	                ora 0,x
.a7c8	f0 01		beq $a7cb	                beq _done       ; TOS is zero, keep FALSE
.a7ca	88		dey		                dey             ; TOS is postive, make true
.a7cb					_done:
.a7cb	98		tya		                tya
.a7cc	95 00		sta $00,x	                sta 0,x
.a7ce	95 01		sta $01,x	                sta 1,x
.a7d0	60		rts		z_zero_greater: rts
.a7d1					xt_zero_less:
.a7d1	20 29 d8	jsr $d829	                jsr underflow_1
.a7d4	a0 00		ldy #$00	                ldy #0          ; Default is FALSE (TOS positive)
.a7d6	b5 01		lda $01,x	                lda 1,x         ; MSB
.a7d8	10 01		bpl $a7db	                bpl _done       ; TOS is positive, so keep FALSE
.a7da	88		dey		                dey             ; TOS is negative, make TRUE
.a7db					_done:
.a7db	98		tya		                tya
.a7dc	95 00		sta $00,x	                sta 0,x
.a7de	95 01		sta $01,x	                sta 1,x
.a7e0	60		rts		z_zero_less:    rts
.a7e1					xt_zero_unequal:
.a7e1	20 29 d8	jsr $d829	                jsr underflow_1
.a7e4	a0 00		ldy #$00	                ldy #0          ; default false
.a7e6	b5 00		lda $00,x	                lda 0,x
.a7e8	15 01		ora $01,x	                ora 1,x
.a7ea	f0 01		beq $a7ed	                beq _got_zero
.a7ec	88		dey		                dey
.a7ed					_got_zero:
.a7ed	98		tya		                tya
.a7ee	95 00		sta $00,x	                sta 0,x
.a7f0	95 01		sta $01,x	                sta 1,x
.a7f2	60		rts		z_zero_unequal: rts
.a7f3					xt_editor_screen_helper:
.a7f3	20 af 8d	jsr $8daf	                jsr xt_dup
.a7f6	20 d9 9e	jsr $9ed9	                jsr xt_scr
.a7f9	20 87 a1	jsr $a187	                jsr xt_store
.a7fc	20 b5 85	jsr $85b5	                jsr xt_buffer
.a7ff					z_editor_screen_helper:
.a7ff	60		rts		                rts
.a800					xt_editor_enter_screen:
.a800	20 f3 a7	jsr $a7f3	                jsr xt_editor_screen_helper
.a803	20 2e 8d	jsr $8d2e	                jsr xt_drop
.a806	64 2e		stz $2e		                stz editor1
.a808					_prompt_loop:
.a808	ca		dex		                dex
.a809	ca		dex		                dex
.a80a	a5 2e		lda $2e		                lda editor1
.a80c	95 00		sta $00,x	                sta 0,x
.a80e	74 01		stz $01,x	                stz 1,x
.a810	20 d5 a8	jsr $a8d5	                jsr xt_editor_o
.a813	e6 2e		inc $2e		                inc editor1
.a815	a9 10		lda #$10	                lda #16
.a817	c5 2e		cmp $2e		                cmp editor1
.a819	d0 ed		bne $a808	                bne _prompt_loop
.a81b					z_editor_enter_screen:
.a81b	60		rts		                rts
.a81c					xt_editor_erase_screen:
.a81c	20 f3 a7	jsr $a7f3	                jsr xt_editor_screen_helper
.a81f	ca		dex		                dex
.a820	ca		dex		                dex
.a821	74 00		stz $00,x	                stz 0,x
.a823	a9 04		lda #$04	                lda #4          ; 4 in MSB makes 1024 ($400).
.a825	95 01		sta $01,x	                sta 1,x
.a827	20 ea 8e	jsr $8eea	                jsr xt_blank
.a82a	20 5e a6	jsr $a65e	                jsr xt_update
.a82d					z_editor_erase_screen:
.a82d	60		rts		                rts
.a82e					xt_editor_el:
.a82e	20 bc a8	jsr $a8bc	                jsr xt_editor_line
.a831	ca		dex		                dex
.a832	ca		dex		                dex
.a833	a9 40		lda #$40	                lda #64
.a835	95 00		sta $00,x	                sta 0,x
.a837	74 01		stz $01,x	                stz 1,x
.a839	20 ea 8e	jsr $8eea	                jsr xt_blank
.a83c	20 5e a6	jsr $a65e	                jsr xt_update
.a83f	60		rts		z_editor_el:    rts
.a840					xt_editor_l:
.a840	ca		dex		                dex             ; Put SCR on the stack.
.a841	ca		dex		                dex
.a842	a0 02		ldy #$02	                ldy #scr_offset
.a844	b1 1e		lda ($1e),y	                lda (up),y
.a846	95 00		sta $00,x	                sta 0,x
.a848	c8		iny		                iny
.a849	b1 1e		lda ($1e),y	                lda (up),y
.a84b	95 01		sta $01,x	                sta 1,x
.a84d	20 c1 83	jsr $83c1	                jsr xt_block    ; Get the current screen.
.a850	20 63 89	jsr $8963	                jsr xt_cr
.a853	80 08		bra $a85d	                bra _after_screen_msg
.a855					_screen_msg:
>a855	53 63 72 65 65 6e 20 23		                .text "Screen #"
.a85d					_after_screen_msg:
.a85d	20 a9 a0	jsr $a0a9	                jsr sliteral_runtime
>a860	55 a8 08 00			                .word _screen_msg, _after_screen_msg-_screen_msg
.a864	20 fd a4	jsr $a4fd	                jsr xt_type
.a867	20 d9 9e	jsr $9ed9	                jsr xt_scr
.a86a	20 80 8f	jsr $8f80	                jsr xt_fetch
.a86d	ca		dex		                dex
.a86e	ca		dex		                dex
.a86f	a9 04		lda #$04	                lda #4          ; four spaces
.a871	95 00		sta $00,x	                sta 0,x
.a873	74 01		stz $01,x	                stz 1,x
.a875	20 34 a5	jsr $a534	                jsr xt_u_dot_r
.a878	64 28		stz $28		                stz tmp3
.a87a					_line_loop:
.a87a	20 63 89	jsr $8963	                jsr xt_cr
.a87d	ca		dex		                dex
.a87e	ca		dex		                dex
.a87f	ca		dex		                dex
.a880	ca		dex		                dex
.a881	74 03		stz $03,x	                stz 3,x
.a883	a5 28		lda $28		                lda tmp3
.a885	95 02		sta $02,x	                sta 2,x
.a887	74 01		stz $01,x	                stz 1,x
.a889	a9 02		lda #$02	                lda #2
.a88b	95 00		sta $00,x	                sta 0,x
.a88d	20 34 a5	jsr $a534	                jsr xt_u_dot_r
.a890	20 1e a1	jsr $a11e	                jsr xt_space
.a893	20 af 8d	jsr $8daf	                jsr xt_dup
.a896	ca		dex		                dex
.a897	ca		dex		                dex
.a898	a9 40		lda #$40	                lda #64
.a89a	95 00		sta $00,x	                sta 0,x
.a89c	74 01		stz $01,x	                stz 1,x
.a89e	20 fd a4	jsr $a4fd	                jsr xt_type
.a8a1	18		clc		                clc
.a8a2	a9 40		lda #$40	                lda #64
.a8a4	75 00		adc $00,x	                adc 0,x
.a8a6	95 00		sta $00,x	                sta 0,x
.a8a8	b5 01		lda $01,x	                lda 1,x
.a8aa	69 00		adc #$00	                adc #0      ; Add carry
.a8ac	95 01		sta $01,x	                sta 1,x
.a8ae	e6 28		inc $28		                inc tmp3
.a8b0	a5 28		lda $28		                lda tmp3
.a8b2	c9 10		cmp #$10	                cmp #16
.a8b4	d0 c4		bne $a87a	                bne _line_loop
.a8b6	20 63 89	jsr $8963	                jsr xt_cr
.a8b9	e8		inx		                inx
.a8ba	e8		inx		                inx
.a8bb	60		rts		z_editor_l:            rts
.a8bc					xt_editor_line:
.a8bc	20 29 d8	jsr $d829	                jsr underflow_1
.a8bf	a0 06		ldy #$06	                ldy #6          ; *64 is same as left shift 6 times.
.a8c1					_shift_tos_left:
.a8c1	16 00		asl $00,x	                asl 0,x         ; Shift TOS to the left
.a8c3	36 01		rol $01,x	                rol 1,x         ; ROL brings MSb from lower byte.
.a8c5	88		dey		                dey
.a8c6	d0 f9		bne $a8c1	                bne _shift_tos_left
.a8c8	20 d9 9e	jsr $9ed9	                jsr xt_scr
.a8cb	20 80 8f	jsr $8f80	                jsr xt_fetch
.a8ce	20 c1 83	jsr $83c1	                jsr xt_block
.a8d1	20 e3 99	jsr $99e3	                jsr xt_plus
.a8d4	60		rts		z_editor_line:  rts
.a8d5					xt_editor_o:
.a8d5	20 63 89	jsr $8963	                jsr xt_cr
.a8d8	20 af 8d	jsr $8daf	                jsr xt_dup
.a8db	20 a1 a3	jsr $a3a1	                jsr xt_two
.a8de	20 34 a5	jsr $a534	                jsr xt_u_dot_r
.a8e1	20 1e a1	jsr $a11e	                jsr xt_space
.a8e4	a9 2a		lda #$2a	                lda #42         ; ASCII for *
.a8e6	20 f6 8d	jsr $8df6	                jsr emit_a
.a8e9	20 1e a1	jsr $a11e	                jsr xt_space
.a8ec	20 bc a8	jsr $a8bc	                jsr xt_editor_line
.a8ef	20 af 8d	jsr $8daf	                jsr xt_dup      ; Save a copy of the line address for later.
.a8f2	ca		dex		                dex
.a8f3	ca		dex		                dex
.a8f4	a9 40		lda #$40	                lda #64         ; chars/line
.a8f6	95 00		sta $00,x	                sta 0,x
.a8f8	74 01		stz $01,x	                stz 1,x
.a8fa	20 4e 81	jsr $814e	                jsr xt_accept
.a8fd	20 af 8d	jsr $8daf	                jsr xt_dup
.a900	20 6e 96	jsr $966e	                jsr xt_not_rote ; -rot
.a903	20 e3 99	jsr $99e3	                jsr xt_plus
.a906	ca		dex		                dex
.a907	ca		dex		                dex
.a908	a9 40		lda #$40	                lda #64         ; chars/line
.a90a	95 00		sta $00,x	                sta 0,x
.a90c	74 01		stz $01,x	                stz 1,x
.a90e	20 57 9b	jsr $9b57	                jsr xt_rot
.a911	20 50 95	jsr $9550	                jsr xt_minus
.a914	20 ea 8e	jsr $8eea	                jsr xt_blank
.a917	20 5e a6	jsr $a65e	                jsr xt_update
.a91a	60		rts		z_editor_o:     rts

;******  Return to file: platform/../taliforth.asm


;******  Processing file: platform/../assembler.asm

.a91b					assembler:
.a91b					xt_asm_adc_h:
.a91b	a9 69		lda #$69	                lda #$69
.a91d	4c 76 ac	jmp $ac76	                jmp asm_common
.a920					z_asm_adc_h:
.a920					xt_asm_adc_x:
.a920	a9 7d		lda #$7d	                lda #$7D
.a922	4c 76 ac	jmp $ac76	                jmp asm_common
.a925					z_asm_adc_x:
.a925					xt_asm_adc_y:
.a925	a9 79		lda #$79	                lda #$79
.a927	4c 76 ac	jmp $ac76	                jmp asm_common
.a92a					z_asm_adc_y:
.a92a					xt_asm_adc_z:
.a92a	a9 65		lda #$65	                lda #$65
.a92c	4c 76 ac	jmp $ac76	                jmp asm_common
.a92f					z_asm_adc_z:
.a92f					xt_asm_adc_zi:
.a92f	a9 72		lda #$72	                lda #$72
.a931	4c 76 ac	jmp $ac76	                jmp asm_common
.a934					z_asm_adc_zi:
.a934					xt_asm_adc_ziy:
.a934	a9 71		lda #$71	                lda #$71
.a936	4c 76 ac	jmp $ac76	                jmp asm_common
.a939					z_asm_adc_ziy:
.a939					xt_asm_adc_zx:
.a939	a9 75		lda #$75	                lda #$75
.a93b	4c 76 ac	jmp $ac76	                jmp asm_common
.a93e					z_asm_adc_zx:
.a93e					xt_asm_adc_zxi:
.a93e	a9 61		lda #$61	                lda #$61
.a940	4c 76 ac	jmp $ac76	                jmp asm_common
.a943					z_asm_adc_zxi:
.a943					xt_asm_and:
.a943	a9 2d		lda #$2d	                lda #$2D
.a945	4c 76 ac	jmp $ac76	                jmp asm_common
.a948					z_asm_and:
.a948					xt_asm_and_h:
.a948	a9 29		lda #$29	                lda #$29
.a94a	4c 76 ac	jmp $ac76	                jmp asm_common
.a94d					z_asm_and_h:
.a94d					xt_asm_and_x:
.a94d	a9 3d		lda #$3d	                lda #$3D
.a94f	4c 76 ac	jmp $ac76	                jmp asm_common
.a952					z_asm_and_x:
.a952					xt_asm_and_y:
.a952	a9 39		lda #$39	                lda #$39
.a954	4c 76 ac	jmp $ac76	                jmp asm_common
.a957					z_asm_and_y:
.a957					xt_asm_and_z:
.a957	a9 25		lda #$25	                lda #$25
.a959	4c 76 ac	jmp $ac76	                jmp asm_common
.a95c					z_asm_and_z:
.a95c					xt_asm_and_zi:
.a95c	a9 32		lda #$32	                lda #$32
.a95e	4c 76 ac	jmp $ac76	                jmp asm_common
.a961					z_asm_and_zi:
.a961					xt_asm_and_ziy:
.a961	a9 31		lda #$31	                lda #$31
.a963	4c 76 ac	jmp $ac76	                jmp asm_common
.a966					z_asm_and_ziy:
.a966					xt_asm_and_zx:
.a966	a9 35		lda #$35	                lda #$35
.a968	4c 76 ac	jmp $ac76	                jmp asm_common
.a96b					z_asm_and_zx:
.a96b					xt_asm_and_zxi:
.a96b	a9 21		lda #$21	                lda #$21
.a96d	4c 76 ac	jmp $ac76	                jmp asm_common
.a970					z_asm_and_zxi:
.a970					xt_asm_asl:
.a970	a9 0e		lda #$0e	                lda #$0E
.a972	4c 76 ac	jmp $ac76	                jmp asm_common
.a975					z_asm_asl:
.a975					xt_asm_asl_a:
.a975	a9 0a		lda #$0a	                lda #$0A
.a977	4c 76 ac	jmp $ac76	                jmp asm_common
.a97a					z_asm_asl_a:
.a97a					xt_asm_asl_x:
.a97a	a9 1e		lda #$1e	                lda #$1E
.a97c	4c 76 ac	jmp $ac76	                jmp asm_common
.a97f					z_asm_asl_x:
.a97f					xt_asm_asl_z:
.a97f	a9 06		lda #$06	                lda #$06
.a981	4c 76 ac	jmp $ac76	                jmp asm_common
.a984					z_asm_asl_z:
.a984					xt_asm_asl_zx:
.a984	a9 16		lda #$16	                lda #$16
.a986	4c 76 ac	jmp $ac76	                jmp asm_common
.a989					z_asm_asl_zx:
.a989					xt_asm_bcc:
.a989	a9 90		lda #$90	                lda #$90
.a98b	4c 76 ac	jmp $ac76	                jmp asm_common
.a98e					z_asm_bcc:
.a98e					xt_asm_bcs:
.a98e	a9 b0		lda #$b0	                lda #$B0
.a990	a0 02		ldy #$02	                ldy #2
.a992	4c 76 ac	jmp $ac76	                jmp asm_common
.a995					z_asm_bcs:
.a995					xt_asm_beq:
.a995	a9 f0		lda #$f0	                lda #$F0
.a997	4c 76 ac	jmp $ac76	                jmp asm_common
.a99a					z_asm_beq:
.a99a					xt_asm_bit:
.a99a	a9 2c		lda #$2c	                lda #$2C
.a99c	4c 76 ac	jmp $ac76	                jmp asm_common
.a99f					z_asm_bit:
.a99f					xt_asm_bit_h:
.a99f	a9 89		lda #$89	                lda #$89
.a9a1	4c 76 ac	jmp $ac76	                jmp asm_common
.a9a4					z_asm_bit_h:
.a9a4					xt_asm_bit_x:
.a9a4	a9 3c		lda #$3c	                lda #$3C
.a9a6	4c 76 ac	jmp $ac76	                jmp asm_common
.a9a9					z_asm_bit_x:
.a9a9					xt_asm_bit_z:
.a9a9	a9 24		lda #$24	                lda #$24
.a9ab	4c 76 ac	jmp $ac76	                jmp asm_common
.a9ae					z_asm_bit_z:
.a9ae					xt_asm_bit_zx:
.a9ae	a9 34		lda #$34	                lda #$34
.a9b0	4c 76 ac	jmp $ac76	                jmp asm_common
.a9b3					z_asm_bit_zx:
.a9b3					xt_asm_bmi:
.a9b3	a9 30		lda #$30	                lda #$30
.a9b5	4c 76 ac	jmp $ac76	                jmp asm_common
.a9b8					z_asm_bmi:
.a9b8					xt_asm_bne:
.a9b8	a9 d0		lda #$d0	                lda #$D0
.a9ba	4c 76 ac	jmp $ac76	                jmp asm_common
.a9bd					z_asm_bne:
.a9bd					xt_asm_bpl:
.a9bd	a9 10		lda #$10	                lda #$10
.a9bf	4c 76 ac	jmp $ac76	                jmp asm_common
.a9c2					z_asm_bpl:
.a9c2					xt_asm_bra:
.a9c2	a9 80		lda #$80	                lda #$80
.a9c4	4c 76 ac	jmp $ac76	                jmp asm_common
.a9c7					z_asm_bra:
.a9c7					xt_asm_brk:
.a9c7	a9 00		lda #$00	                lda #$00
.a9c9	4c 76 ac	jmp $ac76	                jmp asm_common
.a9cc					z_asm_brk:
.a9cc					xt_asm_bvc:
.a9cc	a9 50		lda #$50	                lda #$50
.a9ce	4c 76 ac	jmp $ac76	                jmp asm_common
.a9d1					z_asm_bvc:
.a9d1					xt_asm_bvs:
.a9d1	a9 70		lda #$70	                lda #$70
.a9d3	4c 76 ac	jmp $ac76	                jmp asm_common
.a9d6					z_asm_bvs:
.a9d6					xt_asm_clc:
.a9d6	a9 18		lda #$18	                lda #$18
.a9d8	4c 76 ac	jmp $ac76	                jmp asm_common
.a9db					z_asm_clc:
.a9db					xt_asm_cld:
.a9db	a9 d8		lda #$d8	                lda #$D8
.a9dd	4c 76 ac	jmp $ac76	                jmp asm_common
.a9e0					z_asm_cld:
.a9e0					xt_asm_cli:
.a9e0	a9 58		lda #$58	                lda #$58
.a9e2	4c 76 ac	jmp $ac76	                jmp asm_common
.a9e5					z_asm_cli:
.a9e5					xt_asm_clv:
.a9e5	a9 b8		lda #$b8	                lda #$B8
.a9e7	4c 76 ac	jmp $ac76	                jmp asm_common
.a9ea					z_asm_clv:
.a9ea					xt_asm_cmp:
.a9ea	a9 cd		lda #$cd	                lda #$CD
.a9ec	4c 76 ac	jmp $ac76	                jmp asm_common
.a9ef					z_asm_cmp:
.a9ef					xt_asm_cmp_h:
.a9ef	a9 c9		lda #$c9	                lda #$C9
.a9f1	4c 76 ac	jmp $ac76	                jmp asm_common
.a9f4					z_asm_cmp_h:
.a9f4					xt_asm_cmp_x:
.a9f4	a9 dd		lda #$dd	                lda #$DD
.a9f6	4c 76 ac	jmp $ac76	                jmp asm_common
.a9f9					z_asm_cmp_x:
.a9f9					xt_asm_cmp_y:
.a9f9	a9 d9		lda #$d9	                lda #$D9
.a9fb	4c 76 ac	jmp $ac76	                jmp asm_common
.a9fe					z_asm_cmp_y:
.a9fe					xt_asm_cmp_z:
.a9fe	a9 c5		lda #$c5	                lda #$C5
.aa00	4c 76 ac	jmp $ac76	                jmp asm_common
.aa03					z_asm_cmp_z:
.aa03					xt_asm_cmp_zi:
.aa03	a9 d2		lda #$d2	                lda #$D2
.aa05	4c 76 ac	jmp $ac76	                jmp asm_common
.aa08					z_asm_cmp_zi:
.aa08					xt_asm_cmp_ziy:
.aa08	a9 d1		lda #$d1	                lda #$D1
.aa0a	4c 76 ac	jmp $ac76	                jmp asm_common
.aa0d					z_asm_cmp_ziy:
.aa0d					xt_asm_cmp_zx:
.aa0d	a9 d5		lda #$d5	                lda #$D5
.aa0f	4c 76 ac	jmp $ac76	                jmp asm_common
.aa12					z_asm_cmp_zx:
.aa12					xt_asm_cmp_zxi:
.aa12	a9 c1		lda #$c1	                lda #$C1
.aa14	4c 76 ac	jmp $ac76	                jmp asm_common
.aa17					z_asm_cmp_zxi:
.aa17					xt_asm_cpx:
.aa17	a9 ec		lda #$ec	                lda #$EC
.aa19	4c 76 ac	jmp $ac76	                jmp asm_common
.aa1c					z_asm_cpx:
.aa1c					xt_asm_cpx_h:
.aa1c	a9 e0		lda #$e0	                lda #$E0
.aa1e	4c 76 ac	jmp $ac76	                jmp asm_common
.aa21					z_asm_cpx_h:
.aa21					xt_asm_cpx_z:
.aa21	a9 e4		lda #$e4	                lda #$E4
.aa23	4c 76 ac	jmp $ac76	                jmp asm_common
.aa26					z_asm_cpx_z:
.aa26					xt_asm_cpy:
.aa26	a9 cc		lda #$cc	                lda #$CC
.aa28	a0 03		ldy #$03	                ldy #3
.aa2a	4c 76 ac	jmp $ac76	                jmp asm_common
.aa2d					z_asm_cpy:
.aa2d					xt_asm_cpy_h:
.aa2d	a9 c0		lda #$c0	                lda #$C0
.aa2f	4c 76 ac	jmp $ac76	                jmp asm_common
.aa32					z_asm_cpy_h:
.aa32					xt_asm_cpy_z:
.aa32	a9 c4		lda #$c4	                lda #$C4
.aa34	4c 76 ac	jmp $ac76	                jmp asm_common
.aa37					z_asm_cpy_z:
.aa37					xt_asm_dec:
.aa37	a9 ce		lda #$ce	                lda #$CE
.aa39	4c 76 ac	jmp $ac76	                jmp asm_common
.aa3c					z_asm_dec:
.aa3c					xt_asm_dec_a:
.aa3c	a9 3a		lda #$3a	                lda #$3A
.aa3e	4c 76 ac	jmp $ac76	                jmp asm_common
.aa41					z_asm_dec_a:
.aa41					xt_asm_dec_x:
.aa41	a9 de		lda #$de	                lda #$DE
.aa43	4c 76 ac	jmp $ac76	                jmp asm_common
.aa46					z_asm_dec_x:
.aa46					xt_asm_dec_z:
.aa46	a9 c6		lda #$c6	                lda #$C6
.aa48	4c 76 ac	jmp $ac76	                jmp asm_common
.aa4b					z_asm_dec_z:
.aa4b					xt_asm_dec_zx:
.aa4b	a9 d6		lda #$d6	                lda #$D6
.aa4d	4c 76 ac	jmp $ac76	                jmp asm_common
.aa50					z_asm_dec_zx:
.aa50					xt_asm_dex:
.aa50	a9 ca		lda #$ca	                lda #$CA
.aa52	4c 76 ac	jmp $ac76	                jmp asm_common
.aa55					z_asm_dex:
.aa55					xt_asm_dey:
.aa55	a9 88		lda #$88	                lda #$88
.aa57	4c 76 ac	jmp $ac76	                jmp asm_common
.aa5a					z_asm_dey:
.aa5a					xt_asm_eor:
.aa5a	a9 4d		lda #$4d	                lda #$4D
.aa5c	4c 76 ac	jmp $ac76	                jmp asm_common
.aa5f					z_asm_eor:
.aa5f					xt_asm_eor_h:
.aa5f	a9 49		lda #$49	                lda #$49
.aa61	4c 76 ac	jmp $ac76	                jmp asm_common
.aa64					z_asm_eor_h:
.aa64					xt_asm_eor_x:
.aa64	a9 5d		lda #$5d	                lda #$5D
.aa66	4c 76 ac	jmp $ac76	                jmp asm_common
.aa69					z_asm_eor_x:
.aa69					xt_asm_eor_y:
.aa69	a9 59		lda #$59	                lda #$59
.aa6b	4c 76 ac	jmp $ac76	                jmp asm_common
.aa6e					z_asm_eor_y:
.aa6e					xt_asm_eor_z:
.aa6e	a9 45		lda #$45	                lda #$45
.aa70	4c 76 ac	jmp $ac76	                jmp asm_common
.aa73					z_asm_eor_z:
.aa73					xt_asm_eor_zi:
.aa73	a9 52		lda #$52	                lda #$52
.aa75	4c 76 ac	jmp $ac76	                jmp asm_common
.aa78					z_asm_eor_zi:
.aa78					xt_asm_eor_ziy:
.aa78	a9 51		lda #$51	                lda #$51
.aa7a	4c 76 ac	jmp $ac76	                jmp asm_common
.aa7d					z_asm_eor_ziy:
.aa7d					xt_asm_eor_zx:
.aa7d	a9 55		lda #$55	                lda #$55
.aa7f	4c 76 ac	jmp $ac76	                jmp asm_common
.aa82					z_asm_eor_zx:
.aa82					xt_asm_eor_zxi:
.aa82	a9 41		lda #$41	                lda #$41
.aa84	4c 76 ac	jmp $ac76	                jmp asm_common
.aa87					z_asm_eor_zxi:
.aa87					xt_asm_inc:
.aa87	a9 ee		lda #$ee	                lda #$EE
.aa89	4c 76 ac	jmp $ac76	                jmp asm_common
.aa8c					z_asm_inc:
.aa8c					xt_asm_inc_a:
.aa8c	a9 1a		lda #$1a	                lda #$1A
.aa8e	4c 76 ac	jmp $ac76	                jmp asm_common
.aa91					z_asm_inc_a:
.aa91					xt_asm_inc_x:
.aa91	a9 fe		lda #$fe	                lda #$FE
.aa93	4c 76 ac	jmp $ac76	                jmp asm_common
.aa96					z_asm_inc_x:
.aa96					xt_asm_inc_z:
.aa96	a9 e6		lda #$e6	                lda #$E6
.aa98	4c 76 ac	jmp $ac76	                jmp asm_common
.aa9b					z_asm_inc_z:
.aa9b					xt_asm_inc_zx:
.aa9b	a9 f6		lda #$f6	                lda #$F6
.aa9d	4c 76 ac	jmp $ac76	                jmp asm_common
.aaa0					z_asm_inc_zx:
.aaa0					xt_asm_inx:
.aaa0	a9 e8		lda #$e8	                lda #$E8
.aaa2	4c 76 ac	jmp $ac76	                jmp asm_common
.aaa5					z_asm_inx:
.aaa5					xt_asm_iny:
.aaa5	a9 c8		lda #$c8	                lda #$C8
.aaa7	4c 76 ac	jmp $ac76	                jmp asm_common
.aaaa					z_asm_iny:
.aaaa					xt_asm_jmp:
.aaaa	a9 4c		lda #$4c	                lda #$4C
.aaac	4c 76 ac	jmp $ac76	                jmp asm_common
.aaaf					z_asm_jmp:
.aaaf					xt_asm_jmp_i:
.aaaf	a9 6c		lda #$6c	                lda #$6C
.aab1	4c 76 ac	jmp $ac76	                jmp asm_common
.aab4					z_asm_jmp_i:
.aab4					xt_asm_jmp_xi:
.aab4	a9 7c		lda #$7c	                lda #$7C
.aab6	4c 76 ac	jmp $ac76	                jmp asm_common
.aab9					z_asm_jmp_xi:
.aab9					xt_asm_jsr:
.aab9	a9 20		lda #$20	                lda #$20
.aabb	4c 76 ac	jmp $ac76	                jmp asm_common
.aabe					z_asm_jsr:
.aabe					xt_asm_lda:
.aabe	a9 ad		lda #$ad	                lda #$AD
.aac0	4c 76 ac	jmp $ac76	                jmp asm_common
.aac3					z_asm_lda:
.aac3					xt_asm_lda_h:
.aac3	a9 a9		lda #$a9	                lda #$A9
.aac5	4c 76 ac	jmp $ac76	                jmp asm_common
.aac8					z_asm_lda_h:
.aac8					xt_asm_lda_x:
.aac8	a9 bd		lda #$bd	                lda #$BD
.aaca	4c 76 ac	jmp $ac76	                jmp asm_common
.aacd					z_asm_lda_x:
.aacd					xt_asm_lda_y:
.aacd	a9 b9		lda #$b9	                lda #$B9
.aacf	4c 76 ac	jmp $ac76	                jmp asm_common
.aad2					z_asm_lda_y:
.aad2					xt_asm_lda_z:
.aad2	a9 a5		lda #$a5	                lda #$A5
.aad4	4c 76 ac	jmp $ac76	                jmp asm_common
.aad7					z_asm_lda_z:
.aad7					xt_asm_lda_zi:
.aad7	a9 b2		lda #$b2	                lda #$B2
.aad9	4c 76 ac	jmp $ac76	                jmp asm_common
.aadc					z_asm_lda_zi:
.aadc					xt_asm_lda_ziy:
.aadc	a9 b1		lda #$b1	                lda #$B1
.aade	4c 76 ac	jmp $ac76	                jmp asm_common
.aae1					z_asm_lda_ziy:
.aae1					xt_asm_lda_zx:
.aae1	a9 b5		lda #$b5	                lda #$B5
.aae3	4c 76 ac	jmp $ac76	                jmp asm_common
.aae6					z_asm_lda_zx:
.aae6					xt_asm_lda_zxi:
.aae6	a9 a1		lda #$a1	                lda #$A1
.aae8	4c 76 ac	jmp $ac76	                jmp asm_common
.aaeb					z_asm_lda_zxi:
.aaeb					xt_asm_ldx:
.aaeb	a9 ae		lda #$ae	                lda #$AE
.aaed	4c 76 ac	jmp $ac76	                jmp asm_common
.aaf0					z_asm_ldx:
.aaf0					xt_asm_ldx_h:
.aaf0	a9 a2		lda #$a2	                lda #$A2
.aaf2	4c 76 ac	jmp $ac76	                jmp asm_common
.aaf5					z_asm_ldx_h:
.aaf5					xt_asm_ldx_y:
.aaf5	a9 be		lda #$be	                lda #$BE
.aaf7	4c 76 ac	jmp $ac76	                jmp asm_common
.aafa					z_asm_ldx_y:
.aafa					xt_asm_ldx_z:
.aafa	a9 a6		lda #$a6	                lda #$A6
.aafc	4c 76 ac	jmp $ac76	                jmp asm_common
.aaff					z_asm_ldx_z:
.aaff					xt_asm_ldx_zy:
.aaff	a9 b6		lda #$b6	                lda #$B6
.ab01	4c 76 ac	jmp $ac76	                jmp asm_common
.ab04					z_asm_ldx_zy:
.ab04					xt_asm_ldy:
.ab04	a9 ac		lda #$ac	                lda #$AC
.ab06	4c 76 ac	jmp $ac76	                jmp asm_common
.ab09					z_asm_ldy:
.ab09					xt_asm_ldy_h:
.ab09	a9 a0		lda #$a0	                lda #$A0
.ab0b	4c 76 ac	jmp $ac76	                jmp asm_common
.ab0e					z_asm_ldy_h:
.ab0e					xt_asm_ldy_x:
.ab0e	a9 bc		lda #$bc	                lda #$BC
.ab10	4c 76 ac	jmp $ac76	                jmp asm_common
.ab13					z_asm_ldy_x:
.ab13					xt_asm_ldy_z:
.ab13	a9 a4		lda #$a4	                lda #$A4
.ab15	4c 76 ac	jmp $ac76	                jmp asm_common
.ab18					z_asm_ldy_z:
.ab18					xt_asm_ldy_zx:
.ab18	a9 b4		lda #$b4	                lda #$B4
.ab1a	4c 76 ac	jmp $ac76	                jmp asm_common
.ab1d					z_asm_ldy_zx:
.ab1d					xt_asm_lsr:
.ab1d	a9 4e		lda #$4e	                lda #$4E
.ab1f	4c 76 ac	jmp $ac76	                jmp asm_common
.ab22					z_asm_lsr:
.ab22					xt_asm_lsr_a:
.ab22	a9 4a		lda #$4a	                lda #$4A
.ab24	4c 76 ac	jmp $ac76	                jmp asm_common
.ab27					z_asm_lsr_a:
.ab27					xt_asm_lsr_x:
.ab27	a9 5e		lda #$5e	                lda #$5E
.ab29	4c 76 ac	jmp $ac76	                jmp asm_common
.ab2c					z_asm_lsr_x:
.ab2c					xt_asm_lsr_z:
.ab2c	a9 46		lda #$46	                lda #$46
.ab2e	4c 76 ac	jmp $ac76	                jmp asm_common
.ab31					z_asm_lsr_z:
.ab31					xt_asm_lsr_zx:
.ab31	a9 56		lda #$56	                lda #$56
.ab33	4c 76 ac	jmp $ac76	                jmp asm_common
.ab36					z_asm_lsr_zx:
.ab36					xt_asm_nop:
.ab36	a9 ea		lda #$ea	                lda #$EA
.ab38	4c 76 ac	jmp $ac76	                jmp asm_common
.ab3b					z_asm_nop:
.ab3b					xt_asm_ora:
.ab3b	a9 0d		lda #$0d	                lda #$0D
.ab3d	4c 76 ac	jmp $ac76	                jmp asm_common
.ab40					z_asm_ora:
.ab40					xt_asm_ora_h:
.ab40	a9 09		lda #$09	                lda #$09
.ab42	4c 76 ac	jmp $ac76	                jmp asm_common
.ab45					z_asm_ora_h:
.ab45					xt_asm_ora_x:
.ab45	a9 1d		lda #$1d	                lda #$1D
.ab47	4c 76 ac	jmp $ac76	                jmp asm_common
.ab4a					z_asm_ora_x:
.ab4a					xt_asm_ora_y:
.ab4a	a9 19		lda #$19	                lda #$19
.ab4c	4c 76 ac	jmp $ac76	                jmp asm_common
.ab4f					z_asm_ora_y:
.ab4f					xt_asm_ora_z:
.ab4f	a9 05		lda #$05	                lda #$05
.ab51	4c 76 ac	jmp $ac76	                jmp asm_common
.ab54					z_asm_ora_z:
.ab54					xt_asm_ora_zi:
.ab54	a9 12		lda #$12	                lda #$12
.ab56	a0 02		ldy #$02	                ldy #2
.ab58	4c 76 ac	jmp $ac76	                jmp asm_common
.ab5b					z_asm_ora_zi:
.ab5b					xt_asm_ora_ziy:
.ab5b	a9 11		lda #$11	                lda #$11
.ab5d	4c 76 ac	jmp $ac76	                jmp asm_common
.ab60					z_asm_ora_ziy:
.ab60					xt_asm_ora_zx:
.ab60	a9 15		lda #$15	                lda #$15
.ab62	4c 76 ac	jmp $ac76	                jmp asm_common
.ab65					z_asm_ora_zx:
.ab65					xt_asm_ora_zxi:
.ab65	a9 01		lda #$01	                lda #$01
.ab67	4c 76 ac	jmp $ac76	                jmp asm_common
.ab6a					z_asm_ora_zxi:
.ab6a					xt_asm_pha:
.ab6a	a9 48		lda #$48	                lda #$48
.ab6c	4c 76 ac	jmp $ac76	                jmp asm_common
.ab6f					z_asm_pha:
.ab6f					xt_asm_php:
.ab6f	a9 08		lda #$08	                lda #$08
.ab71	4c 76 ac	jmp $ac76	                jmp asm_common
.ab74					z_asm_php:
.ab74					xt_asm_phx:
.ab74	a9 da		lda #$da	                lda #$DA
.ab76	4c 76 ac	jmp $ac76	                jmp asm_common
.ab79					z_asm_phx:
.ab79					xt_asm_phy:
.ab79	a9 5a		lda #$5a	                lda #$5A
.ab7b	4c 76 ac	jmp $ac76	                jmp asm_common
.ab7e					z_asm_phy:
.ab7e					xt_asm_pla:
.ab7e	a9 68		lda #$68	                lda #$68
.ab80	4c 76 ac	jmp $ac76	                jmp asm_common
.ab83					z_asm_pla:
.ab83					xt_asm_plp:
.ab83	a9 28		lda #$28	                lda #$28
.ab85	4c 76 ac	jmp $ac76	                jmp asm_common
.ab88					z_asm_plp:
.ab88					xt_asm_plx:
.ab88	a9 fa		lda #$fa	                lda #$FA
.ab8a	4c 76 ac	jmp $ac76	                jmp asm_common
.ab8d					z_asm_plx:
.ab8d					xt_asm_ply:
.ab8d	a9 7a		lda #$7a	                lda #$7A
.ab8f	4c 76 ac	jmp $ac76	                jmp asm_common
.ab92					z_asm_ply:
.ab92					xt_asm_rol:
.ab92	a9 2e		lda #$2e	                lda #$2E
.ab94	4c 76 ac	jmp $ac76	                jmp asm_common
.ab97					z_asm_rol:
.ab97					xt_asm_rol_a:
.ab97	a9 2a		lda #$2a	                lda #$2A
.ab99	4c 76 ac	jmp $ac76	                jmp asm_common
.ab9c					z_asm_rol_a:
.ab9c					xt_asm_rol_x:
.ab9c	a9 3e		lda #$3e	                lda #$3E
.ab9e	4c 76 ac	jmp $ac76	                jmp asm_common
.aba1					z_asm_rol_x:
.aba1					xt_asm_rol_z:
.aba1	a9 26		lda #$26	                lda #$26
.aba3	4c 76 ac	jmp $ac76	                jmp asm_common
.aba6					z_asm_rol_z:
.aba6					xt_asm_rol_zx:
.aba6	a9 36		lda #$36	                lda #$36
.aba8	4c 76 ac	jmp $ac76	                jmp asm_common
.abab					z_asm_rol_zx:
.abab					xt_asm_ror:
.abab	a9 6e		lda #$6e	                lda #$6E
.abad	4c 76 ac	jmp $ac76	                jmp asm_common
.abb0					z_asm_ror:
.abb0					xt_asm_ror_a:
.abb0	a9 6a		lda #$6a	                lda #$6A
.abb2	4c 76 ac	jmp $ac76	                jmp asm_common
.abb5					z_asm_ror_a:
.abb5					xt_asm_ror_x:
.abb5	a9 7e		lda #$7e	                lda #$7E
.abb7	4c 76 ac	jmp $ac76	                jmp asm_common
.abba					z_asm_ror_x:
.abba					xt_asm_ror_z:
.abba	a9 66		lda #$66	                lda #$66
.abbc	4c 76 ac	jmp $ac76	                jmp asm_common
.abbf					z_asm_ror_z:
.abbf					xt_asm_ror_zx:
.abbf	a9 76		lda #$76	                lda #$76
.abc1	4c 76 ac	jmp $ac76	                jmp asm_common
.abc4					z_asm_ror_zx:
.abc4					xt_asm_rti:
.abc4	a9 40		lda #$40	                lda #$40
.abc6	4c 76 ac	jmp $ac76	                jmp asm_common
.abc9					z_asm_rti:
.abc9					xt_asm_rts:
.abc9	a9 60		lda #$60	                lda #$60
.abcb	4c 76 ac	jmp $ac76	                jmp asm_common
.abce					z_asm_rts:
.abce					xt_asm_sbc:
.abce	a9 ed		lda #$ed	                lda #$ED
.abd0	4c 76 ac	jmp $ac76	                jmp asm_common
.abd3					z_asm_sbc:
.abd3					xt_asm_sbc_h:
.abd3	a9 e9		lda #$e9	                lda #$E9
.abd5	4c 76 ac	jmp $ac76	                jmp asm_common
.abd8					z_asm_sbc_h:
.abd8					xt_asm_sbc_x:
.abd8	a9 fd		lda #$fd	                lda #$FD
.abda	4c 76 ac	jmp $ac76	                jmp asm_common
.abdd					z_asm_sbc_x:
.abdd					xt_asm_sbc_y:
.abdd	a9 f9		lda #$f9	                lda #$F9
.abdf	4c 76 ac	jmp $ac76	                jmp asm_common
.abe2					z_asm_sbc_y:
.abe2					xt_asm_sbc_z:
.abe2	a9 e5		lda #$e5	                lda #$E5
.abe4	4c 76 ac	jmp $ac76	                jmp asm_common
.abe7					z_asm_sbc_z:
.abe7					xt_asm_sbc_zi:
.abe7	a9 f2		lda #$f2	                lda #$F2
.abe9	4c 76 ac	jmp $ac76	                jmp asm_common
.abec					z_asm_sbc_zi:
.abec					xt_asm_sbc_ziy:
.abec	a9 f1		lda #$f1	                lda #$F1
.abee	4c 76 ac	jmp $ac76	                jmp asm_common
.abf1					z_asm_sbc_ziy:
.abf1					xt_asm_sbc_zx:
.abf1	a9 f5		lda #$f5	                lda #$F5
.abf3	4c 76 ac	jmp $ac76	                jmp asm_common
.abf6					z_asm_sbc_zx:
.abf6					xt_asm_sbc_zxi:
.abf6	a9 e1		lda #$e1	                lda #$E1
.abf8	80 7c		bra $ac76	                bra asm_common  ; <-- limit for BRA instead of JMP
.abfa					z_asm_sbc_zxi:
.abfa					xt_asm_sec:
.abfa	a9 38		lda #$38	                lda #$38
.abfc	80 78		bra $ac76	                bra asm_common
.abfe					z_asm_sec:
.abfe					xt_asm_sed:
.abfe	a9 f8		lda #$f8	                lda #$F8
.ac00	80 74		bra $ac76	                bra asm_common
.ac02					z_asm_sed:
.ac02					xt_asm_sei:
.ac02	a9 78		lda #$78	                lda #$78
.ac04	80 70		bra $ac76	                bra asm_common
.ac06					z_asm_sei:
.ac06					xt_asm_sta:
.ac06	a9 8d		lda #$8d	                lda #$8D
.ac08	80 6c		bra $ac76	                bra asm_common
.ac0a					z_asm_sta:
.ac0a					xt_asm_sta_x:
.ac0a	a9 9d		lda #$9d	                lda #$9D
.ac0c	80 68		bra $ac76	                bra asm_common
.ac0e					z_asm_sta_x:
.ac0e					xt_asm_sta_y:
.ac0e	a9 99		lda #$99	                lda #$99
.ac10	80 64		bra $ac76	                bra asm_common
.ac12					z_asm_sta_y:
.ac12					xt_asm_sta_z:
.ac12	a9 85		lda #$85	                lda #$85
.ac14	80 60		bra $ac76	                bra asm_common
.ac16					z_asm_sta_z:
.ac16					xt_asm_sta_zi:
.ac16	a9 92		lda #$92	                lda #$92
.ac18	80 5c		bra $ac76	                bra asm_common
.ac1a					z_asm_sta_zi:
.ac1a					xt_asm_sta_ziy:
.ac1a	a9 91		lda #$91	                lda #$91
.ac1c	80 58		bra $ac76	                bra asm_common
.ac1e					z_asm_sta_ziy:
.ac1e					xt_asm_sta_zx:
.ac1e	a9 95		lda #$95	                lda #$95
.ac20	80 54		bra $ac76	                bra asm_common
.ac22					z_asm_sta_zx:
.ac22					xt_asm_sta_zxi:
.ac22	a9 81		lda #$81	                lda #$81
.ac24	80 50		bra $ac76	                bra asm_common
.ac26					z_asm_sta_zxi:
.ac26					xt_asm_stx:
.ac26	a9 8e		lda #$8e	                lda #$8E
.ac28	80 4c		bra $ac76	                bra asm_common
.ac2a					z_asm_stx:
.ac2a					xt_asm_stx_z:
.ac2a	a9 86		lda #$86	                lda #$86
.ac2c	80 48		bra $ac76	                bra asm_common
.ac2e					z_asm_stx_z:
.ac2e					xt_asm_stx_zy:
.ac2e	a9 96		lda #$96	                lda #$96
.ac30	80 44		bra $ac76	                bra asm_common
.ac32					z_asm_stx_zy:
.ac32					xt_asm_sty:
.ac32	a9 8c		lda #$8c	                lda #$8C
.ac34	80 40		bra $ac76	                bra asm_common
.ac36					z_asm_sty:
.ac36					xt_asm_sty_z:
.ac36	a9 84		lda #$84	                lda #$84
.ac38	80 3c		bra $ac76	                bra asm_common
.ac3a					z_asm_sty_z:
.ac3a					xt_asm_sty_zx:
.ac3a	a9 94		lda #$94	                lda #$94
.ac3c	80 38		bra $ac76	                bra asm_common
.ac3e					z_asm_sty_zx:
.ac3e					xt_asm_stz:
.ac3e	a9 9c		lda #$9c	                lda #$9C
.ac40	80 34		bra $ac76	                bra asm_common
.ac42					z_asm_stz:
.ac42					xt_asm_stz_x:
.ac42	a9 9e		lda #$9e	                lda #$9E
.ac44	80 30		bra $ac76	                bra asm_common
.ac46					z_asm_stz_x:
.ac46					xt_asm_stz_z:
.ac46	a9 64		lda #$64	                lda #$64
.ac48	80 2c		bra $ac76	                bra asm_common
.ac4a					z_asm_stz_z:
.ac4a					xt_asm_stz_zx:
.ac4a	a9 74		lda #$74	                lda #$74
.ac4c	80 28		bra $ac76	                bra asm_common
.ac4e					z_asm_stz_zx:
.ac4e					xt_asm_tax:
.ac4e	a9 aa		lda #$aa	                lda #$AA
.ac50	80 24		bra $ac76	                bra asm_common
.ac52					z_asm_tax:
.ac52					xt_asm_tay:
.ac52	a9 a8		lda #$a8	                lda #$A8
.ac54	80 20		bra $ac76	                bra asm_common
.ac56					z_asm_tay:
.ac56					xt_asm_trb:
.ac56	a9 1c		lda #$1c	                lda #$1C
.ac58	80 1c		bra $ac76	                bra asm_common
.ac5a					z_asm_trb:
.ac5a					xt_asm_trb_z:
.ac5a	a9 14		lda #$14	                lda #$14
.ac5c	80 18		bra $ac76	                bra asm_common
.ac5e					z_asm_trb_z:
.ac5e					xt_asm_tsb:
.ac5e	a9 0c		lda #$0c	                lda #$0C
.ac60	80 14		bra $ac76	                bra asm_common
.ac62					z_asm_tsb:
.ac62					xt_asm_tsb_z:
.ac62	a9 04		lda #$04	                lda #$04
.ac64	80 10		bra $ac76	                bra asm_common
.ac66					z_asm_tsb_z:
.ac66					xt_asm_tsx:
.ac66	a9 ba		lda #$ba	                lda #$BA
.ac68	80 0c		bra $ac76	                bra asm_common
.ac6a					z_asm_tsx:
.ac6a					xt_asm_txa:
.ac6a	a9 8a		lda #$8a	                lda #$8A
.ac6c	80 08		bra $ac76	                bra asm_common
.ac6e					z_asm_txa:
.ac6e					xt_asm_txs:
.ac6e	a9 9a		lda #$9a	                lda #$9A
.ac70	80 04		bra $ac76	                bra asm_common
.ac72					z_asm_txs:
.ac72					xt_asm_tya:
.ac72	a9 98		lda #$98	                lda #$98
.ac74	80 00		bra $ac76	                bra asm_common
.ac76					z_asm_tya:
.ac76					asm_common:
.ac76	a8		tay		                tay
.ac77	20 dc d6	jsr $d6dc	                jsr cmpl_a
.ac7a	a9 e2		lda #$e2	                lda #<oc_index_table
.ac7c	85 26		sta $26		                sta tmp2
.ac7e	a9 ae		lda #$ae	                lda #>oc_index_table
.ac80	85 27		sta $27		                sta tmp2+1
.ac82	98		tya		                tya             ; retrieve opcode
.ac83	0a		asl a		                asl             ; times two for offset
.ac84	90 02		bcc $ac88	                bcc +
.ac86	e6 27		inc $27		                inc tmp2+1
.ac88					+
.ac88	a8		tay		                tay             ; use Y as the index
.ac89	b1 26		lda ($26),y	                lda (tmp2),y    ; LSB
.ac8b	85 28		sta $28		                sta tmp3
.ac8d	c8		iny		                iny
.ac8e	b1 26		lda ($26),y	                lda (tmp2),y    ; MSB
.ac90	85 29		sta $29		                sta tmp3+1
.ac92	b2 28		lda ($28)	                lda (tmp3)      ; get "lengths byte"
.ac94	2a		rol a		                rol
.ac95	2a		rol a		                rol
.ac96	2a		rol a		                rol             ; Three times because we go through Carry
.ac97	29 03		and #$03	                and #%00000011
.ac99	a8		tay		                tay
.ac9a	88		dey		                dey
.ac9b	f0 12		beq $acaf	                beq _done
.ac9d	20 29 d8	jsr $d829	                jsr underflow_1
.aca0	b5 00		lda $00,x	                lda 0,x
.aca2	20 dc d6	jsr $d6dc	                jsr cmpl_a      ; does not use Y
.aca5	88		dey		                dey
.aca6	f0 05		beq $acad	                beq _done_drop
.aca8	b5 01		lda $01,x	                lda 1,x
.acaa	20 dc d6	jsr $d6dc	                jsr cmpl_a      ; Fall through to _done_drop
.acad					_done_drop:
.acad	e8		inx		                inx
.acae	e8		inx		                inx             ; Fall through to _done
.acaf					_done:
.acaf	60		rts		                rts             ; Returns to original caller
.acb0					xt_asm_push_a:
.acb0	a0 00		ldy #$00	                ldy #0
.acb2					_loop:
.acb2	b9 c0 ac	lda $acc0,y	                lda asm_push_a_data,y
.acb5	c9 ff		cmp #$ff	                cmp #$FF
.acb7	f0 06		beq $acbf	                beq _done
.acb9	20 dc d6	jsr $d6dc	                jsr cmpl_a      ; does not change Y
.acbc	c8		iny		                iny
.acbd	80 f3		bra $acb2	                bra _loop
.acbf					_done:
.acbf					z_asm_push_a:
.acbf	60		rts		                rts
.acc0					asm_push_a_data:
>acc0	ca ca 95 00 74 01		        .byte $CA, $CA, $95, 00, $74, $01
>acc6	ff				        .byte $FF               ; terminator
.acc7					xt_asm_back_jump:
.acc7					z_asm_back_jump:
.acc7	60		rts		                rts
.acc8					xt_asm_back_branch:
.acc8	20 72 91	jsr $9172	                jsr xt_here             ; ( addr-l addr-h )
.accb	20 50 95	jsr $9550	                jsr xt_minus            ; ( offset )
.acce	3a		dec a		                dea
.accf	3a		dec a		                dea
.acd0					z_asm_back_branch:
.acd0	60		rts		                rts
.acd1					assembler_end:

;******  Return to file: platform/../taliforth.asm


;******  Processing file: platform/../disassembler.asm

.acd1					disassembler:
.acd1	20 63 89	jsr $8963	                jsr xt_cr       ; ( addr u )
.acd4					_byte_loop:
.acd4	20 93 98	jsr $9893	                jsr xt_over     ; ( addr u addr )
.acd7	20 28 a5	jsr $a528	                jsr xt_u_dot    ; ( addr u )
.acda	20 1e a1	jsr $a11e	                jsr xt_space
.acdd	a9 e2		lda #$e2	                lda #<oc_index_table
.acdf	85 26		sta $26		                sta tmp2
.ace1	a9 ae		lda #$ae	                lda #>oc_index_table
.ace3	85 27		sta $27		                sta tmp2+1
.ace5	a1 02		lda ($02,x)	                lda (2,x)       ; get opcode that addr points to
.ace7	85 36		sta $36		                sta scratch     ; Save opcode
.ace9	0a		asl a		                asl             ; multiply by two for offset
.acea	90 02		bcc $acee	                bcc +
.acec	e6 27		inc $27		                inc tmp2+1      ; we're on second page
.acee					+
.acee	a8		tay		                tay             ; use Y as the index
.acef	b1 26		lda ($26),y	                lda (tmp2),y    ; LSB
.acf1	85 28		sta $28		                sta tmp3
.acf3	48		pha		                pha
.acf4	c8		iny		                iny
.acf5	b1 26		lda ($26),y	                lda (tmp2),y    ; MSB
.acf7	85 29		sta $29		                sta tmp3+1
.acf9	48		pha		                pha
.acfa	b2 28		lda ($28)	                lda (tmp3)
.acfc	a8		tay		                tay                     ; save copy of lengths byte
.acfd	10 3c		bpl $ad3b	                bpl _no_operand         ; bit 7 clear, single-byte instruction
.acff	20 a2 a7	jsr $a7a2	                jsr xt_zero             ; ( addr u 0 ) ZERO does not use Y
.ad02	f6 04		inc $04,x	                inc 4,x
.ad04	d0 02		bne $ad08	                bne +
.ad06	f6 05		inc $05,x	                inc 5,x                 ; ( addr+1 u 0 )
.ad08					+
.ad08	b5 02		lda $02,x	                lda 2,x
.ad0a	d0 02		bne $ad0e	                bne +
.ad0c	d6 03		dec $03,x	                dec 3,x
.ad0e					+
.ad0e	d6 02		dec $02,x	                dec 2,x                 ; ( addr+1 u-1 0 )
.ad10	a1 04		lda ($04,x)	                lda (4,x)
.ad12	95 00		sta $00,x	                sta 0,x                 ; LSB of operand ( addr+1 u-1 LSB )
.ad14	85 37		sta $37		                sta scratch+1           ; Save a copy in the scratch buffer
.ad16	98		tya		                tya                     ; retrieve copy of lengths byte
.ad17	2a		rol a		                rol                     ; shift bit 6 to bit 7
.ad18	10 14		bpl $ad2e	                bpl _print_operand
.ad1a	f6 04		inc $04,x	                inc 4,x
.ad1c	d0 02		bne $ad20	                bne +
.ad1e	f6 05		inc $05,x	                inc 5,x                 ; ( addr+2 u-1 LSB )
.ad20					+
.ad20	b5 02		lda $02,x	                lda 2,x
.ad22	d0 02		bne $ad26	                bne +
.ad24	d6 03		dec $03,x	                dec 3,x
.ad26					+
.ad26	d6 02		dec $02,x	                dec 2,x                 ; ( addr+2 u-2 LSB )
.ad28	a1 04		lda ($04,x)	                lda (4,x)
.ad2a	95 01		sta $01,x	                sta 1,x                 ; MSB of operand ( addr+2 u-2 opr )
.ad2c	85 38		sta $38		                sta scratch+2           ; Save a copy in the scratch buffer
.ad2e					_print_operand:
.ad2e	ca		dex		                dex
.ad2f	ca		dex		                dex
.ad30	a9 05		lda #$05	                lda #5
.ad32	95 00		sta $00,x	                sta 0,x
.ad34	74 01		stz $01,x	                stz 1,x                 ; ( addr+n u-n opr 5 )
.ad36	20 34 a5	jsr $a534	                jsr xt_u_dot_r          ; U.R ( addr+n u-n )
.ad39	80 0b		bra $ad46	                bra _print_mnemonic
.ad3b					_no_operand:
.ad3b	ca		dex		                dex
.ad3c	ca		dex		                dex
.ad3d	a9 05		lda #$05	                lda #5
.ad3f	95 00		sta $00,x	                sta 0,x
.ad41	74 01		stz $01,x	                stz 1,x                 ; ( addr u 5 )
.ad43	20 24 a1	jsr $a124	                jsr xt_spaces           ; ( addr u )
.ad46					_print_mnemonic:
.ad46	20 1e a1	jsr $a11e	                jsr xt_space
.ad49	ca		dex		                dex
.ad4a	ca		dex		                dex                     ; ( addr u ? )
.ad4b	68		pla		                pla                     ; MSB
.ad4c	95 01		sta $01,x	                sta 1,x                 ; ( addr u MSB )
.ad4e	68		pla		                pla                     ; LSB
.ad4f	95 00		sta $00,x	                sta 0,x                 ; ( addr u addr-o )
.ad51	20 4f 89	jsr $894f	                jsr xt_count            ; ( addr u addr-o u-o )
.ad54	74 01		stz $01,x	                stz 1,x                 ; paranoid
.ad56	b5 00		lda $00,x	                lda 0,x
.ad58	29 07		and #$07	                and #%00000111          ; ( addr u addr-o u-o )
.ad5a	95 00		sta $00,x	                sta 0,x
.ad5c	20 fd a4	jsr $a4fd	                jsr xt_type             ; ( addr u )
.ad5f	a5 36		lda $36		                lda scratch
.ad61	c9 20		cmp #$20	                cmp #$20
.ad63	d0 59		bne $adbe	                bne _not_jsr
.ad65	ca		dex		                dex
.ad66	ca		dex		                dex
.ad67	a9 05		lda #$05	                lda #5
.ad69	95 00		sta $00,x	                sta 0,x
.ad6b	74 01		stz $01,x	                stz 1,x
.ad6d	20 24 a1	jsr $a124	                jsr xt_spaces
.ad70	a9 98		lda #$98	                lda #<literal_runtime
.ad72	c5 37		cmp $37		                cmp scratch+1
.ad74	d0 0c		bne $ad82	                bne _not_literal
.ad76	a9 93		lda #$93	                lda #>literal_runtime
.ad78	c5 38		cmp $38		                cmp scratch+2
.ad7a	d0 06		bne $ad82	                bne _not_literal
.ad7c	20 74 ae	jsr $ae74	                jsr disasm_literal
.ad7f	4c eb ad	jmp $adeb	                jmp _printing_done
.ad82					_not_literal:
.ad82	a9 a9		lda #$a9	                lda #<sliteral_runtime
.ad84	c5 37		cmp $37		                cmp scratch+1
.ad86	d0 0c		bne $ad94	                bne _not_sliteral
.ad88	a9 a0		lda #$a0	                lda #>sliteral_runtime
.ad8a	c5 38		cmp $38		                cmp scratch+2
.ad8c	d0 06		bne $ad94	                bne _not_sliteral
.ad8e	20 31 ae	jsr $ae31	                jsr disasm_sliteral
.ad91	4c eb ad	jmp $adeb	                jmp _printing_done
.ad94					_not_sliteral:
.ad94	a9 14		lda #$14	                lda #<zero_branch_runtime
.ad96	c5 37		cmp $37		                cmp scratch+1
.ad98	d0 0c		bne $ada6	                bne _not_0branch
.ad9a	a9 92		lda #$92	                lda #>zero_branch_runtime
.ad9c	c5 38		cmp $38		                cmp scratch+2
.ad9e	d0 06		bne $ada6	                bne _not_0branch
.ada0	20 68 ae	jsr $ae68	                jsr disasm_0branch
.ada3	4c eb ad	jmp $adeb	                jmp _printing_done
.ada6					_not_0branch
.ada6	a9 db		lda #$db	                lda #<branch_runtime
.ada8	c5 37		cmp $37		                cmp scratch+1
.adaa	d0 0c		bne $adb8	                bne _not_branch
.adac	a9 8d		lda #$8d	                lda #>branch_runtime
.adae	c5 38		cmp $38		                cmp scratch+2
.adb0	d0 06		bne $adb8	                bne _not_branch
.adb2	20 6d ae	jsr $ae6d	                jsr disasm_branch
.adb5	4c eb ad	jmp $adeb	                jmp _printing_done
.adb8					_not_branch
.adb8	20 92 ae	jsr $ae92	                jsr disasm_jsr
.adbb	4c eb ad	jmp $adeb	                jmp _printing_done
.adbe					_not_jsr:
.adbe	c9 4c		cmp #$4c	                cmp #$4C
.adc0	d0 29		bne $adeb	                bne _printing_done
.adc2	a5 37		lda $37		                lda scratch+1   ; Copy the pointer.
.adc4	85 39		sta $39		                sta scratch+3
.adc6	a5 38		lda $38		                lda scratch+2
.adc8	85 3a		sta $3a		                sta scratch+4
.adca	b2 39		lda ($39)	                lda (scratch+3)
.adcc	c9 20		cmp #$20	                cmp #$20 ; check for JSR
.adce	d0 1b		bne $adeb	                bne _printing_done
.add0	e6 39		inc $39		                inc scratch+3
.add2	d0 02		bne $add6	                bne +
.add4	e6 3a		inc $3a		                inc scratch+4
.add6					+
.add6	b2 39		lda ($39)	                lda (scratch+3)
.add8	c9 a9		cmp #$a9	                cmp #<sliteral_runtime
.adda	d0 0f		bne $adeb	                bne _printing_done
.addc	e6 39		inc $39		                inc scratch+3
.adde	d0 02		bne $ade2	                bne +
.ade0	e6 3a		inc $3a		                inc scratch+4
.ade2					+
.ade2	b2 39		lda ($39)	                lda (scratch+3)
.ade4	c9 a0		cmp #$a0	                cmp #>sliteral_runtime
.ade6	d0 03		bne $adeb	                bne _printing_done
.ade8	20 07 ae	jsr $ae07	                jsr disasm_sliteral_jump
.adeb					_printing_done:
.adeb	20 63 89	jsr $8963	                jsr xt_cr
.adee	f6 02		inc $02,x	                inc 2,x
.adf0	d0 02		bne $adf4	                bne +
.adf2	f6 03		inc $03,x	                inc 3,x                 ; ( addr+1 u )
.adf4					+
.adf4	20 11 98	jsr $9811	                jsr xt_one_minus        ; ( addr+1 u-1 )
.adf7	b5 00		lda $00,x	                lda 0,x                 ; All done?
.adf9	15 01		ora $01,x	                ora 1,x
.adfb	f0 07		beq $ae04	                beq _done
.adfd	b5 01		lda $01,x	                lda 1,x                 ; Catch mid-instruction ranges
.adff	30 03		bmi $ae04	                bmi _done
.ae01	4c d4 ac	jmp $acd4	                jmp _byte_loop          ; out of range for BRA
.ae04					_done:
.ae04	4c aa a3	jmp $a3aa	                jmp xt_two_drop         ; JSR/RTS
.ae07					disasm_sliteral_jump:
.ae07	20 a8 a1	jsr $a1a8	                jsr xt_swap
.ae0a	ca		dex		                dex
.ae0b	ca		dex		                dex
.ae0c	a5 37		lda $37		                lda scratch+1
.ae0e	95 00		sta $00,x	                sta 0,x
.ae10	a5 38		lda $38		                lda scratch+2
.ae12	95 01		sta $01,x	                sta 1,x
.ae14	20 a8 a1	jsr $a1a8	                jsr xt_swap
.ae17	20 50 95	jsr $9550	                jsr xt_minus
.ae1a	20 11 98	jsr $9811	                jsr xt_one_minus
.ae1d	20 50 95	jsr $9550	                jsr xt_minus
.ae20	ca		dex		                dex
.ae21	ca		dex		                dex
.ae22	a5 37		lda $37		                lda scratch+1
.ae24	95 00		sta $00,x	                sta 0,x
.ae26	a5 38		lda $38		                lda scratch+2
.ae28	95 01		sta $01,x	                sta 1,x
.ae2a	20 11 98	jsr $9811	                jsr xt_one_minus
.ae2d	20 a8 a1	jsr $a1a8	                jsr xt_swap ; ( new_addr new_n )
.ae30	60		rts		                rts
.ae31					disasm_sliteral:
.ae31	a9 53		lda #$53	                lda #'S'
.ae33	20 f6 8d	jsr $8df6	                jsr emit_a ; Print S before LITERAL so it becomes SLITERAL
.ae36	a9 0d		lda #$0d	                lda #str_disasm_lit     ; "LITERAL "
.ae38	20 55 d8	jsr $d855	                jsr print_string_no_lf
.ae3b	20 a8 a1	jsr $a1a8	                jsr xt_swap             ; switch to (u addr)
.ae3e	20 1d 98	jsr $981d	                jsr xt_one_plus
.ae41	20 af 8d	jsr $8daf	                jsr xt_dup
.ae44	20 80 8f	jsr $8f80	                jsr xt_fetch
.ae47	20 28 a5	jsr $a528	                jsr xt_u_dot            ; Print the address of the string
.ae4a	20 a1 a3	jsr $a3a1	                jsr xt_two
.ae4d	20 e3 99	jsr $99e3	                jsr xt_plus
.ae50	20 af 8d	jsr $8daf	                jsr xt_dup
.ae53	20 62 9a	jsr $9a62	                jsr xt_question         ; Print the length of the string
.ae56	20 1d 98	jsr $981d	                jsr xt_one_plus
.ae59	20 a8 a1	jsr $a1a8	                jsr xt_swap            ; ( addr+4 u )
.ae5c	ca		dex		                dex
.ae5d	ca		dex		                dex
.ae5e	a9 04		lda #$04	                lda #4
.ae60	95 00		sta $00,x	                sta 0,x
.ae62	74 01		stz $01,x	                stz 1,x
.ae64	20 50 95	jsr $9550	                jsr xt_minus            ; ( addr+4 u-4 )
.ae67	60		rts		                rts
.ae68					disasm_0branch:
.ae68	a9 30		lda #$30	                lda #'0'
.ae6a	20 f6 8d	jsr $8df6	                jsr emit_a ; Print 0 before BRANCH so it becomes 0BRANCH
.ae6d					disasm_branch:
.ae6d	a9 0f		lda #$0f	                lda #str_disasm_bra
.ae6f	20 55 d8	jsr $d855	                jsr print_string_no_lf ; "BRANCH "
.ae72	80 05		bra $ae79	                bra disasm_print_literal
.ae74					disasm_literal:
.ae74	a9 0d		lda #$0d	                lda #str_disasm_lit
.ae76	20 55 d8	jsr $d855	                jsr print_string_no_lf ; "LITERAL "
.ae79					disasm_print_literal:
.ae79	20 a8 a1	jsr $a1a8	                jsr xt_swap ; switch to (u addr)
.ae7c	20 1d 98	jsr $981d	                jsr xt_one_plus
.ae7f	20 af 8d	jsr $8daf	                jsr xt_dup
.ae82	20 62 9a	jsr $9a62	                jsr xt_question ; Print the value at the adress
.ae85	20 1d 98	jsr $981d	                jsr xt_one_plus
.ae88	20 a8 a1	jsr $a1a8	                jsr xt_swap ; (addr+2 u)
.ae8b	20 11 98	jsr $9811	                jsr xt_one_minus
.ae8e	20 11 98	jsr $9811	                jsr xt_one_minus ; (addr+2 u-2)
.ae91	60		rts		                rts
.ae92					disasm_jsr:
.ae92	ca		dex		                dex
.ae93	ca		dex		                dex
.ae94	a5 37		lda $37		                lda scratch+1
.ae96	95 00		sta $00,x	                sta 0,x
.ae98	a5 38		lda $38		                lda scratch+2
.ae9a	95 01		sta $01,x	                sta 1,x
.ae9c	20 78 92	jsr $9278	                jsr xt_int_to_name
.ae9f	b5 00		lda $00,x	                lda 0,x
.aea1	15 01		ora $01,x	                ora 1,x
.aea3	f0 07		beq $aeac	                beq _disasm_no_nt
.aea5	20 fe 95	jsr $95fe	                jsr xt_name_to_string
.aea8	20 fd a4	jsr $a4fd	                jsr xt_type
.aeab	60		rts		                rts
.aeac					_disasm_no_nt:
.aeac	20 2e 8d	jsr $8d2e	                jsr xt_drop ; the 0 indicating no name token
.aeaf	ca		dex		                dex
.aeb0	ca		dex		                dex
.aeb1	a5 37		lda $37		                lda scratch+1
.aeb3	95 00		sta $00,x	                sta 0,x
.aeb5	a5 38		lda $38		                lda scratch+2
.aeb7	95 01		sta $01,x	                sta 1,x
.aeb9	ca		dex		                dex
.aeba	ca		dex		                dex
.aebb	a9 29		lda #$29	                lda #<underflow_1
.aebd	95 00		sta $00,x	                sta 0,x
.aebf	a9 d8		lda #$d8	                lda #>underflow_1
.aec1	95 01		sta $01,x	                sta 1,x
.aec3	20 50 d7	jsr $d750	                jsr compare_16bit
.aec6	f0 02		beq $aeca	                beq _disasm_jsr_uflow_check_upper
.aec8	b0 14		bcs $aede	                bcs _disasm_jsr_unknown
.aeca					_disasm_jsr_uflow_check_upper:
.aeca	a9 38		lda #$38	                lda #<underflow_4
.aecc	95 00		sta $00,x	                sta 0,x
.aece	a9 d8		lda #$d8	                lda #>underflow_4
.aed0	95 01		sta $01,x	                sta 1,x
.aed2	20 50 d7	jsr $d750	                jsr compare_16bit
.aed5	f0 02		beq $aed9	                beq _disasm_jsr_soc
.aed7	90 05		bcc $aede	                bcc _disasm_jsr_unknown
.aed9					_disasm_jsr_soc:
.aed9	a9 0e		lda #$0e	                lda #str_disasm_sdc
.aedb	20 55 d8	jsr $d855	                jsr print_string_no_lf  ; "STACK DEPTH CHECK"
.aede					_disasm_jsr_unknown:
.aede	20 aa a3	jsr $a3aa	                jsr xt_two_drop
.aee1	60		rts		                rts
.aee2					oc_index_table:
>aee2	e2 b0 e6 b0 7a b5 7a b5		        .word oc00, oc01, oc__, oc__, oc04, oc05, oc06, oc__
>aeea	ee b0 f4 b0 fa b0 7a b5
>aef2	00 b1 04 b1 0a b1 7a b5		        .word oc08, oc09, oc0a, oc__, oc0c, oc0d, oc0e, oc0f
>aefa	10 b1 14 b1 18 b1 1c b1
>af02	21 b1 25 b1 2d b1 7a b5		        .word oc10, oc11, oc12, oc__, oc14, oc15, oc16, oc17
>af0a	34 b1 3a b1 41 b1 48 b1
>af12	4f b1 53 b1 59 b1 7a b5		        .word oc18, oc19, oc1a, oc__, oc1c, oc1d, oc__, oc1f
>af1a	5f b1 63 b1 7a b5 69 b1
>af22	6f b1 73 b1 7a b5 7a b5		        .word oc20, oc21, oc__, oc__, oc24, oc25, oc26, oc27
>af2a	7b b1 81 b1 87 b1 8d b1
>af32	94 b1 98 b1 9e b1 7a b5		        .word oc28, oc29, oc2a, oc__, oc2c, oc2d, oc2e, oc2f
>af3a	a4 b1 a8 b1 ad b1 b1 b1
>af42	b6 b1 ba b1 c2 b1 7a b5		        .word oc30, oc31, oc32, oc__, oc34, oc35, oc36, oc37
>af4a	c9 b1 d1 b1 d8 b1 df b1
>af52	e6 b1 ea b1 f0 b1 7a b5		        .word oc38, oc39, oc3a, oc__, oc3c, oc3d, oc3e, oc0f
>af5a	f6 b1 fc b1 02 b2 1c b1
>af62	0d b2 11 b2 7a b5 7a b5		        .word oc40, oc41, oc__, oc__, oc__, oc45, oc46, oc47
>af6a	7a b5 19 b2 1f b2 25 b2
>af72	2c b2 30 b2 36 b2 7a b5		        .word oc48, oc49, oc4a, oc__, oc4c, oc4d, oc4e, oc4f
>af7a	3c b2 40 b2 44 b2 48 b2
>af82	4d b2 51 b2 59 b2 7a b5		        .word oc50, oc51, oc52, oc__, oc__, oc55, oc56, oc57
>af8a	7a b5 60 b2 67 b2 6e b2
>af92	75 b2 79 b2 7f b2 7a b5		        .word oc58, oc59, oc5a, oc__, oc__, oc__, oc5e, oc5f
>af9a	7a b5 7a b5 89 b2 8f b2
>afa2	94 b2 98 b2 7a b5 7a b5		        .word oc60, oc61, oc__, oc__, oc64, oc65, oc66, oc67
>afaa	a0 b2 a6 b2 ac b2 b2 b2
>afb2	b9 b2 bd b2 c3 b2 7a b5		        .word oc68, oc69, oc6a, oc__, oc6c, oc6d, oc6e, oc6f
>afba	c9 b2 cf b2 d3 b2 d7 b2
>afc2	dc b2 e0 b2 e8 b2 7a b5		        .word oc70, oc71, oc72, oc__, oc74, oc75, oc76, oc77
>afca	ef b2 f6 b2 fd b2 04 b3
>afd2	0b b3 0f b3 15 b3 7a b5		        .word oc78, oc79, oc7a, oc__, oc7c, oc7d, oc7e, oc7f
>afda	19 b3 20 b3 26 b3 2c b3
>afe2	31 b3 35 b3 7a b5 7a b5		        .word oc80, oc81, oc__, oc__, oc84, oc85, oc86, oc__
>afea	3d b3 43 b3 49 b3 7a b5
>aff2	4f b3 53 b3 59 b3 7a b5		        .word oc88, oc89, oc8a, oc__, oc8c, oc8d, oc8e, oc8f
>affa	5d b3 61 b3 65 b3 69 b3
>b002	6e b3 72 b3 7a b3 7a b5		        .word oc90, oc91, oc92, oc__, oc94, oc95, oc96, oc97
>b00a	81 b3 88 b3 8f b3 96 b3
>b012	9d b3 a1 b3 a7 b3 7a b5		        .word oc98, oc99, oc9a, oc__, oc9c, oc9d, oc9e, oc9f
>b01a	ab b3 af b3 b5 b3 bb b3
>b022	c0 b3 c6 b3 ce b3 7a b5		        .word oca0, oca1, oca2, oc__, oca4, oca5, oca6, oca7
>b02a	d4 b3 da b3 e0 b3 e6 b3
>b032	ed b3 f1 b3 f7 b3 7a b5		        .word oca8, oca9, ocaa, oc__, ocac, ocad, ocae, ocaf
>b03a	fb b3 ff b3 03 b4 07 b4
>b042	0c b4 10 b4 18 b4 7a b5		        .word ocb0, ocb1, ocb2, oc__, ocb4, ocb5, ocb6, ocb7
>b04a	1f b4 26 b4 2d b4 34 b4
>b052	3b b4 3f b4 45 b4 7a b5		        .word ocb8, ocb9, ocba, oc__, ocbc, ocbd, ocbe, ocbf
>b05a	49 b4 4f b4 55 b4 5b b4
>b062	60 b4 66 b4 7a b5 7a b5		        .word occ0, occ1, oc__, oc__, occ4, occ5, occ6, occ7
>b06a	6e b4 74 b4 7a b4 80 b4
>b072	87 b4 8b b4 91 b4 7a b5		        .word occ8, occ9, occa, oc__, occc, occd, occe, occf
>b07a	95 b4 99 b4 9d b4 a1 b4
>b082	a6 b4 aa b4 b2 b4 7a b5		        .word ocd0, ocd1, ocd2, oc__, oc__, ocd5, ocd6, ocd7
>b08a	7a b5 b9 b4 c0 b4 c7 b4
>b092	ce b4 d2 b4 d8 b4 7a b5		        .word ocd8, ocd9, ocda, oc__, oc__, ocdd, ocde, ocdf
>b09a	7a b5 dc b4 e2 b4 e8 b4
>b0a2	ed b4 f3 b4 7a b5 7a b5		        .word oce0, oce1, oc__, oc__, oce4, oce5, oce6, oce7
>b0aa	fb b4 01 b5 07 b5 0d b5
>b0b2	14 b5 18 b5 1e b5 7a b5		        .word oce8, oce9, ocea, oc__, ocec, oced, ocee, ocef
>b0ba	22 b5 26 b5 2a b5 2e b5
>b0c2	33 b5 37 b5 3f b5 7a b5		        .word ocf0, ocf1, ocf2, oc__, oc__, ocf5, ocf6, ocf7
>b0ca	7a b5 46 b5 4d b5 54 b5
>b0d2	5b b5 5f b5 65 b5 7a b5		        .word ocf8, ocf9, ocfa, oc__, oc__, ocfd, ocfe, ocff
>b0da	7a b5 69 b5 6f b5 75 b5
.b0e2					oc_table:
>b0e2	83 62 72 6b				oc00:	.text 2*64+3, "brk"              ; enforce the signature byte
>b0e6	87 6f 72 61 2e 7a 78 69			oc01:	.text 2*64+7, "ora.zxi"
>b0ee	85 74 73 62 2e 7a		        oc04:   .text 2*64+5, "tsb.z"
>b0f4	85 6f 72 61 2e 7a			oc05:	.text 2*64+5, "ora.z"
>b0fa	85 61 73 6c 2e 7a			oc06:	.text 2*64+5, "asl.z"
>b100	43 70 68 70				oc08:	.text 1*64+3, "php"
>b104	85 6f 72 61 2e 23			oc09:	.text 2*64+5, "ora.#"
>b10a	45 61 73 6c 2e 61			oc0a:	.text 1*64+5, "asl.a"
>b110	c3 74 73 62				oc0c:	.text 3*64+3, "tsb"
>b114	c3 6f 72 61				oc0d:	.text 3*64+3, "ora"
>b118	c3 61 73 6c				oc0e:	.text 3*64+3, "asl"
>b11c	c4 62 62 72 30				oc0f:	.text 3*64+4, "bbr0"
>b121	83 62 70 6c				oc10:	.text 2*64+3, "bpl"
>b125	87 6f 72 61 2e 7a 69 79			oc11:	.text 2*64+7, "ora.ziy"
>b12d	86 6f 72 61 2e 7a 69			oc12:	.text 2*64+6, "ora.zi"
>b134	85 74 72 62 2e 7a			oc14:	.text 2*64+5, "trb.z"
>b13a	86 6f 72 61 2e 7a 78			oc15:	.text 2*64+6, "ora.zx"
>b141	86 61 73 6c 2e 7a 78			oc16:	.text 2*64+6, "asl.zx"
>b148	86 72 6d 62 31 2e 7a			oc17:	.text 2*64+6, "rmb1.z"
>b14f	43 63 6c 63				oc18:	.text 1*64+3, "clc"
>b153	c5 6f 72 61 2e 79			oc19:	.text 3*64+5, "ora.y"
>b159	45 69 6e 63 2e 61			oc1a:	.text 1*64+5, "inc.a"
>b15f	c3 74 72 62				oc1c:	.text 3*64+3, "trb"
>b163	c5 6f 72 61 2e 78			oc1d:	.text 3*64+5, "ora.x"
>b169	c5 61 73 6c 2e 78			oc1f:	.text 3*64+5, "asl.x"
>b16f	c3 6a 73 72				oc20:	.text 3*64+3, "jsr"
>b173	87 61 6e 64 2e 7a 78 69			oc21:	.text 2*64+7, "and.zxi"
>b17b	85 62 69 74 2e 7a			oc24:	.text 2*64+5, "bit.z"
>b181	85 61 6e 64 2e 7a			oc25:	.text 2*64+5, "and.z"
>b187	85 72 6f 6c 2e 7a			oc26:	.text 2*64+5, "rol.z"
>b18d	86 72 6d 62 32 2e 7a			oc27:	.text 2*64+6, "rmb2.z"
>b194	43 70 6c 70				oc28:	.text 1*64+3, "plp"
>b198	85 61 6e 64 2e 23			oc29:	.text 2*64+5, "and.#"
>b19e	45 72 6f 6c 2e 61			oc2a:	.text 1*64+5, "rol.a"
>b1a4	c3 62 69 74				oc2c:	.text 3*64+3, "bit"
>b1a8	c4 61 6e 64 2e				oc2d:	.text 3*64+4, "and."
>b1ad	c3 72 6f 6c				oc2e:	.text 3*64+3, "rol"
>b1b1	c4 62 62 72 32				oc2f:	.text 3*64+4, "bbr2"
>b1b6	83 62 6d 69				oc30:	.text 2*64+3, "bmi"
>b1ba	87 61 6e 64 2e 7a 69 79			oc31:	.text 2*64+7, "and.ziy"
>b1c2	86 61 6e 64 2e 7a 69			oc32:	.text 2*64+6, "and.zi"
>b1c9	87 62 69 74 2e 7a 78 69			oc34:	.text 2*64+7, "bit.zxi"
>b1d1	86 61 6e 64 2e 7a 78			oc35:	.text 2*64+6, "and.zx"
>b1d8	86 72 6f 6c 2e 7a 78			oc36:	.text 2*64+6, "rol.zx"
>b1df	86 72 6d 62 33 2e 7a			oc37:	.text 2*64+6, "rmb3.z"
>b1e6	43 73 65 63				oc38:	.text 1*64+3, "sec"
>b1ea	c5 61 6e 64 2e 79			oc39:	.text 3*64+5, "and.y"
>b1f0	45 64 65 63 2e 61			oc3a:	.text 1*64+5, "dec.a"
>b1f6	c5 62 69 74 2e 78			oc3c:	.text 3*64+5, "bit.x"
>b1fc	c5 61 6e 64 2e 78			oc3d:	.text 3*64+5, "and.x"
>b202	c5 72 6f 6c 2e 78			oc3e:	.text 3*64+5, "rol.x"
>b208	c4 62 62 72 33				oc3f:	.text 3*64+4, "bbr3"
>b20d	43 72 74 69				oc40:	.text 1*64+3, "rti"
>b211	87 65 6f 72 2e 7a 78 69			oc41:	.text 2*64+7, "eor.zxi"
>b219	85 65 6f 72 2e 7a			oc45:	.text 2*64+5, "eor.z"
>b21f	85 6c 73 72 2e 7a			oc46:	.text 2*64+5, "lsr.z"
>b225	86 72 62 6d 34 2e 7a			oc47:	.text 2*64+6, "rbm4.z"
>b22c	43 70 68 61				oc48:	.text 1*64+3, "pha"
>b230	85 65 6f 72 2e 23			oc49:	.text 2*64+5, "eor.#"
>b236	45 6c 73 72 2e 61			oc4a:	.text 1*64+5, "lsr.a"
>b23c	c3 6a 6d 70				oc4c:	.text 3*64+3, "jmp"
>b240	c3 65 6f 72				oc4d:	.text 3*64+3, "eor"
>b244	c3 6c 73 72				oc4e:	.text 3*64+3, "lsr"
>b248	c4 62 62 72 34				oc4f:	.text 3*64+4, "bbr4"
>b24d	83 62 76 63				oc50:	.text 2*64+3, "bvc"
>b251	87 65 6f 72 2e 7a 69 79			oc51:	.text 2*64+7, "eor.ziy"
>b259	86 65 6f 72 2e 7a 69			oc52:	.text 2*64+6, "eor.zi"
>b260	86 65 6f 72 2e 7a 78			oc55:	.text 2*64+6, "eor.zx"
>b267	86 6c 73 72 2e 7a 78			oc56:	.text 2*64+6, "lsr.zx"
>b26e	86 72 62 6d 35 2e 7a			oc57:	.text 2*64+6, "rbm5.z"
>b275	43 63 6c 69				oc58:	.text 1*64+3, "cli"
>b279	c5 65 6f 72 2e 79			oc59:	.text 3*64+5, "eor.y"
>b27f	43 70 68 79				oc5a:	.text 1*64+3, "phy"
>b283	c5 65 6f 72 2e 78			oc5d:	.text 3*64+5, "eor.x"
>b289	c5 6c 73 72 2e 78			oc5e:	.text 3*64+5, "lsr.x"
>b28f	c4 62 62 72 35				oc5f:	.text 3*64+4, "bbr5"
>b294	43 72 74 73				oc60:	.text 1*64+3, "rts"
>b298	87 61 64 63 2e 7a 78 69			oc61:	.text 2*64+7, "adc.zxi"
>b2a0	85 73 74 7a 2e 7a			oc64:	.text 2*64+5, "stz.z"
>b2a6	85 61 64 63 2e 7a			oc65:	.text 2*64+5, "adc.z"
>b2ac	85 72 6f 72 2e 7a			oc66:	.text 2*64+5, "ror.z"
>b2b2	86 72 6d 62 36 2e 7a			oc67:	.text 2*64+6, "rmb6.z"
>b2b9	43 70 6c 61				oc68:	.text 1*64+3, "pla"
>b2bd	85 61 64 63 2e 23			oc69:	.text 2*64+5, "adc.#"
>b2c3	45 72 6f 72 2e 61			oc6a:	.text 1*64+5, "ror.a"
>b2c9	c5 6a 6d 70 2e 69			oc6c:	.text 3*64+5, "jmp.i"
>b2cf	c3 61 64 63				oc6d:	.text 3*64+3, "adc"
>b2d3	c3 72 6f 72				oc6e:	.text 3*64+3, "ror"
>b2d7	c4 62 62 72 36				oc6f:	.text 3*64+4, "bbr6"
>b2dc	83 62 76 73				oc70:	.text 2*64+3, "bvs"
>b2e0	87 61 64 63 2e 7a 69 79			oc71:	.text 2*64+7, "adc.ziy"
>b2e8	86 61 64 63 2e 7a 69			oc72:	.text 2*64+6, "adc.zi"
>b2ef	86 73 74 7a 2e 7a 78			oc74:	.text 2*64+6, "stz.zx"
>b2f6	86 61 64 63 2e 7a 78			oc75:	.text 2*64+6, "adc.zx"
>b2fd	86 72 6f 72 2e 7a 78			oc76:	.text 2*64+6, "ror.zx"
>b304	86 72 6d 62 37 2e 7a			oc77:	.text 2*64+6, "rmb7.z"
>b30b	43 73 65 69				oc78:	.text 1*64+3, "sei"
>b30f	c5 61 64 63 2e 79			oc79:	.text 3*64+5, "adc.y"
>b315	43 70 6c 79				oc7a:	.text 1*64+3, "ply"
>b319	c6 6a 6d 70 2e 78 69			oc7c:	.text 3*64+6, "jmp.xi"
>b320	c5 61 64 63 2e 78			oc7d:	.text 3*64+5, "adc.x"
>b326	c5 72 6f 72 2e 78			oc7e:	.text 3*64+5, "ror.x"
>b32c	c4 62 62 72 37				oc7f:	.text 3*64+4, "bbr7"
>b331	83 62 72 61				oc80:	.text 2*64+3, "bra"
>b335	87 73 74 61 2e 7a 78 69			oc81:	.text 2*64+7, "sta.zxi"
>b33d	85 73 74 79 2e 7a			oc84:	.text 2*64+5, "sty.z"
>b343	85 73 74 61 2e 7a			oc85:	.text 2*64+5, "sta.z"
>b349	85 73 74 78 2e 7a			oc86:	.text 2*64+5, "stx.z"
>b34f	43 64 65 79				oc88:	.text 1*64+3, "dey"
>b353	85 62 69 74 2e 23			oc89:	.text 2*64+5, "bit.#"
>b359	43 74 78 61				oc8a:	.text 1*64+3, "txa"
>b35d	c3 73 74 79				oc8c:	.text 3*64+3, "sty"
>b361	c3 73 74 61				oc8d:	.text 3*64+3, "sta"
>b365	c3 73 74 78				oc8e:	.text 3*64+3, "stx"
>b369	c4 62 62 73 30				oc8f:	.text 3*64+4, "bbs0"
>b36e	83 62 63 63				oc90:	.text 2*64+3, "bcc"
>b372	87 73 74 61 2e 7a 69 79			oc91:	.text 2*64+7, "sta.ziy"
>b37a	86 73 74 61 2e 7a 69			oc92:	.text 2*64+6, "sta.zi"
>b381	86 73 74 79 2e 7a 78			oc94:	.text 2*64+6, "sty.zx"
>b388	86 73 74 61 2e 7a 78			oc95:	.text 2*64+6, "sta.zx"
>b38f	86 73 74 78 2e 7a 79			oc96:	.text 2*64+6, "stx.zy"
>b396	86 73 6d 62 31 2e 7a			oc97:	.text 2*64+6, "smb1.z"
>b39d	43 74 79 61				oc98:	.text 1*64+3, "tya"
>b3a1	c5 73 74 61 2e 79			oc99:	.text 3*64+5, "sta.y"
>b3a7	43 74 78 73				oc9a:	.text 1*64+3, "txs"
>b3ab	c3 73 74 7a				oc9c:	.text 3*64+3, "stz"
>b3af	c5 73 74 61 2e 78			oc9d:	.text 3*64+5, "sta.x"
>b3b5	c5 73 74 7a 2e 78			oc9e:	.text 3*64+5, "stz.x"
>b3bb	c4 62 62 73 31				oc9f:	.text 3*64+4, "bbs1"
>b3c0	85 6c 64 79 2e 23			oca0:	.text 2*64+5, "ldy.#"
>b3c6	87 6c 64 61 2e 7a 78 69			oca1:	.text 2*64+7, "lda.zxi"
>b3ce	85 6c 64 78 2e 23			oca2:	.text 2*64+5, "ldx.#"
>b3d4	85 6c 64 79 2e 7a			oca4:	.text 2*64+5, "ldy.z"
>b3da	85 6c 64 61 2e 7a			oca5:	.text 2*64+5, "lda.z"
>b3e0	85 6c 64 78 2e 7a			oca6:	.text 2*64+5, "ldx.z"
>b3e6	86 73 6d 62 32 2e 7a			oca7:	.text 2*64+6, "smb2.z"
>b3ed	43 74 61 79				oca8:	.text 1*64+3, "tay"
>b3f1	85 6c 64 61 2e 23			oca9:	.text 2*64+5, "lda.#"
>b3f7	43 74 61 78				ocaa:	.text 1*64+3, "tax"
>b3fb	c3 6c 64 79				ocac:	.text 3*64+3, "ldy"
>b3ff	c3 6c 64 61				ocad:	.text 3*64+3, "lda"
>b403	c3 6c 64 78				ocae:	.text 3*64+3, "ldx"
>b407	c4 62 62 73 32				ocaf:	.text 3*64+4, "bbs2"
>b40c	83 62 63 73				ocb0:	.text 2*64+3, "bcs"
>b410	87 6c 64 61 2e 7a 69 79			ocb1:	.text 2*64+7, "lda.ziy"
>b418	86 6c 64 61 2e 7a 69			ocb2:	.text 2*64+6, "lda.zi"
>b41f	86 6c 64 79 2e 7a 78			ocb4:	.text 2*64+6, "ldy.zx"
>b426	86 6c 64 61 2e 7a 78			ocb5:	.text 2*64+6, "lda.zx"
>b42d	86 6c 64 78 2e 7a 79			ocb6:	.text 2*64+6, "ldx.zy"
>b434	86 73 6d 62 33 2e 7a			ocb7:	.text 2*64+6, "smb3.z"
>b43b	43 63 6c 76				ocb8:	.text 1*64+3, "clv"
>b43f	c5 6c 64 61 2e 79			ocb9:	.text 3*64+5, "lda.y"
>b445	43 74 73 78				ocba:	.text 1*64+3, "tsx"
>b449	c5 6c 64 79 2e 78			ocbc:	.text 3*64+5, "ldy.x"
>b44f	c5 6c 64 61 2e 78			ocbd:	.text 3*64+5, "lda.x"
>b455	c5 6c 64 78 2e 79			ocbe:	.text 3*64+5, "ldx.y"
>b45b	c4 62 62 73 34				ocbf:	.text 3*64+4, "bbs4"
>b460	85 63 70 79 2e 23			occ0:	.text 2*64+5, "cpy.#"
>b466	87 63 6d 70 2e 7a 78 69			occ1:	.text 2*64+7, "cmp.zxi"
>b46e	85 63 70 79 2e 7a			occ4:	.text 2*64+5, "cpy.z"
>b474	85 63 6d 70 2e 7a			occ5:	.text 2*64+5, "cmp.z"
>b47a	85 64 65 63 2e 7a			occ6:	.text 2*64+5, "dec.z"
>b480	86 73 6d 62 34 2e 7a			occ7:	.text 2*64+6, "smb4.z"
>b487	43 69 6e 79				occ8:	.text 1*64+3, "iny"
>b48b	85 63 6d 70 2e 23			occ9:	.text 2*64+5, "cmp.#"
>b491	43 64 65 78				occa:	.text 1*64+3, "dex"
>b495	c3 63 70 79				occc:	.text 3*64+3, "cpy"
>b499	c3 63 6d 70				occd:	.text 3*64+3, "cmp"
>b49d	c3 64 65 63				occe:	.text 3*64+3, "dec"
>b4a1	c4 62 62 73 34				occf:	.text 3*64+4, "bbs4"
>b4a6	83 62 6e 65				ocd0:	.text 2*64+3, "bne"
>b4aa	87 63 6d 70 2e 7a 69 79			ocd1:	.text 2*64+7, "cmp.ziy"
>b4b2	86 63 6d 70 2e 7a 69			ocd2:	.text 2*64+6, "cmp.zi"
>b4b9	86 63 6d 70 2e 7a 78			ocd5:	.text 2*64+6, "cmp.zx"
>b4c0	86 64 65 63 2e 7a 78			ocd6:	.text 2*64+6, "dec.zx"
>b4c7	86 73 6d 62 35 2e 7a			ocd7:	.text 2*64+6, "smb5.z"
>b4ce	43 63 6c 64				ocd8:	.text 1*64+3, "cld"
>b4d2	c5 63 6d 70 2e 79			ocd9:	.text 3*64+5, "cmp.y"
>b4d8	43 70 68 78				ocda:	.text 1*64+3, "phx"
>b4dc	c5 63 6d 70 2e 78			ocdd:	.text 3*64+5, "cmp.x"
>b4e2	c5 64 65 63 2e 78			ocde:	.text 3*64+5, "dec.x"
>b4e8	c4 62 62 73 35				ocdf:	.text 3*64+4, "bbs5"
>b4ed	85 63 70 78 2e 23			oce0:	.text 2*64+5, "cpx.#"
>b4f3	87 73 62 63 2e 7a 78 69			oce1:	.text 2*64+7, "sbc.zxi"
>b4fb	85 63 70 78 2e 7a			oce4:	.text 2*64+5, "cpx.z"
>b501	85 73 62 63 2e 7a			oce5:	.text 2*64+5, "sbc.z"
>b507	85 69 6e 63 2e 7a			oce6:	.text 2*64+5, "inc.z"
>b50d	86 73 6d 62 36 2e 7a			oce7:	.text 2*64+6, "smb6.z"
>b514	43 69 6e 78				oce8:	.text 1*64+3, "inx"
>b518	85 73 62 63 2e 23			oce9:	.text 2*64+5, "sbc.#"
>b51e	43 6e 6f 70				ocea:	.text 1*64+3, "nop"
>b522	c3 63 70 78				ocec:	.text 3*64+3, "cpx"
>b526	c3 73 62 63				oced:	.text 3*64+3, "sbc"
>b52a	c3 69 6e 63				ocee:	.text 3*64+3, "inc"
>b52e	c4 62 62 73 36				ocef:	.text 3*64+4, "bbs6"
>b533	83 62 65 71				ocf0:	.text 2*64+3, "beq"
>b537	87 73 62 63 2e 7a 69 79			ocf1:	.text 2*64+7, "sbc.ziy"
>b53f	86 73 62 63 2e 7a 69			ocf2:	.text 2*64+6, "sbc.zi"
>b546	86 73 62 63 2e 7a 78			ocf5:	.text 2*64+6, "sbc.zx"
>b54d	86 69 6e 63 2e 7a 78			ocf6:	.text 2*64+6, "inc.zx"
>b554	86 73 6d 62 37 2e 7a			ocf7:	.text 2*64+6, "smb7.z"
>b55b	43 73 65 64				ocf8:	.text 1*64+3, "sed"
>b55f	c5 73 62 63 2e 79			ocf9:	.text 3*64+5, "sbc.y"
>b565	43 70 6c 78				ocfa:	.text 1*64+3, "plx"
>b569	c5 73 62 63 2e 78			ocfd:	.text 3*64+5, "sbc.x"
>b56f	c5 69 6e 63 2e 78			ocfe:	.text 3*64+5, "inc.x"
>b575	c4 62 62 73 37				ocff:	.text 3*64+4, "bbs7"
>b57a	01 3f					oc__:	.text 1, "?"
.b57c					disassembler_end:

;******  Return to file: platform/../taliforth.asm


;******  Processing file: platform/../ed.asm

=46					ed_head  = editor1  ; pointer to first list element (addr) (2 bytes)
=48					ed_cur   = editor2  ; current line number (1 is first line) (2 bytes)
=50					ed_flags = editor3  ; Flags used by ed, where
.b57c					ed6502:
.b57c	a5 18		lda $18		                lda base
.b57e	85 33		sta $33		                sta editor3+1
.b580	a9 0a		lda #$0a	                lda #10
.b582	85 18		sta $18		                sta base
.b584	64 2e		stz $2e		                stz ed_head
.b586	64 2f		stz $2f		                stz ed_head+1
.b588	64 30		stz $30		                stz ed_cur
.b58a	64 31		stz $31		                stz ed_cur+1
.b58c	64 32		stz $32		                stz ed_flags
.b58e	20 a2 a7	jsr $a7a2	                jsr xt_zero
.b591	20 a2 a7	jsr $a7a2	                jsr xt_zero             ; ( addr-t u-t )
.b594	20 63 89	jsr $8963	                jsr xt_cr
.b597					ed_input_loop:
.b597	a9 81		lda #$81	                lda #%10000001
.b599	14 32		trb $32		                trb ed_flags
.b59b	20 76 ba	jsr $ba76	                jsr ed_get_input
.b59e	a5 0a		lda $0a		                lda ciblen
.b5a0	d0 1f		bne $b5c1	                bne _command_mode
.b5a2	ca		dex		                dex
.b5a3	ca		dex		                dex                     ; ( addr-t u-t ? )
.b5a4	a5 30		lda $30		                lda ed_cur
.b5a6	95 00		sta $00,x	                sta 0,x
.b5a8	a5 31		lda $31		                lda ed_cur+1
.b5aa	95 01		sta $01,x	                sta 1,x                 ; ( addr-t u-t u )
.b5ac	a9 80		lda #$80	                lda #%10000000
.b5ae	04 32		tsb $32		                tsb ed_flags
.b5b0	20 1d 98	jsr $981d	                jsr xt_one_plus         ; ( addr-t u-t u+1 )
.b5b3	20 92 ba	jsr $ba92	                jsr ed_is_valid_line
.b5b6	b0 03		bcs $b5bb	                bcs +
.b5b8	4c 66 ba	jmp $ba66	                jmp ed_error_1drop
.b5bb					+
.b5bb	20 a2 a7	jsr $a7a2	                jsr xt_zero             ; ( addr-t u-t u+1 0 )
.b5be	4c 8c b6	jmp $b68c	                jmp _line_number_only_from_external
.b5c1					_command_mode:
.b5c1	20 a2 a7	jsr $a7a2	                jsr xt_zero             ; parameter 1 is NOS ( addr-t u-t 0 )
.b5c4	20 a2 a7	jsr $a7a2	                jsr xt_zero             ; parameter 2 is TOS ( addr-t u-t 0 0 )
.b5c7					_prefix_dot:
.b5c7	b2 08		lda ($08)	                lda (cib)
.b5c9	c9 2e		cmp #$2e	                cmp #$2e                ; ASCII '.'
.b5cb	d0 3a		bne $b607	                bne _prefix_dollar
.b5cd	20 87 ba	jsr $ba87	                jsr ed_have_text
.b5d0	a5 30		lda $30		                lda ed_cur
.b5d2	95 02		sta $02,x	                sta 2,x
.b5d4	a5 31		lda $31		                lda ed_cur+1
.b5d6	95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t cur 0 )
.b5d8	a9 80		lda #$80	                lda #%10000000
.b5da	04 32		tsb $32		                tsb ed_flags
.b5dc	a5 0a		lda $0a		                lda ciblen
.b5de	3a		dec a		                dea                     ; sets Z if A was 1
.b5df	d0 03		bne $b5e4	                bne +
.b5e1	4c 8c b6	jmp $b68c	                jmp _line_number_only_from_external
.b5e4					+
.b5e4	ca		dex		                dex
.b5e5	ca		dex		                dex
.b5e6	ca		dex		                dex
.b5e7	ca		dex		                dex
.b5e8	a5 08		lda $08		                lda cib
.b5ea	95 02		sta $02,x	                sta 2,x
.b5ec	a5 09		lda $09		                lda cib+1
.b5ee	95 03		sta $03,x	                sta 3,x
.b5f0	a5 0a		lda $0a		                lda ciblen
.b5f2	95 00		sta $00,x	                sta 0,x
.b5f4	a5 0b		lda $0b		                lda ciblen+1
.b5f6	95 01		sta $01,x	                sta 1,x
.b5f8	20 11 98	jsr $9811	                jsr xt_one_minus        ; ( addr-t u-t para1 0 addr u-1 )
.b5fb	20 a8 a1	jsr $a1a8	                jsr xt_swap             ; ( addr-t u-t para1 0 u-1 addr )
.b5fe	20 1d 98	jsr $981d	                jsr xt_one_plus         ; ( addr-t u-t para1 0 u-1 addr+1 )
.b601	20 a8 a1	jsr $a1a8	                jsr xt_swap             ; ( addr-t u-t para1 0 addr+1 u-1 )
.b604	4c e4 b6	jmp $b6e4	                jmp _check_for_para2
.b607					_prefix_dollar:
.b607	b2 08		lda ($08)	                lda (cib)
.b609	c9 24		cmp #$24	                cmp #'$'
.b60b	d0 1c		bne $b629	                bne _prefix_percent
.b60d	20 87 ba	jsr $ba87	                jsr ed_have_text
.b610	e8		inx		                inx
.b611	e8		inx		                inx                     ; ( addr-t u-t 0 )
.b612	20 b4 ba	jsr $bab4	                jsr ed_last_line          ; ( addr-t u-t 0 para1 )
.b615	20 a8 a1	jsr $a1a8	                jsr xt_swap             ; SWAP ( addr-t u-t para1 0 )
.b618	a9 80		lda #$80	                lda #%10000000
.b61a	04 32		tsb $32		                tsb ed_flags
.b61c	a5 0a		lda $0a		                lda ciblen
.b61e	3a		dec a		                dea                     ; sets Z if A was 1
.b61f	d0 03		bne $b624	                bne +
.b621	4c 8c b6	jmp $b68c	                jmp _line_number_only_from_external
.b624					+
.b624	a0 01		ldy #$01	                ldy #01
.b626	4c 60 b7	jmp $b760	                jmp _check_command
.b629					_prefix_percent:
.b629	b2 08		lda ($08)	                lda (cib)
.b62b	c9 25		cmp #$25	                cmp #$25                ; ASCII '%'
.b62d	f0 04		beq $b633	                beq _whole_text
.b62f	c9 2c		cmp #$2c	                cmp #$2c                ; ASCII ','
.b631	d0 17		bne $b64a	                bne _prefix_semicolon
.b633					_whole_text:
.b633	20 87 ba	jsr $ba87	                jsr ed_have_text
.b636	a9 01		lda #$01	                lda #01
.b638	95 02		sta $02,x	                sta 2,x                 ; LSB of NOS is para 1
.b63a	74 03		stz $03,x	                stz 3,x                 ; ( addr-t u-t para1 0 )
.b63c					_semicolon_entry:
.b63c	e8		inx		                inx
.b63d	e8		inx		                inx                     ; DROP ( addr-t u-t para1 )
.b63e	20 b4 ba	jsr $bab4	                jsr ed_last_line          ; ( addr-t u-t para1 para2 )
.b641	a9 80		lda #$80	                lda #%10000000
.b643	04 32		tsb $32		                tsb ed_flags
.b645	a0 01		ldy #$01	                ldy #01
.b647	4c 60 b7	jmp $b760	                jmp _check_command
.b64a					_prefix_semicolon:
.b64a	b2 08		lda ($08)	                lda (cib)
.b64c	c9 3b		cmp #$3b	                cmp #$3b                ; ASCII ';'
.b64e	d0 0d		bne $b65d	                bne _prefix_number
.b650	20 87 ba	jsr $ba87	                jsr ed_have_text
.b653	a5 30		lda $30		                lda ed_cur
.b655	95 02		sta $02,x	                sta 2,x
.b657	a5 31		lda $31		                lda ed_cur+1
.b659	95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t cur 0 )
.b65b	80 df		bra $b63c	                bra _semicolon_entry
.b65d					_prefix_number:
.b65d	20 a2 a7	jsr $a7a2	                jsr xt_zero
.b660	20 a2 a7	jsr $a7a2	                jsr xt_zero             ; ( addr-t u-t 0 0 0 0 )
.b663	ca		dex		                dex
.b664	ca		dex		                dex
.b665	ca		dex		                dex
.b666	ca		dex		                dex                     ; ( addr-t u-t 0 0 0 0 ? ? )
.b667	a5 08		lda $08		                lda cib
.b669	95 02		sta $02,x	                sta 2,x
.b66b	a5 09		lda $09		                lda cib+1
.b66d	95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t 0 0 0 0 cib ? )
.b66f	a5 0a		lda $0a		                lda ciblen
.b671	95 00		sta $00,x	                sta 0,x
.b673	a5 0b		lda $0b		                lda ciblen+1
.b675	95 01		sta $01,x	                sta 1,x                 ; ( addr-t u-t 0 0 0 0 cib ciblen )
.b677	20 b7 a2	jsr $a2b7	                jsr xt_to_number        ; ( addr-t u-t 0 0 ud addr2 u2 )
.b67a	b5 00		lda $00,x	                lda 0,x
.b67c	15 01		ora $01,x	                ora 1,x
.b67e	d0 24		bne $b6a4	                bne _have_unconverted_chars
.b680	e8		inx		                inx
.b681	e8		inx		                inx
.b682	e8		inx		                inx
.b683	e8		inx		                inx                     ; 2DROP ( addr-t u-t 0 0 ud )
.b684	20 80 8a	jsr $8a80	                jsr xt_d_to_s           ; D>S ( addr-t u-t 0 0 u )
.b687	20 6e 96	jsr $966e	                jsr xt_not_rote         ; -ROT ( addr-t u-t u 0 0 )
.b68a	e8		inx		                inx
.b68b	e8		inx		                inx                     ; ( addr-t u-t u 0 ) drop through
.b68c					_line_number_only_from_external:
.b68c	20 a8 a1	jsr $a1a8	                jsr xt_swap             ; ( addr-t u-t 0 u )
.b68f	20 92 ba	jsr $ba92	                jsr ed_is_valid_line
.b692	b0 03		bcs $b697	                bcs +
.b694	4c 64 ba	jmp $ba64	                jmp ed_error_2drop
.b697					+
.b697	20 a8 a1	jsr $a1a8	                jsr xt_swap             ; ( addr-t u-t u 0 )
.b69a	20 21 bb	jsr $bb21	                jsr ed_para1_to_cur
.b69d	a9 80		lda #$80	                lda #%10000000
.b69f	04 32		tsb $32		                tsb ed_flags
.b6a1	4c 3f b9	jmp $b93f	                jmp ed_cmd_p_from_external
.b6a4					_have_unconverted_chars:
.b6a4	20 af 8d	jsr $8daf	                jsr xt_dup              ; ( addr-t u-t 0 0 ud addr2 u2 u2 )
.b6a7	ca		dex		                dex
.b6a8	ca		dex		                dex                     ; ( addr-t u-t 0 0 ud addr2 u2 u2 ? )
.b6a9	a5 0a		lda $0a		                lda ciblen
.b6ab	95 00		sta $00,x	                sta 0,x
.b6ad	a5 0b		lda $0b		                lda ciblen+1
.b6af	95 01		sta $01,x	                sta 1,x                 ; ( addr-t u-t 0 0 ud addr2 u2 u2 ciblen )
.b6b1	20 ce 8e	jsr $8ece	                jsr xt_equal            ; ( addr-t u-t 0 0 ud addr2 u2 f )
.b6b4	b5 00		lda $00,x	                lda 0,x
.b6b6	15 01		ora $01,x	                ora 1,x
.b6b8	f0 0e		beq $b6c8	                beq _no_command_yet
.b6ba	8a		txa		                txa
.b6bb	18		clc		                clc
.b6bc	69 0a		adc #$0a	                adc #10
.b6be	aa		tax		                tax                     ; ( addr-t u-t 0 0 )
.b6bf	a9 80		lda #$80	                lda #%10000000
.b6c1	14 32		trb $32		                trb ed_flags
.b6c3	a0 00		ldy #$00	                ldy #00
.b6c5	4c 60 b7	jmp $b760	                jmp _check_command
.b6c8					_no_command_yet:
.b6c8	e8		inx		                inx
.b6c9	e8		inx		                inx                     ; ( ... 0 0 ud addr2 u2 )
.b6ca	20 6a a3	jsr $a36a	                jsr xt_to_r             ; >R ( ... 0 0 ud addr2 ) (R: u2)
.b6cd	20 6e 96	jsr $966e	                jsr xt_not_rote         ; -ROT ( ... 0 0 addr2 ud ) (R: u2)
.b6d0	20 80 8a	jsr $8a80	                jsr xt_d_to_s           ; D>S  ( ... 0 0 addr2 para1 ) (R: u2)
.b6d3	b5 00		lda $00,x	                lda 0,x                 ; LSB
.b6d5	95 06		sta $06,x	                sta 6,x
.b6d7	b5 01		lda $01,x	                lda 1,x                 ; MSB
.b6d9	95 07		sta $07,x	                sta 7,x                 ; ( ... para1 0 addr2 para1 ) (R: u2)
.b6db	e8		inx		                inx
.b6dc	e8		inx		                inx                     ; ( addr-t u-t para1 0 addr2 ) (R: u2)
.b6dd	20 92 9a	jsr $9a92	                jsr xt_r_from           ; R> ( addr-t u-t para1 0 addr2 u2 ) fall through
.b6e0	a9 80		lda #$80	                lda #%10000000
.b6e2	04 32		tsb $32		                tsb ed_flags
.b6e4					_check_for_para2:
.b6e4	a1 02		lda ($02,x)	                lda (2,x)
.b6e6	c9 2c		cmp #$2c	                cmp #$2c                ; ASCII code for ',' (comma)
.b6e8	f0 0d		beq $b6f7	                beq _got_comma
.b6ea	38		sec		                sec
.b6eb	a5 0a		lda $0a		                lda ciblen
.b6ed	f5 00		sbc $00,x	                sbc 0,x
.b6ef	a8		tay		                tay
.b6f0	e8		inx		                inx
.b6f1	e8		inx		                inx
.b6f2	e8		inx		                inx
.b6f3	e8		inx		                inx                     ; 2DROP ( addr-t u-t para1 0 )
.b6f4	4c 60 b7	jmp $b760	                jmp _check_command
.b6f7					_got_comma:
.b6f7	f6 02		inc $02,x	                inc 2,x
.b6f9	d0 02		bne $b6fd	                bne +
.b6fb	f6 03		inc $03,x	                inc 3,x                 ; ( addr-t u-t para1 0 addr2+1 u2 )
.b6fd					+
.b6fd	b5 01		lda $01,x	                lda 1,x
.b6ff	f0 02		beq $b703	                beq +
.b701	d6 01		dec $01,x	                dec 1,x
.b703					+
.b703	d6 00		dec $00,x	                dec 0,x                 ; ( addr-t u-t para1 0 addr2+1 u2-1 )
.b705	a1 02		lda ($02,x)	                lda (2,x)
.b707	c9 24		cmp #$24	                cmp #$24                ; ASCII for '$'
.b709	d0 14		bne $b71f	                bne _para2_not_dollar
.b70b	38		sec		                sec
.b70c	a5 0a		lda $0a		                lda ciblen
.b70e	f5 02		sbc $02,x	                sbc 2,x
.b710	a8		tay		                tay
.b711	c8		iny		                iny
.b712	5a		phy		                phy
.b713	8a		txa		                txa
.b714	18		clc		                clc
.b715	69 06		adc #$06	                adc #06
.b717	aa		tax		                tax                     ; ( addr-t u-t para1 )
.b718	20 b4 ba	jsr $bab4	                jsr ed_last_line          ; ( addr-t u-t para1 para2 )
.b71b	7a		ply		                ply
.b71c	4c 60 b7	jmp $b760	                jmp _check_command
.b71f					_para2_not_dollar:
.b71f	20 6a a3	jsr $a36a	                jsr xt_to_r             ; >R ( ... para1 0 addr2+1 ) (R: u2-1)
.b722	20 a2 a7	jsr $a7a2	                jsr xt_zero             ; 0 ( ... para1 0 addr2+1 0 ) (R: u2-1)
.b725	20 a2 a7	jsr $a7a2	                jsr xt_zero             ; 0 ( ... para1 0 addr2+1 0 0 ) (R: u2-1)
.b728	20 57 9b	jsr $9b57	                jsr xt_rot              ; ROT ( ... para1 0 0 0 addr2+1 ) (R: u2-1)
.b72b	20 92 9a	jsr $9a92	                jsr xt_r_from           ; R> ( ... para1 0 0 0 addr2+1 u2-1)
.b72e	20 af 8d	jsr $8daf	                jsr xt_dup              ; DUP ( ... para1 0 0 0 addr2+1 u2-1 u2-1)
.b731	20 6a a3	jsr $a36a	                jsr xt_to_r             ; >R ( ... para1 0 0 0 addr2+1 u2-1 ) (R: u2-1)
.b734	20 b7 a2	jsr $a2b7	                jsr xt_to_number        ; >NUMBER ( ... para1 0 ud addr3 u3 ) (R: u2-1)
.b737	20 af 8d	jsr $8daf	                jsr xt_dup              ; DUP ( ... para1 0 ud addr3 u3 u3 ) (R: u2-1)
.b73a	20 92 9a	jsr $9a92	                jsr xt_r_from           ; R> ( ... para1 0 ud addr3 u3 u3 u2-1 )
.b73d	20 ce 8e	jsr $8ece	                jsr xt_equal            ; = ( ... para1 0 ud addr3 u3 f )
.b740	b5 00		lda $00,x	                lda 0,x
.b742	15 01		ora $01,x	                ora 1,x
.b744	f0 08		beq $b74e	                beq _second_number
.b746	8a		txa		                txa
.b747	18		clc		                clc
.b748	69 0c		adc #$0c	                adc #12
.b74a	aa		tax		                tax                     ; back to ( addr-t u-t )
.b74b	4c 68 ba	jmp $ba68	                jmp ed_error
.b74e					_second_number:
.b74e	e8		inx		                inx
.b74f	e8		inx		                inx                     ; ( addr-t u-t para1 0 ud addr3 u3 )
.b750	38		sec		                sec
.b751	a5 0a		lda $0a		                lda ciblen
.b753	f5 00		sbc $00,x	                sbc 0,x
.b755	48		pha		                pha
.b756	20 aa a3	jsr $a3aa	                jsr xt_two_drop         ; 2DROP ( addr-t u-t para1 0 ud )
.b759	20 80 8a	jsr $8a80	                jsr xt_d_to_s           ; D>S  ( addr-t u-t para1 0 para2 )
.b75c	20 42 96	jsr $9642	                jsr xt_nip              ; NIP ( addr-t u-t para1 para2 )
.b75f	7a		ply		                ply
.b760					_check_command:
.b760	24 32		bit $32		                bit ed_flags
.b762	30 08		bmi $b76c	                bmi _check_command_have_arg
.b764	a5 30		lda $30		                lda ed_cur
.b766	95 02		sta $02,x	                sta 2,x
.b768	a5 31		lda $31		                lda ed_cur+1
.b76a	95 03		sta $03,x	                sta 3,x
.b76c					_check_command_have_arg:
.b76c	b1 08		lda ($08),y	                lda (cib),y             ; get mystery char from input
.b76e	85 24		sta $24		                sta tmp1
.b770	da		phx		                phx
.b771	a2 00		ldx #$00	                ldx #00
.b773					_cmd_loop:
.b773	bd 4c bb	lda $bb4c,x	                lda ed_cmd_list,x
.b776	f0 07		beq $b77f	                beq _illegal_command    ; zero marks end of list
.b778	c5 24		cmp $24		                cmp tmp1
.b77a	f0 07		beq $b783	                beq _found_cmd
.b77c	e8		inx		                inx
.b77d	80 f4		bra $b773	                bra _cmd_loop
.b77f					_illegal_command:
.b77f	fa		plx		                plx
.b780	4c 64 ba	jmp $ba64	                jmp ed_error_2drop
.b783					_found_cmd:
.b783	8a		txa		                txa
.b784	0a		asl a		                asl
.b785	aa		tax		                tax                     ; X * 2 for table
.b786	7c 57 bb	jmp ($bb57,x)	                jmp (ed_cmd_table,x)
.b789					ed_next_command:
.b789	e8		inx		                inx
.b78a	e8		inx		                inx
.b78b	e8		inx		                inx
.b78c	e8		inx		                inx                     ; ( addr-t u-t ) Fall through
.b78d					_next_command_empty:
.b78d	4c 97 b5	jmp $b597	                jmp ed_input_loop
.b790					ed_all_done:
.b790	64 0a		stz $0a		                stz ciblen
.b792	64 0b		stz $0b		                stz ciblen+1
.b794	20 aa a3	jsr $a3aa	                jsr xt_two_drop                 ; 2DROP ( addr-t u-t )
.b797	a5 33		lda $33		                lda editor3+1
.b799	85 18		sta $18		                sta base
.b79b	60		rts		                rts
.b79c					ed_cmd_a:
.b79c	fa		plx		                plx
.b79d	e8		inx		                inx
.b79e	e8		inx		                inx                     ;  DROP ( addr-t u-t para1 )
.b79f					ed_entry_cmd_i:
.b79f					ed_cmd_a_have_para:
.b79f	20 ea ba	jsr $baea	                jsr ed_num_to_addr        ;  ( addr-t u-t addr1 )
.b7a2	20 63 89	jsr $8963	                jsr xt_cr
.b7a5					_next_string_loop:
.b7a5	20 76 ba	jsr $ba76	                jsr ed_get_input
.b7a8	b2 08		lda ($08)	                lda (cib)
.b7aa	c9 2e		cmp #$2e	                cmp #$2e                ; ASCII for '.'
.b7ac	d0 16		bne $b7c4	                bne _add_line
.b7ae	a4 0a		ldy $0a		                ldy ciblen
.b7b0	c0 01		cpy #$01	                cpy #01
.b7b2	d0 10		bne $b7c4	                bne _add_line
.b7b4	a4 0b		ldy $0b		                ldy ciblen+1
.b7b6	d0 0c		bne $b7c4	                bne _add_line
.b7b8	e8		inx		                inx
.b7b9	e8		inx		                inx
.b7ba	a9 40		lda #$40	                lda #%01000000
.b7bc	04 32		tsb $32		                tsb ed_flags
.b7be	20 63 89	jsr $8963	                jsr xt_cr
.b7c1	4c 97 b5	jmp $b597	                jmp ed_input_loop
.b7c4					_add_line:
.b7c4	20 af 8d	jsr $8daf	                jsr xt_dup              ; DUP ( addr-t u-t addr1 addr1 )
.b7c7	20 72 91	jsr $9172	                jsr xt_here             ; HERE ( addr-t u-t addr1 addr1 here )
.b7ca	20 a8 a1	jsr $a1a8	                jsr xt_swap             ; SWAP ( addr-t u-t addr1 here addr1 )
.b7cd	20 80 8f	jsr $8f80	                jsr xt_fetch            ; @  ( addr-t u-t addr1 here addr2 )
.b7d0	20 6e 87	jsr $876e	                jsr xt_comma            ; ,  ( addr-t u-t addr1 here )
.b7d3	20 87 a3	jsr $a387	                jsr xt_tuck             ; TUCK ( addr-t u-t here addr1 here )
.b7d6	20 a8 a1	jsr $a1a8	                jsr xt_swap             ; SWAP ( addr-t u-t here here addr1 )
.b7d9	20 87 a1	jsr $a187	                jsr xt_store            ; ! ( addr-t u-t here )
.b7dc	20 72 91	jsr $9172	                jsr xt_here             ; HERE ( addr-t u-t here here2)
.b7df	a5 00		lda $00		                lda cp
.b7e1	18		clc		                clc
.b7e2	69 04		adc #$04	                adc #04
.b7e4	85 00		sta $00		                sta cp
.b7e6	90 02		bcc $b7ea	                bcc +
.b7e8	e6 01		inc $01		                inc cp+1
.b7ea					+
.b7ea	e6 30		inc $30		                inc ed_cur
.b7ec	d0 02		bne $b7f0	                bne +
.b7ee	e6 31		inc $31		                inc ed_cur+1
.b7f0					+
.b7f0	20 72 91	jsr $9172	                jsr xt_here     ; HERE ( addr-t u-t here here2 here3 )
.b7f3	20 af 8d	jsr $8daf	                jsr xt_dup      ; DUP ( addr-t u-t here here2 here3 here3 )
.b7f6	ca		dex		                dex
.b7f7	ca		dex		                dex             ; ( addr-t u-t here here2 here3 here3 ? )
.b7f8	a5 08		lda $08		                lda cib
.b7fa	95 00		sta $00,x	                sta 0,x
.b7fc	a5 09		lda $09		                lda cib+1
.b7fe	95 01		sta $01,x	                sta 1,x         ; ( addr-t u-t here here2 here3 here3 cib )
.b800	20 a8 a1	jsr $a1a8	                jsr xt_swap     ; SWAP ( addr-t u-t here here2 here3 cib here3 )
.b803	ca		dex		                dex
.b804	ca		dex		                dex             ; ( addr-t u-t here here2 here3 cib here3 ? )
.b805	a5 0a		lda $0a		                lda ciblen
.b807	95 00		sta $00,x	                sta 0,x
.b809	a5 0b		lda $0b		                lda ciblen+1
.b80b	95 01		sta $01,x	                sta 1,x         ; ( addr-t u-t here here2 here3 cib here3 ciblen )
.b80d	20 c2 95	jsr $95c2	                jsr xt_move     ; ( addr-t u-t here here2 here3 )
.b810	18		clc		                clc
.b811	a5 00		lda $00		                lda cp
.b813	65 0a		adc $0a		                adc ciblen
.b815	85 00		sta $00		                sta cp
.b817	90 06		bcc $b81f	                bcc +
.b819	a5 01		lda $01		                lda cp+1
.b81b	65 0b		adc $0b		                adc ciblen+1
.b81d	85 01		sta $01		                sta cp+1
.b81f					+
.b81f	20 93 98	jsr $9893	                jsr xt_over             ; OVER ( addr-t u-t here here2 here3 here2 )
.b822	20 87 a1	jsr $a187	                jsr xt_store            ; ! ( addr-t u-t here here2 )
.b825	20 1d 98	jsr $981d	                jsr xt_one_plus         ; 1+
.b828	20 1d 98	jsr $981d	                jsr xt_one_plus         ; 1+ ( addr-t u-t here here2+2 )
.b82b	20 af 8d	jsr $8daf	                jsr xt_dup              ; DUP ( addr-t u-t here here2+2 here2+2 )
.b82e	a5 0a		lda $0a		                lda ciblen
.b830	95 02		sta $02,x	                sta 2,x
.b832	a5 0b		lda $0b		                lda ciblen+1
.b834	95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t here ciblen here2+2 )
.b836	20 87 a1	jsr $a187	                jsr xt_store            ; ! ( addr-t u-t here )
.b839	20 63 89	jsr $8963	                jsr xt_cr
.b83c	4c a5 b7	jmp $b7a5	                jmp _next_string_loop
.b83f					ed_cmd_d:
.b83f	fa		plx		                plx
.b840	20 87 ba	jsr $ba87	                jsr ed_have_text
.b843	20 dc ba	jsr $badc	                jsr ed_no_line_zero
.b846	b5 00		lda $00,x	                lda 0,x
.b848	15 01		ora $01,x	                ora 1,x
.b84a	d0 08		bne $b854	                bne +
.b84c	20 93 98	jsr $9893	                jsr xt_over             ; ( addr-t u-t para1 0 para1 )
.b84f	20 91 b8	jsr $b891	                jsr _cmd_d_common       ; ( addr-t u-t para1 0 )
.b852	80 33		bra $b887	                bra _cmd_d_done
.b854					+
.b854	20 92 ba	jsr $ba92	                jsr ed_is_valid_line      ; result is in C flag
.b857	b0 03		bcs $b85c	                bcs _cmd_d_loop
.b859	4c 64 ba	jmp $ba64	                jmp ed_error_2drop
.b85c					_cmd_d_loop:
.b85c	20 b2 a3	jsr $a3b2	                jsr xt_two_dup          ; 2DUP ( addr-t u-t para1 para2 para1 para2 )
.b85f	20 5d 91	jsr $915d	                jsr xt_greater_than     ; > ( addr-t u-t para1 para2 f )
.b862	b5 00		lda $00,x	                lda 0,x
.b864	15 01		ora $01,x	                ora 1,x
.b866	d0 0d		bne $b875	                bne _cmd_d_done_with_flag
.b868	e8		inx		                inx
.b869	e8		inx		                inx                     ; Get rid of the flag from >
.b86a	20 af 8d	jsr $8daf	                jsr xt_dup              ; DUP ( addr-t u-t para1 para2 para2 )
.b86d	20 91 b8	jsr $b891	                jsr _cmd_d_common       ; ( addr-t u-t para1 para2 )
.b870	20 11 98	jsr $9811	                jsr xt_one_minus        ; 1- ( addr-t u-t para1 para2-1 )
.b873	80 e7		bra $b85c	                bra _cmd_d_loop
.b875					_cmd_d_done_with_flag:
.b875	e8		inx		                inx                     ; ( addr-t u-t para1 para2 )
.b876	e8		inx		                inx
.b877	b5 02		lda $02,x	                lda 2,x
.b879	d0 02		bne $b87d	                bne +
.b87b	d6 03		dec $03,x	                dec 3,x
.b87d					+
.b87d	d6 02		dec $02,x	                dec 2,x
.b87f	b5 02		lda $02,x	                lda 2,x
.b881	85 30		sta $30		                sta ed_cur
.b883	b5 03		lda $03,x	                lda 3,x
.b885	85 31		sta $31		                sta ed_cur+1            ; drop through to _cmd_d_done
.b887					_cmd_d_done:
.b887	a9 40		lda #$40	                lda #%01000000
.b889	04 32		tsb $32		                tsb ed_flags
.b88b	20 63 89	jsr $8963	                jsr xt_cr
.b88e	4c 89 b7	jmp $b789	                jmp ed_next_command
.b891					_cmd_d_common:
.b891	20 af 8d	jsr $8daf	                jsr xt_dup              ; DUP ( addr-t u-t u u )
.b894	20 ea ba	jsr $baea	                jsr ed_num_to_addr        ; ( addr-t u-t u addr )
.b897	20 80 8f	jsr $8f80	                jsr xt_fetch            ; @ ( addr-t u-t u addr1 )
.b89a	20 a8 a1	jsr $a1a8	                jsr xt_swap             ; SWAP ( addr-t u-t addr1 u )
.b89d	20 11 98	jsr $9811	                jsr xt_one_minus        ; 1- ( addr-t u-t addr1 u-1 )
.b8a0	20 ea ba	jsr $baea	                jsr ed_num_to_addr        ; ( addr-t u-t addr1 addr-1 )
.b8a3	20 87 a1	jsr $a187	                jsr xt_store            ; ! ( addr-t u-t )
.b8a6	60		rts		                rts
.b8a7					ed_cmd_equ:
.b8a7	fa		plx		                plx
.b8a8	a5 2e		lda $2e		                lda ed_head
.b8aa	05 2f		ora $2f		                ora ed_head+1
.b8ac	d0 08		bne $b8b6	                bne _cmd_equ_have_text
.b8ae	ca		dex		                dex
.b8af	ca		dex		                dex
.b8b0	74 00		stz $00,x	                stz 0,x
.b8b2	74 01		stz $01,x	                stz 1,x                 ; ( addr-t u-t para1 para2 0 )
.b8b4	80 21		bra $b8d7	                bra _cmd_equ_done
.b8b6					_cmd_equ_have_text:
.b8b6	20 dc ba	jsr $badc	                jsr ed_no_line_zero
.b8b9	24 32		bit $32		                bit ed_flags
.b8bb	30 0c		bmi $b8c9	                bmi _cmd_equ_have_para
.b8bd	ca		dex		                dex
.b8be	ca		dex		                dex                     ; ( addr-t u-t para1 para2 ? )
.b8bf	a5 30		lda $30		                lda ed_cur
.b8c1	95 00		sta $00,x	                sta 0,x
.b8c3	a5 31		lda $31		                lda ed_cur+1
.b8c5	95 01		sta $01,x	                sta 1,x
.b8c7	80 0e		bra $b8d7	                bra _cmd_equ_done       ; ( addr-t u-t para1 para2 cur )
.b8c9					_cmd_equ_have_para:
.b8c9	b5 00		lda $00,x	                lda 0,x
.b8cb	15 01		ora $01,x	                ora 1,x
.b8cd	d0 05		bne $b8d4	                bne _cmd_equ_two_paras
.b8cf	20 93 98	jsr $9893	                jsr xt_over             ; ( addr-t u-t para1 para2 para1)
.b8d2	80 03		bra $b8d7	                bra _cmd_equ_done
.b8d4					_cmd_equ_two_paras:
.b8d4	20 af 8d	jsr $8daf	                jsr xt_dup              ; ( addr-t u-t para1 para2 para2) drop through
.b8d7					_cmd_equ_done:
.b8d7	20 63 89	jsr $8963	                jsr xt_cr               ; number goes on new line
.b8da	20 28 a5	jsr $a528	                jsr xt_u_dot            ; ( addr-t u-t para1 para2 )
.b8dd	20 63 89	jsr $8963	                jsr xt_cr
.b8e0	4c 89 b7	jmp $b789	                jmp ed_next_command
.b8e3					ed_cmd_f:
.b8e3	fa		plx		                plx
.b8e4	24 32		bit $32		                bit ed_flags
.b8e6	30 17		bmi $b8ff	                bmi _cmd_f_have_para
.b8e8	20 63 89	jsr $8963	                jsr xt_cr
.b8eb	20 6a a3	jsr $a36a	                jsr xt_to_r             ; >R   ( addr-t u-t 0 ) ( R: 0 )
.b8ee	20 57 9b	jsr $9b57	                jsr xt_rot              ; ROT  ( u-t 0 addr-t ) ( R: 0 )
.b8f1	20 af 8d	jsr $8daf	                jsr xt_dup              ; DUP  ( u-t 0 addr-t addr-t ) ( R: 0 )
.b8f4	20 28 a5	jsr $a528	                jsr xt_u_dot            ; U.   ( u-t 0 addr-t ) ( R: 0 )
.b8f7	20 6e 96	jsr $966e	                jsr xt_not_rote         ; -ROT ( addr-t u-t 0 ) ( R: 0 )
.b8fa	20 92 9a	jsr $9a92	                jsr xt_r_from           ; R>   ( addr-t u-t 0 0 )
.b8fd	80 11		bra $b910	                bra _cmd_f_done
.b8ff					_cmd_f_have_para:
.b8ff	20 93 98	jsr $9893	                jsr xt_over
.b902	20 63 89	jsr $8963	                jsr xt_cr
.b905	20 28 a5	jsr $a528	                jsr xt_u_dot
.b908	b5 02		lda $02,x	                lda 2,x
.b90a	95 06		sta $06,x	                sta 6,x
.b90c	b5 03		lda $03,x	                lda 3,x
.b90e	95 07		sta $07,x	                sta 7,x                 ; fall through to _cmd_f_done
.b910					_cmd_f_done:
.b910	20 63 89	jsr $8963	                jsr xt_cr
.b913	4c 89 b7	jmp $b789	                jmp ed_next_command
.b916					ed_cmd_i:
.b916	fa		plx		                plx
.b917	e8		inx		                inx
.b918	e8		inx		                inx                     ;  DROP ( addr-t u-t para1 )
.b919	24 32		bit $32		                bit ed_flags
.b91b	30 08		bmi $b925	                bmi _cmd_i_have_para
.b91d	a5 30		lda $30		                lda ed_cur
.b91f	95 00		sta $00,x	                sta 0,x
.b921	a5 31		lda $31		                lda ed_cur+1
.b923	95 01		sta $01,x	                sta 1,x                 ;  ( addr-t u-t cur ) drop through
.b925					_cmd_i_have_para:
.b925	b5 00		lda $00,x	                lda 0,x
.b927	15 01		ora $01,x	                ora 1,x
.b929	f0 09		beq $b934	                beq _cmd_i_done
.b92b	20 11 98	jsr $9811	                jsr xt_one_minus        ; 1-  ( addr-t u-t para1-1 )
.b92e	20 a2 a7	jsr $a7a2	                jsr xt_zero             ; 0   ( addr-t u-t para1-1 0 )
.b931	20 18 95	jsr $9518	                jsr xt_max              ; MAX ( addr-t u-t para1-1 | 0 )
.b934					_cmd_i_done:
.b934	4c 9f b7	jmp $b79f	                jmp ed_entry_cmd_i
.b937					ed_cmd_n:
.b937	fa		plx		                plx
.b938	a9 01		lda #$01	                lda #%00000001
.b93a	04 32		tsb $32		                tsb ed_flags
.b93c	80 05		bra $b943	                bra ed_cmd_p_entry_for_cmd_n
.b93e					ed_cmd_p:
.b93e	fa		plx		                plx
.b93f					ed_cmd_p_from_external:
.b93f	a9 01		lda #$01	                lda #%00000001
.b941	14 32		trb $32		                trb ed_flags
.b943					ed_cmd_p_entry_for_cmd_n:
.b943	20 87 ba	jsr $ba87	                jsr ed_have_text
.b946	20 dc ba	jsr $badc	                jsr ed_no_line_zero
.b949	20 63 89	jsr $8963	                jsr xt_cr
.b94c	b5 00		lda $00,x	                lda 0,x
.b94e	15 01		ora $01,x	                ora 1,x
.b950	d0 10		bne $b962	                bne _cmd_p_loop
.b952	b5 02		lda $02,x	                lda 2,x
.b954	85 30		sta $30		                sta ed_cur
.b956	b5 03		lda $03,x	                lda 3,x
.b958	85 31		sta $31		                sta ed_cur+1
.b95a	20 93 98	jsr $9893	                jsr xt_over             ; OVER ( addr-t u-t para1 para2 para1 )
.b95d	20 8b b9	jsr $b98b	                jsr _cmd_p_common       ; ( addr-t u-t para1 para2 )
.b960	80 26		bra $b988	                bra _cmd_p_all_done
.b962					_cmd_p_loop:
.b962	20 b2 a3	jsr $a3b2	                jsr xt_two_dup          ; 2DUP ( addr-t u-t para1 para2 para1 para2 )
.b965	20 5d 91	jsr $915d	                jsr xt_greater_than     ; > ( addr-t u-t para1 para2 f )
.b968	b5 00		lda $00,x	                lda 0,x
.b96a	15 01		ora $01,x	                ora 1,x
.b96c	d0 10		bne $b97e	                bne _cmd_p_done
.b96e	e8		inx		                inx
.b96f	e8		inx		                inx                     ; Get rid of the flag from >
.b970	20 93 98	jsr $9893	                jsr xt_over             ; ( addr-t u-t para1 para2 para1 )
.b973	20 8b b9	jsr $b98b	                jsr _cmd_p_common       ; ( addr-t u-t para1 para2 )
.b976	f6 02		inc $02,x	                inc 2,x
.b978	d0 02		bne $b97c	                bne +
.b97a	f6 03		inc $03,x	                inc 3,x
.b97c					+
.b97c	80 e4		bra $b962	                bra _cmd_p_loop
.b97e					_cmd_p_done:
.b97e	e8		inx		                inx
.b97f	e8		inx		                inx                     ; fall through to _cmp_p_all_done
.b980	b5 00		lda $00,x	                lda 0,x
.b982	85 30		sta $30		                sta ed_cur
.b984	b5 01		lda $01,x	                lda 1,x
.b986	85 31		sta $31		                sta ed_cur+1
.b988					_cmd_p_all_done:
.b988	4c 89 b7	jmp $b789	                jmp ed_next_command
.b98b					_cmd_p_common:
.b98b	a5 32		lda $32		                lda ed_flags
.b98d	4a		lsr a		                lsr                     ; bit 0 now in carry
.b98e	90 0b		bcc $b99b	                bcc _cmd_p_common_no_num
.b990	20 af 8d	jsr $8daf	                jsr xt_dup              ; DUP ( addr-t u-t para1 para1 )
.b993	20 28 a5	jsr $a528	                jsr xt_u_dot            ; U. ( addr-t u-t para1 )
.b996	a9 09		lda #$09	                lda #$09                 ; ASCII for Tab
.b998	20 f6 8d	jsr $8df6	                jsr emit_a
.b99b					_cmd_p_common_no_num:
.b99b	20 ea ba	jsr $baea	                jsr ed_num_to_addr        ; ( addr-t u-t addr )
.b99e	20 2a bb	jsr $bb2a	                jsr ed_print_addr
.b9a1	60		rts		                rts
.b9a2					ed_cmd_q:
.b9a2	fa		plx		                plx
.b9a3	24 32		bit $32		                bit ed_flags            ; bit 6 is change flag
.b9a5	50 03		bvc $b9aa	                bvc +
.b9a7	4c 64 ba	jmp $ba64	                jmp ed_error_2drop
.b9aa					+
.b9aa	4c 90 b7	jmp $b790	                jmp ed_all_done            ; can't fall thru because of PLX
.b9ad					ed_cmd_qq:
.b9ad	fa		plx		                plx
.b9ae	4c 90 b7	jmp $b790	                jmp ed_all_done
.b9b1					ed_cmd_w:
.b9b1	fa		plx		                plx
.b9b2	20 87 ba	jsr $ba87	                jsr ed_have_text
.b9b5	24 32		bit $32		                bit ed_flags
.b9b7	30 13		bmi $b9cc	                bmi _cmd_w_have_para
.b9b9	b5 06		lda $06,x	                lda 6,x
.b9bb	15 07		ora $07,x	                ora 7,x
.b9bd	d0 03		bne $b9c2	                bne +
.b9bf	4c 64 ba	jmp $ba64	                jmp ed_error_2drop
.b9c2					+
.b9c2	b5 06		lda $06,x	                lda 6,x
.b9c4	95 02		sta $02,x	                sta 2,x
.b9c6	b5 07		lda $07,x	                lda 7,x
.b9c8	95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t addr-t ? )
.b9ca	80 08		bra $b9d4	                bra _cmd_w_para_ready
.b9cc					_cmd_w_have_para:
.b9cc	b5 02		lda $02,x	                lda 2,x
.b9ce	95 06		sta $06,x	                sta 6,x
.b9d0	b5 03		lda $03,x	                lda 3,x
.b9d2	95 07		sta $07,x	                sta 7,x                 ; drop through to _cmd_w_para_ready
.b9d4					_cmd_w_para_ready:
.b9d4	a9 2e		lda #$2e	                lda #<ed_head
.b9d6	95 00		sta $00,x	                sta 0,x
.b9d8	a9 00		lda #$00	                lda #>ed_head
.b9da	95 01		sta $01,x	                sta 1,x                 ; ( addr-t u-t addr-t addr-h )
.b9dc	20 93 98	jsr $9893	                jsr xt_over             ; OVER ( addr-t u-t addr-t addr-h addr-t )
.b9df	20 6a a3	jsr $a36a	                jsr xt_to_r             ; >R ( addr-t u-t addr-t addr-h ) ( R: addr-t )
.b9e2					_cmd_w_loop:
.b9e2	20 80 8f	jsr $8f80	                jsr xt_fetch            ; @ ( addr-t u-t addr-t addr1 ) ( R: addr-t )
.b9e5	b5 00		lda $00,x	                lda 0,x
.b9e7	15 01		ora $01,x	                ora 1,x
.b9e9	f0 55		beq $ba40	                beq _cmd_w_eol
.b9eb	20 b2 a3	jsr $a3b2	                jsr xt_two_dup          ; 2DUP ( addr-t addr-1 addr-t addr-1 ) ( R: addr-t addr-1 addr-t )
.b9ee	20 9c a4	jsr $a49c	                jsr xt_two_to_r         ; 2>R  ( addr-t addr-1 ) (R: ... )
.b9f1	20 1d 98	jsr $981d	                jsr xt_one_plus         ; 1+ ( addr-t addr1+1 ) (R: ... )
.b9f4	20 1d 98	jsr $981d	                jsr xt_one_plus         ; 1+ ( addr-t addr1+2 ) (R: ... )
.b9f7	20 af 8d	jsr $8daf	                jsr xt_dup              ; DUP ( addr-t addr1+2 addr1+2 ) ( R: ... )
.b9fa	20 80 8f	jsr $8f80	                jsr xt_fetch            ; @ ( addr-t addr1+2 addr-s ) ( R: ... )
.b9fd	20 a8 a1	jsr $a1a8	                jsr xt_swap             ; SWAP ( addr-t addr-s addr1+2 ) ( R: ... )
.ba00	20 1d 98	jsr $981d	                jsr xt_one_plus         ; 1+ ( addr-t addr-s addr1+1 ) (R: ... )
.ba03	20 1d 98	jsr $981d	                jsr xt_one_plus         ; 1+ ( addr-t addr-s addr1+2 ) (R: ... )
.ba06	20 80 8f	jsr $8f80	                jsr xt_fetch            ; @ ( addr-t addr-s u-s ) ( R: ... )
.ba09	20 6e 96	jsr $966e	                jsr xt_not_rote         ; -ROT ( u-s addr-t addr-s ) ( R: ... )
.ba0c	20 a8 a1	jsr $a1a8	                jsr xt_swap             ; SWAP ( u-s addr-s addr-t ) ( R: ... )
.ba0f	20 57 9b	jsr $9b57	                jsr xt_rot              ; ROT (addr-s addr-t u-s ) ( R: ... )
.ba12	20 af 8d	jsr $8daf	                jsr xt_dup              ; DUP (addr-s addr-t u-s u-s ) ( R: ... )
.ba15	20 6a a3	jsr $a36a	                jsr xt_to_r             ; >R (addr-s addr-t u-s ) ( R: ... u-s )
.ba18	20 c2 95	jsr $95c2	                jsr xt_move             ; MOVE ( )( R: addr-t addr-1 addr-t )
.ba1b	20 92 9a	jsr $9a92	                jsr xt_r_from           ; R> ( u-s )  ( R: addr-t addr-h addr-t )
.ba1e	20 22 a4	jsr $a422	                jsr xt_two_r_from       ; 2R> ( u-s addr-t addr-h ) ( R: addr-t )
.ba21	20 6e 96	jsr $966e	                jsr xt_not_rote         ; -ROT ( addr-h u-s addr-t ) ( R: addr-t )
.ba24	20 e3 99	jsr $99e3	                jsr xt_plus             ; + ( addr-h addr-t1 ) ( R: addr-t )
.ba27	20 af 8d	jsr $8daf	                jsr xt_dup              ; DUP ( addr-h addr-t1 addr-t1 ) ( R: addr-t )
.ba2a	ca		dex		                dex
.ba2b	ca		dex		                dex                     ; ( addr-h addr-t1 addr-t1 ? ) ( R: addr-t )
.ba2c	a9 0a		lda #$0a	                lda #AscLF              ; ASCII for LF
.ba2e	95 00		sta $00,x	                sta 0,x
.ba30	74 01		stz $01,x	                stz 1,x                 ; ( addr-h addr-t1 addr-t1 c ) ( R: addr-t )
.ba32	20 a8 a1	jsr $a1a8	                jsr xt_swap             ; SWAP ( addr-h addr-t1 c addr-t1 ) ( R: addr-t )
.ba35	20 87 a1	jsr $a187	                jsr xt_store            ; ! ( addr-h addr-t1 ) ( R: addr-t )
.ba38	20 1d 98	jsr $981d	                jsr xt_one_plus         ; 1+ ( addr-h addr-t1+1 ) ( R: addr-t )
.ba3b	20 a8 a1	jsr $a1a8	                jsr xt_swap             ; SWAP ( addr-t1+1 addr-h ) ( R: addr-t )
.ba3e	80 a2		bra $b9e2	                bra _cmd_w_loop
.ba40					_cmd_w_eol:
.ba40	20 a8 a1	jsr $a1a8	                jsr xt_swap             ; SWAP ( addr-t u-t addr-n addr-tn ) ( R: addr-t )
.ba43	20 92 9a	jsr $9a92	                jsr xt_r_from           ; R> ( addr-t u-t addr-n addr-tn addr-t )
.ba46	20 50 95	jsr $9550	                jsr xt_minus            ; - ( addr-t u-t addr-n u )
.ba49	b5 00		lda $00,x	                lda 0,x
.ba4b	95 04		sta $04,x	                sta 4,x
.ba4d	b5 01		lda $01,x	                lda 1,x
.ba4f	95 05		sta $05,x	                sta 5,x                 ; ( addr-t u addr-n u )
.ba51	20 63 89	jsr $8963	                jsr xt_cr
.ba54	20 af 8d	jsr $8daf	                jsr xt_dup              ; DUP ( addr-t u addr-n u u )
.ba57	20 28 a5	jsr $a528	                jsr xt_u_dot            ; U. ( addr-t u addr-n u )
.ba5a	20 63 89	jsr $8963	                jsr xt_cr
.ba5d	a9 40		lda #$40	                lda #%01000000
.ba5f	14 32		trb $32		                trb ed_flags
.ba61	4c 89 b7	jmp $b789	                jmp ed_next_command
.ba64					ed_error_2drop:
.ba64	e8		inx		                inx
.ba65	e8		inx		                inx                     ; drop through to _error_1drop
.ba66					ed_error_1drop:
.ba66	e8		inx		                inx
.ba67	e8		inx		                inx                     ; drop through to _error
.ba68					ed_error:
.ba68	20 63 89	jsr $8963	                jsr xt_cr
.ba6b	a9 3f		lda #$3f	                lda #'?'
.ba6d	20 f6 8d	jsr $8df6	                jsr emit_a
.ba70	20 63 89	jsr $8963	                jsr xt_cr
.ba73	4c 97 b5	jmp $b597	                jmp ed_input_loop
.ba76					ed_get_input:
.ba76	20 f8 9a	jsr $9af8	                jsr xt_refill           ;  ( addr-t u-t f )
.ba79	b5 00		lda $00,x	                lda 0,x
.ba7b	15 01		ora $01,x	                ora 1,x
.ba7d	d0 05		bne $ba84	                bne +
.ba7f	7a		ply		                ply
.ba80	7a		ply		                ply
.ba81	4c 66 ba	jmp $ba66	                jmp ed_error_1drop
.ba84					+
.ba84	e8		inx		                inx
.ba85	e8		inx		                inx
.ba86	60		rts		                rts
.ba87					ed_have_text:
.ba87	a5 2e		lda $2e		                lda ed_head
.ba89	05 2f		ora $2f		                ora ed_head+1
.ba8b	d0 04		bne $ba91	                bne +
.ba8d	7a		ply		                ply
.ba8e	7a		ply		                ply
.ba8f	80 d7		bra $ba68	                bra ed_error
.ba91					+
.ba91	60		rts		                rts
.ba92					ed_is_valid_line:
.ba92	38		sec		                sec                             ; default is legal line number
.ba93	b5 00		lda $00,x	                lda 0,x
.ba95	15 01		ora $01,x	                ora 1,x
.ba97	f0 19		beq $bab2	                beq _is_valid_line_nope_zero    ; ( n )
.ba99	20 af 8d	jsr $8daf	                jsr xt_dup                      ; DUP ( n n )
.ba9c	20 b4 ba	jsr $bab4	                jsr ed_last_line                  ; ( n n last )
.ba9f	20 a8 a1	jsr $a1a8	                jsr xt_swap                     ; SWAP ( n last n )
.baa2	20 68 93	jsr $9368	                jsr xt_less_than                ; < ( n f )
.baa5	b5 00		lda $00,x	                lda 0,x                         ; 0 flag is good
.baa7	15 01		ora $01,x	                ora 1,x
.baa9	d0 05		bne $bab0	                bne _is_valid_line_too_small
.baab	e8		inx		                inx
.baac	e8		inx		                inx                     ; DROP flag ( n )
.baad	38		sec		                sec                     ; Who knows what's happened to C by now
.baae	80 03		bra $bab3	                bra _is_valid_line_done ; only one exit from this routine
.bab0					_is_valid_line_too_small:
.bab0	e8		inx		                inx
.bab1	e8		inx		                inx                     ; drop through to _is_valid_line_zero
.bab2					_is_valid_line_nope_zero:
.bab2	18		clc		                clc                     ; drop through to _is_valid_line_done
.bab3					_is_valid_line_done:
.bab3	60		rts		                rts
.bab4					ed_last_line:
.bab4	64 24		stz $24		                stz tmp1
.bab6	64 25		stz $25		                stz tmp1+1
.bab8	ca		dex		                dex
.bab9	ca		dex		                dex                     ; ( ? )
.baba	a9 2e		lda #$2e	                lda #<ed_head
.babc	95 00		sta $00,x	                sta 0,x
.babe	a9 00		lda #$00	                lda #>ed_head
.bac0	95 01		sta $01,x	                sta 1,x                 ; ( addr )
.bac2					_last_line_loop:
.bac2	20 80 8f	jsr $8f80	                jsr xt_fetch            ; ( addr | 0 )
.bac5	b5 00		lda $00,x	                lda 0,x
.bac7	15 01		ora $01,x	                ora 1,x
.bac9	f0 08		beq $bad3	                beq _last_line_done
.bacb	e6 24		inc $24		                inc tmp1
.bacd	d0 02		bne $bad1	                bne +
.bacf	e6 25		inc $25		                inc tmp1+1
.bad1					+
.bad1	80 ef		bra $bac2	                bra _last_line_loop
.bad3					_last_line_done:
.bad3	a5 24		lda $24		                lda tmp1
.bad5	95 00		sta $00,x	                sta 0,x
.bad7	a5 25		lda $25		                lda tmp1+1
.bad9	95 01		sta $01,x	                sta 1,x                 ; ( u )
.badb	60		rts		                rts
.badc					ed_no_line_zero:
.badc	b5 02		lda $02,x	                lda 2,x
.bade	15 03		ora $03,x	                ora 3,x
.bae0	d0 07		bne $bae9	                bne _no_line_zero_done
.bae2	24 32		bit $32		                bit ed_flags
.bae4	10 03		bpl $bae9	                bpl _no_line_zero_done
.bae6	4c 64 ba	jmp $ba64	                jmp ed_error_2drop
.bae9					_no_line_zero_done:
.bae9	60		rts		                rts
.baea					ed_num_to_addr:
.baea	ca		dex		                dex
.baeb	ca		dex		                dex                     ; ( u ? )
.baec	a9 2e		lda #$2e	                lda #<ed_head
.baee	95 00		sta $00,x	                sta 0,x
.baf0	a9 00		lda #$00	                lda #>ed_head
.baf2	95 01		sta $01,x	                sta 1,x                 ; ( u addr-h )
.baf4	b5 02		lda $02,x	                lda 2,x
.baf6	15 03		ora $03,x	                ora 3,x
.baf8	d0 05		bne $baff	                bne _num_to_addr_loop
.bafa	20 42 96	jsr $9642	                jsr xt_nip              ; ( addr-h )
.bafd	80 21		bra $bb20	                bra _num_to_addr_done
.baff					_num_to_addr_loop:
.baff	20 80 8f	jsr $8f80	                jsr xt_fetch            ; @ ( u addr1 )
.bb02	b5 00		lda $00,x	                lda 0,x
.bb04	15 01		ora $01,x	                ora 1,x
.bb06	d0 05		bne $bb0d	                bne +
.bb08	20 42 96	jsr $9642	                jsr xt_nip              ; NIP ( addr1 )
.bb0b	80 13		bra $bb20	                bra _num_to_addr_done
.bb0d					+
.bb0d	20 a8 a1	jsr $a1a8	                jsr xt_swap             ; SWAP ( addr1 u )
.bb10	20 11 98	jsr $9811	                jsr xt_one_minus        ; 1- ( addr1 u-1 )
.bb13	b5 00		lda $00,x	                lda 0,x
.bb15	15 01		ora $01,x	                ora 1,x
.bb17	f0 05		beq $bb1e	                beq _num_to_addr_finished
.bb19	20 a8 a1	jsr $a1a8	                jsr xt_swap             ; SWAP ( u-1 addr1 )
.bb1c	80 e1		bra $baff	                bra _num_to_addr_loop
.bb1e					_num_to_addr_finished:
.bb1e	e8		inx		                inx
.bb1f	e8		inx		                inx                     ; ( addr )
.bb20					_num_to_addr_done:
.bb20	60		rts		                rts
.bb21					ed_para1_to_cur:
.bb21	b5 02		lda $02,x	                lda 2,x
.bb23	85 30		sta $30		                sta ed_cur
.bb25	b5 03		lda $03,x	                lda 3,x
.bb27	85 31		sta $31		                sta ed_cur+1
.bb29	60		rts		                rts
.bb2a					ed_print_addr:
.bb2a	20 1d 98	jsr $981d	                jsr xt_one_plus
.bb2d	20 1d 98	jsr $981d	                jsr xt_one_plus         ; ( addr+2 )
.bb30	20 af 8d	jsr $8daf	                jsr xt_dup              ; ( addr+2 addr+2 )
.bb33	20 1d 98	jsr $981d	                jsr xt_one_plus
.bb36	20 1d 98	jsr $981d	                jsr xt_one_plus         ; ( addr+2 addr+4 )
.bb39	20 80 8f	jsr $8f80	                jsr xt_fetch            ; ( addr+2 u-s )
.bb3c	20 a8 a1	jsr $a1a8	                jsr xt_swap             ; ( u-s addr+2 )
.bb3f	20 80 8f	jsr $8f80	                jsr xt_fetch            ; ( u-s addr-s )
.bb42	20 a8 a1	jsr $a1a8	                jsr xt_swap             ; ( addr-s u-s )
.bb45	20 fd a4	jsr $a4fd	                jsr xt_type
.bb48	20 63 89	jsr $8963	                jsr xt_cr
.bb4b	60		rts		                rts
>bb4c	61 66 69 64 70 6e 3d 77		ed_cmd_list:    .text "afidpn=wqQ", 0
>bb54	71 51 00
.bb57					ed_cmd_table:
>bb57	9c b7 e3 b8 16 b9 3f b8		                .word ed_cmd_a, ed_cmd_f, ed_cmd_i, ed_cmd_d, ed_cmd_p, ed_cmd_n
>bb5f	3e b9 37 b9
>bb63	a7 b8 b1 b9 a2 b9 ad b9		                .word ed_cmd_equ, ed_cmd_w, ed_cmd_q, ed_cmd_qq
.bb6b					ed6502_end:

;******  Return to file: platform/../taliforth.asm

.bb6b					forth_words_start:
>bb6b	20 63 72 20 2e 28 20 54		.binary "forth_words.asc"
>bb73	61 6c 69 20 46 6f 72 74 68 20 32 20 66 6f 72 20
>bb83	74 68 65 20 36 35 63 30 32 29 20 63 72 20 2e 28
>bb93	20 56 65 72 73 69 6f 6e 20 31 2e 30 20 30 34 2e
>bba3	20 44 65 63 20 32 30 32 32 20 29 20 63 72 20 2e
>bbb3	28 20 43 6f 70 79 72 69 67 68 74 20 32 30 31 34
>bbc3	2d 32 30 32 32 20 53 63 6f 74 20 57 2e 20 53 74
>bbd3	65 76 65 6e 73 6f 6e 2c 20 53 61 6d 20 43 6f 6c
>bbe3	77 65 6c 6c 29 20 63 72 20 2e 28 20 54 61 6c 69
>bbf3	20 46 6f 72 74 68 20 32 20 63 6f 6d 65 73 20 77
>bc03	69 74 68 20 61 62 73 6f 6c 75 74 65 6c 79 20 4e
>bc13	4f 20 57 41 52 52 41 4e 54 59 29 20 63 72 20 2e
>bc23	28 20 54 79 70 65 20 27 62 79 65 27 20 74 6f 20
>bc33	65 78 69 74 29 20 63 72 20
.bc3c					forth_words_end:
.bc3c					user_words_start:
>bc3c	20 20				.binary "user_words.asc"
.bc3e					user_words_end:

;******  Processing file: platform/../headers.asm

.bc3e					dictionary_start:
.bc3e					nt_drop:
>bc3e	04 10				        .byte 4, UF
>bc40	4a bc 2e 8d 33 8d		        .word nt_dup, xt_drop, z_drop
>bc46	64 72 6f 70			        .text "drop"
.bc4a					nt_dup:
>bc4a	03 10				        .byte 3, UF
>bc4c	55 bc af 8d bc 8d		        .word nt_swap, xt_dup, z_dup
>bc52	64 75 70			        .text "dup"
.bc55					nt_swap:
>bc55	04 10				        .byte 4, UF
>bc57	61 bc a8 a1 bb a1		        .word nt_store, xt_swap, z_swap
>bc5d	73 77 61 70			        .text "swap"
.bc61					nt_store:
>bc61	01 10				        .byte 1, UF
>bc63	6a bc 87 a1 9c a1		        .word nt_fetch, xt_store, z_store
>bc69	21				        .text "!"
.bc6a					nt_fetch:
>bc6a	01 10				        .byte 1, UF
>bc6c	73 bc 80 8f 92 8f		        .word nt_over, xt_fetch, z_fetch
>bc72	40				        .text "@"
.bc73					nt_over:
>bc73	04 10				        .byte 4, UF
>bc75	7f bc 93 98 a0 98		        .word nt_to_r, xt_over, z_over
>bc7b	6f 76 65 72			        .text "over"
.bc7f					nt_to_r:
>bc7f	02 11				        .byte 2, CO+UF ; native is special case
>bc81	89 bc 6a a3 7d a3		        .word nt_r_from, xt_to_r, z_to_r
>bc87	3e 72				        .text ">r"
.bc89					nt_r_from:
>bc89	02 01				        .byte 2, CO    ; native is special case
>bc8b	93 bc 92 9a a2 9a		        .word nt_r_fetch, xt_r_from, z_r_from
>bc91	72 3e				        .text "r>"
.bc93					nt_r_fetch:
>bc93	02 01				        .byte 2, CO    ; native is special case
>bc95	9d bc 7d 9a 91 9a		        .word nt_nip, xt_r_fetch, z_r_fetch
>bc9b	72 40				        .text "r@"
.bc9d					nt_nip:
>bc9d	03 10				        .byte 3, UF
>bc9f	a8 bc 42 96 4f 96		        .word nt_rot, xt_nip, z_nip
>bca5	6e 69 70			        .text "nip"
.bca8					nt_rot:
>bca8	03 10				        .byte 3, UF
>bcaa	b3 bc 57 9b 72 9b		        .word nt_not_rote, xt_rot, z_rot
>bcb0	72 6f 74			        .text "rot"
.bcb3					nt_not_rote:
>bcb3	04 10				        .byte 4, UF
>bcb5	bf bc 6e 96 89 96		        .word nt_tuck, xt_not_rote, z_not_rote
>bcbb	2d 72 6f 74			        .text "-rot"
.bcbf					nt_tuck:
>bcbf	04 10				        .byte 4, UF
>bcc1	cb bc 87 a3 a0 a3		        .word nt_comma, xt_tuck, z_tuck
>bcc7	74 75 63 6b			        .text "tuck"
.bccb					nt_comma:
>bccb	01 10				        .byte 1, UF
>bccd	d4 bc 6e 87 87 87		        .word nt_c_fetch, xt_comma, z_comma
>bcd3	2c				        .text ","
.bcd4					nt_c_fetch:
>bcd4	02 10				        .byte 2, UF
>bcd6	de bc 0b 86 14 86		        .word nt_c_store, xt_c_fetch, z_c_fetch
>bcdc	63 40				        .text "c@"
.bcde					nt_c_store:
>bcde	02 10				        .byte 2, UF
>bce0	e8 bc 15 86 20 86		        .word nt_plus_store, xt_c_store, z_c_store
>bce6	63 21				        .text "c!"
.bce8					nt_plus_store:
>bce8	02 10				        .byte 2, UF
>bcea	f2 bc f6 99 15 9a		        .word nt_execute, xt_plus_store, z_plus_store
>bcf0	2b 21				        .text "+!"
.bcf2					nt_execute:
>bcf2	07 10				        .byte 7, UF
>bcf4	01 bd 3d 8f 43 8f		        .word nt_emit, xt_execute, z_execute
>bcfa	65 78 65 63 75 74 65		        .text "execute"
.bd01					nt_emit:
>bd01	04 18				        .byte 4, NN+UF
>bd03	0d bd ef 8d f9 8d		        .word nt_type, xt_emit, z_emit
>bd09	65 6d 69 74			        .text "emit"
.bd0d					nt_type:
>bd0d	04 10				        .byte 4, UF
>bd0f	19 bd fd a4 27 a5		        .word nt_dot, xt_type, z_type
>bd15	74 79 70 65			        .text "type"
.bd19					nt_dot:
>bd19	01 10				        .byte 1, UF
>bd1b	22 bd 36 8c 57 8c		        .word nt_u_dot, xt_dot, z_dot
>bd21	2e				        .text "."
.bd22					nt_u_dot:
>bd22	02 10				        .byte 2, UF
>bd24	2c bd 28 a5 33 a5		        .word nt_u_dot_r, xt_u_dot, z_u_dot
>bd2a	75 2e				        .text "u."
.bd2c					nt_u_dot_r:
>bd2c	03 10				        .byte 3, UF
>bd2e	37 bd 34 a5 55 a5		        .word nt_dot_r, xt_u_dot_r, z_u_dot_r
>bd34	75 2e 72			        .text "u.r"
.bd37					nt_dot_r:
>bd37	02 10				        .byte 2, UF
>bd39	41 bd 72 8c 9f 8c		        .word nt_d_dot, xt_dot_r, z_dot_r
>bd3f	2e 72				        .text ".r"
.bd41					nt_d_dot:
>bd41	02 10				        .byte 2, UF
>bd43	4b bd e4 8c 02 8d		        .word nt_d_dot_r, xt_d_dot, z_d_dot
>bd49	64 2e				        .text "d."
.bd4b					nt_d_dot_r:
>bd4b	03 10				        .byte 3, UF
>bd4d	56 bd 03 8d 2d 8d		        .word nt_ud_dot, xt_d_dot_r, z_d_dot_r
>bd53	64 2e 72			        .text "d.r"
.bd56					nt_ud_dot:
>bd56	03 10				        .byte 3, UF
>bd58	61 bd 82 a5 94 a5		        .word nt_ud_dot_r, xt_ud_dot, z_ud_dot
>bd5e	75 64 2e			        .text "ud."
.bd61					nt_ud_dot_r:
>bd61	04 10				        .byte 4, UF
>bd63	6d bd 95 a5 b3 a5		        .word nt_question, xt_ud_dot_r, z_ud_dot_r
>bd69	75 64 2e 72			        .text "ud.r"
.bd6d					nt_question:
>bd6d	01 00				        .byte 1, 0
>bd6f	76 bd 62 9a 68 9a		        .word nt_false, xt_question, z_question
>bd75	3f				        .text "?"
.bd76					nt_false:
>bd76	05 00				        .byte 5, 0
>bd78	83 bd 79 8f 7f 8f		        .word nt_true, xt_false, z_false
>bd7e	66 61 6c 73 65			        .text "false"
.bd83					nt_true:
>bd83	04 00				        .byte 4, 0
>bd85	8f bd 7e a3 86 a3		        .word nt_space, xt_true, z_true
>bd8b	74 72 75 65			        .text "true"
.bd8f					nt_space:
>bd8f	05 00				        .byte 5, 0
>bd91	9c bd 1e a1 23 a1		        .word nt_zero, xt_space, z_space
>bd97	73 70 61 63 65			        .text "space"
.bd9c					nt_zero:
>bd9c	01 00				        .byte 1, 0
>bd9e	a5 bd a2 a7 a8 a7		        .word nt_one, xt_zero, z_zero
>bda4	30				        .text "0"
.bda5					nt_one:
>bda5	01 00				        .byte 1, 0
>bda7	ae bd 08 98 10 98		        .word nt_two, xt_one, z_one
>bdad	31				        .text "1"
.bdae					nt_two:
>bdae	01 00				        .byte 1, 0
>bdb0	b7 bd a1 a3 a9 a3		        .word nt_two_dup, xt_two, z_two
>bdb6	32				        .text "2"
.bdb7					nt_two_dup:
>bdb7	04 10				        .byte 4, UF
>bdb9	c3 bd b2 a3 c9 a3		        .word nt_question_dup, xt_two_dup, z_two_dup
>bdbf	32 64 75 70			        .text "2dup"
.bdc3					nt_question_dup:
>bdc3	04 10				        .byte 4, UF
>bdc5	cf bd 69 9a 7c 9a		        .word nt_plus, xt_question_dup, z_question_dup
>bdcb	3f 64 75 70			        .text "?dup"
.bdcf					nt_plus:
>bdcf	01 10				        .byte 1, UF
>bdd1	d8 bd e3 99 f5 99		        .word nt_minus, xt_plus, z_plus
>bdd7	2b				        .text "+"
.bdd8					nt_minus:
>bdd8	01 10				        .byte 1, UF
>bdda	e1 bd 50 95 62 95		        .word nt_one_minus, xt_minus, z_minus
>bde0	2d				        .text "-"
.bde1					nt_one_minus:
>bde1	02 10				        .byte 2, UF
>bde3	eb bd 11 98 1c 98		        .word nt_one_plus, xt_one_minus, z_one_minus
>bde9	31 2d				        .text "1-"
.bdeb					nt_one_plus:
>bdeb	02 10				        .byte 2, UF
>bded	f5 bd 1d 98 26 98		        .word nt_two_star, xt_one_plus, z_one_plus
>bdf3	31 2b				        .text "1+"
.bdf5					nt_two_star:
>bdf5	02 10				        .byte 2, UF
>bdf7	ff bd 4a a4 51 a4		        .word nt_two_slash, xt_two_star, z_two_star
>bdfd	32 2a				        .text "2*"
.bdff					nt_two_slash:
>bdff	02 10				        .byte 2, UF
>be01	09 be 3f a4 49 a4		        .word nt_abs, xt_two_slash, z_two_slash
>be07	32 2f				        .text "2/"
.be09					nt_abs:
>be09	03 10				        .byte 3, UF
>be0b	14 be 39 81 4d 81		        .word nt_dabs, xt_abs, z_abs
>be11	61 62 73			        .text "abs"
.be14					nt_dabs:
>be14	04 10				        .byte 4, UF
>be16	20 be 86 8a a4 8a		        .word nt_and, xt_dabs, z_dabs
>be1c	64 61 62 73			        .text "dabs"
.be20					nt_and:
>be20	03 10				        .byte 3, UF
>be22	2b be 3e 83 4f 83		        .word nt_or, xt_and, z_and
>be28	61 6e 64			        .text "and"
.be2b					nt_or:
>be2b	02 10				        .byte 2, UF
>be2d	35 be 33 98 44 98		        .word nt_xor, xt_or, z_or
>be33	6f 72				        .text "or"
.be35					nt_xor:
>be35	03 10				        .byte 3, UF
>be37	40 be 90 a7 a1 a7		        .word nt_rshift, xt_xor, z_xor
>be3d	78 6f 72			        .text "xor"
.be40					nt_rshift:
>be40	06 10				        .byte 6, UF
>be42	4e be 73 9b 86 9b		        .word nt_lshift, xt_rshift, z_rshift
>be48	72 73 68 69 66 74		        .text "rshift"
.be4e					nt_lshift:
>be4e	06 10				        .byte 6, UF
>be50	5c be 7a 94 8d 94		        .word nt_pick, xt_lshift, z_lshift
>be56	6c 73 68 69 66 74		        .text "lshift"
.be5c					nt_pick:
>be5c	04 00				        .byte 4, 0    ; underflow check is complicated, leave off here
>be5e	68 be d2 99 e2 99		        .word nt_char, xt_pick, z_pick
>be64	70 69 63 6b			        .text "pick"
.be68					nt_char:
>be68	04 00				        .byte 4, 0
>be6a	74 be 31 86 47 86		        .word nt_bracket_char, xt_char, z_char
>be70	63 68 61 72			        .text "char"
.be74					nt_bracket_char:
>be74	06 05				        .byte 6, CO+IM
>be76	82 be 97 85 9d 85		        .word nt_char_plus, xt_bracket_char, z_bracket_char
>be7c	5b 63 68 61 72 5d		        .text "[char]"
.be82					nt_char_plus:
>be82	05 00				        .byte 5, 0
>be84	8f be 1d 98 26 98		        .word nt_chars, xt_one_plus, z_one_plus ; same as 1+
>be8a	63 68 61 72 2b			        .text "char+"
.be8f					nt_chars:
>be8f	05 12				        .byte 5, AN+UF   ; deleted during compile
>be91	9c be 48 86 4b 86		        .word nt_cells, xt_chars, z_chars
>be97	63 68 61 72 73			        .text "chars"
.be9c					nt_cells:
>be9c	05 00				        .byte 5, 0
>be9e	a9 be 4a a4 51 a4		        .word nt_cell_plus, xt_two_star, z_two_star  ; same as 2*
>bea4	63 65 6c 6c 73			        .text "cells"
.bea9					nt_cell_plus:
>bea9	05 10				        .byte 5, UF
>beab	b6 be 21 86 30 86		        .word nt_here, xt_cell_plus, z_cell_plus
>beb1	63 65 6c 6c 2b			        .text "cell+"
.beb6					nt_here:
>beb6	04 00				        .byte 4, 0
>beb8	c2 be 72 91 7c 91		        .word nt_equal, xt_here, z_here
>bebe	68 65 72 65			        .text "here"
.bec2					nt_equal:
>bec2	01 10				        .byte 1, UF
>bec4	cb be ce 8e e9 8e		        .word nt_not_equals, xt_equal, z_equal
>beca	3d				        .text "="
.becb					nt_not_equals:
>becb	02 10				        .byte 2, UF
>becd	d5 be 50 96 6d 96		        .word nt_less_than, xt_not_equals, z_not_equals
>bed3	3c 3e				        .text "<>"
.bed5					nt_less_than:
>bed5	01 10				        .byte 1, UF
>bed7	de be 68 93 7c 93		        .word nt_u_less_than, xt_less_than, z_less_than
>bedd	3c				        .text "<"
.bede					nt_u_less_than:
>bede	02 10				        .byte 2, UF
>bee0	e8 be 6c a5 81 a5		        .word nt_u_greater_than, xt_u_less_than, z_u_less_than
>bee6	75 3c				        .text "u<"
.bee8					nt_u_greater_than:
>bee8	02 10				        .byte 2, UF
>beea	f2 be 56 a5 6b a5		        .word nt_greater_than, xt_u_greater_than, z_u_greater_than
>bef0	75 3e				        .text "u>"
.bef2					nt_greater_than:
>bef2	01 10				        .byte 1, UF
>bef4	fb be 5d 91 71 91		        .word nt_zero_equal, xt_greater_than, z_greater_than
>befa	3e				        .text ">"
.befb					nt_zero_equal:
>befb	02 10				        .byte 2, UF
>befd	05 bf a9 a7 bc a7		        .word nt_zero_unequal, xt_zero_equal, z_zero_equal
>bf03	30 3d				        .text "0="
.bf05					nt_zero_unequal:
>bf05	03 10				        .byte 3, UF
>bf07	10 bf e1 a7 f2 a7		        .word nt_zero_greater, xt_zero_unequal, z_zero_unequal
>bf0d	30 3c 3e			        .text "0<>"
.bf10					nt_zero_greater:
>bf10	02 10				        .byte 2, UF
>bf12	1a bf bd a7 d0 a7		        .word nt_zero_less, xt_zero_greater, z_zero_greater
>bf18	30 3e				        .text "0>"
.bf1a					nt_zero_less:
>bf1a	02 10				        .byte 2, UF
>bf1c	24 bf d1 a7 e0 a7		        .word nt_min, xt_zero_less, z_zero_less
>bf22	30 3c				        .text "0<"
.bf24					nt_min:
>bf24	03 10				        .byte 3, UF
>bf26	2f bf 34 95 4f 95		        .word nt_max, xt_min, z_min
>bf2c	6d 69 6e			        .text "min"
.bf2f					nt_max:
>bf2f	03 10				        .byte 3, UF
>bf31	3a bf 18 95 33 95		        .word nt_two_drop, xt_max, z_max
>bf37	6d 61 78			        .text "max"
.bf3a					nt_two_drop:
>bf3a	05 10				        .byte 5, UF
>bf3c	47 bf aa a3 b1 a3		        .word nt_two_swap, xt_two_drop, z_two_drop
>bf42	32 64 72 6f 70			        .text "2drop"
.bf47					nt_two_swap:
>bf47	05 10				        .byte 5, UF
>bf49	54 bf 78 a4 9b a4		        .word nt_two_over, xt_two_swap, z_two_swap
>bf4f	32 73 77 61 70			        .text "2swap"
.bf54					nt_two_over:
>bf54	05 10				        .byte 5, UF
>bf56	61 bf ec a3 03 a4		        .word nt_two_store, xt_two_over, z_two_over
>bf5c	32 6f 76 65 72			        .text "2over"
.bf61					nt_two_store:
>bf61	02 10				        .byte 2, UF
>bf63	6b bf 52 a4 77 a4		        .word nt_two_fetch, xt_two_store, z_two_store
>bf69	32 21				        .text "2!"
.bf6b					nt_two_fetch:
>bf6b	02 10				        .byte 2, UF
>bf6d	75 bf ca a3 eb a3		        .word nt_two_variable, xt_two_fetch, z_two_fetch
>bf73	32 40				        .text "2@"
.bf75					nt_two_variable:
>bf75	09 00				        .byte 9, 0
>bf77	86 bf ee a4 fc a4		        .word nt_two_constant, xt_two_variable, z_two_variable
>bf7d	32 76 61 72 69 61 62 6c		        .text "2variable"
>bf85	65
.bf86					nt_two_constant:
>bf86	09 10				        .byte 9, UF
>bf88	97 bf bc a4 e0 a4		        .word nt_two_literal, xt_two_constant, z_two_constant
>bf8e	32 63 6f 6e 73 74 61 6e		        .text "2constant"
>bf96	74
.bf97					nt_two_literal:
>bf97	08 14				        .byte 8, UF+IM
>bf99	a7 bf e1 a4 ed a4		        .word nt_two_r_fetch, xt_two_literal, z_two_literal
>bf9f	32 6c 69 74 65 72 61 6c		        .text "2literal"
.bfa7					nt_two_r_fetch:
>bfa7	03 09				        .byte 3, CO+NN          ; native is special case, leave NN for now
>bfa9	b2 bf 04 a4 21 a4		        .word nt_two_r_from, xt_two_r_fetch, z_two_r_fetch
>bfaf	32 72 40			        .text "2r@"
.bfb2					nt_two_r_from:
>bfb2	03 01				        .byte 3, CO             ; native is special case
>bfb4	bd bf 22 a4 3e a4		        .word nt_two_to_r, xt_two_r_from, z_two_r_from
>bfba	32 72 3e			        .text "2r>"
.bfbd					nt_two_to_r:
>bfbd	03 11				        .byte 3, CO+UF          ; native is special case
>bfbf	c8 bf 9c a4 bb a4		        .word nt_invert, xt_two_to_r, z_two_to_r
>bfc5	32 3e 72			        .text "2>r"
.bfc8					nt_invert:
>bfc8	06 10				        .byte 6, UF
>bfca	d6 bf eb 92 fa 92		        .word nt_negate, xt_invert, z_invert
>bfd0	69 6e 76 65 72 74		        .text "invert"
.bfd6					nt_negate:
>bfd6	06 10				        .byte 6, UF
>bfd8	e4 bf 23 96 33 96		        .word nt_dnegate, xt_negate, z_negate
>bfde	6e 65 67 61 74 65		        .text "negate"
.bfe4					nt_dnegate:
>bfe4	07 10				        .byte 7, UF
>bfe6	f3 bf 41 8b 5b 8b		        .word nt_c_comma, xt_dnegate, z_dnegate
>bfec	64 6e 65 67 61 74 65		        .text "dnegate"
.bff3					nt_c_comma:
>bff3	02 10				        .byte 2, UF
>bff5	fd bf 00 86 0a 86		        .word nt_bounds, xt_c_comma, z_c_comma
>bffb	63 2c				        .text "c,"
.bffd					nt_bounds:
>bffd	06 10				        .byte 6, UF
>bfff	0b c0 7e 85 96 85		        .word nt_spaces, xt_bounds, z_bounds
>c005	62 6f 75 6e 64 73		        .text "bounds"
.c00b					nt_spaces:
>c00b	06 10				        .byte 6, UF
>c00d	19 c0 24 a1 59 a1		        .word nt_bl, xt_spaces, z_spaces
>c013	73 70 61 63 65 73		        .text "spaces"
.c019					nt_bl:
>c019	02 00				        .byte 2, 0
>c01b	23 c0 9a 83 a2 83		        .word nt_minus_trailing, xt_bl, z_bl
>c021	62 6c				        .text "bl"
.c023					nt_minus_trailing:
>c023	09 10				        .byte 9, UF
>c025	34 c0 7c 95 b8 95		        .word nt_minus_leading, xt_minus_trailing, z_minus_trailing
>c02b	2d 74 72 61 69 6c 69 6e		        .text "-trailing"
>c033	67
.c034					nt_minus_leading:
>c034	08 10				        .byte 8, UF
>c036	44 c0 63 95 7b 95		        .word nt_slash_string, xt_minus_leading, z_minus_leading
>c03c	2d 6c 65 61 64 69 6e 67		        .text "-leading"
.c044					nt_slash_string:
>c044	07 10				        .byte 7, UF
>c046	53 c0 19 a0 38 a0		        .word nt_refill, xt_slash_string, z_slash_string
>c04c	2f 73 74 72 69 6e 67		        .text "/string"
.c053					nt_refill:
>c053	06 00				        .byte 6, 0
>c055	61 c0 f8 9a 39 9b		        .word nt_accept, xt_refill, z_refill
>c05b	72 65 66 69 6c 6c		        .text "refill"
.c061					nt_accept:
>c061	06 18				        .byte 6, UF+NN
>c063	6f c0 4e 81 46 82		        .word nt_input_to_r, xt_accept, z_accept
>c069	61 63 63 65 70 74		        .text "accept"
.c06f					nt_input_to_r:
>c06f	07 08				        .byte 7, NN
>c071	7e c0 62 92 77 92		        .word nt_r_to_input, xt_input_to_r, z_input_to_r
>c077	69 6e 70 75 74 3e 72		        .text "input>r"
.c07e					nt_r_to_input:
>c07e	07 08				        .byte 7, NN
>c080	8d c0 a3 9a ba 9a		        .word nt_unused, xt_r_to_input, z_r_to_input
>c086	72 3e 69 6e 70 75 74		        .text "r>input"
.c08d					nt_unused:
>c08d	06 00				        .byte 6, 0
>c08f	9b c0 4e a6 5d a6		        .word nt_depth, xt_unused, z_unused
>c095	75 6e 75 73 65 64		        .text "unused"
.c09b					nt_depth:
>c09b	05 00				        .byte 5, 0
>c09d	a8 c0 f6 8a 04 8b		        .word nt_key, xt_depth, z_depth
>c0a3	64 65 70 74 68			        .text "depth"
.c0a8					nt_key:
>c0a8	03 00				        .byte 3, 0
>c0aa	b3 c0 2e 93 37 93		        .word nt_allot, xt_key, z_key
>c0b0	6b 65 79			        .text "key"
.c0b3					nt_allot:
>c0b3	05 10				        .byte 5, UF
>c0b5	c0 c0 ab 82 13 83		        .word nt_create, xt_allot, z_allot
>c0bb	61 6c 6c 6f 74			        .text "allot"
.c0c0					nt_create:
>c0c0	06 00				        .byte 6, 0
>c0c2	ce c0 69 89 3d 8a		        .word nt_does, xt_create, z_create
>c0c8	63 72 65 61 74 65		        .text "create"
.c0ce					nt_does:
>c0ce	05 05				        .byte 5, CO+IM
>c0d0	db c0 f5 8b 03 8c		        .word nt_variable, xt_does, z_does
>c0d6	64 6f 65 73 3e			        .text "does>"
.c0db					nt_variable:
>c0db	08 00				        .byte 8, 0
>c0dd	eb c0 72 a6 8a a6		        .word nt_constant, xt_variable, z_variable
>c0e3	76 61 72 69 61 62 6c 65		        .text "variable"
.c0eb					nt_constant:
>c0eb	08 10				        .byte 8, UF
>c0ed	fb c0 11 89 4e 89		        .word nt_value, xt_constant, z_constant
>c0f3	63 6f 6e 73 74 61 6e 74		        .text "constant"
.c0fb					nt_value:
>c0fb	05 10				        .byte 5, UF
>c0fd	08 c1 11 89 4e 89		        .word nt_to, xt_constant, z_constant
>c103	76 61 6c 75 65			        .text "value"
.c108					nt_to:
>c108	02 0c				        .byte 2, NN+IM
>c10a	12 c1 2b a2 86 a2		        .word nt_s_to_d, xt_to, z_to
>c110	74 6f				        .text "to"
.c112					nt_s_to_d:
>c112	03 10				        .byte 3, UF
>c114	1d c1 ac 9e bd 9e		        .word nt_d_to_s, xt_s_to_d, z_s_to_d
>c11a	73 3e 64			        .text "s>d"
.c11d					nt_d_to_s:
>c11d	03 10				        .byte 3, UF
>c11f	28 c1 80 8a 85 8a		        .word nt_d_minus, xt_d_to_s, z_d_to_s
>c125	64 3e 73			        .text "d>s"
.c128					nt_d_minus:
>c128	02 10				        .byte 2, UF
>c12a	32 c1 3e 8a 5e 8a		        .word nt_d_plus, xt_d_minus, z_d_minus
>c130	64 2d				        .text "d-"
.c132					nt_d_plus:
>c132	02 10				        .byte 2, UF
>c134	3c c1 5f 8a 7f 8a		        .word nt_erase, xt_d_plus, z_d_plus
>c13a	64 2b				        .text "d+"
.c13c					nt_erase:
>c13c	05 00				        .byte 5, 0      ; underflow checked by FILL
>c13e	49 c1 f4 8e 3c 8f		        .word nt_blank, xt_erase, z_erase
>c144	65 72 61 73 65			        .text "erase"
.c149					nt_blank:
>c149	05 00				        .byte 5, 0     ; underflow checked by FILL
>c14b	56 c1 ea 8e 3c 8f		        .word nt_fill, xt_blank, z_blank
>c151	62 6c 61 6e 6b			        .text "blank"
.c156					nt_fill:
>c156	04 10				        .byte 4, UF
>c158	62 c1 fa 8e 3c 8f		        .word nt_find_name, xt_fill, z_fill
>c15e	66 69 6c 6c			        .text "fill"
.c162					nt_find_name:
>c162	09 10				        .byte 9, UF
>c164	73 c1 db 8f 86 90		        .word nt_tick, xt_find_name, z_find_name
>c16a	66 69 6e 64 2d 6e 61 6d		        .text "find-name"
>c172	65
.c173					nt_tick:
>c173	01 00				        .byte 1, 0
>c175	7c c1 0b a2 2a a2		        .word nt_bracket_tick, xt_tick, z_tick
>c17b	27				        .text "'"
.c17c					nt_bracket_tick:
>c17c	03 05				        .byte 3, CO+IM
>c17e	87 c1 9e 85 a4 85		        .word nt_name_to_int, xt_bracket_tick, z_bracket_tick
>c184	5b 27 5d			        .text "[']"
.c187					nt_name_to_int:
>c187	08 10				        .byte 8, UF
>c189	97 c1 e1 95 fd 95		        .word nt_int_to_name, xt_name_to_int, z_name_to_int
>c18f	6e 61 6d 65 3e 69 6e 74		        .text "name>int"
.c197					nt_int_to_name:
>c197	08 10				        .byte 8, UF
>c199	a7 c1 78 92 ea 92		        .word nt_name_to_string, xt_int_to_name, z_int_to_name
>c19f	69 6e 74 3e 6e 61 6d 65		        .text "int>name"
.c1a7					nt_name_to_string:
>c1a7	0b 10				        .byte 11, UF
>c1a9	ba c1 fe 95 17 96		        .word nt_to_body, xt_name_to_string, z_name_to_string
>c1af	6e 61 6d 65 3e 73 74 72		        .text "name>string"
>c1b7	69 6e 67
.c1ba					nt_to_body:
>c1ba	05 10				        .byte 5, UF
>c1bc	c7 c1 87 a2 ab a2		        .word nt_defer, xt_to_body, z_to_body
>c1c2	3e 62 6f 64 79			        .text ">body"
.c1c7					nt_defer:
>c1c7	05 00				        .byte 5, 0
>c1c9	d4 c1 ac 8a de 8a		        .word nt_latestxt, xt_defer, z_defer
>c1cf	64 65 66 65 72			        .text "defer"
.c1d4					nt_latestxt:
>c1d4	08 00				        .byte 8, 0
>c1d6	e4 c1 49 93 4f 93		        .word nt_latestnt, xt_latestxt, z_latestxt
>c1dc	6c 61 74 65 73 74 78 74		        .text "latestxt"
.c1e4					nt_latestnt:
>c1e4	08 00				        .byte 8, 0
>c1e6	f4 c1 3b 93 48 93		        .word nt_parse_name, xt_latestnt, z_latestnt
>c1ec	6c 61 74 65 73 74 6e 74		        .text "latestnt"
.c1f4					nt_parse_name:
>c1f4	0a 08				        .byte 10, NN
>c1f6	06 c2 df 98 d1 99		        .word nt_parse, xt_parse_name, z_parse_name
>c1fc	70 61 72 73 65 2d 6e 61		        .text "parse-name"
>c204	6d 65
.c206					nt_parse:
>c206	05 10				        .byte 5, UF
>c208	13 c2 3a 99 d1 99		        .word nt_execute_parsing, xt_parse, z_parse
>c20e	70 61 72 73 65			        .text "parse"
.c213					nt_execute_parsing:
>c213	0f 10				        .byte 15, UF
>c215	2a c2 51 8f 77 8f		        .word nt_source, xt_execute_parsing, z_execute_parsing
>c21b	65 78 65 63 75 74 65 2d		        .text "execute-parsing"
>c223	70 61 72 73 69 6e 67
.c22a					nt_source:
>c22a	06 00				        .byte 6, 0
>c22c	38 c2 fe a0 12 a1		        .word nt_source_id, xt_source, z_source
>c232	73 6f 75 72 63 65		        .text "source"
.c238					nt_source_id:
>c238	09 00				        .byte 9, 0
>c23a	49 c2 13 a1 1d a1		        .word nt_colon, xt_source_id, z_source_id
>c240	73 6f 75 72 63 65 2d 69		        .text "source-id"
>c248	64
.c249					nt_colon:
>c249	01 00				        .byte 1, 0
>c24b	52 c2 0f 87 51 87		        .word nt_semicolon, xt_colon, z_colon
>c251	3a				        .text ":"
.c252					nt_semicolon:
>c252	01 05				        .byte 1, CO+IM
>c254	5b c2 88 9f e6 9f		        .word nt_colon_noname, xt_semicolon, z_semicolon
>c25a	3b				        .text ";"
.c25b					nt_colon_noname:
>c25b	07 00				        .byte 7, 0
>c25d	6a c2 52 87 6d 87		        .word nt_compile_comma, xt_colon_noname, z_colon_noname
>c263	3a 6e 6f 6e 61 6d 65		        .text ":noname"
.c26a					nt_compile_comma:
>c26a	08 18				        .byte 8, UF+NN
>c26c	7a c2 ed 87 04 89		        .word nt_left_bracket, xt_compile_comma, z_compile_comma
>c272	63 6f 6d 70 69 6c 65 2c		        .text "compile,"
.c27a					nt_left_bracket:
>c27a	01 05				        .byte 1, IM+CO
>c27c	83 c2 55 93 59 93		        .word nt_right_bracket, xt_left_bracket, z_left_bracket
>c282	5b				        .text "["
.c283					nt_right_bracket:
>c283	01 04				        .byte 1, IM
>c285	8c c2 47 9b 4d 9b		        .word nt_literal, xt_right_bracket, z_right_bracket
>c28b	5d				        .text "]"
.c28c					nt_literal:
>c28c	07 15				        .byte 7, IM+CO+UF
>c28e	9b c2 8a 93 97 93		        .word nt_sliteral, xt_literal, z_literal
>c294	6c 69 74 65 72 61 6c		        .text "literal"
.c29b					nt_sliteral:
>c29b	08 15				        .byte 8, CO+IM+UF
>c29d	ab c2 39 a0 a8 a0		        .word nt_dot_quote, xt_sliteral, z_sliteral
>c2a3	73 6c 69 74 65 72 61 6c		        .text "sliteral"
.c2ab					nt_dot_quote:
>c2ab	02 05				        .byte 2, CO+IM
>c2ad	b5 c2 67 8c 71 8c		        .word nt_s_quote, xt_dot_quote, z_dot_quote
>c2b3	2e 22				        .text ".", $22
.c2b5					nt_s_quote:
>c2b5	02 0c				        .byte 2, IM+NN
>c2b7	bf c2 4f 9d ab 9e		        .word nt_s_backslash_quote, xt_s_quote, z_s_quote
>c2bd	73 22				        .text "s", $22
.c2bf					nt_s_backslash_quote:
>c2bf	03 04				        .byte 3, IM
>c2c1	ca c2 87 9b 90 9b		        .word nt_postpone, xt_s_backslash_quote, z_s_backslash_quote
>c2c7	73 5c 22			        .text "s", $5C, $22
.c2ca					nt_postpone:
>c2ca	08 05				        .byte 8, IM+CO
>c2cc	da c2 16 9a 54 9a		        .word nt_immediate, xt_postpone, z_postpone
>c2d2	70 6f 73 74 70 6f 6e 65		        .text "postpone"
.c2da					nt_immediate:
>c2da	09 00				        .byte 9, 0
>c2dc	eb c2 4b 92 56 92		        .word nt_compile_only, xt_immediate, z_immediate
>c2e2	69 6d 6d 65 64 69 61 74		        .text "immediate"
>c2ea	65
.c2eb					nt_compile_only:
>c2eb	0c 00				        .byte 12, 0
>c2ed	ff c2 05 89 10 89		        .word nt_never_native, xt_compile_only, z_compile_only
>c2f3	63 6f 6d 70 69 6c 65 2d		        .text "compile-only"
>c2fb	6f 6e 6c 79
.c2ff					nt_never_native:
>c2ff	0c 00				        .byte 12, 0
>c301	13 c3 34 96 41 96		        .word nt_always_native, xt_never_native, z_never_native
>c307	6e 65 76 65 72 2d 6e 61		        .text "never-native"
>c30f	74 69 76 65
.c313					nt_always_native:
>c313	0d 00				        .byte 13, 0
>c315	28 c3 30 83 3d 83		        .word nt_allow_native, xt_always_native, z_always_native
>c31b	61 6c 77 61 79 73 2d 6e		        .text "always-native"
>c323	61 74 69 76 65
.c328					nt_allow_native:
>c328	0c 00				        .byte 12, 0
>c32a	3c c3 14 83 1f 83		        .word nt_nc_limit, xt_allow_native, z_allow_native
>c330	61 6c 6c 6f 77 2d 6e 61		        .text "allow-native"
>c338	74 69 76 65
.c33c					nt_nc_limit:
>c33c	08 00				        .byte 8, 0
>c33e	4c c3 18 96 22 96		        .word nt_strip_underflow, xt_nc_limit, z_nc_limit
>c344	6e 63 2d 6c 69 6d 69 74		        .text "nc-limit"
.c34c					nt_strip_underflow:
>c34c	0f 00				        .byte 15, 0
>c34e	63 c3 9d a1 a7 a1		        .word nt_abort, xt_strip_underflow, z_strip_underflow
>c354	73 74 72 69 70 2d 75 6e		        .text "strip-underflow"
>c35c	64 65 72 66 6c 6f 77
.c363					nt_abort:
>c363	05 00				        .byte 5, 0
>c365	70 c3 81 80 c5 80		        .word nt_abort_quote, xt_abort, z_abort
>c36b	61 62 6f 72 74			        .text "abort"
.c370					nt_abort_quote:
>c370	06 0d				        .byte 6, CO+IM+NN
>c372	7e c3 19 81 23 81		        .word nt_do, xt_abort_quote, z_abort_quote
>c378	61 62 6f 72 74 22		        .text "abort", $22
.c37e					nt_do:
>c37e	02 0d				        .byte 2, CO+IM+NN
>c380	88 c3 62 8b bc 8b		        .word nt_question_do, xt_do, z_do
>c386	64 6f				        .text "do"
.c388					nt_question_do:
>c388	03 0d				        .byte 3, CO+IM+NN
>c38a	93 c3 5c 8b bc 8b		        .word nt_i, xt_question_do, z_question_do
>c390	3f 64 6f			        .text "?do"
.c393					nt_i:
>c393	01 03				        .byte 1, AN+CO
>c395	9c c3 e9 91 02 92		        .word nt_j, xt_i, z_i
>c39b	69				        .text "i"
.c39c					nt_j:
>c39c	01 03				        .byte 1, AN+CO
>c39e	a5 c3 14 93 2d 93		        .word nt_loop, xt_j, z_j
>c3a4	6a				        .text "j"
.c3a5					nt_loop:
>c3a5	04 05				        .byte 4, CO+IM
>c3a7	b1 c3 fb 93 68 94		        .word nt_plus_loop, xt_loop, z_loop
>c3ad	6c 6f 6f 70			        .text "loop"
.c3b1					nt_plus_loop:
>c3b1	05 05				        .byte 5, CO+IM
>c3b3	be c3 02 94 68 94		        .word nt_exit, xt_plus_loop, z_plus_loop
>c3b9	2b 6c 6f 6f 70			        .text "+loop"
.c3be					nt_exit:
>c3be	04 03				        .byte 4, AN+CO
>c3c0	ca c3 78 8f 79 8f		        .word nt_unloop, xt_exit, z_exit
>c3c6	65 78 69 74			        .text "exit"
.c3ca					nt_unloop:
>c3ca	06 03				        .byte 6, AN+CO
>c3cc	d8 c3 3c a6 42 a6		        .word nt_leave, xt_unloop, z_unloop
>c3d2	75 6e 6c 6f 6f 70		        .text "unloop"
.c3d8					nt_leave:
>c3d8	05 03				        .byte 5, AN+CO
>c3da	e5 c3 50 93 55 93		        .word nt_recurse, xt_leave, z_leave
>c3e0	6c 65 61 76 65			        .text "leave"
.c3e5					nt_recurse:
>c3e5	07 0d				        .byte 7, CO+IM+NN
>c3e7	f4 c3 bb 9a f7 9a		        .word nt_quit, xt_recurse, z_recurse
>c3ed	72 65 63 75 72 73 65		        .text "recurse"
.c3f4					nt_quit:
>c3f4	04 00				        .byte 4, 0
>c3f6	00 c4 83 80 c5 80		        .word nt_begin, xt_quit, z_quit
>c3fc	71 75 69 74			        .text "quit"
.c400					nt_begin:
>c400	05 07				        .byte 5, AN+CO+IM
>c402	0d c4 90 83 93 83		        .word nt_again, xt_begin, z_begin
>c408	62 65 67 69 6e			        .text "begin"
.c40d					nt_again:
>c40d	05 17				        .byte 5, AN+CO+IM+UF
>c40f	1a c4 89 82 a9 82		        .word nt_state, xt_again, z_again
>c415	61 67 61 69 6e			        .text "again"
.c41a					nt_state:
>c41a	05 00				        .byte 5, 0
>c41c	27 c4 7c a1 86 a1		        .word nt_evaluate, xt_state, z_state
>c422	73 74 61 74 65			        .text "state"
.c427					nt_evaluate:
>c427	08 10				        .byte 8, UF
>c429	37 c4 d5 90 28 91		        .word nt_base, xt_evaluate, z_evaluate
>c42f	65 76 61 6c 75 61 74 65		        .text "evaluate"
.c437					nt_base:
>c437	04 00				        .byte 4, 0
>c439	43 c4 87 83 8f 83		        .word nt_digit_question, xt_base, z_base
>c43f	62 61 73 65			        .text "base"
.c443					nt_digit_question:
>c443	06 10				        .byte 6, UF
>c445	51 c4 05 8b 39 8b		        .word nt_number, xt_digit_question, z_digit_question
>c44b	64 69 67 69 74 3f		        .text "digit?"
.c451					nt_number:
>c451	06 10				        .byte 6, UF
>c453	5f c4 8a 96 86 97		        .word nt_to_number, xt_number, z_number
>c459	6e 75 6d 62 65 72		        .text "number"
.c45f					nt_to_number:
>c45f	07 10				        .byte 7, UF
>c461	6e c4 b7 a2 56 a3		        .word nt_hex, xt_to_number, z_to_number
>c467	3e 6e 75 6d 62 65 72		        .text ">number"
.c46e					nt_hex:
>c46e	03 00				        .byte 3, 0
>c470	79 c4 7d 91 83 91		        .word nt_decimal, xt_hex, z_hex
>c476	68 65 78			        .text "hex"
.c479					nt_decimal:
>c479	07 00				        .byte 7, 0
>c47b	88 c4 a5 8a ab 8a		        .word nt_count, xt_decimal, z_decimal
>c481	64 65 63 69 6d 61 6c		        .text "decimal"
.c488					nt_count:
>c488	05 10				        .byte 5, UF
>c48a	95 c4 4f 89 62 89		        .word nt_m_star, xt_count, z_count
>c490	63 6f 75 6e 74			        .text "count"
.c495					nt_m_star:
>c495	02 10				        .byte 2, UF
>c497	9f c4 8e 94 a8 94		        .word nt_um_star, xt_m_star, z_m_star
>c49d	6d 2a				        .text "m*"
.c49f					nt_um_star:
>c49f	03 10				        .byte 3, UF
>c4a1	aa c4 f6 a5 3b a6		        .word nt_star, xt_um_star, z_um_star
>c4a7	75 6d 2a			        .text "um*"
.c4aa					nt_star:
>c4aa	01 10				        .byte 1, UF
>c4ac	b3 c4 5a a1 62 a1		        .word nt_um_slash_mod, xt_star, z_star
>c4b2	2a				        .text "*"
.c4b3					nt_um_slash_mod:
>c4b3	06 10				        .byte 6, UF
>c4b5	c1 c4 b4 a5 f5 a5		        .word nt_sm_slash_rem, xt_um_slash_mod, z_um_slash_mod
>c4bb	75 6d 2f 6d 6f 64		        .text "um/mod"
.c4c1					nt_sm_slash_rem:
>c4c1	06 10				        .byte 6, UF
>c4c3	cf c4 d5 a0 fd a0		        .word nt_fm_slash_mod, xt_sm_slash_rem, z_sm_slash_rem
>c4c9	73 6d 2f 72 65 6d		        .text "sm/rem"
.c4cf					nt_fm_slash_mod:
>c4cf	06 10				        .byte 6, UF
>c4d1	dd c4 91 90 c7 90		        .word nt_slash, xt_fm_slash_mod, z_fm_slash_mod
>c4d7	66 6d 2f 6d 6f 64		        .text "fm/mod"
.c4dd					nt_slash:
>c4dd	01 10				        .byte 1, UF
>c4df	e6 c4 fc 9f 18 a0		        .word nt_slash_mod, xt_slash, z_slash
>c4e5	2f				        .text "/"
.c4e6					nt_slash_mod:
>c4e6	04 10				        .byte 4, UF
>c4e8	f2 c4 01 a0 18 a0		        .word nt_mod, xt_slash_mod, z_slash_mod
>c4ee	2f 6d 6f 64			        .text "/mod"
.c4f2					nt_mod:
>c4f2	03 10				        .byte 3, UF
>c4f4	fd c4 b9 95 c1 95		        .word nt_star_slash_mod, xt_mod, z_mod
>c4fa	6d 6f 64			        .text "mod"
.c4fd					nt_star_slash_mod:
>c4fd	05 10				        .byte 5, UF
>c4ff	0a c5 6c a1 7b a1		        .word nt_star_slash, xt_star_slash_mod, z_star_slash_mod
>c505	2a 2f 6d 6f 64			        .text "*/mod"
.c50a					nt_star_slash:
>c50a	02 10				        .byte 2, UF
>c50c	14 c5 63 a1 6b a1		        .word nt_backslash, xt_star_slash, z_star_slash
>c512	2a 2f				        .text "*/"
.c514					nt_backslash:
>c514	01 04				        .byte 1, IM
>c516	1d c5 7e 83 86 83		        .word nt_move, xt_backslash, z_backslash
>c51c	5c				        .byte $5c
.c51d					nt_move:
>c51d	04 18				        .byte 4, NN+UF
>c51f	29 c5 c2 95 e0 95		        .word nt_cmove_up, xt_move, z_move
>c525	6d 6f 76 65			        .text "move"
.c529					nt_cmove_up:
>c529	06 10				        .byte 6, UF
>c52b	37 c5 d4 86 0e 87		        .word nt_cmove, xt_cmove_up, z_cmove_up
>c531	63 6d 6f 76 65 3e		        .text "cmove>"
.c537					nt_cmove:
>c537	05 10				        .byte 5, UF
>c539	44 c5 99 86 d3 86		        .word nt_pad, xt_cmove, z_cmove
>c53f	63 6d 6f 76 65			        .text "cmove"
.c544					nt_pad:
>c544	03 00				        .byte 3, 0
>c546	4f c5 a1 98 b0 98		        .word nt_cleave, xt_pad, z_pad
>c54c	70 61 64			        .text "pad"
.c54f					nt_cleave:
>c54f	06 10				        .byte 6, UF
>c551	5d c5 4c 86 98 86		        .word nt_hexstore, xt_cleave, z_cleave
>c557	63 6c 65 61 76 65		        .text "cleave"
.c55d					nt_hexstore:
>c55d	08 10				        .byte 8, UF
>c55f	6d c5 84 91 d6 91		        .word nt_within, xt_hexstore, z_hexstore
>c565	68 65 78 73 74 6f 72 65		        .text "hexstore"
.c56d					nt_within:
>c56d	06 10				        .byte 6, UF
>c56f	7b c5 9f a6 b4 a6		        .word nt_to_in, xt_within, z_within
>c575	77 69 74 68 69 6e		        .text "within"
.c57b					nt_to_in:
>c57b	03 00				        .byte 3, 0
>c57d	86 c5 ac a2 b6 a2		        .word nt_less_number_sign, xt_to_in, z_to_in
>c583	3e 69 6e			        .text ">in"
.c586					nt_less_number_sign:
>c586	02 00				        .byte 2, 0
>c588	90 c5 5a 93 67 93		        .word nt_number_sign, xt_less_number_sign, z_less_number_sign
>c58e	3c 23				        .text "<#"
.c590					nt_number_sign:
>c590	01 10				        .byte 1, UF
>c592	99 c5 87 97 bb 97		        .word nt_number_sign_s, xt_number_sign, z_number_sign
>c598	23				        .text "#"
.c599					nt_number_sign_s:
>c599	02 10				        .byte 2, UF
>c59b	a3 c5 de 97 ee 97		        .word nt_number_sign_greater, xt_number_sign_s, z_number_sign_s
>c5a1	23 73				        .text "#s"
.c5a3					nt_number_sign_greater:
>c5a3	02 10				        .byte 2, UF
>c5a5	ad c5 bc 97 dd 97		        .word nt_hold, xt_number_sign_greater, z_number_sign_greater
>c5ab	23 3e				        .text "#>"
.c5ad					nt_hold:
>c5ad	04 10				        .byte 4, UF
>c5af	b9 c5 d7 91 e8 91		        .word nt_sign, xt_hold, z_hold
>c5b5	68 6f 6c 64			        .text "hold"
.c5b9					nt_sign:
>c5b9	04 10				        .byte 4, UF
>c5bb	c5 c5 e7 9f fb 9f		        .word nt_output, xt_sign, z_sign
>c5c1	73 69 67 6e			        .text "sign"
.c5c5					nt_output:
>c5c5	06 00				        .byte 6, 0
>c5c7	d3 c5 88 98 92 98		        .word nt_input, xt_output, z_output
>c5cd	6f 75 74 70 75 74		        .text "output"
.c5d3					nt_input:
>c5d3	05 00				        .byte 5, 0
>c5d5	e0 c5 57 92 61 92		        .word nt_cr, xt_input, z_input
>c5db	69 6e 70 75 74			        .text "input"
.c5e0					nt_cr:
>c5e0	02 00				        .byte 2, 0
>c5e2	ea c5 63 89 68 89		        .word nt_page, xt_cr, z_cr
>c5e8	63 72				        .text "cr"
.c5ea					nt_page:
>c5ea	04 00				        .byte 4, 0
>c5ec	f6 c5 b1 98 ce 98		        .word nt_at_xy, xt_page, z_page
>c5f2	70 61 67 65			        .text "page"
.c5f6					nt_at_xy:
>c5f6	05 10				        .byte 5, UF
>c5f8	03 c6 50 83 7d 83		        .word nt_marker, xt_at_xy, z_at_xy
>c5fe	61 74 2d 78 79			        .text "at-xy"
.c603					nt_marker:
>c603	06 04				        .byte 6, IM
>c605	11 c6 a9 94 e6 94		        .word nt_words, xt_marker, z_marker
>c60b	6d 61 72 6b 65 72		        .text "marker"
.c611					nt_words:
>c611	05 00				        .byte 5, 0
>c613	1e c6 12 a7 6e a7		        .word nt_wordsize, xt_words, z_words
>c619	77 6f 72 64 73			        .text "words"
.c61e					nt_wordsize:
>c61e	08 10				        .byte 8, UF
>c620	2e c6 6f a7 8f a7		        .word nt_aligned, xt_wordsize, z_wordsize
>c626	77 6f 72 64 73 69 7a 65		        .text "wordsize"
.c62e					nt_aligned:
>c62e	07 00				        .byte 7, 0
>c630	3d c6 aa 82 aa 82		        .word nt_align, xt_align, z_align
>c636	61 6c 69 67 6e 65 64		        .text "aligned"
.c63d					nt_align:
>c63d	05 00				        .byte 5, 0
>c63f	4a c6 aa 82 aa 82		        .word nt_bell, xt_align, z_align
>c645	61 6c 69 67 6e			        .text "align"
.c64a					nt_bell:
>c64a	04 00				        .byte 4, 0
>c64c	56 c6 94 83 99 83		        .word nt_dump, xt_bell, z_bell
>c652	62 65 6c 6c			        .text "bell"
.c656					nt_dump:
>c656	04 10				        .byte 4, UF
>c658	62 c6 34 8d 9a 8d		        .word nt_dot_s, xt_dump, z_dump
>c65e	64 75 6d 70			        .text "dump"
.c662					nt_dot_s:
>c662	02 00				        .byte 2, 0
>c664	6c c6 a0 8c e3 8c		        .word nt_disasm, xt_dot_s, z_dot_s
>c66a	2e 73				        .text ".s"
.c66c					nt_disasm:
>c66c	06 10				        .byte 6, UF
>c66e	7a c6 3a 8b 40 8b		        .word nt_compare, xt_disasm, z_disasm
>c674	64 69 73 61 73 6d		        .text "disasm"
.c67a					nt_compare:
>c67a	07 10				        .byte 7, UF
>c67c	89 c6 88 87 ec 87		        .word nt_search, xt_compare, z_compare
>c682	63 6f 6d 70 61 72 65		        .text "compare"
.c689					nt_search:
>c689	06 18				        .byte 6, UF+NN
>c68b	97 c6 e9 9e 87 9f		        .word +, xt_search, z_search
>c691	73 65 61 72 63 68		        .text "search"
.c697					+
.c697					nt_environment_q:
>c697	0c 10				        .byte 12, UF
>c699	ab c6 15 8e 91 8e		        .word +, xt_environment_q, z_environment_q
>c69f	65 6e 76 69 72 6f 6e 6d		        .text "environment?"
>c6a7	65 6e 74 3f
.c6ab					+
.c6ab					nt_find:
>c6ab	04 10				        .byte 4, UF
>c6ad	b7 c6 93 8f da 8f		        .word nt_word, xt_find, z_find
>c6b3	66 69 6e 64			        .text "find"
.c6b7					nt_word:
>c6b7	04 10				        .byte 4, UF
>c6b9	c3 c6 b5 a6 fa a6		        .word nt_paren, xt_word, z_word
>c6bf	77 6f 72 64			        .text "word"
.c6c3					nt_paren:
>c6c3	01 04				        .byte 1, IM
>c6c5	cc c6 cf 98 de 98		        .word nt_dot_paren, xt_paren, z_paren
>c6cb	28				        .text "("
.c6cc					nt_dot_paren:
>c6cc	02 04				        .byte 2, IM
>c6ce	d6 c6 58 8c 66 8c		        .word nt_if, xt_dot_paren, z_dot_paren
>c6d4	2e 28				        .text ".("
.c6d6					nt_if:
>c6d6	02 0d				        .byte 2, IM+CO+NN
>c6d8	e0 c6 03 92 13 92		        .word nt_then, xt_if, z_if
>c6de	69 66				        .text "if"
.c6e0					nt_then:
>c6e0	04 0d				        .byte 4, IM+CO+NN
>c6e2	ec c6 bc a1 c5 a1		        .word nt_else, xt_then, z_then
>c6e8	74 68 65 6e			        .text "then"
.c6ec					nt_else:
>c6ec	04 0d				        .byte 4, IM+CO+NN
>c6ee	f8 c6 c1 8d da 8d		        .word nt_repeat, xt_else, z_else
>c6f4	65 6c 73 65			        .text "else"
.c6f8					nt_repeat:
>c6f8	06 0d				        .byte 6, IM+CO+NN
>c6fa	06 c7 3a 9b 46 9b		        .word nt_until, xt_repeat, z_repeat
>c700	72 65 70 65 61 74		        .text "repeat"
.c706					nt_until:
>c706	05 0d				        .byte 5, IM+CO+NN
>c708	13 c7 43 a6 4d a6		        .word nt_while, xt_until, z_until
>c70e	75 6e 74 69 6c			        .text "until"
.c713					nt_while:
>c713	05 0d				        .byte 5, IM+CO+NN
>c715	20 c7 8b a6 9e a6		        .word nt_case, xt_while, z_while
>c71b	77 68 69 6c 65			        .text "while"
.c720					nt_case:
>c720	04 0d				        .byte 4, IM+CO+NN
>c722	2c c7 a2 a7 a8 a7		        .word nt_of, xt_case, z_case    ; shares code with ZERO
>c728	63 61 73 65			        .text "case"
.c72c					nt_of:
>c72c	02 0d				        .byte 2, IM+CO+NN
>c72e	36 c7 ef 97 07 98		        .word nt_endof, xt_of, z_of
>c734	6f 66				        .text "of"
.c736					nt_endof:
>c736	05 0d				        .byte 5, IM+CO+NN
>c738	43 c7 c1 8d da 8d		        .word nt_endcase, xt_endof, z_endof ; shares code with ELSE
>c73e	65 6e 64 6f 66			        .text "endof"
.c743					nt_endcase:
>c743	07 0d				        .byte 7, IM+CO+NN
>c745	52 c7 00 8e 14 8e		        .word nt_defer_fetch, xt_endcase, z_endcase
>c74b	65 6e 64 63 61 73 65		        .text "endcase"
.c752					nt_defer_fetch:
>c752	06 00				        .byte 6, 0
>c754	60 c7 df 8a e5 8a		        .word nt_defer_store, xt_defer_fetch, z_defer_fetch
>c75a	64 65 66 65 72 40		        .text "defer@"
.c760					nt_defer_store:
>c760	06 00				        .byte 6, 0
>c762	6e c7 e6 8a ec 8a		        .word nt_is, xt_defer_store, z_defer_store
>c768	64 65 66 65 72 21		        .text "defer!"
.c76e					nt_is:
>c76e	02 04				        .byte 2, IM
>c770	78 c7 fb 92 13 93		        .word nt_action_of, xt_is, z_is
>c776	69 73				        .text "is"
.c778					nt_action_of:
>c778	09 04				        .byte 9, IM
>c77a	89 c7 70 82 88 82		        .word nt_useraddr, xt_action_of, z_action_of
>c780	61 63 74 69 6f 6e 2d 6f		        .text "action-of"
>c788	66
.c789					nt_useraddr:
>c789	08 00				        .byte 8, 0
>c78b	99 c7 67 a6 71 a6		        .word nt_buffer_colon, xt_useraddr, z_useraddr
>c791	75 73 65 72 61 64 64 72		        .text "useraddr"
.c799					nt_buffer_colon:
>c799	07 00				        .byte 7, 0
>c79b	a8 c7 e6 85 ec 85		        .word +, xt_buffer_colon, z_buffer_colon
>c7a1	62 75 66 66 65 72 3a		        .text "buffer:"
.c7a8					+
.c7a8					nt_buffstatus:
>c7a8	0a 00				        .byte 10, 0
>c7aa	ba c7 ed 85 fc 85		        .word nt_buffblocknum, xt_buffstatus, z_buffstatus
>c7b0	62 75 66 66 73 74 61 74		        .text "buffstatus"
>c7b8	75 73
.c7ba					nt_buffblocknum:
>c7ba	0c 00				        .byte 12, 0
>c7bc	ce c7 a5 85 b4 85		        .word nt_blkbuffer, xt_buffblocknum, z_buffblocknum
>c7c2	62 75 66 66 62 6c 6f 63		        .text "buffblocknum"
>c7ca	6b 6e 75 6d
.c7ce					nt_blkbuffer:
>c7ce	09 00				        .byte 9, 0
>c7d0	df c7 b3 83 c0 83		        .word nt_scr, xt_blkbuffer, z_blkbuffer
>c7d6	62 6c 6b 62 75 66 66 65		        .text "blkbuffer"
>c7de	72
.c7df					nt_scr:
>c7df	03 00				        .byte 3, 0
>c7e1	ea c7 d9 9e e8 9e		        .word nt_blk, xt_scr, z_scr
>c7e7	73 63 72			        .text "scr"
.c7ea					nt_blk:
>c7ea	03 00				        .byte 3, 0
>c7ec	f5 c7 a3 83 b2 83		        .word nt_block_write, xt_blk, z_blk
>c7f2	62 6c 6b			        .text "blk"
.c7f5					nt_block_write:
>c7f5	0b 08				        .byte 11, NN ; Deferred words need the HC (Code Field) flag.
>c7f7	08 c8 60 85 6e 85		        .word nt_block_write_vector, xt_block_write, z_block_write
>c7fd	62 6c 6f 63 6b 2d 77 72		        .text "block-write"
>c805	69 74 65
.c808					nt_block_write_vector:
>c808	12 08				        .byte 18, NN ; Deferred words need the HC (Code Field) flag.
>c80a	22 c8 6e 85 7d 85		        .word nt_block_read, xt_block_write_vector, z_block_write_vector
>c810	62 6c 6f 63 6b 2d 77 72		        .text "block-write-vector"
>c818	69 74 65 2d 76 65 63 74 6f 72
.c822					nt_block_read:
>c822	0a 28				        .byte 10, HC+NN ; Deferred words need the HC (Code Field) flag.
>c824	34 c8 3d 85 4b 85		        .word nt_block_read_vector, xt_block_read, z_block_read
>c82a	62 6c 6f 63 6b 2d 72 65		        .text "block-read"
>c832	61 64
.c834					nt_block_read_vector:
>c834	11 28				        .byte 17, HC+NN ; Deferred words need the HC (Code Field) flag.
>c836	4d c8 4b 85 5a 85		        .word nt_save_buffers, xt_block_read_vector, z_block_read_vector
>c83c	62 6c 6f 63 6b 2d 72 65		        .text "block-read-vector"
>c844	61 64 2d 76 65 63 74 6f 72
.c84d					nt_save_buffers:
>c84d	0c 00				        .byte 12, 0
>c84f	61 c8 be 9e d8 9e		        .word nt_block, xt_save_buffers, z_save_buffers
>c855	73 61 76 65 2d 62 75 66		        .text "save-buffers"
>c85d	66 65 72 73
.c861					nt_block:
>c861	05 00				        .byte 5, 0
>c863	6e c8 c1 83 13 84		        .word nt_update, xt_block, z_block
>c869	62 6c 6f 63 6b			        .text "block"
.c86e					nt_update:
>c86e	06 00				        .byte 6, 0
>c870	7c c8 5e a6 66 a6		        .word nt_buffer, xt_update, z_update
>c876	75 70 64 61 74 65		        .text "update"
.c87c					nt_buffer:
>c87c	06 00				        .byte 6, 0
>c87e	8a c8 b5 85 e5 85		        .word nt_empty_buffers, xt_buffer, z_buffer
>c884	62 75 66 66 65 72		        .text "buffer"
.c88a					nt_empty_buffers:
>c88a	0d 00				        .byte 13, 0
>c88c	9f c8 f9 8d ff 8d		        .word nt_flush, xt_empty_buffers, z_empty_buffers
>c892	65 6d 70 74 79 2d 62 75		        .text "empty-buffers"
>c89a	66 66 65 72 73
.c89f					nt_flush:
>c89f	05 00				        .byte 5, 0
>c8a1	ac c8 87 90 90 90		        .word nt_load, xt_flush, z_flush
>c8a7	66 6c 75 73 68			        .text "flush"
.c8ac					nt_load:
>c8ac	04 10				        .byte 4, UF
>c8ae	b8 c8 b7 93 fa 93		        .word nt_thru, xt_load, z_load
>c8b4	6c 6f 61 64			        .text "load"
.c8b8					nt_thru:
>c8b8	04 10				        .byte 4, UF
>c8ba	c4 c8 c6 a1 0a a2		        .word nt_list, xt_thru, z_thru
>c8c0	74 68 72 75			        .text "thru"
.c8c4					nt_list:
>c8c4	04 10				        .byte 4, UF
>c8c6	d0 c8 7d 93 89 93		        .word +, xt_list, z_list
>c8cc	6c 69 73 74			        .text "list"
.c8d0					+
.c8d0					nt_block_ramdrive_init:
>c8d0	13 10				        .byte 19, UF
>c8d2	eb c8 14 84 3c 85		        .word +, xt_block_ramdrive_init, z_block_ramdrive_init
>c8d8	62 6c 6f 63 6b 2d 72 61		        .text "block-ramdrive-init"
>c8e0	6d 64 72 69 76 65 2d 69 6e 69 74
.c8eb					+
.c8eb					nt_definitions:
>c8eb	0b 00				        .byte 11, 0
>c8ed	fe c8 ed 8a f5 8a		        .word nt_wordlist, xt_definitions, z_definitions
>c8f3	64 65 66 69 6e 69 74 69		        .text "definitions"
>c8fb	6f 6e 73
.c8fe					nt_wordlist:
>c8fe	08 00				        .byte 8, 0
>c900	0e c9 fb a6 11 a7		        .word nt_search_wordlist, xt_wordlist, z_wordlist
>c906	77 6f 72 64 6c 69 73 74		        .text "wordlist"
.c90e					nt_search_wordlist:
>c90e	0f 10				        .byte 15, UF
>c910	25 c9 a0 9b 80 9c		        .word nt_set_current, xt_search_wordlist, z_search_wordlist
>c916	73 65 61 72 63 68 2d 77		        .text "search-wordlist"
>c91e	6f 72 64 6c 69 73 74
.c925					nt_set_current:
>c925	0b 10				        .byte 11, UF
>c927	38 c9 0f 9d 1a 9d		        .word nt_get_current, xt_set_current, z_set_current
>c92d	73 65 74 2d 63 75 72 72		        .text "set-current"
>c935	65 6e 74
.c938					nt_get_current:
>c938	0b 00				        .byte 11, 0
>c93a	4b c9 29 91 33 91		        .word nt_set_order, xt_get_current, z_get_current
>c940	67 65 74 2d 63 75 72 72		        .text "get-current"
>c948	65 6e 74
.c94b					nt_set_order:
>c94b	09 00				        .byte 9, 0
>c94d	5c c9 1b 9d 4e 9d		        .word nt_get_order, xt_set_order, z_set_order
>c953	73 65 74 2d 6f 72 64 65		        .text "set-order"
>c95b	72
.c95c					nt_get_order:
>c95c	09 00				        .byte 9, 0
>c95e	6d c9 34 91 5c 91		        .word nt_root_wordlist, xt_get_order, z_get_order
>c964	67 65 74 2d 6f 72 64 65		        .text "get-order"
>c96c	72
.c96d					nt_root_wordlist:
>c96d	0d 00				        .byte 13, 0
>c96f	82 c9 4e 9b 56 9b		        .word +, xt_root_wordlist, z_root_wordlist
>c975	72 6f 6f 74 2d 77 6f 72		        .text "root-wordlist"
>c97d	64 6c 69 73 74
.c982					+
.c982					nt_assembler_wordlist:
>c982	12 00				        .byte 18, 0
>c984	9c c9 a1 a3 a9 a3		        .word +, xt_assembler_wordlist, z_assembler_wordlist
>c98a	61 73 73 65 6d 62 6c 65		        .text "assembler-wordlist"
>c992	72 2d 77 6f 72 64 6c 69 73 74
.c99c					+
.c99c					nt_editor_wordlist:
>c99c	0f 00				        .byte 15, 0
>c99e	b3 c9 08 98 10 98		        .word +, xt_editor_wordlist, z_editor_wordlist
>c9a4	65 64 69 74 6f 72 2d 77		        .text "editor-wordlist"
>c9ac	6f 72 64 6c 69 73 74
.c9b3					+
.c9b3					nt_forth_wordlist:
>c9b3	0e 00				        .byte 14, 0
>c9b5	c9 c9 a2 a7 a8 a7		        .word nt_only, xt_forth_wordlist, z_forth_wordlist
>c9bb	66 6f 72 74 68 2d 77 6f		        .text "forth-wordlist"
>c9c3	72 64 6c 69 73 74
.c9c9					nt_only:
>c9c9	04 00				        .byte 4, 0
>c9cb	d5 c9 27 98 32 98		        .word nt_also, xt_only, z_only
>c9d1	6f 6e 6c 79			        .text "only"
.c9d5					nt_also:
>c9d5	04 00				        .byte 4, 0
>c9d7	e1 c9 20 83 2f 83		        .word nt_previous, xt_also, z_also
>c9dd	61 6c 73 6f			        .text "also"
.c9e1					nt_previous:
>c9e1	08 00				        .byte 8, 0
>c9e3	f1 c9 55 9a 61 9a		        .word nt_to_order, xt_previous, z_previous
>c9e9	70 72 65 76 69 6f 75 73		        .text "previous"
.c9f1					nt_to_order:
>c9f1	06 00				        .byte 6, 0
>c9f3	ff c9 57 a3 69 a3		        .word nt_order, xt_to_order, z_to_order
>c9f9	3e 6f 72 64 65 72		        .text ">order"
.c9ff					nt_order:
>c9ff	05 00				        .byte 5, 0
>ca01	0c ca 45 98 6f 98		        .word nt_forth, xt_order, z_order
>ca07	6f 72 64 65 72			        .text "order"
.ca0c					nt_forth:
>ca0c	05 00				        .byte 5, 0
>ca0e	19 ca c8 90 ce 90		        .word +, xt_forth, z_forth
>ca14	66 6f 72 74 68			        .text "forth"
.ca19					+
>ca19	03 08				nt_see: .byte 3, NN
>ca1b	24 ca 81 9c 0e 9d		        .word +, xt_see, z_see
>ca21	73 65 65			        .text "see"
.ca24					+
.ca24					nt_ed:
>ca24	02 08				        .byte 2, NN
>ca26	2e ca bd 8d c0 8d		        .word +, xt_ed, z_ed
>ca2c	65 64				        .text "ed"
.ca2e					+
.ca2e					nt_cold:
>ca2e	04 00				        .byte 4, 0
>ca30	3a ca 00 80 c5 80		        .word nt_bye, xt_cold, z_cold
>ca36	63 6f 6c 64			        .text "cold"
.ca3a					nt_bye:
>ca3a	03				        .byte 3         ; length of word strings
>ca3b	00				        .byte 0         ; status byte
>ca3c	00 00				        .word 0000      ; next word in Dictionary, 0000 signals end
>ca3e	fd 85				        .word xt_bye    ; start of code block (xt of this word)
>ca40	00 86				        .word z_bye     ; end of code (RTS)
>ca42	62 79 65			        .text "bye"     ; word name, always lower case, not zero-terminated
.ca45					root_dictionary_start:
.ca45					nt_root_set_order:
>ca45	09 00				        .byte 9, 0
>ca47	56 ca 1b 9d 4e 9d		        .word nt_root_forth, xt_set_order, z_set_order
>ca4d	73 65 74 2d 6f 72 64 65		        .text "set-order"
>ca55	72
.ca56					nt_root_forth:
>ca56	05 00				        .byte 5, 0
>ca58	63 ca c8 90 ce 90		        .word nt_root_forth_wordlist, xt_forth, z_forth
>ca5e	66 6f 72 74 68			        .text "forth"
.ca63					nt_root_forth_wordlist:
>ca63	0e 00				        .byte 14, 0
>ca65	79 ca a2 a7 a8 a7		        .word nt_root_words, xt_forth_wordlist, z_forth_wordlist
>ca6b	66 6f 72 74 68 2d 77 6f		        .text "forth-wordlist"
>ca73	72 64 6c 69 73 74
.ca79					nt_root_words:
>ca79	05 00				        .byte 5, 0
>ca7b	00 00 12 a7 6e a7		        .word 0000, xt_words, z_words
>ca81	77 6f 72 64 73			        .text "words"
.ca86					editor_dictionary_start:
.ca86					nt_editor_o:
>ca86	01 00				        .byte 1, 0
>ca88	8f ca d5 a8 1a a9		        .word nt_editor_line, xt_editor_o, z_editor_o
>ca8e	6f				        .text "o"
.ca8f					nt_editor_line:
>ca8f	04 10				        .byte 4, UF
>ca91	9b ca bc a8 d4 a8		        .word nt_editor_l, xt_editor_line, z_editor_line
>ca97	6c 69 6e 65			        .text "line"
.ca9b					nt_editor_l:
>ca9b	01 00				        .byte 1, 0
>ca9d	a4 ca 40 a8 bb a8		        .word nt_editor_el, xt_editor_l, z_editor_l
>caa3	6c				        .text "l"
.caa4					nt_editor_el:
>caa4	02 00				        .byte 2, 0
>caa6	ae ca 2e a8 3f a8		        .word nt_editor_erase_screen, xt_editor_el, z_editor_el
>caac	65 6c				        .text "el"
.caae					nt_editor_erase_screen:
>caae	0c 00				        .byte 12, 0
>cab0	c2 ca 1c a8 2d a8		        .word nt_editor_enter_screen, xt_editor_erase_screen, z_editor_erase_screen
>cab6	65 72 61 73 65 2d 73 63		        .text "erase-screen"
>cabe	72 65 65 6e
.cac2					nt_editor_enter_screen:
>cac2	0c 00				        .byte 12, 0
>cac4	00 00 00 a8 1b a8		        .word 0000, xt_editor_enter_screen, z_editor_enter_screen
>caca	65 6e 74 65 72 2d 73 63		        .text "enter-screen"
>cad2	72 65 65 6e
.cad6					assembler_dictionary_start:
.cad6					nt_asm_adc_h:
>cad6	05 0c						.byte 5, IM+NN
>cad8	e3 ca				                .word nt_asm_adc_x
>cada	1b a9 20 a9					.word xt_asm_adc_h, z_asm_adc_h
>cade	61 64 63 2e 23					.text "adc.#"
.cae3					nt_asm_adc_x:
>cae3	05 0c						.byte 5, IM+NN
>cae5	f0 ca				                .word nt_asm_adc_y
>cae7	20 a9 25 a9					.word xt_asm_adc_x, z_asm_adc_x
>caeb	61 64 63 2e 78					.text "adc.x"
.caf0					nt_asm_adc_y:
>caf0	05 0c						.byte 5, IM+NN
>caf2	fd ca				                .word nt_asm_adc_z
>caf4	25 a9 2a a9					.word xt_asm_adc_y, z_asm_adc_y
>caf8	61 64 63 2e 79					.text "adc.y"
.cafd					nt_asm_adc_z:
>cafd	05 0c						.byte 5, IM+NN
>caff	0a cb				                .word nt_asm_adc_zi
>cb01	2a a9 2f a9					.word xt_asm_adc_z, z_asm_adc_z
>cb05	61 64 63 2e 7a					.text "adc.z"
.cb0a					nt_asm_adc_zi:
>cb0a	06 0c						.byte 6, IM+NN
>cb0c	18 cb				                .word nt_asm_adc_ziy
>cb0e	2f a9 34 a9					.word xt_asm_adc_zi, z_asm_adc_zi
>cb12	61 64 63 2e 7a 69				.text "adc.zi"
.cb18					nt_asm_adc_ziy:
>cb18	07 0c						.byte 7, IM+NN
>cb1a	27 cb				                .word nt_asm_adc_zx
>cb1c	34 a9 39 a9					.word xt_asm_adc_ziy, z_asm_adc_ziy
>cb20	61 64 63 2e 7a 69 79				.text "adc.ziy"
.cb27					nt_asm_adc_zx:
>cb27	06 0c						.byte 6, IM+NN
>cb29	35 cb				                .word nt_asm_adc_zxi
>cb2b	39 a9 3e a9					.word xt_asm_adc_zx, z_asm_adc_zx
>cb2f	61 64 63 2e 7a 78				.text "adc.zx"
.cb35					nt_asm_adc_zxi:
>cb35	07 0c						.byte 7, IM+NN
>cb37	44 cb				                .word nt_asm_and
>cb39	3e a9 43 a9					.word xt_asm_adc_zxi, z_asm_adc_zxi
>cb3d	61 64 63 2e 7a 78 69				.text "adc.zxi"
.cb44					nt_asm_and:
>cb44	04 0c						.byte 4, IM+NN
>cb46	50 cb				                .word nt_asm_and_h
>cb48	43 a9 48 a9					.word xt_asm_and, z_asm_and
>cb4c	61 6e 64 2e					.text "and."
.cb50					nt_asm_and_h:
>cb50	05 0c						.byte 5, IM+NN
>cb52	5d cb				                .word nt_asm_and_x
>cb54	48 a9 4d a9					.word xt_asm_and_h, z_asm_and_h
>cb58	61 6e 64 2e 23					.text "and.#"
.cb5d					nt_asm_and_x:
>cb5d	05 0c						.byte 5, IM+NN
>cb5f	6a cb				                .word nt_asm_and_y
>cb61	4d a9 52 a9					.word xt_asm_and_x, z_asm_and_x
>cb65	61 6e 64 2e 78					.text "and.x"
.cb6a					nt_asm_and_y:
>cb6a	05 0c						.byte 5, IM+NN
>cb6c	77 cb				                .word nt_asm_and_z
>cb6e	52 a9 57 a9					.word xt_asm_and_y, z_asm_and_y
>cb72	61 6e 64 2e 79					.text "and.y"
.cb77					nt_asm_and_z:
>cb77	05 0c						.byte 5, IM+NN
>cb79	84 cb				                .word nt_asm_and_zi
>cb7b	57 a9 5c a9					.word xt_asm_and_z, z_asm_and_z
>cb7f	61 6e 64 2e 7a					.text "and.z"
.cb84					nt_asm_and_zi:
>cb84	06 0c						.byte 6, IM+NN
>cb86	92 cb				                .word nt_asm_and_ziy
>cb88	5c a9 61 a9					.word xt_asm_and_zi, z_asm_and_zi
>cb8c	61 6e 64 2e 7a 69				.text "and.zi"
.cb92					nt_asm_and_ziy:
>cb92	07 0c						.byte 7, IM+NN
>cb94	a1 cb				                .word nt_asm_and_zx
>cb96	61 a9 66 a9					.word xt_asm_and_ziy, z_asm_and_ziy
>cb9a	61 6e 64 2e 7a 69 79				.text "and.ziy"
.cba1					nt_asm_and_zx:
>cba1	06 0c						.byte 6, IM+NN
>cba3	af cb				                .word nt_asm_and_zxi
>cba5	66 a9 6b a9					.word xt_asm_and_zx, z_asm_and_zx
>cba9	61 6e 64 2e 7a 78				.text "and.zx"
.cbaf					nt_asm_and_zxi:
>cbaf	07 0c						.byte 7, IM+NN
>cbb1	be cb				                .word nt_asm_asl
>cbb3	6b a9 70 a9					.word xt_asm_and_zxi, z_asm_and_zxi
>cbb7	61 6e 64 2e 7a 78 69				.text "and.zxi"
.cbbe					nt_asm_asl:
>cbbe	03 0c						.byte 3, IM+NN
>cbc0	c9 cb				                .word nt_asm_asl_a
>cbc2	70 a9 75 a9					.word xt_asm_asl, z_asm_asl
>cbc6	61 73 6c					.text "asl"
.cbc9					nt_asm_asl_a:
>cbc9	05 0c						.byte 5, IM+NN
>cbcb	d6 cb				                .word nt_asm_asl_x
>cbcd	75 a9 7a a9					.word xt_asm_asl_a, z_asm_asl_a
>cbd1	61 73 6c 2e 61					.text "asl.a"
.cbd6					nt_asm_asl_x:
>cbd6	05 0c						.byte 5, IM+NN
>cbd8	e3 cb				                .word nt_asm_asl_z
>cbda	7a a9 7f a9					.word xt_asm_asl_x, z_asm_asl_x
>cbde	61 73 6c 2e 78					.text "asl.x"
.cbe3					nt_asm_asl_z:
>cbe3	05 0c						.byte 5, IM+NN
>cbe5	f0 cb				                .word nt_asm_asl_zx
>cbe7	7f a9 84 a9					.word xt_asm_asl_z, z_asm_asl_z
>cbeb	61 73 6c 2e 7a					.text "asl.z"
.cbf0					nt_asm_asl_zx:
>cbf0	06 0c						.byte 6, IM+NN
>cbf2	fe cb				                .word nt_asm_bcc
>cbf4	84 a9 89 a9					.word xt_asm_asl_zx, z_asm_asl_zx
>cbf8	61 73 6c 2e 7a 78				.text "asl.zx"
.cbfe					nt_asm_bcc:
>cbfe	03 0c						.byte 3, IM+NN
>cc00	09 cc				                .word nt_asm_bcs
>cc02	89 a9 8e a9					.word xt_asm_bcc, z_asm_bcc
>cc06	62 63 63					.text "bcc"
.cc09					nt_asm_bcs:
>cc09	03 0c						.byte 3, IM+NN
>cc0b	14 cc				                .word nt_asm_beq
>cc0d	8e a9 95 a9					.word xt_asm_bcs, z_asm_bcs
>cc11	62 63 73					.text "bcs"
.cc14					nt_asm_beq:
>cc14	03 0c						.byte 3, IM+NN
>cc16	1f cc				                .word nt_asm_bit
>cc18	95 a9 9a a9					.word xt_asm_beq, z_asm_beq
>cc1c	62 65 71					.text "beq"
.cc1f					nt_asm_bit:
>cc1f	03 0c						.byte 3, IM+NN
>cc21	2a cc				                .word nt_asm_bit_h
>cc23	9a a9 9f a9					.word xt_asm_bit, z_asm_bit
>cc27	62 69 74					.text "bit"
.cc2a					nt_asm_bit_h:
>cc2a	05 0c						.byte 5, IM+NN
>cc2c	37 cc				                .word nt_asm_bit_x
>cc2e	9f a9 a4 a9					.word xt_asm_bit_h, z_asm_bit_h
>cc32	62 69 74 2e 23					.text "bit.#"
.cc37					nt_asm_bit_x:
>cc37	05 0c						.byte 5, IM+NN
>cc39	44 cc				                .word nt_asm_bit_z
>cc3b	a4 a9 a9 a9					.word xt_asm_bit_x, z_asm_bit_x
>cc3f	62 69 74 2e 78					.text "bit.x"
.cc44					nt_asm_bit_z:
>cc44	05 0c						.byte 5, IM+NN
>cc46	51 cc				                .word nt_asm_bit_zx
>cc48	a9 a9 ae a9					.word xt_asm_bit_z, z_asm_bit_z
>cc4c	62 69 74 2e 7a					.text "bit.z"
.cc51					nt_asm_bit_zx:
>cc51	06 0c						.byte 6, IM+NN
>cc53	5f cc				                .word nt_asm_bmi
>cc55	ae a9 b3 a9					.word xt_asm_bit_zx, z_asm_bit_zx
>cc59	62 69 74 2e 7a 78				.text "bit.zx"
.cc5f					nt_asm_bmi:
>cc5f	03 0c						.byte 3, IM+NN
>cc61	6a cc				                .word nt_asm_bne
>cc63	b3 a9 b8 a9					.word xt_asm_bmi, z_asm_bmi
>cc67	62 6d 69					.text "bmi"
.cc6a					nt_asm_bne:
>cc6a	03 0c						.byte 3, IM+NN
>cc6c	75 cc				                .word nt_asm_bpl
>cc6e	b8 a9 bd a9					.word xt_asm_bne, z_asm_bne
>cc72	62 6e 65					.text "bne"
.cc75					nt_asm_bpl:
>cc75	03 0c						.byte 3, IM+NN
>cc77	80 cc				                .word nt_asm_bra
>cc79	bd a9 c2 a9					.word xt_asm_bpl, z_asm_bpl
>cc7d	62 70 6c					.text "bpl"
.cc80					nt_asm_bra:
>cc80	03 0c						.byte 3, IM+NN
>cc82	8b cc				                .word nt_asm_brk
>cc84	c2 a9 c7 a9					.word xt_asm_bra, z_asm_bra
>cc88	62 72 61					.text "bra"
.cc8b					nt_asm_brk:
>cc8b	03 0c						.byte 3, IM+NN
>cc8d	96 cc				                .word nt_asm_bvc
>cc8f	c7 a9 cc a9					.word xt_asm_brk, z_asm_brk
>cc93	62 72 6b					.text "brk"
.cc96					nt_asm_bvc:
>cc96	03 0c						.byte 3, IM+NN
>cc98	a1 cc				                .word nt_asm_bvs
>cc9a	cc a9 d1 a9					.word xt_asm_bvc, z_asm_bvc
>cc9e	62 76 63					.text "bvc"
.cca1					nt_asm_bvs:
>cca1	03 0c						.byte 3, IM+NN
>cca3	ac cc				                .word nt_asm_clc
>cca5	d1 a9 d6 a9					.word xt_asm_bvs, z_asm_bvs
>cca9	62 76 73					.text "bvs"
.ccac					nt_asm_clc:
>ccac	03 0c						.byte 3, IM+NN
>ccae	b7 cc				                .word nt_asm_cld
>ccb0	d6 a9 db a9					.word xt_asm_clc, z_asm_clc
>ccb4	63 6c 63					.text "clc"
.ccb7					nt_asm_cld:
>ccb7	03 0c						.byte 3, IM+NN
>ccb9	c2 cc				                .word nt_asm_cli
>ccbb	db a9 e0 a9					.word xt_asm_cld, z_asm_cld
>ccbf	63 6c 64					.text "cld"
.ccc2					nt_asm_cli:
>ccc2	03 0c						.byte 3, IM+NN
>ccc4	cd cc				                .word nt_asm_clv
>ccc6	e0 a9 e5 a9					.word xt_asm_cli, z_asm_cli
>ccca	63 6c 69					.text "cli"
.cccd					nt_asm_clv:
>cccd	03 0c						.byte 3, IM+NN
>cccf	d8 cc				                .word nt_asm_cmp
>ccd1	e5 a9 ea a9					.word xt_asm_clv, z_asm_clv
>ccd5	63 6c 76					.text "clv"
.ccd8					nt_asm_cmp:
>ccd8	03 0c						.byte 3, IM+NN
>ccda	e3 cc				                .word nt_asm_cmp_h
>ccdc	ea a9 ef a9					.word xt_asm_cmp, z_asm_cmp
>cce0	63 6d 70					.text "cmp"
.cce3					nt_asm_cmp_h:
>cce3	05 0c						.byte 5, IM+NN
>cce5	f0 cc				                .word nt_asm_cmp_x
>cce7	ef a9 f4 a9					.word xt_asm_cmp_h, z_asm_cmp_h
>cceb	63 6d 70 2e 23					.text "cmp.#"
.ccf0					nt_asm_cmp_x:
>ccf0	05 0c						.byte 5, IM+NN
>ccf2	fd cc				                .word nt_asm_cmp_y
>ccf4	f4 a9 f9 a9					.word xt_asm_cmp_x, z_asm_cmp_x
>ccf8	63 6d 70 2e 78					.text "cmp.x"
.ccfd					nt_asm_cmp_y:
>ccfd	05 0c						.byte 5, IM+NN
>ccff	0a cd				                .word nt_asm_cmp_z
>cd01	f9 a9 fe a9					.word xt_asm_cmp_y, z_asm_cmp_y
>cd05	63 6d 70 2e 79					.text "cmp.y"
.cd0a					nt_asm_cmp_z:
>cd0a	05 0c						.byte 5, IM+NN
>cd0c	17 cd				                .word nt_asm_cmp_zi
>cd0e	fe a9 03 aa					.word xt_asm_cmp_z, z_asm_cmp_z
>cd12	63 6d 70 2e 7a					.text "cmp.z"
.cd17					nt_asm_cmp_zi:
>cd17	06 0c						.byte 6, IM+NN
>cd19	25 cd				                .word nt_asm_cmp_ziy
>cd1b	03 aa 08 aa					.word xt_asm_cmp_zi, z_asm_cmp_zi
>cd1f	63 6d 70 2e 7a 69				.text "cmp.zi"
.cd25					nt_asm_cmp_ziy:
>cd25	07 0c						.byte 7, IM+NN
>cd27	34 cd				                .word nt_asm_cmp_zx
>cd29	08 aa 0d aa					.word xt_asm_cmp_ziy, z_asm_cmp_ziy
>cd2d	63 6d 70 2e 7a 69 79				.text "cmp.ziy"
.cd34					nt_asm_cmp_zx:
>cd34	06 0c						.byte 6, IM+NN
>cd36	42 cd				                .word nt_asm_cmp_zxi
>cd38	0d aa 12 aa					.word xt_asm_cmp_zx, z_asm_cmp_zx
>cd3c	63 6d 70 2e 7a 78				.text "cmp.zx"
.cd42					nt_asm_cmp_zxi:
>cd42	07 0c						.byte 7, IM+NN
>cd44	51 cd				                .word nt_asm_cpx
>cd46	12 aa 17 aa					.word xt_asm_cmp_zxi, z_asm_cmp_zxi
>cd4a	63 6d 70 2e 7a 78 69				.text "cmp.zxi"
.cd51					nt_asm_cpx:
>cd51	03 0c						.byte 3, IM+NN
>cd53	5c cd				                .word nt_asm_cpx_h
>cd55	17 aa 1c aa					.word xt_asm_cpx, z_asm_cpx
>cd59	63 70 78					.text "cpx"
.cd5c					nt_asm_cpx_h:
>cd5c	05 0c						.byte 5, IM+NN
>cd5e	69 cd				                .word nt_asm_cpx_z
>cd60	1c aa 21 aa					.word xt_asm_cpx_h, z_asm_cpx_h
>cd64	63 70 78 2e 23					.text "cpx.#"
.cd69					nt_asm_cpx_z:
>cd69	05 0c						.byte 5, IM+NN
>cd6b	76 cd				                .word nt_asm_cpy
>cd6d	21 aa 26 aa					.word xt_asm_cpx_z, z_asm_cpx_z
>cd71	63 70 78 2e 7a					.text "cpx.z"
.cd76					nt_asm_cpy:
>cd76	03 0c						.byte 3, IM+NN
>cd78	81 cd				                .word nt_asm_cpy_h
>cd7a	26 aa 2d aa					.word xt_asm_cpy, z_asm_cpy
>cd7e	63 70 79					.text "cpy"
.cd81					nt_asm_cpy_h:
>cd81	05 0c						.byte 5, IM+NN
>cd83	8e cd				                .word nt_asm_cpy_z
>cd85	2d aa 32 aa					.word xt_asm_cpy_h, z_asm_cpy_h
>cd89	63 70 79 2e 23					.text "cpy.#"
.cd8e					nt_asm_cpy_z:
>cd8e	05 0c						.byte 5, IM+NN
>cd90	9b cd				                .word nt_asm_dec
>cd92	32 aa 37 aa					.word xt_asm_cpy_z, z_asm_cpy_z
>cd96	63 70 79 2e 7a					.text "cpy.z"
.cd9b					nt_asm_dec:
>cd9b	03 0c						.byte 3, IM+NN
>cd9d	a6 cd				                .word nt_asm_dec_a
>cd9f	37 aa 3c aa					.word xt_asm_dec, z_asm_dec
>cda3	64 65 63					.text "dec"
.cda6					nt_asm_dec_a:
>cda6	05 0c						.byte 5, IM+NN
>cda8	b3 cd				                .word nt_asm_dec_x
>cdaa	3c aa 41 aa					.word xt_asm_dec_a, z_asm_dec_a
>cdae	64 65 63 2e 61					.text "dec.a"
.cdb3					nt_asm_dec_x:
>cdb3	05 0c						.byte 5, IM+NN
>cdb5	c0 cd				                .word nt_asm_dec_z
>cdb7	41 aa 46 aa					.word xt_asm_dec_x, z_asm_dec_x
>cdbb	64 65 63 2e 78					.text "dec.x"
.cdc0					nt_asm_dec_z:
>cdc0	05 0c						.byte 5, IM+NN
>cdc2	cd cd				                .word nt_asm_dec_zx
>cdc4	46 aa 4b aa					.word xt_asm_dec_z, z_asm_dec_z
>cdc8	64 65 63 2e 7a					.text "dec.z"
.cdcd					nt_asm_dec_zx:
>cdcd	06 0c						.byte 6, IM+NN
>cdcf	db cd				                .word nt_asm_dex
>cdd1	4b aa 50 aa					.word xt_asm_dec_zx, z_asm_dec_zx
>cdd5	64 65 63 2e 7a 78				.text "dec.zx"
.cddb					nt_asm_dex:
>cddb	03 0c						.byte 3, IM+NN
>cddd	e6 cd				                .word nt_asm_dey
>cddf	50 aa 55 aa					.word xt_asm_dex, z_asm_dex
>cde3	64 65 78					.text "dex"
.cde6					nt_asm_dey:
>cde6	03 0c						.byte 3, IM+NN
>cde8	f1 cd				                .word nt_asm_eor
>cdea	55 aa 5a aa					.word xt_asm_dey, z_asm_dey
>cdee	64 65 79					.text "dey"
.cdf1					nt_asm_eor:
>cdf1	03 0c						.byte 3, IM+NN
>cdf3	fc cd				                .word nt_asm_eor_h
>cdf5	5a aa 5f aa					.word xt_asm_eor, z_asm_eor
>cdf9	65 6f 72					.text "eor"
.cdfc					nt_asm_eor_h:
>cdfc	05 0c						.byte 5, IM+NN
>cdfe	09 ce				                .word nt_asm_eor_x
>ce00	5f aa 64 aa					.word xt_asm_eor_h, z_asm_eor_h
>ce04	65 6f 72 2e 23					.text "eor.#"
.ce09					nt_asm_eor_x:
>ce09	05 0c						.byte 5, IM+NN
>ce0b	16 ce				                .word nt_asm_eor_y
>ce0d	64 aa 69 aa					.word xt_asm_eor_x, z_asm_eor_x
>ce11	65 6f 72 2e 78					.text "eor.x"
.ce16					nt_asm_eor_y:
>ce16	05 0c						.byte 5, IM+NN
>ce18	23 ce				                .word nt_asm_eor_z
>ce1a	69 aa 6e aa					.word xt_asm_eor_y, z_asm_eor_y
>ce1e	65 6f 72 2e 79					.text "eor.y"
.ce23					nt_asm_eor_z:
>ce23	05 0c						.byte 5, IM+NN
>ce25	30 ce				                .word nt_asm_eor_zi
>ce27	6e aa 73 aa					.word xt_asm_eor_z, z_asm_eor_z
>ce2b	65 6f 72 2e 7a					.text "eor.z"
.ce30					nt_asm_eor_zi:
>ce30	06 0c						.byte 6, IM+NN
>ce32	3e ce				                .word nt_asm_eor_ziy
>ce34	73 aa 78 aa					.word xt_asm_eor_zi, z_asm_eor_zi
>ce38	65 6f 72 2e 7a 69				.text "eor.zi"
.ce3e					nt_asm_eor_ziy:
>ce3e	07 0c						.byte 7, IM+NN
>ce40	4d ce				                .word nt_asm_eor_zx
>ce42	78 aa 7d aa					.word xt_asm_eor_ziy, z_asm_eor_ziy
>ce46	65 6f 72 2e 7a 69 79				.text "eor.ziy"
.ce4d					nt_asm_eor_zx:
>ce4d	06 0c						.byte 6, IM+NN
>ce4f	5b ce				                .word nt_asm_eor_zxi
>ce51	7d aa 82 aa					.word xt_asm_eor_zx, z_asm_eor_zx
>ce55	65 6f 72 2e 7a 78				.text "eor.zx"
.ce5b					nt_asm_eor_zxi:
>ce5b	07 0c						.byte 7, IM+NN
>ce5d	6a ce				                .word nt_asm_inc
>ce5f	82 aa 87 aa					.word xt_asm_eor_zxi, z_asm_eor_zxi
>ce63	65 6f 72 2e 7a 78 69				.text "eor.zxi"
.ce6a					nt_asm_inc:
>ce6a	03 0c						.byte 3, IM+NN
>ce6c	75 ce				                .word nt_asm_inc_a
>ce6e	87 aa 8c aa					.word xt_asm_inc, z_asm_inc
>ce72	69 6e 63					.text "inc"
.ce75					nt_asm_inc_a:
>ce75	05 0c						.byte 5, IM+NN
>ce77	82 ce				                .word nt_asm_inc_x
>ce79	8c aa 91 aa					.word xt_asm_inc_a, z_asm_inc_a
>ce7d	69 6e 63 2e 61					.text "inc.a"
.ce82					nt_asm_inc_x:
>ce82	05 0c						.byte 5, IM+NN
>ce84	8f ce				                .word nt_asm_inc_z
>ce86	91 aa 96 aa					.word xt_asm_inc_x, z_asm_inc_x
>ce8a	69 6e 63 2e 78					.text "inc.x"
.ce8f					nt_asm_inc_z:
>ce8f	05 0c						.byte 5, IM+NN
>ce91	9c ce				                .word nt_asm_inc_zx
>ce93	96 aa 9b aa					.word xt_asm_inc_z, z_asm_inc_z
>ce97	69 6e 63 2e 7a					.text "inc.z"
.ce9c					nt_asm_inc_zx:
>ce9c	06 0c						.byte 6, IM+NN
>ce9e	aa ce				                .word nt_asm_inx
>cea0	9b aa a0 aa					.word xt_asm_inc_zx, z_asm_inc_zx
>cea4	69 6e 63 2e 7a 78				.text "inc.zx"
.ceaa					nt_asm_inx:
>ceaa	03 0c						.byte 3, IM+NN
>ceac	b5 ce				                .word nt_asm_iny
>ceae	a0 aa a5 aa					.word xt_asm_inx, z_asm_inx
>ceb2	69 6e 78					.text "inx"
.ceb5					nt_asm_iny:
>ceb5	03 0c						.byte 3, IM+NN
>ceb7	c0 ce				                .word nt_asm_jmp
>ceb9	a5 aa aa aa					.word xt_asm_iny, z_asm_iny
>cebd	69 6e 79					.text "iny"
.cec0					nt_asm_jmp:
>cec0	03 0c						.byte 3, IM+NN
>cec2	cb ce				                .word nt_asm_jmp_i
>cec4	aa aa af aa					.word xt_asm_jmp, z_asm_jmp
>cec8	6a 6d 70					.text "jmp"
.cecb					nt_asm_jmp_i:
>cecb	05 0c						.byte 5, IM+NN
>cecd	d8 ce				                .word nt_asm_jmp_xi
>cecf	af aa b4 aa					.word xt_asm_jmp_i, z_asm_jmp_i
>ced3	6a 6d 70 2e 69					.text "jmp.i"
.ced8					nt_asm_jmp_xi:
>ced8	06 0c						.byte 6, IM+NN
>ceda	e6 ce				                .word nt_asm_jsr
>cedc	b4 aa b9 aa					.word xt_asm_jmp_xi, z_asm_jmp_xi
>cee0	6a 6d 70 2e 78 69				.text "jmp.xi"
.cee6					nt_asm_jsr:
>cee6	03 0c						.byte 3, IM+NN
>cee8	f1 ce				                .word nt_asm_lda
>ceea	b9 aa be aa					.word xt_asm_jsr, z_asm_jsr
>ceee	6a 73 72					.text "jsr"
.cef1					nt_asm_lda:
>cef1	03 0c						.byte 3, IM+NN
>cef3	fc ce				                .word nt_asm_lda_h
>cef5	be aa c3 aa					.word xt_asm_lda, z_asm_lda
>cef9	6c 64 61					.text "lda"
.cefc					nt_asm_lda_h:
>cefc	05 0c						.byte 5, IM+NN
>cefe	09 cf				                .word nt_asm_lda_x
>cf00	c3 aa c8 aa					.word xt_asm_lda_h, z_asm_lda_h
>cf04	6c 64 61 2e 23					.text "lda.#"
.cf09					nt_asm_lda_x:
>cf09	05 0c						.byte 5, IM+NN
>cf0b	16 cf				                .word nt_asm_lda_y
>cf0d	c8 aa cd aa					.word xt_asm_lda_x, z_asm_lda_x
>cf11	6c 64 61 2e 78					.text "lda.x"
.cf16					nt_asm_lda_y:
>cf16	05 0c						.byte 5, IM+NN
>cf18	23 cf				                .word nt_asm_lda_z
>cf1a	cd aa d2 aa					.word xt_asm_lda_y, z_asm_lda_y
>cf1e	6c 64 61 2e 79					.text "lda.y"
.cf23					nt_asm_lda_z:
>cf23	05 0c						.byte 5, IM+NN
>cf25	30 cf				                .word nt_asm_lda_zi
>cf27	d2 aa d7 aa					.word xt_asm_lda_z, z_asm_lda_z
>cf2b	6c 64 61 2e 7a					.text "lda.z"
.cf30					nt_asm_lda_zi:
>cf30	06 0c						.byte 6, IM+NN
>cf32	3e cf				                .word nt_asm_lda_ziy
>cf34	d7 aa dc aa					.word xt_asm_lda_zi, z_asm_lda_zi
>cf38	6c 64 61 2e 7a 69				.text "lda.zi"
.cf3e					nt_asm_lda_ziy:
>cf3e	07 0c						.byte 7, IM+NN
>cf40	4d cf				                .word nt_asm_lda_zx
>cf42	dc aa e1 aa					.word xt_asm_lda_ziy, z_asm_lda_ziy
>cf46	6c 64 61 2e 7a 69 79				.text "lda.ziy"
.cf4d					nt_asm_lda_zx:
>cf4d	06 0c						.byte 6, IM+NN
>cf4f	5b cf				                .word nt_asm_lda_zxi
>cf51	e1 aa e6 aa					.word xt_asm_lda_zx, z_asm_lda_zx
>cf55	6c 64 61 2e 7a 78				.text "lda.zx"
.cf5b					nt_asm_lda_zxi:
>cf5b	07 0c						.byte 7, IM+NN
>cf5d	6a cf				                .word nt_asm_ldx
>cf5f	e6 aa eb aa					.word xt_asm_lda_zxi, z_asm_lda_zxi
>cf63	6c 64 61 2e 7a 78 69				.text "lda.zxi"
.cf6a					nt_asm_ldx:
>cf6a	03 0c						.byte 3, IM+NN
>cf6c	75 cf				                .word nt_asm_ldx_h
>cf6e	eb aa f0 aa					.word xt_asm_ldx, z_asm_ldx
>cf72	6c 64 78					.text "ldx"
.cf75					nt_asm_ldx_h:
>cf75	05 0c						.byte 5, IM+NN
>cf77	82 cf				                .word nt_asm_ldx_y
>cf79	f0 aa f5 aa					.word xt_asm_ldx_h, z_asm_ldx_h
>cf7d	6c 64 78 2e 23					.text "ldx.#"
.cf82					nt_asm_ldx_y:
>cf82	05 0c						.byte 5, IM+NN
>cf84	8f cf				                .word nt_asm_ldx_z
>cf86	f5 aa fa aa					.word xt_asm_ldx_y, z_asm_ldx_y
>cf8a	6c 64 78 2e 79					.text "ldx.y"
.cf8f					nt_asm_ldx_z:
>cf8f	05 0c						.byte 5, IM+NN
>cf91	9c cf				                .word nt_asm_ldx_zy
>cf93	fa aa ff aa					.word xt_asm_ldx_z, z_asm_ldx_z
>cf97	6c 64 78 2e 7a					.text "ldx.z"
.cf9c					nt_asm_ldx_zy:
>cf9c	06 0c						.byte 6, IM+NN
>cf9e	aa cf				                .word nt_asm_ldy
>cfa0	ff aa 04 ab					.word xt_asm_ldx_zy, z_asm_ldx_zy
>cfa4	6c 64 78 2e 7a 79				.text "ldx.zy"
.cfaa					nt_asm_ldy:
>cfaa	03 0c						.byte 3, IM+NN
>cfac	b5 cf				                .word nt_asm_ldy_h
>cfae	04 ab 09 ab					.word xt_asm_ldy, z_asm_ldy
>cfb2	6c 64 79					.text "ldy"
.cfb5					nt_asm_ldy_h:
>cfb5	05 0c						.byte 5, IM+NN
>cfb7	c2 cf				                .word nt_asm_ldy_x
>cfb9	09 ab 0e ab					.word xt_asm_ldy_h, z_asm_ldy_h
>cfbd	6c 64 79 2e 23					.text "ldy.#"
.cfc2					nt_asm_ldy_x:
>cfc2	05 0c						.byte 5, IM+NN
>cfc4	cf cf				                .word nt_asm_ldy_z
>cfc6	0e ab 13 ab					.word xt_asm_ldy_x, z_asm_ldy_x
>cfca	6c 64 79 2e 78					.text "ldy.x"
.cfcf					nt_asm_ldy_z:
>cfcf	05 0c						.byte 5, IM+NN
>cfd1	dc cf				                .word nt_asm_ldy_zx
>cfd3	13 ab 18 ab					.word xt_asm_ldy_z, z_asm_ldy_z
>cfd7	6c 64 79 2e 7a					.text "ldy.z"
.cfdc					nt_asm_ldy_zx:
>cfdc	06 0c						.byte 6, IM+NN
>cfde	ea cf				                .word nt_asm_lsr
>cfe0	18 ab 1d ab					.word xt_asm_ldy_zx, z_asm_ldy_zx
>cfe4	6c 64 79 2e 7a 78				.text "ldy.zx"
.cfea					nt_asm_lsr:
>cfea	03 0c						.byte 3, IM+NN
>cfec	f5 cf				                .word nt_asm_lsr_a
>cfee	1d ab 22 ab					.word xt_asm_lsr, z_asm_lsr
>cff2	6c 73 72					.text "lsr"
.cff5					nt_asm_lsr_a:
>cff5	05 0c						.byte 5, IM+NN
>cff7	02 d0				                .word nt_asm_lsr_x
>cff9	22 ab 27 ab					.word xt_asm_lsr_a, z_asm_lsr_a
>cffd	6c 73 72 2e 61					.text "lsr.a"
.d002					nt_asm_lsr_x:
>d002	05 0c						.byte 5, IM+NN
>d004	0f d0				                .word nt_asm_lsr_z
>d006	27 ab 2c ab					.word xt_asm_lsr_x, z_asm_lsr_x
>d00a	6c 73 72 2e 78					.text "lsr.x"
.d00f					nt_asm_lsr_z:
>d00f	05 0c						.byte 5, IM+NN
>d011	1c d0				                .word nt_asm_lsr_zx
>d013	2c ab 31 ab					.word xt_asm_lsr_z, z_asm_lsr_z
>d017	6c 73 72 2e 7a					.text "lsr.z"
.d01c					nt_asm_lsr_zx:
>d01c	06 0c						.byte 6, IM+NN
>d01e	2a d0				                .word nt_asm_nop
>d020	31 ab 36 ab					.word xt_asm_lsr_zx, z_asm_lsr_zx
>d024	6c 73 72 2e 7a 78				.text "lsr.zx"
.d02a					nt_asm_nop:
>d02a	03 0c						.byte 3, IM+NN
>d02c	35 d0				                .word nt_asm_ora
>d02e	36 ab 3b ab					.word xt_asm_nop, z_asm_nop
>d032	6e 6f 70					.text "nop"
.d035					nt_asm_ora:
>d035	03 0c						.byte 3, IM+NN
>d037	40 d0				                .word nt_asm_ora_h
>d039	3b ab 40 ab					.word xt_asm_ora, z_asm_ora
>d03d	6f 72 61					.text "ora"
.d040					nt_asm_ora_h:
>d040	05 0c						.byte 5, IM+NN
>d042	4d d0				                .word nt_asm_ora_x
>d044	40 ab 45 ab					.word xt_asm_ora_h, z_asm_ora_h
>d048	6f 72 61 2e 23					.text "ora.#"
.d04d					nt_asm_ora_x:
>d04d	05 0c						.byte 5, IM+NN
>d04f	5a d0				                .word nt_asm_ora_y
>d051	45 ab 4a ab					.word xt_asm_ora_x, z_asm_ora_x
>d055	6f 72 61 2e 78					.text "ora.x"
.d05a					nt_asm_ora_y:
>d05a	05 0c						.byte 5, IM+NN
>d05c	67 d0				                .word nt_asm_ora_z
>d05e	4a ab 4f ab					.word xt_asm_ora_y, z_asm_ora_y
>d062	6f 72 61 2e 79					.text "ora.y"
.d067					nt_asm_ora_z:
>d067	05 0c						.byte 5, IM+NN
>d069	74 d0				                .word nt_asm_ora_zi
>d06b	4f ab 54 ab					.word xt_asm_ora_z, z_asm_ora_z
>d06f	6f 72 61 2e 7a					.text "ora.z"
.d074					nt_asm_ora_zi:
>d074	06 0c						.byte 6, IM+NN
>d076	82 d0				                .word nt_asm_ora_ziy
>d078	54 ab 5b ab					.word xt_asm_ora_zi, z_asm_ora_zi
>d07c	6f 72 61 2e 7a 69				.text "ora.zi"
.d082					nt_asm_ora_ziy:
>d082	07 0c						.byte 7, IM+NN
>d084	91 d0				                .word nt_asm_ora_zx
>d086	5b ab 60 ab					.word xt_asm_ora_ziy, z_asm_ora_ziy
>d08a	6f 72 61 2e 7a 69 79				.text "ora.ziy"
.d091					nt_asm_ora_zx:
>d091	06 0c						.byte 6, IM+NN
>d093	9f d0				                .word nt_asm_ora_zxi
>d095	60 ab 65 ab					.word xt_asm_ora_zx, z_asm_ora_zx
>d099	6f 72 61 2e 7a 78				.text "ora.zx"
.d09f					nt_asm_ora_zxi:
>d09f	07 0c						.byte 7, IM+NN
>d0a1	ae d0				                .word nt_asm_pha
>d0a3	65 ab 6a ab					.word xt_asm_ora_zxi, z_asm_ora_zxi
>d0a7	6f 72 61 2e 7a 78 69				.text "ora.zxi"
.d0ae					nt_asm_pha:
>d0ae	03 0c						.byte 3, IM+NN
>d0b0	b9 d0				                .word nt_asm_php
>d0b2	6a ab 6f ab					.word xt_asm_pha, z_asm_pha
>d0b6	70 68 61					.text "pha"
.d0b9					nt_asm_php:
>d0b9	03 0c						.byte 3, IM+NN
>d0bb	c4 d0				                .word nt_asm_phx
>d0bd	6f ab 74 ab					.word xt_asm_php, z_asm_php
>d0c1	70 68 70					.text "php"
.d0c4					nt_asm_phx:
>d0c4	03 0c						.byte 3, IM+NN
>d0c6	cf d0				                .word nt_asm_phy
>d0c8	74 ab 79 ab					.word xt_asm_phx, z_asm_phx
>d0cc	70 68 78					.text "phx"
.d0cf					nt_asm_phy:
>d0cf	03 0c						.byte 3, IM+NN
>d0d1	da d0				                .word nt_asm_pla
>d0d3	79 ab 7e ab					.word xt_asm_phy, z_asm_phy
>d0d7	70 68 79					.text "phy"
.d0da					nt_asm_pla:
>d0da	03 0c						.byte 3, IM+NN
>d0dc	e5 d0				                .word nt_asm_plp
>d0de	7e ab 83 ab					.word xt_asm_pla, z_asm_pla
>d0e2	70 6c 61					.text "pla"
.d0e5					nt_asm_plp:
>d0e5	03 0c						.byte 3, IM+NN
>d0e7	f0 d0				                .word nt_asm_plx
>d0e9	83 ab 88 ab					.word xt_asm_plp, z_asm_plp
>d0ed	70 6c 70					.text "plp"
.d0f0					nt_asm_plx:
>d0f0	03 0c						.byte 3, IM+NN
>d0f2	fb d0				                .word nt_asm_ply
>d0f4	88 ab 8d ab					.word xt_asm_plx, z_asm_plx
>d0f8	70 6c 78					.text "plx"
.d0fb					nt_asm_ply:
>d0fb	03 0c						.byte 3, IM+NN
>d0fd	06 d1				                .word nt_asm_rol
>d0ff	8d ab 92 ab					.word xt_asm_ply, z_asm_ply
>d103	70 6c 79					.text "ply"
.d106					nt_asm_rol:
>d106	03 0c						.byte 3, IM+NN
>d108	11 d1				                .word nt_asm_rol_a
>d10a	92 ab 97 ab					.word xt_asm_rol, z_asm_rol
>d10e	72 6f 6c					.text "rol"
.d111					nt_asm_rol_a:
>d111	05 0c						.byte 5, IM+NN
>d113	1e d1				                .word nt_asm_rol_x
>d115	97 ab 9c ab					.word xt_asm_rol_a, z_asm_rol_a
>d119	72 6f 6c 2e 61					.text "rol.a"
.d11e					nt_asm_rol_x:
>d11e	05 0c						.byte 5, IM+NN
>d120	2b d1				                .word nt_asm_rol_z
>d122	9c ab a1 ab					.word xt_asm_rol_x, z_asm_rol_x
>d126	72 6f 6c 2e 78					.text "rol.x"
.d12b					nt_asm_rol_z:
>d12b	05 0c						.byte 5, IM+NN
>d12d	38 d1				                .word nt_asm_rol_zx
>d12f	a1 ab a6 ab					.word xt_asm_rol_z, z_asm_rol_z
>d133	72 6f 6c 2e 7a					.text "rol.z"
.d138					nt_asm_rol_zx:
>d138	06 0c						.byte 6, IM+NN
>d13a	46 d1				                .word nt_asm_ror
>d13c	a6 ab ab ab					.word xt_asm_rol_zx, z_asm_rol_zx
>d140	72 6f 6c 2e 7a 78				.text "rol.zx"
.d146					nt_asm_ror:
>d146	03 0c						.byte 3, IM+NN
>d148	51 d1				                .word nt_asm_ror_a
>d14a	ab ab b0 ab					.word xt_asm_ror, z_asm_ror
>d14e	72 6f 72					.text "ror"
.d151					nt_asm_ror_a:
>d151	05 0c						.byte 5, IM+NN
>d153	5e d1				                .word nt_asm_ror_x
>d155	b0 ab b5 ab					.word xt_asm_ror_a, z_asm_ror_a
>d159	72 6f 72 2e 61					.text "ror.a"
.d15e					nt_asm_ror_x:
>d15e	05 0c						.byte 5, IM+NN
>d160	6b d1				                .word nt_asm_ror_z
>d162	b5 ab ba ab					.word xt_asm_ror_x, z_asm_ror_x
>d166	72 6f 72 2e 78					.text "ror.x"
.d16b					nt_asm_ror_z:
>d16b	05 0c						.byte 5, IM+NN
>d16d	78 d1				                .word nt_asm_ror_zx
>d16f	ba ab bf ab					.word xt_asm_ror_z, z_asm_ror_z
>d173	72 6f 72 2e 7a					.text "ror.z"
.d178					nt_asm_ror_zx:
>d178	06 0c						.byte 6, IM+NN
>d17a	86 d1				                .word nt_asm_rti
>d17c	bf ab c4 ab					.word xt_asm_ror_zx, z_asm_ror_zx
>d180	72 6f 72 2e 7a 78				.text "ror.zx"
.d186					nt_asm_rti:
>d186	03 0c						.byte 3, IM+NN
>d188	91 d1				                .word nt_asm_rts
>d18a	c4 ab c9 ab					.word xt_asm_rti, z_asm_rti
>d18e	72 74 69					.text "rti"
.d191					nt_asm_rts:
>d191	03 0c						.byte 3, IM+NN
>d193	9c d1				                .word nt_asm_sbc
>d195	c9 ab ce ab					.word xt_asm_rts, z_asm_rts
>d199	72 74 73					.text "rts"
.d19c					nt_asm_sbc:
>d19c	03 0c						.byte 3, IM+NN
>d19e	a7 d1				                .word nt_asm_sbc_h
>d1a0	ce ab d3 ab					.word xt_asm_sbc, z_asm_sbc
>d1a4	73 62 63					.text "sbc"
.d1a7					nt_asm_sbc_h:
>d1a7	05 0c						.byte 5, IM+NN
>d1a9	b4 d1				                .word nt_asm_sbc_x
>d1ab	d3 ab d8 ab					.word xt_asm_sbc_h, z_asm_sbc_h
>d1af	73 62 63 2e 23					.text "sbc.#"
.d1b4					nt_asm_sbc_x:
>d1b4	05 0c						.byte 5, IM+NN
>d1b6	c1 d1				                .word nt_asm_sbc_y
>d1b8	d8 ab dd ab					.word xt_asm_sbc_x, z_asm_sbc_x
>d1bc	73 62 63 2e 78					.text "sbc.x"
.d1c1					nt_asm_sbc_y:
>d1c1	05 0c						.byte 5, IM+NN
>d1c3	ce d1				                .word nt_asm_sbc_z
>d1c5	dd ab e2 ab					.word xt_asm_sbc_y, z_asm_sbc_y
>d1c9	73 62 63 2e 79					.text "sbc.y"
.d1ce					nt_asm_sbc_z:
>d1ce	05 0c						.byte 5, IM+NN
>d1d0	db d1				                .word nt_asm_sbc_zi
>d1d2	e2 ab e7 ab					.word xt_asm_sbc_z, z_asm_sbc_z
>d1d6	73 62 63 2e 7a					.text "sbc.z"
.d1db					nt_asm_sbc_zi:
>d1db	06 0c						.byte 6, IM+NN
>d1dd	e9 d1				                .word nt_asm_sbc_ziy
>d1df	e7 ab ec ab					.word xt_asm_sbc_zi, z_asm_sbc_zi
>d1e3	73 62 63 2e 7a 69				.text "sbc.zi"
.d1e9					nt_asm_sbc_ziy:
>d1e9	07 0c						.byte 7, IM+NN
>d1eb	f8 d1				                .word nt_asm_sbc_zx
>d1ed	ec ab f1 ab					.word xt_asm_sbc_ziy, z_asm_sbc_ziy
>d1f1	73 62 63 2e 7a 69 79				.text "sbc.ziy"
.d1f8					nt_asm_sbc_zx:
>d1f8	06 0c						.byte 6, IM+NN
>d1fa	06 d2				                .word nt_asm_sbc_zxi
>d1fc	f1 ab f6 ab					.word xt_asm_sbc_zx, z_asm_sbc_zx
>d200	73 62 63 2e 7a 78				.text "sbc.zx"
.d206					nt_asm_sbc_zxi:
>d206	07 0c						.byte 7, IM+NN
>d208	15 d2				                .word nt_asm_sec
>d20a	f6 ab fa ab					.word xt_asm_sbc_zxi, z_asm_sbc_zxi
>d20e	73 62 63 2e 7a 78 69				.text "sbc.zxi"
.d215					nt_asm_sec:
>d215	03 0c						.byte 3, IM+NN
>d217	20 d2				                .word nt_asm_sed
>d219	fa ab fe ab					.word xt_asm_sec, z_asm_sec
>d21d	73 65 63					.text "sec"
.d220					nt_asm_sed:
>d220	03 0c						.byte 3, IM+NN
>d222	2b d2				                .word nt_asm_sei
>d224	fe ab 02 ac					.word xt_asm_sed, z_asm_sed
>d228	73 65 64					.text "sed"
.d22b					nt_asm_sei:
>d22b	03 0c						.byte 3, IM+NN
>d22d	36 d2				                .word nt_asm_sta
>d22f	02 ac 06 ac					.word xt_asm_sei, z_asm_sei
>d233	73 65 69					.text "sei"
.d236					nt_asm_sta:
>d236	03 0c						.byte 3, IM+NN
>d238	41 d2				                .word nt_asm_sta_x
>d23a	06 ac 0a ac					.word xt_asm_sta, z_asm_sta
>d23e	73 74 61					.text "sta"
.d241					nt_asm_sta_x:
>d241	05 0c						.byte 5, IM+NN
>d243	4e d2				                .word nt_asm_sta_y
>d245	0a ac 0e ac					.word xt_asm_sta_x, z_asm_sta_x
>d249	73 74 61 2e 78					.text "sta.x"
.d24e					nt_asm_sta_y:
>d24e	05 0c						.byte 5, IM+NN
>d250	5b d2				                .word nt_asm_sta_z
>d252	0e ac 12 ac					.word xt_asm_sta_y, z_asm_sta_y
>d256	73 74 61 2e 79					.text "sta.y"
.d25b					nt_asm_sta_z:
>d25b	05 0c						.byte 5, IM+NN
>d25d	68 d2				                .word nt_asm_sta_zi
>d25f	12 ac 16 ac					.word xt_asm_sta_z, z_asm_sta_z
>d263	73 74 61 2e 7a					.text "sta.z"
.d268					nt_asm_sta_zi:
>d268	06 0c						.byte 6, IM+NN
>d26a	76 d2				                .word nt_asm_sta_ziy
>d26c	16 ac 1a ac					.word xt_asm_sta_zi, z_asm_sta_zi
>d270	73 74 61 2e 7a 69				.text "sta.zi"
.d276					nt_asm_sta_ziy:
>d276	07 0c						.byte 7, IM+NN
>d278	85 d2				                .word nt_asm_sta_zx
>d27a	1a ac 1e ac					.word xt_asm_sta_ziy, z_asm_sta_ziy
>d27e	73 74 61 2e 7a 69 79				.text "sta.ziy"
.d285					nt_asm_sta_zx:
>d285	06 0c						.byte 6, IM+NN
>d287	93 d2				                .word nt_asm_sta_zxi
>d289	1e ac 22 ac					.word xt_asm_sta_zx, z_asm_sta_zx
>d28d	73 74 61 2e 7a 78				.text "sta.zx"
.d293					nt_asm_sta_zxi:
>d293	07 0c						.byte 7, IM+NN
>d295	a2 d2				                .word nt_asm_stx
>d297	22 ac 26 ac					.word xt_asm_sta_zxi, z_asm_sta_zxi
>d29b	73 74 61 2e 7a 78 69				.text "sta.zxi"
.d2a2					nt_asm_stx:
>d2a2	03 0c						.byte 3, IM+NN
>d2a4	ad d2				                .word nt_asm_stx_z
>d2a6	26 ac 2a ac					.word xt_asm_stx, z_asm_stx
>d2aa	73 74 78					.text "stx"
.d2ad					nt_asm_stx_z:
>d2ad	05 0c						.byte 5, IM+NN
>d2af	ba d2				                .word nt_asm_stx_zy
>d2b1	2a ac 2e ac					.word xt_asm_stx_z, z_asm_stx_z
>d2b5	73 74 78 2e 7a					.text "stx.z"
.d2ba					nt_asm_stx_zy:
>d2ba	06 0c						.byte 6, IM+NN
>d2bc	c8 d2				                .word nt_asm_sty
>d2be	2e ac 32 ac					.word xt_asm_stx_zy, z_asm_stx_zy
>d2c2	73 74 78 2e 7a 79				.text "stx.zy"
.d2c8					nt_asm_sty:
>d2c8	03 0c						.byte 3, IM+NN
>d2ca	d3 d2				                .word nt_asm_sty_z
>d2cc	32 ac 36 ac					.word xt_asm_sty, z_asm_sty
>d2d0	73 74 79					.text "sty"
.d2d3					nt_asm_sty_z:
>d2d3	05 0c						.byte 5, IM+NN
>d2d5	e0 d2				                .word nt_asm_sty_zx
>d2d7	36 ac 3a ac					.word xt_asm_sty_z, z_asm_sty_z
>d2db	73 74 79 2e 7a					.text "sty.z"
.d2e0					nt_asm_sty_zx:
>d2e0	06 0c						.byte 6, IM+NN
>d2e2	ee d2				                .word nt_asm_stz
>d2e4	3a ac 3e ac					.word xt_asm_sty_zx, z_asm_sty_zx
>d2e8	73 74 79 2e 7a 78				.text "sty.zx"
.d2ee					nt_asm_stz:
>d2ee	03 0c						.byte 3, IM+NN
>d2f0	f9 d2				                .word nt_asm_stz_x
>d2f2	3e ac 42 ac					.word xt_asm_stz, z_asm_stz
>d2f6	73 74 7a					.text "stz"
.d2f9					nt_asm_stz_x:
>d2f9	05 0c						.byte 5, IM+NN
>d2fb	06 d3				                .word nt_asm_stz_z
>d2fd	42 ac 46 ac					.word xt_asm_stz_x, z_asm_stz_x
>d301	73 74 7a 2e 78					.text "stz.x"
.d306					nt_asm_stz_z:
>d306	05 0c						.byte 5, IM+NN
>d308	13 d3				                .word nt_asm_stz_zx
>d30a	46 ac 4a ac					.word xt_asm_stz_z, z_asm_stz_z
>d30e	73 74 7a 2e 7a					.text "stz.z"
.d313					nt_asm_stz_zx:
>d313	06 0c						.byte 6, IM+NN
>d315	21 d3				                .word nt_asm_tax
>d317	4a ac 4e ac					.word xt_asm_stz_zx, z_asm_stz_zx
>d31b	73 74 7a 2e 7a 78				.text "stz.zx"
.d321					nt_asm_tax:
>d321	03 0c						.byte 3, IM+NN
>d323	2c d3				                .word nt_asm_tay
>d325	4e ac 52 ac					.word xt_asm_tax, z_asm_tax
>d329	74 61 78					.text "tax"
.d32c					nt_asm_tay:
>d32c	03 0c						.byte 3, IM+NN
>d32e	37 d3				                .word nt_asm_trb
>d330	52 ac 56 ac					.word xt_asm_tay, z_asm_tay
>d334	74 61 79					.text "tay"
.d337					nt_asm_trb:
>d337	03 0c						.byte 3, IM+NN
>d339	42 d3				                .word nt_asm_trb_z
>d33b	56 ac 5a ac					.word xt_asm_trb, z_asm_trb
>d33f	74 72 62					.text "trb"
.d342					nt_asm_trb_z:
>d342	05 0c						.byte 5, IM+NN
>d344	4f d3				                .word nt_asm_tsb
>d346	5a ac 5e ac					.word xt_asm_trb_z, z_asm_trb_z
>d34a	74 72 62 2e 7a					.text "trb.z"
.d34f					nt_asm_tsb:
>d34f	03 0c						.byte 3, IM+NN
>d351	5a d3				                .word nt_asm_tsb_z
>d353	5e ac 62 ac					.word xt_asm_tsb, z_asm_tsb
>d357	74 73 62					.text "tsb"
.d35a					nt_asm_tsb_z:
>d35a	05 0c						.byte 5, IM+NN
>d35c	67 d3				                .word nt_asm_tsx
>d35e	62 ac 66 ac					.word xt_asm_tsb_z, z_asm_tsb_z
>d362	74 73 62 2e 7a					.text "tsb.z"
.d367					nt_asm_tsx:
>d367	03 0c						.byte 3, IM+NN
>d369	72 d3				                .word nt_asm_txa
>d36b	66 ac 6a ac					.word xt_asm_tsx, z_asm_tsx
>d36f	74 73 78					.text "tsx"
.d372					nt_asm_txa:
>d372	03 0c						.byte 3, IM+NN
>d374	7d d3				                .word nt_asm_txs
>d376	6a ac 6e ac					.word xt_asm_txa, z_asm_txa
>d37a	74 78 61					.text "txa"
.d37d					nt_asm_txs:
>d37d	03 0c						.byte 3, IM+NN
>d37f	88 d3				                .word nt_asm_tya
>d381	6e ac 72 ac					.word xt_asm_txs, z_asm_txs
>d385	74 78 73					.text "txs"
.d388					nt_asm_tya:
>d388	03 0c						.byte 3, IM+NN
>d38a	93 d3				                .word nt_asm_arrow
>d38c	72 ac 76 ac					.word xt_asm_tya, z_asm_tya
>d390	74 79 61					.text "tya"
.d393					nt_asm_arrow:
>d393	03 04				                .byte 3, IM
>d395	9e d3				                .word nt_asm_back_jump
>d397	72 91 7c 91			                .word xt_asm_arrow, z_asm_arrow
>d39b	2d 2d 3e			                .text "-->"
.d39e					nt_asm_back_jump:
>d39e	02 04				                .byte 2, IM
>d3a0	a8 d3				                .word nt_asm_back_branch
>d3a2	c7 ac c7 ac			                .word xt_asm_back_jump, z_asm_back_jump
>d3a6	3c 6a				                .text "<j"
.d3a8					nt_asm_back_branch:
>d3a8	02 04				                .byte 2, IM
>d3aa	b2 d3				                .word nt_asm_push_a
>d3ac	c8 ac d0 ac			                .word xt_asm_back_branch, z_asm_back_branch
>d3b0	3c 62				                .text "<b"
.d3b2					nt_asm_push_a:
>d3b2	06 0c				                .byte 6, IM+NN
>d3b4	00 00				                .word 0000
>d3b6	b0 ac bf ac			                .word xt_asm_push_a, z_asm_push_a
>d3ba	70 75 73 68 2d 61		                .text "push-a"

;******  Return to file: platform/../taliforth.asm


;******  Processing file: platform/../strings.asm

=0					str_ok             =  0
=1					str_compile        =  1
=2					str_redefined      =  2
=3					str_wid_forth      =  3
=4					str_abc_lower      =  4
=5					str_abc_upper      =  5
=6					str_wid_editor     =  6
=7					str_wid_assembler  =  7
=8					str_wid_root       =  8
=9					str_see_flags      =  9
=10					str_see_nt         = 10
=11					str_see_xt         = 11
=12					str_see_size       = 12
=13					str_disasm_lit     = 13
=14					str_disasm_sdc     = 14
=15					str_disasm_bra     = 15
.d3c0					string_table:
>d3c0	e0 d3 e4 d3 ee d3 54 d4		        .word s_ok, s_compiled, s_redefined, s_wid_forth, s_abc_lower ; 0-4
>d3c8	f9 d3
>d3ca	1d d4 4c d4 41 d4 5b d4		        .word s_abc_upper, s_wid_editor, s_wid_asm, s_wid_root        ; 5-8
>d3d2	61 d4 7d d4 82 d4 87 d4		        .word s_see_flags, s_see_nt, s_see_xt, s_see_size             ; 9-12
>d3da	98 d4 a1 d4 b3 d4		        .word s_disasm_lit, s_disasm_sdc, s_disasm_bra                ; 13-15
>d3e0	20 6f 6b 00			s_ok:         .text " ok", 0         ; note space at beginning
>d3e4	20 63 6f 6d 70 69 6c 65		s_compiled:   .text " compiled", 0   ; note space at beginning
>d3ec	64 00
>d3ee	72 65 64 65 66 69 6e 65		s_redefined:  .text "redefined ", 0  ; note space at end
>d3f6	64 20 00
>d3f9	30 31 32 33 34 35 36 37		s_abc_lower:  .text "0123456789abcdefghijklmnopqrstuvwxyz"
>d401	38 39 61 62 63 64 65 66 67 68 69 6a 6b 6c 6d 6e
>d411	6f 70 71 72 73 74 75 76 77 78 79 7a
>d41d	30 31 32 33 34 35 36 37		s_abc_upper:  .text "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
>d425	38 39 41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e
>d435	4f 50 51 52 53 54 55 56 57 58 59 5a
>d441	41 73 73 65 6d 62 6c 65		s_wid_asm:    .text "Assembler ", 0  ; Wordlist ID 2, note space at end
>d449	72 20 00
>d44c	45 64 69 74 6f 72 20 00		s_wid_editor: .text "Editor ", 0     ; Wordlist ID 1, note space at end
>d454	46 6f 72 74 68 20 00		s_wid_forth:  .text "Forth ", 0      ; Wordlist ID 0, note space at end
>d45b	52 6f 6f 74 20 00		s_wid_root:   .text "Root ", 0       ; Wordlist ID 3, note space at end
>d461	66 6c 61 67 73 20 28 43		s_see_flags:  .text "flags (CO AN IM NN UF HC): ", 0
>d469	4f 20 41 4e 20 49 4d 20 4e 4e 20 55 46 20 48 43
>d479	29 3a 20 00
>d47d	6e 74 3a 20 00			s_see_nt:     .text "nt: ", 0
>d482	78 74 3a 20 00			s_see_xt:     .text "xt: ", 0
>d487	73 69 7a 65 20 28 64 65		s_see_size:   .text "size (decimal): ", 0
>d48f	63 69 6d 61 6c 29 3a 20 00
>d498	4c 49 54 45 52 41 4c 20		s_disasm_lit: .text "LITERAL ", 0
>d4a0	00
>d4a1	53 54 41 43 4b 20 44 45		s_disasm_sdc: .text "STACK DEPTH CHECK", 0
>d4a9	50 54 48 20 43 48 45 43 4b 00
>d4b3	42 52 41 4e 43 48 20 00		s_disasm_bra: .text "BRANCH ",0
=0					err_allot        = 0
=1					err_badsource    = 1
=2					err_compileonly  = 2
=3					err_defer        = 3
=4					err_divzero      = 4
=5					err_noname       = 5
=6					err_refill       = 6
=7					err_state        = 7
=8					err_syntax       = 8
=9					err_underflow    = 9
=10					err_negallot     = 10
=11					err_wordlist     = 11
=12					err_blockwords   = 12
.d4bb					error_table:
>d4bb	d5 d4 f6 d4 16 d5 37 d5		        .word es_allot, es_badsource, es_compileonly, es_defer  ;  0-3
>d4c3	54 d5 65 d5 75 d5 a3 d5		        .word es_divzero, es_noname, es_refill, es_state        ;  4-7
>d4cb	bb d5 ca d5 da d5 f6 d5		        .word es_syntax, es_underflow, es_negallot, es_wordlist ;  8-11
>d4d3	0d d6				        .word es_blockwords                                    ; 12
>d4d5	41 4c 4c 4f 54 20 75 73		es_allot:       .text "ALLOT using all available memory", 0
>d4dd	69 6e 67 20 61 6c 6c 20 61 76 61 69 6c 61 62 6c
>d4ed	65 20 6d 65 6d 6f 72 79 00
>d4f6	49 6c 6c 65 67 61 6c 20		es_badsource:   .text "Illegal SOURCE-ID during REFILL", 0
>d4fe	53 4f 55 52 43 45 2d 49 44 20 64 75 72 69 6e 67
>d50e	20 52 45 46 49 4c 4c 00
>d516	49 6e 74 65 72 70 72 65		es_compileonly: .text "Interpreting a compile-only word", 0
>d51e	74 69 6e 67 20 61 20 63 6f 6d 70 69 6c 65 2d 6f
>d52e	6e 6c 79 20 77 6f 72 64 00
>d537	44 45 46 45 52 65 64 20		es_defer:       .text "DEFERed word not defined yet", 0
>d53f	77 6f 72 64 20 6e 6f 74 20 64 65 66 69 6e 65 64
>d54f	20 79 65 74 00
>d554	44 69 76 69 73 69 6f 6e		es_divzero:     .text "Division by zero", 0
>d55c	20 62 79 20 7a 65 72 6f 00
>d565	50 61 72 73 69 6e 67 20		es_noname:      .text "Parsing failure", 0
>d56d	66 61 69 6c 75 72 65 00
>d575	51 55 49 54 20 63 6f 75		es_refill:      .text "QUIT could not get input (REFILL returned -1)", 0
>d57d	6c 64 20 6e 6f 74 20 67 65 74 20 69 6e 70 75 74
>d58d	20 28 52 45 46 49 4c 4c 20 72 65 74 75 72 6e 65
>d59d	64 20 2d 31 29 00
>d5a3	41 6c 72 65 61 64 79 20		es_state:       .text "Already in compile mode", 0
>d5ab	69 6e 20 63 6f 6d 70 69 6c 65 20 6d 6f 64 65 00
>d5bb	55 6e 64 65 66 69 6e 65		es_syntax:      .text "Undefined word", 0
>d5c3	64 20 77 6f 72 64 00
>d5ca	53 74 61 63 6b 20 75 6e		es_underflow:   .text "Stack underflow", 0
>d5d2	64 65 72 66 6c 6f 77 00
>d5da	4d 61 78 20 6d 65 6d 6f		es_negallot:    .text "Max memory freed with ALLOT", 0
>d5e2	72 79 20 66 72 65 65 64 20 77 69 74 68 20 41 4c
>d5f2	4c 4f 54 00
>d5f6	4e 6f 20 77 6f 72 64 6c		es_wordlist:    .text "No wordlists available", 0
>d5fe	69 73 74 73 20 61 76 61 69 6c 61 62 6c 65 00
>d60d	50 6c 65 61 73 65 20 61		es_blockwords:  .text "Please assign vectors BLOCK-READ-VECTOR and BLOCK-WRITE-VECTOR",0
>d615	73 73 69 67 6e 20 76 65 63 74 6f 72 73 20 42 4c
>d625	4f 43 4b 2d 52 45 41 44 2d 56 45 43 54 4f 52 20
>d635	61 6e 64 20 42 4c 4f 43 4b 2d 57 52 49 54 45 2d
>d645	56 45 43 54 4f 52 00
>d64c	0f 2f 43 4f 55 4e 54 45		envs_cs:        .text 15, "/COUNTED-STRING"
>d654	44 2d 53 54 52 49 4e 47
>d65c	05 2f 48 4f 4c 44		envs_hold:      .text 5, "/HOLD"
>d662	04 2f 50 41 44			envs_pad:       .text 4, "/PAD"
>d667	11 41 44 44 52 45 53 53		envs_aub:       .text 17, "ADDRESS-UNIT-BITS"
>d66f	2d 55 4e 49 54 2d 42 49 54 53
>d679	07 46 4c 4f 4f 52 45 44		envs_floored:   .text 7, "FLOORED"
>d681	08 4d 41 58 2d 43 48 41		envs_max_char:  .text 8, "MAX-CHAR"
>d689	52
>d68a	05 4d 41 58 2d 4e		envs_max_n:     .text 5, "MAX-N"
>d690	05 4d 41 58 2d 55		envs_max_u:     .text 5, "MAX-U"
>d696	12 52 45 54 55 52 4e 2d		envs_rsc:       .text 18, "RETURN-STACK-CELLS"
>d69e	53 54 41 43 4b 2d 43 45 4c 4c 53
>d6a9	0b 53 54 41 43 4b 2d 43		envs_sc:        .text 11, "STACK-CELLS"
>d6b1	45 4c 4c 53
>d6b5	09 57 4f 52 44 4c 49 53		envs_wl:        .text 9, "WORDLISTS"
>d6bd	54 53
>d6bf	05 4d 41 58 2d 44		envs_max_d:     .text 5, "MAX-D"
>d6c5	06 4d 41 58 2d 55 44		envs_max_ud:    .text 6, "MAX-UD"

;******  Return to file: platform/../taliforth.asm

.d6cc					cmpl_subroutine:
.d6cc	48		pha		                pha             ; save LSB of address
.d6cd	a9 20		lda #$20	                lda #$20        ; load opcode for JSR
.d6cf	80 03		bra $d6d4	                bra cmpl_common
.d6d1					cmpl_jump:
.d6d1	48		pha		                pha             ; save LSB of address
.d6d2	a9 4c		lda #$4c	                lda #$4c        ; load opcode for JMP, fall thru to cmpl_common
.d6d4					cmpl_common:
.d6d4	20 dc d6	jsr $d6dc	                jsr cmpl_a      ; compile opcode
.d6d7	68		pla		                pla             ; retrieve address LSB; fall thru to cmpl_word
.d6d8					cmpl_word:
.d6d8	20 dc d6	jsr $d6dc	                jsr cmpl_a      ; compile LSB of address
.d6db	98		tya		                tya             ; fall thru for MSB
.d6dc					cmpl_a:
.d6dc	92 00		sta ($00)	                sta (cp)
.d6de	e6 00		inc $00		                inc cp
.d6e0	d0 02		bne $d6e4	                bne _done
.d6e2	e6 01		inc $01		                inc cp+1
.d6e4					_done:
.d6e4	60		rts		                rts
.d6e5					doconst:
.d6e5	ca		dex		                dex             ; make room for constant
.d6e6	ca		dex		                dex
.d6e7	68		pla		                pla             ; LSB of return address
.d6e8	85 24		sta $24		                sta tmp1
.d6ea	68		pla		                pla             ; MSB of return address
.d6eb	85 25		sta $25		                sta tmp1+1
.d6ed	a0 01		ldy #$01	                ldy #1
.d6ef	b1 24		lda ($24),y	                lda (tmp1),y
.d6f1	95 00		sta $00,x	                sta 0,x
.d6f3	c8		iny		                iny
.d6f4	b1 24		lda ($24),y	                lda (tmp1),y
.d6f6	95 01		sta $01,x	                sta 1,x
.d6f8	60		rts		                rts
.d6f9					dodefer:
.d6f9	68		pla		                pla             ; LSB
.d6fa	85 24		sta $24		                sta tmp1
.d6fc	68		pla		                pla             ; MSB
.d6fd	85 25		sta $25		                sta tmp1+1
.d6ff	a0 01		ldy #$01	                ldy #1
.d701	b1 24		lda ($24),y	                lda (tmp1),y
.d703	85 26		sta $26		                sta tmp2
.d705	c8		iny		                iny
.d706	b1 24		lda ($24),y	                lda (tmp1),y
.d708	85 27		sta $27		                sta tmp2+1
.d70a	6c 26 00	jmp ($0026)	                jmp (tmp2)      ; This is actually a jump to the new target
.d70d					defer_error:
.d70d	a9 03		lda #$03	                lda #err_defer
.d70f	4c 3f d8	jmp $d83f	                jmp error
.d712					dodoes:
.d712	7a		ply		                ply             ; LSB
.d713	68		pla		                pla             ; MSB
.d714	c8		iny		                iny
.d715	d0 01		bne $d718	                bne +
.d717	1a		inc a		                ina
.d718					+
.d718	84 26		sty $26		                sty tmp2
.d71a	85 27		sta $27		                sta tmp2+1
.d71c	ca		dex		                dex
.d71d	ca		dex		                dex
.d71e	7a		ply		                ply
.d71f	68		pla		                pla
.d720	c8		iny		                iny
.d721	d0 01		bne $d724	                bne +
.d723	1a		inc a		                ina
.d724					+
.d724	94 00		sty $00,x	                sty 0,x         ; LSB
.d726	95 01		sta $01,x	                sta 1,x         ; MSB
.d728	6c 26 00	jmp ($0026)	                jmp (tmp2)
.d72b					dovar:
.d72b	7a		ply		                ply             ; LSB
.d72c	68		pla		                pla             ; MSB
.d72d	c8		iny		                iny
.d72e	d0 01		bne $d731	                bne +
.d730	1a		inc a		                ina
.d731					+
.d731	ca		dex		                dex
.d732	ca		dex		                dex
.d733	95 01		sta $01,x	                sta 1,x
.d735	98		tya		                tya
.d736	95 00		sta $00,x	                sta 0,x
.d738	60		rts		                rts
.d739					byte_to_ascii:
.d739	48		pha		                pha
.d73a	4a		lsr a		                lsr             ; convert high nibble first
.d73b	4a		lsr a		                lsr
.d73c	4a		lsr a		                lsr
.d73d	4a		lsr a		                lsr
.d73e	20 42 d7	jsr $d742	                jsr _nibble_to_ascii
.d741	68		pla		                pla
.d742					_nibble_to_ascii:
.d742	29 0f		and #$0f	                and #$0F
.d744	09 30		ora #$30	                ora #'0'
.d746	c9 3a		cmp #$3a	                cmp #$3A        ; '9+1
.d748	90 02		bcc $d74c	                bcc +
.d74a	69 06		adc #$06	                adc #$06
.d74c	4c f6 8d	jmp $8df6	+               jmp emit_a
.d74f	60		rts		                rts
.d750					compare_16bit:
.d750	b5 00		lda $00,x	                lda 0,x                 ; LSB of TOS
.d752	d5 02		cmp $02,x	                cmp 2,x                 ; LSB of NOS
.d754	f0 0a		beq $d760	                beq _equal
.d756	b5 01		lda $01,x	                lda 1,x                 ; MSB of TOS
.d758	f5 03		sbc $03,x	                sbc 3,x                 ; MSB of NOS
.d75a	09 01		ora #$01	                ora #1                  ; Make zero flag 0 because not equal
.d75c	70 08		bvs $d766	                bvs _overflow
.d75e	80 08		bra $d768	                bra _not_equal
.d760					_equal:
.d760	b5 01		lda $01,x	                lda 1,x                 ; MSB of TOS
.d762	f5 03		sbc $03,x	                sbc 3,x                 ; MSB of NOS
.d764	50 04		bvc $d76a	                bvc _done
.d766					_overflow:
.d766	49 80		eor #$80	                eor #$80                ; complement negative flag
.d768					_not_equal:
.d768	09 01		ora #$01	                ora #1                  ; if overflow, we can't be eqal
.d76a					_done:
.d76a	60		rts		                rts
.d76b					current_to_dp:
.d76b	a0 04		ldy #$04	                ldy #current_offset
.d76d	b1 1e		lda ($1e),y	                lda (up),y      ; current is a byte variable
.d76f	0a		asl a		                asl             ; turn it into an offset (in cells)
.d770	18		clc		                clc
.d771	69 06		adc #$06	                adc #wordlists_offset   ; add offset to wordlists base.
.d773	a8		tay		                tay
.d774	b1 1e		lda ($1e),y	                lda (up),y              ; get the dp for that wordlist.
.d776	85 02		sta $02		                sta dp
.d778	c8		iny		                iny
.d779	b1 1e		lda ($1e),y	                lda (up),y
.d77b	85 03		sta $03		                sta dp+1
.d77d	60		rts		                rts
.d77e					dp_to_current:
.d77e	a0 04		ldy #$04	                ldy #current_offset
.d780	b1 1e		lda ($1e),y	                lda (up),y      ; current is a byte variable
.d782	0a		asl a		                asl             ; turn it into an offset (in cells)
.d783	18		clc		                clc
.d784	69 06		adc #$06	                adc #wordlists_offset   ; add offset to wordlists base.
.d786	a8		tay		                tay
.d787	a5 02		lda $02		                lda dp
.d789	91 1e		sta ($1e),y	                sta (up),y              ; get the dp for that wordlist.
.d78b	c8		iny		                iny
.d78c	a5 03		lda $03		                lda dp+1
.d78e	91 1e		sta ($1e),y	                sta (up),y
.d790	60		rts		                rts
.d791					interpret:
.d791					_loop:
.d791	20 df 98	jsr $98df	                jsr xt_parse_name       ; ( "string" -- addr u )
.d794	b5 00		lda $00,x	                lda 0,x
.d796	15 01		ora $01,x	                ora 1,x
.d798	f0 70		beq $d80a	                beq _line_done
.d79a	20 b2 a3	jsr $a3b2	                jsr xt_two_dup          ; ( addr u -- addr u addr u )
.d79d	20 db 8f	jsr $8fdb	                jsr xt_find_name        ; ( addr u addr u -- addr u nt|0 )
.d7a0	b5 00		lda $00,x	                lda 0,x
.d7a2	15 01		ora $01,x	                ora 1,x
.d7a4	d0 28		bne $d7ce	                bne _got_name_token
.d7a6	e8		inx		                inx                     ; ( addr u 0 -- addr u )
.d7a7	e8		inx		                inx
.d7a8	20 8a 96	jsr $968a	                jsr xt_number           ; ( addr u -- u|d )
.d7ab	a5 16		lda $16		                lda state
.d7ad	f0 e2		beq $d791	                beq _loop
.d7af	a9 20		lda #$20	                lda #$20
.d7b1	24 20		bit $20		                bit status
.d7b3	f0 0d		beq $d7c2	                beq _single_number
.d7b5	20 a8 a1	jsr $a1a8	                jsr xt_swap
.d7b8	a0 93		ldy #$93	                ldy #>literal_runtime
.d7ba	a9 98		lda #$98	                lda #<literal_runtime
.d7bc	20 cc d6	jsr $d6cc	                jsr cmpl_subroutine
.d7bf	20 6e 87	jsr $876e	                jsr xt_comma
.d7c2					_single_number:
.d7c2	a0 93		ldy #$93	                ldy #>literal_runtime
.d7c4	a9 98		lda #$98	                lda #<literal_runtime
.d7c6	20 cc d6	jsr $d6cc	                jsr cmpl_subroutine
.d7c9	20 6e 87	jsr $876e	                jsr xt_comma
.d7cc	80 c3		bra $d791	                bra _loop
.d7ce					_got_name_token:
.d7ce	b5 00		lda $00,x	                lda 0,x
.d7d0	95 04		sta $04,x	                sta 4,x
.d7d2	b5 01		lda $01,x	                lda 1,x
.d7d4	95 05		sta $05,x	                sta 5,x
.d7d6	e8		inx		                inx
.d7d7	e8		inx		                inx
.d7d8	e8		inx		                inx
.d7d9	e8		inx		                inx                     ; ( nt )
.d7da	b5 00		lda $00,x	                lda 0,x
.d7dc	85 22		sta $22		                sta tmpbranch
.d7de	b5 01		lda $01,x	                lda 1,x
.d7e0	85 23		sta $23		                sta tmpbranch+1
.d7e2	20 e1 95	jsr $95e1	                jsr xt_name_to_int      ; ( nt - xt )
.d7e5	a5 16		lda $16		                lda state
.d7e7	d0 13		bne $d7fc	                bne _compile
.d7e9	a0 01		ldy #$01	                ldy #1
.d7eb	b1 22		lda ($22),y	                lda (tmpbranch),y
.d7ed	29 01		and #$01	                and #CO                 ; mask everything but Compile Only bit
.d7ef	f0 05		beq $d7f6	                beq _interpret
.d7f1	a9 02		lda #$02	                lda #err_compileonly
.d7f3	4c 3f d8	jmp $d83f	                jmp error
.d7f6					_interpret:
.d7f6	20 3d 8f	jsr $8f3d	                jsr xt_execute
.d7f9	4c 91 d7	jmp $d791	                jmp _loop
.d7fc					_compile:
.d7fc	a0 01		ldy #$01	                ldy #1
.d7fe	b1 22		lda ($22),y	                lda (tmpbranch),y
.d800	29 04		and #$04	                and #IM                 ; Mask all but IM bit
.d802	d0 f2		bne $d7f6	                bne _interpret          ; IMMEDIATE word, execute right now
.d804	20 ed 87	jsr $87ed	                jsr xt_compile_comma
.d807	4c 91 d7	jmp $d791	                jmp _loop
.d80a					_line_done:
.d80a	e8		inx		                inx
.d80b	e8		inx		                inx
.d80c	e8		inx		                inx
.d80d	e8		inx		                inx
.d80e	60		rts		                rts
.d80f					is_printable:
.d80f	c9 20		cmp #$20	                cmp #AscSP              ; $20
.d811	90 08		bcc $d81b	                bcc _done
.d813	c9 80		cmp #$80	                cmp #$7F + 1             ; '~'
.d815	b0 03		bcs $d81a	                bcs _failed
.d817	38		sec		                sec
.d818	80 01		bra $d81b	                bra _done
.d81a					_failed:
.d81a	18		clc		                clc
.d81b					_done:
.d81b	60		rts		                rts
.d81c					is_whitespace:
.d81c	c9 00		cmp #$00	                cmp #00         ; explicit comparison to leave Y untouched
.d81e	90 08		bcc $d828	                bcc _done
.d820	c9 21		cmp #$21	                cmp #AscSP+1
.d822	b0 03		bcs $d827	                bcs _failed
.d824	38		sec		                sec
.d825	80 01		bra $d828	                bra _done
.d827					_failed:
.d827	18		clc		                clc
.d828					_done:
.d828	60		rts		                rts
.d829					underflow_1:
.d829	e0 77		cpx #$77	                cpx #dsp0-1
.d82b	10 10		bpl $d83d	                bpl underflow_error
.d82d	60		rts		                rts
.d82e					underflow_2:
.d82e	e0 75		cpx #$75	                cpx #dsp0-3
.d830	10 0b		bpl $d83d	                bpl underflow_error
.d832	60		rts		                rts
.d833					underflow_3:
.d833	e0 73		cpx #$73	                cpx #dsp0-5
.d835	10 06		bpl $d83d	                bpl underflow_error
.d837	60		rts		                rts
.d838					underflow_4:
.d838	e0 71		cpx #$71	                cpx #dsp0-7
.d83a	10 01		bpl $d83d	                bpl underflow_error
.d83c	60		rts		                rts
.d83d					underflow_error:
.d83d	a9 09		lda #$09	                lda #err_underflow      ; fall through to error
.d83f					error:
.d83f	0a		asl a		                asl
.d840	a8		tay		                tay
.d841	b9 bb d4	lda $d4bb,y	                lda error_table,y
.d844	85 28		sta $28		                sta tmp3                ; LSB
.d846	c8		iny		                iny
.d847	b9 bb d4	lda $d4bb,y	                lda error_table,y
.d84a	85 29		sta $29		                sta tmp3+1              ; MSB
.d84c	20 62 d8	jsr $d862	                jsr print_common
.d84f	20 63 89	jsr $8963	                jsr xt_cr
.d852	4c 81 80	jmp $8081	                jmp xt_abort            ; no jsr, as we clobber return stack
.d855					print_string_no_lf:
.d855	0a		asl a		                asl
.d856	a8		tay		                tay
.d857	b9 c0 d3	lda $d3c0,y	                lda string_table,y
.d85a	85 28		sta $28		                sta tmp3                ; LSB
.d85c	c8		iny		                iny
.d85d	b9 c0 d3	lda $d3c0,y	                lda string_table,y
.d860	85 29		sta $29		                sta tmp3+1              ; MSB
.d862					print_common:
.d862	a0 00		ldy #$00	                ldy #0
.d864					_loop:
.d864	b1 28		lda ($28),y	                lda (tmp3),y
.d866	f0 06		beq $d86e	                beq _done               ; strings are zero-terminated
.d868	20 f6 8d	jsr $8df6	                jsr emit_a              ; allows vectoring via output
.d86b	c8		iny		                iny
.d86c	80 f6		bra $d864	                bra _loop
.d86e					_done:
.d86e	60		rts		                rts
.d86f					print_string:
.d86f	20 55 d8	jsr $d855	                jsr print_string_no_lf
.d872	4c 63 89	jmp $8963	                jmp xt_cr               ; JSR/RTS because never compiled
.d875					print_u:
.d875	20 a2 a7	jsr $a7a2	                jsr xt_zero                     ; 0
.d878	20 5a 93	jsr $935a	                jsr xt_less_number_sign         ; <#
.d87b	20 de 97	jsr $97de	                jsr xt_number_sign_s            ; #S
.d87e	20 bc 97	jsr $97bc	                jsr xt_number_sign_greater      ; #>
.d881	4c fd a4	jmp $a4fd	                jmp xt_type                     ; JSR/RTS because never compiled

;******  Return to file: platform/platform-py65mon.asm

.f010					v_nmi:
.f010					v_reset:
.f010					v_irq:
.f010					kernel_init:
.f010	78		sei		                sei             ; Disable interrupts
.f011	a2 00		ldx #$00	                ldx #0
.f013	bd 2c f0	lda $f02c,x	-               lda s_kernel_id,x
.f016	f0 06		beq $f01e	                beq _done
.f018	20 27 f0	jsr $f027	                jsr kernel_putc
.f01b	e8		inx		                inx
.f01c	80 f5		bra $f013	                bra -
.f01e					_done:
.f01e	4c 00 80	jmp $8000	                jmp forth
.f021					kernel_getc:
.f021					_loop:
.f021	ad 04 f0	lda $f004	                lda $f004
.f024	f0 fb		beq $f021	                beq _loop
.f026	60		rts		                rts
.f027					kernel_putc:
.f027	8d 01 f0	sta $f001	                sta $f001
.f02a	60		rts		                rts
.f02b					platform_bye:
.f02b	00		brk #		                brk
.f02c					s_kernel_id:
>f02c	54 61 6c 69 20 46 6f 72		        .text "Tali Forth 2 default kernel for py65mon (04. Dec 2022)", AscLF, 0
>f034	74 68 20 32 20 64 65 66 61 75 6c 74 20 6b 65 72
>f044	6e 65 6c 20 66 6f 72 20 70 79 36 35 6d 6f 6e 20
>f054	28 30 34 2e 20 44 65 63 20 32 30 32 32 29 0a 00
>fffa	10 f0				.word v_nmi
>fffc	10 f0				.word v_reset
>fffe	10 f0				.word v_irq

;******  End of listing
