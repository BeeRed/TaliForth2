
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass --nostart --list=docs/py65mon-listing.txt --labels=docs/py65mon-labelmap.txt --output taliforth-py65mon.bin platform/platform-py65mon.asm
; Fri May 10 21:27:52 2024

;Offset	;PC	;Hex		;Monitor	;Source

;******  Processing input file: platform/platform-py65mon.asm

=$0000						ram_start = $0000          ; start of installed 32 KiB of RAM
=32767						ram_end   = $8000-1        ; end of installed RAM
=$0000						zpage     = ram_start      ; begin of Zero Page ($0000-$00ff)
=$7f						zpage_end = $7F            ; end of Zero Page used ($0000-$007f)
=$0100						stack0    = $0100          ; begin of Return Stack ($0100-$01ff)
=31744						hist_buff = ram_end-$03ff  ; begin of history buffers
=$0000						user0     = zpage            ; TaliForth2 system variables
=$ff						rsp0      = $ff              ; initial Return Stack Pointer (65c02 stack)
=$ff						bsize     = $ff              ; size of input/output buffers
=512						buffer0   = stack0+$100      ; input buffer ($0200-$027f)
=768						cp0       = buffer0+bsize+1  ; Dictionary starts after last buffer
=31744						cp_end    = hist_buff        ; Last RAM byte available for code
=$ff						padoffset = $ff              ; offset from CP to PAD (holds number strings)
=						TALI_OPTIONAL_WORDS := [ "ed", "editor", "ramdrive", "block", "environment?", "assembler", "disassembler", "wordlist" ]
=["lf"]						TALI_OPTION_CR_EOL := [ "lf" ]
=1						TALI_OPTION_HISTORY := 1
=0						TALI_OPTION_TERSE := 0

;******  Processing file: platform/../taliforth.asm

.8000						code0:
.8000						forth:

;******  Processing file: platform/../words/all.asm

.8000						xt_cold:
.8000		d8		cld		                cld
.8001		a9 2d		lda #$2d	                lda #<kernel_putc
.8003		85 12		sta $12		                sta output
.8005		a9 f0		lda #$f0	                lda #>kernel_putc
.8007		85 13		sta $13		                sta output+1
.8009		a2 1d		ldx #$1d	                ldx #cold_zp_table_end-cold_zp_table-1
.800b						_load_zp_loop:
.800b		bd 0f b3	lda $b30f,x	                lda cold_zp_table,x
.800e		95 00		sta $00,x	                sta zpage,x
.8010		ca		dex		                dex
.8011		d0 f8		bne $800b	                bne _load_zp_loop
.8013		ad 0f b3	lda $b30f	                lda cold_zp_table
.8016		85 00		sta $00		                sta zpage
.8018		a2 ff		ldx #$ff	                ldx #rsp0
.801a		9a		txs		                txs
.801b		a2 78		ldx #$78	                ldx #dsp0
.801d		a0 35		ldy #$35	                ldy #cold_user_table_end-cold_user_table-1
.801f		a9 00		lda #$00	                lda #0
.8021						_load_user_vars_loop:
.8021		b9 2d b3	lda $b32d,y	                lda cold_user_table,y
.8024		91 08		sta ($08),y	                sta (up),y
.8026		88		dey		                dey
.8027		d0 f8		bne $8021	                bne _load_user_vars_loop
.8029		ad 2d b3	lda $b32d	                lda cold_user_table
.802c		92 08		sta ($08)	                sta (up)
.802e		20 fa 84	jsr $84fa	                jsr xt_cr
.8031		ca		dex		                dex
.8032		ca		dex		                dex
.8033		ca		dex		                dex
.8034		ca		dex		                dex
.8035		a9 fd		lda #$fd	                lda #<forth_words_start
.8037		95 02		sta $02,x	                sta 2,x
.8039		a9 b9		lda #$b9	                lda #>forth_words_start
.803b		95 03		sta $03,x	                sta 3,x
.803d		a9 e2		lda #$e2	                lda #<(user_words_end-forth_words_start)
.803f		95 00		sta $00,x	                sta 0,x
.8041		a9 00		lda #$00	                lda #>(user_words_end-forth_words_start)
.8043		95 01		sta $01,x	                sta 1,x
.8045		20 99 89	jsr $8999	                jsr xt_evaluate
.8048		9c 00 7c	stz $7c00	                stz hist_buff
.804b		9c 80 7c	stz $7c80	                stz hist_buff+$80
.804e		9c 00 7d	stz $7d00	                stz hist_buff+$100
.8051		9c 80 7d	stz $7d80	                stz hist_buff+$180
.8054		9c 00 7e	stz $7e00	                stz hist_buff+$200
.8057		9c 80 7e	stz $7e80	                stz hist_buff+$280
.805a		9c 00 7f	stz $7f00	                stz hist_buff+$300
.805d		9c 80 7f	stz $7f80	                stz hist_buff+$380
.8060						xt_abort:
.8060		a2 78		ldx #$78	                ldx #dsp0
.8062						xt_quit:
.8062		8a		txa		                txa             ; Save the DSP that we just defined
.8063		a2 ff		ldx #$ff	                ldx #rsp0
.8065		9a		txs		                txs
.8066		aa		tax		                tax             ; Restore the DSP. Dude, seriously.
.8067		64 04		stz $04		                stz ip
.8069		64 05		stz $05		                stz ip+1
.806b		64 0a		stz $0a		                stz insrc
.806d		64 0b		stz $0b		                stz insrc+1
.806f		a9 00		lda #$00	                lda #0
.8071		a0 04		ldy #$04	                ldy #blk_offset
.8073		91 08		sta ($08),y	                sta (up),y
.8075		c8		iny		                iny
.8076		91 08		sta ($08),y	                sta (up),y
.8078		a9 fc		lda #$fc	                lda #(256-4)
.807a		85 1f		sta $1f		                sta loopctrl
.807c		64 1a		stz $1a		                stz state
.807e		64 1b		stz $1b		                stz state+1
.8080						_get_line:
.8080		a9 00		lda #$00	                lda #<buffer0   ; input buffer, this is paranoid
.8082		85 0c		sta $0c		                sta cib
.8084		a9 02		lda #$02	                lda #>buffer0
.8086		85 0d		sta $0d		                sta cib+1
.8088		64 0e		stz $0e		                stz ciblen
.808a		64 0f		stz $0f		                stz ciblen+1
.808c		20 3e 90	jsr $903e	                jsr xt_refill           ; ( -- f )
.808f		b5 00		lda $00,x	                lda 0,x
.8091		d0 05		bne $8098	                bne _success
.8093		a9 06		lda #$06	                lda #err_refill
.8095		4c 79 d7	jmp $d779	                jmp error
.8098						_success:
.8098		e8		inx		                inx                     ; drop
.8099		e8		inx		                inx
.809a		20 e0 d6	jsr $d6e0	                jsr interpret
.809d		e0 78		cpx #$78	                cpx #dsp0
.809f		f0 05		beq $80a6	                beq _stack_ok
.80a1		90 03		bcc $80a6	                bcc _stack_ok           ; DSP must always be smaller than DSP0
.80a3		4c 77 d7	jmp $d777	                jmp underflow_error
.80a6						_stack_ok:
.80a6		a5 1a		lda $1a		                lda state
.80a8		f0 02		beq $80ac	                beq _print
.80aa		a9 01		lda #$01	                lda #1                  ; number for "compile" string
.80ac						_print:
.80ac		20 ca d7	jsr $d7ca	                jsr print_string
.80af		80 cf		bra $8080	                bra _get_line
.80b1						z_cold:
.80b1						z_abort:
.80b1						z_quit:

;******  Processing file: platform/../words/core.asm

.80b1						xt_abort_quote:
.80b1		20 d6 90	jsr $90d6	                jsr xt_s_quote          ; S"
.80b4		a0 80		ldy #$80	                ldy #>abort_quote_runtime
.80b6		a9 bc		lda #$bc	                lda #<abort_quote_runtime
.80b8		20 8d d5	jsr $d58d	                jsr cmpl_call_ya     ; may not be JMP as JSR/RTS
.80bb		60		rts		z_abort_quote:  rts
.80bc						abort_quote_runtime:
.80bc		b5 04		lda $04,x	                lda 4,x
.80be		15 05		ora $05,x	                ora 5,x
.80c0		f0 09		beq $80cb	                beq _done       ; if FALSE, we're done
.80c2		20 d3 95	jsr $95d3	                jsr xt_type
.80c5		20 fa 84	jsr $84fa	                jsr xt_cr
.80c8		4c 60 80	jmp $8060	                jmp xt_abort    ; not JSR, so never come back
.80cb						_done:
.80cb		8a		txa		                txa
.80cc		18		clc		                clc
.80cd		69 06		adc #$06	                adc #6
.80cf		aa		tax		                tax
.80d0		60		rts		                rts
.80d1						xt_abs:
.80d1		20 63 d7	jsr $d763	                jsr underflow_1
.80d4		b5 01		lda $01,x	                lda 1,x
.80d6		10 0d		bpl $80e5	                bpl _done       ; positive number, easy money!
.80d8		38		sec		                sec
.80d9		a9 00		lda #$00	                lda #0
.80db		f5 00		sbc $00,x	                sbc 0,x         ; LSB
.80dd		95 00		sta $00,x	                sta 0,x
.80df		a9 00		lda #$00	                lda #0          ; MSB
.80e1		f5 01		sbc $01,x	                sbc 1,x
.80e3		95 01		sta $01,x	                sta 1,x
.80e5						_done:
.80e5		60		rts		z_abs:          rts
.80e6						xt_accept:
.80e6		20 68 d7	jsr $d768	                jsr underflow_2
.80e9		b5 00		lda $00,x	                lda 0,x
.80eb		15 01		ora $01,x	                ora 1,x
.80ed		d0 09		bne $80f8	                bne _not_zero
.80ef		e8		inx		                inx
.80f0		e8		inx		                inx
.80f1		74 00		stz $00,x	                stz 0,x
.80f3		74 01		stz $01,x	                stz 1,x
.80f5		4c c4 81	jmp $81c4	                jmp accept_done
.80f8						_not_zero:
.80f8		b5 00		lda $00,x	                lda 0,x         ; number of chars to get in tmp2 ...
.80fa		85 27		sta $27		                sta tmp2
.80fc		64 28		stz $28		                stz tmp2+1      ; ... but we only accept max 255 chars
.80fe		b5 02		lda $02,x	                lda 2,x         ; address of buffer is NOS, to tmp1
.8100		85 25		sta $25		                sta tmp1
.8102		b5 03		lda $03,x	                lda 3,x
.8104		85 26		sta $26		                sta tmp1+1
.8106		e8		inx		                inx
.8107		e8		inx		                inx
.8108		a0 00		ldy #$00	                ldy #0
.810a		a5 1c		lda $1c		                lda status
.810c		29 f7		and #$f7	                and #$F7
.810e		1a		inc a		               ina
.810f		09 08		ora #$08	                ora #%00001000
.8111		85 1c		sta $1c		                sta status
.8113						accept_loop:
.8113		20 da 8a	jsr $8ada	                jsr key_a
.8116		c9 0a		cmp #$0a	                cmp #AscLF
.8118		f0 20		beq $813a	                beq _eol
.811a		c9 0d		cmp #$0d	                cmp #AscCR
.811c		f0 1c		beq $813a	                beq _eol
.811e		c9 08		cmp #$08	                cmp #AscBS
.8120		f0 22		beq $8144	                beq _backspace
.8122		c9 7f		cmp #$7f	                cmp #AscDEL     ; (CTRL-h)
.8124		f0 1e		beq $8144	                beq _backspace
.8126		c9 10		cmp #$10	                cmp #AscCP
.8128		f0 36		beq $8160	                beq _ctrl_p
.812a		c9 0e		cmp #$0e	                cmp #AscCN
.812c		f0 44		beq $8172	                beq _ctrl_n
.812e		91 25		sta ($25),y	                sta (tmp1),y
.8130		c8		iny		                iny
.8131		20 ac 87	jsr $87ac	                jsr emit_a
.8134		c4 27		cpy $27		                cpy tmp2        ; reached character limit?
.8136		d0 db		bne $8113	                bne accept_loop       ; fall through if buffer limit reached
.8138		80 03		bra $813d	                bra _buffer_full
.813a						_eol:
.813a		20 c7 92	jsr $92c7	                jsr xt_space    ; print final space
.813d						_buffer_full:
.813d		94 00		sty $00,x	                sty 0,x         ; Y contains number of chars accepted already
.813f		74 01		stz $01,x	                stz 1,x         ; we only accept 256 chars
.8141		4c c4 81	jmp $81c4	                jmp accept_done
.8144						_backspace:
.8144		c0 00		cpy #$00	                cpy #0          ; buffer empty?
.8146		d0 06		bne $814e	                bne +
.8148		a9 07		lda #$07	                lda #AscBELL    ; complain and don't delete beyond the start of line
.814a		20 ac 87	jsr $87ac	                jsr emit_a
.814d		c8		iny		                iny
.814e						+
.814e		88		dey		                dey
.814f		a9 08		lda #$08	                lda #AscBS      ; move back one
.8151		20 ac 87	jsr $87ac	                jsr emit_a
.8154		a9 20		lda #$20	                lda #AscSP      ; print a space (rubout)
.8156		20 ac 87	jsr $87ac	                jsr emit_a
.8159		a9 08		lda #$08	                lda #AscBS      ; move back over space
.815b		20 ac 87	jsr $87ac	                jsr emit_a
.815e		80 b3		bra $8113	                bra accept_loop
.8160						_ctrl_p:
.8160		a5 1c		lda $1c		                lda status
.8162		29 07		and #$07	                and #7
.8164		d0 08		bne $816e	                bne _ctrl_p_dec
.8166		a5 1c		lda $1c		                lda status
.8168		09 07		ora #$07	                ora #7
.816a		85 1c		sta $1c		                sta status
.816c		80 11		bra $817f	                bra _recall_history
.816e						_ctrl_p_dec:
.816e		c6 1c		dec $1c		                dec status
.8170		80 0d		bra $817f	                bra _recall_history
.8172						_ctrl_n:
.8172		a9 08		lda #$08	                lda #$8
.8174		24 1c		bit $1c		                bit status
.8176		d0 07		bne $817f	                bne _recall_history
.8178		a5 1c		lda $1c		                lda status
.817a		29 f7		and #$f7	                and #$F7
.817c		1a		inc a		               ina
.817d		85 1c		sta $1c		                sta status
.817f						_recall_history:
.817f		a9 08		lda #$08	                lda #%00001000
.8181		14 1c		trb $1c		                trb status
.8183		20 df 81	jsr $81df	                jsr accept_total_recall
.8186		a9 0d		lda #$0d	                lda #AscCR
.8188		20 ac 87	jsr $87ac	                jsr emit_a
.818b						input_clear:
.818b		c0 00		cpy #$00	                cpy #0
.818d		f0 08		beq $8197	                beq input_cleared
.818f		a9 20		lda #$20	                lda #AscSP
.8191		20 ac 87	jsr $87ac	                jsr emit_a
.8194		88		dey		                dey
.8195		80 f4		bra $818b	                bra input_clear
.8197						input_cleared:
.8197		a9 0d		lda #$0d	                lda #AscCR
.8199		20 ac 87	jsr $87ac	                jsr emit_a
.819c		b1 29		lda ($29),y	                lda (tmp3),y
.819e		85 1d		sta $1d		                sta status+1
.81a0		e6 29		inc $29		                inc tmp3
.81a2		d0 02		bne $81a6	                bne +           ; Increment the upper byte on carry.
.81a4		e6 2a		inc $2a		                inc tmp3+1
.81a6						+
.81a6		a9 0d		lda #$0d	                lda #AscCR
.81a8		20 ac 87	jsr $87ac	                jsr emit_a
.81ab						_history_loop:
.81ab		c4 1d		cpy $1d		                cpy status+1
.81ad		d0 03		bne $81b2	                bne +
.81af		4c 13 81	jmp $8113	                jmp accept_loop       ; Needs a long jump
.81b2						+
.81b2		c4 27		cpy $27		                cpy tmp2
.81b4		f0 0a		beq $81c0	                beq _hist_filled_buffer
.81b6		b1 29		lda ($29),y	                lda (tmp3),y
.81b8		91 25		sta ($25),y	                sta (tmp1),y
.81ba		20 ac 87	jsr $87ac	                jsr emit_a
.81bd		c8		iny		                iny
.81be		80 eb		bra $81ab	                bra _history_loop
.81c0						_hist_filled_buffer:
.81c0		88		dey		                dey
.81c1		4c 13 81	jmp $8113	                jmp accept_loop
.81c4						accept_done:
.81c4		20 df 81	jsr $81df	                jsr accept_total_recall
.81c7		85 1d		sta $1d		                sta status+1
.81c9		a0 00		ldy #$00	                ldy #0
.81cb		91 29		sta ($29),y	                sta (tmp3),y
.81cd		e6 29		inc $29		                inc tmp3
.81cf		d0 02		bne $81d3	                bne +           ; Increment the upper byte on carry.
.81d1		e6 2a		inc $2a		                inc tmp3+1
.81d3						+
.81d3						_save_history_loop:
.81d3		c4 1d		cpy $1d		                cpy status+1
.81d5		f0 07		beq $81de	                beq _save_history_done
.81d7		b1 25		lda ($25),y	                lda (tmp1),y
.81d9		91 29		sta ($29),y	                sta (tmp3),y
.81db		c8		iny		                iny
.81dc		80 f5		bra $81d3	                bra _save_history_loop
.81de						_save_history_done:
.81de						z_accept:
.81de		60		rts		                rts
.81df						accept_total_recall:
.81df		a9 00		lda #$00	                lda #<hist_buff
.81e1		85 29		sta $29		                sta tmp3
.81e3		a9 7c		lda #$7c	                lda #>hist_buff
.81e5		85 2a		sta $2a		                sta tmp3+1
.81e7		a5 1c		lda $1c		                lda status
.81e9		6a		ror a		                ror
.81ea		29 03		and #$03	                and #3
.81ec		18		clc		                clc
.81ed		65 2a		adc $2a		                adc tmp3+1
.81ef		85 2a		sta $2a		                sta tmp3+1
.81f1		a5 1c		lda $1c		                lda status
.81f3		6a		ror a		                ror             ; Rotate through carry into msb.
.81f4		6a		ror a		                ror
.81f5		29 80		and #$80	                and #$80
.81f7		18		clc		                clc
.81f8		65 29		adc $29		                adc tmp3
.81fa		85 29		sta $29		                sta tmp3
.81fc		90 02		bcc $8200	                bcc +           ; Increment the upper byte on carry.
.81fe		e6 2a		inc $2a		                inc tmp3+1
.8200						+
.8200		98		tya		                tya
.8201		c9 80		cmp #$80	                cmp #$80
.8203		90 02		bcc $8207	                bcc +
.8205		a9 7f		lda #$7f	                lda #$7F
.8207						+
.8207		60		rts		                rts
.8208						xt_action_of:
.8208		a5 1a		lda $1a		                lda state
.820a		05 1b		ora $1b		                ora state+1
.820c		f0 0c		beq $821a	                beq _interpreting
.820e						_compiling:
.820e		20 16 83	jsr $8316	                jsr xt_bracket_tick
.8211		a0 86		ldy #$86	                ldy #>xt_defer_fetch
.8213		a9 04		lda #$04	                lda #<xt_defer_fetch
.8215		20 8d d5	jsr $d58d	                jsr cmpl_call_ya
.8218		80 06		bra $8220	                bra _done
.821a						_interpreting:
.821a		20 60 93	jsr $9360	                jsr xt_tick
.821d		20 04 86	jsr $8604	                jsr xt_defer_fetch
.8220						_done:
.8220		60		rts		z_action_of:           rts
.8221						xt_again:
.8221		20 63 d7	jsr $d763	                jsr underflow_1
.8224		20 aa d5	jsr $d5aa	                jsr cmpl_jump_tos
.8227		60		rts		z_again:        rts
.8228						xt_align:
.8228						xt_aligned:
.8228						z_align:
.8228						z_aligned:
.8228		60		rts		                rts             ; stripped out during native compile
.8229						xt_allot:
.8229		20 63 d7	jsr $d763	                jsr underflow_1
.822c		b5 01		lda $01,x	                lda 1,x
.822e		30 22		bmi $8252	                bmi _release
.8230		18		clc		                clc
.8231		a5 00		lda $00		                lda cp
.8233		75 00		adc $00,x	                adc 0,x
.8235		85 00		sta $00		                sta cp
.8237		a5 01		lda $01		                lda cp+1
.8239		75 01		adc $01,x	                adc 1,x
.823b		85 01		sta $01		                sta cp+1
.823d		a0 00		ldy #$00	                ldy #<cp_end
.823f		c4 00		cpy $00		                cpy cp
.8241		a9 7c		lda #$7c	                lda #>cp_end
.8243		e5 01		sbc $01		                sbc cp+1
.8245		b0 48		bcs $828f	                bcs _done               ; we're fine.
.8247		84 00		sty $00		                sty cp                  ; still #<cp_end
.8249		a9 7c		lda #$7c	                lda #>cp_end
.824b		85 01		sta $01		                sta cp+1
.824d		a9 00		lda #$00	                lda #err_allot
.824f		4c 79 d7	jmp $d779	                jmp error
.8252						_release:
.8252		ca		dex		                dex
.8253		ca		dex		                dex
.8254		a5 00		lda $00		                lda cp
.8256		95 00		sta $00,x	                sta 0,x
.8258		a5 01		lda $01		                lda cp+1
.825a		95 01		sta $01,x	                sta 1,x
.825c		20 55 8f	jsr $8f55	                jsr xt_plus                     ; new CP is now TOS
.825f		ca		dex		                dex
.8260		ca		dex		                dex                             ; new CP now NOS
.8261		a9 00		lda #$00	                lda #<cp0
.8263		95 00		sta $00,x	                sta 0,x
.8265		a9 03		lda #$03	                lda #>cp0
.8267		95 01		sta $01,x	                sta 1,x                         ; CP0 is TOS
.8269		20 a1 d6	jsr $d6a1	                jsr compare_16bit               ; still ( CP CP0 )
.826c		f0 17		beq $8285	                beq _nega_done
.826e		30 15		bmi $8285	                bmi _nega_done
.8270		a9 00		lda #$00	                lda #<cp0
.8272		85 00		sta $00		                sta cp
.8274		a9 03		lda #$03	                lda #>cp0
.8276		85 01		sta $01		                sta cp+1
.8278		a9 df		lda #$df	                lda #<dictionary_start
.827a		85 02		sta $02		                sta dp
.827c		a9 ba		lda #$ba	                lda #>dictionary_start
.827e		85 03		sta $03		                sta dp+1
.8280		a9 0a		lda #$0a	                lda #err_negallot
.8282		4c 79 d7	jmp $d779	                jmp error
.8285						_nega_done:
.8285		b5 02		lda $02,x	                lda 2,x
.8287		85 00		sta $00		                sta cp
.8289		b5 03		lda $03,x	                lda 3,x
.828b		85 01		sta $01		                sta cp+1
.828d		e8		inx		                inx
.828e		e8		inx		                inx                     ; drop through to _done
.828f						_done:
.828f		e8		inx		                inx
.8290		e8		inx		                inx
.8291						z_allot:
.8291		60		rts		                rts
.8292						xt_and:
.8292		20 68 d7	jsr $d768	                jsr underflow_2
.8295		b5 00		lda $00,x	                lda 0,x
.8297		35 02		and $02,x	                and 2,x
.8299		95 02		sta $02,x	                sta 2,x
.829b		b5 01		lda $01,x	                lda 1,x
.829d		35 03		and $03,x	                and 3,x
.829f		95 03		sta $03,x	                sta 3,x
.82a1		e8		inx		                inx
.82a2		e8		inx		                inx
.82a3		60		rts		z_and:          rts
.82a4						xt_at_xy:
.82a4		20 68 d7	jsr $d768	                jsr underflow_2
.82a7		a5 18		lda $18		                lda base
.82a9		48		pha		                pha
.82aa		a9 0a		lda #$0a	                lda #10
.82ac		85 18		sta $18		                sta base
.82ae		a9 1b		lda #$1b	                lda #AscESC
.82b0		20 ac 87	jsr $87ac	                jsr emit_a
.82b3		a9 5b		lda #$5b	                lda #'['
.82b5		20 ac 87	jsr $87ac	                jsr emit_a
.82b8		20 eb 8d	jsr $8deb	                jsr xt_one_plus ; AT-XY is zero based, but ANSI is 1 based
.82bb		20 d0 d7	jsr $d7d0	                jsr print_u
.82be		a9 3b		lda #$3b	                lda #';'
.82c0		20 ac 87	jsr $87ac	                jsr emit_a
.82c3		20 eb 8d	jsr $8deb	                jsr xt_one_plus ; AT-XY is zero based, but ANSI is 1 based
.82c6		20 d0 d7	jsr $d7d0	                jsr print_u
.82c9		a9 48		lda #$48	                lda #'H'
.82cb		20 ac 87	jsr $87ac	                jsr emit_a
.82ce		68		pla		                pla
.82cf		85 18		sta $18		                sta base
.82d1		60		rts		z_at_xy:        rts
.82d2						xt_backslash:
.82d2		a0 04		ldy #$04	                ldy #blk_offset
.82d4		b1 08		lda ($08),y	                lda (up),y
.82d6		c8		iny		                iny
.82d7		11 08		ora ($08),y	                ora (up),y
.82d9		f0 19		beq $82f4	                beq backslash_not_block
.82db		a5 10		lda $10		                lda toin
.82dd		29 3f		and #$3f	                and #$3F
.82df		f0 1b		beq $82fc	                beq z_backslash
.82e1		c9 01		cmp #$01	                cmp #$1
.82e3		f0 17		beq $82fc	                beq z_backslash
.82e5		a5 10		lda $10		                lda toin
.82e7		29 c0		and #$c0	                and #$C0        ; Clear lower bits to move to beginning of line.
.82e9		18		clc		                clc             ; Add $40 (64 decimal) to move to next line.
.82ea		69 40		adc #$40	                adc #$40
.82ec		85 10		sta $10		                sta toin
.82ee		90 0c		bcc $82fc	                bcc z_backslash
.82f0		e6 11		inc $11		                inc toin+1
.82f2		80 08		bra $82fc	                bra z_backslash
.82f4						backslash_not_block:
.82f4		a5 0e		lda $0e		                lda ciblen
.82f6		85 10		sta $10		                sta toin
.82f8		a5 0f		lda $0f		                lda ciblen+1
.82fa		85 11		sta $11		                sta toin+1
.82fc		60		rts		z_backslash:    rts
.82fd						xt_base:
.82fd		ca		dex		                dex
.82fe		ca		dex		                dex
.82ff		a9 18		lda #$18	                lda #<base
.8301		95 00		sta $00,x	                sta 0,x         ; LSB
.8303		74 01		stz $01,x	                stz 1,x         ; MSB is always 0
.8305		60		rts		z_base:         rts
.8306						xt_bl:
.8306		ca		dex		                dex
.8307		ca		dex		                dex
.8308		a9 20		lda #$20	                lda #AscSP
.830a		95 00		sta $00,x	                sta 0,x
.830c		74 01		stz $01,x	                stz 1,x
.830e		60		rts		z_bl:           rts
.830f						xt_bracket_char:
.830f		20 55 83	jsr $8355	                jsr xt_char
.8312		20 1b 8b	jsr $8b1b	                jsr xt_literal
.8315		60		rts		z_bracket_char: rts
.8316						xt_bracket_tick:
.8316		20 60 93	jsr $9360	                jsr xt_tick
.8319		20 1b 8b	jsr $8b1b	                jsr xt_literal
.831c		60		rts		z_bracket_tick: rts
.831d						xt_buffer_colon:
.831d		20 00 85	jsr $8500	                jsr xt_create
.8320		20 29 82	jsr $8229	                jsr xt_allot
.8323		60		rts		z_buffer_colon: rts
.8324						xt_c_comma:
.8324		20 63 d7	jsr $d763	                jsr underflow_1
.8327		b5 00		lda $00,x	                lda 0,x
.8329		20 9d d5	jsr $d59d	                jsr cmpl_byte_a
.832c		e8		inx		                inx
.832d		e8		inx		                inx
.832e		60		rts		z_c_comma:      rts
.832f						xt_c_fetch:
.832f		20 63 d7	jsr $d763	                jsr underflow_1
.8332		a1 00		lda ($00,x)	                lda (0,x)
.8334		95 00		sta $00,x	                sta 0,x
.8336		74 01		stz $01,x	                stz 1,x         ; Ignore LSB
.8338		60		rts		z_c_fetch:      rts
.8339						xt_c_store:
.8339		20 68 d7	jsr $d768	                jsr underflow_2
.833c		b5 02		lda $02,x	                lda 2,x
.833e		81 00		sta ($00,x)	                sta (0,x)
.8340		e8		inx		                inx
.8341		e8		inx		                inx
.8342		e8		inx		                inx
.8343		e8		inx		                inx
.8344		60		rts		z_c_store:      rts
.8345						xt_cell_plus:
.8345		20 63 d7	jsr $d763	                jsr underflow_1
.8348		f6 00		inc $00,x	                inc 0,x
.834a		d0 02		bne $834e	                bne +
.834c		f6 01		inc $01,x	                inc 1,x
.834e						+
.834e		f6 00		inc $00,x	                inc 0,x
.8350		d0 02		bne $8354	                bne _done
.8352		f6 01		inc $01,x	                inc 1,x
.8354						_done:
.8354		60		rts		z_cell_plus:    rts
.8355						xt_char:
.8355		20 53 8e	jsr $8e53	                jsr xt_parse_name
.8358		b5 00		lda $00,x	                lda 0,x
.835a		15 01		ora $01,x	                ora 1,x
.835c		d0 05		bne $8363	                bne _not_empty
.835e		a9 05		lda #$05	                lda #err_noname
.8360		4c 79 d7	jmp $d779	                jmp error
.8363						_not_empty:
.8363		e8		inx		                inx             ; drop number of characters, leave addr
.8364		e8		inx		                inx
.8365		a1 00		lda ($00,x)	                lda (0,x)       ; get character (equivalent to C@)
.8367		95 00		sta $00,x	                sta 0,x
.8369		74 01		stz $01,x	                stz 1,x         ; MSB is always zero
.836b		60		rts		z_char:         rts
.836c						xt_chars:
.836c		20 63 d7	jsr $d763	                jsr underflow_1
.836f		60		rts		z_chars:        rts
.8370						xt_colon:
.8370		a5 1a		lda $1a		                lda state
.8372		05 1b		ora $1b		                ora state+1
.8374		f0 05		beq $837b	                beq +
.8376		a9 07		lda #$07	                lda #err_state
.8378		4c 79 d7	jmp $d779	                jmp error
.837b						+
.837b		c6 1a		dec $1a		                dec state
.837d		c6 1b		dec $1b		                dec state+1
.837f		a9 40		lda #$40	                lda #%01000000
.8381		04 1c		tsb $1c		                tsb status
.8383		20 ba d6	jsr $d6ba	                jsr current_to_dp
.8386		a5 03		lda $03		                lda dp+1            ; CREATE uses a lot of variables
.8388		48		pha		                pha
.8389		a5 02		lda $02		                lda dp
.838b		48		pha		                pha
.838c		a9 80		lda #$80	                lda #%10000000
.838e		04 1c		tsb $1c		                tsb status
.8390		20 00 85	jsr $8500	                jsr xt_create
.8393		20 ba d6	jsr $d6ba	                jsr current_to_dp   ; This might be able to be omitted
.8396		a5 02		lda $02		                lda dp
.8398		85 06		sta $06		                sta workword
.839a		a5 03		lda $03		                lda dp+1
.839c		85 07		sta $07		                sta workword+1
.839e		68		pla		                pla
.839f		85 02		sta $02		                sta dp
.83a1		68		pla		                pla
.83a2		85 03		sta $03		                sta dp+1
.83a4		20 cd d6	jsr $d6cd	                jsr dp_to_current
.83a7		a5 00		lda $00		                lda cp
.83a9		38		sec		                sec
.83aa		e9 03		sbc #$03	                sbc #3
.83ac		85 00		sta $00		                sta cp
.83ae		b0 02		bcs $83b2	                bcs _done
.83b0		c6 01		dec $01		                dec cp+1
.83b2						_done:
.83b2		60		rts		z_colon:        rts
.83b3						xt_colon_noname:
.83b3		a5 1a		lda $1a		                lda state
.83b5		05 1b		ora $1b		                ora state+1
.83b7		f0 05		beq $83be	                beq +
.83b9		a9 07		lda #$07	                lda #err_state
.83bb		4c 79 d7	jmp $d779	                jmp error
.83be						+
.83be		c6 1a		dec $1a		                dec state
.83c0		c6 1b		dec $1b		                dec state+1
.83c2		a9 40		lda #$40	                lda #%01000000
.83c4		14 1c		trb $1c		                trb status
.83c6		a5 00		lda $00		                lda cp
.83c8		85 06		sta $06		                sta workword
.83ca		a5 01		lda $01		                lda cp+1
.83cc		85 07		sta $07		                sta workword+1
.83ce						_done:
.83ce		60		rts		z_colon_noname:        rts
.83cf						xt_comma:
.83cf		20 63 d7	jsr $d763	                jsr underflow_1
.83d2		a0 02		ldy #$02	                ldy #2
.83d4		b5 00		lda $00,x	_twice:         lda 0,x
.83d6		20 9d d5	jsr $d59d	                jsr cmpl_byte_a
.83d9		e8		inx		                inx
.83da		88		dey		                dey
.83db		d0 f7		bne $83d4	                bne _twice
.83dd		60		rts		z_comma:        rts
.83de						xt_compile_comma:
.83de		20 63 d7	jsr $d763	                jsr underflow_1
.83e1		20 42 87	jsr $8742	                jsr xt_dup
.83e4		20 42 9b	jsr $9b42	                jsr xt_int_to_name
.83e7		b5 00		lda $00,x	                lda 0,x
.83e9		15 01		ora $01,x	                ora 1,x
.83eb		f0 2b		beq $8418	                beq _compile_as_jsr      ; No nt so unknown size; must compile as a JSR
.83ed						_check_nt:
.83ed		20 42 87	jsr $8742	                jsr xt_dup
.83f0		20 eb 8d	jsr $8deb	                jsr xt_one_plus         ; status is at nt+1
.83f3		a1 00		lda ($00,x)	                lda (0,x)               ; get status byte
.83f5		e8		inx		                inx                     ; drop pointer
.83f6		e8		inx		                inx
.83f7		85 29		sta $29		                sta tmp3                ; keep copy of status byte
.83f9		29 08		and #$08	                and #NN
.83fb		d0 1b		bne $8418	                bne _compile_as_jsr     ; never native
.83fd						_maybe_native:
.83fd		20 6a 9d	jsr $9d6a	                jsr xt_wordsize
.8400		a0 00		ldy #$00	                ldy #0
.8402						_strip_loop:
.8402		b9 8d 84	lda $848d,y	                lda strip_table,y       ; LSB of first word
.8405		d5 02		cmp $02,x	                cmp 2,x                 ; LSB of xt
.8407		d0 07		bne $8410	                bne _next_entry
.8409		b9 8e 84	lda $848e,y	                lda strip_table+1,y
.840c		d5 03		cmp $03,x	                cmp 3,x
.840e		f0 0d		beq $841d	                beq _found_entry
.8410						_next_entry:
.8410		c8		iny		                iny
.8411		c8		iny		                iny
.8412		c0 0a		cpy #$0a	                cpy #strip_table_size
.8414		d0 ec		bne $8402	                bne _strip_loop
.8416		f0 21		beq $8439	                beq _underflow_strip
.8418						_compile_as_jsr:
.8418		e8		inx		                inx             ; either way drop TOS
.8419		e8		inx		                inx
.841a		4c a6 d5	jmp $d5a6	                jmp cmpl_call_tos
.841d						_found_entry:
.841d		98		tya		                tya
.841e		4a		lsr a		                lsr
.841f		a8		tay		                tay
.8420		b9 97 84	lda $8497,y	                lda strip_size,y
.8423		48		pha		                pha                     ; save a copy
.8424		18		clc		                clc
.8425		75 02		adc $02,x	                adc 2,x
.8427		95 02		sta $02,x	                sta 2,x
.8429		90 02		bcc $842d	                bcc +
.842b		f6 03		inc $03,x	                inc 3,x                 ; we just care about the carry
.842d						+
.842d		68		pla		                pla
.842e		0a		asl a		                asl a                   ; Double to cut off both top and bottom.
.842f		f5 00		sbc $00,x	                sbc 0,x
.8431		49 ff		eor #$ff	                eor #$ff
.8433		95 00		sta $00,x	                sta 0,x
.8435		90 02		bcc $8439	                bcc +                   ; note inverted carry check
.8437		d6 01		dec $01,x	                dec 1,x                 ; we just care about the borrow
.8439						+
.8439						_underflow_strip:
.8439		a5 29		lda $29		                lda tmp3
.843b		29 10		and #$10	                and #UF
.843d		f0 1f		beq $845e	                beq _check_limit
.843f		a0 02		ldy #$02	                ldy #uf_strip_offset
.8441		b1 08		lda ($08),y	                lda (up),y
.8443		c8		iny		                iny
.8444		11 08		ora ($08),y	                ora (up),y
.8446		f0 16		beq $845e	                beq _check_limit
.8448		18		clc		                clc
.8449		b5 02		lda $02,x	                lda 2,x
.844b		69 03		adc #$03	                adc #3
.844d		95 02		sta $02,x	                sta 2,x
.844f		90 02		bcc $8453	                bcc +
.8451		f6 03		inc $03,x	                inc 3,x                  ; we just care about the carry
.8453						+
.8453		38		sec		                sec
.8454		b5 00		lda $00,x	                lda 0,x
.8456		e9 03		sbc #$03	                sbc #3
.8458		95 00		sta $00,x	                sta 0,x
.845a		b0 02		bcs $845e	                bcs +
.845c		d6 01		dec $01,x	                dec 1,x                  ; we just care about the borrow
.845e						+
.845e						_check_limit:
.845e		a5 29		lda $29		                lda tmp3
.8460		29 02		and #$02	                and #AN                 ; check Always Native (AN) bit
.8462		d0 11		bne $8475	                bne cmpl_inline         ; always natively compile
.8464		a0 01		ldy #$01	                ldy #nc_limit_offset+1
.8466		b5 01		lda $01,x	                lda 1,x                 ; MSB of word size
.8468		d1 08		cmp ($08),y	                cmp (up),y              ; user-defined limit MSB
.846a		90 09		bcc $8475	                bcc cmpl_inline         ; borrow (C=1) means size < limit
.846c		d0 aa		bne $8418	                bne _compile_as_jsr     ; else non-zero means size > limit
.846e		88		dey		                dey
.846f		b1 08		lda ($08),y	                lda (up),y              ; user-defined limit LSB
.8471		d5 00		cmp $00,x	                cmp 0,x
.8473		30 a3		bmi $8418	                bmi _compile_as_jsr     ; size is too big
.8475						cmpl_inline:
.8475		20 02 8a	jsr $8a02	                jsr xt_here
.8478		20 4c 93	jsr $934c	                jsr xt_swap
.847b		20 42 87	jsr $8742	                jsr xt_dup
.847e		20 29 82	jsr $8229	                jsr xt_allot            ; allocate space for the word
.8481		20 02 8d	jsr $8d02	                jsr xt_move
.8484		60		rts		                rts
.8485						cmpl_inline_y:
.8485		ca		dex		                dex                 ; push Y TOS
.8486		ca		dex		                dex
.8487		94 00		sty $00,x	                sty 0,x
.8489		74 01		stz $01,x	                stz 1,x
.848b		80 e8		bra $8475	                bra cmpl_inline
.848d						strip_table:
>848d		f0 8f db 8f 8a 94		                .word xt_r_from, xt_r_fetch, xt_to_r    ; R>, R@, >R
>8493		b3 95 39 95			                .word xt_two_to_r, xt_two_r_from        ; 2>R, 2R>
=10						strip_table_size = * - strip_table
.8497						strip_size:
>8497		04 04 04			                .byte 4, 4, 4                           ; R>, R@, >R
>849a		06 06				                .byte 6, 6                              ; 2>R, 2R>
.849c						z_compile_comma:
.849c						xt_compile_only:
.849c		20 ba d6	jsr $d6ba	                jsr current_to_dp
.849f		a0 01		ldy #$01	                ldy #1          ; offset for status byte
.84a1		b1 02		lda ($02),y	                lda (dp),y
.84a3		09 01		ora #$01	                ora #CO        ; make sure bit 7 is set
.84a5		91 02		sta ($02),y	                sta (dp),y
.84a7		60		rts		z_compile_only: rts
.84a8						xt_value:
.84a8						xt_constant:
.84a8		20 63 d7	jsr $d763	                jsr underflow_1
.84ab		20 00 85	jsr $8500	                jsr xt_create
.84ae		38		sec		                sec
.84af		a5 00		lda $00		                lda cp
.84b1		e9 02		sbc #$02	                sbc #2
.84b3		85 25		sta $25		                sta tmp1
.84b5		a5 01		lda $01		                lda cp+1
.84b7		e9 00		sbc #$00	                sbc #0
.84b9		85 26		sta $26		                sta tmp1+1
.84bb		a9 cb		lda #$cb	                lda #<doconst           ; LSB of DOCONST
.84bd		92 25		sta ($25)	                sta (tmp1)
.84bf		a0 01		ldy #$01	                ldy #1
.84c1		a9 d5		lda #$d5	                lda #>doconst           ; MSB of DOCONST
.84c3		91 25		sta ($25),y	                sta (tmp1),y
.84c5		20 cf 83	jsr $83cf	                jsr xt_comma            ; drop through to adjust_z
.84c8						adjust_z:
.84c8		20 b3 9b	jsr $9bb3	                jsr xt_latestnt         ; gives us ( -- nt )
.84cb		b5 00		lda $00,x	                lda 0,x
.84cd		85 25		sta $25		                sta tmp1
.84cf		b5 01		lda $01,x	                lda 1,x
.84d1		85 26		sta $26		                sta tmp1+1
.84d3		a0 06		ldy #$06	                ldy #6
.84d5		b1 25		lda ($25),y	                lda (tmp1),y
.84d7		18		clc		                clc
.84d8		69 02		adc #$02	                adc #2
.84da		91 25		sta ($25),y	                sta (tmp1),y
.84dc		c8		iny		                iny
.84dd		b1 25		lda ($25),y	                lda (tmp1),y
.84df		69 00		adc #$00	                adc #0                  ; only need carry
.84e1		91 25		sta ($25),y	                sta (tmp1),y
.84e3		e8		inx		                inx
.84e4		e8		inx		                inx
.84e5						z_value:
.84e5		60		rts		z_constant:     rts
.84e6						xt_count:
.84e6		20 63 d7	jsr $d763	                jsr underflow_1
.84e9		a1 00		lda ($00,x)	                lda (0,x)       ; Get number of characters (255 max)
.84eb		a8		tay		                tay
.84ec		f6 00		inc $00,x	                inc 0,x         ; LSB
.84ee		d0 02		bne $84f2	                bne +
.84f0		f6 01		inc $01,x	                inc 1,x         ; MSB
.84f2		98		tya		+               tya
.84f3		ca		dex		                dex
.84f4		ca		dex		                dex
.84f5		95 00		sta $00,x	                sta 0,x         ; LSB
.84f7		74 01		stz $01,x	                stz 1,x         ; MSB, always zero
.84f9		60		rts		z_count:        rts
.84fa						xt_cr:
.84fa		a9 0a		lda #$0a	                lda #AscLF
.84fc		20 ac 87	jsr $87ac	                jsr emit_a
.84ff		60		rts		z_cr:           rts
.8500						xt_create:
.8500		20 53 8e	jsr $8e53	                jsr xt_parse_name       ; ( addr u )
.8503		b5 00		lda $00,x	                lda 0,x
.8505		15 01		ora $01,x	                ora 1,x
.8507		d0 05		bne $850e	                bne _got_name
.8509		a9 05		lda #$05	                lda #err_noname
.850b		4c 79 d7	jmp $d779	                jmp error
.850e						_got_name:
.850e		74 01		stz $01,x	                stz 1,x
.8510		20 c9 94	jsr $94c9	                jsr xt_two_dup          ; ( addr u addr u )
.8513		20 8a 9a	jsr $9a8a	                jsr xt_find_name        ; ( addr u flag ) (non-zero nt as flag)
.8516		b5 00		lda $00,x	                lda 0,x
.8518		15 01		ora $01,x	                ora 1,x
.851a		f0 1e		beq $853a	                beq _new_name           ; We haven't seen this one before.
.851c		e8		inx		                inx                     ; Drop flag (nt) from find-name.
.851d		e8		inx		                inx
.851e		24 1c		bit $1c		                bit status
.8520		10 08		bpl $852a	                bpl _redefined_name     ; Bit 7 is zero, so print the message.
.8522		a9 80		lda #$80	                lda #$80                ; Set bit 7 to indicate dup
.8524		05 1c		ora $1c		                ora status
.8526		85 1c		sta $1c		                sta status
.8528		80 18		bra $8542	                bra _process_name
.852a						_redefined_name:
.852a		a9 02		lda #$02	                lda #str_redefined
.852c		20 9f d7	jsr $d79f	                jsr print_string_no_lf
.852f		20 c9 94	jsr $94c9	                jsr xt_two_dup           ; ( addr u addr u )
.8532		20 d3 95	jsr $95d3	                jsr xt_type
.8535		20 c7 92	jsr $92c7	                jsr xt_space
.8538		80 08		bra $8542	                bra _process_name
.853a						_new_name:
.853a		e8		inx		                inx                     ; Drop flag (0) from find-name.
.853b		e8		inx		                inx
.853c		a9 7f		lda #$7f	                lda #$7F                ; Clear bit 0 of status to indicate new word.
.853e		25 1c		and $1c		                and status
.8540		85 1c		sta $1c		                sta status
.8542						_process_name:
.8542		b5 00		lda $00,x	                lda 0,x
.8544		85 27		sta $27		                sta tmp2                ; store length of string in tmp2
.8546		a5 00		lda $00		                lda cp
.8548		85 25		sta $25		                sta tmp1
.854a		a5 01		lda $01		                lda cp+1
.854c		85 26		sta $26		                sta tmp1+1
.854e		b5 00		lda $00,x	                lda 0,x
.8550		18		clc		                clc
.8551		69 08		adc #$08	                adc #8
.8553		85 29		sta $29		                sta tmp3                ; total header length
.8555		95 00		sta $00,x	                sta 0,x
.8557		74 01		stz $01,x	                stz 1,x         ; max header size is 255 chars
.8559		20 29 82	jsr $8229	                jsr xt_allot    ; ( addr )
.855c		20 ba d6	jsr $d6ba	                jsr current_to_dp
.855f		a0 00		ldy #$00	                ldy #0
.8561		a5 27		lda $27		                lda tmp2
.8563		91 25		sta ($25),y	                sta (tmp1),y
.8565		a9 08		lda #$08	                lda #NN
.8567		09 20		ora #$20	                ora #HC
.8569		c8		iny		                iny
.856a		91 25		sta ($25),y	                sta (tmp1),y
.856c		c8		iny		                iny
.856d		a5 02		lda $02		                lda dp
.856f		91 25		sta ($25),y	                sta (tmp1),y
.8571		c8		iny		                iny
.8572		a5 03		lda $03		                lda dp+1
.8574		91 25		sta ($25),y	                sta (tmp1),y
.8576		c8		iny		                iny
.8577		a5 26		lda $26		                lda tmp1+1
.8579		85 03		sta $03		                sta dp+1
.857b		a5 25		lda $25		                lda tmp1
.857d		85 02		sta $02		                sta dp
.857f		18		clc		                clc
.8580		65 29		adc $29		                adc tmp3        ; add total header length
.8582		91 25		sta ($25),y	                sta (tmp1),y
.8584		48		pha		                pha             ; we need this in the next step
.8585		c8		iny		                iny
.8586		a5 26		lda $26		                lda tmp1+1
.8588		69 00		adc #$00	                adc #0          ; only need the carry
.858a		91 25		sta ($25),y	                sta (tmp1),y
.858c		c8		iny		                iny
.858d		68		pla		                pla             ; LSB of "z_" address
.858e		18		clc		                clc
.858f		69 03		adc #$03	                adc #3
.8591		91 25		sta ($25),y	                sta (tmp1),y
.8593		88		dey		                dey             ; get the MSB of xt back
.8594		b1 25		lda ($25),y	                lda (tmp1),y
.8596		69 00		adc #$00	                adc #0          ; only need the carry
.8598		c8		iny		                iny
.8599		c8		iny		                iny
.859a		91 25		sta ($25),y	                sta (tmp1),y
.859c		c8		iny		                iny
.859d		b5 00		lda $00,x	                lda 0,x
.859f		38		sec		                sec
.85a0		e9 08		sbc #$08	                sbc #8
.85a2		85 23		sta $23		                sta tmptos
.85a4		b5 01		lda $01,x	                lda 1,x
.85a6		e9 00		sbc #$00	                sbc #0          ; only need carry
.85a8		85 24		sta $24		                sta tmptos+1
.85aa						_name_loop:
.85aa		b1 23		lda ($23),y	                lda (tmptos),y
.85ac		c9 5b		cmp #$5b	                cmp #'Z'+1
.85ae		b0 06		bcs $85b6	                bcs _store_name
.85b0		c9 41		cmp #$41	                cmp #'A'
.85b2		90 02		bcc $85b6	                bcc _store_name
.85b4		09 20		ora #$20	                ora #$20
.85b6						_store_name:
.85b6		91 25		sta ($25),y	                sta (tmp1),y
.85b8		c8		iny		                iny
.85b9		c6 27		dec $27		                dec tmp2
.85bb		d0 ed		bne $85aa	                bne _name_loop
.85bd		a0 d6		ldy #$d6	                ldy #>dovar
.85bf		a9 11		lda #$11	                lda #<dovar
.85c1		20 8d d5	jsr $d58d	                jsr cmpl_call_ya
.85c4		20 cd d6	jsr $d6cd	                jsr dp_to_current
.85c7		e8		inx		                inx
.85c8		e8		inx		                inx
.85c9		60		rts		z_create:       rts
.85ca						xt_decimal:
.85ca		a9 0a		lda #$0a	                lda #10
.85cc		85 18		sta $18		                sta base
.85ce		64 19		stz $19		                stz base+1              ; paranoid
.85d0		60		rts		z_decimal:      rts
.85d1						xt_defer:
.85d1		20 00 85	jsr $8500	                jsr xt_create
.85d4		a5 00		lda $00		                lda cp          ; LSB
.85d6		38		sec		                sec
.85d7		e9 02		sbc #$02	                sbc #2
.85d9		85 25		sta $25		                sta tmp1
.85db		a5 01		lda $01		                lda cp+1        ; MSB
.85dd		e9 00		sbc #$00	                sbc #0          ; we only care about the borrow
.85df		85 26		sta $26		                sta tmp1+1
.85e1		a0 00		ldy #$00	                ldy #0
.85e3		a9 df		lda #$df	                lda #<dodefer   ; LSB
.85e5		91 25		sta ($25),y	                sta (tmp1),y
.85e7		c8		iny		                iny
.85e8		a9 d5		lda #$d5	                lda #>dodefer   ; MSB
.85ea		91 25		sta ($25),y	                sta (tmp1),y
.85ec		a9 f3		lda #$f3	                lda #<defer_error
.85ee		92 00		sta ($00)	                sta (cp)
.85f0		e6 00		inc $00		                inc cp
.85f2		d0 02		bne $85f6	                bne +
.85f4		e6 01		inc $01		                inc cp+1
.85f6						+
.85f6		a9 d5		lda #$d5	                lda #>defer_error
.85f8		92 00		sta ($00)	                sta (cp)
.85fa		e6 00		inc $00		                inc cp
.85fc		d0 02		bne $8600	                bne +
.85fe		e6 01		inc $01		                inc cp+1
.8600						+
.8600		20 c8 84	jsr $84c8	                jsr adjust_z    ; adjust header to correct length
.8603		60		rts		z_defer:        rts
.8604						xt_defer_fetch:
.8604		20 bc 93	jsr $93bc	                jsr xt_to_body
.8607		20 01 89	jsr $8901	                jsr xt_fetch
.860a		60		rts		z_defer_fetch:  rts
.860b						xt_defer_store:
.860b		20 bc 93	jsr $93bc	                jsr xt_to_body
.860e		20 36 93	jsr $9336	                jsr xt_store
.8611		60		rts		z_defer_store:  rts
.8612						xt_depth:
.8612		a9 78		lda #$78	                lda #dsp0
.8614		86 1e		stx $1e		                stx tmpdsp
.8616		38		sec		                sec
.8617		e5 1e		sbc $1e		                sbc tmpdsp
.8619		4a		lsr a		                lsr
.861a		ca		dex		                dex
.861b		ca		dex		                dex
.861c		95 00		sta $00,x	                sta 0,x
.861e		74 01		stz $01,x	                stz 1,x
.8620		60		rts		z_depth:        rts
.8621						xt_question_do:
.8621		ca		dex		                dex
.8622		ca		dex		                dex
.8623		a9 4e		lda #$4e	                lda #<question_do_runtime
.8625		95 00		sta $00,x	                sta 0,x
.8627		a9 86		lda #$86	                lda #>question_do_runtime
.8629		95 01		sta $01,x	                sta 1,x
.862b		a0 10		ldy #$10	                ldy #question_do_runtime_end-question_do_runtime
.862d		20 85 84	jsr $8485	                jsr cmpl_inline_y
.8630		20 b2 d5	jsr $d5b2	                jsr cmpl_jump_later
.8633		80 03		bra $8638	                bra do_common
.8635						xt_do:
.8635		20 8b 9d	jsr $9d8b	                jsr xt_zero             ; push 0 TOS
.8638						do_common:
.8638		ca		dex		                dex
.8639		ca		dex		                dex
.863a		a5 21		lda $21		                lda loopleave
.863c		95 00		sta $00,x	                sta 0,x
.863e		a5 22		lda $22		                lda loopleave+1
.8640		95 01		sta $01,x	                sta 1,x
.8642		64 22		stz $22		                stz loopleave+1
.8644		a0 86		ldy #$86	                ldy #>do_runtime
.8646		a9 5e		lda #$5e	                lda #<do_runtime
.8648		20 8d d5	jsr $d58d	                jsr cmpl_call_ya
.864b		4c 02 8a	jmp $8a02	                jmp xt_here
.864e						z_question_do:
.864e						z_do:
.864e						question_do_runtime:
.864e		b5 00		lda $00,x	                lda 0,x
.8650		d5 02		cmp $02,x	                cmp 2,x
.8652		d0 0d		bne $8661	                bne question_do_begin
.8654		b5 01		lda $01,x	                lda 1,x
.8656		d5 03		cmp $03,x	                cmp 3,x
.8658		d0 07		bne $8661	                bne question_do_begin
.865a		e8		inx		                inx                     ; drop loop limits
.865b		e8		inx		                inx
.865c		e8		inx		                inx
.865d		e8		inx		                inx
.865e						question_do_runtime_end:
=$8661						question_do_begin = * + 3
.865e						do_runtime:
.865e		a4 1f		ldy $1f		                ldy loopctrl
.8660		30 05		bmi $8667	                bmi +                   ; is this the first LCB?
.8662		a5 20		lda $20		                lda loopidx0            ; no, write cached LSB
.8664		99 00 01	sta $0100,y	                sta loopindex,y         ; back to loopindex in the LCB
.8667						+
.8667		c8		iny		                iny                     ; Reserve 4 bytes for next LCB
.8668		c8		iny		                iny
.8669		c8		iny		                iny
.866a		c8		iny		                iny
.866b		84 1f		sty $1f		                sty loopctrl            ; Udpate LCB stack pointer
.866d		38		sec		                sec
.866e		a9 00		lda #$00	                lda #0
.8670		f5 02		sbc $02,x	                sbc 2,x             ; LSB of limit
.8672		99 02 01	sta $0102,y	                sta loopfufa,y      ; write to loop control block
.8675		a9 80		lda #$80	                lda #$80
.8677		f5 03		sbc $03,x	                sbc 3,x             ; MSB of limit
.8679		99 03 01	sta $0103,y	                sta loopfufa+1,y
.867c		18		clc		                clc
.867d		b5 00		lda $00,x	                lda 0,x             ; LSB of original index
.867f		79 02 01	adc $0102,y	                adc loopfufa,y
.8682		85 20		sta $20		                sta loopidx0        ; write LSB to cache not LCB
.8684		b5 01		lda $01,x	                lda 1,x             ; MSB of orginal index
.8686		79 03 01	adc $0103,y	                adc loopfufa+1,y
.8689		99 01 01	sta $0101,y	                sta loopindex+1,y
.868c		e8		inx		                inx                 ; clean up the stack
.868d		e8		inx		                inx
.868e		e8		inx		                inx
.868f		e8		inx		                inx
.8690		60		rts		                rts
.8691						xt_does:
.8691		a0 86		ldy #$86	                ldy #>does_runtime
.8693		a9 a0		lda #$a0	                lda #<does_runtime
.8695		20 8d d5	jsr $d58d	                jsr cmpl_call_ya
.8698		a0 d5		ldy #$d5	                ldy #>dodoes
.869a		a9 f8		lda #$f8	                lda #<dodoes
.869c		20 8d d5	jsr $d58d	                jsr cmpl_call_ya
.869f		60		rts		z_does:         rts
.86a0						does_runtime:
.86a0		7a		ply		                ply             ; LSB
.86a1		68		pla		                pla             ; MSB
.86a2		c8		iny		                iny
.86a3		d0 01		bne $86a6	                bne +
.86a5		1a		inc a		                ina
.86a6						+
.86a6		84 25		sty $25		                sty tmp1
.86a8		85 26		sta $26		                sta tmp1+1
.86aa		20 ba d6	jsr $d6ba	                jsr current_to_dp   ; Grab the DP from the CURRENT wordlist.
.86ad		a5 02		lda $02		                lda dp
.86af		18		clc		                clc
.86b0		69 04		adc #$04	                adc #4
.86b2		85 27		sta $27		                sta tmp2
.86b4		a5 03		lda $03		                lda dp+1
.86b6		69 00		adc #$00	                adc #0          ; we only care about the carry
.86b8		85 28		sta $28		                sta tmp2+1
.86ba		b2 27		lda ($27)	                lda (tmp2)
.86bc		18		clc		                clc
.86bd		69 01		adc #$01	                adc #1
.86bf		85 29		sta $29		                sta tmp3
.86c1		a0 01		ldy #$01	                ldy #1
.86c3		b1 27		lda ($27),y	                lda (tmp2),y
.86c5		69 00		adc #$00	                adc #0          ; we only care about the carry
.86c7		85 2a		sta $2a		                sta tmp3+1
.86c9		a5 25		lda $25		                lda tmp1        ; LSB
.86cb		92 29		sta ($29)	                sta (tmp3)
.86cd		a5 26		lda $26		                lda tmp1+1
.86cf		91 29		sta ($29),y	                sta (tmp3),y    ; Y is still 1
.86d1		60		rts		                rts
.86d2						xt_dot:
.86d2		20 63 d7	jsr $d763	                jsr underflow_1
.86d5		20 42 87	jsr $8742	                jsr xt_dup                      ; ( n n )
.86d8		20 d1 80	jsr $80d1	                jsr xt_abs                      ; ( n u )
.86db		20 8b 9d	jsr $9d8b	                jsr xt_zero                     ; ( n u 0 )
.86de		20 f8 8a	jsr $8af8	                jsr xt_less_number_sign         ; ( n u 0 )
.86e1		20 b5 8d	jsr $8db5	                jsr xt_number_sign_s            ; ( n ud )
.86e4		20 8d 90	jsr $908d	                jsr xt_rot                      ; ( ud n )
.86e7		20 4c 92	jsr $924c	                jsr xt_sign                     ; ( ud )
.86ea		20 93 8d	jsr $8d93	                jsr xt_number_sign_greater      ; ( addr u )
.86ed		20 d3 95	jsr $95d3	                jsr xt_type
.86f0		20 c7 92	jsr $92c7	                jsr xt_space
.86f3		60		rts		z_dot:          rts
.86f4						xt_dot_paren:
.86f4		ca		dex		                dex
.86f5		ca		dex		                dex
.86f6		a9 29		lda #$29	                lda #41     ; Right parenthesis
.86f8		95 00		sta $00,x	                sta 0,x
.86fa		74 01		stz $01,x	                stz 1,x
.86fc		20 ae 8e	jsr $8eae	                jsr xt_parse
.86ff		20 d3 95	jsr $95d3	                jsr xt_type
.8702		60		rts		z_dot_paren:    rts
.8703						xt_dot_quote:
.8703		20 d6 90	jsr $90d6	                jsr xt_s_quote
.8706		a0 95		ldy #$95	                ldy #>xt_type
.8708		a9 d3		lda #$d3	                lda #<xt_type
.870a		20 8d d5	jsr $d58d	                jsr cmpl_call_ya
.870d		60		rts		z_dot_quote:    rts
.870e						xt_dot_r:
.870e		20 68 d7	jsr $d768	                jsr underflow_2
.8711		20 8a 94	jsr $948a	                jsr xt_to_r
.8714		20 42 87	jsr $8742	                jsr xt_dup
.8717		20 d1 80	jsr $80d1	                jsr xt_abs
.871a		20 8b 9d	jsr $9d8b	                jsr xt_zero
.871d		20 f8 8a	jsr $8af8	                jsr xt_less_number_sign
.8720		20 b5 8d	jsr $8db5	                jsr xt_number_sign_s
.8723		20 8d 90	jsr $908d	                jsr xt_rot
.8726		20 4c 92	jsr $924c	                jsr xt_sign
.8729		20 93 8d	jsr $8d93	                jsr xt_number_sign_greater
.872c		20 f0 8f	jsr $8ff0	                jsr xt_r_from
.872f		20 07 8e	jsr $8e07	                jsr xt_over
.8732		20 e6 8c	jsr $8ce6	                jsr xt_minus
.8735		20 cd 92	jsr $92cd	                jsr xt_spaces
.8738		20 d3 95	jsr $95d3	                jsr xt_type
.873b		60		rts		z_dot_r:        rts
.873c						xt_drop:
.873c		20 63 d7	jsr $d763	                jsr underflow_1
.873f		e8		inx		                inx
.8740		e8		inx		                inx
.8741		60		rts		z_drop:         rts
.8742						xt_dup:
.8742		20 63 d7	jsr $d763	                jsr underflow_1
.8745		ca		dex		                dex
.8746		ca		dex		                dex
.8747		b5 02		lda $02,x	                lda 2,x         ; LSB
.8749		95 00		sta $00,x	                sta 0,x
.874b		b5 03		lda $03,x	                lda 3,x         ; MSB
.874d		95 01		sta $01,x	                sta 1,x
.874f		60		rts		z_dup:          rts
.8750						xt_else:
.8750						xt_endof:
.8750		20 b2 d5	jsr $d5b2	                jsr cmpl_jump_later
.8753		20 4c 93	jsr $934c	                jsr xt_swap         ; ( target orig )
.8756						xt_then:
.8756		20 02 8a	jsr $8a02	                jsr xt_here
.8759		a1 02		lda ($02,x)	                lda (2,x)           ; get LSB at orig
.875b		1a		inc a		                ina                 ; was LSB $FF?  (only check for $XXFF)
.875c		d0 3b		bne $8799	                bne _no_opt
.875e		20 c9 94	jsr $94c9	                jsr xt_two_dup
.8761		20 4c 93	jsr $934c	                jsr xt_swap
.8764		20 e6 8c	jsr $8ce6	                jsr xt_minus        ; ( C: orig here offset )
.8767		b5 01		lda $01,x	                lda 1,x
.8769		d0 2c		bne $8797	                bne _too_far        ; MSB must be zero
.876b		b5 00		lda $00,x	                lda 0,x
.876d		3a		dec a		                dea                 ; we want here - orig - 2
.876e		3a		dec a		                dea                 ; don't care about carry
.876f		30 26		bmi $8797	                bmi _too_far        ; up to 127 is ok
.8771		95 00		sta $00,x	                sta 0,x             ; stash offset - 2
.8773		38		sec		                sec                 ; put orig - 2 in tmp1
.8774		b5 04		lda $04,x	                lda 4,x
.8776		e9 02		sbc #$02	                sbc #2
.8778		85 25		sta $25		                sta tmp1
.877a		b5 05		lda $05,x	                lda 5,x
.877c		e9 00		sbc #$00	                sbc #0
.877e		85 26		sta $26		                sta tmp1+1
.8780		a0 00		ldy #$00	                ldy #0
.8782						-
.8782		b9 a1 87	lda $87a1,y	                lda beq_opt+1,y               ; skip the jsr
.8785		91 25		sta ($25),y	                sta (tmp1),y
.8787		c8		iny		                iny
.8788		c0 03		cpy #$03	                cpy #(beq_opt_end-beq_opt-2)  ; three bytes, skip jsr and offset
.878a		d0 f6		bne $8782	                bne -
.878c		b5 00		lda $00,x	                lda 0,x             ; write the offset
.878e		91 25		sta ($25),y	                sta (tmp1),y
.8790		e8		inx		                inx                 ; clear the stack
.8791		e8		inx		                inx
.8792		e8		inx		                inx
.8793		e8		inx		                inx
.8794		e8		inx		                inx
.8795		e8		inx		                inx
.8796		60		rts		                rts                 ; all done
.8797						_too_far:
.8797		e8		inx		                inx                 ; discard the offset we calculated
.8798		e8		inx		                inx
.8799						_no_opt:
.8799		20 4c 93	jsr $934c	                jsr xt_swap
.879c		20 36 93	jsr $9336	                jsr xt_store
.879f						z_else:
.879f						z_endof:
.879f		60		rts		z_then:         rts
.87a0						beq_opt:
.87a0		20 4c 8a	jsr $8a4c	                jsr zero_test_runtime       ; replaces jsr zero_branch_runtime
.87a3		f0 00		beq $87a5	                beq beq_opt_end             ; the beq overwrites the placeholder
.87a5						beq_opt_end:
.87a5						xt_emit:
.87a5		20 63 d7	jsr $d763	                jsr underflow_1
.87a8		b5 00		lda $00,x	                lda 0,x
.87aa		e8		inx		                inx
.87ab		e8		inx		                inx
.87ac						emit_a:
.87ac		6c 12 00	jmp ($0012)	                jmp (output)            ; JSR/RTS
.87af						z_emit:
.87af						xt_endcase:
.87af		a0 87		ldy #$87	                ldy #>xt_drop
.87b1		a9 3c		lda #$3c	                lda #<xt_drop
.87b3		20 8d d5	jsr $d58d	                jsr cmpl_call_ya
.87b6						_endcase_loop:
.87b6		b5 00		lda $00,x	                lda 0,x
.87b8		15 01		ora $01,x	                ora 1,x
.87ba		f0 05		beq $87c1	                beq _done
.87bc		20 56 87	jsr $8756	                jsr xt_then
.87bf		80 f5		bra $87b6	                bra _endcase_loop
.87c1						_done:
.87c1		e8		inx		                inx
.87c2		e8		inx		                inx
.87c3		60		rts		z_endcase:      rts
.87c4						xt_environment_q:
.87c4		20 63 d7	jsr $d763	                jsr underflow_1
.87c7		a0 00		ldy #$00	                ldy #00                 ; counter for table
.87c9		5a		phy		                phy
.87ca						_table_loop:
.87ca		20 c9 94	jsr $94c9	                jsr xt_two_dup          ; ( addr u addr u ) 2DUP does not use Y
.87cd		ca		dex		                dex
.87ce		ca		dex		                dex                     ; ( addr u addr u ? )
.87cf		b9 41 88	lda $8841,y	                lda env_table_single,y
.87d2		95 00		sta $00,x	                sta 0,x
.87d4		c8		iny		                iny
.87d5		b9 41 88	lda $8841,y	                lda env_table_single,y
.87d8		95 01		sta $01,x	                sta 1,x                 ; ( addr u addr u addr-t )
.87da		c8		iny		                iny
.87db		15 00		ora $00,x	                ora 0,x
.87dd		f0 4d		beq $882c	                beq _table_done
.87df		5a		phy		                phy                     ; save Y, which is used by COUNT
.87e0		20 e6 84	jsr $84e6	                jsr xt_count            ; ( addr u addr u addr-s u-s )
.87e3		20 52 9f	jsr $9f52	                jsr xt_compare          ; ( addr u f )
.87e6		7a		ply		                ply
.87e7		b5 00		lda $00,x	                lda 0,x
.87e9		15 01		ora $01,x	                ora 1,x
.87eb		f0 04		beq $87f1	                beq _got_result
.87ed		e8		inx		                inx                     ; DROP, now ( addr u )
.87ee		e8		inx		                inx
.87ef		80 d9		bra $87ca	                bra _table_loop
.87f1						_got_result:
.87f1		e8		inx		                inx                     ; drop flag, now ( addr u )
.87f2		e8		inx		                inx
.87f3		88		dey		                dey                     ; go back to index we had
.87f4		88		dey		                dey
.87f5		68		pla		                pla
.87f6		d0 0d		bne $8805	                bne _double_result
.87f8		b9 5f 88	lda $885f,y	                lda env_results_single,y
.87fb		95 02		sta $02,x	                sta 2,x
.87fd		c8		iny		                iny
.87fe		b9 5f 88	lda $885f,y	                lda env_results_single,y
.8801		95 03		sta $03,x	                sta 3,x                 ; ( res u )
.8803		80 1f		bra $8824	                bra _set_flag
.8805						_double_result:
.8805		ca		dex		                dex                     ; ( addr u ? )
.8806		ca		dex		                dex
.8807		98		tya		                tya
.8808		38		sec		                sec
.8809		e9 18		sbc #$18	                sbc #24
.880b		0a		asl a		                asl
.880c		a8		tay		                tay
.880d		b9 75 88	lda $8875,y	                lda env_results_double,y
.8810		95 02		sta $02,x	                sta 2,x
.8812		c8		iny		                iny
.8813		b9 75 88	lda $8875,y	                lda env_results_double,y
.8816		95 03		sta $03,x	                sta 3,x                 ; ( res u ? )
.8818		c8		iny		                iny
.8819		b9 75 88	lda $8875,y	                lda env_results_double,y
.881c		95 04		sta $04,x	                sta 4,x
.881e		c8		iny		                iny
.881f		b9 75 88	lda $8875,y	                lda env_results_double,y
.8822		95 05		sta $05,x	                sta 5,x                 ; ( res res ? )
.8824						_set_flag:
.8824		a9 ff		lda #$ff	                lda #$FF
.8826		95 00		sta $00,x	                sta 0,x
.8828		95 01		sta $01,x	                sta 1,x                 ; ( res f )
.882a		80 14		bra $8840	                bra _done
.882c						_table_done:
.882c		68		pla		                pla
.882d		d0 09		bne $8838	                bne _no_match
.882f		1a		inc a		                ina
.8830		48		pha		                pha
.8831		8a		txa		                txa
.8832		18		clc		                clc
.8833		69 06		adc #$06	                adc #6                  ; skip six bytes
.8835		aa		tax		                tax                     ; ( addr u )
.8836		80 92		bra $87ca	                bra _table_loop
.8838						_no_match:
.8838		8a		txa		                txa
.8839		18		clc		                clc
.883a		69 0a		adc #$0a	                adc #10
.883c		aa		tax		                tax                     ; ( addr ) - not ( 0 ) !
.883d		20 8b 9d	jsr $9d8b	                jsr xt_false
.8840						_done:
.8840						z_environment_q:
.8840		60		rts		                rts
.8841						env_table_single:
>8841		0d d5 1d d5 23 d5 28 d5		        .word envs_cs, envs_hold, envs_pad, envs_aub, envs_floored
>8849		3a d5
>884b		42 d5 4b d5 51 d5 57 d5		        .word envs_max_char, envs_max_n, envs_max_u, envs_rsc
>8853		6a d5 76 d5 00 00		        .word envs_sc, envs_wl, 0000
.8859						env_table_double:
>8859		80 d5 86 d5 00 00		        .word envs_max_d, envs_max_ud, 0000
.885f						env_results_single:
>885f		ff 00				        .word $00FF     ; /COUNTED-STRING
>8861		ff 00				        .word $00FF     ; /HOLD
>8863		54 00				        .word $0054     ; /PAD (this is 84 decimal)
>8865		08 00				        .word $0008     ; ADDRESS-UNIT-BITS (keep "$" to avoid octal!)
>8867		00 00				        .word 0000      ; FLOORED ("FALSE", we have symmetric)
>8869		ff 00				        .word $00FF     ; MAX-CHAR
>886b		ff 7f				        .word $7FFF     ; MAX-N
>886d		ff ff				        .word $FFFF     ; MAX-U
>886f		80 00				        .word $0080     ; RETURN-STACK-CELLS
>8871		20 00				        .word $0020     ; STACK-CELLS (from definitions.asm)
>8873		09 00				        .word $0009     ; WORDLISTS
.8875						env_results_double:
>8875		ff 7f ff ff			        .word $7FFF, $FFFF      ; MAX-D
>8879		ff ff ff ff			        .word $FFFF, $FFFF      ; MAX-UD
.887d						xt_equal:
.887d		20 68 d7	jsr $d768	                jsr underflow_2
.8880		b5 00		lda $00,x	                lda 0,x                 ; LSB
.8882		d5 02		cmp $02,x	                cmp 2,x
.8884		d0 0a		bne $8890	                bne _false
.8886		b5 01		lda $01,x	                lda 1,x                 ; MSB
.8888		d5 03		cmp $03,x	                cmp 3,x
.888a		d0 04		bne $8890	                bne _false
.888c		a9 ff		lda #$ff	                lda #$FF
.888e		80 02		bra $8892	                bra _done
.8890		a9 00		lda #$00	_false:         lda #0                  ; drop thru to done
.8892		95 02		sta $02,x	_done:          sta 2,x
.8894		95 03		sta $03,x	                sta 3,x
.8896		e8		inx		                inx
.8897		e8		inx		                inx
.8898		60		rts		z_equal:        rts
.8899						xt_blank:
.8899		ca		dex		                dex
.889a		ca		dex		                dex
.889b		a9 20		lda #$20	                lda #AscSP
.889d		95 00		sta $00,x	                sta 0,x
.889f		74 01		stz $01,x	                stz 1,x
.88a1		80 06		bra $88a9	                bra xt_fill     ; skip over code for ERASE
.88a3						xt_erase:
.88a3		ca		dex		                dex
.88a4		ca		dex		                dex
.88a5		74 00		stz $00,x	                stz 0,x
.88a7		74 01		stz $01,x	                stz 1,x
.88a9						xt_fill:
.88a9		20 6d d7	jsr $d76d	                jsr underflow_3
.88ac		b5 04		lda $04,x	                lda 4,x         ; LSB
.88ae		85 25		sta $25		                sta tmp1
.88b0		b5 05		lda $05,x	                lda 5,x
.88b2		85 26		sta $26		                sta tmp1+1
.88b4		b5 02		lda $02,x	                lda 2,x
.88b6		85 27		sta $27		                sta tmp2
.88b8		b5 03		lda $03,x	                lda 3,x
.88ba		85 28		sta $28		                sta tmp2+1
.88bc		b5 00		lda $00,x	                lda 0,x
.88be		a8		tay		                tay
.88bf						_loop:
.88bf		a9 7f		lda #$7f	                lda #>ram_end           ; MSB
.88c1		c5 26		cmp $26		                cmp tmp1+1
.88c3		90 21		bcc $88e6	                bcc _done               ; RAM_END < TMP1, so leave
.88c5		d0 06		bne $88cd	                bne _check_counter      ; RAM_END is not smaller and not equal
.88c7		a9 ff		lda #$ff	                lda #<ram_end           ; LSB, because MSBs were equal
.88c9		c5 25		cmp $25		                cmp tmp1
.88cb		90 19		bcc $88e6	                bcc _done               ; RAM_END < TMP1, so leave
.88cd						_check_counter:
.88cd		a5 27		lda $27		                lda tmp2
.88cf		05 28		ora $28		                ora tmp2+1
.88d1		f0 13		beq $88e6	                beq _done
.88d3		98		tya		                tya
.88d4		92 25		sta ($25)	                sta (tmp1)
.88d6		a5 27		lda $27		                lda tmp2
.88d8		d0 02		bne $88dc	                bne +
.88da		c6 28		dec $28		                dec tmp2+1
.88dc		c6 27		dec $27		+               dec tmp2
.88de		e6 25		inc $25		                inc tmp1
.88e0		d0 dd		bne $88bf	                bne _loop
.88e2		e6 26		inc $26		                inc tmp1+1
.88e4		80 d9		bra $88bf	                bra _loop
.88e6						_done:
.88e6		8a		txa		                txa
.88e7		18		clc		                clc
.88e8		69 06		adc #$06	                adc #6
.88ea		aa		tax		                tax
.88eb						z_blank:
.88eb						z_erase:
.88eb		60		rts		z_fill:         rts
.88ec						xt_execute:
.88ec		20 63 d7	jsr $d763	                jsr underflow_1
.88ef		20 f3 88	jsr $88f3	                jsr doexecute   ; do not combine to JMP (native coding)
.88f2		60		rts		z_execute:      rts
.88f3						doexecute:
.88f3		b5 00		lda $00,x	                lda 0,x
.88f5		85 04		sta $04		                sta ip
.88f7		b5 01		lda $01,x	                lda 1,x
.88f9		85 05		sta $05		                sta ip+1
.88fb		e8		inx		                inx
.88fc		e8		inx		                inx
.88fd		6c 04 00	jmp ($0004)	                jmp (ip)
.8900						xt_exit:
.8900		60		rts		                rts             ; keep before z_exit
.8901						z_exit:
.8901						xt_fetch:
.8901		20 63 d7	jsr $d763	                jsr underflow_1
.8904		a1 00		lda ($00,x)	                lda (0,x)               ; LSB
.8906		a8		tay		                tay
.8907		f6 00		inc $00,x	                inc 0,x
.8909		d0 02		bne $890d	                bne +
.890b		f6 01		inc $01,x	                inc 1,x
.890d						+
.890d		a1 00		lda ($00,x)	                lda (0,x)               ; MSB
.890f		95 01		sta $01,x	                sta 1,x
.8911		94 00		sty $00,x	                sty 0,x
.8913		60		rts		z_fetch:        rts
.8914						xt_find:
.8914		20 63 d7	jsr $d763	                jsr underflow_1
.8917		b5 01		lda $01,x	                lda 1,x                 ; MSB
.8919		48		pha		                pha
.891a		b5 00		lda $00,x	                lda 0,x                 ; LSB
.891c		48		pha		                pha
.891d		20 e6 84	jsr $84e6	                jsr xt_count            ; ( caddr -- addr u )
.8920		20 8a 9a	jsr $9a8a	                jsr xt_find_name        ; ( addr u -- nt | 0 )
.8923		b5 00		lda $00,x	                lda 0,x
.8925		15 01		ora $01,x	                ora 1,x
.8927		d0 0b		bne $8934	                bne _found_word
.8929		20 8b 9d	jsr $9d8b	                jsr xt_false            ; ( 0 0 )
.892c		68		pla		                pla                     ; LSB of address
.892d		95 02		sta $02,x	                sta 2,x
.892f		68		pla		                pla
.8930		95 03		sta $03,x	                sta 3,x                 ; MSB of address
.8932		80 27		bra $895b	                bra _done               ; ( addr 0 )
.8934						_found_word:
.8934		68		pla		                pla
.8935		68		pla		                pla
.8936		20 42 87	jsr $8742	                jsr xt_dup              ; ( nt nt )
.8939		20 c8 9b	jsr $9bc8	                jsr xt_name_to_int      ; ( nt xt )
.893c		20 4c 93	jsr $934c	                jsr xt_swap             ; ( xt nt )
.893f		a0 00		ldy #$00	                ldy #0                  ; Prepare flag
.8941		f6 00		inc $00,x	                inc 0,x
.8943		d0 02		bne $8947	                bne +
.8945		f6 01		inc $01,x	                inc 1,x                 ; ( xt nt+1 )
.8947						+
.8947		a1 00		lda ($00,x)	                lda (0,x)               ; ( xt char )
.8949		29 04		and #$04	                and #IM
.894b		d0 08		bne $8955	                bne _immediate          ; bit set, we're immediate
.894d		a9 ff		lda #$ff	                lda #$FF                ; We're not immediate, return -1
.894f		95 00		sta $00,x	                sta 0,x
.8951		95 01		sta $01,x	                sta 1,x
.8953		80 06		bra $895b	                bra _done
.8955						_immediate:
.8955		a9 01		lda #$01	                lda #1                  ; We're immediate, return 1
.8957		95 00		sta $00,x	                sta 0,x
.8959		74 01		stz $01,x	                stz 1,x
.895b						_done:
.895b		60		rts		z_find:         rts
.895c						xt_fm_slash_mod:
.895c		20 6d d7	jsr $d76d	                jsr underflow_3
.895f		64 27		stz $27		                stz tmp2        ; default: n is positive
.8961		b5 01		lda $01,x	                lda 1,x         ; MSB of n1
.8963		10 0e		bpl $8973	                bpl _check_d
.8965		e6 27		inc $27		                inc tmp2        ; set flag to negative for n1
.8967		20 21 8d	jsr $8d21	                jsr xt_negate   ; NEGATE
.896a		20 8a 94	jsr $948a	                jsr xt_to_r     ; >R
.896d		20 f9 9d	jsr $9df9	                jsr xt_dnegate  ; DNEGATE
.8970		20 f0 8f	jsr $8ff0	                jsr xt_r_from   ; R>
.8973						_check_d:
.8973		b5 03		lda $03,x	                lda 3,x         ; MSB of high word of d
.8975		10 0d		bpl $8984	                bpl _multiply
.8977		18		clc		                clc
.8978		b5 00		lda $00,x	                lda 0,x         ; LSB of n1
.897a		75 02		adc $02,x	                adc 2,x         ; LSB of dh
.897c		95 02		sta $02,x	                sta 2,x
.897e		b5 01		lda $01,x	                lda 1,x         ; MSB of n1
.8980		75 03		adc $03,x	                adc 3,x         ; MSB of dh
.8982		95 03		sta $03,x	                sta 3,x
.8984						_multiply:
.8984		20 58 96	jsr $9658	                jsr xt_um_slash_mod     ; ( d n1 -- rem n2 )
.8987		a5 27		lda $27		                lda tmp2
.8989		f0 07		beq $8992	                beq _done
.898b		e8		inx		                inx             ; pretend that we SWAP
.898c		e8		inx		                inx
.898d		20 21 8d	jsr $8d21	                jsr xt_negate
.8990		ca		dex		                dex
.8991		ca		dex		                dex
.8992						_done:
.8992		60		rts		z_fm_slash_mod: rts
.8993						load_evaluate:
.8993		a9 ff		lda #$ff	                lda #$FF
.8995		85 25		sta $25		                sta tmp1
.8997		80 11		bra $89aa	                bra load_evaluate_start
.8999						xt_evaluate:
.8999		20 68 d7	jsr $d768	                jsr underflow_2
.899c		64 25		stz $25		                stz tmp1
.899e		b5 00		lda $00,x	                lda 0,x
.89a0		15 01		ora $01,x	                ora 1,x
.89a2		d0 06		bne $89aa	                bne evaluate_got_work
.89a4		e8		inx		                inx
.89a5		e8		inx		                inx
.89a6		e8		inx		                inx
.89a7		e8		inx		                inx
.89a8		80 42		bra $89ec	                bra evaluate_done
.89aa						load_evaluate_start:
.89aa						evaluate_got_work:
.89aa		a0 05		ldy #$05	                ldy #blk_offset+1
.89ac		b1 08		lda ($08),y	                lda (up),y
.89ae		48		pha		                pha
.89af		88		dey		                dey
.89b0		b1 08		lda ($08),y	                lda (up),y
.89b2		48		pha		                pha
.89b3		a5 25		lda $25		                lda tmp1
.89b5		d0 05		bne $89bc	                bne _nozero
.89b7		91 08		sta ($08),y	                sta (up),y
.89b9		c8		iny		                iny
.89ba		91 08		sta ($08),y	                sta (up),y
.89bc						_nozero:
.89bc		20 2c 9b	jsr $9b2c	                jsr xt_input_to_r
.89bf		a9 ff		lda #$ff	                lda #$FF
.89c1		85 0a		sta $0a		                sta insrc
.89c3		85 0b		sta $0b		                sta insrc+1
.89c5		64 10		stz $10		                stz toin
.89c7		64 11		stz $11		                stz toin+1
.89c9		b5 00		lda $00,x	                lda 0,x
.89cb		85 0e		sta $0e		                sta ciblen
.89cd		b5 01		lda $01,x	                lda 1,x
.89cf		85 0f		sta $0f		                sta ciblen+1
.89d1		b5 02		lda $02,x	                lda 2,x
.89d3		85 0c		sta $0c		                sta cib
.89d5		b5 03		lda $03,x	                lda 3,x
.89d7		85 0d		sta $0d		                sta cib+1
.89d9		e8		inx		                inx             ; A clean stack is a clean mind
.89da		e8		inx		                inx
.89db		e8		inx		                inx
.89dc		e8		inx		                inx
.89dd		20 e0 d6	jsr $d6e0	                jsr interpret   ; ( -- )
.89e0		20 39 9d	jsr $9d39	                jsr xt_r_to_input
.89e3		a0 04		ldy #$04	                ldy #blk_offset
.89e5		68		pla		                pla
.89e6		91 08		sta ($08),y	                sta (up),y
.89e8		c8		iny		                iny
.89e9		68		pla		                pla
.89ea		91 08		sta ($08),y	                sta (up),y
.89ec						evaluate_done:
.89ec		60		rts		z_evaluate:     rts
.89ed						xt_greater_than:
.89ed		20 68 d7	jsr $d768	                jsr underflow_2
.89f0		a0 00		ldy #$00	                ldy #0          ; default false
.89f2		20 a1 d6	jsr $d6a1	                jsr compare_16bit
.89f5		f0 03		beq $89fa	                beq _false
.89f7		10 01		bpl $89fa	                bpl _false
.89f9		88		dey		                dey
.89fa						_false:
.89fa		98		tya		                tya
.89fb		e8		inx		                inx
.89fc		e8		inx		                inx
.89fd		95 00		sta $00,x	                sta 0,x
.89ff		95 01		sta $01,x	                sta 1,x
.8a01		60		rts		z_greater_than: rts
.8a02						xt_here:
.8a02						xt_begin:
.8a02						xt_asm_arrow:
.8a02		ca		dex		                dex
.8a03		ca		dex		                dex
.8a04		a5 00		lda $00		                lda cp
.8a06		95 00		sta $00,x	                sta 0,x
.8a08		a5 01		lda $01		                lda cp+1
.8a0a		95 01		sta $01,x	                sta 1,x
.8a0c						z_here:
.8a0c						z_begin:
.8a0c						z_asm_arrow:
.8a0c		60		rts		                rts
.8a0d						xt_hex:
.8a0d		a9 10		lda #$10	                lda #16
.8a0f		85 18		sta $18		                sta base
.8a11		64 19		stz $19		                stz base+1              ; paranoid
.8a13		60		rts		z_hex:          rts
.8a14						xt_hold:
.8a14		20 63 d7	jsr $d763	                jsr underflow_1
.8a17		a5 2b		lda $2b		                lda tohold
.8a19		d0 02		bne $8a1d	                bne +
.8a1b		c6 2c		dec $2c		                dec tohold+1
.8a1d						+
.8a1d		c6 2b		dec $2b		                dec tohold
.8a1f		b5 00		lda $00,x	                lda 0,x
.8a21		92 2b		sta ($2b)	                sta (tohold)
.8a23		e8		inx		                inx
.8a24		e8		inx		                inx
.8a25		60		rts		z_hold:         rts
.8a26						xt_i:
.8a26		ca		dex		                dex
.8a27		ca		dex		                dex
.8a28		a4 1f		ldy $1f		                ldy loopctrl
.8a2a		38		sec		                sec
.8a2b		a5 20		lda $20		                lda loopidx0        ; cached LSB of loopindex
.8a2d		f9 02 01	sbc $0102,y	                sbc loopfufa,y
.8a30		95 00		sta $00,x	                sta 0,x
.8a32		b9 01 01	lda $0101,y	                lda loopindex+1,y
.8a35		f9 03 01	sbc $0103,y	                sbc loopfufa+1,y
.8a38		95 01		sta $01,x	                sta 1,x
.8a3a		60		rts		z_i:            rts
.8a3b						xt_if:
.8a3b		a0 8a		ldy #$8a	                ldy #>zero_branch_runtime
.8a3d		a9 56		lda #$56	                lda #<zero_branch_runtime
.8a3f		20 8d d5	jsr $d58d	                jsr cmpl_call_ya
.8a42		20 02 8a	jsr $8a02	                jsr xt_here
.8a45		a9 ff		lda #$ff	                lda #$FF
.8a47		a8		tay		                tay
.8a48		20 99 d5	jsr $d599	                jsr cmpl_word_ya
.8a4b		60		rts		z_if:           rts
.8a4c						zero_test_runtime:
.8a4c		e8		inx		                inx
.8a4d		e8		inx		                inx
.8a4e		b5 fe		lda $fe,x	                lda $FE,x           ; wraparound so inx doesn't wreck Z status
.8a50		15 ff		ora $ff,x	                ora $FF,x
.8a52		60		rts		                rts
.8a53		d0 03		bne $8a58	                bne zero_test_footer_end+2  ; branch fwd if non-zero
>8a55		4c				                .byte OpJMP                 ; else JMP back
.8a56						zero_test_footer_end:
.8a56						zero_branch_runtime:
.8a56		68		pla		                pla
.8a57		85 25		sta $25		                sta tmp1
.8a59		68		pla		                pla
.8a5a		85 26		sta $26		                sta tmp1+1
.8a5c		b5 00		lda $00,x	                lda 0,x
.8a5e		15 01		ora $01,x	                ora 1,x
.8a60		f0 0d		beq $8a6f	                beq _zero
.8a62		a5 25		lda $25		                lda tmp1        ; LSB
.8a64		18		clc		                clc
.8a65		69 03		adc #$03	                adc #3          ; add one to RTS address plus two address bytes
.8a67		85 25		sta $25		                sta tmp1
.8a69		90 11		bcc $8a7c	                bcc _jump
.8a6b		e6 26		inc $26		                inc tmp1+1      ; MSB
.8a6d		80 0d		bra $8a7c	                bra _jump
.8a6f						_zero:
.8a6f		a0 01		ldy #$01	                ldy #1
.8a71		b1 25		lda ($25),y	                lda (tmp1),y
.8a73		48		pha		                pha
.8a74		c8		iny		                iny
.8a75		b1 25		lda ($25),y	                lda (tmp1),y
.8a77		85 26		sta $26		                sta tmp1+1
.8a79		68		pla		                pla
.8a7a		85 25		sta $25		                sta tmp1
.8a7c						_jump:
.8a7c		e8		inx		                inx
.8a7d		e8		inx		                inx
.8a7e		6c 25 00	jmp ($0025)	                jmp (tmp1)
.8a81						xt_immediate:
.8a81		20 ba d6	jsr $d6ba	                jsr current_to_dp
.8a84		a0 01		ldy #$01	                ldy #1          ; offset for status byte
.8a86		b1 02		lda ($02),y	                lda (dp),y
.8a88		09 04		ora #$04	                ora #IM        ; make sure bit 7 is set
.8a8a		91 02		sta ($02),y	                sta (dp),y
.8a8c		60		rts		z_immediate:    rts
.8a8d						xt_invert:
.8a8d		20 63 d7	jsr $d763	                jsr underflow_1
.8a90		a9 ff		lda #$ff	                lda #$FF
.8a92		55 00		eor $00,x	                eor 0,x         ; LSB
.8a94		95 00		sta $00,x	                sta 0,x
.8a96		a9 ff		lda #$ff	                lda #$FF
.8a98		55 01		eor $01,x	                eor 1,x         ; MSB
.8a9a		95 01		sta $01,x	                sta 1,x
.8a9c		60		rts		z_invert:       rts
.8a9d						xt_is:
.8a9d		a5 1a		lda $1a		                lda state
.8a9f		05 1b		ora $1b		                ora state+1
.8aa1		f0 0c		beq $8aaf	                beq _interpreting
.8aa3						_compiling:
.8aa3		20 16 83	jsr $8316	                jsr xt_bracket_tick
.8aa6		a0 86		ldy #$86	                ldy #>xt_defer_store
.8aa8		a9 0b		lda #$0b	                lda #<xt_defer_store
.8aaa		20 8d d5	jsr $d58d	                jsr cmpl_call_ya
.8aad		80 06		bra $8ab5	                bra _done
.8aaf						_interpreting:
.8aaf		20 60 93	jsr $9360	                jsr xt_tick
.8ab2		20 0b 86	jsr $860b	                jsr xt_defer_store
.8ab5						_done:
.8ab5		60		rts		z_is:           rts
.8ab6						xt_j:
.8ab6		ca		dex		                dex                 ; make space on the stack
.8ab7		ca		dex		                dex
.8ab8		a5 1f		lda $1f		                lda loopctrl
.8aba		38		sec		                sec
.8abb		e9 04		sbc #$04	                sbc #4
.8abd		a8		tay		                tay
.8abe		38		sec		                sec
.8abf		b9 00 01	lda $0100,y	                lda loopindex,y
.8ac2		f9 02 01	sbc $0102,y	                sbc loopfufa,y
.8ac5		95 00		sta $00,x	                sta 0,x
.8ac7		b9 01 01	lda $0101,y	                lda loopindex+1,y
.8aca		f9 03 01	sbc $0103,y	                sbc loopfufa+1,y
.8acd		95 01		sta $01,x	                sta 1,x
.8acf		60		rts		z_j:            rts
.8ad0						xt_key:
.8ad0		20 da 8a	jsr $8ada	                jsr key_a               ; returns char in A
.8ad3		ca		dex		                dex
.8ad4		ca		dex		                dex
.8ad5		95 00		sta $00,x	                sta 0,x
.8ad7		74 01		stz $01,x	                stz 1,x
.8ad9		60		rts		z_key:          rts
.8ada						key_a:
.8ada		6c 14 00	jmp ($0014)	                jmp (input)             ; JSR/RTS
.8add						xt_leave:
.8add		a5 21		lda $21		                lda loopleave
.8adf		a4 22		ldy $22		                ldy loopleave+1
.8ae1		20 92 d5	jsr $d592	                jsr cmpl_jump_ya   ; emit the JMP chaining prior leave address
.8ae4		38		sec		                sec
.8ae5		a5 00		lda $00		                lda cp
.8ae7		e9 02		sbc #$02	                sbc #2
.8ae9		85 21		sta $21		                sta loopleave
.8aeb		a5 01		lda $01		                lda cp+1
.8aed		b0 01		bcs $8af0	                bcs +
.8aef		3a		dec a		                dea
.8af0		85 22		sta $22		+               sta loopleave+1
.8af2						z_leave:
.8af2		60		rts		                rts
.8af3						xt_left_bracket:
.8af3		64 1a		stz $1a		                stz state
.8af5		64 1b		stz $1b		                stz state+1
.8af7		60		rts		z_left_bracket: rts
.8af8						xt_less_number_sign:
.8af8		20 15 8e	jsr $8e15	                jsr xt_pad      ; ( addr )
.8afb		b5 00		lda $00,x	                lda 0,x
.8afd		85 2b		sta $2b		                sta tohold
.8aff		b5 01		lda $01,x	                lda 1,x
.8b01		85 2c		sta $2c		                sta tohold+1
.8b03		e8		inx		                inx
.8b04		e8		inx		                inx
.8b05						z_less_number_sign:
.8b05		60		rts		                rts
.8b06						xt_less_than:
.8b06		20 68 d7	jsr $d768	                jsr underflow_2
.8b09		a0 00		ldy #$00	                ldy #0          ; default false
.8b0b		20 a1 d6	jsr $d6a1	                jsr compare_16bit
.8b0e		f0 03		beq $8b13	                beq _false
.8b10		30 01		bmi $8b13	                bmi _false
.8b12		88		dey		                dey
.8b13						_false:
.8b13		98		tya		                tya
.8b14		e8		inx		                inx
.8b15		e8		inx		                inx
.8b16		95 00		sta $00,x	                sta 0,x
.8b18		95 01		sta $01,x	                sta 1,x
.8b1a		60		rts		z_less_than:    rts
.8b1b						xt_literal:
.8b1b		20 63 d7	jsr $d763	                jsr underflow_1
.8b1e		a9 0a		lda #$0a	                lda # z_template_push_tos - template_push_tos
.8b20		20 bc d5	jsr $d5bc	                jsr check_nc_limit
.8b23		90 0c		bcc $8b31	                bcc _inline
.8b25		a0 8b		ldy #$8b	                ldy #>literal_runtime
.8b27		a9 63		lda #$63	                lda #<literal_runtime
.8b29		20 8d d5	jsr $d58d	                jsr cmpl_call_ya
.8b2c		20 cf 83	jsr $83cf	                jsr xt_comma
.8b2f		80 27		bra $8b58	                bra z_literal
.8b31						_inline:
.8b31		a9 94		lda #$94	                lda #$94        ; sty zp,x
.8b33		b4 01		ldy $01,x	                ldy 1,x
.8b35		d0 02		bne $8b39	                bne +
.8b37		a9 74		lda #$74	                lda #$74        ; stz zp,x
.8b39						+
.8b39		48		pha		                pha
.8b3a		b5 00		lda $00,x	                lda 0,x
.8b3c		48		pha		                pha
.8b3d		98		tya		                tya             ; Y has the MSB
.8b3e		f0 03		beq $8b43	                beq +
.8b40		48		pha		                pha
.8b41		a9 02		lda #$02	                lda #2
.8b43						+
.8b43		49 02		eor #$02	                eor #2          ; invert A=0/2 to Y=2/0
.8b45		a8		tay		                tay
.8b46		b9 59 8b	lda $8b59,y	_copy:          lda template_push_tos,y
.8b49		c9 ff		cmp #$ff	                cmp #$ff
.8b4b		d0 01		bne $8b4e	                bne +
.8b4d		68		pla		                pla
.8b4e		20 9d d5	jsr $d59d	+               jsr cmpl_byte_a
.8b51		c8		iny		                iny
.8b52		c0 0a		cpy #$0a	                cpy #z_template_push_tos - template_push_tos
.8b54		d0 f0		bne $8b46	                bne _copy
.8b56		e8		inx		                inx             ; drop the literal
.8b57		e8		inx		                inx
.8b58		60		rts		z_literal:      rts
.8b59						template_push_tos:
.8b59		a0 ff		ldy #$ff	                ldy #$ff        ; we'll omit this if MSB is zero
.8b5b		a9 ff		lda #$ff	                lda #$ff
.8b5d		ca		dex		                dex
.8b5e		ca		dex		                dex
.8b5f		95 00		sta $00,x	                sta 0,x
>8b61		ff 01				                .byte $ff, 1    ; this will become either sty 1,x or stz 1,x
.8b63						z_template_push_tos:
.8b63						literal_runtime:
.8b63		ca		dex		                dex
.8b64		ca		dex		                dex
.8b65		68		pla		                pla             ; LSB
.8b66		85 25		sta $25		                sta tmp1
.8b68		68		pla		                pla             ; MSB
.8b69		85 26		sta $26		                sta tmp1+1
.8b6b		a0 01		ldy #$01	                ldy #1
.8b6d		b1 25		lda ($25),y	                lda (tmp1),y    ; LSB
.8b6f		95 00		sta $00,x	                sta 0,x
.8b71		c8		iny		                iny
.8b72		b1 25		lda ($25),y	                lda (tmp1),y    ; MSB
.8b74		95 01		sta $01,x	                sta 1,x
.8b76		98		tya		                tya
.8b77		18		clc		                clc
.8b78		65 25		adc $25		                adc tmp1
.8b7a		a8		tay		                tay
.8b7b		a5 26		lda $26		                lda tmp1+1
.8b7d		69 00		adc #$00	                adc #0
.8b7f		48		pha		                pha
.8b80		5a		phy		                phy
.8b81		60		rts		                rts
.8b82						xt_loop:
.8b82		ca		dex		                dex
.8b83		ca		dex		                dex
.8b84		a9 e5		lda #$e5	                lda #<loop_runtime
.8b86		95 00		sta $00,x	                sta 0,x
.8b88		a9 8b		lda #$8b	                lda #>loop_runtime
.8b8a		95 01		sta $01,x	                sta 1,x
.8b8c		a0 11		ldy #$11	                ldy #loop_runtime_end-loop_runtime
.8b8e		20 85 84	jsr $8485	                jsr cmpl_inline_y
.8b91		80 0f		bra $8ba2	                bra xt_loop_common
.8b93						xt_plus_loop:
.8b93		ca		dex		                dex
.8b94		ca		dex		                dex
.8b95		a9 f6		lda #$f6	                lda #<plus_loop_runtime
.8b97		95 00		sta $00,x	                sta 0,x
.8b99		a9 8b		lda #$8b	                lda #>plus_loop_runtime
.8b9b		95 01		sta $01,x	                sta 1,x
.8b9d		a0 1a		ldy #$1a	                ldy #plus_loop_runtime_end-plus_loop_runtime
.8b9f		20 85 84	jsr $8485	                jsr cmpl_inline_y
.8ba2						xt_loop_common:
.8ba2		20 aa d5	jsr $d5aa	                jsr cmpl_jump_tos
.8ba5		a5 22		lda $22		                lda loopleave+1         ; MSB=0 means we're done
.8ba7		f0 19		beq $8bc2	                beq _noleave
.8ba9						_next:
.8ba9		a0 01		ldy #$01	                ldy #1
.8bab		b1 21		lda ($21),y	                lda (loopleave),y
.8bad		48		pha		                pha
.8bae		a5 01		lda $01		                lda cp+1
.8bb0		91 21		sta ($21),y	                sta (loopleave),y
.8bb2		88		dey		                dey
.8bb3		b1 21		lda ($21),y	                lda (loopleave),y
.8bb5		48		pha		                pha
.8bb6		a5 00		lda $00		                lda cp
.8bb8		91 21		sta ($21),y	                sta (loopleave),y
.8bba		68		pla		                pla
.8bbb		85 21		sta $21		                sta loopleave
.8bbd		68		pla		                pla
.8bbe		85 22		sta $22		                sta loopleave+1
.8bc0		d0 e7		bne $8ba9	                bne _next
.8bc2						_noleave:
.8bc2		b5 00		lda $00,x	                lda 0,x
.8bc4		85 21		sta $21		                sta loopleave
.8bc6		b5 01		lda $01,x	                lda 1,x
.8bc8		85 22		sta $22		                sta loopleave+1
.8bca		a9 e0		lda #$e0	                lda #<xt_unloop
.8bcc		95 00		sta $00,x	                sta 0,x
.8bce		a9 96		lda #$96	                lda #>xt_unloop
.8bd0		95 01		sta $01,x	                sta 1,x
.8bd2		20 de 83	jsr $83de	                jsr xt_compile_comma
.8bd5		b5 01		lda $01,x	                lda 1,x                 ; MSB=0 means DO so nothing to do
.8bd7		f0 09		beq $8be2	                beq +
.8bd9		20 02 8a	jsr $8a02	                jsr xt_here
.8bdc		20 4c 93	jsr $934c	                jsr xt_swap
.8bdf		4c 36 93	jmp $9336	                jmp xt_store            ; write here as ?DO jmp target and return
.8be2		e8		inx		+               inx                     ; drop the ignored word for DO
.8be3		e8		inx		                inx
.8be4						z_loop:
.8be4		60		rts		z_plus_loop:    rts
.8be5						loop_runtime:
.8be5		e6 20		inc $20		                inc loopidx0        ; increment the LSB of loopindex
.8be7		d0 0d		bne $8bf6	                bne _repeat         ; avoid expensive test most of the time
.8be9		a4 1f		ldy $1f		                ldy loopctrl
.8beb		b9 01 01	lda $0101,y	                lda loopindex+1,y
.8bee		1a		inc a		                ina
.8bef		c9 80		cmp #$80	                cmp #$80
.8bf1		f0 06		beq $8bf9	                beq _repeat+3       ; done?  skip jmp back
.8bf3		99 01 01	sta $0101,y	                sta loopindex+1,y
.8bf6						_repeat:
.8bf6						loop_runtime_end:
.8bf6						plus_loop_runtime:
.8bf6		18		clc		                clc
.8bf7		b5 00		lda $00,x	                lda 0,x             ; LSB of step
.8bf9		65 20		adc $20		                adc loopidx0
.8bfb		85 20		sta $20		                sta loopidx0
.8bfd		e8		inx		                inx                 ; dump step from TOS before MSB test
.8bfe		e8		inx		                inx                 ; since we might skip it
.8bff		b5 ff		lda $ff,x	                lda $FF,x           ; MSB of step since 1,x == -1,x+2
.8c01		d0 02		bne $8c05	                bne _chkv           ; if it's non-zero we have to check
.8c03		90 0b		bcc $8c10	                bcc _repeat         ; but if 0 and no carry, we're good
.8c05		b8		clv		_chkv:          clv
.8c06		a4 1f		ldy $1f		                ldy loopctrl        ; get LCB offset
.8c08		79 01 01	adc $0101,y	                adc loopindex+1,y   ; MSB of index
.8c0b		99 01 01	sta $0101,y	                sta loopindex+1,y   ; put MSB of index back on stack
.8c0e		70 03		bvs $8c13	                bvs _repeat+3     ; skip over JMP instruction
.8c10						_repeat:
.8c10						plus_loop_runtime_end:
.8c10						xt_lshift:
.8c10		20 68 d7	jsr $d768	                jsr underflow_2
.8c13		b5 00		lda $00,x	                lda 0,x
.8c15		29 0f		and #$0f	                and #%00001111
.8c17		f0 08		beq $8c21	                beq _done
.8c19		a8		tay		                tay
.8c1a						_loop:
.8c1a		16 02		asl $02,x	                asl 2,x
.8c1c		36 03		rol $03,x	                rol 3,x
.8c1e		88		dey		                dey
.8c1f		d0 f9		bne $8c1a	                bne _loop
.8c21						_done:
.8c21		e8		inx		                inx
.8c22		e8		inx		                inx
.8c23		60		rts		z_lshift:       rts
.8c24						xt_m_star:
.8c24		20 68 d7	jsr $d768	                jsr underflow_2
.8c27		b5 01		lda $01,x	                lda 1,x         ; MSB of n1
.8c29		55 03		eor $03,x	                eor 3,x         ; MSB of n2
.8c2b		48		pha		                pha
.8c2c		20 d1 80	jsr $80d1	                jsr xt_abs
.8c2f		20 4c 93	jsr $934c	                jsr xt_swap
.8c32		20 d1 80	jsr $80d1	                jsr xt_abs
.8c35		20 9a 96	jsr $969a	                jsr xt_um_star          ; ( d )
.8c38		68		pla		                pla
.8c39		10 03		bpl $8c3e	                bpl _done
.8c3b		20 f9 9d	jsr $9df9	                jsr xt_dnegate
.8c3e						_done:
.8c3e		60		rts		z_m_star:       rts
.8c3f						xt_marker:
.8c3f		20 ba d6	jsr $d6ba	                jsr current_to_dp
.8c42		a5 02		lda $02		                lda dp
.8c44		48		pha		                pha
.8c45		a5 03		lda $03		                lda dp+1
.8c47		48		pha		                pha
.8c48		a5 00		lda $00		                lda cp
.8c4a		48		pha		                pha
.8c4b		a5 01		lda $01		                lda cp+1
.8c4d		48		pha		                pha
.8c4e		20 00 85	jsr $8500	                jsr xt_create
.8c51		a5 00		lda $00		                lda cp          ; LSB
.8c53		38		sec		                sec
.8c54		e9 02		sbc #$02	                sbc #2
.8c56		85 00		sta $00		                sta cp
.8c58		a5 01		lda $01		                lda cp+1        ; MSB
.8c5a		e9 00		sbc #$00	                sbc #0          ; we only care about the borrow
.8c5c		85 01		sta $01		                sta cp+1
.8c5e		a0 8c		ldy #$8c	                ldy #>marker_runtime
.8c60		a9 7d		lda #$7d	                lda #<marker_runtime
.8c62		20 99 d5	jsr $d599	                jsr cmpl_word_ya
.8c65		7a		ply		                ply                     ; MSB
.8c66		68		pla		                pla                     ; LSB
.8c67		20 99 d5	jsr $d599	                jsr cmpl_word_ya
.8c6a		7a		ply		                ply                     ; MSB
.8c6b		68		pla		                pla                     ; LSB
.8c6c		20 99 d5	jsr $d599	                jsr cmpl_word_ya
.8c6f		a0 04		ldy #$04	                ldy #4                  ; Start at CURRENT
.8c71						_marker_loop:
.8c71		b1 08		lda ($08),y	                lda (up),y
.8c73		20 9d d5	jsr $d59d	                jsr cmpl_byte_a
.8c76		c8		iny		                iny
.8c77		98		tya		                tya
.8c78		c9 28		cmp #$28	                cmp #40                 ; One past the end of the search order.
.8c7a		d0 f5		bne $8c71	                bne _marker_loop
.8c7c		60		rts		z_marker:       rts
.8c7d						marker_runtime:
.8c7d		68		pla		                pla
.8c7e		85 25		sta $25		                sta tmp1        ; LSB of address
.8c80		68		pla		                pla
.8c81		85 26		sta $26		                sta tmp1+1      ; MSB of address
.8c83		e6 25		inc $25		                inc tmp1
.8c85		d0 02		bne $8c89	                bne +
.8c87		e6 26		inc $26		                inc tmp1+1
.8c89						+
.8c89		a0 00		ldy #$00	                ldy #0
.8c8b		b1 25		lda ($25),y	                lda (tmp1),y
.8c8d		85 00		sta $00		                sta cp
.8c8f		c8		iny		                iny
.8c90		b1 25		lda ($25),y	                lda (tmp1),y
.8c92		85 01		sta $01		                sta cp+1
.8c94		c8		iny		                iny
.8c95		b1 25		lda ($25),y	                lda (tmp1),y
.8c97		85 02		sta $02		                sta dp
.8c99		c8		iny		                iny
.8c9a		b1 25		lda ($25),y	                lda (tmp1),y
.8c9c		85 03		sta $03		                sta dp+1
.8c9e		a0 04		ldy #$04	                ldy #4
.8ca0						_marker_restore_loop:
.8ca0		b1 25		lda ($25),y	                lda (tmp1), y
.8ca2		91 08		sta ($08),y	                sta (up), y
.8ca4		c8		iny		                iny
.8ca5		98		tya		                tya
.8ca6		c9 28		cmp #$28	                cmp #40                 ; One past the end of the search order.
.8ca8		d0 f6		bne $8ca0	                bne _marker_restore_loop
.8caa		20 cd d6	jsr $d6cd	                jsr dp_to_current       ; Move the CURRENT DP back.
.8cad		60		rts		                rts
.8cae						xt_max:
.8cae		20 68 d7	jsr $d768	                jsr underflow_2
.8cb1		b5 00		lda $00,x	                lda 0,x         ; LSB of TOS
.8cb3		d5 02		cmp $02,x	                cmp 2,x         ; LSB of NOS, this sets the carry
.8cb5		b5 01		lda $01,x	                lda 1,x         ; MSB of TOS
.8cb7		f5 03		sbc $03,x	                sbc 3,x         ; MSB of NOS
.8cb9		50 02		bvc $8cbd	                bvc _no_overflow
.8cbb		49 80		eor #$80	                eor #$80        ; complement negative flag
.8cbd						_no_overflow:
.8cbd		30 08		bmi $8cc7	                bmi _keep_nos
.8cbf		b5 00		lda $00,x	                lda 0,x
.8cc1		95 02		sta $02,x	                sta 2,x
.8cc3		b5 01		lda $01,x	                lda 1,x
.8cc5		95 03		sta $03,x	                sta 3,x
.8cc7						_keep_nos:
.8cc7		e8		inx		                inx
.8cc8		e8		inx		                inx
.8cc9		60		rts		z_max:          rts
.8cca						xt_min:
.8cca		20 68 d7	jsr $d768	                jsr underflow_2
.8ccd		b5 00		lda $00,x	                lda 0,x         ; LSB of TOS
.8ccf		d5 02		cmp $02,x	                cmp 2,x         ; LSB of NOS, this sets carry
.8cd1		b5 01		lda $01,x	                lda 1,x         ; MSB of TOS
.8cd3		f5 03		sbc $03,x	                sbc 3,x         ; MSB of NOS
.8cd5		50 02		bvc $8cd9	                bvc _no_overflow
.8cd7		49 80		eor #$80	                eor #$80
.8cd9						_no_overflow:
.8cd9		10 08		bpl $8ce3	                bpl _keep_nos
.8cdb		b5 00		lda $00,x	                lda 0,x
.8cdd		95 02		sta $02,x	                sta 2,x
.8cdf		b5 01		lda $01,x	                lda 1,x
.8ce1		95 03		sta $03,x	                sta 3,x
.8ce3						_keep_nos:
.8ce3		e8		inx		                inx
.8ce4		e8		inx		                inx
.8ce5		60		rts		z_min:          rts
.8ce6						xt_minus:
.8ce6		20 68 d7	jsr $d768	                jsr underflow_2
.8ce9		38		sec		                sec
.8cea		b5 02		lda $02,x	                lda 2,x         ; LSB
.8cec		f5 00		sbc $00,x	                sbc 0,x
.8cee		95 02		sta $02,x	                sta 2,x
.8cf0		b5 03		lda $03,x	                lda 3,x         ; MSB
.8cf2		f5 01		sbc $01,x	                sbc 1,x
.8cf4		95 03		sta $03,x	                sta 3,x
.8cf6		e8		inx		                inx
.8cf7		e8		inx		                inx
.8cf8		60		rts		z_minus:        rts
.8cf9						xt_mod:
.8cf9		20 68 d7	jsr $d768	                jsr underflow_2
.8cfc		20 66 92	jsr $9266	                jsr xt_slash_mod
.8cff		e8		inx		                inx             ; DROP
.8d00		e8		inx		                inx
.8d01						z_mod:
.8d01		60		rts		                rts
.8d02						xt_move:
.8d02		b5 03		lda $03,x	                lda 3,x                 ; MSB of addr2
.8d04		d5 05		cmp $05,x	                cmp 5,x                 ; MSB of addr1
.8d06		f0 05		beq $8d0d	                beq _lsb                ; wasn't helpful, move to LSB
.8d08		b0 0e		bcs $8d18	                bcs _to_move_up         ; we want CMOVE>
.8d0a		4c dc 9e	jmp $9edc	                jmp xt_cmove            ; JSR/RTS
.8d0d						_lsb:
.8d0d		b5 02		lda $02,x	                lda 2,x                 ; LSB of addr2
.8d0f		d5 04		cmp $04,x	                cmp 4,x                 ; LSB of addr1
.8d11		f0 08		beq $8d1b	                beq _equal              ; LSB is equal as well
.8d13		b0 03		bcs $8d18	                bcs _to_move_up         ; we want CMOVE>
.8d15		4c dc 9e	jmp $9edc	                jmp xt_cmove            ; JSR/RTS
.8d18						_to_move_up:
.8d18		4c 17 9f	jmp $9f17	                jmp xt_cmove_up         ; JSR/RTS
.8d1b						_equal:
.8d1b		8a		txa		                txa
.8d1c		18		clc		                clc
.8d1d		69 06		adc #$06	                adc #6
.8d1f		aa		tax		                tax
.8d20		60		rts		z_move:         rts
.8d21						xt_negate:
.8d21		20 63 d7	jsr $d763	                jsr underflow_1
.8d24		a9 00		lda #$00	        	lda #0
.8d26		38		sec		                sec
.8d27		f5 00		sbc $00,x	                sbc 0,x         ; LSB
.8d29		95 00		sta $00,x	                sta 0,x
.8d2b		a9 00		lda #$00	                lda #0
.8d2d		f5 01		sbc $01,x	                sbc 1,x         ; MSB
.8d2f		95 01		sta $01,x	                sta 1,x
.8d31		60		rts		z_negate:       rts
.8d32						xt_nip:
.8d32		20 68 d7	jsr $d768	                jsr underflow_2
.8d35		b5 00		lda $00,x	                lda 0,x         ; LSB
.8d37		95 02		sta $02,x	                sta 2,x
.8d39		b5 01		lda $01,x	                lda 1,x         ; MSB
.8d3b		95 03		sta $03,x	                sta 3,x
.8d3d		e8		inx		                inx
.8d3e		e8		inx		                inx
.8d3f		60		rts		z_nip:          rts
.8d40						xt_not_equals:
.8d40		20 68 d7	jsr $d768	                jsr underflow_2
.8d43		a0 00		ldy #$00	                ldy #0                  ; default is true
.8d45		b5 00		lda $00,x	                lda 0,x                 ; LSB
.8d47		d5 02		cmp $02,x	                cmp 2,x
.8d49		d0 0a		bne $8d55	                bne _not_equal
.8d4b		b5 01		lda $01,x	                lda 1,x                 ; MSB
.8d4d		d5 03		cmp $03,x	                cmp 3,x
.8d4f		d0 04		bne $8d55	                bne _not_equal
.8d51		a9 ff		lda #$ff	                lda #$FF
.8d53		80 01		bra $8d56	                bra _done
.8d55						_not_equal:
.8d55		88		dey		                dey                     ; drop thru to done
.8d56						_done:
.8d56		98		tya		                tya
.8d57		e8		inx		                inx
.8d58		e8		inx		                inx
.8d59		95 00		sta $00,x	                sta 0,x
.8d5b		95 01		sta $01,x	                sta 1,x
.8d5d		60		rts		z_not_equals:   rts
.8d5e						xt_number_sign:
.8d5e		20 68 d7	jsr $d768	                jsr underflow_2         ; double number
.8d61		20 fd 82	jsr $82fd	                jsr xt_base
.8d64		20 01 89	jsr $8901	                jsr xt_fetch            ; ( ud1 base )
.8d67		20 8a 94	jsr $948a	                jsr xt_to_r             ; >r
.8d6a		20 8b 9d	jsr $9d8b	                jsr xt_zero             ; 0
.8d6d		20 db 8f	jsr $8fdb	                jsr xt_r_fetch          ; r@
.8d70		20 58 96	jsr $9658	                jsr xt_um_slash_mod     ; um/mod
.8d73		20 8d 90	jsr $908d	                jsr xt_rot              ; rot
.8d76		20 8d 90	jsr $908d	                jsr xt_rot              ; rot
.8d79		20 f0 8f	jsr $8ff0	                jsr xt_r_from           ; r>
.8d7c		20 58 96	jsr $9658	                jsr xt_um_slash_mod     ; um/mod
.8d7f		20 8d 90	jsr $908d	                jsr xt_rot              ; rot
.8d82		20 8d 90	jsr $908d	                jsr xt_rot              ; ( ud rem )
.8d85		b5 00		lda $00,x	                lda 0,x
.8d87		a8		tay		                tay
.8d88		b9 b1 d2	lda $d2b1,y	                lda s_abc_upper,y
.8d8b		95 00		sta $00,x	                sta 0,x
.8d8d		74 01		stz $01,x	                stz 1,x                 ; paranoid; now ( ud char )
.8d8f		20 14 8a	jsr $8a14	                jsr xt_hold
.8d92						z_number_sign:
.8d92		60		rts		                rts
.8d93						xt_number_sign_greater:
.8d93		20 68 d7	jsr $d768	                jsr underflow_2         ; double number
.8d96		a5 2b		lda $2b		                lda tohold
.8d98		95 00		sta $00,x	                sta 0,x         ; LSB of tohold
.8d9a		95 02		sta $02,x	                sta 2,x
.8d9c		a5 2c		lda $2c		                lda tohold+1
.8d9e		95 01		sta $01,x	                sta 1,x         ; MSB of addr
.8da0		95 03		sta $03,x	                sta 3,x         ; ( addr addr )
.8da2		20 15 8e	jsr $8e15	                jsr xt_pad      ; ( addr addr pad )
.8da5		38		sec		                sec
.8da6		b5 00		lda $00,x	                lda 0,x         ; LSB of pad address
.8da8		f5 02		sbc $02,x	                sbc 2,x
.8daa		95 02		sta $02,x	                sta 2,x
.8dac		b5 01		lda $01,x	                lda 1,x         ; MSB, which should always be zero
.8dae		f5 03		sbc $03,x	                sbc 3,x
.8db0		95 03		sta $03,x	                sta 3,x         ; ( addr u pad )
.8db2		e8		inx		                inx
.8db3		e8		inx		                inx
.8db4						z_number_sign_greater:
.8db4		60		rts		                rts
.8db5						xt_number_sign_s:
.8db5		20 68 d7	jsr $d768	                jsr underflow_2
.8db8						_loop:
.8db8		20 5e 8d	jsr $8d5e	                jsr xt_number_sign
.8dbb		b5 00		lda $00,x	                lda 0,x
.8dbd		15 01		ora $01,x	                ora 1,x
.8dbf		15 02		ora $02,x	                ora 2,x
.8dc1		15 03		ora $03,x	                ora 3,x
.8dc3		d0 f3		bne $8db8	                bne _loop
.8dc5						z_number_sign_s:
.8dc5		60		rts		                rts
.8dc6						xt_of:
.8dc6		a0 8e		ldy #$8e	                ldy #>xt_over
.8dc8		a9 07		lda #$07	                lda #<xt_over
.8dca		20 8d d5	jsr $d58d	                jsr cmpl_call_ya
.8dcd		a0 88		ldy #$88	                ldy #>xt_equal
.8dcf		a9 7d		lda #$7d	                lda #<xt_equal
.8dd1		20 8d d5	jsr $d58d	                jsr cmpl_call_ya
.8dd4		20 3b 8a	jsr $8a3b	                jsr xt_if
.8dd7		a0 87		ldy #$87	                ldy #>xt_drop
.8dd9		a9 3c		lda #$3c	                lda #<xt_drop
.8ddb		20 8d d5	jsr $d58d	                jsr cmpl_call_ya
.8dde		60		rts		z_of:           rts
.8ddf						xt_one_minus:
.8ddf		20 63 d7	jsr $d763	                jsr underflow_1
.8de2		b5 00		lda $00,x	                lda 0,x
.8de4		d0 02		bne $8de8	                bne +
.8de6		d6 01		dec $01,x	                dec 1,x
.8de8						+
.8de8		d6 00		dec $00,x	                dec 0,x
.8dea		60		rts		z_one_minus:    rts
.8deb						xt_char_plus:
.8deb						xt_one_plus:
.8deb		20 63 d7	jsr $d763	                jsr underflow_1
.8dee		f6 00		inc $00,x	                inc 0,x
.8df0		d0 02		bne $8df4	                bne _done
.8df2		f6 01		inc $01,x	                inc 1,x
.8df4						_done:
.8df4						z_char_plus:
.8df4		60		rts		z_one_plus:     rts
.8df5						xt_or:
.8df5		20 68 d7	jsr $d768	                jsr underflow_2
.8df8		b5 00		lda $00,x	                lda 0,x
.8dfa		15 02		ora $02,x	                ora 2,x
.8dfc		95 02		sta $02,x	                sta 2,x
.8dfe		b5 01		lda $01,x	                lda 1,x
.8e00		15 03		ora $03,x	                ora 3,x
.8e02		95 03		sta $03,x	                sta 3,x
.8e04		e8		inx		                inx
.8e05		e8		inx		                inx
.8e06		60		rts		z_or:           rts
.8e07						xt_over:
.8e07		20 68 d7	jsr $d768	                jsr underflow_2
.8e0a		ca		dex		                dex
.8e0b		ca		dex		                dex
.8e0c		b5 04		lda $04,x	                lda 4,x         ; LSB
.8e0e		95 00		sta $00,x	                sta 0,x
.8e10		b5 05		lda $05,x	                lda 5,x         ; MSB
.8e12		95 01		sta $01,x	                sta 1,x
.8e14		60		rts		z_over:         rts
.8e15						xt_pad:
.8e15		ca		dex		                dex
.8e16		ca		dex		                dex
.8e17		a5 00		lda $00		                lda cp
.8e19		18		clc		                clc
.8e1a		69 ff		adc #$ff	                adc #padoffset  ; assumes padoffset one byte in size
.8e1c		95 00		sta $00,x	                sta 0,x
.8e1e		a5 01		lda $01		                lda cp+1
.8e20		69 00		adc #$00	                adc #0          ; only need carry
.8e22		95 01		sta $01,x	                sta 1,x
.8e24		60		rts		z_pad:          rts
.8e25						xt_page:
.8e25		a9 1b		lda #$1b	                lda #AscESC
.8e27		20 ac 87	jsr $87ac	                jsr emit_a
.8e2a		a9 5b		lda #$5b	                lda #'['
.8e2c		20 ac 87	jsr $87ac	                jsr emit_a
.8e2f		a9 32		lda #$32	                lda #'2'
.8e31		20 ac 87	jsr $87ac	                jsr emit_a
.8e34		a9 4a		lda #$4a	                lda #'J'
.8e36		20 ac 87	jsr $87ac	                jsr emit_a
.8e39		20 8b 9d	jsr $9d8b	                jsr xt_zero
.8e3c		20 8b 9d	jsr $9d8b	                jsr xt_zero
.8e3f		20 a4 82	jsr $82a4	                jsr xt_at_xy
.8e42		60		rts		z_page:         rts
.8e43						xt_paren:
.8e43		ca		dex		                dex
.8e44		ca		dex		                dex
.8e45		a9 29		lda #$29	                lda #41     ; Right parenthesis
.8e47		95 00		sta $00,x	                sta 0,x
.8e49		74 01		stz $01,x	                stz 1,x
.8e4b		20 ae 8e	jsr $8eae	                jsr xt_parse
.8e4e		e8		inx		                inx
.8e4f		e8		inx		                inx
.8e50		e8		inx		                inx
.8e51		e8		inx		                inx
.8e52		60		rts		z_paren:        rts
.8e53						xt_parse_name:
.8e53		a5 0e		lda $0e		                lda ciblen              ; LSB of counter
.8e55		38		sec		                sec
.8e56		e5 10		sbc $10		                sbc toin
.8e58		85 25		sta $25		                sta tmp1
.8e5a		a5 0f		lda $0f		                lda ciblen+1            ; MSB
.8e5c		e5 11		sbc $11		                sbc toin+1
.8e5e		85 26		sta $26		                sta tmp1+1
.8e60		a5 25		lda $25		                lda tmp1
.8e62		05 26		ora $26		                ora tmp1+1
.8e64		f0 28		beq $8e8e	                beq _empty_line
.8e66		a5 0c		lda $0c		                lda cib
.8e68		18		clc		                clc
.8e69		65 10		adc $10		                adc toin
.8e6b		85 27		sta $27		                sta tmp2                ; LSB of first character
.8e6d		a5 0d		lda $0d		                lda cib+1
.8e6f		65 11		adc $11		                adc toin+1
.8e71		85 28		sta $28		                sta tmp2+1              ; MSB
.8e73						_skip_loop:
.8e73		b2 27		lda ($27)	                lda (tmp2)              ; work copy of cib
.8e75		20 56 d7	jsr $d756	                jsr is_whitespace
.8e78		90 1f		bcc $8e99	                bcc _char_found
.8e7a		e6 27		inc $27		                inc tmp2
.8e7c		d0 02		bne $8e80	                bne +
.8e7e		e6 28		inc $28		                inc tmp2+1
.8e80						+
.8e80		a5 25		lda $25		                lda tmp1
.8e82		d0 02		bne $8e86	                bne +
.8e84		c6 26		dec $26		                dec tmp1+1
.8e86		c6 25		dec $25		+               dec tmp1
.8e88		a5 25		lda $25		                lda tmp1
.8e8a		05 26		ora $26		                ora tmp1+1
.8e8c		d0 e5		bne $8e73	                bne _skip_loop          ; fall through if empty line
.8e8e						_empty_line:
.8e8e		ca		dex		                dex
.8e8f		ca		dex		                dex
.8e90		ca		dex		                dex
.8e91		ca		dex		                dex
.8e92		74 00		stz $00,x	                stz 0,x                 ; TOS is zero
.8e94		74 01		stz $01,x	                stz 1,x
.8e96		4c 43 8f	jmp $8f43	                jmp z_parse_name        ; skip over PARSE
.8e99						_char_found:
.8e99		a5 27		lda $27		                lda tmp2
.8e9b		38		sec		                sec
.8e9c		e5 0c		sbc $0c		                sbc cib
.8e9e		85 10		sta $10		                sta toin
.8ea0		a5 28		lda $28		                lda tmp2+1
.8ea2		e5 0d		sbc $0d		                sbc cib+1
.8ea4		85 11		sta $11		                sta toin+1
.8ea6		ca		dex		                dex
.8ea7		ca		dex		                dex
.8ea8		a9 20		lda #$20	                lda #AscSP
.8eaa		95 00		sta $00,x	                sta 0,x
.8eac		74 01		stz $01,x	                stz 1,x                 ; paranoid, now ( "name" c )
.8eae						xt_parse:
.8eae		20 63 d7	jsr $d763	                jsr underflow_1
.8eb1		a5 0e		lda $0e		                lda ciblen
.8eb3		05 0f		ora $0f		                ora ciblen+1
.8eb5		f0 0c		beq $8ec3	                beq _abort_parse
.8eb7		a5 11		lda $11		                lda toin+1              ; MSB
.8eb9		c5 0f		cmp $0f		                cmp ciblen+1
.8ebb		90 0e		bcc $8ecb	                bcc _go_parse           ; unsigned comparison
.8ebd		a5 10		lda $10		                lda toin                ; LSB
.8ebf		c5 0e		cmp $0e		                cmp ciblen
.8ec1		90 08		bcc $8ecb	                bcc _go_parse
.8ec3						_abort_parse:
.8ec3		ca		dex		                dex
.8ec4		ca		dex		                dex
.8ec5		74 00		stz $00,x	                stz 0,x
.8ec7		74 01		stz $01,x	                stz 1,x
.8ec9		80 78		bra $8f43	                bra _done
.8ecb						_go_parse:
.8ecb		b5 00		lda $00,x	                lda 0,x
.8ecd		85 23		sta $23		                sta tmptos
.8ecf		ca		dex		                dex
.8ed0		ca		dex		                dex
.8ed1		a5 0c		lda $0c		                lda cib
.8ed3		18		clc		                clc
.8ed4		65 10		adc $10		                adc toin        ; LSB
.8ed6		85 25		sta $25		                sta tmp1
.8ed8		85 27		sta $27		                sta tmp2
.8eda		95 02		sta $02,x	                sta 2,x
.8edc		a5 0d		lda $0d		                lda cib+1
.8ede		65 11		adc $11		                adc toin+1      ; MSB
.8ee0		85 26		sta $26		                sta tmp1+1
.8ee2		85 28		sta $28		                sta tmp2+1
.8ee4		95 03		sta $03,x	                sta 3,x
.8ee6		a5 0c		lda $0c		                lda cib
.8ee8		18		clc		                clc
.8ee9		65 0e		adc $0e		                adc ciblen
.8eeb		85 29		sta $29		                sta tmp3
.8eed		a5 0d		lda $0d		                lda cib+1
.8eef		65 0f		adc $0f		                adc ciblen+1
.8ef1		85 2a		sta $2a		                sta tmp3+1
.8ef3		64 24		stz $24		                stz tmptos+1
.8ef5						_loop:
.8ef5		a5 27		lda $27		                lda tmp2
.8ef7		c5 29		cmp $29		                cmp tmp3
.8ef9		d0 06		bne $8f01	                bne _not_empty
.8efb		a5 28		lda $28		                lda tmp2+1
.8efd		c5 2a		cmp $2a		                cmp tmp3+1
.8eff		f0 1d		beq $8f1e	                beq _eol
.8f01						_not_empty:
.8f01		b2 27		lda ($27)	                lda (tmp2)
.8f03		a4 23		ldy $23		                ldy tmptos
.8f05		c0 20		cpy #$20	                cpy #AscSP
.8f07		d0 07		bne $8f10	                bne _not_whitespace
.8f09		20 56 d7	jsr $d756	                jsr is_whitespace
.8f0c		90 02		bcc $8f10	                bcc _not_whitespace
.8f0e		80 0c		bra $8f1c	                bra _found_delimiter
.8f10						_not_whitespace:
.8f10		c5 23		cmp $23		                cmp tmptos
.8f12		f0 08		beq $8f1c	                beq _found_delimiter
.8f14		e6 27		inc $27		                inc tmp2
.8f16		d0 dd		bne $8ef5	                bne _loop
.8f18		e6 28		inc $28		                inc tmp2+1
.8f1a		80 d9		bra $8ef5	                bra _loop
.8f1c						_found_delimiter:
.8f1c		e6 24		inc $24		                inc tmptos+1
.8f1e						_eol:
.8f1e		a5 27		lda $27		                lda tmp2
.8f20		38		sec		                sec
.8f21		e5 25		sbc $25		                sbc tmp1
.8f23		95 00		sta $00,x	                sta 0,x
.8f25		a5 28		lda $28		                lda tmp2+1
.8f27		e5 26		sbc $26		                sbc tmp1+1
.8f29		95 01		sta $01,x	                sta 1,x
.8f2b		a5 27		lda $27		                lda tmp2
.8f2d		38		sec		                sec
.8f2e		e5 0c		sbc $0c		                sbc cib
.8f30		85 10		sta $10		                sta toin
.8f32		a5 28		lda $28		                lda tmp2+1
.8f34		e5 0d		sbc $0d		                sbc cib+1
.8f36		85 11		sta $11		                sta toin+1
.8f38		a5 10		lda $10		                lda toin
.8f3a		18		clc		                clc
.8f3b		65 24		adc $24		                adc tmptos+1
.8f3d		85 10		sta $10		                sta toin
.8f3f		90 02		bcc $8f43	                bcc +
.8f41		e6 11		inc $11		                inc toin+1
.8f43						+
.8f43						_done:
.8f43						z_parse_name:
.8f43		60		rts		z_parse:        rts
.8f44						xt_pick:
.8f44		16 00		asl $00,x	                asl 0,x         ; we assume u < 128 (stack is small)
.8f46		8a		txa		                txa
.8f47		75 00		adc $00,x	                adc 0,x
.8f49		a8		tay		                tay
.8f4a		b9 02 00	lda $0002,y	                lda 0002,y
.8f4d		95 00		sta $00,x	                sta 0,x
.8f4f		b9 03 00	lda $0003,y	                lda 0003,y
.8f52		95 01		sta $01,x	                sta 1,x
.8f54		60		rts		z_pick:         rts
.8f55						xt_plus:
.8f55		20 68 d7	jsr $d768	                jsr underflow_2
.8f58		18		clc		                clc
.8f59		b5 00		lda $00,x	                lda 0,x         ; LSB
.8f5b		75 02		adc $02,x	                adc 2,x
.8f5d		95 02		sta $02,x	                sta 2,x
.8f5f		b5 01		lda $01,x	                lda 1,x         ; MSB. No CLC, conserve carry bit
.8f61		75 03		adc $03,x	                adc 3,x
.8f63		95 03		sta $03,x	                sta 3,x
.8f65		e8		inx		                inx
.8f66		e8		inx		                inx
.8f67		60		rts		z_plus:         rts
.8f68						xt_plus_store:
.8f68		20 68 d7	jsr $d768	                jsr underflow_2
.8f6b		b5 00		lda $00,x	                lda 0,x
.8f6d		85 25		sta $25		                sta tmp1
.8f6f		b5 01		lda $01,x	                lda 1,x
.8f71		85 26		sta $26		                sta tmp1+1
.8f73		a0 00		ldy #$00	                ldy #0          ; LSB
.8f75		b1 25		lda ($25),y	                lda (tmp1),y
.8f77		18		clc		                clc
.8f78		75 02		adc $02,x	                adc 2,x
.8f7a		91 25		sta ($25),y	                sta (tmp1),y
.8f7c		c8		iny		                iny             ; MSB
.8f7d		b1 25		lda ($25),y	                lda (tmp1),y
.8f7f		75 03		adc $03,x	                adc 3,x
.8f81		91 25		sta ($25),y	                sta (tmp1),y
.8f83		e8		inx		                inx
.8f84		e8		inx		                inx
.8f85		e8		inx		                inx
.8f86		e8		inx		                inx
.8f87		60		rts		z_plus_store:   rts
.8f88						xt_postpone:
.8f88		20 53 8e	jsr $8e53	                jsr xt_parse_name               ; ( -- addr n )
.8f8b		b5 00		lda $00,x	                lda 0,x
.8f8d		15 01		ora $01,x	                ora 1,x
.8f8f		d0 05		bne $8f96	                bne +
.8f91		a9 05		lda #$05	                lda #err_noname
.8f93		4c 79 d7	jmp $d779	                jmp error
.8f96						+
.8f96		20 8a 9a	jsr $9a8a	                jsr xt_find_name                ; ( -- nt | 0 )
.8f99		d0 05		bne $8fa0	                bne +
.8f9b		a9 05		lda #$05	                lda #err_noname
.8f9d		4c 79 d7	jmp $d779	                jmp error
.8fa0						+
.8fa0		b5 00		lda $00,x	                lda 0,x
.8fa2		85 25		sta $25		                sta tmp1
.8fa4		b5 01		lda $01,x	                lda 1,x
.8fa6		85 26		sta $26		                sta tmp1+1
.8fa8		20 c8 9b	jsr $9bc8	                jsr xt_name_to_int              ; ( nt -- xt )
.8fab		e6 25		inc $25		                inc tmp1
.8fad		d0 02		bne $8fb1	                bne +
.8faf		e6 26		inc $26		                inc tmp1+1
.8fb1						+
.8fb1		b2 25		lda ($25)	                lda (tmp1)
.8fb3		29 04		and #$04	                and #IM         ; mask all but Intermediate flag
.8fb5		f0 05		beq $8fbc	                beq _not_immediate
.8fb7		20 de 83	jsr $83de	                jsr xt_compile_comma
.8fba		80 0a		bra $8fc6	                bra _done
.8fbc						_not_immediate:
.8fbc		20 1b 8b	jsr $8b1b	                jsr xt_literal
.8fbf		a0 83		ldy #$83	                ldy #>xt_compile_comma
.8fc1		a9 de		lda #$de	                lda #<xt_compile_comma
.8fc3		20 8d d5	jsr $d58d	                jsr cmpl_call_ya
.8fc6						_done:
.8fc6		60		rts		z_postpone:     rts
.8fc7						xt_question_dup:
.8fc7		20 63 d7	jsr $d763	                jsr underflow_1
.8fca		b5 00		lda $00,x	                lda 0,x
.8fcc		15 01		ora $01,x	                ora 1,x
.8fce		f0 0a		beq $8fda	                beq _done
.8fd0		ca		dex		                dex
.8fd1		ca		dex		                dex
.8fd2		b5 02		lda $02,x	                lda 2,x
.8fd4		95 00		sta $00,x	                sta 0,x
.8fd6		b5 03		lda $03,x	                lda 3,x
.8fd8		95 01		sta $01,x	                sta 1,x
.8fda						_done:
.8fda		60		rts		z_question_dup: rts
.8fdb						xt_r_fetch:
.8fdb		7a		ply		                ply             ; LSB
.8fdc		84 25		sty $25		                sty tmp1
.8fde		7a		ply		                ply             ; MSB
.8fdf		ca		dex		                dex
.8fe0		ca		dex		                dex
.8fe1		68		pla		                pla             ; LSB
.8fe2		95 00		sta $00,x	                sta 0,x
.8fe4		68		pla		                pla             ; MSB
.8fe5		95 01		sta $01,x	                sta 1,x
.8fe7		48		pha		                pha
.8fe8		b5 00		lda $00,x	                lda 0,x
.8fea		48		pha		                pha
.8feb		5a		phy		                phy             ; MSB
.8fec		a4 25		ldy $25		                ldy tmp1
.8fee		5a		phy		                phy             ; LSB
.8fef		60		rts		z_r_fetch:      rts
.8ff0						xt_r_from:
.8ff0		68		pla		                pla             ; LSB
.8ff1		85 23		sta $23		                sta tmptos
.8ff3		7a		ply		                ply             ; MSB
.8ff4		ca		dex		                dex
.8ff5		ca		dex		                dex
.8ff6		68		pla		                pla             ; LSB
.8ff7		95 00		sta $00,x	                sta 0,x
.8ff9		68		pla		                pla             ; MSB
.8ffa		95 01		sta $01,x	                sta 1,x
.8ffc		5a		phy		                phy             ; MSB
.8ffd		a5 23		lda $23		                lda tmptos
.8fff		48		pha		                pha             ; LSB
.9000		60		rts		z_r_from:       rts
.9001						xt_recurse:
.9001		a0 00		ldy #$00	                ldy #0
.9003		a9 20		lda #$20	                lda #OpJSR
.9005		91 00		sta ($00),y	                sta (cp),y
.9007		c8		iny		                iny
.9008		24 1c		bit $1c		                bit status
.900a		70 0c		bvs $9018	                bvs _nt_in_workword
.900c		a5 06		lda $06		                lda workword
.900e		91 00		sta ($00),y	                sta (cp),y
.9010		c8		iny		                iny
.9011		a5 07		lda $07		                lda workword+1
.9013		91 00		sta ($00),y	                sta (cp),y
.9015		c8		iny		                iny
.9016		80 1b		bra $9033	                bra _update_cp
.9018						_nt_in_workword:
.9018		a5 06		lda $06		                lda workword            ; LSB
.901a		18		clc		                clc
.901b		69 04		adc #$04	                adc #4
.901d		85 25		sta $25		                sta tmp1
.901f		a5 07		lda $07		                lda workword+1          ; MSB
.9021		69 00		adc #$00	                adc #0
.9023		85 26		sta $26		                sta tmp1+1
.9025		b2 25		lda ($25)	                lda (tmp1)
.9027		91 00		sta ($00),y	                sta (cp),y
.9029		5a		phy		                phy
.902a		a0 01		ldy #$01	                ldy #1
.902c		b1 25		lda ($25),y	                lda (tmp1),y
.902e		7a		ply		                ply
.902f		c8		iny		                iny
.9030		91 00		sta ($00),y	                sta (cp),y
.9032		c8		iny		                iny
.9033						_update_cp:
.9033		98		tya		                tya
.9034		18		clc		                clc
.9035		65 00		adc $00		                adc cp
.9037		85 00		sta $00		                sta cp
.9039		90 02		bcc $903d	                bcc _done
.903b		e6 01		inc $01		                inc cp+1
.903d						_done:
.903d		60		rts		z_recurse:      rts
.903e						xt_refill:
.903e		a5 0a		lda $0a		                lda insrc               ; cheat: We only check LSB
.9040		d0 2d		bne $906f	                bne _src_not_kbd
.9042		ca		dex		                dex
.9043		ca		dex		                dex
.9044		ca		dex		                dex
.9045		ca		dex		                dex
.9046		a5 0c		lda $0c		                lda cib                 ; address of CIB is NOS
.9048		95 02		sta $02,x	                sta 2,x
.904a		a5 0d		lda $0d		                lda cib+1
.904c		95 03		sta $03,x	                sta 3,x
.904e		64 0e		stz $0e		                stz ciblen              ; go in with empty buffer
.9050		64 0f		stz $0f		                stz ciblen+1
.9052		a9 ff		lda #$ff	                lda #bsize              ; max number of chars is TOS
.9054		95 00		sta $00,x	                sta 0,x
.9056		74 01		stz $01,x	                stz 1,x                 ; cheat: We only accept max 255
.9058		20 e6 80	jsr $80e6	                jsr xt_accept           ; ( addr n1 -- n2)
.905b		b5 00		lda $00,x	                lda 0,x
.905d		85 0e		sta $0e		                sta ciblen
.905f		b5 01		lda $01,x	                lda 1,x
.9061		85 0f		sta $0f		                sta ciblen+1            ; though we only accept 255 chars
.9063		64 10		stz $10		                stz toin
.9065		64 11		stz $11		                stz toin+1
.9067		a9 ff		lda #$ff	                lda #$FF                ; overwrite with TRUE flag
.9069		95 00		sta $00,x	                sta 0,x
.906b		95 01		sta $01,x	                sta 1,x
.906d		80 10		bra $907f	                bra _done
.906f						_src_not_kbd:
.906f		1a		inc a		                ina
.9070		d0 08		bne $907a	                bne _src_not_string
.9072		ca		dex		                dex
.9073		ca		dex		                dex
.9074		74 00		stz $00,x	                stz 0,x
.9076		74 01		stz $01,x	                stz 1,x
.9078		80 05		bra $907f	                bra z_refill
.907a						_src_not_string:
.907a		a9 01		lda #$01	                lda #err_badsource
.907c		4c 79 d7	jmp $d779	                jmp error
.907f						_done:
.907f		60		rts		z_refill:       rts
.9080						xt_repeat:
.9080		20 21 82	jsr $8221	                jsr xt_again
.9083		4c 56 87	jmp $8756	                jmp xt_then
.9086						z_repeat:
.9086						xt_right_bracket:
.9086		a9 ff		lda #$ff	                lda #$FF
.9088		85 1a		sta $1a		                sta state
.908a		85 1b		sta $1b		                sta state+1
.908c						z_right_bracket:
.908c		60		rts		                rts
.908d						xt_rot:
.908d		20 6d d7	jsr $d76d	                jsr underflow_3
.9090		b4 05		ldy $05,x	                ldy 5,x         ; MSB first
.9092		b5 03		lda $03,x	                lda 3,x
.9094		95 05		sta $05,x	                sta 5,x
.9096		b5 01		lda $01,x	                lda 1,x
.9098		95 03		sta $03,x	                sta 3,x
.909a		94 01		sty $01,x	                sty 1,x
.909c		b4 04		ldy $04,x	                ldy 4,x         ; LSB next
.909e		b5 02		lda $02,x	                lda 2,x
.90a0		95 04		sta $04,x	                sta 4,x
.90a2		b5 00		lda $00,x	                lda 0,x
.90a4		95 02		sta $02,x	                sta 2,x
.90a6		94 00		sty $00,x	                sty 0,x
.90a8		60		rts		z_rot:          rts
.90a9						xt_rshift:
.90a9		20 68 d7	jsr $d768	                jsr underflow_2
.90ac		b5 00		lda $00,x	                lda 0,x
.90ae		29 0f		and #$0f	                and #%00001111
.90b0		f0 08		beq $90ba	                beq _done               ; if 0 shifts, quit
.90b2		a8		tay		                tay
.90b3						_loop:
.90b3		56 03		lsr $03,x	                lsr 3,x
.90b5		76 02		ror $02,x	                ror 2,x
.90b7		88		dey		                dey
.90b8		d0 f9		bne $90b3	                bne _loop
.90ba						_done:
.90ba		e8		inx		                inx
.90bb		e8		inx		                inx
.90bc		60		rts		z_rshift:       rts
.90bd						xt_s_backslash_quote:
.90bd		a9 ff		lda #$ff	                lda #$FF
.90bf		85 27		sta $27		                sta tmp2
.90c1		64 28		stz $28		                stz tmp2+1
.90c3		20 da 90	jsr $90da	                jsr s_quote_start
.90c6						_done:
.90c6						z_s_backslash_quote:
.90c6		60		rts		                rts
.90c7						convert_hex_value:
.90c7		c9 41		cmp #$41	        cmp #'A'
.90c9		90 07		bcc $90d2	        bcc _digit
.90cb		29 df		and #$df	        and #$DF                ; Make it uppercase.
.90cd		38		sec		        sec
.90ce		e9 37		sbc #$37	        sbc #'7'                ; gives value 10 for 'A'
.90d0		80 03		bra $90d5	        bra _done
.90d2						_digit:
.90d2		38		sec		        sec
.90d3		e9 30		sbc #$30	        sbc #'0'
.90d5						_done:
.90d5		60		rts		        rts
.90d6						xt_s_quote:
.90d6		64 27		stz $27		                stz tmp2
.90d8		64 28		stz $28		                stz tmp2+1
.90da						s_quote_start:
.90da		20 b2 d5	jsr $d5b2	                jsr cmpl_jump_later
.90dd		20 02 8a	jsr $8a02	                jsr xt_here             ; the start of the string
.90e0						_savechars_loop:
.90e0		a5 11		lda $11		                lda toin+1              ; MSB
.90e2		c5 0f		cmp $0f		                cmp ciblen+1
.90e4		90 2a		bcc $9110	                bcc _input_fine         ; unsigned comparison
.90e6		a5 10		lda $10		                lda toin                ; LSB
.90e8		c5 0e		cmp $0e		                cmp ciblen
.90ea		90 24		bcc $9110	                bcc _input_fine
.90ec		a5 27		lda $27		                lda tmp2
.90ee		48		pha		                pha
.90ef		a5 28		lda $28		                lda tmp2+1
.90f1		48		pha		                pha
.90f2		a5 29		lda $29		                lda tmp3    ; Only tmp3 used, so don't bother with tmp3+1
.90f4		48		pha		                pha
.90f5		20 3e 90	jsr $903e	                jsr xt_refill           ; ( -- f )
.90f8		68		pla		                pla
.90f9		85 29		sta $29		                sta tmp3
.90fb		68		pla		                pla
.90fc		85 28		sta $28		                sta tmp2+1
.90fe		68		pla		                pla
.90ff		85 27		sta $27		                sta tmp2
.9101		b5 00		lda $00,x	                lda 0,x
.9103		15 01		ora $01,x	                ora 1,x
.9105		d0 05		bne $910c	                bne _refill_ok
.9107		a9 06		lda #$06	                lda #err_refill
.9109		4c 79 d7	jmp $d779	                jmp error
.910c						_refill_ok:
.910c		e8		inx		                inx
.910d		e8		inx		                inx
.910e		80 d0		bra $90e0	                bra _savechars_loop
.9110						_input_fine:
.9110		a5 0c		lda $0c		                lda cib
.9112		18		clc		                clc
.9113		65 10		adc $10		                adc toin        ; LSB
.9115		85 25		sta $25		                sta tmp1
.9117		a5 0d		lda $0d		                lda cib+1
.9119		65 11		adc $11		                adc toin+1      ; MSB
.911b		85 26		sta $26		                sta tmp1+1
.911d		b2 25		lda ($25)	                lda (tmp1)
.911f		24 27		bit $27		                bit tmp2
.9121		30 03		bmi $9126	                bmi _handle_escapes    ; Only checking bit 7
.9123		4c a9 91	jmp $91a9	                jmp _regular_char
.9126						_handle_escapes:
.9126		24 28		bit $28		                bit tmp2+1
.9128		30 03		bmi $912d	                bmi _escaped
.912a		4c 9f 91	jmp $919f	                jmp _not_escaped
.912d						_escaped:
.912d		70 3c		bvs $916b	                bvs _check_esc_chars
.912f		a9 01		lda #$01	                lda #1
.9131		24 28		bit $28		                bit tmp2+1
.9133		d0 10		bne $9145	                bne _esc_x_second_digit
.9135		e6 28		inc $28		                inc tmp2+1  ; Adjust flag for second digit next time.
.9137		b2 25		lda ($25)	                lda (tmp1)  ; Get the char again.
.9139		20 c7 90	jsr $90c7	                jsr convert_hex_value
.913c		0a		asl a		                asl
.913d		0a		asl a		                asl
.913e		0a		asl a		                asl
.913f		0a		asl a		                asl
.9140		85 29		sta $29		                sta tmp3    ; Save it for later.
.9142		4c b0 91	jmp $91b0	                jmp _next_character
.9145						_esc_x_second_digit:
.9145		64 28		stz $28		                stz tmp2+1
.9147		b2 25		lda ($25)	                lda (tmp1)
.9149		20 c7 90	jsr $90c7	                jsr convert_hex_value
.914c		05 29		ora $29		                ora tmp3
.914e		4c ad 91	jmp $91ad	                jmp _save_character
.9151						_esc_tr_table:
>9151		07				    .byte   7               ; a -> BEL (ASCII value 7)
>9152		08				    .byte   8               ; b -> Backspace (ASCII value 8)
>9153		00 00				    .byte   0,0             ; c, d no escape
>9155		1b				    .byte   27              ; e -> ESC (ASCII value 27)
>9156		0c				    .byte   12              ; f -> FF (ASCII value 12)
>9157		00 00 00 00 00			    .byte   0,0,0,0,0       ; g,h,i,j,k
>915c		0a				    .byte   10              ; l -> LF (ASCII value 10)
>915d		8d				    .byte   13+128          ; m -> CR/LF pair (ASCII values 13, 10)
>915e		0a				    .byte   10              ; n behaves like l --> lf
>915f		00 00				    .byte   0,0             ; o,p
>9161		22				    .byte   34              ; q -> Double quote (ASCII value 34)
>9162		0d				    .byte   13              ; r ->  CR (ASCII value 13)
>9163		00				    .byte   0               ; s
>9164		09				    .byte   9               ; t -> Horizontal TAB (ASCII value 9)
>9165		00				    .byte   0               ; u
>9166		0b				    .byte   11              ; v -> Vertical TAB (ASCII value 11)
>9167		00 00 00			    .byte   0,0,0           ; w,x,y   (x is a special case later)
>916a		80				    .byte   0+128           ; z -> NULL (ASCII value 0)
.916b						_check_esc_chars:
.916b		64 28		stz $28		                stz tmp2+1
.916d		c9 61		cmp #$61	                cmp #'a'
.916f		30 1a		bmi $918b	                bmi _check_esc_quote
.9171		c9 7b		cmp #$7b	                cmp #'z'+1
.9173		10 16		bpl $918b	                bpl _check_esc_quote
.9175		a8		tay		                tay
.9176		b9 f0 90	lda $90f0,y	                lda _esc_tr_table - 'a',y   ; fake base address to index with a-z directly
.9179		d0 03		bne $917e	                bne _esc_replace
.917b		98		tya		                tya                     ; revert if no translation
.917c		80 0d		bra $918b	                bra _check_esc_quote
.917e		10 2d		bpl $91ad	_esc_replace:   bpl _save_character     ; simple replacement
.9180		29 7f		and #$7f	                and #$7F                ; clear hi bit
.9182		f0 29		beq $91ad	                beq _save_character     ; NUL we can just output
.9184		20 9d d5	jsr $d59d	                jsr cmpl_byte_a              ; else output first char (CR)
.9187		a9 0a		lda #$0a	                lda #10                 ; followed by LF
.9189		80 22		bra $91ad	                bra _save_character
.918b						_check_esc_quote:
.918b		c9 22		cmp #$22	                cmp #'"'
.918d		f0 1e		beq $91ad	                beq _save_character
.918f						_check_esc_x:
.918f		c9 78		cmp #$78	                cmp #'x'
.9191		d0 06		bne $9199	                bne _check_esc_backslash
.9193		a9 be		lda #$be	                lda #%10111110        ; Clear bits 6 and 0
.9195		85 28		sta $28		                sta tmp2+1
.9197		80 17		bra $91b0	                bra _next_character
.9199						_check_esc_backslash:
.9199		c9 5c		cmp #$5c	                cmp #'\'
.919b		d0 0c		bne $91a9	                bne _regular_char
.919d		80 0e		bra $91ad	                bra _save_character
.919f						_not_escaped:
.919f		c9 5c		cmp #$5c	                cmp #'\'
.91a1		d0 06		bne $91a9	                bne _regular_char
.91a3		a9 ff		lda #$ff	                lda #$FF
.91a5		85 28		sta $28		                sta tmp2+1
.91a7		80 07		bra $91b0	                bra _next_character
.91a9						_regular_char:
.91a9		c9 22		cmp #$22	                cmp #'"'
.91ab		f0 0c		beq $91b9	                beq _found_string_end
.91ad						_save_character:
.91ad		20 9d d5	jsr $d59d	                jsr cmpl_byte_a
.91b0						_next_character:
.91b0		e6 10		inc $10		                inc toin
.91b2		d0 02		bne $91b6	                bne _savechars_loop_longjump
.91b4		e6 11		inc $11		                inc toin+1
.91b6						_savechars_loop_longjump:
.91b6		4c e0 90	jmp $90e0	                jmp _savechars_loop
.91b9						_found_string_end:
.91b9		e6 10		inc $10		                inc toin
.91bb		d0 02		bne $91bf	                bne +
.91bd		e6 11		inc $11		                inc toin+1
.91bf						+
.91bf		20 02 8a	jsr $8a02	                jsr xt_here
.91c2		20 8d 90	jsr $908d	                jsr xt_rot
.91c5		20 36 93	jsr $9336	                jsr xt_store    ; Update the jmp target
.91c8		20 02 8a	jsr $8a02	                jsr xt_here
.91cb		20 07 8e	jsr $8e07	                jsr xt_over
.91ce		20 e6 8c	jsr $8ce6	                jsr xt_minus    ; HERE - addr gives string length
.91d1		a5 1a		lda $1a		                lda state
.91d3		05 1b		ora $1b		                ora state+1             ; paranoid
.91d5		f0 03		beq $91da	                beq _done
.91d7		20 f6 a0	jsr $a0f6	                jsr cmpl_sliteral         ; ( addr u -- )
.91da						_done:
.91da		60		rts		z_s_quote:      rts
.91db						xt_s_to_d:
.91db		20 63 d7	jsr $d763	                jsr underflow_1
.91de		ca		dex		                dex
.91df		ca		dex		                dex
.91e0		74 00		stz $00,x	                stz 0,x
.91e2		74 01		stz $01,x	                stz 1,x
.91e4		b5 03		lda $03,x	                lda 3,x
.91e6		10 04		bpl $91ec	                bpl _done
.91e8		d6 00		dec $00,x	                dec 0,x
.91ea		d6 01		dec $01,x	                dec 1,x
.91ec						_done:
.91ec		60		rts		z_s_to_d:       rts
.91ed						xt_semicolon:
.91ed		24 1c		bit $1c		                bit status
.91ef		70 11		bvs $9202	                bvs _colonword
.91f1		a9 60		lda #$60	                lda #OpRTS
.91f3		20 9d d5	jsr $d59d	                jsr cmpl_byte_a
.91f6		ca		dex		                dex
.91f7		ca		dex		                dex
.91f8		a5 06		lda $06		                lda workword
.91fa		95 00		sta $00,x	                sta 0,x
.91fc		a5 07		lda $07		                lda workword+1
.91fe		95 01		sta $01,x	                sta 1,x
.9200		80 45		bra $9247	                bra _semicolon_done
.9202						_colonword:
.9202		a0 06		ldy #$06	                ldy #6
.9204		a5 00		lda $00		                lda cp
.9206		91 06		sta ($06),y	                sta (workword),y
.9208		c8		iny		                iny
.9209		a5 01		lda $01		                lda cp+1
.920b		91 06		sta ($06),y	                sta (workword),y
.920d		a9 60		lda #$60	                lda #OpRTS
.920f		20 9d d5	jsr $d59d	                jsr cmpl_byte_a
.9212		24 1c		bit $1c		                bit status
.9214		10 26		bpl $923c	                bpl _new_word   ; Bit 7 is clear = new word
.9216		ca		dex		                dex
.9217		ca		dex		                dex
.9218		ca		dex		                dex
.9219		ca		dex		                dex
.921a		b2 06		lda ($06)	                lda (workword)
.921c		95 00		sta $00,x	                sta 0,x
.921e		74 01		stz $01,x	                stz 1,x
.9220		a5 06		lda $06		                lda workword
.9222		18		clc		                clc
.9223		69 08		adc #$08	                adc #8
.9225		95 02		sta $02,x	                sta 2,x
.9227		a5 07		lda $07		                lda workword+1
.9229		69 00		adc #$00	                adc #0                  ; only want carry
.922b		95 03		sta $03,x	                sta 3,x
.922d		a9 02		lda #$02	                lda #str_redefined       ; address of string "redefined"
.922f		20 9f d7	jsr $d79f	                jsr print_string_no_lf
.9232		20 d3 95	jsr $95d3	                jsr xt_type
.9235		20 c7 92	jsr $92c7	                jsr xt_space
.9238		a9 80		lda #$80	                lda #%10000000
.923a		14 1c		trb $1c		                trb status
.923c						_new_word:
.923c		a5 06		lda $06		                lda workword
.923e		85 02		sta $02		                sta dp
.9240		a5 07		lda $07		                lda workword+1
.9242		85 03		sta $03		                sta dp+1
.9244		20 cd d6	jsr $d6cd	                jsr dp_to_current       ; Save the updated DP to the
.9247						_semicolon_done:
.9247		64 1a		stz $1a		                stz state
.9249		64 1b		stz $1b		                stz state+1
.924b		60		rts		z_semicolon:    rts
.924c						xt_sign:
.924c		20 63 d7	jsr $d763	                jsr underflow_1
.924f		b5 01		lda $01,x	                lda 1,x         ; check MSB of TOS
.9251		30 04		bmi $9257	                bmi _minus
.9253		e8		inx		                inx
.9254		e8		inx		                inx
.9255		80 09		bra $9260	                bra _done
.9257						_minus:
.9257		a9 2d		lda #$2d	                lda #'-'
.9259		95 00		sta $00,x	                sta 0,x         ; overwrite TOS
.925b		74 01		stz $01,x	                stz 1,x         ; paranoid
.925d		20 14 8a	jsr $8a14	                jsr xt_hold
.9260						_done:
.9260		60		rts		z_sign:         rts
.9261						xt_slash:
.9261		a9 00		lda #$00	                lda #0
.9263		48		pha		                pha
.9264		80 03		bra $9269	                bra slashmod_common
.9266						xt_slash_mod:
.9266		a9 ff		lda #$ff	                lda #$FF
.9268		48		pha		                pha             ; falls through to _common
.9269						slashmod_common:
.9269		20 8a 94	jsr $948a	                jsr xt_to_r             ; >R
.926c		20 db 91	jsr $91db	                jsr xt_s_to_d           ; S>D
.926f		20 f0 8f	jsr $8ff0	                jsr xt_r_from           ; R>
.9272		20 7e 92	jsr $927e	                jsr xt_sm_slash_rem     ; SM/REM
.9275		68		pla		                pla
.9276		d0 05		bne $927d	                bne _done
.9278		20 4c 93	jsr $934c	                jsr xt_swap
.927b		e8		inx		                inx             ; DROP
.927c		e8		inx		                inx
.927d						_done:
.927d						z_slash_mod:
.927d		60		rts		z_slash:        rts
.927e						xt_sm_slash_rem:
.927e		20 6d d7	jsr $d76d	                jsr underflow_3 ; contains double number
.9281		b5 03		lda $03,x	                lda 3,x
.9283		48		pha		                pha
.9284		b5 01		lda $01,x	                lda 1,x
.9286		55 03		eor $03,x	                eor 3,x
.9288		48		pha		                pha
.9289		20 d1 80	jsr $80d1	                jsr xt_abs
.928c		e8		inx		                inx             ; pretend we pushed n1 to R
.928d		e8		inx		                inx
.928e		20 da 9d	jsr $9dda	                jsr xt_dabs
.9291		ca		dex		                dex
.9292		ca		dex		                dex
.9293		20 58 96	jsr $9658	                jsr xt_um_slash_mod     ; UM/MOD
.9296		68		pla		                pla
.9297		10 03		bpl $929c	                bpl +
.9299		20 21 8d	jsr $8d21	                jsr xt_negate
.929c						+
.929c		68		pla		                pla
.929d		10 07		bpl $92a6	                bpl _done
.929f		e8		inx		                inx             ; pretend we pushed quotient to R
.92a0		e8		inx		                inx
.92a1		20 21 8d	jsr $8d21	                jsr xt_negate
.92a4		ca		dex		                dex
.92a5		ca		dex		                dex
.92a6						_done:
.92a6		60		rts		z_sm_slash_rem: rts
.92a7						xt_source:
.92a7		ca		dex		                dex
.92a8		ca		dex		                dex
.92a9		a5 0c		lda $0c		                lda cib
.92ab		95 00		sta $00,x	                sta 0,x
.92ad		a5 0d		lda $0d		                lda cib+1
.92af		95 01		sta $01,x	                sta 1,x
.92b1		ca		dex		                dex
.92b2		ca		dex		                dex
.92b3		a5 0e		lda $0e		                lda ciblen
.92b5		95 00		sta $00,x	                sta 0,x
.92b7		a5 0f		lda $0f		                lda ciblen+1
.92b9		95 01		sta $01,x	                sta 1,x
.92bb		60		rts		z_source:       rts
.92bc						xt_source_id:
.92bc		ca		dex		                dex
.92bd		ca		dex		                dex
.92be		a5 0a		lda $0a		                lda insrc
.92c0		95 00		sta $00,x	                sta 0,x
.92c2		a5 0b		lda $0b		                lda insrc+1
.92c4		95 01		sta $01,x	                sta 1,x
.92c6		60		rts		z_source_id:    rts
.92c7						xt_space:
.92c7		a9 20		lda #$20	                lda #AscSP
.92c9		20 ac 87	jsr $87ac	                jsr emit_a
.92cc		60		rts		z_space:        rts
.92cd						xt_spaces:
.92cd		20 63 d7	jsr $d763	                jsr underflow_1
.92d0		20 8b 9d	jsr $9d8b	                jsr xt_zero
.92d3		20 ae 8c	jsr $8cae	                jsr xt_max
.92d6		b5 00		lda $00,x	                lda 0,x
.92d8		15 01		ora $01,x	                ora 1,x
.92da		f0 2a		beq $9306	                beq _done
.92dc		b4 01		ldy $01,x	                ldy 1,x
.92de		d0 0c		bne $92ec	                bne _lots_of_spaces
.92e0		b4 00		ldy $00,x	                ldy 0,x
.92e2						_quick_loop:
.92e2		a9 20		lda #$20	                lda #AscSP
.92e4		20 ac 87	jsr $87ac	                jsr emit_a
.92e7		88		dey		                dey
.92e8		f0 1c		beq $9306	                beq _done
.92ea		80 f6		bra $92e2	                bra _quick_loop
.92ec						_lots_of_spaces:
.92ec		b4 00		ldy $00,x	                ldy 0,x
.92ee						_first_slow_loop:
.92ee		f0 08		beq $92f8	                beq _slow_outer_loop
.92f0		a9 20		lda #$20	                lda #AscSP
.92f2		20 ac 87	jsr $87ac	                jsr emit_a
.92f5		88		dey		                dey
.92f6		80 f6		bra $92ee	                bra _first_slow_loop
.92f8						_slow_outer_loop:
.92f8		a0 00		ldy #$00	                ldy #00
.92fa						_slow_inner_loop:
.92fa		a9 20		lda #$20	                lda #AscSP
.92fc		20 ac 87	jsr $87ac	                jsr emit_a
.92ff		88		dey		                dey
.9300		d0 f8		bne $92fa	                bne _slow_inner_loop
.9302		d6 01		dec $01,x	                dec 1,x
.9304		d0 f2		bne $92f8	                bne _slow_outer_loop
.9306						_done:
.9306		e8		inx		                inx             ; drop
.9307		e8		inx		                inx
.9308		60		rts		z_spaces:       rts
.9309						xt_star:
.9309		20 68 d7	jsr $d768	                jsr underflow_2
.930c		20 9a 96	jsr $969a	                jsr xt_um_star
.930f		e8		inx		                inx
.9310		e8		inx		                inx
.9311		60		rts		z_star:         rts
.9312						xt_star_slash:
.9312		20 1b 93	jsr $931b	                jsr xt_star_slash_mod
.9315		20 4c 93	jsr $934c	                jsr xt_swap
.9318		e8		inx		                inx
.9319		e8		inx		                inx
.931a						z_star_slash:
.931a		60		rts		                rts
.931b						xt_star_slash_mod:
.931b		20 6d d7	jsr $d76d	                jsr underflow_3
.931e		20 8a 94	jsr $948a	                jsr xt_to_r
.9321		20 24 8c	jsr $8c24	                jsr xt_m_star
.9324		20 f0 8f	jsr $8ff0	                jsr xt_r_from
.9327		20 7e 92	jsr $927e	                jsr xt_sm_slash_rem
.932a						z_star_slash_mod:
.932a		60		rts		                rts
.932b						xt_state:
.932b		ca		dex		                dex
.932c		ca		dex		                dex
.932d		a9 1a		lda #$1a	                lda #<state
.932f		95 00		sta $00,x	                sta 0,x
.9331		a9 00		lda #$00	                lda #>state
.9333		95 01		sta $01,x	                sta 1,x
.9335		60		rts		z_state:        rts
.9336						xt_store:
.9336		20 68 d7	jsr $d768	                jsr underflow_2
.9339		b5 02		lda $02,x	                lda 2,x         ; LSB
.933b		81 00		sta ($00,x)	                sta (0,x)
.933d		f6 00		inc $00,x	                inc 0,x
.933f		d0 02		bne $9343	                bne +
.9341		f6 01		inc $01,x	                inc 1,x
.9343						+
.9343		b5 03		lda $03,x	                lda 3,x         ; MSB
.9345		81 00		sta ($00,x)	                sta (0,x)
.9347		e8		inx		                inx             ; 2DROP
.9348		e8		inx		                inx
.9349		e8		inx		                inx
.934a		e8		inx		                inx
.934b		60		rts		z_store:        rts
.934c						xt_swap:
.934c		20 68 d7	jsr $d768	                jsr underflow_2
.934f		b5 00		lda $00,x	                lda 0,x         ; LSB
.9351		b4 02		ldy $02,x	                ldy 2,x
.9353		95 02		sta $02,x	                sta 2,x
.9355		94 00		sty $00,x	                sty 0,x
.9357		b5 01		lda $01,x	                lda 1,x         ; MSB
.9359		b4 03		ldy $03,x	                ldy 3,x
.935b		95 03		sta $03,x	                sta 3,x
.935d		94 01		sty $01,x	                sty 1,x
.935f		60		rts		z_swap:         rts
.9360						xt_tick:
.9360		20 53 8e	jsr $8e53	                jsr xt_parse_name       ; ( -- addr u )
.9363		b5 00		lda $00,x	                lda 0,x
.9365		15 01		ora $01,x	                ora 1,x
.9367		d0 05		bne $936e	                bne +
.9369		a9 05		lda #$05	                lda #err_noname
.936b		4c 79 d7	jmp $d779	                jmp error
.936e						+
.936e		20 8a 9a	jsr $9a8a	                jsr xt_find_name        ; ( addr u -- nt )
.9371		b5 00		lda $00,x	                lda 0,x
.9373		15 01		ora $01,x	                ora 1,x
.9375		d0 05		bne $937c	                bne +
.9377		a9 08		lda #$08	                lda #err_syntax
.9379		4c 79 d7	jmp $d779	                jmp error
.937c						+
.937c		20 c8 9b	jsr $9bc8	                jsr xt_name_to_int      ; ( nt -- xt )
.937f		60		rts		z_tick:         rts
.9380						xt_to:
.9380		20 60 93	jsr $9360	                jsr xt_tick             ; ( [n] xt )
.9383		b5 00		lda $00,x	                lda 0,x                 ; LSB
.9385		18		clc		                clc
.9386		69 03		adc #$03	                adc #3
.9388		85 25		sta $25		                sta tmp1
.938a		b5 01		lda $01,x	                lda 1,x                 ; MSB
.938c		69 00		adc #$00	                adc #0                  ; we just want the carry
.938e		85 26		sta $26		                sta tmp1+1
.9390		a5 1a		lda $1a		                lda state
.9392		05 1b		ora $1b		                ora state+1
.9394		f0 14		beq $93aa	                beq _interpret
.9396		a5 25		lda $25		                lda tmp1            ; replace TOS with tmp1
.9398		95 00		sta $00,x	                sta 0,x
.939a		a5 26		lda $26		                lda tmp1+1
.939c		95 01		sta $01,x	                sta 1,x
.939e		20 1b 8b	jsr $8b1b	                jsr xt_literal      ; generate the runtime for LITERAL tmp1
.93a1		a0 93		ldy #$93	                ldy #>xt_store      ; write the runtime for !
.93a3		a9 36		lda #$36	                lda #<xt_store
.93a5		20 8d d5	jsr $d58d	                jsr cmpl_call_ya
.93a8		80 11		bra $93bb	                bra _done
.93aa						_interpret:
.93aa		20 68 d7	jsr $d768	                jsr underflow_2
.93ad		e8		inx		                inx
.93ae		e8		inx		                inx                     ; leaving just ( n )
.93af		b5 00		lda $00,x	                lda 0,x
.93b1		92 25		sta ($25)	                sta (tmp1)              ; LSB
.93b3		a0 01		ldy #$01	                ldy #1
.93b5		b5 01		lda $01,x	                lda 1,x                 ; MSB
.93b7		91 25		sta ($25),y	                sta (tmp1),y            ; fall through to common
.93b9		e8		inx		                inx                     ; DROP
.93ba		e8		inx		                inx
.93bb						_done:
.93bb		60		rts		z_to:           rts
.93bc						xt_to_body:
.93bc		20 63 d7	jsr $d763	                jsr underflow_1
.93bf		20 42 87	jsr $8742	                jsr xt_dup              ; ( xt xt )
.93c2		20 42 9b	jsr $9b42	                jsr xt_int_to_name      ; ( xt nt )
.93c5		f6 00		inc $00,x	                inc 0,x
.93c7		d0 02		bne $93cb	                bne +
.93c9		f6 01		inc $01,x	                inc 1,x
.93cb						+
.93cb		a1 00		lda ($00,x)	                lda (0,x)               ; get status byte
.93cd		29 20		and #$20	                and #HC
.93cf		f0 0b		beq $93dc	                beq _no_cfa
.93d1		18		clc		                clc
.93d2		b5 02		lda $02,x	                lda 2,x         ; LSB
.93d4		69 03		adc #$03	                adc #3
.93d6		95 02		sta $02,x	                sta 2,x
.93d8		90 02		bcc $93dc	                bcc _no_cfa
.93da		f6 03		inc $03,x	                inc 3,x         ; MSB
.93dc						_no_cfa:
.93dc		e8		inx		                inx             ; get rid of the nt
.93dd		e8		inx		                inx
.93de						_done:
.93de		60		rts		z_to_body:      rts
.93df						xt_to_in:
.93df		ca		dex		                dex
.93e0		ca		dex		                dex
.93e1		a9 10		lda #$10	                lda #<toin
.93e3		95 00		sta $00,x	                sta 0,x
.93e5		a9 00		lda #$00	                lda #>toin      ; paranoid, should be zero
.93e7		95 01		sta $01,x	                sta 1,x
.93e9		60		rts		z_to_in:        rts
.93ea						xt_to_number:
.93ea		20 72 d7	jsr $d772	                jsr underflow_4
.93ed		b5 06		lda $06,x	                lda 6,x         ; ud-lo LSB
.93ef		85 2d		sta $2d		                sta scratch
.93f1		b5 07		lda $07,x	                lda 7,x         ; ud-lo MSB
.93f3		85 2e		sta $2e		                sta scratch+1
.93f5		b5 04		lda $04,x	                lda 4,x         ; ud-hi LSB
.93f7		85 2f		sta $2f		                sta scratch+2
.93f9		b5 05		lda $05,x	                lda 5,x         ; ud-hi MSB
.93fb		85 30		sta $30		                sta scratch+3
.93fd		ca		dex		                dex
.93fe		ca		dex		                dex
.93ff						_loop:
.93ff		a1 04		lda ($04,x)	                lda (4,x)
.9401		95 00		sta $00,x	                sta 0,x                 ; ( ud-lo ud-hi addr u char )
.9403		74 01		stz $01,x	                stz 1,x                 ; paranoid
.9405		20 2e 9a	jsr $9a2e	                jsr xt_digit_question   ; ( char -- n -1 | char 0 )
.9408		b5 00		lda $00,x	                lda 0,x
.940a		d0 04		bne $9410	                bne _digit_ok
.940c		e8		inx		                inx
.940d		e8		inx		                inx
.940e		80 67		bra $9477	                bra _done       ; ( ud-lo ud-hi addr u char )
.9410						_digit_ok:
.9410		b5 02		lda $02,x	                lda 2,x
.9412		85 31		sta $31		                sta scratch+4
.9414		b5 03		lda $03,x	                lda 3,x
.9416		85 32		sta $32		                sta scratch+5
.9418		a5 2f		lda $2f		                lda scratch+2
.941a		95 02		sta $02,x	                sta 2,x         ; NOS
.941c		a5 30		lda $30		                lda scratch+3
.941e		95 03		sta $03,x	                sta 3,x
.9420		a5 18		lda $18		                lda base
.9422		95 00		sta $00,x	                sta 0,x         ; TOS
.9424		74 01		stz $01,x	                stz 1,x         ; now ( ud-lo ud-hi addr u ud-hi base)
.9426		20 9a 96	jsr $969a	                jsr xt_um_star  ; ( ud-lo ud-hi addr u ud-hi-lo ud-hi-hi )
.9429		b5 02		lda $02,x	                lda 2,x         ; ud-hi-lo
.942b		85 33		sta $33		                sta scratch+6
.942d		b5 03		lda $03,x	                lda 3,x
.942f		85 34		sta $34		                sta scratch+7
.9431		a5 2d		lda $2d		                lda scratch
.9433		95 02		sta $02,x	                sta 2,x
.9435		a5 2e		lda $2e		                lda scratch+1
.9437		95 03		sta $03,x	                sta 3,x         ; ( ud-lo ud-hi addr u ud-lo ud-hi-hi )
.9439		a5 18		lda $18		                lda base
.943b		95 00		sta $00,x	                sta 0,x
.943d		74 01		stz $01,x	                stz 1,x         ; ( ud-lo ud-hi addr u ud-lo base )
.943f		20 9a 96	jsr $969a	                jsr xt_um_star  ; ( ud-lo ud-hi addr u ud-lo-lo ud-lo-hi )
.9442		b5 00		lda $00,x	                lda 0,x
.9444		85 2f		sta $2f		                sta scratch+2
.9446		b5 01		lda $01,x	                lda 1,x
.9448		85 30		sta $30		                sta scratch+3
.944a		b5 02		lda $02,x	                lda 2,x
.944c		85 2d		sta $2d		                sta scratch
.944e		b5 03		lda $03,x	                lda 3,x
.9450		85 2e		sta $2e		                sta scratch+1
.9452		18		clc		                clc
.9453		a5 2d		lda $2d		                lda scratch     ; ud-lo LSB
.9455		65 31		adc $31		                adc scratch+4   ; n LSB
.9457		85 2d		sta $2d		                sta scratch     ; this is the new ud-lo
.9459		a5 2e		lda $2e		                lda scratch+1   ; ud-lo MSB
.945b		65 32		adc $32		                adc scratch+5   ; n MSB
.945d		85 2e		sta $2e		                sta scratch+1
.945f		a5 2f		lda $2f		                lda scratch+2   ; LSB
.9461		65 33		adc $33		                adc scratch+6
.9463		85 2f		sta $2f		                sta scratch+2   ; this is the new ud-hi
.9465		a5 30		lda $30		                lda scratch+3   ; MSB
.9467		65 34		adc $34		                adc scratch+7
.9469		85 30		sta $30		                sta scratch+3
.946b		e8		inx		                inx
.946c		e8		inx		                inx             ; ( ud-lo ud-hi addr u ud-lo-lo )
.946d		f6 04		inc $04,x	                inc 4,x
.946f		d0 02		bne $9473	                bne +
.9471		f6 05		inc $05,x	                inc 5,x
.9473						+
.9473		d6 02		dec $02,x	                dec 2,x
.9475		d0 88		bne $93ff	                bne _loop
.9477						_done:
.9477		e8		inx		                inx
.9478		e8		inx		                inx             ; ( ud-lo ud-hi addr u )
.9479		a5 2d		lda $2d		                lda scratch     ; new ud-lo
.947b		95 06		sta $06,x	                sta 6,x
.947d		a5 2e		lda $2e		                lda scratch+1
.947f		95 07		sta $07,x	                sta 7,x
.9481		a5 2f		lda $2f		                lda scratch+2
.9483		95 04		sta $04,x	                sta 4,x
.9485		a5 30		lda $30		                lda scratch+3
.9487		95 05		sta $05,x	                sta 5,x
.9489		60		rts		z_to_number:    rts
.948a						xt_to_r:
.948a		68		pla		                pla             ; LSB
.948b		85 23		sta $23		                sta tmptos
.948d		7a		ply		                ply             ; MSB
.948e		20 63 d7	jsr $d763	                jsr underflow_1
.9491		b5 01		lda $01,x	                lda 1,x         ; MSB
.9493		48		pha		                pha
.9494		b5 00		lda $00,x	                lda 0,x         ; LSB
.9496		48		pha		                pha
.9497		e8		inx		                inx
.9498		e8		inx		                inx
.9499		5a		phy		                phy             ; MSB
.949a		a5 23		lda $23		                lda tmptos
.949c		48		pha		                pha             ; LSB
.949d		60		rts		z_to_r:         rts
.949e						xt_true:
.949e		ca		dex		                dex
.949f		ca		dex		                dex
.94a0		a9 ff		lda #$ff	                lda #$FF
.94a2		95 00		sta $00,x	                sta 0,x
.94a4		95 01		sta $01,x	                sta 1,x
.94a6		60		rts		z_true:         rts
.94a7						xt_tuck:
.94a7		20 68 d7	jsr $d768	                jsr underflow_2
.94aa		ca		dex		                dex
.94ab		ca		dex		                dex
.94ac		b4 04		ldy $04,x	                ldy 4,x         ; LSB
.94ae		b5 02		lda $02,x	                lda 2,x
.94b0		95 04		sta $04,x	                sta 4,x
.94b2		94 02		sty $02,x	                sty 2,x
.94b4		95 00		sta $00,x	                sta 0,x
.94b6		b4 05		ldy $05,x	                ldy 5,x         ; MSB
.94b8		b5 03		lda $03,x	                lda 3,x
.94ba		95 05		sta $05,x	                sta 5,x
.94bc		94 03		sty $03,x	                sty 3,x         ; bba
.94be		95 01		sta $01,x	                sta 1,x         ; baa
.94c0		60		rts		z_tuck:         rts
.94c1						xt_two_drop:
.94c1		20 68 d7	jsr $d768	                jsr underflow_2
.94c4		e8		inx		                inx
.94c5		e8		inx		                inx
.94c6		e8		inx		                inx
.94c7		e8		inx		                inx
.94c8		60		rts		z_two_drop:     rts
.94c9						xt_two_dup:
.94c9		20 68 d7	jsr $d768	                jsr underflow_2
.94cc		ca		dex		                dex
.94cd		ca		dex		                dex
.94ce		ca		dex		                dex
.94cf		ca		dex		                dex
.94d0		b5 04		lda $04,x	                lda 4,x         ; TOS
.94d2		95 00		sta $00,x	                sta 0,x
.94d4		b5 05		lda $05,x	                lda 5,x
.94d6		95 01		sta $01,x	                sta 1,x
.94d8		b5 06		lda $06,x	                lda 6,x         ; NOS
.94da		95 02		sta $02,x	                sta 2,x
.94dc		b5 07		lda $07,x	                lda 7,x
.94de		95 03		sta $03,x	                sta 3,x
.94e0		60		rts		z_two_dup:      rts
.94e1						xt_two_fetch:
.94e1		20 63 d7	jsr $d763	                jsr underflow_1
.94e4		b5 00		lda $00,x	                lda 0,x
.94e6		85 25		sta $25		                sta tmp1
.94e8		b4 01		ldy $01,x	                ldy 1,x
.94ea		84 26		sty $26		                sty tmp1+1
.94ec		ca		dex		                dex             ; reuse one stack element
.94ed		ca		dex		                dex
.94ee		b2 25		lda ($25)	                lda (tmp1)      ; copy LSB
.94f0		95 00		sta $00,x	                sta 0,x
.94f2		a0 01		ldy #$01	                ldy #1          ; copy next
.94f4		b1 25		lda ($25),y	                lda (tmp1),y
.94f6		95 01		sta $01,x	                sta 1,x
.94f8		c8		iny		                iny             ; copy next
.94f9		b1 25		lda ($25),y	                lda (tmp1),y
.94fb		95 02		sta $02,x	                sta 2,x
.94fd		c8		iny		                iny             ; copy next
.94fe		b1 25		lda ($25),y	                lda (tmp1),y
.9500		95 03		sta $03,x	                sta 3,x
.9502		60		rts		z_two_fetch:    rts
.9503						xt_two_over:
.9503		20 72 d7	jsr $d772	                jsr underflow_4
.9506		ca		dex		                dex
.9507		ca		dex		                dex
.9508		ca		dex		                dex
.9509		ca		dex		                dex
.950a		b5 08		lda $08,x	                lda 8,x
.950c		95 00		sta $00,x	                sta 0,x
.950e		b5 09		lda $09,x	                lda 9,x
.9510		95 01		sta $01,x	                sta 1,x
.9512		b5 0a		lda $0a,x	                lda 10,x
.9514		95 02		sta $02,x	                sta 2,x
.9516		b5 0b		lda $0b,x	                lda 11,x
.9518		95 03		sta $03,x	                sta 3,x
.951a		60		rts		z_two_over:     rts
.951b						xt_two_r_fetch:
.951b		ca		dex		                dex
.951c		ca		dex		                dex
.951d		ca		dex		                dex
.951e		ca		dex		                dex
.951f		8a		txa		                txa
.9520		ba		tsx		                tsx
.9521		da		phx		                phx             ; 65c02 has no TXY, so do it the hard way
.9522		7a		ply		                ply
.9523		aa		tax		                tax
.9524		b9 03 01	lda $0103,y	                lda $0103,y     ; LSB of top entry
.9527		95 00		sta $00,x	                sta 0,x
.9529		b9 04 01	lda $0104,y	                lda $0104,y     ; MSB of top entry
.952c		95 01		sta $01,x	                sta 1,x
.952e		b9 05 01	lda $0105,y	                lda $0105,y     ; LSB of bottom entry
.9531		95 02		sta $02,x	                sta 2,x
.9533		b9 06 01	lda $0106,y	                lda $0106,y     ; MSB of top entry
.9536		95 03		sta $03,x	                sta 3,x
.9538		60		rts		z_two_r_fetch:  rts
.9539						xt_two_r_from:
.9539		68		pla		                pla                     ; LSB
.953a		85 25		sta $25		                sta tmp1
.953c		68		pla		                pla                     ; MSB
.953d		85 26		sta $26		                sta tmp1+1
.953f		ca		dex		                dex
.9540		ca		dex		                dex
.9541		ca		dex		                dex
.9542		ca		dex		                dex
.9543		68		pla		                pla                     ; LSB
.9544		95 00		sta $00,x	                sta 0,x
.9546		68		pla		                pla                     ; MSB
.9547		95 01		sta $01,x	                sta 1,x
.9549		68		pla		                pla                     ; LSB
.954a		95 02		sta $02,x	                sta 2,x
.954c		68		pla		                pla                     ; MSB
.954d		95 03		sta $03,x	                sta 3,x
.954f		a5 26		lda $26		                lda tmp1+1              ; MSB
.9551		48		pha		                pha
.9552		a5 25		lda $25		                lda tmp1                ; LSB
.9554		48		pha		                pha
.9555		60		rts		z_two_r_from:   rts
.9556						xt_two_slash:
.9556		20 63 d7	jsr $d763	                jsr underflow_1
.9559		b5 01		lda $01,x	                lda 1,x
.955b		0a		asl a		                asl                     ; save the sign
.955c		76 01		ror $01,x	                ror 1,x
.955e		76 00		ror $00,x	                ror 0,x
.9560		60		rts		z_two_slash:    rts
.9561						xt_two_star:
.9561						xt_cells:
.9561		20 63 d7	jsr $d763	                jsr underflow_1
.9564		16 00		asl $00,x	                asl 0,x
.9566		36 01		rol $01,x	                rol 1,x
.9568						z_cells:
.9568		60		rts		z_two_star:     rts
.9569						xt_two_store:
.9569		20 6d d7	jsr $d76d	                jsr underflow_3
.956c		b5 00		lda $00,x	                lda 0,x
.956e		85 25		sta $25		                sta tmp1
.9570		b4 01		ldy $01,x	                ldy 1,x
.9572		84 26		sty $26		                sty tmp1+1
.9574		e8		inx		                inx
.9575		e8		inx		                inx
.9576		b5 00		lda $00,x	                lda 0,x         ; copy MSB
.9578		92 25		sta ($25)	                sta (tmp1)
.957a		b5 01		lda $01,x	                lda 1,x         ; copy next
.957c		a0 01		ldy #$01	                ldy #1
.957e		91 25		sta ($25),y	                sta (tmp1),y
.9580		b5 02		lda $02,x	                lda 2,x         ; copy next
.9582		c8		iny		                iny
.9583		91 25		sta ($25),y	                sta (tmp1),y
.9585		b5 03		lda $03,x	                lda 3,x         ; copy MSB
.9587		c8		iny		                iny
.9588		91 25		sta ($25),y	                sta (tmp1),y
.958a		e8		inx		                inx             ; 2DROP
.958b		e8		inx		                inx
.958c		e8		inx		                inx
.958d		e8		inx		                inx
.958e		60		rts		z_two_store:    rts
.958f						xt_two_swap:
.958f		20 72 d7	jsr $d772	                jsr underflow_4
.9592		b5 00		lda $00,x	                lda 0,x
.9594		b4 04		ldy $04,x	                ldy 4,x
.9596		95 04		sta $04,x	                sta 4,x
.9598		94 00		sty $00,x	                sty 0,x
.959a		b5 01		lda $01,x	                lda 1,x
.959c		b4 05		ldy $05,x	                ldy 5,x
.959e		95 05		sta $05,x	                sta 5,x
.95a0		94 01		sty $01,x	                sty 1,x
.95a2		b5 02		lda $02,x	                lda 2,x
.95a4		b4 06		ldy $06,x	                ldy 6,x
.95a6		95 06		sta $06,x	                sta 6,x
.95a8		94 02		sty $02,x	                sty 2,x
.95aa		b5 03		lda $03,x	                lda 3,x
.95ac		b4 07		ldy $07,x	                ldy 7,x
.95ae		95 07		sta $07,x	                sta 7,x
.95b0		94 03		sty $03,x	                sty 3,x
.95b2		60		rts		z_two_swap:     rts
.95b3						xt_two_to_r:
.95b3		68		pla		                pla             ; LSB
.95b4		85 25		sta $25		                sta tmp1
.95b6		68		pla		                pla             ; MSB
.95b7		85 26		sta $26		                sta tmp1+1
.95b9		20 68 d7	jsr $d768	                jsr underflow_2
.95bc		b5 03		lda $03,x	                lda 3,x         ; MSB
.95be		48		pha		                pha
.95bf		b5 02		lda $02,x	                lda 2,x         ; LSB
.95c1		48		pha		                pha
.95c2		b5 01		lda $01,x	                lda 1,x         ; MSB
.95c4		48		pha		                pha
.95c5		b5 00		lda $00,x	                lda 0,x         ; LSB
.95c7		48		pha		                pha
.95c8		e8		inx		                inx
.95c9		e8		inx		                inx
.95ca		e8		inx		                inx
.95cb		e8		inx		                inx
.95cc		a5 26		lda $26		                lda tmp1+1      ; MSB
.95ce		48		pha		                pha
.95cf		a5 25		lda $25		                lda tmp1        ; LSB
.95d1		48		pha		                pha
.95d2		60		rts		z_two_to_r:     rts
.95d3						xt_type:
.95d3		20 68 d7	jsr $d768	                jsr underflow_2
.95d6		b5 02		lda $02,x	                lda 2,x
.95d8		85 25		sta $25		                sta tmp1
.95da		b5 03		lda $03,x	                lda 3,x
.95dc		85 26		sta $26		                sta tmp1+1
.95de						_loop:
.95de		b5 00		lda $00,x	                lda 0,x
.95e0		15 01		ora $01,x	                ora 1,x
.95e2		f0 15		beq $95f9	                beq _done
.95e4		b2 25		lda ($25)	                lda (tmp1)
.95e6		20 ac 87	jsr $87ac	                jsr emit_a      ; avoids stack foolery
.95e9		e6 25		inc $25		                inc tmp1
.95eb		d0 02		bne $95ef	                bne +
.95ed		e6 26		inc $26		                inc tmp1+1
.95ef						+
.95ef		b5 00		lda $00,x	                lda 0,x
.95f1		d0 02		bne $95f5	                bne +
.95f3		d6 01		dec $01,x	                dec 1,x
.95f5						+
.95f5		d6 00		dec $00,x	                dec 0,x
.95f7		80 e5		bra $95de	                bra _loop
.95f9						_done:
.95f9		e8		inx		                inx
.95fa		e8		inx		                inx
.95fb		e8		inx		                inx
.95fc		e8		inx		                inx
.95fd		60		rts		z_type:         rts
.95fe						xt_u_dot:
.95fe		20 63 d7	jsr $d763	                jsr underflow_1
.9601		20 d0 d7	jsr $d7d0	                jsr print_u
.9604		a9 20		lda #$20	                lda #AscSP
.9606		20 ac 87	jsr $87ac	                jsr emit_a
.9609		60		rts		z_u_dot:        rts
.960a						xt_u_dot_r:
.960a		20 68 d7	jsr $d768	                jsr underflow_2
.960d		20 8a 94	jsr $948a	                jsr xt_to_r
.9610		20 8b 9d	jsr $9d8b	                jsr xt_zero
.9613		20 f8 8a	jsr $8af8	                jsr xt_less_number_sign
.9616		20 b5 8d	jsr $8db5	                jsr xt_number_sign_s
.9619		20 93 8d	jsr $8d93	                jsr xt_number_sign_greater
.961c		20 f0 8f	jsr $8ff0	                jsr xt_r_from
.961f		20 07 8e	jsr $8e07	                jsr xt_over
.9622		20 e6 8c	jsr $8ce6	                jsr xt_minus
.9625		20 cd 92	jsr $92cd	                jsr xt_spaces
.9628		20 d3 95	jsr $95d3	                jsr xt_type
.962b		60		rts		z_u_dot_r:      rts
.962c						xt_u_greater_than:
.962c		20 68 d7	jsr $d768	                jsr underflow_2
.962f		b5 00		lda $00,x	                lda 0,x
.9631		d5 02		cmp $02,x	                cmp 2,x
.9633		b5 01		lda $01,x	                lda 1,x
.9635		f5 03		sbc $03,x	                sbc 3,x
.9637		e8		inx		                inx
.9638		e8		inx		                inx
.9639		a9 00		lda #$00	                lda #0
.963b		69 ff		adc #$ff	                adc #$FF
.963d		95 00		sta $00,x	                sta 0,x         ; store flag
.963f		95 01		sta $01,x	                sta 1,x
.9641		60		rts		z_u_greater_than:    rts
.9642						xt_u_less_than:
.9642		20 68 d7	jsr $d768	                jsr underflow_2
.9645		b5 02		lda $02,x	                lda 2,x
.9647		d5 00		cmp $00,x	                cmp 0,x
.9649		b5 03		lda $03,x	                lda 3,x
.964b		f5 01		sbc $01,x	                sbc 1,x
.964d		e8		inx		                inx
.964e		e8		inx		                inx
.964f		a9 00		lda #$00	                lda #0
.9651		69 ff		adc #$ff	                adc #$FF
.9653		95 00		sta $00,x	                sta 0,x         ; store flag
.9655		95 01		sta $01,x	                sta 1,x
.9657		60		rts		z_u_less_than:    rts
.9658						xt_um_slash_mod:
.9658		20 6d d7	jsr $d76d	                jsr underflow_3
.965b		b5 00		lda $00,x	                lda 0,x
.965d		15 01		ora $01,x	                ora 1,x
.965f		d0 05		bne $9666	                bne _not_zero
.9661		a9 04		lda #$04	                lda #err_divzero
.9663		4c 79 d7	jmp $d779	                jmp error
.9666						_not_zero:
.9666		a9 11		lda #$11	                lda #17
.9668		85 23		sta $23		                sta tmptos
.966a						_loop:
.966a		36 04		rol $04,x	                rol 4,x
.966c		36 05		rol $05,x	                rol 5,x
.966e		c6 23		dec $23		                dec tmptos
.9670		f0 22		beq $9694	                beq _done
.9672		36 02		rol $02,x	                rol 2,x
.9674		36 03		rol $03,x	                rol 3,x
.9676		64 25		stz $25		                stz tmp1        ; store the bit we got from hi cell (MSB)
.9678		26 25		rol $25		                rol tmp1
.967a		38		sec		                sec
.967b		b5 02		lda $02,x	                lda 2,x
.967d		f5 00		sbc $00,x	                sbc 0,x
.967f		85 26		sta $26		                sta tmp1+1
.9681		b5 03		lda $03,x	                lda 3,x
.9683		f5 01		sbc $01,x	                sbc 1,x
.9685		a8		tay		                tay
.9686		a5 25		lda $25		                lda tmp1
.9688		e9 00		sbc #$00	                sbc #0
.968a		90 de		bcc $966a	                bcc _loop
.968c		a5 26		lda $26		                lda tmp1+1
.968e		95 02		sta $02,x	                sta 2,x
.9690		94 03		sty $03,x	                sty 3,x         ; used as temp storage
.9692		80 d6		bra $966a	                bra _loop
.9694						_done:
.9694		e8		inx		                inx
.9695		e8		inx		                inx
.9696		20 4c 93	jsr $934c	                jsr xt_swap
.9699		60		rts		z_um_slash_mod: rts
.969a						xt_um_star:
.969a		20 68 d7	jsr $d768	                jsr underflow_2
.969d		18		clc		                clc
.969e		b5 00		lda $00,x	                lda 0,x         ; copy TOS to tmp2
.96a0		e9 00		sbc #$00	                sbc #0
.96a2		85 27		sta $27		                sta tmp2
.96a4		b5 01		lda $01,x	                lda 1,x
.96a6		e9 00		sbc #$00	                sbc #0
.96a8		90 31		bcc $96db	                bcc _zero       ; is TOS zero?
.96aa		85 28		sta $28		                sta tmp2+1
.96ac		a9 00		lda #$00	                lda #0
.96ae		85 25		sta $25		                sta tmp1
.96b0		86 29		stx $29		                stx tmp3        ; tested for exit from outer loop
.96b2		ca		dex		                dex
.96b3		ca		dex		                dex
.96b4						_outer_loop:
.96b4		a0 08		ldy #$08	                ldy #8          ; counter inner loop
.96b6		56 04		lsr $04,x	                lsr 4,x         ; think "2,x" then later "3,x"
.96b8						_inner_loop:
.96b8		90 0c		bcc $96c6	                bcc _no_add
.96ba		85 26		sta $26		                sta tmp1+1      ; save time, don't CLC
.96bc		a5 25		lda $25		                lda tmp1
.96be		65 27		adc $27		                adc tmp2
.96c0		85 25		sta $25		                sta tmp1
.96c2		a5 26		lda $26		                lda tmp1+1
.96c4		65 28		adc $28		                adc tmp2+1
.96c6						_no_add:
.96c6		6a		ror a		                ror
.96c7		66 25		ror $25		                ror tmp1
.96c9		76 04		ror $04,x	                ror 4,x         ; think "2,x" then later "3,x"
.96cb		88		dey		                dey
.96cc		d0 ea		bne $96b8	                bne _inner_loop ; go back for one more shift?
.96ce		e8		inx		                inx
.96cf		e4 29		cpx $29		                cpx tmp3
.96d1		d0 e1		bne $96b4	                bne _outer_loop ; go back for eight more shifts?
.96d3		95 01		sta $01,x	                sta 1,x
.96d5		a5 25		lda $25		                lda tmp1
.96d7		95 00		sta $00,x	                sta 0,x
.96d9		80 04		bra $96df	                bra _done
.96db						_zero:
.96db		74 02		stz $02,x	                stz 2,x
.96dd		74 03		stz $03,x	                stz 3,x
.96df						_done:
.96df		60		rts		z_um_star:      rts
.96e0						xt_unloop:
.96e0		a4 1f		ldy $1f		                ldy loopctrl
.96e2		88		dey		                dey
.96e3		88		dey		                dey
.96e4		88		dey		                dey
.96e5		88		dey		                dey
.96e6		84 1f		sty $1f		                sty loopctrl
.96e8		30 05		bmi $96ef	                bmi z_unloop            ; no active loops?
.96ea		b9 00 01	lda $0100,y	                lda loopindex,y         ; else re-cache the LSB of loopindex
.96ed		85 20		sta $20		                sta loopidx0
.96ef		60		rts		z_unloop:       rts
.96f0						xt_until:
.96f0		a0 00		ldy #$00	                ldy #0
.96f2						-
.96f2		b9 4c 8a	lda $8a4c,y	                lda zero_test_runtime,y
.96f5		c9 60		cmp #$60	                cmp #OpRTS
.96f7		f0 03		beq $96fc	                beq +
.96f9		20 9d d5	jsr $d59d	                jsr cmpl_byte_a
.96fc						+
.96fc		c8		iny		                iny
.96fd		c0 0a		cpy #$0a	                cpy #(zero_test_footer_end - zero_test_runtime)
.96ff		d0 f1		bne $96f2	                bne -
.9701		20 cf 83	jsr $83cf	                jsr xt_comma
.9704		60		rts		z_until:        rts
.9705						xt_unused:
.9705		ca		dex		                dex
.9706		ca		dex		                dex
.9707		a9 00		lda #$00	                lda #<cp_end
.9709		38		sec		                sec
.970a		e5 00		sbc $00		                sbc cp
.970c		95 00		sta $00,x	                sta 0,x
.970e		a9 7c		lda #$7c	                lda #>cp_end
.9710		e5 01		sbc $01		                sbc cp+1
.9712		95 01		sta $01,x	                sta 1,x
.9714		60		rts		z_unused:       rts
.9715						xt_variable:
.9715		20 00 85	jsr $8500	                jsr xt_create
.9718		a9 00		lda #$00	                lda #0
.971a		92 00		sta ($00)	                sta (cp)
.971c		e6 00		inc $00		                inc cp
.971e		d0 02		bne $9722	                bne +
.9720		e6 01		inc $01		                inc cp+1
.9722						+
.9722		92 00		sta ($00)	                sta (cp)
.9724		e6 00		inc $00		                inc cp
.9726		d0 02		bne $972a	                bne +
.9728		e6 01		inc $01		                inc cp+1
.972a						+
.972a		20 c8 84	jsr $84c8	                jsr adjust_z
.972d		60		rts		z_variable:     rts
.972e						xt_while:
.972e		a0 8a		ldy #$8a	                ldy #>zero_branch_runtime
.9730		a9 56		lda #$56	                lda #<zero_branch_runtime
.9732		20 8d d5	jsr $d58d	                jsr cmpl_call_ya
.9735		20 02 8a	jsr $8a02	                jsr xt_here
.9738		a9 ff		lda #$ff	                lda #$FF
.973a		a8		tay		                tay
.973b		20 99 d5	jsr $d599	                jsr cmpl_word_ya
.973e		20 4c 93	jsr $934c	                jsr xt_swap
.9741		60		rts		z_while:        rts
.9742						xt_within:
.9742		20 6d d7	jsr $d76d	                jsr underflow_3
.9745		20 07 8e	jsr $8e07	                jsr xt_over
.9748		20 e6 8c	jsr $8ce6	                jsr xt_minus
.974b		20 8a 94	jsr $948a	                jsr xt_to_r
.974e		20 e6 8c	jsr $8ce6	                jsr xt_minus
.9751		20 f0 8f	jsr $8ff0	                jsr xt_r_from
.9754		20 42 96	jsr $9642	                jsr xt_u_less_than
.9757		60		rts		z_within:       rts
.9758						xt_word:
.9758		20 63 d7	jsr $d763	                jsr underflow_1
.975b		a4 10		ldy $10		                ldy toin                ; >IN
.975d						_loop:
.975d		c4 0e		cpy $0e		                cpy ciblen              ; quit if end of input
.975f		f0 09		beq $976a	                beq _found_char
.9761		b1 0c		lda ($0c),y	                lda (cib),y
.9763		d5 00		cmp $00,x	                cmp 0,x                 ; ASCII of delimiter
.9765		d0 03		bne $976a	                bne _found_char
.9767		c8		iny		                iny
.9768		80 f3		bra $975d	                bra _loop
.976a						_found_char:
.976a		84 10		sty $10		                sty toin
.976c		20 ae 8e	jsr $8eae	                jsr xt_parse            ; Returns ( addr u )
.976f		b5 00		lda $00,x	                lda 0,x
.9771		92 00		sta ($00)	                sta (cp)                ; Save length of string
.9773		48		pha		                pha                     ; Keep copy of length for later
.9774		20 42 87	jsr $8742	                jsr xt_dup              ; ( addr u u )
.9777		a5 00		lda $00		                lda cp
.9779		18		clc		                clc
.977a		69 01		adc #$01	                adc #1
.977c		95 02		sta $02,x	                sta 2,x                 ; LSB of CP
.977e		a5 01		lda $01		                lda cp+1
.9780		69 00		adc #$00	                adc #0
.9782		95 03		sta $03,x	                sta 3,x                 ; ( addr cp+1 u )
.9784		20 02 8d	jsr $8d02	                jsr xt_move
.9787		ca		dex		                dex
.9788		ca		dex		                dex
.9789		a5 00		lda $00		                lda cp
.978b		95 00		sta $00,x	                sta 0,x
.978d		a5 01		lda $01		                lda cp+1
.978f		95 01		sta $01,x	                sta 1,x
.9791		68		pla		                pla                     ; length of string
.9792		18		clc		                clc
.9793		65 00		adc $00		                adc cp
.9795		85 00		sta $00		                sta cp
.9797		90 02		bcc $979b	                bcc z_word
.9799		e6 01		inc $01		                inc cp+1
.979b		60		rts		z_word:         rts
.979c						xt_xor:
.979c		20 68 d7	jsr $d768	                jsr underflow_2
.979f		b5 00		lda $00,x	                lda 0,x
.97a1		55 02		eor $02,x	                eor 2,x
.97a3		95 02		sta $02,x	                sta 2,x
.97a5		b5 01		lda $01,x	                lda 1,x
.97a7		55 03		eor $03,x	                eor 3,x
.97a9		95 03		sta $03,x	                sta 3,x
.97ab		e8		inx		                inx
.97ac		e8		inx		                inx
.97ad		60		rts		z_xor:          rts
.97ae						xt_zero_equal:
.97ae		20 63 d7	jsr $d763	                jsr underflow_1
.97b1		b5 00		lda $00,x	                lda 0,x
.97b3		15 01		ora $01,x	                ora 1,x
.97b5		f0 02		beq $97b9	                beq _zero       ; if 0, A is inverse of the TRUE (-1) we want
.97b7		a9 ff		lda #$ff	                lda #$FF        ; else set A inverse of the FALSE (0) we want
.97b9						_zero:
.97b9		49 ff		eor #$ff	                eor #$FF        ; now just invert
.97bb						_store:
.97bb		95 00		sta $00,x	                sta 0,x
.97bd		95 01		sta $01,x	                sta 1,x
.97bf		60		rts		z_zero_equal:   rts
.97c0						xt_zero_greater:
.97c0		20 63 d7	jsr $d763	                jsr underflow_1
.97c3		a0 00		ldy #$00	                ldy #0          ; Default is FALSE (TOS is negative)
.97c5		b5 01		lda $01,x	                lda 1,x         ; MSB
.97c7		30 05		bmi $97ce	                bmi _done       ; TOS is negative, keep FLASE
.97c9		15 00		ora $00,x	                ora 0,x
.97cb		f0 01		beq $97ce	                beq _done       ; TOS is zero, keep FALSE
.97cd		88		dey		                dey             ; TOS is postive, make true
.97ce						_done:
.97ce		98		tya		                tya
.97cf		95 00		sta $00,x	                sta 0,x
.97d1		95 01		sta $01,x	                sta 1,x
.97d3		60		rts		z_zero_greater: rts
.97d4						xt_zero_less:
.97d4		20 63 d7	jsr $d763	                jsr underflow_1
.97d7		a0 00		ldy #$00	                ldy #0          ; Default is FALSE (TOS positive)
.97d9		b5 01		lda $01,x	                lda 1,x         ; MSB
.97db		10 01		bpl $97de	                bpl _done       ; TOS is positive, so keep FALSE
.97dd		88		dey		                dey             ; TOS is negative, make TRUE
.97de						_done:
.97de		98		tya		                tya
.97df		95 00		sta $00,x	                sta 0,x
.97e1		95 01		sta $01,x	                sta 1,x
.97e3		60		rts		z_zero_less:    rts
.97e4						xt_zero_unequal:
.97e4		20 63 d7	jsr $d763	                jsr underflow_1
.97e7		b5 00		lda $00,x	                lda 0,x
.97e9		15 01		ora $01,x	                ora 1,x
.97eb		f0 02		beq $97ef	                beq _zero
.97ed		a9 ff		lda #$ff	                lda #$FF
.97ef						_zero:
.97ef		95 00		sta $00,x	                sta 0,x
.97f1		95 01		sta $01,x	                sta 1,x
.97f3		60		rts		z_zero_unequal: rts

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/tools.asm

.97f4						xt_bye:
.97f4		4c 31 f0	jmp $f031	                jmp kernel_bye
.97f7						z_bye:
.97f7						xt_dot_s:
.97f7		20 12 86	jsr $8612	                jsr xt_depth    ; ( -- u )
.97fa		a9 3c		lda #$3c	                lda #'<'
.97fc		20 ac 87	jsr $87ac	                jsr emit_a
.97ff		b5 00		lda $00,x	                lda 0,x
.9801		48		pha		                pha
.9802		ca		dex		                dex             ; DUP
.9803		ca		dex		                dex
.9804		95 00		sta $00,x	                sta 0,x
.9806		74 01		stz $01,x	                stz 1,x
.9808		20 d0 d7	jsr $d7d0	                jsr print_u
.980b		a9 3e		lda #$3e	                lda #'>'
.980d		20 ac 87	jsr $87ac	                jsr emit_a
.9810		a9 20		lda #$20	                lda #AscSP      ; ASCII for SPACE
.9812		20 ac 87	jsr $87ac	                jsr emit_a
.9815		e8		inx		                inx
.9816		e8		inx		                inx
.9817		e0 78		cpx #$78	                cpx #dsp0
.9819		f0 1e		beq $9839	                beq _done
.981b						_have_stack:
.981b		7a		ply		                ply
.981c		a9 77		lda #$77	                lda #dsp0-1     ; go up one to avoid garbage
.981e		85 29		sta $29		                sta tmp3
.9820		64 2a		stz $2a		                stz tmp3+1      ; must be zero page on the 65c02
.9822						_loop:
.9822		ca		dex		                dex
.9823		ca		dex		                dex
.9824		b2 29		lda ($29)	                lda (tmp3)
.9826		95 01		sta $01,x	                sta 1,x
.9828		c6 29		dec $29		                dec tmp3
.982a		b2 29		lda ($29)	                lda (tmp3)
.982c		95 00		sta $00,x	                sta 0,x
.982e		c6 29		dec $29		                dec tmp3
.9830		5a		phy		                phy
.9831		20 d2 86	jsr $86d2	                jsr xt_dot
.9834		7a		ply		                ply
.9835		88		dey		                dey
.9836		d0 ea		bne $9822	                bne _loop
.9838		48		pha		                pha             ; dummy to balance stack
.9839						_done:
.9839		68		pla		                pla
.983a		60		rts		z_dot_s:        rts
.983b						xt_dump:
.983b		20 68 d7	jsr $d768	                jsr underflow_2
.983e						_row:
.983e		a0 10		ldy #$10	                ldy #16
.9840		64 27		stz $27		                stz tmp2
.9842		20 fa 84	jsr $84fa	                jsr xt_cr
.9845		b5 03		lda $03,x	                lda 3,x
.9847		20 2e d6	jsr $d62e	                jsr byte_to_ascii
.984a		b5 02		lda $02,x	                lda 2,x
.984c		20 2e d6	jsr $d62e	                jsr byte_to_ascii
.984f		20 c7 92	jsr $92c7	                jsr xt_space
.9852		20 c7 92	jsr $92c7	                jsr xt_space
.9855						_loop:
.9855		b5 00		lda $00,x	                lda 0,x
.9857		15 01		ora $01,x	                ora 1,x
.9859		f0 39		beq $9894	                beq _all_printed
.985b		a1 02		lda ($02,x)	                lda (2,x)
.985d		48		pha		                pha                     ; byte_to_ascii destroys A
.985e		20 2e d6	jsr $d62e	                jsr byte_to_ascii
.9861		20 c7 92	jsr $92c7	                jsr xt_space
.9864		68		pla		                pla
.9865		20 49 d7	jsr $d749	                jsr is_printable
.9868		b0 02		bcs $986c	                bcs _printable
.986a		a9 2e		lda #$2e	                lda #'.'                 ; Print dot if not printable
.986c						_printable:
.986c		5a		phy		                phy                     ; save counter
.986d		a4 27		ldy $27		                ldy tmp2
.986f		91 00		sta ($00),y	                sta (cp),y
.9871		e6 27		inc $27		                inc tmp2
.9873		7a		ply		                ply
.9874		c0 09		cpy #$09	                cpy #9
.9876		d0 03		bne $987b	                bne _next_char
.9878		20 c7 92	jsr $92c7	                jsr xt_space
.987b						_next_char:
.987b		f6 02		inc $02,x	                inc 2,x
.987d		d0 02		bne $9881	                bne _counter
.987f		f6 03		inc $03,x	                inc 3,x
.9881						_counter:
.9881		b5 00		lda $00,x	                lda 0,x
.9883		d0 02		bne $9887	                bne +
.9885		d6 01		dec $01,x	                dec 1,x
.9887						+
.9887		d6 00		dec $00,x	                dec 0,x
.9889		88		dey		                dey
.988a		d0 c9		bne $9855	                bne _loop               ; next byte
.988c		20 c7 92	jsr $92c7	                jsr xt_space
.988f		20 a2 98	jsr $98a2	                jsr dump_print_ascii
.9892		80 aa		bra $983e	                bra _row                ; new row
.9894						_all_printed:
.9894		a5 27		lda $27		                lda tmp2
.9896		f0 06		beq $989e	                beq _done
.9898		20 c7 92	jsr $92c7	                jsr xt_space
.989b		20 a2 98	jsr $98a2	                jsr dump_print_ascii
.989e						_done:
.989e		20 c1 94	jsr $94c1	                jsr xt_two_drop         ; one byte less than 4x INX
.98a1		60		rts		z_dump:         rts
.98a2						dump_print_ascii:
.98a2		a0 00		ldy #$00	                ldy #0
.98a4						_ascii_loop:
.98a4		b1 00		lda ($00),y	                lda (cp),y
.98a6		20 ac 87	jsr $87ac	                jsr emit_a
.98a9		c8		iny		                iny
.98aa		c0 08		cpy #$08	                cpy #8
.98ac		d0 03		bne $98b1	                bne +
.98ae		20 c7 92	jsr $92c7	                jsr xt_space
.98b1						+
.98b1		c6 27		dec $27		                dec tmp2
.98b3		d0 ef		bne $98a4	                bne _ascii_loop
.98b5		60		rts		                rts
.98b6						xt_question:
.98b6		20 01 89	jsr $8901	                jsr xt_fetch
.98b9		20 d2 86	jsr $86d2	                jsr xt_dot
.98bc		60		rts		z_question:     rts
.98bd						xt_see:
.98bd		20 53 8e	jsr $8e53	                jsr xt_parse_name       ; ( addr u )
.98c0		20 8a 9a	jsr $9a8a	                jsr xt_find_name        ; ( nt | 0 )
.98c3		b5 00		lda $00,x	                lda 0,x
.98c5		15 01		ora $01,x	                ora 1,x
.98c7		d0 05		bne $98ce	                bne +
.98c9		a9 05		lda #$05	                lda #err_noname
.98cb		4c 79 d7	jmp $d779	                jmp error
.98ce						+
.98ce		20 fa 84	jsr $84fa	                jsr xt_cr
.98d1		a5 18		lda $18		                lda base
.98d3		48		pha		                pha
.98d4		20 0d 8a	jsr $8a0d	                jsr xt_hex
.98d7		a9 09		lda #$09	                lda #str_see_nt
.98d9		20 9f d7	jsr $d79f	                jsr print_string_no_lf
.98dc		20 42 87	jsr $8742	                jsr xt_dup              ; ( nt nt )
.98df		20 fe 95	jsr $95fe	                jsr xt_u_dot
.98e2		20 c7 92	jsr $92c7	                jsr xt_space            ; ( nt )
.98e5		20 42 87	jsr $8742	                jsr xt_dup              ; ( nt nt )
.98e8		20 c8 9b	jsr $9bc8	                jsr xt_name_to_int      ; ( nt xt )
.98eb		a9 0a		lda #$0a	                lda #str_see_xt
.98ed		20 9f d7	jsr $d79f	                jsr print_string_no_lf
.98f0		20 42 87	jsr $8742	                jsr xt_dup              ; ( nt xt xt )
.98f3		20 fe 95	jsr $95fe	                jsr xt_u_dot
.98f6		20 fa 84	jsr $84fa	                jsr xt_cr               ; ( nt xt )
.98f9		a9 08		lda #$08	                lda #str_see_flags
.98fb		20 9f d7	jsr $d79f	                jsr print_string_no_lf
.98fe		20 07 8e	jsr $8e07	                jsr xt_over             ; ( nt xt nt )
.9901		20 eb 8d	jsr $8deb	                jsr xt_one_plus         ; ( nt xt nt+1 )
.9904		20 01 89	jsr $8901	                jsr xt_fetch            ; ( nt xt flags )
.9907		b5 00		lda $00,x	                lda 0,x
.9909		a0 06		ldy #$06	                ldy #6                  ; Not all bits are used
.990b						_flag_loop:
.990b		48		pha		                pha
.990c		29 01		and #$01	                and #%00000001
.990e		18		clc		                clc
.990f		69 30		adc #$30	                adc #'0'
.9911		20 ac 87	jsr $87ac	                jsr emit_a
.9914		20 c7 92	jsr $92c7	                jsr xt_space
.9917		68		pla		                pla
.9918		6a		ror a		                ror                     ; Next flag
.9919		88		dey		                dey
.991a		d0 ef		bne $990b	                bne _flag_loop
.991c		20 fa 84	jsr $84fa	                jsr xt_cr
.991f		e8		inx		                inx
.9920		e8		inx		                inx                     ; ( nt xt )
.9921		a9 0b		lda #$0b	                lda #str_see_size
.9923		20 9f d7	jsr $d79f	                jsr print_string_no_lf
.9926		20 4c 93	jsr $934c	                jsr xt_swap             ; ( xt nt )
.9929		20 6a 9d	jsr $9d6a	                jsr xt_wordsize         ; ( xt u )
.992c		20 42 87	jsr $8742	                jsr xt_dup              ; ( xt u u ) for DUMP and DISASM
.992f		20 ca 85	jsr $85ca	                jsr xt_decimal
.9932		20 fe 95	jsr $95fe	                jsr xt_u_dot            ; ( xt u )
.9935		20 0d 8a	jsr $8a0d	                jsr xt_hex
.9938		20 fa 84	jsr $84fa	                jsr xt_cr
.993b		20 c9 94	jsr $94c9	                jsr xt_two_dup          ; ( xt u xt u )
.993e		20 3b 98	jsr $983b	                jsr xt_dump
.9941		20 fa 84	jsr $84fa	                jsr xt_cr
.9944		20 38 a1	jsr $a138	                jsr xt_disasm
.9947		68		pla		                pla
.9948		85 18		sta $18		                sta base
.994a		60		rts		z_see:          rts
.994b						xt_words:
.994b		20 fa 84	jsr $84fa	                jsr xt_cr
.994e		a9 00		lda #$00	                lda #0
.9950		48		pha		                pha
.9951		ca		dex		                dex                     ; Make room on the stack for
.9952		ca		dex		                dex                     ; a dictionary pointer.
.9953		64 29		stz $29		                stz tmp3                ; Start at the beginning of
.9955						_wordlist_loop:
.9955		a0 22		ldy #$22	                ldy #num_order_offset   ; Check against byte variable #ORDER.
.9957		a5 29		lda $29		                lda tmp3
.9959		d1 08		cmp ($08),y	                cmp (up),y              ; See if we are done.
.995b		d0 02		bne $995f	                bne _have_wordlist
.995d		80 45		bra $99a4	                bra _words_done
.995f						_have_wordlist:
.995f		18		clc		                clc                     ; Index into byte array SEARCH-ORDER.
.9960		69 23		adc #$23	                adc #search_order_offset
.9962		a8		tay		                tay
.9963		b1 08		lda ($08),y	                lda (up),y              ; Get the index into array WORDLISTS
.9965		0a		asl a		                asl                     ; Turn offset into cells offset.
.9966		18		clc		                clc
.9967		69 0a		adc #$0a	                adc #wordlists_offset
.9969		a8		tay		                tay
.996a		b1 08		lda ($08),y	                lda (up),y              ; Save the DP for this wordlist
.996c		95 00		sta $00,x	                sta 0,x                 ; on the stack. ( nt )
.996e		c8		iny		                iny
.996f		b1 08		lda ($08),y	                lda (up),y
.9971		95 01		sta $01,x	                sta 1,x
.9973						_loop:
.9973		20 42 87	jsr $8742	                jsr xt_dup              ; ( nt nt )
.9976		20 e5 9b	jsr $9be5	                jsr xt_name_to_string   ; ( nt addr u )
.9979		68		pla		                pla
.997a		18		clc		                clc
.997b		75 00		adc $00,x	                adc 0,x
.997d		1a		inc a		                ina                     ; don't forget the space between words
.997e		c9 4f		cmp #$4f	                cmp #MAX_LINE_LENGTH    ; usually 79
.9980		90 06		bcc $9988	                bcc +
.9982		20 fa 84	jsr $84fa	                jsr xt_cr
.9985		b5 00		lda $00,x	                lda 0,x                 ; After going to next line, start
.9987		1a		inc a		                ina                     ; with length of this word.
.9988						+
.9988		48		pha		                pha
.9989		20 d3 95	jsr $95d3	                jsr xt_type             ; ( nt )
.998c		a9 20		lda #$20	                lda #AscSP
.998e		20 ac 87	jsr $87ac	                jsr emit_a
.9991		20 eb 8d	jsr $8deb	                jsr xt_one_plus         ; 1+
.9994		20 eb 8d	jsr $8deb	                jsr xt_one_plus         ; 1+
.9997		20 01 89	jsr $8901	                jsr xt_fetch            ; @ ( nt+1 )
.999a		b5 00		lda $00,x	                lda 0,x
.999c		15 01		ora $01,x	                ora 1,x
.999e		d0 d3		bne $9973	                bne _loop
.99a0		e6 29		inc $29		                inc tmp3
.99a2		80 b1		bra $9955	                bra _wordlist_loop
.99a4						_words_done:
.99a4		68		pla		                pla                     ; dump counter
.99a5		e8		inx		                inx
.99a6		e8		inx		                inx
.99a7		60		rts		z_words:        rts

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/tali.asm

.99a8						xt_allow_native:
.99a8		20 ba d6	jsr $d6ba	                jsr current_to_dp
.99ab		a0 01		ldy #$01	                ldy #1          ; offset for status byte
.99ad		b1 02		lda ($02),y	                lda (dp),y
.99af		29 f5		and #$f5	                and #$FF-NN-AN  ; AN and NN flag is clear.
.99b1		91 02		sta ($02),y	                sta (dp),y
.99b3						z_allow_native:
.99b3		60		rts		                rts
.99b4						xt_always_native:
.99b4		20 ba d6	jsr $d6ba	                jsr current_to_dp
.99b7		a0 01		ldy #$01	                ldy #1          ; offset for status byte
.99b9		b1 02		lda ($02),y	                lda (dp),y
.99bb		09 02		ora #$02	                ora #AN         ; Make sure AN flag is set
.99bd		29 f7		and #$f7	                and #$FF-NN     ; and NN flag is clear.
.99bf		91 02		sta ($02),y	                sta (dp),y
.99c1						z_always_native:
.99c1		60		rts		                rts
.99c2						xt_bell:
.99c2		a9 07		lda #$07	                lda #7          ; ASCII value for BELl
.99c4		20 ac 87	jsr $87ac	                jsr emit_a
.99c7		60		rts		z_bell:         rts
.99c8						xt_bounds:
.99c8		20 68 d7	jsr $d768	                jsr underflow_2
.99cb		18		clc		                clc
.99cc		b5 00		lda $00,x	                lda 0,x                 ; LSB u
.99ce		b4 02		ldy $02,x	                ldy 2,x                 ; LSB addr
.99d0		75 02		adc $02,x	                adc 2,x
.99d2		95 02		sta $02,x	                sta 2,x                 ; LSB addr+u
.99d4		94 00		sty $00,x	                sty 0,x
.99d6		b5 01		lda $01,x	                lda 1,x                 ; MSB u
.99d8		b4 03		ldy $03,x	                ldy 3,x                 ; MSB addr
.99da		75 03		adc $03,x	                adc 3,x
.99dc		95 03		sta $03,x	                sta 3,x                 ; MSB addr+u
.99de		94 01		sty $01,x	                sty 1,x
.99e0		60		rts		z_bounds:       rts
.99e1						xt_cleave:
.99e1		20 68 d7	jsr $d768	                jsr underflow_2
.99e4		20 b7 9f	jsr $9fb7	                jsr xt_minus_leading    ; -LEADING ( addr u )
.99e7		20 2c 9b	jsr $9b2c	                jsr xt_input_to_r       ; save old imput state
.99ea		b5 00		lda $00,x	                lda 0,x         ; u is new ciblen
.99ec		85 0e		sta $0e		                sta ciblen
.99ee		b5 01		lda $01,x	                lda 1,x
.99f0		85 0f		sta $0f		                sta ciblen+1
.99f2		b5 02		lda $02,x	                lda 2,x         ; addr is new cib
.99f4		85 0c		sta $0c		                sta cib
.99f6		b5 03		lda $03,x	                lda 3,x
.99f8		85 0d		sta $0d		                sta cib+1
.99fa		64 10		stz $10		                stz toin        ; >IN pointer is zero
.99fc		64 11		stz $11		                stz toin+1
.99fe		20 53 8e	jsr $8e53	                jsr xt_parse_name       ; ( addr u addr-s u-s )
.9a01		b5 00		lda $00,x	                lda 0,x
.9a03		15 01		ora $01,x	                ora 1,x
.9a05		f0 23		beq $9a2a	                beq _done
.9a07		b5 04		lda $04,x	                lda 4,x         ; LSB of original u
.9a09		38		sec		                sec
.9a0a		f5 00		sbc $00,x	                sbc 0,x
.9a0c		95 04		sta $04,x	                sta 4,x
.9a0e		b5 05		lda $05,x	                lda 5,x         ; MSB of original u
.9a10		f5 01		sbc $01,x	                sbc 1,x
.9a12		95 05		sta $05,x	                sta 5,x
.9a14		b5 06		lda $06,x	                lda 6,x         ; LSB of original addr
.9a16		18		clc		                clc
.9a17		75 00		adc $00,x	                adc 0,x
.9a19		95 06		sta $06,x	                sta 6,x
.9a1b		b5 07		lda $07,x	                lda 7,x         ; MSB of original addr
.9a1d		75 01		adc $01,x	                adc 1,x
.9a1f		95 07		sta $07,x	                sta 7,x
.9a21		20 8f 95	jsr $958f	                jsr xt_two_swap         ; ( addr-s u-s addr u )
.9a24		20 b7 9f	jsr $9fb7	                jsr xt_minus_leading
.9a27		20 8f 95	jsr $958f	                jsr xt_two_swap         ; ( addr u addr-s u-s )
.9a2a						_done:
.9a2a		20 39 9d	jsr $9d39	                jsr xt_r_to_input
.9a2d		60		rts		z_cleave:       rts
.9a2e						xt_digit_question:
.9a2e		20 63 d7	jsr $d763	                jsr underflow_1
.9a31		ca		dex		                dex
.9a32		ca		dex		                dex
.9a33		74 00		stz $00,x	                stz 0,x                 ; default flag is failure
.9a35		74 01		stz $01,x	                stz 1,x
.9a37		74 03		stz $03,x	                stz 3,x                 ; paranoid
.9a39		b5 02		lda $02,x	                lda 2,x
.9a3b		c9 30		cmp #$30	                cmp #'0'
.9a3d		90 23		bcc $9a62	                bcc _done               ; failure flag already set
.9a3f		c9 3a		cmp #$3a	                cmp #'9'+1               ; this is actually ":"
.9a41		90 12		bcc $9a55	                bcc _checkbase
.9a43		c9 41		cmp #$41	                cmp #'A'
.9a45		90 1b		bcc $9a62	                bcc _done               ; failure flag is already set
.9a47		c9 61		cmp #$61	                cmp #'a'
.9a49		90 07		bcc $9a52	                bcc _case_done          ; not lower case, too low
.9a4b		c9 7b		cmp #$7b	                cmp #'z'+1
.9a4d		b0 03		bcs $9a52	                bcs _case_done          ; not lower case, too high
.9a4f		18		clc		                clc                     ; just right
.9a50		69 e0		adc #$e0	                adc #$E0                ; offset to upper case (wraps)
.9a52						_case_done:
.9a52		38		sec		                sec
.9a53		e9 07		sbc #$07	                sbc #7                  ; fall through to _checkbase
.9a55						_checkbase:
.9a55		38		sec		                sec
.9a56		e9 30		sbc #$30	                sbc #'0'                 ; this is also the conversion step
.9a58		c5 18		cmp $18		                cmp base
.9a5a		b0 06		bcs $9a62	                bcs _done               ; already have false flag
.9a5c		95 02		sta $02,x	                sta 2,x                 ; put number in NOS
.9a5e		d6 00		dec $00,x	                dec 0,x                 ; set success flag
.9a60		d6 01		dec $01,x	                dec 1,x
.9a62						_done:
.9a62						z_digit_question:
.9a62		60		rts		                rts
.9a63						xt_execute_parsing:
.9a63		20 6d d7	jsr $d76d	                jsr underflow_3
.9a66		20 2c 9b	jsr $9b2c	                jsr xt_input_to_r       ; save normal input for later
.9a69		20 0f 9c	jsr $9c0f	                jsr xt_not_rote         ; -ROT ( xt addr u )
.9a6c		b5 00		lda $00,x	                lda 0,x                 ; TOS is new ciblen
.9a6e		85 0e		sta $0e		                sta ciblen
.9a70		b5 01		lda $01,x	                lda 1,x
.9a72		85 0f		sta $0f		                sta ciblen+1
.9a74		b5 02		lda $02,x	                lda 2,x                 ; NOS is new cib
.9a76		85 0c		sta $0c		                sta cib
.9a78		b5 03		lda $03,x	                lda 3,x
.9a7a		85 0d		sta $0d		                sta cib+1
.9a7c		64 10		stz $10		                stz toin                ; Set >IN to zero
.9a7e		64 11		stz $11		                stz toin+1
.9a80		20 c1 94	jsr $94c1	                jsr xt_two_drop         ; 2DROP ( xt )
.9a83		20 ec 88	jsr $88ec	                jsr xt_execute
.9a86		20 39 9d	jsr $9d39	                jsr xt_r_to_input
.9a89						z_execute_parsing:
.9a89		60		rts		                rts
.9a8a						xt_find_name:
.9a8a		20 68 d7	jsr $d768	                jsr underflow_2
.9a8d		b5 00		lda $00,x	                lda 0,x
.9a8f		15 01		ora $01,x	                ora 1,x
.9a91		d0 03		bne $9a96	                bne _nonempty
.9a93		4c c7 9a	jmp $9ac7	                jmp _fail_done
.9a96						_nonempty:
.9a96		64 29		stz $29		                stz tmp3                ; Start at the beginning
.9a98						_wordlist_loop:
.9a98		a0 22		ldy #$22	                ldy #num_order_offset   ; Compare to byte variable #ORDER
.9a9a		a5 29		lda $29		                lda tmp3
.9a9c		d1 08		cmp ($08),y	                cmp (up),y              ; Check to see if we are done
.9a9e		f0 27		beq $9ac7	                beq _fail_done
.9aa0		18		clc		                clc             ; SEARCH-ORDER is array of bytes.
.9aa1		69 23		adc #$23	                adc #search_order_offset
.9aa3		a8		tay		                tay
.9aa4		b1 08		lda ($08),y	                lda (up),y      ; Get the id byte, which is the offset
.9aa6		0a		asl a		                asl                     ; Turn offset into cells offset.
.9aa7		18		clc		                clc
.9aa8		69 0a		adc #$0a	                adc #wordlists_offset
.9aaa		a8		tay		                tay
.9aab		b1 08		lda ($08),y	                lda (up),y
.9aad		85 25		sta $25		                sta tmp1
.9aaf		c8		iny		                iny
.9ab0		b1 08		lda ($08),y	                lda (up),y
.9ab2		85 26		sta $26		                sta tmp1+1
.9ab4		20 45 d6	jsr $d645	                jsr find_header_name
.9ab7		d0 04		bne $9abd	                bne _success
.9ab9		e6 29		inc $29		                inc tmp3
.9abb		80 db		bra $9a98	                bra _wordlist_loop
.9abd						_success:
.9abd		a5 25		lda $25		                lda tmp1
.9abf		95 02		sta $02,x	                sta 2,x
.9ac1		a5 26		lda $26		                lda tmp1+1
.9ac3		95 03		sta $03,x	                sta 3,x
.9ac5		80 04		bra $9acb	                bra _done
.9ac7						_fail_done:
.9ac7		74 02		stz $02,x	                stz 2,x         ; failure flag
.9ac9		74 03		stz $03,x	                stz 3,x
.9acb						_done:
.9acb		e8		inx		                inx
.9acc		e8		inx		                inx
.9acd		60		rts		z_find_name:    rts
.9ace						xt_hexstore:
.9ace		20 6d d7	jsr $d76d	                jsr underflow_3
.9ad1		20 42 87	jsr $8742	                jsr xt_dup              ; Save copy of original address
.9ad4		20 b3 95	jsr $95b3	                jsr xt_two_to_r         ; ( addr1 u1 ) ( R: addr2 addr2 )
.9ad7						_loop:
.9ad7		b5 00		lda $00,x	                lda 0,x
.9ad9		15 01		ora $01,x	                ora 1,x
.9adb		f0 36		beq $9b13	                beq _done
.9add		20 e1 99	jsr $99e1	                jsr xt_cleave           ; ( addr1 u1 addr3 u3 ) ( R: addr2 addr2 )
.9ae0		20 b3 95	jsr $95b3	                jsr xt_two_to_r
.9ae3		20 8b 9d	jsr $9d8b	                jsr xt_zero
.9ae6		20 8b 9d	jsr $9d8b	                jsr xt_zero
.9ae9		20 39 95	jsr $9539	                jsr xt_two_r_from       ; ( addr1 u1 0 0 addr3 u3 ) ( R: addr2 addr2 )
.9aec		20 ea 93	jsr $93ea	                jsr xt_to_number        ; ( addr1 u1 n n addr4 u4 ) ( R: addr2 addr2 )
.9aef		b5 00		lda $00,x	                lda 0,x
.9af1		15 01		ora $01,x	                ora 1,x
.9af3		d0 17		bne $9b0c	                bne _have_chars_left
.9af5		20 c1 94	jsr $94c1	                jsr xt_two_drop         ; ( addr1 u1 n n ) ( R: addr2 addr2 )
.9af8		20 d4 9d	jsr $9dd4	                jsr xt_d_to_s           ; ( addr1 u1 n ) ( R: addr2 addr2 )
.9afb		20 db 8f	jsr $8fdb	                jsr xt_r_fetch          ; ( addr1 u1 n addr2 ) ( R: addr2 addr2 )
.9afe		20 39 83	jsr $8339	                jsr xt_c_store          ; ( addr1 u1 ) ( R: addr2 addr2 )
.9b01		20 f0 8f	jsr $8ff0	                jsr xt_r_from           ; R>
.9b04		20 eb 8d	jsr $8deb	                jsr xt_one_plus         ; 1+
.9b07		20 8a 94	jsr $948a	                jsr xt_to_r             ; >R ( addr1 u1 ) ( R: addr2+1 addr2 )
.9b0a		80 cb		bra $9ad7	                bra _loop
.9b0c						_have_chars_left:
.9b0c		8a		txa		                txa
.9b0d		18		clc		                clc
.9b0e		69 08		adc #$08	                adc #8
.9b10		aa		tax		                tax
.9b11		80 c4		bra $9ad7	                bra _loop
.9b13						_done:
.9b13		e8		inx		                inx
.9b14		e8		inx		                inx
.9b15		e8		inx		                inx
.9b16		e8		inx		                inx                     ; 2DROP
.9b17		20 39 95	jsr $9539	                jsr xt_two_r_from       ; ( addr2+n addr2 )
.9b1a		20 4c 93	jsr $934c	                jsr xt_swap
.9b1d		20 e6 8c	jsr $8ce6	                jsr xt_minus            ; ( n )
.9b20		60		rts		z_hexstore:     rts
.9b21						xt_input:
.9b21		ca		dex		                dex
.9b22		ca		dex		                dex
.9b23		a9 14		lda #$14	                lda #<input
.9b25		95 00		sta $00,x	                sta 0,x
.9b27		a9 00		lda #$00	                lda #>input
.9b29		95 01		sta $01,x	                sta 1,x
.9b2b		60		rts		z_input:        rts
.9b2c						xt_input_to_r:
.9b2c		68		pla		                pla
.9b2d		85 25		sta $25		                sta tmp1
.9b2f		68		pla		                pla
.9b30		85 26		sta $26		                sta tmp1+1
.9b32		a0 07		ldy #$07	                ldy #7
.9b34						_loop:
.9b34		b9 0a 00	lda $000a,y	                lda insrc,y     ; insrc+7 is toin+1
.9b37		48		pha		                pha
.9b38		88		dey		                dey
.9b39		10 f9		bpl $9b34	                bpl _loop
.9b3b		a5 26		lda $26		                lda tmp1+1
.9b3d		48		pha		                pha
.9b3e		a5 25		lda $25		                lda tmp1
.9b40		48		pha		                pha
.9b41		60		rts		z_input_to_r: 	rts
.9b42						xt_int_to_name:
.9b42		20 63 d7	jsr $d763	                jsr underflow_1
.9b45		ca		dex		                dex
.9b46		ca		dex		                dex
.9b47		74 00		stz $00,x	                stz 0,x
.9b49		74 01		stz $01,x	                stz 1,x
.9b4b						_wordlist_loop:
.9b4b		b5 00		lda $00,x	                lda 0,x                 ; Get the current wordlist.
.9b4d		0a		asl a		                asl                     ; Turn offset into cells offset.
.9b4e		18		clc		                clc
.9b4f		69 0a		adc #$0a	                adc #wordlists_offset
.9b51		a8		tay		                tay
.9b52		b1 08		lda ($08),y	                lda (up),y              ; Save the DP for this wordlist
.9b54		85 27		sta $27		                sta tmp2                ; into tmp2
.9b56		c8		iny		                iny
.9b57		b1 08		lda ($08),y	                lda (up),y
.9b59		85 28		sta $28		                sta tmp2+1
.9b5b		a5 27		lda $27		                lda tmp2
.9b5d		05 28		ora $28		                ora tmp2+1
.9b5f		f0 36		beq $9b97	                beq _next_wordlist
.9b61		b5 02		lda $02,x	                lda 2,x         ; Target xt is now behind wordlist id.
.9b63		85 29		sta $29		                sta tmp3        ; Save target xt in tmp3
.9b65		b5 03		lda $03,x	                lda 3,x
.9b67		85 2a		sta $2a		                sta tmp3+1
.9b69						_loop:
.9b69		a0 04		ldy #$04	                ldy #4          ; xt is four bytes down
.9b6b		b1 27		lda ($27),y	                lda (tmp2),y    ; LSB of xt of current nt
.9b6d		c5 29		cmp $29		                cmp tmp3
.9b6f		d0 07		bne $9b78	                bne _no_match
.9b71		c8		iny		                iny
.9b72		b1 27		lda ($27),y	                lda (tmp2),y    ; MSB of xt of current nt
.9b74		c5 2a		cmp $2a		                cmp tmp3+1
.9b76		f0 30		beq $9ba8	                beq _match
.9b78						_no_match:
.9b78		18		clc		                clc
.9b79		a5 27		lda $27		                lda tmp2
.9b7b		69 02		adc #$02	                adc #2
.9b7d		85 27		sta $27		                sta tmp2
.9b7f		90 02		bcc $9b83	                bcc +
.9b81		e6 28		inc $28		                inc tmp2+1
.9b83						+
.9b83		a0 00		ldy #$00	                ldy #0
.9b85		b1 27		lda ($27),y	                lda (tmp2),y
.9b87		48		pha		                pha
.9b88		c8		iny		                iny
.9b89		11 27		ora ($27),y	                ora (tmp2),y
.9b8b		f0 09		beq $9b96	                beq _zero
.9b8d		b1 27		lda ($27),y	                lda (tmp2),y
.9b8f		85 28		sta $28		                sta tmp2+1
.9b91		68		pla		                pla
.9b92		85 27		sta $27		                sta tmp2
.9b94		80 d3		bra $9b69	                bra _loop
.9b96						_zero:
.9b96		68		pla		                pla             ; Leftover from above loop
.9b97						_next_wordlist:
.9b97		b5 00		lda $00,x	                lda 0,x
.9b99		1a		inc a		                ina
.9b9a		95 00		sta $00,x	                sta 0,x
.9b9c		c9 0c		cmp #$0c	                cmp #max_wordlists
.9b9e		d0 ab		bne $9b4b	                bne _wordlist_loop
.9ba0		e8		inx		                inx
.9ba1		e8		inx		                inx
.9ba2		74 00		stz $00,x	                stz 0,x
.9ba4		74 01		stz $01,x	                stz 1,x
.9ba6		80 0a		bra $9bb2	                bra z_int_to_name
.9ba8						_match:
.9ba8		e8		inx		                inx
.9ba9		e8		inx		                inx
.9baa		a5 27		lda $27		                lda tmp2
.9bac		95 00		sta $00,x	                sta 0,x
.9bae		a5 28		lda $28		                lda tmp2+1
.9bb0		95 01		sta $01,x	                sta 1,x
.9bb2		60		rts		z_int_to_name:  rts
.9bb3						xt_latestnt:
.9bb3		ca		dex		                dex
.9bb4		ca		dex		                dex
.9bb5		20 ba d6	jsr $d6ba	                jsr current_to_dp
.9bb8		a5 02		lda $02		                lda dp
.9bba		95 00		sta $00,x	                sta 0,x
.9bbc		a5 03		lda $03		                lda dp+1
.9bbe		95 01		sta $01,x	                sta 1,x
.9bc0		60		rts		z_latestnt:     rts
.9bc1						xt_latestxt:
.9bc1		20 b3 9b	jsr $9bb3	                jsr xt_latestnt         ; ( nt )
.9bc4		20 c8 9b	jsr $9bc8	                jsr xt_name_to_int      ; ( xt )
.9bc7		60		rts		z_latestxt:     rts
.9bc8						xt_name_to_int:
.9bc8		20 63 d7	jsr $d763	                jsr underflow_1
.9bcb		b5 00		lda $00,x	                lda 0,x
.9bcd		18		clc		                clc
.9bce		69 04		adc #$04	                adc #4
.9bd0		85 29		sta $29		                sta tmp3
.9bd2		b5 01		lda $01,x	                lda 1,x
.9bd4		90 01		bcc $9bd7	                bcc _done
.9bd6		1a		inc a		                ina
.9bd7						_done:
.9bd7		85 2a		sta $2a		                sta tmp3+1
.9bd9		a0 00		ldy #$00	                ldy #0
.9bdb		b1 29		lda ($29),y	                lda (tmp3),y
.9bdd		95 00		sta $00,x	                sta 0,x
.9bdf		c8		iny		                iny
.9be0		b1 29		lda ($29),y	                lda (tmp3),y
.9be2		95 01		sta $01,x	                sta 1,x
.9be4		60		rts		z_name_to_int:  rts
.9be5						xt_name_to_string:
.9be5		20 63 d7	jsr $d763	                jsr underflow_1
.9be8		ca		dex		                dex
.9be9		ca		dex		                dex
.9bea		a1 02		lda ($02,x)	                lda (2,x)
.9bec		95 00		sta $00,x	                sta 0,x
.9bee		74 01		stz $01,x	                stz 1,x
.9bf0		b5 02		lda $02,x	                lda 2,x         ; LSB
.9bf2		18		clc		                clc
.9bf3		69 08		adc #$08	                adc #8
.9bf5		95 02		sta $02,x	                sta 2,x
.9bf7		90 02		bcc $9bfb	                bcc z_name_to_string
.9bf9		f6 03		inc $03,x	                inc 3,x         ; MSB
.9bfb						z_name_to_string:
.9bfb		60		rts		                rts
.9bfc						xt_nc_limit:
.9bfc		a9 00		lda #$00	                lda #nc_limit_offset
.9bfe		4c 1f d6	jmp $d61f	                jmp push_upvar_tos
.9c01						z_nc_limit:
.9c01						xt_never_native:
.9c01		20 ba d6	jsr $d6ba	                jsr current_to_dp
.9c04		a0 01		ldy #$01	                ldy #1          ; offset for status byte
.9c06		b1 02		lda ($02),y	                lda (dp),y
.9c08		09 08		ora #$08	                ora #NN         ; Make sure NN flag is set
.9c0a		29 fd		and #$fd	                and #$FF-AN     ; and AN flag is clear.
.9c0c		91 02		sta ($02),y	                sta (dp),y
.9c0e						z_never_native:
.9c0e		60		rts		                rts
.9c0f						xt_not_rote:
.9c0f		20 6d d7	jsr $d76d	                jsr underflow_3
.9c12		b4 01		ldy $01,x	                ldy 1,x         ; MSB first
.9c14		b5 03		lda $03,x	                lda 3,x
.9c16		95 01		sta $01,x	                sta 1,x
.9c18		b5 05		lda $05,x	                lda 5,x
.9c1a		95 03		sta $03,x	                sta 3,x
.9c1c		94 05		sty $05,x	                sty 5,x
.9c1e		b4 00		ldy $00,x	                ldy 0,x         ; LSB second
.9c20		b5 02		lda $02,x	                lda 2,x
.9c22		95 00		sta $00,x	                sta 0,x
.9c24		b5 04		lda $04,x	                lda 4,x
.9c26		95 02		sta $02,x	                sta 2,x
.9c28		94 04		sty $04,x	                sty 4,x
.9c2a		60		rts		z_not_rote:     rts
.9c2b						xt_number:
.9c2b		20 68 d7	jsr $d768	                jsr underflow_2
.9c2e		64 1e		stz $1e		                stz tmpdsp      ; %n000 000d
.9c30		a5 18		lda $18		                lda base
.9c32		48		pha		                pha
.9c33		20 c9 94	jsr $94c9	                jsr xt_two_dup
.9c36		a1 02		lda ($02,x)	                lda (2,x)
.9c38						_check_dec:
.9c38		c9 23		cmp #$23	                cmp #'#'
.9c3a		d0 04		bne $9c40	                bne _check_hex
.9c3c		a9 0a		lda #$0a	                lda #10
.9c3e		80 42		bra $9c82	                bra _base_changed
.9c40						_check_hex:
.9c40		c9 24		cmp #$24	                cmp #'$'
.9c42		d0 04		bne $9c48	                bne _check_binary
.9c44		a9 10		lda #$10	                lda #16
.9c46		80 3a		bra $9c82	                bra _base_changed
.9c48						_check_binary:
.9c48		c9 25		cmp #$25	                cmp #'%'
.9c4a		d0 04		bne $9c50	                bne _check_char
.9c4c		a9 02		lda #$02	                lda #2
.9c4e		80 32		bra $9c82	                bra _base_changed
.9c50						_check_char:
.9c50		c9 27		cmp #$27	                cmp #"'"
.9c52		d0 3a		bne $9c8e	                bne _check_minus
.9c54		b5 00		lda $00,x	                lda 0,x         ; Get the length
.9c56		c9 03		cmp #$03	                cmp #3
.9c58		d0 26		bne $9c80	                bne _not_a_char
.9c5a		b5 01		lda $01,x	                lda 1,x
.9c5c		d0 22		bne $9c80	                bne _not_a_char ; No compare needed to check for non-zero.
.9c5e		b5 02		lda $02,x	                lda 2,x         ; LSB of address
.9c60		18		clc		                clc
.9c61		69 02		adc #$02	                adc #2          ; length of string
.9c63		85 23		sta $23		                sta tmptos
.9c65		b5 03		lda $03,x	                lda 3,x
.9c67		69 00		adc #$00	                adc #0          ; only need carry
.9c69		85 24		sta $24		                sta tmptos+1
.9c6b		b2 23		lda ($23)	                lda (tmptos)
.9c6d		c9 27		cmp #$27	                cmp #"'"
.9c6f		d0 0f		bne $9c80	                bne _not_a_char
.9c71		f6 02		inc $02,x	                inc 2,x
.9c73		d0 02		bne $9c77	                bne +
.9c75		f6 03		inc $03,x	                inc 3,x
.9c77						+
.9c77		a1 02		lda ($02,x)	                lda (2,x)
.9c79		95 02		sta $02,x	                sta 2,x
.9c7b		74 03		stz $03,x	                stz 3,x
.9c7d		4c 00 9d	jmp $9d00	                jmp _drop_original_string ; Single flag will drop the TOS for us.
.9c80						_not_a_char:
.9c80		80 5c		bra $9cde	                bra _number_error
.9c82						_base_changed:
.9c82		85 18		sta $18		                sta base        ; Switch to the new base
.9c84		f6 02		inc $02,x	                inc 2,x         ; start one character later
.9c86		d0 02		bne $9c8a	                bne +
.9c88		f6 03		inc $03,x	                inc 3,x
.9c8a						+
.9c8a		d6 00		dec $00,x	                dec 0,x         ; decrease string length by one
.9c8c		a1 02		lda ($02,x)	                lda (2,x)       ; Load the first char again
.9c8e						_check_minus:
.9c8e		c9 2d		cmp #$2d	                cmp #'-'
.9c90		d0 0c		bne $9c9e	                bne _check_dot
.9c92		a9 80		lda #$80	                lda #$80
.9c94		85 1e		sta $1e		                sta tmpdsp      ; set the sign bit
.9c96		f6 02		inc $02,x	                inc 2,x         ; start one character later
.9c98		d0 02		bne $9c9c	                bne +
.9c9a		f6 03		inc $03,x	                inc 3,x
.9c9c						+
.9c9c		d6 00		dec $00,x	                dec 0,x         ; decrease string length by one
.9c9e						_check_dot:
.9c9e		b5 02		lda $02,x	                lda 2,x         ; LSB of address
.9ca0		18		clc		                clc
.9ca1		75 00		adc $00,x	                adc 0,x         ; length of string
.9ca3		85 23		sta $23		                sta tmptos
.9ca5		b5 03		lda $03,x	                lda 3,x
.9ca7		69 00		adc #$00	                adc #0          ; only need carry
.9ca9		85 24		sta $24		                sta tmptos+1
.9cab		a5 23		lda $23		                lda tmptos
.9cad		d0 02		bne $9cb1	                bne +
.9caf		c6 24		dec $24		                dec tmptos+1
.9cb1						+
.9cb1		c6 23		dec $23		                dec tmptos
.9cb3		b2 23		lda ($23)	                lda (tmptos)
.9cb5		c9 2e		cmp #$2e	                cmp #'.'
.9cb7		d0 04		bne $9cbd	                bne _main
.9cb9		e6 1e		inc $1e		                inc tmpdsp
.9cbb		d6 00		dec $00,x	                dec 0,x
.9cbd						_main:
.9cbd		ca		dex		                dex
.9cbe		ca		dex		                dex
.9cbf		ca		dex		                dex
.9cc0		ca		dex		                dex
.9cc1		b5 04		lda $04,x	                lda 4,x         ; LSB of length
.9cc3		95 00		sta $00,x	                sta 0,x
.9cc5		74 01		stz $01,x	                stz 1,x         ; MSB, max length 255 chars
.9cc7		b5 06		lda $06,x	                lda 6,x         ; LSB of address
.9cc9		95 02		sta $02,x	                sta 2,x
.9ccb		b5 07		lda $07,x	                lda 7,x         ; MSB of address
.9ccd		95 03		sta $03,x	                sta 3,x
.9ccf		74 04		stz $04,x	                stz 4,x         ; clear space for ud
.9cd1		74 05		stz $05,x	                stz 5,x
.9cd3		74 06		stz $06,x	                stz 6,x
.9cd5		74 07		stz $07,x	                stz 7,x
.9cd7		20 ea 93	jsr $93ea	                jsr xt_to_number        ; (ud addr u -- ud addr u )
.9cda		b5 00		lda $00,x	                lda 0,x
.9cdc		f0 1e		beq $9cfc	                beq _all_converted
.9cde						_number_error:
.9cde		20 c1 94	jsr $94c1	                jsr xt_two_drop ; >NUMBER modified addr u
.9ce1		20 c1 94	jsr $94c1	                jsr xt_two_drop ; ud   (partially converted number)
.9ce4		a9 3e		lda #$3e	                lda #'>'
.9ce6		20 ac 87	jsr $87ac	                jsr emit_a
.9ce9		20 d3 95	jsr $95d3	                jsr xt_type
.9cec		a9 3c		lda #$3c	                lda #'<'
.9cee		20 ac 87	jsr $87ac	                jsr emit_a
.9cf1		20 c7 92	jsr $92c7	                jsr xt_space
.9cf4		68		pla		                pla
.9cf5		85 18		sta $18		                sta base
.9cf7		a9 08		lda #$08	                lda #err_syntax
.9cf9		4c 79 d7	jmp $d779	                jmp error
.9cfc						_all_converted:
.9cfc		e8		inx		                inx ; Drop the current addr u
.9cfd		e8		inx		                inx
.9cfe		e8		inx		                inx
.9cff		e8		inx		                inx
.9d00						_drop_original_string:
.9d00		20 8f 95	jsr $958f	                jsr xt_two_swap  ; Drop the original addr u
.9d03		20 c1 94	jsr $94c1	                jsr xt_two_drop  ; (was saved for unknown word error message)
.9d06		a5 1e		lda $1e		                lda tmpdsp      ; flag for double/minus
.9d08		a0 20		ldy #$20	                ldy #%00100000  ; status bit 5 for double(1) or single(0)
.9d0a		0a		asl a		                asl             ; %n000 000d => %0000 00d0, C=n, Z=d
.9d0b		f0 0a		beq $9d17	                beq _single
.9d0d		98		tya		                tya
.9d0e		04 1c		tsb $1c		                tsb status
.9d10		90 0f		bcc $9d21	                bcc _done       ; no minus, all done
.9d12		20 f9 9d	jsr $9df9	                jsr xt_dnegate
.9d15		80 0a		bra $9d21	                bra _done
.9d17						_single:
.9d17		e8		inx		                inx
.9d18		e8		inx		                inx
.9d19		98		tya		                tya
.9d1a		14 1c		trb $1c		                trb status
.9d1c		90 03		bcc $9d21	                bcc _done       ; no minus, all done
.9d1e		20 21 8d	jsr $8d21	                jsr xt_negate
.9d21						_done:
.9d21		68		pla		                pla
.9d22		85 18		sta $18		                sta base
.9d24		60		rts		z_number:       rts
.9d25						xt_editor_wordlist:
.9d25						xt_one:
.9d25		ca		dex		                dex
.9d26		ca		dex		                dex
.9d27		a9 01		lda #$01	                lda #1
.9d29		95 00		sta $00,x	                sta 0,x
.9d2b		74 01		stz $01,x	                stz 1,x
.9d2d						z_editor_wordlist:
.9d2d						z_one:
.9d2d		60		rts		                rts
.9d2e						xt_output:
.9d2e		ca		dex		                dex
.9d2f		ca		dex		                dex
.9d30		a9 12		lda #$12	                lda #<output
.9d32		95 00		sta $00,x	                sta 0,x
.9d34		a9 00		lda #$00	                lda #>output
.9d36		95 01		sta $01,x	                sta 1,x
.9d38		60		rts		z_output:       rts
.9d39						xt_r_to_input:
.9d39		68		pla		                pla
.9d3a		85 25		sta $25		                sta tmp1
.9d3c		68		pla		                pla
.9d3d		85 26		sta $26		                sta tmp1+1
.9d3f		a0 00		ldy #$00	                ldy #0
.9d41						_loop:
.9d41		68		pla		                pla
.9d42		99 0a 00	sta $000a,y	                sta insrc,y
.9d45		c8		iny		                iny
.9d46		c0 08		cpy #$08	                cpy #8
.9d48		d0 f7		bne $9d41	                bne _loop
.9d4a		a5 26		lda $26		                lda tmp1+1
.9d4c		48		pha		                pha
.9d4d		a5 25		lda $25		                lda tmp1
.9d4f		48		pha		                pha
.9d50		60		rts		z_r_to_input: 	rts
.9d51						xt_strip_underflow:
.9d51		a9 02		lda #$02	                lda #uf_strip_offset
.9d53		4c 1f d6	jmp $d61f	                jmp push_upvar_tos
.9d56						z_strip_underflow:
.9d56						xt_assembler_wordlist:
.9d56						xt_two:
.9d56		ca		dex		                dex
.9d57		ca		dex		                dex
.9d58		a9 02		lda #$02	                lda #2
.9d5a		95 00		sta $00,x	                sta 0,x
.9d5c		74 01		stz $01,x	                stz 1,x
.9d5e						z_assembler_wordlist:
.9d5e		60		rts		z_two:          rts
.9d5f						xt_useraddr:
.9d5f		ca		dex		                dex
.9d60		ca		dex		                dex
.9d61		a9 08		lda #$08	                lda #<up
.9d63		95 00		sta $00,x	                sta 0,x
.9d65		a9 00		lda #$00	                lda #>up
.9d67		95 01		sta $01,x	                sta 1,x
.9d69		60		rts		z_useraddr:     rts
.9d6a						xt_wordsize:
.9d6a		20 63 d7	jsr $d763	                jsr underflow_1
.9d6d		b5 00		lda $00,x	                lda 0,x
.9d6f		85 25		sta $25		                sta tmp1
.9d71		b5 01		lda $01,x	                lda 1,x
.9d73		85 26		sta $26		                sta tmp1+1
.9d75		a0 06		ldy #$06	                ldy #6
.9d77		b1 25		lda ($25),y	                lda (tmp1),y    ; LSB of z
.9d79		88		dey		                dey
.9d7a		88		dey		                dey
.9d7b		38		sec		                sec
.9d7c		f1 25		sbc ($25),y	                sbc (tmp1),y    ; LSB of xt
.9d7e		95 00		sta $00,x	                sta 0,x
.9d80		a0 07		ldy #$07	                ldy #7
.9d82		b1 25		lda ($25),y	                lda (tmp1),y    ; MSB of z
.9d84		88		dey		                dey
.9d85		88		dey		                dey
.9d86		f1 25		sbc ($25),y	                sbc (tmp1),y    ; MSB of xt
.9d88		95 01		sta $01,x	                sta 1,x
.9d8a		60		rts		z_wordsize:     rts
.9d8b						xt_case:
.9d8b						xt_false:
.9d8b						xt_forth_wordlist:
.9d8b						xt_zero:
.9d8b		ca		dex		                dex             ; push
.9d8c		ca		dex		                dex
.9d8d		74 00		stz $00,x	                stz 0,x
.9d8f		74 01		stz $01,x	                stz 1,x
.9d91						z_case:
.9d91						z_false:
.9d91						z_forth_wordlist:
.9d91						z_zero:
.9d91		60		rts		                rts

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/double.asm

.9d92						xt_d_minus:
.9d92		20 72 d7	jsr $d772	                jsr underflow_4 ; two double numbers
.9d95		38		sec		                sec
.9d96		b5 06		lda $06,x	                lda 6,x         ; LSB of lower word
.9d98		f5 02		sbc $02,x	                sbc 2,x
.9d9a		95 06		sta $06,x	                sta 6,x
.9d9c		b5 07		lda $07,x	                lda 7,x         ; MSB of lower word
.9d9e		f5 03		sbc $03,x	                sbc 3,x
.9da0		95 07		sta $07,x	                sta 7,x
.9da2		b5 04		lda $04,x	                lda 4,x         ; LSB of upper word
.9da4		f5 00		sbc $00,x	                sbc 0,x
.9da6		95 04		sta $04,x	                sta 4,x
.9da8		b5 05		lda $05,x	                lda 5,x         ; MSB of upper word
.9daa		f5 01		sbc $01,x	                sbc 1,x
.9dac		95 05		sta $05,x	                sta 5,x
.9dae		e8		inx		                inx
.9daf		e8		inx		                inx
.9db0		e8		inx		                inx
.9db1		e8		inx		                inx
.9db2		60		rts		z_d_minus:      rts
.9db3						xt_d_plus:
.9db3		20 72 d7	jsr $d772	                jsr underflow_4 ; two double numbers
.9db6		18		clc		                clc
.9db7		b5 02		lda $02,x	                lda 2,x         ; LSB of lower word
.9db9		75 06		adc $06,x	                adc 6,x
.9dbb		95 06		sta $06,x	                sta 6,x
.9dbd		b5 03		lda $03,x	                lda 3,x         ; MSB of lower word
.9dbf		75 07		adc $07,x	                adc 7,x
.9dc1		95 07		sta $07,x	                sta 7,x
.9dc3		b5 00		lda $00,x	                lda 0,x         ; LSB of upper word
.9dc5		75 04		adc $04,x	                adc 4,x
.9dc7		95 04		sta $04,x	                sta 4,x
.9dc9		b5 01		lda $01,x	                lda 1,x         ; MSB of upper word
.9dcb		75 05		adc $05,x	                adc 5,x
.9dcd		95 05		sta $05,x	                sta 5,x
.9dcf		e8		inx		                inx
.9dd0		e8		inx		                inx
.9dd1		e8		inx		                inx
.9dd2		e8		inx		                inx
.9dd3		60		rts		z_d_plus:       rts
.9dd4						xt_d_to_s:
.9dd4		20 68 d7	jsr $d768	                jsr underflow_2
.9dd7		e8		inx		                inx
.9dd8		e8		inx		                inx
.9dd9		60		rts		z_d_to_s:       rts
.9dda						xt_dabs:
.9dda		20 68 d7	jsr $d768	                jsr underflow_2 ; double number
.9ddd		b5 01		lda $01,x	                lda 1,x         ; MSB of high cell
.9ddf		10 17		bpl $9df8	                bpl _done       ; positive, we get off light
.9de1		a0 00		ldy #$00	                ldy #0
.9de3		38		sec		                sec
.9de4		98		tya		                tya
.9de5		f5 02		sbc $02,x	                sbc 2,x         ; LSB of low cell
.9de7		95 02		sta $02,x	                sta 2,x
.9de9		98		tya		                tya
.9dea		f5 03		sbc $03,x	                sbc 3,x         ; MSB of low cell
.9dec		95 03		sta $03,x	                sta 3,x
.9dee		98		tya		                tya
.9def		f5 00		sbc $00,x	                sbc 0,x         ; LSB of high cell
.9df1		95 00		sta $00,x	                sta 0,x
.9df3		98		tya		                tya
.9df4		f5 01		sbc $01,x	                sbc 1,x         ; MSB of high cell
.9df6		95 01		sta $01,x	                sta 1,x
.9df8						_done:
.9df8		60		rts		z_dabs:         rts
.9df9						xt_dnegate:
.9df9		20 68 d7	jsr $d768	                jsr underflow_2 ; double number
.9dfc		a0 00		ldy #$00	     		ldy #0
.9dfe		38		sec		                sec
.9dff		98		tya		                tya
.9e00		f5 02		sbc $02,x	                sbc 2,x         ; LSB of low cell
.9e02		95 02		sta $02,x	                sta 2,x
.9e04		98		tya		                tya
.9e05		f5 03		sbc $03,x	                sbc 3,x         ; MSB of low cell
.9e07		95 03		sta $03,x	                sta 3,x
.9e09		98		tya		                tya
.9e0a		f5 00		sbc $00,x	                sbc 0,x         ; LSB of high cell
.9e0c		95 00		sta $00,x	                sta 0,x
.9e0e		98		tya		                tya
.9e0f		f5 01		sbc $01,x	                sbc 1,x         ; MSB of high cell
.9e11		95 01		sta $01,x	                sta 1,x
.9e13		60		rts		z_dnegate:      rts
.9e14						xt_d_dot:
.9e14		20 68 d7	jsr $d768	                jsr underflow_2
.9e17		20 a7 94	jsr $94a7	                jsr xt_tuck
.9e1a		20 da 9d	jsr $9dda	                jsr xt_dabs
.9e1d		20 f8 8a	jsr $8af8	                jsr xt_less_number_sign
.9e20		20 b5 8d	jsr $8db5	                jsr xt_number_sign_s
.9e23		20 8d 90	jsr $908d	                jsr xt_rot
.9e26		20 4c 92	jsr $924c	                jsr xt_sign
.9e29		20 93 8d	jsr $8d93	                jsr xt_number_sign_greater
.9e2c		20 d3 95	jsr $95d3	                jsr xt_type
.9e2f		20 c7 92	jsr $92c7	                jsr xt_space
.9e32		60		rts		z_d_dot:        rts
.9e33						xt_d_dot_r:
.9e33		20 6d d7	jsr $d76d	                jsr underflow_3
.9e36		20 8a 94	jsr $948a	                jsr xt_to_r
.9e39		20 a7 94	jsr $94a7	                jsr xt_tuck
.9e3c		20 da 9d	jsr $9dda	                jsr xt_dabs
.9e3f		20 f8 8a	jsr $8af8	                jsr xt_less_number_sign
.9e42		20 b5 8d	jsr $8db5	                jsr xt_number_sign_s
.9e45		20 8d 90	jsr $908d	                jsr xt_rot
.9e48		20 4c 92	jsr $924c	                jsr xt_sign
.9e4b		20 93 8d	jsr $8d93	                jsr xt_number_sign_greater
.9e4e		20 f0 8f	jsr $8ff0	                jsr xt_r_from
.9e51		20 07 8e	jsr $8e07	                jsr xt_over
.9e54		20 e6 8c	jsr $8ce6	                jsr xt_minus
.9e57		20 cd 92	jsr $92cd	                jsr xt_spaces
.9e5a		20 d3 95	jsr $95d3	                jsr xt_type
.9e5d		60		rts		z_d_dot_r:      rts
.9e5e						xt_two_constant:
.9e5e		20 68 d7	jsr $d768	                jsr underflow_2
.9e61		20 00 85	jsr $8500	                jsr xt_create
.9e64		20 4c 93	jsr $934c	                jsr xt_swap
.9e67		20 cf 83	jsr $83cf	                jsr xt_comma
.9e6a		20 cf 83	jsr $83cf	                jsr xt_comma
.9e6d		20 a0 86	jsr $86a0	                jsr does_runtime    ; does> turns into these two routines.
.9e70		20 f8 d5	jsr $d5f8	                jsr dodoes
.9e73		20 42 87	jsr $8742	                jsr xt_dup
.9e76		20 01 89	jsr $8901	                jsr xt_fetch
.9e79		20 4c 93	jsr $934c	                jsr xt_swap
.9e7c		20 45 83	jsr $8345	                jsr xt_cell_plus
.9e7f		20 01 89	jsr $8901	                jsr xt_fetch
.9e82		60		rts		z_two_constant: rts
.9e83						xt_two_literal:
.9e83		20 68 d7	jsr $d768	                jsr underflow_2 ; double number
.9e86		a9 0a		lda #$0a	                lda # z_template_push_tos - template_push_tos
.9e88		0a		asl a		                asl
.9e89		20 bc d5	jsr $d5bc	                jsr check_nc_limit
.9e8c		b0 09		bcs $9e97	                bcs _no_inline
.9e8e		20 4c 93	jsr $934c	                jsr xt_swap
.9e91		20 1b 8b	jsr $8b1b	                jsr xt_literal
.9e94		4c 1b 8b	jmp $8b1b	                jmp xt_literal
.9e97						_no_inline:
.9e97		20 f6 a0	jsr $a0f6	                jsr cmpl_two_literal
.9e9a		60		rts		z_two_literal:  rts
.9e9b						xt_two_variable:
.9e9b		20 00 85	jsr $8500	                jsr xt_create
.9e9e		ca		dex		                dex
.9e9f		ca		dex		                dex
.9ea0		a9 04		lda #$04	                lda #4
.9ea2		95 00		sta $00,x	                sta 0,x
.9ea4		74 01		stz $01,x	                stz 1,x
.9ea6		20 29 82	jsr $8229	                jsr xt_allot
.9ea9		60		rts		z_two_variable: rts
.9eaa						xt_ud_dot:
.9eaa		20 68 d7	jsr $d768	                jsr underflow_2 ; double number
.9ead		20 f8 8a	jsr $8af8	                jsr xt_less_number_sign
.9eb0		20 b5 8d	jsr $8db5	                jsr xt_number_sign_s
.9eb3		20 93 8d	jsr $8d93	                jsr xt_number_sign_greater
.9eb6		20 d3 95	jsr $95d3	                jsr xt_type
.9eb9		20 c7 92	jsr $92c7	                jsr xt_space
.9ebc		60		rts		z_ud_dot:        rts
.9ebd						xt_ud_dot_r:
.9ebd		20 6d d7	jsr $d76d	                jsr underflow_3
.9ec0		20 8a 94	jsr $948a	                jsr xt_to_r
.9ec3		20 f8 8a	jsr $8af8	                jsr xt_less_number_sign
.9ec6		20 b5 8d	jsr $8db5	                jsr xt_number_sign_s
.9ec9		20 93 8d	jsr $8d93	                jsr xt_number_sign_greater
.9ecc		20 f0 8f	jsr $8ff0	                jsr xt_r_from
.9ecf		20 07 8e	jsr $8e07	                jsr xt_over
.9ed2		20 e6 8c	jsr $8ce6	                jsr xt_minus
.9ed5		20 cd 92	jsr $92cd	                jsr xt_spaces
.9ed8		20 d3 95	jsr $95d3	                jsr xt_type
.9edb		60		rts		z_ud_dot_r:      rts

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/string.asm

.9edc						xt_cmove:
.9edc		20 6d d7	jsr $d76d	                jsr underflow_3
.9edf		b5 02		lda $02,x	                lda 2,x
.9ee1		85 27		sta $27		                sta tmp2        ; use tmp2 because easier to remember
.9ee3		b5 03		lda $03,x	                lda 3,x
.9ee5		85 28		sta $28		                sta tmp2+1
.9ee7		b5 04		lda $04,x	                lda 4,x
.9ee9		85 25		sta $25		                sta tmp1        ; use tmp1 because easier to remember
.9eeb		b5 05		lda $05,x	                lda 5,x
.9eed		85 26		sta $26		                sta tmp1+1
.9eef		a0 00		ldy #$00	                ldy #0
.9ef1		b5 01		lda $01,x	                lda 1,x         ; number of whole pages to move
.9ef3		f0 0f		beq $9f04	                beq _dopartial
.9ef5						_page:
.9ef5		b1 25		lda ($25),y	                lda (tmp1),y
.9ef7		91 27		sta ($27),y	                sta (tmp2),y
.9ef9		c8		iny		                iny
.9efa		d0 f9		bne $9ef5	                bne _page
.9efc		e6 26		inc $26		                inc tmp1+1
.9efe		e6 28		inc $28		                inc tmp2+1
.9f00		d6 01		dec $01,x	                dec 1,x
.9f02		d0 f1		bne $9ef5	                bne _page
.9f04						_dopartial:
.9f04		b5 00		lda $00,x	                lda 0,x         ; length of last page
.9f06		f0 09		beq $9f11	                beq _done
.9f08						_partial:
.9f08		b1 25		lda ($25),y	                lda (tmp1),y
.9f0a		91 27		sta ($27),y	                sta (tmp2),y
.9f0c		c8		iny		                iny
.9f0d		d6 00		dec $00,x	                dec 0,x
.9f0f		d0 f7		bne $9f08	                bne _partial
.9f11						_done:
.9f11		8a		txa		                txa
.9f12		18		clc		                clc
.9f13		69 06		adc #$06	                adc #6
.9f15		aa		tax		                tax
.9f16		60		rts		z_cmove:        rts
.9f17						xt_cmove_up:
.9f17		20 6d d7	jsr $d76d	                jsr underflow_3
.9f1a		b5 02		lda $02,x	                lda 2,x
.9f1c		85 27		sta $27		                sta tmp2        ; use tmp2 because easier to remember
.9f1e		b5 03		lda $03,x	                lda 3,x
.9f20		18		clc		                clc
.9f21		75 01		adc $01,x	                adc 1,x
.9f23		85 28		sta $28		                sta tmp2+1      ; point to last page of destination
.9f25		b5 04		lda $04,x	                lda 4,x
.9f27		85 25		sta $25		                sta tmp1        ; use tmp1 because easier to remember
.9f29		b5 05		lda $05,x	                lda 5,x
.9f2b		18		clc		                clc
.9f2c		75 01		adc $01,x	                adc 1,x
.9f2e		85 26		sta $26		                sta tmp1+1      ; point to last page of source
.9f30		f6 01		inc $01,x	                inc 1,x         ; allows us to use bne with dec 1,x below
.9f32		b4 00		ldy $00,x	                ldy 0,x         ; length of last page
.9f34		f0 0e		beq $9f44	                beq _nopartial
.9f36						_outerloop:
.9f36		88		dey		                dey
.9f37		f0 07		beq $9f40	                beq _finishpage
.9f39						_innerloop:
.9f39		b1 25		lda ($25),y	                lda (tmp1),y
.9f3b		91 27		sta ($27),y	                sta (tmp2),y
.9f3d		88		dey		                dey
.9f3e		d0 f9		bne $9f39	                bne _innerloop
.9f40						_finishpage:
.9f40		b2 25		lda ($25)	                lda (tmp1)      ; handle y = 0 separately
.9f42		92 27		sta ($27)	                sta (tmp2)
.9f44						_nopartial:
.9f44		c6 26		dec $26		                dec tmp1+1      ; back up to previous pages
.9f46		c6 28		dec $28		                dec tmp2+1
.9f48		d6 01		dec $01,x	                dec 1,x
.9f4a		d0 ea		bne $9f36	                bne _outerloop
.9f4c						_done:
.9f4c		8a		txa		                txa
.9f4d		18		clc		                clc
.9f4e		69 06		adc #$06	                adc #6
.9f50		aa		tax		                tax
.9f51		60		rts		z_cmove_up:     rts
.9f52						xt_compare:
.9f52		20 72 d7	jsr $d772	                jsr underflow_4
.9f55		b5 02		lda $02,x	                lda 2,x
.9f57		85 27		sta $27		                sta tmp2
.9f59		b5 03		lda $03,x	                lda 3,x
.9f5b		85 28		sta $28		                sta tmp2+1
.9f5d		b5 06		lda $06,x	                lda 6,x
.9f5f		85 25		sta $25		                sta tmp1
.9f61		b5 07		lda $07,x	                lda 7,x
.9f63		85 26		sta $26		                sta tmp1+1
.9f65						_compare_loop:
.9f65		b5 04		lda $04,x	                lda 4,x
.9f67		15 05		ora $05,x	                ora 5,x
.9f69		f0 2c		beq $9f97	                beq _str1_done
.9f6b		b5 00		lda $00,x	                lda 0,x
.9f6d		15 01		ora $01,x	                ora 1,x
.9f6f		f0 3a		beq $9fab	                beq _greater    ; Str2 empty first
.9f71						_check_letter:
.9f71		b2 25		lda ($25)	                lda (tmp1)
.9f73		d2 27		cmp ($27)	                cmp (tmp2)
.9f75		90 26		bcc $9f9d	                bcc _less
.9f77		d0 32		bne $9fab	                bne _greater
.9f79						_next_letter:
.9f79		e6 25		inc $25		                inc tmp1
.9f7b		d0 02		bne $9f7f	                bne +
.9f7d		e6 26		inc $26		                inc tmp1+1
.9f7f						+
.9f7f		e6 27		inc $27		                inc tmp2
.9f81		d0 02		bne $9f85	                bne +
.9f83		e6 28		inc $28		                inc tmp2+1
.9f85						+
.9f85		b5 04		lda $04,x	                lda 4,x
.9f87		d0 02		bne $9f8b	                bne +
.9f89		d6 05		dec $05,x	                dec 5,x
.9f8b						+
.9f8b		d6 04		dec $04,x	                dec 4,x
.9f8d		b5 00		lda $00,x	                lda 0,x
.9f8f		d0 02		bne $9f93	                bne +
.9f91		d6 01		dec $01,x	                dec 1,x
.9f93						+
.9f93		d6 00		dec $00,x	                dec 0,x
.9f95		80 ce		bra $9f65	                bra _compare_loop
.9f97						_str1_done:
.9f97		b5 00		lda $00,x	                lda 0,x
.9f99		15 01		ora $01,x	                ora 1,x
.9f9b		f0 08		beq $9fa5	                beq _equal      ; Both out of letters
.9f9d						_less:
.9f9d		a9 ff		lda #$ff	                lda #$FF
.9f9f		95 06		sta $06,x	                sta 6,x
.9fa1		95 07		sta $07,x	                sta 7,x
.9fa3		80 0c		bra $9fb1	                bra _done
.9fa5						_equal:
.9fa5		74 06		stz $06,x	                stz 6,x
.9fa7		74 07		stz $07,x	                stz 7,x
.9fa9		80 06		bra $9fb1	                bra _done
.9fab						_greater:
.9fab		a9 01		lda #$01	                lda #1
.9fad		95 06		sta $06,x	                sta 6,x
.9faf		74 07		stz $07,x	                stz 7,x
.9fb1						_done:
.9fb1		8a		txa		                txa
.9fb2		18		clc		                clc
.9fb3		69 06		adc #$06	                adc #6
.9fb5		aa		tax		                tax
.9fb6		60		rts		z_compare:      rts
.9fb7						xt_minus_leading:
.9fb7		20 68 d7	jsr $d768	                jsr underflow_2
.9fba						_loop:
.9fba		b5 00		lda $00,x	                lda 0,x
.9fbc		15 01		ora $01,x	                ora 1,x
.9fbe		f0 0f		beq $9fcf	                beq _done
.9fc0		a1 02		lda ($02,x)	                lda (2,x)               ; get first character
.9fc2		20 56 d7	jsr $d756	                jsr is_whitespace
.9fc5		90 08		bcc $9fcf	                bcc _done
.9fc7		20 25 9d	jsr $9d25	                jsr xt_one              ; ( addr u 1 )
.9fca		20 ac a0	jsr $a0ac	                jsr xt_slash_string     ; ( addr+ u-1 )
.9fcd		80 eb		bra $9fba	                bra _loop
.9fcf						_done:
.9fcf						z_minus_leading:
.9fcf		60		rts		                rts
.9fd0						xt_minus_trailing:
.9fd0		20 68 d7	jsr $d768	                jsr underflow_2
.9fd3		b5 00		lda $00,x	                lda 0,x         ; LSB of n
.9fd5		15 01		ora $01,x	                ora 1,x         ; MSB of n
.9fd7		f0 33		beq $a00c	                beq _done
.9fd9		18		clc		                clc
.9fda		b5 02		lda $02,x	                lda 2,x         ; LSB of addr
.9fdc		75 00		adc $00,x	                adc 0,x
.9fde		85 25		sta $25		                sta tmp1
.9fe0		b5 03		lda $03,x	                lda 3,x         ; MSB of addr
.9fe2		75 01		adc $01,x	                adc 1,x
.9fe4		85 26		sta $26		                sta tmp1+1
.9fe6		a5 25		lda $25		                lda tmp1
.9fe8		d0 02		bne $9fec	                bne +
.9fea		c6 26		dec $26		                dec tmp1+1
.9fec						+
.9fec		c6 25		dec $25		                dec tmp1
.9fee						_loop:
.9fee		b2 25		lda ($25)	                lda (tmp1)
.9ff0		c9 20		cmp #$20	                cmp #AscSP
.9ff2		d0 18		bne $a00c	                bne _done
.9ff4		a5 25		lda $25		                lda tmp1
.9ff6		d0 02		bne $9ffa	                bne +
.9ff8		c6 26		dec $26		                dec tmp1+1
.9ffa						+
.9ffa		c6 25		dec $25		                dec tmp1
.9ffc		b5 00		lda $00,x	                lda 0,x
.9ffe		d0 02		bne $a002	                bne +
.a000		d6 01		dec $01,x	                dec 1,x
.a002						+
.a002		d6 00		dec $00,x	                dec 0,x
.a004		b5 00		lda $00,x	                lda 0,x
.a006		15 01		ora $01,x	                ora 1,x
.a008		f0 02		beq $a00c	                beq _done       ; Count has reached zero - we're done!
.a00a		80 e2		bra $9fee	                bra _loop
.a00c						_done:
.a00c						z_minus_trailing:
.a00c		60		rts		                rts
.a00d						xt_search:
.a00d		20 72 d7	jsr $d772	                jsr underflow_4
.a010		b5 00		lda $00,x	                lda 0,x
.a012		15 01		ora $01,x	                ora 1,x
.a014		d0 0b		bne $a021	                bne _start_search
.a016		e8		inx		                inx             ; Remove u2
.a017		e8		inx		                inx
.a018		a9 ff		lda #$ff	                lda #$FF        ; Turn addr2 into a true flag
.a01a		95 00		sta $00,x	                sta 0,x
.a01c		95 01		sta $01,x	                sta 1,x
.a01e		4c ab a0	jmp $a0ab	                jmp z_search
.a021						_start_search:
.a021		20 8b 9d	jsr $9d8b	                jsr xt_zero
.a024						_search_loop:
.a024		18		clc		                clc
.a025		b5 00		lda $00,x	                lda 0,x
.a027		75 02		adc $02,x	                adc 2,x
.a029		85 25		sta $25		                sta tmp1
.a02b		b5 01		lda $01,x	                lda 1,x
.a02d		75 03		adc $03,x	                adc 3,x
.a02f		d5 07		cmp $07,x	                cmp 7,x
.a031		90 12		bcc $a045	                bcc _init_comparison ; Obviously less
.a033		d0 06		bne $a03b	                bne _not_found
.a035		b5 06		lda $06,x	                lda 6,x
.a037		c5 25		cmp $25		                cmp tmp1
.a039		b0 0a		bcs $a045	                bcs _init_comparison
.a03b						_not_found:
.a03b		e8		inx		                inx             ; Remove offset
.a03c		e8		inx		                inx
.a03d		e8		inx		                inx             ; Remove u2
.a03e		e8		inx		                inx
.a03f		74 00		stz $00,x	                stz 0,x         ; Turn addr2 into a false flag
.a041		74 01		stz $01,x	                stz 1,x
.a043		80 66		bra $a0ab	                bra z_search
.a045						_init_comparison:
.a045		18		clc		                clc
.a046		b5 08		lda $08,x	                lda 8,x
.a048		75 00		adc $00,x	                adc 0,x
.a04a		85 25		sta $25		                sta tmp1
.a04c		b5 09		lda $09,x	                lda 9,x
.a04e		75 01		adc $01,x	                adc 1,x
.a050		85 26		sta $26		                sta tmp1+1
.a052		b5 04		lda $04,x	                lda 4,x
.a054		85 27		sta $27		                sta tmp2
.a056		b5 05		lda $05,x	                lda 5,x
.a058		85 28		sta $28		                sta tmp2+1
.a05a		b5 02		lda $02,x	                lda 2,x
.a05c		85 29		sta $29		                sta tmp3
.a05e		b5 03		lda $03,x	                lda 3,x
.a060		85 2a		sta $2a		                sta tmp3+1
.a062						_comparison_loop:
.a062		b2 25		lda ($25)	                lda (tmp1)
.a064		d2 27		cmp ($27)	                cmp (tmp2)
.a066		f0 05		beq $a06d	                beq _letters_match
.a068		20 eb 8d	jsr $8deb	                jsr xt_one_plus
.a06b		80 b7		bra $a024	                bra _search_loop
.a06d						_letters_match:
.a06d		e6 25		inc $25		                inc tmp1
.a06f		d0 02		bne $a073	                bne +
.a071		e6 26		inc $26		                inc tmp1+1
.a073						+
.a073		e6 27		inc $27		                inc tmp2
.a075		d0 02		bne $a079	                bne +
.a077		e6 28		inc $28		                inc tmp2+1
.a079						+
.a079		a5 29		lda $29		                lda tmp3
.a07b		d0 02		bne $a07f	                bne +
.a07d		c6 2a		dec $2a		                dec tmp3+1
.a07f						+
.a07f		c6 29		dec $29		                dec tmp3
.a081		a5 29		lda $29		                lda tmp3
.a083		05 2a		ora $2a		                ora tmp3+1
.a085		d0 db		bne $a062	                bne _comparison_loop ; Check the next letter
.a087		18		clc		                clc
.a088		b5 00		lda $00,x	                lda 0,x
.a08a		75 08		adc $08,x	                adc 8,x
.a08c		95 08		sta $08,x	                sta 8,x
.a08e		b5 01		lda $01,x	                lda 1,x
.a090		75 09		adc $09,x	                adc 9,x
.a092		95 09		sta $09,x	                sta 9,x
.a094		38		sec		                sec
.a095		b5 06		lda $06,x	                lda 6,x
.a097		f5 00		sbc $00,x	                sbc 0,x
.a099		95 06		sta $06,x	                sta 6,x
.a09b		b5 07		lda $07,x	                lda 7,x
.a09d		f5 01		sbc $01,x	                sbc 1,x
.a09f		95 07		sta $07,x	                sta 7,x
.a0a1		e8		inx		                inx             ; drop offset
.a0a2		e8		inx		                inx
.a0a3		e8		inx		                inx             ; drop u2
.a0a4		e8		inx		                inx
.a0a5		a9 ff		lda #$ff	                lda #$FF
.a0a7		95 00		sta $00,x	                sta 0,x         ; Turn addr2 into a true flag.
.a0a9		95 01		sta $01,x	                sta 1,x
.a0ab		60		rts		z_search:       rts
.a0ac						xt_slash_string:
.a0ac		20 6d d7	jsr $d76d	                jsr underflow_3
.a0af		18		clc		                clc             ; 3OS+TOS
.a0b0		b5 00		lda $00,x	                lda 0,x
.a0b2		75 04		adc $04,x	                adc 4,x
.a0b4		95 04		sta $04,x	                sta 4,x
.a0b6		b5 01		lda $01,x	                lda 1,x
.a0b8		75 05		adc $05,x	                adc 5,x
.a0ba		95 05		sta $05,x	                sta 5,x
.a0bc		38		sec		                sec             ; NOS-TOS
.a0bd		b5 02		lda $02,x	                lda 2,x
.a0bf		f5 00		sbc $00,x	                sbc 0,x
.a0c1		95 02		sta $02,x	                sta 2,x
.a0c3		b5 03		lda $03,x	                lda 3,x
.a0c5		f5 01		sbc $01,x	                sbc 1,x
.a0c7		95 03		sta $03,x	                sta 3,x
.a0c9		e8		inx		                inx
.a0ca		e8		inx		                inx
.a0cb		60		rts		z_slash_string: rts
.a0cc						xt_sliteral:
.a0cc		20 68 d7	jsr $d768	                jsr underflow_2
.a0cf		20 b2 d5	jsr $d5b2	                jsr cmpl_jump_later
.a0d2		20 8a 94	jsr $948a	                jsr xt_to_r
.a0d5		20 02 8a	jsr $8a02	                jsr xt_here
.a0d8		20 4c 93	jsr $934c	                jsr xt_swap
.a0db		20 42 87	jsr $8742	                jsr xt_dup
.a0de		20 29 82	jsr $8229	                jsr xt_allot            ; reserve u bytes for string
.a0e1		20 02 8a	jsr $8a02	                jsr xt_here
.a0e4		20 f0 8f	jsr $8ff0	                jsr xt_r_from
.a0e7		20 36 93	jsr $9336	                jsr xt_store            ; point jmp past string
.a0ea		20 c9 94	jsr $94c9	                jsr xt_two_dup
.a0ed		20 b3 95	jsr $95b3	                jsr xt_two_to_r
.a0f0		20 02 8d	jsr $8d02	                jsr xt_move             ; copy u bytes from addr -> addr'
.a0f3		20 39 95	jsr $9539	                jsr xt_two_r_from
.a0f6						cmpl_sliteral:
.a0f6						cmpl_two_literal:
.a0f6		a0 a1		ldy #$a1	                ldy #>sliteral_runtime
.a0f8		a9 10		lda #$10	                lda #<sliteral_runtime
.a0fa		20 8d d5	jsr $d58d	                jsr cmpl_call_ya
.a0fd		b4 03		ldy $03,x	                ldy 3,x                ; address MSB
.a0ff		b5 02		lda $02,x	                lda 2,x                ; address LSB
.a101		20 99 d5	jsr $d599	                jsr cmpl_word_ya
.a104		b4 01		ldy $01,x	                ldy 1,x                ; length MSB
.a106		b5 00		lda $00,x	                lda 0,x                ; length LSB
.a108		20 99 d5	jsr $d599	                jsr cmpl_word_ya
.a10b		e8		inx		                inx
.a10c		e8		inx		                inx
.a10d		e8		inx		                inx
.a10e		e8		inx		                inx
.a10f		60		rts		z_sliteral:     rts
.a110						two_literal_runtime:
.a110						sliteral_runtime:
.a110		ca		dex		                dex
.a111		ca		dex		                dex
.a112		ca		dex		                dex
.a113		ca		dex		                dex
.a114		68		pla		                pla
.a115		85 25		sta $25		                sta tmp1        ; LSB of address
.a117		7a		ply		                ply
.a118		84 26		sty $26		                sty tmp1+1      ; MSB of address
.a11a		18		clc		                clc
.a11b		69 04		adc #$04	                adc #4
.a11d		90 01		bcc $a120	                bcc +
.a11f		c8		iny		                iny
.a120						+
.a120		5a		phy		                phy
.a121		48		pha		                pha
.a122		a0 01		ldy #$01	                ldy #1          ; adjust for JSR/RTS mechanics on 65c02
.a124		b1 25		lda ($25),y	                lda (tmp1),y
.a126		95 02		sta $02,x	                sta 2,x         ; LSB of address
.a128		c8		iny		                iny
.a129		b1 25		lda ($25),y	                lda (tmp1),y
.a12b		95 03		sta $03,x	                sta 3,x         ; MSB of address
.a12d		c8		iny		                iny
.a12e		b1 25		lda ($25),y	                lda (tmp1),y
.a130		95 00		sta $00,x	                sta 0,x         ; LSB of length
.a132		c8		iny		                iny
.a133		b1 25		lda ($25),y	                lda (tmp1),y
.a135		95 01		sta $01,x	                sta 1,x         ; MSB of length
.a137		60		rts		                rts

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/disasm.asm

.a138						xt_disasm:
.a138		20 68 d7	jsr $d768	                jsr underflow_2
.a13b		20 3f a1	jsr $a13f	                jsr disassembler
.a13e		60		rts		z_disasm:       rts
.a13f						disassembler:
.a13f		20 fa 84	jsr $84fa	                jsr xt_cr       ; ( addr u )
.a142						_byte_loop:
.a142		20 07 8e	jsr $8e07	                jsr xt_over     ; ( addr u addr )
.a145		20 fe 95	jsr $95fe	                jsr xt_u_dot    ; ( addr u )
.a148		20 c7 92	jsr $92c7	                jsr xt_space
.a14b		a9 63		lda #$63	                lda #<oc_index_table
.a14d		85 27		sta $27		                sta tmp2
.a14f		a9 b3		lda #$b3	                lda #>oc_index_table
.a151		85 28		sta $28		                sta tmp2+1
.a153		a1 02		lda ($02,x)	                lda (2,x)       ; get opcode that addr points to
.a155		85 2d		sta $2d		                sta scratch     ; Save opcode
.a157		0a		asl a		                asl             ; multiply by two for offset
.a158		90 02		bcc $a15c	                bcc +
.a15a		e6 28		inc $28		                inc tmp2+1      ; we're on second page
.a15c						+
.a15c		a8		tay		                tay             ; use Y as the index
.a15d		b1 27		lda ($27),y	                lda (tmp2),y    ; LSB
.a15f		85 29		sta $29		                sta tmp3
.a161		48		pha		                pha
.a162		c8		iny		                iny
.a163		b1 27		lda ($27),y	                lda (tmp2),y    ; MSB
.a165		85 2a		sta $2a		                sta tmp3+1
.a167		48		pha		                pha
.a168		b2 29		lda ($29)	                lda (tmp3)
.a16a		a8		tay		                tay                     ; save copy of lengths byte
.a16b		10 3c		bpl $a1a9	                bpl _no_operand         ; bit 7 clear, single-byte instruction
.a16d		20 8b 9d	jsr $9d8b	                jsr xt_zero             ; ( addr u 0 ) ZERO does not use Y
.a170		f6 04		inc $04,x	                inc 4,x
.a172		d0 02		bne $a176	                bne +
.a174		f6 05		inc $05,x	                inc 5,x                 ; ( addr+1 u 0 )
.a176						+
.a176		b5 02		lda $02,x	                lda 2,x
.a178		d0 02		bne $a17c	                bne +
.a17a		d6 03		dec $03,x	                dec 3,x
.a17c						+
.a17c		d6 02		dec $02,x	                dec 2,x                 ; ( addr+1 u-1 0 )
.a17e		a1 04		lda ($04,x)	                lda (4,x)
.a180		95 00		sta $00,x	                sta 0,x                 ; LSB of operand ( addr+1 u-1 LSB )
.a182		85 2e		sta $2e		                sta scratch+1           ; Save a copy in the scratch buffer
.a184		98		tya		                tya                     ; retrieve copy of lengths byte
.a185		2a		rol a		                rol                     ; shift bit 6 to bit 7
.a186		10 14		bpl $a19c	                bpl _print_operand
.a188		f6 04		inc $04,x	                inc 4,x
.a18a		d0 02		bne $a18e	                bne +
.a18c		f6 05		inc $05,x	                inc 5,x                 ; ( addr+2 u-1 LSB )
.a18e						+
.a18e		b5 02		lda $02,x	                lda 2,x
.a190		d0 02		bne $a194	                bne +
.a192		d6 03		dec $03,x	                dec 3,x
.a194						+
.a194		d6 02		dec $02,x	                dec 2,x                 ; ( addr+2 u-2 LSB )
.a196		a1 04		lda ($04,x)	                lda (4,x)
.a198		95 01		sta $01,x	                sta 1,x                 ; MSB of operand ( addr+2 u-2 opr )
.a19a		85 2f		sta $2f		                sta scratch+2           ; Save a copy in the scratch buffer
.a19c						_print_operand:
.a19c		ca		dex		                dex
.a19d		ca		dex		                dex
.a19e		a9 05		lda #$05	                lda #5
.a1a0		95 00		sta $00,x	                sta 0,x
.a1a2		74 01		stz $01,x	                stz 1,x                 ; ( addr+n u-n opr 5 )
.a1a4		20 0a 96	jsr $960a	                jsr xt_u_dot_r          ; U.R ( addr+n u-n )
.a1a7		80 0b		bra $a1b4	                bra _print_mnemonic
.a1a9						_no_operand:
.a1a9		ca		dex		                dex
.a1aa		ca		dex		                dex
.a1ab		a9 05		lda #$05	                lda #5
.a1ad		95 00		sta $00,x	                sta 0,x
.a1af		74 01		stz $01,x	                stz 1,x                 ; ( addr u 5 )
.a1b1		20 cd 92	jsr $92cd	                jsr xt_spaces           ; ( addr u )
.a1b4						_print_mnemonic:
.a1b4		20 c7 92	jsr $92c7	                jsr xt_space
.a1b7		ca		dex		                dex
.a1b8		ca		dex		                dex                     ; ( addr u ? )
.a1b9		68		pla		                pla                     ; MSB
.a1ba		95 01		sta $01,x	                sta 1,x                 ; ( addr u MSB )
.a1bc		68		pla		                pla                     ; LSB
.a1bd		95 00		sta $00,x	                sta 0,x                 ; ( addr u addr-o )
.a1bf		20 e6 84	jsr $84e6	                jsr xt_count            ; ( addr u addr-o u-o )
.a1c2		74 01		stz $01,x	                stz 1,x                 ; paranoid
.a1c4		b5 00		lda $00,x	                lda 0,x
.a1c6		29 07		and #$07	                and #%00000111          ; ( addr u addr-o u-o )
.a1c8		95 00		sta $00,x	                sta 0,x
.a1ca		20 d3 95	jsr $95d3	                jsr xt_type             ; ( addr u )
.a1cd		a5 2d		lda $2d		                lda scratch
.a1cf		c9 20		cmp #$20	                cmp #OpJSR
.a1d1		d0 4e		bne $a221	                bne _not_jsr
.a1d3		ca		dex		                dex
.a1d4		ca		dex		                dex
.a1d5		a9 05		lda #$05	                lda #5
.a1d7		95 00		sta $00,x	                sta 0,x
.a1d9		74 01		stz $01,x	                stz 1,x
.a1db		20 cd 92	jsr $92cd	                jsr xt_spaces
.a1de		a0 10		ldy #$10	                ldy #(_end_handlers - _special_handlers - 4)
.a1e0		b9 0d a2	lda $a20d,y	_check_handler: lda _special_handlers,y
.a1e3		c5 2e		cmp $2e		                cmp scratch+1
.a1e5		d0 07		bne $a1ee	                bne _next_handler
.a1e7		b9 0e a2	lda $a20e,y	                lda _special_handlers+1,y
.a1ea		c5 2f		cmp $2f		                cmp scratch+2
.a1ec		f0 0c		beq $a1fa	                beq _run_handler
.a1ee		88		dey		_next_handler:  dey
.a1ef		88		dey		                dey
.a1f0		88		dey		                dey
.a1f1		88		dey		                dey
.a1f2		10 ec		bpl $a1e0	                bpl _check_handler
.a1f4						_not_special:
.a1f4		20 44 a3	jsr $a344	                jsr disasm_jsr
.a1f7		4c 8b a2	jmp $a28b	                jmp _printing_done
.a1fa						_run_handler:
.a1fa		b9 0f a2	lda $a20f,y	                lda _special_handlers+2,y
.a1fd		85 30		sta $30		                sta scratch+3
.a1ff		b9 10 a2	lda $a210,y	                lda _special_handlers+3,y
.a202		85 31		sta $31		                sta scratch+4
.a204		20 0a a2	jsr $a20a	                jsr _dispatch_handler
.a207		4c 8b a2	jmp $a28b	                jmp _printing_done
.a20a						_dispatch_handler:
.a20a		6c 30 00	jmp ($0030)	                jmp (scratch+3)
.a20d						_special_handlers:
>a20d		63 8b 26 a3			    .word literal_runtime,      disasm_literal
>a211		10 a1 d1 a2			    .word sliteral_runtime,     disasm_sliteral
>a215		56 8a 08 a3			    .word zero_branch_runtime,  disasm_0branch
>a219		4c 8a 14 a3			    .word zero_test_runtime,    disasm_0test
>a21d		5e 86 1c a3			    .word do_runtime,           disasm_do
.a221						_end_handlers:
.a221						_not_jsr:
.a221		c9 4c		cmp #$4c	                cmp #OpJMP
.a223		d0 2c		bne $a251	                bne _not_jmp
.a225		a5 2e		lda $2e		                lda scratch+1   ; Copy the pointer.
.a227		85 30		sta $30		                sta scratch+3
.a229		a5 2f		lda $2f		                lda scratch+2
.a22b		85 31		sta $31		                sta scratch+4
.a22d		b2 30		lda ($30)	                lda (scratch+3)
.a22f		c9 20		cmp #$20	                cmp #OpJSR ; check for JSR
.a231		d0 58		bne $a28b	                bne _printing_done
.a233		e6 30		inc $30		                inc scratch+3
.a235		d0 02		bne $a239	                bne +
.a237		e6 31		inc $31		                inc scratch+4
.a239						+
.a239		b2 30		lda ($30)	                lda (scratch+3)
.a23b		c9 10		cmp #$10	                cmp #<sliteral_runtime
.a23d		d0 4c		bne $a28b	                bne _printing_done
.a23f		e6 30		inc $30		                inc scratch+3
.a241		d0 02		bne $a245	                bne +
.a243		e6 31		inc $31		                inc scratch+4
.a245						+
.a245		b2 30		lda ($30)	                lda (scratch+3)
.a247		c9 a1		cmp #$a1	                cmp #>sliteral_runtime
.a249		d0 40		bne $a28b	                bne _printing_done
.a24b		20 a7 a2	jsr $a2a7	                jsr disasm_sliteral_jump
.a24e		4c 8b a2	jmp $a28b	                jmp _printing_done
.a251						_not_jmp:
.a251		c9 80		cmp #$80	                cmp #OpBRA            ; is it bra?
.a253		f0 06		beq $a25b	                beq _is_rel
.a255		29 1f		and #$1f	                and #$1F
.a257		49 10		eor #$10	                eor #$10            ; do bottom five bits match xxx10000 ?
.a259		d0 30		bne $a28b	                bne _printing_done
.a25b						_is_rel:
.a25b		a0 76		ldy #$76	                ldy #'v'            ; we'll indicate branch forward or back with v or ^
.a25d		ca		dex		                dex
.a25e		ca		dex		                dex
.a25f		74 01		stz $01,x	                stz 1,x
.a261		a5 2e		lda $2e		                lda scratch+1
.a263		95 00		sta $00,x	                sta 0,x
.a265		10 04		bpl $a26b	                bpl +
.a267		d6 01		dec $01,x	                dec 1,x             ; for negative offsets extend the sign bit so add works out
.a269		a0 5e		ldy #$5e	                ldy #'^'            ; it's a backward branch
.a26b		38		sec		+               sec                 ; start counting from address after opcode
.a26c		75 04		adc $04,x	                adc 4,x
.a26e		95 00		sta $00,x	                sta 0,x
.a270		b5 01		lda $01,x	                lda 1,x
.a272		75 05		adc $05,x	                adc 5,x
.a274		95 01		sta $01,x	                sta 1,x
.a276		5a		phy		                phy                 ; save the direction indicator
.a277		ca		dex		                dex
.a278		ca		dex		                dex
.a279		a9 09		lda #$09	                lda #9
.a27b		95 00		sta $00,x	                sta 0,x
.a27d		74 01		stz $01,x	                stz 1,x
.a27f		20 0a 96	jsr $960a	                jsr xt_u_dot_r      ; print the destination with 5 leading spaces
.a282		a9 20		lda #$20	                lda #AscSp          ; print space and branch direction indicator
.a284		20 ac 87	jsr $87ac	                jsr emit_a
.a287		68		pla		                pla
.a288		20 ac 87	jsr $87ac	                jsr emit_a
.a28b						_printing_done:
.a28b		20 fa 84	jsr $84fa	                jsr xt_cr
.a28e		f6 02		inc $02,x	                inc 2,x
.a290		d0 02		bne $a294	                bne +
.a292		f6 03		inc $03,x	                inc 3,x                 ; ( addr+1 u )
.a294						+
.a294		20 df 8d	jsr $8ddf	                jsr xt_one_minus        ; ( addr+1 u-1 )
.a297		b5 00		lda $00,x	                lda 0,x                 ; All done?
.a299		15 01		ora $01,x	                ora 1,x
.a29b		f0 07		beq $a2a4	                beq _done
.a29d		b5 01		lda $01,x	                lda 1,x                 ; Catch mid-instruction ranges
.a29f		30 03		bmi $a2a4	                bmi _done
.a2a1		4c 42 a1	jmp $a142	                jmp _byte_loop          ; out of range for BRA
.a2a4						_done:
.a2a4		4c c1 94	jmp $94c1	                jmp xt_two_drop         ; JSR/RTS
.a2a7						disasm_sliteral_jump:
.a2a7		20 4c 93	jsr $934c	                jsr xt_swap
.a2aa		ca		dex		                dex
.a2ab		ca		dex		                dex
.a2ac		a5 2e		lda $2e		                lda scratch+1
.a2ae		95 00		sta $00,x	                sta 0,x
.a2b0		a5 2f		lda $2f		                lda scratch+2
.a2b2		95 01		sta $01,x	                sta 1,x
.a2b4		20 4c 93	jsr $934c	                jsr xt_swap
.a2b7		20 e6 8c	jsr $8ce6	                jsr xt_minus
.a2ba		20 df 8d	jsr $8ddf	                jsr xt_one_minus
.a2bd		20 e6 8c	jsr $8ce6	                jsr xt_minus
.a2c0		ca		dex		                dex
.a2c1		ca		dex		                dex
.a2c2		a5 2e		lda $2e		                lda scratch+1
.a2c4		95 00		sta $00,x	                sta 0,x
.a2c6		a5 2f		lda $2f		                lda scratch+2
.a2c8		95 01		sta $01,x	                sta 1,x
.a2ca		20 df 8d	jsr $8ddf	                jsr xt_one_minus
.a2cd		20 4c 93	jsr $934c	                jsr xt_swap ; ( new_addr new_n )
.a2d0		60		rts		                rts
.a2d1						disasm_sliteral:
.a2d1		a9 53		lda #$53	                lda #'S'
.a2d3		20 ac 87	jsr $87ac	                jsr emit_a ; Print S before LITERAL so it becomes SLITERAL
.a2d6		a9 0c		lda #$0c	                lda #str_disasm_lit     ; "LITERAL "
.a2d8		20 9f d7	jsr $d79f	                jsr print_string_no_lf
.a2db		20 4c 93	jsr $934c	                jsr xt_swap             ; switch to (u addr)
.a2de		20 eb 8d	jsr $8deb	                jsr xt_one_plus
.a2e1		20 42 87	jsr $8742	                jsr xt_dup
.a2e4		20 01 89	jsr $8901	                jsr xt_fetch
.a2e7		20 fe 95	jsr $95fe	                jsr xt_u_dot            ; Print the address of the string
.a2ea		20 56 9d	jsr $9d56	                jsr xt_two
.a2ed		20 55 8f	jsr $8f55	                jsr xt_plus
.a2f0		20 42 87	jsr $8742	                jsr xt_dup
.a2f3		20 b6 98	jsr $98b6	                jsr xt_question         ; Print the length of the string
.a2f6		20 eb 8d	jsr $8deb	                jsr xt_one_plus
.a2f9		20 4c 93	jsr $934c	                jsr xt_swap            ; ( addr+4 u )
.a2fc		ca		dex		                dex
.a2fd		ca		dex		                dex
.a2fe		a9 04		lda #$04	                lda #4
.a300		95 00		sta $00,x	                sta 0,x
.a302		74 01		stz $01,x	                stz 1,x
.a304		20 e6 8c	jsr $8ce6	                jsr xt_minus            ; ( addr+4 u-4 )
.a307		60		rts		                rts
.a308						disasm_0branch:
.a308		a9 30		lda #$30	                lda #'0'
.a30a		20 ac 87	jsr $87ac	                jsr emit_a ; Print 0 before BRANCH so it becomes 0BRANCH
.a30d						disasm_branch:
.a30d		a9 0e		lda #$0e	                lda #str_disasm_bra
.a30f		20 9f d7	jsr $d79f	                jsr print_string_no_lf ; "BRANCH "
.a312		80 17		bra $a32b	                bra disasm_print_literal
.a314						disasm_0test:
.a314		a9 0f		lda #$0f	                lda #str_disasm_0test
.a316		20 9f d7	jsr $d79f	                jsr print_string_no_lf
.a319		4c ac 87	jmp $87ac	                jmp emit_a
.a31c						disasm_do:
.a31c		a9 44		lda #$44	                lda #'D'
.a31e		20 ac 87	jsr $87ac	                jsr emit_a
.a321		a9 4f		lda #$4f	                lda #'O'
.a323		4c ac 87	jmp $87ac	                jmp emit_a
.a326						disasm_literal:
.a326		a9 0c		lda #$0c	                lda #str_disasm_lit
.a328		20 9f d7	jsr $d79f	                jsr print_string_no_lf ; "LITERAL "
.a32b						disasm_print_literal:
.a32b		20 4c 93	jsr $934c	                jsr xt_swap ; switch to (u addr)
.a32e		20 eb 8d	jsr $8deb	                jsr xt_one_plus
.a331		20 42 87	jsr $8742	                jsr xt_dup
.a334		20 b6 98	jsr $98b6	                jsr xt_question ; Print the value at the address
.a337		20 eb 8d	jsr $8deb	                jsr xt_one_plus
.a33a		20 4c 93	jsr $934c	                jsr xt_swap ; (addr+2 u)
.a33d		20 df 8d	jsr $8ddf	                jsr xt_one_minus
.a340		20 df 8d	jsr $8ddf	                jsr xt_one_minus ; (addr+2 u-2)
.a343		60		rts		                rts
.a344						disasm_jsr:
.a344		ca		dex		                dex
.a345		ca		dex		                dex
.a346		a5 2e		lda $2e		                lda scratch+1
.a348		95 00		sta $00,x	                sta 0,x
.a34a		a5 2f		lda $2f		                lda scratch+2
.a34c		95 01		sta $01,x	                sta 1,x
.a34e		20 42 9b	jsr $9b42	                jsr xt_int_to_name
.a351		b5 00		lda $00,x	                lda 0,x
.a353		15 01		ora $01,x	                ora 1,x
.a355		f0 07		beq $a35e	                beq _disasm_no_nt
.a357		20 e5 9b	jsr $9be5	                jsr xt_name_to_string
.a35a		20 d3 95	jsr $95d3	                jsr xt_type
.a35d		60		rts		                rts
.a35e						_disasm_no_nt:
.a35e		20 3c 87	jsr $873c	                jsr xt_drop ; the 0 indicating no name token
.a361		ca		dex		                dex
.a362		ca		dex		                dex
.a363		a5 2e		lda $2e		                lda scratch+1
.a365		95 00		sta $00,x	                sta 0,x
.a367		a5 2f		lda $2f		                lda scratch+2
.a369		95 01		sta $01,x	                sta 1,x
.a36b		ca		dex		                dex
.a36c		ca		dex		                dex
.a36d		a9 63		lda #$63	                lda #<underflow_1
.a36f		95 00		sta $00,x	                sta 0,x
.a371		a9 d7		lda #$d7	                lda #>underflow_1
.a373		95 01		sta $01,x	                sta 1,x
.a375		20 a1 d6	jsr $d6a1	                jsr compare_16bit
.a378		f0 02		beq $a37c	                beq _disasm_jsr_uflow_check_upper
.a37a		b0 14		bcs $a390	                bcs _disasm_jsr_unknown
.a37c						_disasm_jsr_uflow_check_upper:
.a37c		a9 72		lda #$72	                lda #<underflow_4
.a37e		95 00		sta $00,x	                sta 0,x
.a380		a9 d7		lda #$d7	                lda #>underflow_4
.a382		95 01		sta $01,x	                sta 1,x
.a384		20 a1 d6	jsr $d6a1	                jsr compare_16bit
.a387		f0 02		beq $a38b	                beq _disasm_jsr_soc
.a389		90 05		bcc $a390	                bcc _disasm_jsr_unknown
.a38b						_disasm_jsr_soc:
.a38b		a9 0d		lda #$0d	                lda #str_disasm_sdc
.a38d		20 9f d7	jsr $d79f	                jsr print_string_no_lf  ; "STACK DEPTH CHECK"
.a390						_disasm_jsr_unknown:
.a390		20 c1 94	jsr $94c1	                jsr xt_two_drop
.a393		60		rts		                rts
.a394						disassembler_end:

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/assembler.asm

.a394						assembler:
.a394						xt_asm_adc_h:
.a394		a9 69		lda #$69	                lda #$69
.a396		4c ef a6	jmp $a6ef	                jmp asm_common
.a399						z_asm_adc_h:
.a399						xt_asm_adc_x:
.a399		a9 7d		lda #$7d	                lda #$7D
.a39b		4c ef a6	jmp $a6ef	                jmp asm_common
.a39e						z_asm_adc_x:
.a39e						xt_asm_adc_y:
.a39e		a9 79		lda #$79	                lda #$79
.a3a0		4c ef a6	jmp $a6ef	                jmp asm_common
.a3a3						z_asm_adc_y:
.a3a3						xt_asm_adc_z:
.a3a3		a9 65		lda #$65	                lda #$65
.a3a5		4c ef a6	jmp $a6ef	                jmp asm_common
.a3a8						z_asm_adc_z:
.a3a8						xt_asm_adc_zi:
.a3a8		a9 72		lda #$72	                lda #$72
.a3aa		4c ef a6	jmp $a6ef	                jmp asm_common
.a3ad						z_asm_adc_zi:
.a3ad						xt_asm_adc_ziy:
.a3ad		a9 71		lda #$71	                lda #$71
.a3af		4c ef a6	jmp $a6ef	                jmp asm_common
.a3b2						z_asm_adc_ziy:
.a3b2						xt_asm_adc_zx:
.a3b2		a9 75		lda #$75	                lda #$75
.a3b4		4c ef a6	jmp $a6ef	                jmp asm_common
.a3b7						z_asm_adc_zx:
.a3b7						xt_asm_adc_zxi:
.a3b7		a9 61		lda #$61	                lda #$61
.a3b9		4c ef a6	jmp $a6ef	                jmp asm_common
.a3bc						z_asm_adc_zxi:
.a3bc						xt_asm_and:
.a3bc		a9 2d		lda #$2d	                lda #$2D
.a3be		4c ef a6	jmp $a6ef	                jmp asm_common
.a3c1						z_asm_and:
.a3c1						xt_asm_and_h:
.a3c1		a9 29		lda #$29	                lda #$29
.a3c3		4c ef a6	jmp $a6ef	                jmp asm_common
.a3c6						z_asm_and_h:
.a3c6						xt_asm_and_x:
.a3c6		a9 3d		lda #$3d	                lda #$3D
.a3c8		4c ef a6	jmp $a6ef	                jmp asm_common
.a3cb						z_asm_and_x:
.a3cb						xt_asm_and_y:
.a3cb		a9 39		lda #$39	                lda #$39
.a3cd		4c ef a6	jmp $a6ef	                jmp asm_common
.a3d0						z_asm_and_y:
.a3d0						xt_asm_and_z:
.a3d0		a9 25		lda #$25	                lda #$25
.a3d2		4c ef a6	jmp $a6ef	                jmp asm_common
.a3d5						z_asm_and_z:
.a3d5						xt_asm_and_zi:
.a3d5		a9 32		lda #$32	                lda #$32
.a3d7		4c ef a6	jmp $a6ef	                jmp asm_common
.a3da						z_asm_and_zi:
.a3da						xt_asm_and_ziy:
.a3da		a9 31		lda #$31	                lda #$31
.a3dc		4c ef a6	jmp $a6ef	                jmp asm_common
.a3df						z_asm_and_ziy:
.a3df						xt_asm_and_zx:
.a3df		a9 35		lda #$35	                lda #$35
.a3e1		4c ef a6	jmp $a6ef	                jmp asm_common
.a3e4						z_asm_and_zx:
.a3e4						xt_asm_and_zxi:
.a3e4		a9 21		lda #$21	                lda #$21
.a3e6		4c ef a6	jmp $a6ef	                jmp asm_common
.a3e9						z_asm_and_zxi:
.a3e9						xt_asm_asl:
.a3e9		a9 0e		lda #$0e	                lda #$0E
.a3eb		4c ef a6	jmp $a6ef	                jmp asm_common
.a3ee						z_asm_asl:
.a3ee						xt_asm_asl_a:
.a3ee		a9 0a		lda #$0a	                lda #$0A
.a3f0		4c ef a6	jmp $a6ef	                jmp asm_common
.a3f3						z_asm_asl_a:
.a3f3						xt_asm_asl_x:
.a3f3		a9 1e		lda #$1e	                lda #$1E
.a3f5		4c ef a6	jmp $a6ef	                jmp asm_common
.a3f8						z_asm_asl_x:
.a3f8						xt_asm_asl_z:
.a3f8		a9 06		lda #$06	                lda #$06
.a3fa		4c ef a6	jmp $a6ef	                jmp asm_common
.a3fd						z_asm_asl_z:
.a3fd						xt_asm_asl_zx:
.a3fd		a9 16		lda #$16	                lda #$16
.a3ff		4c ef a6	jmp $a6ef	                jmp asm_common
.a402						z_asm_asl_zx:
.a402						xt_asm_bcc:
.a402		a9 90		lda #$90	                lda #$90
.a404		4c ef a6	jmp $a6ef	                jmp asm_common
.a407						z_asm_bcc:
.a407						xt_asm_bcs:
.a407		a9 b0		lda #$b0	                lda #$B0
.a409		a0 02		ldy #$02	                ldy #2
.a40b		4c ef a6	jmp $a6ef	                jmp asm_common
.a40e						z_asm_bcs:
.a40e						xt_asm_beq:
.a40e		a9 f0		lda #$f0	                lda #$F0
.a410		4c ef a6	jmp $a6ef	                jmp asm_common
.a413						z_asm_beq:
.a413						xt_asm_bit:
.a413		a9 2c		lda #$2c	                lda #$2C
.a415		4c ef a6	jmp $a6ef	                jmp asm_common
.a418						z_asm_bit:
.a418						xt_asm_bit_h:
.a418		a9 89		lda #$89	                lda #$89
.a41a		4c ef a6	jmp $a6ef	                jmp asm_common
.a41d						z_asm_bit_h:
.a41d						xt_asm_bit_x:
.a41d		a9 3c		lda #$3c	                lda #$3C
.a41f		4c ef a6	jmp $a6ef	                jmp asm_common
.a422						z_asm_bit_x:
.a422						xt_asm_bit_z:
.a422		a9 24		lda #$24	                lda #$24
.a424		4c ef a6	jmp $a6ef	                jmp asm_common
.a427						z_asm_bit_z:
.a427						xt_asm_bit_zx:
.a427		a9 34		lda #$34	                lda #$34
.a429		4c ef a6	jmp $a6ef	                jmp asm_common
.a42c						z_asm_bit_zx:
.a42c						xt_asm_bmi:
.a42c		a9 30		lda #$30	                lda #$30
.a42e		4c ef a6	jmp $a6ef	                jmp asm_common
.a431						z_asm_bmi:
.a431						xt_asm_bne:
.a431		a9 d0		lda #$d0	                lda #$D0
.a433		4c ef a6	jmp $a6ef	                jmp asm_common
.a436						z_asm_bne:
.a436						xt_asm_bpl:
.a436		a9 10		lda #$10	                lda #$10
.a438		4c ef a6	jmp $a6ef	                jmp asm_common
.a43b						z_asm_bpl:
.a43b						xt_asm_bra:
.a43b		a9 80		lda #$80	                lda #$80
.a43d		4c ef a6	jmp $a6ef	                jmp asm_common
.a440						z_asm_bra:
.a440						xt_asm_brk:
.a440		a9 00		lda #$00	                lda #$00
.a442		4c ef a6	jmp $a6ef	                jmp asm_common
.a445						z_asm_brk:
.a445						xt_asm_bvc:
.a445		a9 50		lda #$50	                lda #$50
.a447		4c ef a6	jmp $a6ef	                jmp asm_common
.a44a						z_asm_bvc:
.a44a						xt_asm_bvs:
.a44a		a9 70		lda #$70	                lda #$70
.a44c		4c ef a6	jmp $a6ef	                jmp asm_common
.a44f						z_asm_bvs:
.a44f						xt_asm_clc:
.a44f		a9 18		lda #$18	                lda #$18
.a451		4c ef a6	jmp $a6ef	                jmp asm_common
.a454						z_asm_clc:
.a454						xt_asm_cld:
.a454		a9 d8		lda #$d8	                lda #$D8
.a456		4c ef a6	jmp $a6ef	                jmp asm_common
.a459						z_asm_cld:
.a459						xt_asm_cli:
.a459		a9 58		lda #$58	                lda #$58
.a45b		4c ef a6	jmp $a6ef	                jmp asm_common
.a45e						z_asm_cli:
.a45e						xt_asm_clv:
.a45e		a9 b8		lda #$b8	                lda #$B8
.a460		4c ef a6	jmp $a6ef	                jmp asm_common
.a463						z_asm_clv:
.a463						xt_asm_cmp:
.a463		a9 cd		lda #$cd	                lda #$CD
.a465		4c ef a6	jmp $a6ef	                jmp asm_common
.a468						z_asm_cmp:
.a468						xt_asm_cmp_h:
.a468		a9 c9		lda #$c9	                lda #$C9
.a46a		4c ef a6	jmp $a6ef	                jmp asm_common
.a46d						z_asm_cmp_h:
.a46d						xt_asm_cmp_x:
.a46d		a9 dd		lda #$dd	                lda #$DD
.a46f		4c ef a6	jmp $a6ef	                jmp asm_common
.a472						z_asm_cmp_x:
.a472						xt_asm_cmp_y:
.a472		a9 d9		lda #$d9	                lda #$D9
.a474		4c ef a6	jmp $a6ef	                jmp asm_common
.a477						z_asm_cmp_y:
.a477						xt_asm_cmp_z:
.a477		a9 c5		lda #$c5	                lda #$C5
.a479		4c ef a6	jmp $a6ef	                jmp asm_common
.a47c						z_asm_cmp_z:
.a47c						xt_asm_cmp_zi:
.a47c		a9 d2		lda #$d2	                lda #$D2
.a47e		4c ef a6	jmp $a6ef	                jmp asm_common
.a481						z_asm_cmp_zi:
.a481						xt_asm_cmp_ziy:
.a481		a9 d1		lda #$d1	                lda #$D1
.a483		4c ef a6	jmp $a6ef	                jmp asm_common
.a486						z_asm_cmp_ziy:
.a486						xt_asm_cmp_zx:
.a486		a9 d5		lda #$d5	                lda #$D5
.a488		4c ef a6	jmp $a6ef	                jmp asm_common
.a48b						z_asm_cmp_zx:
.a48b						xt_asm_cmp_zxi:
.a48b		a9 c1		lda #$c1	                lda #$C1
.a48d		4c ef a6	jmp $a6ef	                jmp asm_common
.a490						z_asm_cmp_zxi:
.a490						xt_asm_cpx:
.a490		a9 ec		lda #$ec	                lda #$EC
.a492		4c ef a6	jmp $a6ef	                jmp asm_common
.a495						z_asm_cpx:
.a495						xt_asm_cpx_h:
.a495		a9 e0		lda #$e0	                lda #$E0
.a497		4c ef a6	jmp $a6ef	                jmp asm_common
.a49a						z_asm_cpx_h:
.a49a						xt_asm_cpx_z:
.a49a		a9 e4		lda #$e4	                lda #$E4
.a49c		4c ef a6	jmp $a6ef	                jmp asm_common
.a49f						z_asm_cpx_z:
.a49f						xt_asm_cpy:
.a49f		a9 cc		lda #$cc	                lda #$CC
.a4a1		a0 03		ldy #$03	                ldy #3
.a4a3		4c ef a6	jmp $a6ef	                jmp asm_common
.a4a6						z_asm_cpy:
.a4a6						xt_asm_cpy_h:
.a4a6		a9 c0		lda #$c0	                lda #$C0
.a4a8		4c ef a6	jmp $a6ef	                jmp asm_common
.a4ab						z_asm_cpy_h:
.a4ab						xt_asm_cpy_z:
.a4ab		a9 c4		lda #$c4	                lda #$C4
.a4ad		4c ef a6	jmp $a6ef	                jmp asm_common
.a4b0						z_asm_cpy_z:
.a4b0						xt_asm_dec:
.a4b0		a9 ce		lda #$ce	                lda #$CE
.a4b2		4c ef a6	jmp $a6ef	                jmp asm_common
.a4b5						z_asm_dec:
.a4b5						xt_asm_dec_a:
.a4b5		a9 3a		lda #$3a	                lda #$3A
.a4b7		4c ef a6	jmp $a6ef	                jmp asm_common
.a4ba						z_asm_dec_a:
.a4ba						xt_asm_dec_x:
.a4ba		a9 de		lda #$de	                lda #$DE
.a4bc		4c ef a6	jmp $a6ef	                jmp asm_common
.a4bf						z_asm_dec_x:
.a4bf						xt_asm_dec_z:
.a4bf		a9 c6		lda #$c6	                lda #$C6
.a4c1		4c ef a6	jmp $a6ef	                jmp asm_common
.a4c4						z_asm_dec_z:
.a4c4						xt_asm_dec_zx:
.a4c4		a9 d6		lda #$d6	                lda #$D6
.a4c6		4c ef a6	jmp $a6ef	                jmp asm_common
.a4c9						z_asm_dec_zx:
.a4c9						xt_asm_dex:
.a4c9		a9 ca		lda #$ca	                lda #$CA
.a4cb		4c ef a6	jmp $a6ef	                jmp asm_common
.a4ce						z_asm_dex:
.a4ce						xt_asm_dey:
.a4ce		a9 88		lda #$88	                lda #$88
.a4d0		4c ef a6	jmp $a6ef	                jmp asm_common
.a4d3						z_asm_dey:
.a4d3						xt_asm_eor:
.a4d3		a9 4d		lda #$4d	                lda #$4D
.a4d5		4c ef a6	jmp $a6ef	                jmp asm_common
.a4d8						z_asm_eor:
.a4d8						xt_asm_eor_h:
.a4d8		a9 49		lda #$49	                lda #$49
.a4da		4c ef a6	jmp $a6ef	                jmp asm_common
.a4dd						z_asm_eor_h:
.a4dd						xt_asm_eor_x:
.a4dd		a9 5d		lda #$5d	                lda #$5D
.a4df		4c ef a6	jmp $a6ef	                jmp asm_common
.a4e2						z_asm_eor_x:
.a4e2						xt_asm_eor_y:
.a4e2		a9 59		lda #$59	                lda #$59
.a4e4		4c ef a6	jmp $a6ef	                jmp asm_common
.a4e7						z_asm_eor_y:
.a4e7						xt_asm_eor_z:
.a4e7		a9 45		lda #$45	                lda #$45
.a4e9		4c ef a6	jmp $a6ef	                jmp asm_common
.a4ec						z_asm_eor_z:
.a4ec						xt_asm_eor_zi:
.a4ec		a9 52		lda #$52	                lda #$52
.a4ee		4c ef a6	jmp $a6ef	                jmp asm_common
.a4f1						z_asm_eor_zi:
.a4f1						xt_asm_eor_ziy:
.a4f1		a9 51		lda #$51	                lda #$51
.a4f3		4c ef a6	jmp $a6ef	                jmp asm_common
.a4f6						z_asm_eor_ziy:
.a4f6						xt_asm_eor_zx:
.a4f6		a9 55		lda #$55	                lda #$55
.a4f8		4c ef a6	jmp $a6ef	                jmp asm_common
.a4fb						z_asm_eor_zx:
.a4fb						xt_asm_eor_zxi:
.a4fb		a9 41		lda #$41	                lda #$41
.a4fd		4c ef a6	jmp $a6ef	                jmp asm_common
.a500						z_asm_eor_zxi:
.a500						xt_asm_inc:
.a500		a9 ee		lda #$ee	                lda #$EE
.a502		4c ef a6	jmp $a6ef	                jmp asm_common
.a505						z_asm_inc:
.a505						xt_asm_inc_a:
.a505		a9 1a		lda #$1a	                lda #$1A
.a507		4c ef a6	jmp $a6ef	                jmp asm_common
.a50a						z_asm_inc_a:
.a50a						xt_asm_inc_x:
.a50a		a9 fe		lda #$fe	                lda #$FE
.a50c		4c ef a6	jmp $a6ef	                jmp asm_common
.a50f						z_asm_inc_x:
.a50f						xt_asm_inc_z:
.a50f		a9 e6		lda #$e6	                lda #$E6
.a511		4c ef a6	jmp $a6ef	                jmp asm_common
.a514						z_asm_inc_z:
.a514						xt_asm_inc_zx:
.a514		a9 f6		lda #$f6	                lda #$F6
.a516		4c ef a6	jmp $a6ef	                jmp asm_common
.a519						z_asm_inc_zx:
.a519						xt_asm_inx:
.a519		a9 e8		lda #$e8	                lda #$E8
.a51b		4c ef a6	jmp $a6ef	                jmp asm_common
.a51e						z_asm_inx:
.a51e						xt_asm_iny:
.a51e		a9 c8		lda #$c8	                lda #$C8
.a520		4c ef a6	jmp $a6ef	                jmp asm_common
.a523						z_asm_iny:
.a523						xt_asm_jmp:
.a523		a9 4c		lda #$4c	                lda #$4C
.a525		4c ef a6	jmp $a6ef	                jmp asm_common
.a528						z_asm_jmp:
.a528						xt_asm_jmp_i:
.a528		a9 6c		lda #$6c	                lda #$6C
.a52a		4c ef a6	jmp $a6ef	                jmp asm_common
.a52d						z_asm_jmp_i:
.a52d						xt_asm_jmp_xi:
.a52d		a9 7c		lda #$7c	                lda #$7C
.a52f		4c ef a6	jmp $a6ef	                jmp asm_common
.a532						z_asm_jmp_xi:
.a532						xt_asm_jsr:
.a532		a9 20		lda #$20	                lda #$20
.a534		4c ef a6	jmp $a6ef	                jmp asm_common
.a537						z_asm_jsr:
.a537						xt_asm_lda:
.a537		a9 ad		lda #$ad	                lda #$AD
.a539		4c ef a6	jmp $a6ef	                jmp asm_common
.a53c						z_asm_lda:
.a53c						xt_asm_lda_h:
.a53c		a9 a9		lda #$a9	                lda #$A9
.a53e		4c ef a6	jmp $a6ef	                jmp asm_common
.a541						z_asm_lda_h:
.a541						xt_asm_lda_x:
.a541		a9 bd		lda #$bd	                lda #$BD
.a543		4c ef a6	jmp $a6ef	                jmp asm_common
.a546						z_asm_lda_x:
.a546						xt_asm_lda_y:
.a546		a9 b9		lda #$b9	                lda #$B9
.a548		4c ef a6	jmp $a6ef	                jmp asm_common
.a54b						z_asm_lda_y:
.a54b						xt_asm_lda_z:
.a54b		a9 a5		lda #$a5	                lda #$A5
.a54d		4c ef a6	jmp $a6ef	                jmp asm_common
.a550						z_asm_lda_z:
.a550						xt_asm_lda_zi:
.a550		a9 b2		lda #$b2	                lda #$B2
.a552		4c ef a6	jmp $a6ef	                jmp asm_common
.a555						z_asm_lda_zi:
.a555						xt_asm_lda_ziy:
.a555		a9 b1		lda #$b1	                lda #$B1
.a557		4c ef a6	jmp $a6ef	                jmp asm_common
.a55a						z_asm_lda_ziy:
.a55a						xt_asm_lda_zx:
.a55a		a9 b5		lda #$b5	                lda #$B5
.a55c		4c ef a6	jmp $a6ef	                jmp asm_common
.a55f						z_asm_lda_zx:
.a55f						xt_asm_lda_zxi:
.a55f		a9 a1		lda #$a1	                lda #$A1
.a561		4c ef a6	jmp $a6ef	                jmp asm_common
.a564						z_asm_lda_zxi:
.a564						xt_asm_ldx:
.a564		a9 ae		lda #$ae	                lda #$AE
.a566		4c ef a6	jmp $a6ef	                jmp asm_common
.a569						z_asm_ldx:
.a569						xt_asm_ldx_h:
.a569		a9 a2		lda #$a2	                lda #$A2
.a56b		4c ef a6	jmp $a6ef	                jmp asm_common
.a56e						z_asm_ldx_h:
.a56e						xt_asm_ldx_y:
.a56e		a9 be		lda #$be	                lda #$BE
.a570		4c ef a6	jmp $a6ef	                jmp asm_common
.a573						z_asm_ldx_y:
.a573						xt_asm_ldx_z:
.a573		a9 a6		lda #$a6	                lda #$A6
.a575		4c ef a6	jmp $a6ef	                jmp asm_common
.a578						z_asm_ldx_z:
.a578						xt_asm_ldx_zy:
.a578		a9 b6		lda #$b6	                lda #$B6
.a57a		4c ef a6	jmp $a6ef	                jmp asm_common
.a57d						z_asm_ldx_zy:
.a57d						xt_asm_ldy:
.a57d		a9 ac		lda #$ac	                lda #$AC
.a57f		4c ef a6	jmp $a6ef	                jmp asm_common
.a582						z_asm_ldy:
.a582						xt_asm_ldy_h:
.a582		a9 a0		lda #$a0	                lda #$A0
.a584		4c ef a6	jmp $a6ef	                jmp asm_common
.a587						z_asm_ldy_h:
.a587						xt_asm_ldy_x:
.a587		a9 bc		lda #$bc	                lda #$BC
.a589		4c ef a6	jmp $a6ef	                jmp asm_common
.a58c						z_asm_ldy_x:
.a58c						xt_asm_ldy_z:
.a58c		a9 a4		lda #$a4	                lda #$A4
.a58e		4c ef a6	jmp $a6ef	                jmp asm_common
.a591						z_asm_ldy_z:
.a591						xt_asm_ldy_zx:
.a591		a9 b4		lda #$b4	                lda #$B4
.a593		4c ef a6	jmp $a6ef	                jmp asm_common
.a596						z_asm_ldy_zx:
.a596						xt_asm_lsr:
.a596		a9 4e		lda #$4e	                lda #$4E
.a598		4c ef a6	jmp $a6ef	                jmp asm_common
.a59b						z_asm_lsr:
.a59b						xt_asm_lsr_a:
.a59b		a9 4a		lda #$4a	                lda #$4A
.a59d		4c ef a6	jmp $a6ef	                jmp asm_common
.a5a0						z_asm_lsr_a:
.a5a0						xt_asm_lsr_x:
.a5a0		a9 5e		lda #$5e	                lda #$5E
.a5a2		4c ef a6	jmp $a6ef	                jmp asm_common
.a5a5						z_asm_lsr_x:
.a5a5						xt_asm_lsr_z:
.a5a5		a9 46		lda #$46	                lda #$46
.a5a7		4c ef a6	jmp $a6ef	                jmp asm_common
.a5aa						z_asm_lsr_z:
.a5aa						xt_asm_lsr_zx:
.a5aa		a9 56		lda #$56	                lda #$56
.a5ac		4c ef a6	jmp $a6ef	                jmp asm_common
.a5af						z_asm_lsr_zx:
.a5af						xt_asm_nop:
.a5af		a9 ea		lda #$ea	                lda #$EA
.a5b1		4c ef a6	jmp $a6ef	                jmp asm_common
.a5b4						z_asm_nop:
.a5b4						xt_asm_ora:
.a5b4		a9 0d		lda #$0d	                lda #$0D
.a5b6		4c ef a6	jmp $a6ef	                jmp asm_common
.a5b9						z_asm_ora:
.a5b9						xt_asm_ora_h:
.a5b9		a9 09		lda #$09	                lda #$09
.a5bb		4c ef a6	jmp $a6ef	                jmp asm_common
.a5be						z_asm_ora_h:
.a5be						xt_asm_ora_x:
.a5be		a9 1d		lda #$1d	                lda #$1D
.a5c0		4c ef a6	jmp $a6ef	                jmp asm_common
.a5c3						z_asm_ora_x:
.a5c3						xt_asm_ora_y:
.a5c3		a9 19		lda #$19	                lda #$19
.a5c5		4c ef a6	jmp $a6ef	                jmp asm_common
.a5c8						z_asm_ora_y:
.a5c8						xt_asm_ora_z:
.a5c8		a9 05		lda #$05	                lda #$05
.a5ca		4c ef a6	jmp $a6ef	                jmp asm_common
.a5cd						z_asm_ora_z:
.a5cd						xt_asm_ora_zi:
.a5cd		a9 12		lda #$12	                lda #$12
.a5cf		a0 02		ldy #$02	                ldy #2
.a5d1		4c ef a6	jmp $a6ef	                jmp asm_common
.a5d4						z_asm_ora_zi:
.a5d4						xt_asm_ora_ziy:
.a5d4		a9 11		lda #$11	                lda #$11
.a5d6		4c ef a6	jmp $a6ef	                jmp asm_common
.a5d9						z_asm_ora_ziy:
.a5d9						xt_asm_ora_zx:
.a5d9		a9 15		lda #$15	                lda #$15
.a5db		4c ef a6	jmp $a6ef	                jmp asm_common
.a5de						z_asm_ora_zx:
.a5de						xt_asm_ora_zxi:
.a5de		a9 01		lda #$01	                lda #$01
.a5e0		4c ef a6	jmp $a6ef	                jmp asm_common
.a5e3						z_asm_ora_zxi:
.a5e3						xt_asm_pha:
.a5e3		a9 48		lda #$48	                lda #$48
.a5e5		4c ef a6	jmp $a6ef	                jmp asm_common
.a5e8						z_asm_pha:
.a5e8						xt_asm_php:
.a5e8		a9 08		lda #$08	                lda #$08
.a5ea		4c ef a6	jmp $a6ef	                jmp asm_common
.a5ed						z_asm_php:
.a5ed						xt_asm_phx:
.a5ed		a9 da		lda #$da	                lda #$DA
.a5ef		4c ef a6	jmp $a6ef	                jmp asm_common
.a5f2						z_asm_phx:
.a5f2						xt_asm_phy:
.a5f2		a9 5a		lda #$5a	                lda #$5A
.a5f4		4c ef a6	jmp $a6ef	                jmp asm_common
.a5f7						z_asm_phy:
.a5f7						xt_asm_pla:
.a5f7		a9 68		lda #$68	                lda #$68
.a5f9		4c ef a6	jmp $a6ef	                jmp asm_common
.a5fc						z_asm_pla:
.a5fc						xt_asm_plp:
.a5fc		a9 28		lda #$28	                lda #$28
.a5fe		4c ef a6	jmp $a6ef	                jmp asm_common
.a601						z_asm_plp:
.a601						xt_asm_plx:
.a601		a9 fa		lda #$fa	                lda #$FA
.a603		4c ef a6	jmp $a6ef	                jmp asm_common
.a606						z_asm_plx:
.a606						xt_asm_ply:
.a606		a9 7a		lda #$7a	                lda #$7A
.a608		4c ef a6	jmp $a6ef	                jmp asm_common
.a60b						z_asm_ply:
.a60b						xt_asm_rol:
.a60b		a9 2e		lda #$2e	                lda #$2E
.a60d		4c ef a6	jmp $a6ef	                jmp asm_common
.a610						z_asm_rol:
.a610						xt_asm_rol_a:
.a610		a9 2a		lda #$2a	                lda #$2A
.a612		4c ef a6	jmp $a6ef	                jmp asm_common
.a615						z_asm_rol_a:
.a615						xt_asm_rol_x:
.a615		a9 3e		lda #$3e	                lda #$3E
.a617		4c ef a6	jmp $a6ef	                jmp asm_common
.a61a						z_asm_rol_x:
.a61a						xt_asm_rol_z:
.a61a		a9 26		lda #$26	                lda #$26
.a61c		4c ef a6	jmp $a6ef	                jmp asm_common
.a61f						z_asm_rol_z:
.a61f						xt_asm_rol_zx:
.a61f		a9 36		lda #$36	                lda #$36
.a621		4c ef a6	jmp $a6ef	                jmp asm_common
.a624						z_asm_rol_zx:
.a624						xt_asm_ror:
.a624		a9 6e		lda #$6e	                lda #$6E
.a626		4c ef a6	jmp $a6ef	                jmp asm_common
.a629						z_asm_ror:
.a629						xt_asm_ror_a:
.a629		a9 6a		lda #$6a	                lda #$6A
.a62b		4c ef a6	jmp $a6ef	                jmp asm_common
.a62e						z_asm_ror_a:
.a62e						xt_asm_ror_x:
.a62e		a9 7e		lda #$7e	                lda #$7E
.a630		4c ef a6	jmp $a6ef	                jmp asm_common
.a633						z_asm_ror_x:
.a633						xt_asm_ror_z:
.a633		a9 66		lda #$66	                lda #$66
.a635		4c ef a6	jmp $a6ef	                jmp asm_common
.a638						z_asm_ror_z:
.a638						xt_asm_ror_zx:
.a638		a9 76		lda #$76	                lda #$76
.a63a		4c ef a6	jmp $a6ef	                jmp asm_common
.a63d						z_asm_ror_zx:
.a63d						xt_asm_rti:
.a63d		a9 40		lda #$40	                lda #$40
.a63f		4c ef a6	jmp $a6ef	                jmp asm_common
.a642						z_asm_rti:
.a642						xt_asm_rts:
.a642		a9 60		lda #$60	                lda #$60
.a644		4c ef a6	jmp $a6ef	                jmp asm_common
.a647						z_asm_rts:
.a647						xt_asm_sbc:
.a647		a9 ed		lda #$ed	                lda #$ED
.a649		4c ef a6	jmp $a6ef	                jmp asm_common
.a64c						z_asm_sbc:
.a64c						xt_asm_sbc_h:
.a64c		a9 e9		lda #$e9	                lda #$E9
.a64e		4c ef a6	jmp $a6ef	                jmp asm_common
.a651						z_asm_sbc_h:
.a651						xt_asm_sbc_x:
.a651		a9 fd		lda #$fd	                lda #$FD
.a653		4c ef a6	jmp $a6ef	                jmp asm_common
.a656						z_asm_sbc_x:
.a656						xt_asm_sbc_y:
.a656		a9 f9		lda #$f9	                lda #$F9
.a658		4c ef a6	jmp $a6ef	                jmp asm_common
.a65b						z_asm_sbc_y:
.a65b						xt_asm_sbc_z:
.a65b		a9 e5		lda #$e5	                lda #$E5
.a65d		4c ef a6	jmp $a6ef	                jmp asm_common
.a660						z_asm_sbc_z:
.a660						xt_asm_sbc_zi:
.a660		a9 f2		lda #$f2	                lda #$F2
.a662		4c ef a6	jmp $a6ef	                jmp asm_common
.a665						z_asm_sbc_zi:
.a665						xt_asm_sbc_ziy:
.a665		a9 f1		lda #$f1	                lda #$F1
.a667		4c ef a6	jmp $a6ef	                jmp asm_common
.a66a						z_asm_sbc_ziy:
.a66a						xt_asm_sbc_zx:
.a66a		a9 f5		lda #$f5	                lda #$F5
.a66c		4c ef a6	jmp $a6ef	                jmp asm_common
.a66f						z_asm_sbc_zx:
.a66f						xt_asm_sbc_zxi:
.a66f		a9 e1		lda #$e1	                lda #$E1
.a671		80 7c		bra $a6ef	                bra asm_common  ; <-- limit for BRA instead of JMP
.a673						z_asm_sbc_zxi:
.a673						xt_asm_sec:
.a673		a9 38		lda #$38	                lda #$38
.a675		80 78		bra $a6ef	                bra asm_common
.a677						z_asm_sec:
.a677						xt_asm_sed:
.a677		a9 f8		lda #$f8	                lda #$F8
.a679		80 74		bra $a6ef	                bra asm_common
.a67b						z_asm_sed:
.a67b						xt_asm_sei:
.a67b		a9 78		lda #$78	                lda #$78
.a67d		80 70		bra $a6ef	                bra asm_common
.a67f						z_asm_sei:
.a67f						xt_asm_sta:
.a67f		a9 8d		lda #$8d	                lda #$8D
.a681		80 6c		bra $a6ef	                bra asm_common
.a683						z_asm_sta:
.a683						xt_asm_sta_x:
.a683		a9 9d		lda #$9d	                lda #$9D
.a685		80 68		bra $a6ef	                bra asm_common
.a687						z_asm_sta_x:
.a687						xt_asm_sta_y:
.a687		a9 99		lda #$99	                lda #$99
.a689		80 64		bra $a6ef	                bra asm_common
.a68b						z_asm_sta_y:
.a68b						xt_asm_sta_z:
.a68b		a9 85		lda #$85	                lda #$85
.a68d		80 60		bra $a6ef	                bra asm_common
.a68f						z_asm_sta_z:
.a68f						xt_asm_sta_zi:
.a68f		a9 92		lda #$92	                lda #$92
.a691		80 5c		bra $a6ef	                bra asm_common
.a693						z_asm_sta_zi:
.a693						xt_asm_sta_ziy:
.a693		a9 91		lda #$91	                lda #$91
.a695		80 58		bra $a6ef	                bra asm_common
.a697						z_asm_sta_ziy:
.a697						xt_asm_sta_zx:
.a697		a9 95		lda #$95	                lda #$95
.a699		80 54		bra $a6ef	                bra asm_common
.a69b						z_asm_sta_zx:
.a69b						xt_asm_sta_zxi:
.a69b		a9 81		lda #$81	                lda #$81
.a69d		80 50		bra $a6ef	                bra asm_common
.a69f						z_asm_sta_zxi:
.a69f						xt_asm_stx:
.a69f		a9 8e		lda #$8e	                lda #$8E
.a6a1		80 4c		bra $a6ef	                bra asm_common
.a6a3						z_asm_stx:
.a6a3						xt_asm_stx_z:
.a6a3		a9 86		lda #$86	                lda #$86
.a6a5		80 48		bra $a6ef	                bra asm_common
.a6a7						z_asm_stx_z:
.a6a7						xt_asm_stx_zy:
.a6a7		a9 96		lda #$96	                lda #$96
.a6a9		80 44		bra $a6ef	                bra asm_common
.a6ab						z_asm_stx_zy:
.a6ab						xt_asm_sty:
.a6ab		a9 8c		lda #$8c	                lda #$8C
.a6ad		80 40		bra $a6ef	                bra asm_common
.a6af						z_asm_sty:
.a6af						xt_asm_sty_z:
.a6af		a9 84		lda #$84	                lda #$84
.a6b1		80 3c		bra $a6ef	                bra asm_common
.a6b3						z_asm_sty_z:
.a6b3						xt_asm_sty_zx:
.a6b3		a9 94		lda #$94	                lda #$94
.a6b5		80 38		bra $a6ef	                bra asm_common
.a6b7						z_asm_sty_zx:
.a6b7						xt_asm_stz:
.a6b7		a9 9c		lda #$9c	                lda #$9C
.a6b9		80 34		bra $a6ef	                bra asm_common
.a6bb						z_asm_stz:
.a6bb						xt_asm_stz_x:
.a6bb		a9 9e		lda #$9e	                lda #$9E
.a6bd		80 30		bra $a6ef	                bra asm_common
.a6bf						z_asm_stz_x:
.a6bf						xt_asm_stz_z:
.a6bf		a9 64		lda #$64	                lda #$64
.a6c1		80 2c		bra $a6ef	                bra asm_common
.a6c3						z_asm_stz_z:
.a6c3						xt_asm_stz_zx:
.a6c3		a9 74		lda #$74	                lda #$74
.a6c5		80 28		bra $a6ef	                bra asm_common
.a6c7						z_asm_stz_zx:
.a6c7						xt_asm_tax:
.a6c7		a9 aa		lda #$aa	                lda #$AA
.a6c9		80 24		bra $a6ef	                bra asm_common
.a6cb						z_asm_tax:
.a6cb						xt_asm_tay:
.a6cb		a9 a8		lda #$a8	                lda #$A8
.a6cd		80 20		bra $a6ef	                bra asm_common
.a6cf						z_asm_tay:
.a6cf						xt_asm_trb:
.a6cf		a9 1c		lda #$1c	                lda #$1C
.a6d1		80 1c		bra $a6ef	                bra asm_common
.a6d3						z_asm_trb:
.a6d3						xt_asm_trb_z:
.a6d3		a9 14		lda #$14	                lda #$14
.a6d5		80 18		bra $a6ef	                bra asm_common
.a6d7						z_asm_trb_z:
.a6d7						xt_asm_tsb:
.a6d7		a9 0c		lda #$0c	                lda #$0C
.a6d9		80 14		bra $a6ef	                bra asm_common
.a6db						z_asm_tsb:
.a6db						xt_asm_tsb_z:
.a6db		a9 04		lda #$04	                lda #$04
.a6dd		80 10		bra $a6ef	                bra asm_common
.a6df						z_asm_tsb_z:
.a6df						xt_asm_tsx:
.a6df		a9 ba		lda #$ba	                lda #$BA
.a6e1		80 0c		bra $a6ef	                bra asm_common
.a6e3						z_asm_tsx:
.a6e3						xt_asm_txa:
.a6e3		a9 8a		lda #$8a	                lda #$8A
.a6e5		80 08		bra $a6ef	                bra asm_common
.a6e7						z_asm_txa:
.a6e7						xt_asm_txs:
.a6e7		a9 9a		lda #$9a	                lda #$9A
.a6e9		80 04		bra $a6ef	                bra asm_common
.a6eb						z_asm_txs:
.a6eb						xt_asm_tya:
.a6eb		a9 98		lda #$98	                lda #$98
.a6ed		80 00		bra $a6ef	                bra asm_common
.a6ef						z_asm_tya:
.a6ef						asm_common:
.a6ef		a8		tay		                tay
.a6f0		20 9d d5	jsr $d59d	                jsr cmpl_byte_a
.a6f3		a9 63		lda #$63	                lda #<oc_index_table
.a6f5		85 27		sta $27		                sta tmp2
.a6f7		a9 b3		lda #$b3	                lda #>oc_index_table
.a6f9		85 28		sta $28		                sta tmp2+1
.a6fb		98		tya		                tya             ; retrieve opcode
.a6fc		0a		asl a		                asl             ; times two for offset
.a6fd		90 02		bcc $a701	                bcc +
.a6ff		e6 28		inc $28		                inc tmp2+1
.a701						+
.a701		a8		tay		                tay             ; use Y as the index
.a702		b1 27		lda ($27),y	                lda (tmp2),y    ; LSB
.a704		85 29		sta $29		                sta tmp3
.a706		c8		iny		                iny
.a707		b1 27		lda ($27),y	                lda (tmp2),y    ; MSB
.a709		85 2a		sta $2a		                sta tmp3+1
.a70b		b2 29		lda ($29)	                lda (tmp3)      ; get "lengths byte"
.a70d		2a		rol a		                rol
.a70e		2a		rol a		                rol
.a70f		2a		rol a		                rol             ; Three times because we go through Carry
.a710		29 03		and #$03	                and #%00000011
.a712		a8		tay		                tay
.a713		88		dey		                dey
.a714		f0 12		beq $a728	                beq _done
.a716		20 63 d7	jsr $d763	                jsr underflow_1
.a719		b5 00		lda $00,x	                lda 0,x
.a71b		20 9d d5	jsr $d59d	                jsr cmpl_byte_a      ; does not use Y
.a71e		88		dey		                dey
.a71f		f0 05		beq $a726	                beq _done_drop
.a721		b5 01		lda $01,x	                lda 1,x
.a723		20 9d d5	jsr $d59d	                jsr cmpl_byte_a      ; Fall through to _done_drop
.a726						_done_drop:
.a726		e8		inx		                inx
.a727		e8		inx		                inx             ; Fall through to _done
.a728						_done:
.a728		60		rts		                rts             ; Returns to original caller
.a729						xt_asm_push_a:
.a729		a0 00		ldy #$00	                ldy #0
.a72b						_loop:
.a72b		b9 39 a7	lda $a739,y	                lda asm_push_a_data,y
.a72e		c9 ff		cmp #$ff	                cmp #$FF
.a730		f0 06		beq $a738	                beq _done
.a732		20 9d d5	jsr $d59d	                jsr cmpl_byte_a      ; does not change Y
.a735		c8		iny		                iny
.a736		80 f3		bra $a72b	                bra _loop
.a738						_done:
.a738						z_asm_push_a:
.a738		60		rts		                rts
.a739						asm_push_a_data:
>a739		ca ca 95 00 74 01		        .byte $CA, $CA, $95, 00, $74, $01
>a73f		ff				        .byte $FF               ; terminator
.a740						xt_asm_back_jump:
.a740						z_asm_back_jump:
.a740		60		rts		                rts
.a741						xt_asm_back_branch:
.a741		20 02 8a	jsr $8a02	                jsr xt_here             ; ( addr-l addr-h )
.a744		20 e6 8c	jsr $8ce6	                jsr xt_minus            ; ( offset )
.a747		3a		dec a		                dea
.a748		3a		dec a		                dea
.a749						z_asm_back_branch:
.a749		60		rts		                rts
.a74a						assembler_end:

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/ed.asm

.a74a						xt_ed:
.a74a		20 4e a7	jsr $a74e	                jsr ed6502      ; kept in separate file
.a74d		60		rts		z_ed:           rts
=$0035						ed_head  = tmped    ; pointer to first list element (addr) (2 bytes)
=$0037						ed_cur   = tmped+2  ; current line number (1 is first line) (2 bytes)
=$0039						ed_flags = tmped+4  ; Flags used by ed, where
=$003a						ed_base  = tmped+5  ; used to hold BASE and put it back at the end.
.a74e						ed6502:
.a74e		a5 18		lda $18		                lda base
.a750		85 3a		sta $3a		                sta ed_base
.a752		a9 0a		lda #$0a	                lda #10
.a754		85 18		sta $18		                sta base
.a756		64 35		stz $35		                stz ed_head
.a758		64 36		stz $36		                stz ed_head+1
.a75a		64 37		stz $37		                stz ed_cur
.a75c		64 38		stz $38		                stz ed_cur+1
.a75e		64 39		stz $39		                stz ed_flags
.a760		20 8b 9d	jsr $9d8b	                jsr xt_zero
.a763		20 8b 9d	jsr $9d8b	                jsr xt_zero             ; ( addr-t u-t )
.a766		20 fa 84	jsr $84fa	                jsr xt_cr
.a769						ed_input_loop:
.a769		a9 81		lda #$81	                lda #%10000001
.a76b		14 39		trb $39		                trb ed_flags
.a76d		20 48 ac	jsr $ac48	                jsr ed_get_input
.a770		a5 0e		lda $0e		                lda ciblen
.a772		d0 1f		bne $a793	                bne _command_mode
.a774		ca		dex		                dex
.a775		ca		dex		                dex                     ; ( addr-t u-t ? )
.a776		a5 37		lda $37		                lda ed_cur
.a778		95 00		sta $00,x	                sta 0,x
.a77a		a5 38		lda $38		                lda ed_cur+1
.a77c		95 01		sta $01,x	                sta 1,x                 ; ( addr-t u-t u )
.a77e		a9 80		lda #$80	                lda #%10000000
.a780		04 39		tsb $39		                tsb ed_flags
.a782		20 eb 8d	jsr $8deb	                jsr xt_one_plus         ; ( addr-t u-t u+1 )
.a785		20 64 ac	jsr $ac64	                jsr ed_is_valid_line
.a788		b0 03		bcs $a78d	                bcs +
.a78a		4c 38 ac	jmp $ac38	                jmp ed_error_1drop
.a78d						+
.a78d		20 8b 9d	jsr $9d8b	                jsr xt_zero             ; ( addr-t u-t u+1 0 )
.a790		4c 5e a8	jmp $a85e	                jmp _line_number_only_from_external
.a793						_command_mode:
.a793		20 8b 9d	jsr $9d8b	                jsr xt_zero             ; parameter 1 is NOS ( addr-t u-t 0 )
.a796		20 8b 9d	jsr $9d8b	                jsr xt_zero             ; parameter 2 is TOS ( addr-t u-t 0 0 )
.a799						_prefix_dot:
.a799		b2 0c		lda ($0c)	                lda (cib)
.a79b		c9 2e		cmp #$2e	                cmp #'.'                ; ASCII '.'
.a79d		d0 3a		bne $a7d9	                bne _prefix_dollar
.a79f		20 59 ac	jsr $ac59	                jsr ed_have_text
.a7a2		a5 37		lda $37		                lda ed_cur
.a7a4		95 02		sta $02,x	                sta 2,x
.a7a6		a5 38		lda $38		                lda ed_cur+1
.a7a8		95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t cur 0 )
.a7aa		a9 80		lda #$80	                lda #%10000000
.a7ac		04 39		tsb $39		                tsb ed_flags
.a7ae		a5 0e		lda $0e		                lda ciblen
.a7b0		3a		dec a		                dea                     ; sets Z if A was 1
.a7b1		d0 03		bne $a7b6	                bne +
.a7b3		4c 5e a8	jmp $a85e	                jmp _line_number_only_from_external
.a7b6						+
.a7b6		ca		dex		                dex
.a7b7		ca		dex		                dex
.a7b8		ca		dex		                dex
.a7b9		ca		dex		                dex
.a7ba		a5 0c		lda $0c		                lda cib
.a7bc		95 02		sta $02,x	                sta 2,x
.a7be		a5 0d		lda $0d		                lda cib+1
.a7c0		95 03		sta $03,x	                sta 3,x
.a7c2		a5 0e		lda $0e		                lda ciblen
.a7c4		95 00		sta $00,x	                sta 0,x
.a7c6		a5 0f		lda $0f		                lda ciblen+1
.a7c8		95 01		sta $01,x	                sta 1,x
.a7ca		20 df 8d	jsr $8ddf	                jsr xt_one_minus        ; ( addr-t u-t para1 0 addr u-1 )
.a7cd		20 4c 93	jsr $934c	                jsr xt_swap             ; ( addr-t u-t para1 0 u-1 addr )
.a7d0		20 eb 8d	jsr $8deb	                jsr xt_one_plus         ; ( addr-t u-t para1 0 u-1 addr+1 )
.a7d3		20 4c 93	jsr $934c	                jsr xt_swap             ; ( addr-t u-t para1 0 addr+1 u-1 )
.a7d6		4c b6 a8	jmp $a8b6	                jmp _check_for_para2
.a7d9						_prefix_dollar:
.a7d9		b2 0c		lda ($0c)	                lda (cib)
.a7db		c9 24		cmp #$24	                cmp #'$'
.a7dd		d0 1c		bne $a7fb	                bne _prefix_percent
.a7df		20 59 ac	jsr $ac59	                jsr ed_have_text
.a7e2		e8		inx		                inx
.a7e3		e8		inx		                inx                     ; ( addr-t u-t 0 )
.a7e4		20 86 ac	jsr $ac86	                jsr ed_last_line          ; ( addr-t u-t 0 para1 )
.a7e7		20 4c 93	jsr $934c	                jsr xt_swap             ; SWAP ( addr-t u-t para1 0 )
.a7ea		a9 80		lda #$80	                lda #%10000000
.a7ec		04 39		tsb $39		                tsb ed_flags
.a7ee		a5 0e		lda $0e		                lda ciblen
.a7f0		3a		dec a		                dea                     ; sets Z if A was 1
.a7f1		d0 03		bne $a7f6	                bne +
.a7f3		4c 5e a8	jmp $a85e	                jmp _line_number_only_from_external
.a7f6						+
.a7f6		a0 01		ldy #$01	                ldy #01
.a7f8		4c 32 a9	jmp $a932	                jmp _check_command
.a7fb						_prefix_percent:
.a7fb		b2 0c		lda ($0c)	                lda (cib)
.a7fd		c9 25		cmp #$25	                cmp #'%'                ; ASCII '%'
.a7ff		f0 04		beq $a805	                beq _whole_text
.a801		c9 2c		cmp #$2c	                cmp #','                ; ASCII ','
.a803		d0 17		bne $a81c	                bne _prefix_semicolon
.a805						_whole_text:
.a805		20 59 ac	jsr $ac59	                jsr ed_have_text
.a808		a9 01		lda #$01	                lda #01
.a80a		95 02		sta $02,x	                sta 2,x                 ; LSB of NOS is para 1
.a80c		74 03		stz $03,x	                stz 3,x                 ; ( addr-t u-t para1 0 )
.a80e						_semicolon_entry:
.a80e		e8		inx		                inx
.a80f		e8		inx		                inx                     ; DROP ( addr-t u-t para1 )
.a810		20 86 ac	jsr $ac86	                jsr ed_last_line          ; ( addr-t u-t para1 para2 )
.a813		a9 80		lda #$80	                lda #%10000000
.a815		04 39		tsb $39		                tsb ed_flags
.a817		a0 01		ldy #$01	                ldy #01
.a819		4c 32 a9	jmp $a932	                jmp _check_command
.a81c						_prefix_semicolon:
.a81c		b2 0c		lda ($0c)	                lda (cib)
.a81e		c9 3b		cmp #$3b	                cmp #';'                ; ASCII ';'
.a820		d0 0d		bne $a82f	                bne _prefix_number
.a822		20 59 ac	jsr $ac59	                jsr ed_have_text
.a825		a5 37		lda $37		                lda ed_cur
.a827		95 02		sta $02,x	                sta 2,x
.a829		a5 38		lda $38		                lda ed_cur+1
.a82b		95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t cur 0 )
.a82d		80 df		bra $a80e	                bra _semicolon_entry
.a82f						_prefix_number:
.a82f		20 8b 9d	jsr $9d8b	                jsr xt_zero
.a832		20 8b 9d	jsr $9d8b	                jsr xt_zero             ; ( addr-t u-t 0 0 0 0 )
.a835		ca		dex		                dex
.a836		ca		dex		                dex
.a837		ca		dex		                dex
.a838		ca		dex		                dex                     ; ( addr-t u-t 0 0 0 0 ? ? )
.a839		a5 0c		lda $0c		                lda cib
.a83b		95 02		sta $02,x	                sta 2,x
.a83d		a5 0d		lda $0d		                lda cib+1
.a83f		95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t 0 0 0 0 cib ? )
.a841		a5 0e		lda $0e		                lda ciblen
.a843		95 00		sta $00,x	                sta 0,x
.a845		a5 0f		lda $0f		                lda ciblen+1
.a847		95 01		sta $01,x	                sta 1,x                 ; ( addr-t u-t 0 0 0 0 cib ciblen )
.a849		20 ea 93	jsr $93ea	                jsr xt_to_number        ; ( addr-t u-t 0 0 ud addr2 u2 )
.a84c		b5 00		lda $00,x	                lda 0,x
.a84e		15 01		ora $01,x	                ora 1,x
.a850		d0 24		bne $a876	                bne _have_unconverted_chars
.a852		e8		inx		                inx
.a853		e8		inx		                inx
.a854		e8		inx		                inx
.a855		e8		inx		                inx                     ; 2DROP ( addr-t u-t 0 0 ud )
.a856		20 d4 9d	jsr $9dd4	                jsr xt_d_to_s           ; D>S ( addr-t u-t 0 0 u )
.a859		20 0f 9c	jsr $9c0f	                jsr xt_not_rote         ; -ROT ( addr-t u-t u 0 0 )
.a85c		e8		inx		                inx
.a85d		e8		inx		                inx                     ; ( addr-t u-t u 0 ) drop through
.a85e						_line_number_only_from_external:
.a85e		20 4c 93	jsr $934c	                jsr xt_swap             ; ( addr-t u-t 0 u )
.a861		20 64 ac	jsr $ac64	                jsr ed_is_valid_line
.a864		b0 03		bcs $a869	                bcs +
.a866		4c 36 ac	jmp $ac36	                jmp ed_error_2drop
.a869						+
.a869		20 4c 93	jsr $934c	                jsr xt_swap             ; ( addr-t u-t u 0 )
.a86c		20 f3 ac	jsr $acf3	                jsr ed_para1_to_cur
.a86f		a9 80		lda #$80	                lda #%10000000
.a871		04 39		tsb $39		                tsb ed_flags
.a873		4c 11 ab	jmp $ab11	                jmp ed_cmd_p_from_external
.a876						_have_unconverted_chars:
.a876		20 42 87	jsr $8742	                jsr xt_dup              ; ( addr-t u-t 0 0 ud addr2 u2 u2 )
.a879		ca		dex		                dex
.a87a		ca		dex		                dex                     ; ( addr-t u-t 0 0 ud addr2 u2 u2 ? )
.a87b		a5 0e		lda $0e		                lda ciblen
.a87d		95 00		sta $00,x	                sta 0,x
.a87f		a5 0f		lda $0f		                lda ciblen+1
.a881		95 01		sta $01,x	                sta 1,x                 ; ( addr-t u-t 0 0 ud addr2 u2 u2 ciblen )
.a883		20 7d 88	jsr $887d	                jsr xt_equal            ; ( addr-t u-t 0 0 ud addr2 u2 f )
.a886		b5 00		lda $00,x	                lda 0,x
.a888		15 01		ora $01,x	                ora 1,x
.a88a		f0 0e		beq $a89a	                beq _no_command_yet
.a88c		8a		txa		                txa
.a88d		18		clc		                clc
.a88e		69 0a		adc #$0a	                adc #10
.a890		aa		tax		                tax                     ; ( addr-t u-t 0 0 )
.a891		a9 80		lda #$80	                lda #%10000000
.a893		14 39		trb $39		                trb ed_flags
.a895		a0 00		ldy #$00	                ldy #00
.a897		4c 32 a9	jmp $a932	                jmp _check_command
.a89a						_no_command_yet:
.a89a		e8		inx		                inx
.a89b		e8		inx		                inx                     ; ( ... 0 0 ud addr2 u2 )
.a89c		20 8a 94	jsr $948a	                jsr xt_to_r             ; >R ( ... 0 0 ud addr2 ) (R: u2)
.a89f		20 0f 9c	jsr $9c0f	                jsr xt_not_rote         ; -ROT ( ... 0 0 addr2 ud ) (R: u2)
.a8a2		20 d4 9d	jsr $9dd4	                jsr xt_d_to_s           ; D>S  ( ... 0 0 addr2 para1 ) (R: u2)
.a8a5		b5 00		lda $00,x	                lda 0,x                 ; LSB
.a8a7		95 06		sta $06,x	                sta 6,x
.a8a9		b5 01		lda $01,x	                lda 1,x                 ; MSB
.a8ab		95 07		sta $07,x	                sta 7,x                 ; ( ... para1 0 addr2 para1 ) (R: u2)
.a8ad		e8		inx		                inx
.a8ae		e8		inx		                inx                     ; ( addr-t u-t para1 0 addr2 ) (R: u2)
.a8af		20 f0 8f	jsr $8ff0	                jsr xt_r_from           ; R> ( addr-t u-t para1 0 addr2 u2 ) fall through
.a8b2		a9 80		lda #$80	                lda #%10000000
.a8b4		04 39		tsb $39		                tsb ed_flags
.a8b6						_check_for_para2:
.a8b6		a1 02		lda ($02,x)	                lda (2,x)
.a8b8		c9 2c		cmp #$2c	                cmp #','                ; ASCII code for ',' (comma)
.a8ba		f0 0d		beq $a8c9	                beq _got_comma
.a8bc		38		sec		                sec
.a8bd		a5 0e		lda $0e		                lda ciblen
.a8bf		f5 00		sbc $00,x	                sbc 0,x
.a8c1		a8		tay		                tay
.a8c2		e8		inx		                inx
.a8c3		e8		inx		                inx
.a8c4		e8		inx		                inx
.a8c5		e8		inx		                inx                     ; 2DROP ( addr-t u-t para1 0 )
.a8c6		4c 32 a9	jmp $a932	                jmp _check_command
.a8c9						_got_comma:
.a8c9		f6 02		inc $02,x	                inc 2,x
.a8cb		d0 02		bne $a8cf	                bne +
.a8cd		f6 03		inc $03,x	                inc 3,x                 ; ( addr-t u-t para1 0 addr2+1 u2 )
.a8cf						+
.a8cf		b5 01		lda $01,x	                lda 1,x
.a8d1		f0 02		beq $a8d5	                beq +
.a8d3		d6 01		dec $01,x	                dec 1,x
.a8d5						+
.a8d5		d6 00		dec $00,x	                dec 0,x                 ; ( addr-t u-t para1 0 addr2+1 u2-1 )
.a8d7		a1 02		lda ($02,x)	                lda (2,x)
.a8d9		c9 24		cmp #$24	                cmp #$24                ; ASCII for '$'
.a8db		d0 14		bne $a8f1	                bne _para2_not_dollar
.a8dd		38		sec		                sec
.a8de		a5 0e		lda $0e		                lda ciblen
.a8e0		f5 02		sbc $02,x	                sbc 2,x
.a8e2		a8		tay		                tay
.a8e3		c8		iny		                iny
.a8e4		5a		phy		                phy
.a8e5		8a		txa		                txa
.a8e6		18		clc		                clc
.a8e7		69 06		adc #$06	                adc #06
.a8e9		aa		tax		                tax                     ; ( addr-t u-t para1 )
.a8ea		20 86 ac	jsr $ac86	                jsr ed_last_line          ; ( addr-t u-t para1 para2 )
.a8ed		7a		ply		                ply
.a8ee		4c 32 a9	jmp $a932	                jmp _check_command
.a8f1						_para2_not_dollar:
.a8f1		20 8a 94	jsr $948a	                jsr xt_to_r             ; >R ( ... para1 0 addr2+1 ) (R: u2-1)
.a8f4		20 8b 9d	jsr $9d8b	                jsr xt_zero             ; 0 ( ... para1 0 addr2+1 0 ) (R: u2-1)
.a8f7		20 8b 9d	jsr $9d8b	                jsr xt_zero             ; 0 ( ... para1 0 addr2+1 0 0 ) (R: u2-1)
.a8fa		20 8d 90	jsr $908d	                jsr xt_rot              ; ROT ( ... para1 0 0 0 addr2+1 ) (R: u2-1)
.a8fd		20 f0 8f	jsr $8ff0	                jsr xt_r_from           ; R> ( ... para1 0 0 0 addr2+1 u2-1)
.a900		20 42 87	jsr $8742	                jsr xt_dup              ; DUP ( ... para1 0 0 0 addr2+1 u2-1 u2-1)
.a903		20 8a 94	jsr $948a	                jsr xt_to_r             ; >R ( ... para1 0 0 0 addr2+1 u2-1 ) (R: u2-1)
.a906		20 ea 93	jsr $93ea	                jsr xt_to_number        ; >NUMBER ( ... para1 0 ud addr3 u3 ) (R: u2-1)
.a909		20 42 87	jsr $8742	                jsr xt_dup              ; DUP ( ... para1 0 ud addr3 u3 u3 ) (R: u2-1)
.a90c		20 f0 8f	jsr $8ff0	                jsr xt_r_from           ; R> ( ... para1 0 ud addr3 u3 u3 u2-1 )
.a90f		20 7d 88	jsr $887d	                jsr xt_equal            ; = ( ... para1 0 ud addr3 u3 f )
.a912		b5 00		lda $00,x	                lda 0,x
.a914		15 01		ora $01,x	                ora 1,x
.a916		f0 08		beq $a920	                beq _second_number
.a918		8a		txa		                txa
.a919		18		clc		                clc
.a91a		69 0c		adc #$0c	                adc #12
.a91c		aa		tax		                tax                     ; back to ( addr-t u-t )
.a91d		4c 3a ac	jmp $ac3a	                jmp ed_error
.a920						_second_number:
.a920		e8		inx		                inx
.a921		e8		inx		                inx                     ; ( addr-t u-t para1 0 ud addr3 u3 )
.a922		38		sec		                sec
.a923		a5 0e		lda $0e		                lda ciblen
.a925		f5 00		sbc $00,x	                sbc 0,x
.a927		48		pha		                pha
.a928		20 c1 94	jsr $94c1	                jsr xt_two_drop         ; 2DROP ( addr-t u-t para1 0 ud )
.a92b		20 d4 9d	jsr $9dd4	                jsr xt_d_to_s           ; D>S  ( addr-t u-t para1 0 para2 )
.a92e		20 32 8d	jsr $8d32	                jsr xt_nip              ; NIP ( addr-t u-t para1 para2 )
.a931		7a		ply		                ply
.a932						_check_command:
.a932		24 39		bit $39		                bit ed_flags
.a934		30 08		bmi $a93e	                bmi _check_command_have_arg
.a936		a5 37		lda $37		                lda ed_cur
.a938		95 02		sta $02,x	                sta 2,x
.a93a		a5 38		lda $38		                lda ed_cur+1
.a93c		95 03		sta $03,x	                sta 3,x
.a93e						_check_command_have_arg:
.a93e		b1 0c		lda ($0c),y	                lda (cib),y             ; get mystery char from input
.a940		85 25		sta $25		                sta tmp1
.a942		da		phx		                phx
.a943		a2 00		ldx #$00	                ldx #00
.a945						_cmd_loop:
.a945		bd 1e ad	lda $ad1e,x	                lda ed_cmd_list,x
.a948		f0 07		beq $a951	                beq _illegal_command    ; zero marks end of list
.a94a		c5 25		cmp $25		                cmp tmp1
.a94c		f0 07		beq $a955	                beq _found_cmd
.a94e		e8		inx		                inx
.a94f		80 f4		bra $a945	                bra _cmd_loop
.a951						_illegal_command:
.a951		fa		plx		                plx
.a952		4c 36 ac	jmp $ac36	                jmp ed_error_2drop
.a955						_found_cmd:
.a955		8a		txa		                txa
.a956		0a		asl a		                asl
.a957		aa		tax		                tax                     ; X * 2 for table
.a958		7c 29 ad	jmp ($ad29,x)	                jmp (ed_cmd_table,x)
.a95b						ed_next_command:
.a95b		e8		inx		                inx
.a95c		e8		inx		                inx
.a95d		e8		inx		                inx
.a95e		e8		inx		                inx                     ; ( addr-t u-t ) Fall through
.a95f						_next_command_empty:
.a95f		4c 69 a7	jmp $a769	                jmp ed_input_loop
.a962						ed_all_done:
.a962		64 0e		stz $0e		                stz ciblen
.a964		64 0f		stz $0f		                stz ciblen+1
.a966		20 c1 94	jsr $94c1	                jsr xt_two_drop                 ; 2DROP ( addr-t u-t )
.a969		a5 3a		lda $3a		                lda ed_base
.a96b		85 18		sta $18		                sta base
.a96d		60		rts		                rts
.a96e						ed_cmd_a:
.a96e		fa		plx		                plx
.a96f		e8		inx		                inx
.a970		e8		inx		                inx                     ;  DROP ( addr-t u-t para1 )
.a971						ed_entry_cmd_i:
.a971						ed_cmd_a_have_para:
.a971		20 bc ac	jsr $acbc	                jsr ed_num_to_addr        ;  ( addr-t u-t addr1 )
.a974		20 fa 84	jsr $84fa	                jsr xt_cr
.a977						_next_string_loop:
.a977		20 48 ac	jsr $ac48	                jsr ed_get_input
.a97a		b2 0c		lda ($0c)	                lda (cib)
.a97c		c9 2e		cmp #$2e	                cmp #'.'                ; ASCII for '.'
.a97e		d0 16		bne $a996	                bne _add_line
.a980		a4 0e		ldy $0e		                ldy ciblen
.a982		c0 01		cpy #$01	                cpy #01
.a984		d0 10		bne $a996	                bne _add_line
.a986		a4 0f		ldy $0f		                ldy ciblen+1
.a988		d0 0c		bne $a996	                bne _add_line
.a98a		e8		inx		                inx
.a98b		e8		inx		                inx
.a98c		a9 40		lda #$40	                lda #%01000000
.a98e		04 39		tsb $39		                tsb ed_flags
.a990		20 fa 84	jsr $84fa	                jsr xt_cr
.a993		4c 69 a7	jmp $a769	                jmp ed_input_loop
.a996						_add_line:
.a996		20 42 87	jsr $8742	                jsr xt_dup              ; DUP ( addr-t u-t addr1 addr1 )
.a999		20 02 8a	jsr $8a02	                jsr xt_here             ; HERE ( addr-t u-t addr1 addr1 here )
.a99c		20 4c 93	jsr $934c	                jsr xt_swap             ; SWAP ( addr-t u-t addr1 here addr1 )
.a99f		20 01 89	jsr $8901	                jsr xt_fetch            ; @  ( addr-t u-t addr1 here addr2 )
.a9a2		20 cf 83	jsr $83cf	                jsr xt_comma            ; ,  ( addr-t u-t addr1 here )
.a9a5		20 a7 94	jsr $94a7	                jsr xt_tuck             ; TUCK ( addr-t u-t here addr1 here )
.a9a8		20 4c 93	jsr $934c	                jsr xt_swap             ; SWAP ( addr-t u-t here here addr1 )
.a9ab		20 36 93	jsr $9336	                jsr xt_store            ; ! ( addr-t u-t here )
.a9ae		20 02 8a	jsr $8a02	                jsr xt_here             ; HERE ( addr-t u-t here here2)
.a9b1		a5 00		lda $00		                lda cp
.a9b3		18		clc		                clc
.a9b4		69 04		adc #$04	                adc #04
.a9b6		85 00		sta $00		                sta cp
.a9b8		90 02		bcc $a9bc	                bcc +
.a9ba		e6 01		inc $01		                inc cp+1
.a9bc						+
.a9bc		e6 37		inc $37		                inc ed_cur
.a9be		d0 02		bne $a9c2	                bne +
.a9c0		e6 38		inc $38		                inc ed_cur+1
.a9c2						+
.a9c2		20 02 8a	jsr $8a02	                jsr xt_here     ; HERE ( addr-t u-t here here2 here3 )
.a9c5		20 42 87	jsr $8742	                jsr xt_dup      ; DUP ( addr-t u-t here here2 here3 here3 )
.a9c8		ca		dex		                dex
.a9c9		ca		dex		                dex             ; ( addr-t u-t here here2 here3 here3 ? )
.a9ca		a5 0c		lda $0c		                lda cib
.a9cc		95 00		sta $00,x	                sta 0,x
.a9ce		a5 0d		lda $0d		                lda cib+1
.a9d0		95 01		sta $01,x	                sta 1,x         ; ( addr-t u-t here here2 here3 here3 cib )
.a9d2		20 4c 93	jsr $934c	                jsr xt_swap     ; SWAP ( addr-t u-t here here2 here3 cib here3 )
.a9d5		ca		dex		                dex
.a9d6		ca		dex		                dex             ; ( addr-t u-t here here2 here3 cib here3 ? )
.a9d7		a5 0e		lda $0e		                lda ciblen
.a9d9		95 00		sta $00,x	                sta 0,x
.a9db		a5 0f		lda $0f		                lda ciblen+1
.a9dd		95 01		sta $01,x	                sta 1,x         ; ( addr-t u-t here here2 here3 cib here3 ciblen )
.a9df		20 02 8d	jsr $8d02	                jsr xt_move     ; ( addr-t u-t here here2 here3 )
.a9e2		18		clc		                clc
.a9e3		a5 00		lda $00		                lda cp
.a9e5		65 0e		adc $0e		                adc ciblen
.a9e7		85 00		sta $00		                sta cp
.a9e9		90 06		bcc $a9f1	                bcc +
.a9eb		a5 01		lda $01		                lda cp+1
.a9ed		65 0f		adc $0f		                adc ciblen+1
.a9ef		85 01		sta $01		                sta cp+1
.a9f1						+
.a9f1		20 07 8e	jsr $8e07	                jsr xt_over             ; OVER ( addr-t u-t here here2 here3 here2 )
.a9f4		20 36 93	jsr $9336	                jsr xt_store            ; ! ( addr-t u-t here here2 )
.a9f7		20 eb 8d	jsr $8deb	                jsr xt_one_plus         ; 1+
.a9fa		20 eb 8d	jsr $8deb	                jsr xt_one_plus         ; 1+ ( addr-t u-t here here2+2 )
.a9fd		20 42 87	jsr $8742	                jsr xt_dup              ; DUP ( addr-t u-t here here2+2 here2+2 )
.aa00		a5 0e		lda $0e		                lda ciblen
.aa02		95 02		sta $02,x	                sta 2,x
.aa04		a5 0f		lda $0f		                lda ciblen+1
.aa06		95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t here ciblen here2+2 )
.aa08		20 36 93	jsr $9336	                jsr xt_store            ; ! ( addr-t u-t here )
.aa0b		20 fa 84	jsr $84fa	                jsr xt_cr
.aa0e		4c 77 a9	jmp $a977	                jmp _next_string_loop
.aa11						ed_cmd_d:
.aa11		fa		plx		                plx
.aa12		20 59 ac	jsr $ac59	                jsr ed_have_text
.aa15		20 ae ac	jsr $acae	                jsr ed_no_line_zero
.aa18		b5 00		lda $00,x	                lda 0,x
.aa1a		15 01		ora $01,x	                ora 1,x
.aa1c		d0 08		bne $aa26	                bne +
.aa1e		20 07 8e	jsr $8e07	                jsr xt_over             ; ( addr-t u-t para1 0 para1 )
.aa21		20 63 aa	jsr $aa63	                jsr _cmd_d_common       ; ( addr-t u-t para1 0 )
.aa24		80 33		bra $aa59	                bra _cmd_d_done
.aa26						+
.aa26		20 64 ac	jsr $ac64	                jsr ed_is_valid_line      ; result is in C flag
.aa29		b0 03		bcs $aa2e	                bcs _cmd_d_loop
.aa2b		4c 36 ac	jmp $ac36	                jmp ed_error_2drop
.aa2e						_cmd_d_loop:
.aa2e		20 c9 94	jsr $94c9	                jsr xt_two_dup          ; 2DUP ( addr-t u-t para1 para2 para1 para2 )
.aa31		20 ed 89	jsr $89ed	                jsr xt_greater_than     ; > ( addr-t u-t para1 para2 f )
.aa34		b5 00		lda $00,x	                lda 0,x
.aa36		15 01		ora $01,x	                ora 1,x
.aa38		d0 0d		bne $aa47	                bne _cmd_d_done_with_flag
.aa3a		e8		inx		                inx
.aa3b		e8		inx		                inx                     ; Get rid of the flag from >
.aa3c		20 42 87	jsr $8742	                jsr xt_dup              ; DUP ( addr-t u-t para1 para2 para2 )
.aa3f		20 63 aa	jsr $aa63	                jsr _cmd_d_common       ; ( addr-t u-t para1 para2 )
.aa42		20 df 8d	jsr $8ddf	                jsr xt_one_minus        ; 1- ( addr-t u-t para1 para2-1 )
.aa45		80 e7		bra $aa2e	                bra _cmd_d_loop
.aa47						_cmd_d_done_with_flag:
.aa47		e8		inx		                inx                     ; ( addr-t u-t para1 para2 )
.aa48		e8		inx		                inx
.aa49		b5 02		lda $02,x	                lda 2,x
.aa4b		d0 02		bne $aa4f	                bne +
.aa4d		d6 03		dec $03,x	                dec 3,x
.aa4f						+
.aa4f		d6 02		dec $02,x	                dec 2,x
.aa51		b5 02		lda $02,x	                lda 2,x
.aa53		85 37		sta $37		                sta ed_cur
.aa55		b5 03		lda $03,x	                lda 3,x
.aa57		85 38		sta $38		                sta ed_cur+1            ; drop through to _cmd_d_done
.aa59						_cmd_d_done:
.aa59		a9 40		lda #$40	                lda #%01000000
.aa5b		04 39		tsb $39		                tsb ed_flags
.aa5d		20 fa 84	jsr $84fa	                jsr xt_cr
.aa60		4c 5b a9	jmp $a95b	                jmp ed_next_command
.aa63						_cmd_d_common:
.aa63		20 42 87	jsr $8742	                jsr xt_dup              ; DUP ( addr-t u-t u u )
.aa66		20 bc ac	jsr $acbc	                jsr ed_num_to_addr        ; ( addr-t u-t u addr )
.aa69		20 01 89	jsr $8901	                jsr xt_fetch            ; @ ( addr-t u-t u addr1 )
.aa6c		20 4c 93	jsr $934c	                jsr xt_swap             ; SWAP ( addr-t u-t addr1 u )
.aa6f		20 df 8d	jsr $8ddf	                jsr xt_one_minus        ; 1- ( addr-t u-t addr1 u-1 )
.aa72		20 bc ac	jsr $acbc	                jsr ed_num_to_addr        ; ( addr-t u-t addr1 addr-1 )
.aa75		20 36 93	jsr $9336	                jsr xt_store            ; ! ( addr-t u-t )
.aa78		60		rts		                rts
.aa79						ed_cmd_equ:
.aa79		fa		plx		                plx
.aa7a		a5 35		lda $35		                lda ed_head
.aa7c		05 36		ora $36		                ora ed_head+1
.aa7e		d0 08		bne $aa88	                bne _cmd_equ_have_text
.aa80		ca		dex		                dex
.aa81		ca		dex		                dex
.aa82		74 00		stz $00,x	                stz 0,x
.aa84		74 01		stz $01,x	                stz 1,x                 ; ( addr-t u-t para1 para2 0 )
.aa86		80 21		bra $aaa9	                bra _cmd_equ_done
.aa88						_cmd_equ_have_text:
.aa88		20 ae ac	jsr $acae	                jsr ed_no_line_zero
.aa8b		24 39		bit $39		                bit ed_flags
.aa8d		30 0c		bmi $aa9b	                bmi _cmd_equ_have_para
.aa8f		ca		dex		                dex
.aa90		ca		dex		                dex                     ; ( addr-t u-t para1 para2 ? )
.aa91		a5 37		lda $37		                lda ed_cur
.aa93		95 00		sta $00,x	                sta 0,x
.aa95		a5 38		lda $38		                lda ed_cur+1
.aa97		95 01		sta $01,x	                sta 1,x
.aa99		80 0e		bra $aaa9	                bra _cmd_equ_done       ; ( addr-t u-t para1 para2 cur )
.aa9b						_cmd_equ_have_para:
.aa9b		b5 00		lda $00,x	                lda 0,x
.aa9d		15 01		ora $01,x	                ora 1,x
.aa9f		d0 05		bne $aaa6	                bne _cmd_equ_two_paras
.aaa1		20 07 8e	jsr $8e07	                jsr xt_over             ; ( addr-t u-t para1 para2 para1)
.aaa4		80 03		bra $aaa9	                bra _cmd_equ_done
.aaa6						_cmd_equ_two_paras:
.aaa6		20 42 87	jsr $8742	                jsr xt_dup              ; ( addr-t u-t para1 para2 para2) drop through
.aaa9						_cmd_equ_done:
.aaa9		20 fa 84	jsr $84fa	                jsr xt_cr               ; number goes on new line
.aaac		20 fe 95	jsr $95fe	                jsr xt_u_dot            ; ( addr-t u-t para1 para2 )
.aaaf		20 fa 84	jsr $84fa	                jsr xt_cr
.aab2		4c 5b a9	jmp $a95b	                jmp ed_next_command
.aab5						ed_cmd_f:
.aab5		fa		plx		                plx
.aab6		24 39		bit $39		                bit ed_flags
.aab8		30 17		bmi $aad1	                bmi _cmd_f_have_para
.aaba		20 fa 84	jsr $84fa	                jsr xt_cr
.aabd		20 8a 94	jsr $948a	                jsr xt_to_r             ; >R   ( addr-t u-t 0 ) ( R: 0 )
.aac0		20 8d 90	jsr $908d	                jsr xt_rot              ; ROT  ( u-t 0 addr-t ) ( R: 0 )
.aac3		20 42 87	jsr $8742	                jsr xt_dup              ; DUP  ( u-t 0 addr-t addr-t ) ( R: 0 )
.aac6		20 fe 95	jsr $95fe	                jsr xt_u_dot            ; U.   ( u-t 0 addr-t ) ( R: 0 )
.aac9		20 0f 9c	jsr $9c0f	                jsr xt_not_rote         ; -ROT ( addr-t u-t 0 ) ( R: 0 )
.aacc		20 f0 8f	jsr $8ff0	                jsr xt_r_from           ; R>   ( addr-t u-t 0 0 )
.aacf		80 11		bra $aae2	                bra _cmd_f_done
.aad1						_cmd_f_have_para:
.aad1		20 07 8e	jsr $8e07	                jsr xt_over
.aad4		20 fa 84	jsr $84fa	                jsr xt_cr
.aad7		20 fe 95	jsr $95fe	                jsr xt_u_dot
.aada		b5 02		lda $02,x	                lda 2,x
.aadc		95 06		sta $06,x	                sta 6,x
.aade		b5 03		lda $03,x	                lda 3,x
.aae0		95 07		sta $07,x	                sta 7,x                 ; fall through to _cmd_f_done
.aae2						_cmd_f_done:
.aae2		20 fa 84	jsr $84fa	                jsr xt_cr
.aae5		4c 5b a9	jmp $a95b	                jmp ed_next_command
.aae8						ed_cmd_i:
.aae8		fa		plx		                plx
.aae9		e8		inx		                inx
.aaea		e8		inx		                inx                     ;  DROP ( addr-t u-t para1 )
.aaeb		24 39		bit $39		                bit ed_flags
.aaed		30 08		bmi $aaf7	                bmi _cmd_i_have_para
.aaef		a5 37		lda $37		                lda ed_cur
.aaf1		95 00		sta $00,x	                sta 0,x
.aaf3		a5 38		lda $38		                lda ed_cur+1
.aaf5		95 01		sta $01,x	                sta 1,x                 ;  ( addr-t u-t cur ) drop through
.aaf7						_cmd_i_have_para:
.aaf7		b5 00		lda $00,x	                lda 0,x
.aaf9		15 01		ora $01,x	                ora 1,x
.aafb		f0 09		beq $ab06	                beq _cmd_i_done
.aafd		20 df 8d	jsr $8ddf	                jsr xt_one_minus        ; 1-  ( addr-t u-t para1-1 )
.ab00		20 8b 9d	jsr $9d8b	                jsr xt_zero             ; 0   ( addr-t u-t para1-1 0 )
.ab03		20 ae 8c	jsr $8cae	                jsr xt_max              ; MAX ( addr-t u-t para1-1 | 0 )
.ab06						_cmd_i_done:
.ab06		4c 71 a9	jmp $a971	                jmp ed_entry_cmd_i
.ab09						ed_cmd_n:
.ab09		fa		plx		                plx
.ab0a		a9 01		lda #$01	                lda #%00000001
.ab0c		04 39		tsb $39		                tsb ed_flags
.ab0e		80 05		bra $ab15	                bra ed_cmd_p_entry_for_cmd_n
.ab10						ed_cmd_p:
.ab10		fa		plx		                plx
.ab11						ed_cmd_p_from_external:
.ab11		a9 01		lda #$01	                lda #%00000001
.ab13		14 39		trb $39		                trb ed_flags
.ab15						ed_cmd_p_entry_for_cmd_n:
.ab15		20 59 ac	jsr $ac59	                jsr ed_have_text
.ab18		20 ae ac	jsr $acae	                jsr ed_no_line_zero
.ab1b		20 fa 84	jsr $84fa	                jsr xt_cr
.ab1e		b5 00		lda $00,x	                lda 0,x
.ab20		15 01		ora $01,x	                ora 1,x
.ab22		d0 10		bne $ab34	                bne _cmd_p_loop
.ab24		b5 02		lda $02,x	                lda 2,x
.ab26		85 37		sta $37		                sta ed_cur
.ab28		b5 03		lda $03,x	                lda 3,x
.ab2a		85 38		sta $38		                sta ed_cur+1
.ab2c		20 07 8e	jsr $8e07	                jsr xt_over             ; OVER ( addr-t u-t para1 para2 para1 )
.ab2f		20 5d ab	jsr $ab5d	                jsr _cmd_p_common       ; ( addr-t u-t para1 para2 )
.ab32		80 26		bra $ab5a	                bra _cmd_p_all_done
.ab34						_cmd_p_loop:
.ab34		20 c9 94	jsr $94c9	                jsr xt_two_dup          ; 2DUP ( addr-t u-t para1 para2 para1 para2 )
.ab37		20 ed 89	jsr $89ed	                jsr xt_greater_than     ; > ( addr-t u-t para1 para2 f )
.ab3a		b5 00		lda $00,x	                lda 0,x
.ab3c		15 01		ora $01,x	                ora 1,x
.ab3e		d0 10		bne $ab50	                bne _cmd_p_done
.ab40		e8		inx		                inx
.ab41		e8		inx		                inx                     ; Get rid of the flag from >
.ab42		20 07 8e	jsr $8e07	                jsr xt_over             ; ( addr-t u-t para1 para2 para1 )
.ab45		20 5d ab	jsr $ab5d	                jsr _cmd_p_common       ; ( addr-t u-t para1 para2 )
.ab48		f6 02		inc $02,x	                inc 2,x
.ab4a		d0 02		bne $ab4e	                bne +
.ab4c		f6 03		inc $03,x	                inc 3,x
.ab4e						+
.ab4e		80 e4		bra $ab34	                bra _cmd_p_loop
.ab50						_cmd_p_done:
.ab50		e8		inx		                inx
.ab51		e8		inx		                inx                     ; fall through to _cmp_p_all_done
.ab52		b5 00		lda $00,x	                lda 0,x
.ab54		85 37		sta $37		                sta ed_cur
.ab56		b5 01		lda $01,x	                lda 1,x
.ab58		85 38		sta $38		                sta ed_cur+1
.ab5a						_cmd_p_all_done:
.ab5a		4c 5b a9	jmp $a95b	                jmp ed_next_command
.ab5d						_cmd_p_common:
.ab5d		a5 39		lda $39		                lda ed_flags
.ab5f		4a		lsr a		                lsr                     ; bit 0 now in carry
.ab60		90 0b		bcc $ab6d	                bcc _cmd_p_common_no_num
.ab62		20 42 87	jsr $8742	                jsr xt_dup              ; DUP ( addr-t u-t para1 para1 )
.ab65		20 fe 95	jsr $95fe	                jsr xt_u_dot            ; U. ( addr-t u-t para1 )
.ab68		a9 09		lda #$09	                lda #$09                 ; ASCII for Tab
.ab6a		20 ac 87	jsr $87ac	                jsr emit_a
.ab6d						_cmd_p_common_no_num:
.ab6d		20 bc ac	jsr $acbc	                jsr ed_num_to_addr        ; ( addr-t u-t addr )
.ab70		20 fc ac	jsr $acfc	                jsr ed_print_addr
.ab73		60		rts		                rts
.ab74						ed_cmd_q:
.ab74		fa		plx		                plx
.ab75		24 39		bit $39		                bit ed_flags            ; bit 6 is change flag
.ab77		50 03		bvc $ab7c	                bvc +
.ab79		4c 36 ac	jmp $ac36	                jmp ed_error_2drop
.ab7c						+
.ab7c		4c 62 a9	jmp $a962	                jmp ed_all_done            ; can't fall thru because of PLX
.ab7f						ed_cmd_qq:
.ab7f		fa		plx		                plx
.ab80		4c 62 a9	jmp $a962	                jmp ed_all_done
.ab83						ed_cmd_w:
.ab83		fa		plx		                plx
.ab84		20 59 ac	jsr $ac59	                jsr ed_have_text
.ab87		24 39		bit $39		                bit ed_flags
.ab89		30 13		bmi $ab9e	                bmi _cmd_w_have_para
.ab8b		b5 06		lda $06,x	                lda 6,x
.ab8d		15 07		ora $07,x	                ora 7,x
.ab8f		d0 03		bne $ab94	                bne +
.ab91		4c 36 ac	jmp $ac36	                jmp ed_error_2drop
.ab94						+
.ab94		b5 06		lda $06,x	                lda 6,x
.ab96		95 02		sta $02,x	                sta 2,x
.ab98		b5 07		lda $07,x	                lda 7,x
.ab9a		95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t addr-t ? )
.ab9c		80 08		bra $aba6	                bra _cmd_w_para_ready
.ab9e						_cmd_w_have_para:
.ab9e		b5 02		lda $02,x	                lda 2,x
.aba0		95 06		sta $06,x	                sta 6,x
.aba2		b5 03		lda $03,x	                lda 3,x
.aba4		95 07		sta $07,x	                sta 7,x                 ; drop through to _cmd_w_para_ready
.aba6						_cmd_w_para_ready:
.aba6		a9 35		lda #$35	                lda #<ed_head
.aba8		95 00		sta $00,x	                sta 0,x
.abaa		a9 00		lda #$00	                lda #>ed_head
.abac		95 01		sta $01,x	                sta 1,x                 ; ( addr-t u-t addr-t addr-h )
.abae		20 07 8e	jsr $8e07	                jsr xt_over             ; OVER ( addr-t u-t addr-t addr-h addr-t )
.abb1		20 8a 94	jsr $948a	                jsr xt_to_r             ; >R ( addr-t u-t addr-t addr-h ) ( R: addr-t )
.abb4						_cmd_w_loop:
.abb4		20 01 89	jsr $8901	                jsr xt_fetch            ; @ ( addr-t u-t addr-t addr1 ) ( R: addr-t )
.abb7		b5 00		lda $00,x	                lda 0,x
.abb9		15 01		ora $01,x	                ora 1,x
.abbb		f0 55		beq $ac12	                beq _cmd_w_eol
.abbd		20 c9 94	jsr $94c9	                jsr xt_two_dup          ; 2DUP ( addr-t addr-1 addr-t addr-1 ) ( R: addr-t addr-1 addr-t )
.abc0		20 b3 95	jsr $95b3	                jsr xt_two_to_r         ; 2>R  ( addr-t addr-1 ) (R: ... )
.abc3		20 eb 8d	jsr $8deb	                jsr xt_one_plus         ; 1+ ( addr-t addr1+1 ) (R: ... )
.abc6		20 eb 8d	jsr $8deb	                jsr xt_one_plus         ; 1+ ( addr-t addr1+2 ) (R: ... )
.abc9		20 42 87	jsr $8742	                jsr xt_dup              ; DUP ( addr-t addr1+2 addr1+2 ) ( R: ... )
.abcc		20 01 89	jsr $8901	                jsr xt_fetch            ; @ ( addr-t addr1+2 addr-s ) ( R: ... )
.abcf		20 4c 93	jsr $934c	                jsr xt_swap             ; SWAP ( addr-t addr-s addr1+2 ) ( R: ... )
.abd2		20 eb 8d	jsr $8deb	                jsr xt_one_plus         ; 1+ ( addr-t addr-s addr1+1 ) (R: ... )
.abd5		20 eb 8d	jsr $8deb	                jsr xt_one_plus         ; 1+ ( addr-t addr-s addr1+2 ) (R: ... )
.abd8		20 01 89	jsr $8901	                jsr xt_fetch            ; @ ( addr-t addr-s u-s ) ( R: ... )
.abdb		20 0f 9c	jsr $9c0f	                jsr xt_not_rote         ; -ROT ( u-s addr-t addr-s ) ( R: ... )
.abde		20 4c 93	jsr $934c	                jsr xt_swap             ; SWAP ( u-s addr-s addr-t ) ( R: ... )
.abe1		20 8d 90	jsr $908d	                jsr xt_rot              ; ROT (addr-s addr-t u-s ) ( R: ... )
.abe4		20 42 87	jsr $8742	                jsr xt_dup              ; DUP (addr-s addr-t u-s u-s ) ( R: ... )
.abe7		20 8a 94	jsr $948a	                jsr xt_to_r             ; >R (addr-s addr-t u-s ) ( R: ... u-s )
.abea		20 02 8d	jsr $8d02	                jsr xt_move             ; MOVE ( )( R: addr-t addr-1 addr-t )
.abed		20 f0 8f	jsr $8ff0	                jsr xt_r_from           ; R> ( u-s )  ( R: addr-t addr-h addr-t )
.abf0		20 39 95	jsr $9539	                jsr xt_two_r_from       ; 2R> ( u-s addr-t addr-h ) ( R: addr-t )
.abf3		20 0f 9c	jsr $9c0f	                jsr xt_not_rote         ; -ROT ( addr-h u-s addr-t ) ( R: addr-t )
.abf6		20 55 8f	jsr $8f55	                jsr xt_plus             ; + ( addr-h addr-t1 ) ( R: addr-t )
.abf9		20 42 87	jsr $8742	                jsr xt_dup              ; DUP ( addr-h addr-t1 addr-t1 ) ( R: addr-t )
.abfc		ca		dex		                dex
.abfd		ca		dex		                dex                     ; ( addr-h addr-t1 addr-t1 ? ) ( R: addr-t )
.abfe		a9 0a		lda #$0a	                lda #AscLF              ; ASCII for LF
.ac00		95 00		sta $00,x	                sta 0,x
.ac02		74 01		stz $01,x	                stz 1,x                 ; ( addr-h addr-t1 addr-t1 c ) ( R: addr-t )
.ac04		20 4c 93	jsr $934c	                jsr xt_swap             ; SWAP ( addr-h addr-t1 c addr-t1 ) ( R: addr-t )
.ac07		20 36 93	jsr $9336	                jsr xt_store            ; ! ( addr-h addr-t1 ) ( R: addr-t )
.ac0a		20 eb 8d	jsr $8deb	                jsr xt_one_plus         ; 1+ ( addr-h addr-t1+1 ) ( R: addr-t )
.ac0d		20 4c 93	jsr $934c	                jsr xt_swap             ; SWAP ( addr-t1+1 addr-h ) ( R: addr-t )
.ac10		80 a2		bra $abb4	                bra _cmd_w_loop
.ac12						_cmd_w_eol:
.ac12		20 4c 93	jsr $934c	                jsr xt_swap             ; SWAP ( addr-t u-t addr-n addr-tn ) ( R: addr-t )
.ac15		20 f0 8f	jsr $8ff0	                jsr xt_r_from           ; R> ( addr-t u-t addr-n addr-tn addr-t )
.ac18		20 e6 8c	jsr $8ce6	                jsr xt_minus            ; - ( addr-t u-t addr-n u )
.ac1b		b5 00		lda $00,x	                lda 0,x
.ac1d		95 04		sta $04,x	                sta 4,x
.ac1f		b5 01		lda $01,x	                lda 1,x
.ac21		95 05		sta $05,x	                sta 5,x                 ; ( addr-t u addr-n u )
.ac23		20 fa 84	jsr $84fa	                jsr xt_cr
.ac26		20 42 87	jsr $8742	                jsr xt_dup              ; DUP ( addr-t u addr-n u u )
.ac29		20 fe 95	jsr $95fe	                jsr xt_u_dot            ; U. ( addr-t u addr-n u )
.ac2c		20 fa 84	jsr $84fa	                jsr xt_cr
.ac2f		a9 40		lda #$40	                lda #%01000000
.ac31		14 39		trb $39		                trb ed_flags
.ac33		4c 5b a9	jmp $a95b	                jmp ed_next_command
.ac36						ed_error_2drop:
.ac36		e8		inx		                inx
.ac37		e8		inx		                inx                     ; drop through to _error_1drop
.ac38						ed_error_1drop:
.ac38		e8		inx		                inx
.ac39		e8		inx		                inx                     ; drop through to _error
.ac3a						ed_error:
.ac3a		20 fa 84	jsr $84fa	                jsr xt_cr
.ac3d		a9 3f		lda #$3f	                lda #'?'
.ac3f		20 ac 87	jsr $87ac	                jsr emit_a
.ac42		20 fa 84	jsr $84fa	                jsr xt_cr
.ac45		4c 69 a7	jmp $a769	                jmp ed_input_loop
.ac48						ed_get_input:
.ac48		20 3e 90	jsr $903e	                jsr xt_refill           ;  ( addr-t u-t f )
.ac4b		b5 00		lda $00,x	                lda 0,x
.ac4d		15 01		ora $01,x	                ora 1,x
.ac4f		d0 05		bne $ac56	                bne +
.ac51		7a		ply		                ply
.ac52		7a		ply		                ply
.ac53		4c 38 ac	jmp $ac38	                jmp ed_error_1drop
.ac56						+
.ac56		e8		inx		                inx
.ac57		e8		inx		                inx
.ac58		60		rts		                rts
.ac59						ed_have_text:
.ac59		a5 35		lda $35		                lda ed_head
.ac5b		05 36		ora $36		                ora ed_head+1
.ac5d		d0 04		bne $ac63	                bne +
.ac5f		7a		ply		                ply
.ac60		7a		ply		                ply
.ac61		80 d7		bra $ac3a	                bra ed_error
.ac63						+
.ac63		60		rts		                rts
.ac64						ed_is_valid_line:
.ac64		38		sec		                sec                             ; default is legal line number
.ac65		b5 00		lda $00,x	                lda 0,x
.ac67		15 01		ora $01,x	                ora 1,x
.ac69		f0 19		beq $ac84	                beq _is_valid_line_nope_zero    ; ( n )
.ac6b		20 42 87	jsr $8742	                jsr xt_dup                      ; DUP ( n n )
.ac6e		20 86 ac	jsr $ac86	                jsr ed_last_line                  ; ( n n last )
.ac71		20 4c 93	jsr $934c	                jsr xt_swap                     ; SWAP ( n last n )
.ac74		20 06 8b	jsr $8b06	                jsr xt_less_than                ; < ( n f )
.ac77		b5 00		lda $00,x	                lda 0,x                         ; 0 flag is good
.ac79		15 01		ora $01,x	                ora 1,x
.ac7b		d0 05		bne $ac82	                bne _is_valid_line_too_small
.ac7d		e8		inx		                inx
.ac7e		e8		inx		                inx                     ; DROP flag ( n )
.ac7f		38		sec		                sec                     ; Who knows what's happened to C by now
.ac80		80 03		bra $ac85	                bra _is_valid_line_done ; only one exit from this routine
.ac82						_is_valid_line_too_small:
.ac82		e8		inx		                inx
.ac83		e8		inx		                inx                     ; drop through to _is_valid_line_zero
.ac84						_is_valid_line_nope_zero:
.ac84		18		clc		                clc                     ; drop through to _is_valid_line_done
.ac85						_is_valid_line_done:
.ac85		60		rts		                rts
.ac86						ed_last_line:
.ac86		64 25		stz $25		                stz tmp1
.ac88		64 26		stz $26		                stz tmp1+1
.ac8a		ca		dex		                dex
.ac8b		ca		dex		                dex                     ; ( ? )
.ac8c		a9 35		lda #$35	                lda #<ed_head
.ac8e		95 00		sta $00,x	                sta 0,x
.ac90		a9 00		lda #$00	                lda #>ed_head
.ac92		95 01		sta $01,x	                sta 1,x                 ; ( addr )
.ac94						_last_line_loop:
.ac94		20 01 89	jsr $8901	                jsr xt_fetch            ; ( addr | 0 )
.ac97		b5 00		lda $00,x	                lda 0,x
.ac99		15 01		ora $01,x	                ora 1,x
.ac9b		f0 08		beq $aca5	                beq _last_line_done
.ac9d		e6 25		inc $25		                inc tmp1
.ac9f		d0 02		bne $aca3	                bne +
.aca1		e6 26		inc $26		                inc tmp1+1
.aca3						+
.aca3		80 ef		bra $ac94	                bra _last_line_loop
.aca5						_last_line_done:
.aca5		a5 25		lda $25		                lda tmp1
.aca7		95 00		sta $00,x	                sta 0,x
.aca9		a5 26		lda $26		                lda tmp1+1
.acab		95 01		sta $01,x	                sta 1,x                 ; ( u )
.acad		60		rts		                rts
.acae						ed_no_line_zero:
.acae		b5 02		lda $02,x	                lda 2,x
.acb0		15 03		ora $03,x	                ora 3,x
.acb2		d0 07		bne $acbb	                bne _no_line_zero_done
.acb4		24 39		bit $39		                bit ed_flags
.acb6		10 03		bpl $acbb	                bpl _no_line_zero_done
.acb8		4c 36 ac	jmp $ac36	                jmp ed_error_2drop
.acbb						_no_line_zero_done:
.acbb		60		rts		                rts
.acbc						ed_num_to_addr:
.acbc		ca		dex		                dex
.acbd		ca		dex		                dex                     ; ( u ? )
.acbe		a9 35		lda #$35	                lda #<ed_head
.acc0		95 00		sta $00,x	                sta 0,x
.acc2		a9 00		lda #$00	                lda #>ed_head
.acc4		95 01		sta $01,x	                sta 1,x                 ; ( u addr-h )
.acc6		b5 02		lda $02,x	                lda 2,x
.acc8		15 03		ora $03,x	                ora 3,x
.acca		d0 05		bne $acd1	                bne _num_to_addr_loop
.accc		20 32 8d	jsr $8d32	                jsr xt_nip              ; ( addr-h )
.accf		80 21		bra $acf2	                bra _num_to_addr_done
.acd1						_num_to_addr_loop:
.acd1		20 01 89	jsr $8901	                jsr xt_fetch            ; @ ( u addr1 )
.acd4		b5 00		lda $00,x	                lda 0,x
.acd6		15 01		ora $01,x	                ora 1,x
.acd8		d0 05		bne $acdf	                bne +
.acda		20 32 8d	jsr $8d32	                jsr xt_nip              ; NIP ( addr1 )
.acdd		80 13		bra $acf2	                bra _num_to_addr_done
.acdf						+
.acdf		20 4c 93	jsr $934c	                jsr xt_swap             ; SWAP ( addr1 u )
.ace2		20 df 8d	jsr $8ddf	                jsr xt_one_minus        ; 1- ( addr1 u-1 )
.ace5		b5 00		lda $00,x	                lda 0,x
.ace7		15 01		ora $01,x	                ora 1,x
.ace9		f0 05		beq $acf0	                beq _num_to_addr_finished
.aceb		20 4c 93	jsr $934c	                jsr xt_swap             ; SWAP ( u-1 addr1 )
.acee		80 e1		bra $acd1	                bra _num_to_addr_loop
.acf0						_num_to_addr_finished:
.acf0		e8		inx		                inx
.acf1		e8		inx		                inx                     ; ( addr )
.acf2						_num_to_addr_done:
.acf2		60		rts		                rts
.acf3						ed_para1_to_cur:
.acf3		b5 02		lda $02,x	                lda 2,x
.acf5		85 37		sta $37		                sta ed_cur
.acf7		b5 03		lda $03,x	                lda 3,x
.acf9		85 38		sta $38		                sta ed_cur+1
.acfb		60		rts		                rts
.acfc						ed_print_addr:
.acfc		20 eb 8d	jsr $8deb	                jsr xt_one_plus
.acff		20 eb 8d	jsr $8deb	                jsr xt_one_plus         ; ( addr+2 )
.ad02		20 42 87	jsr $8742	                jsr xt_dup              ; ( addr+2 addr+2 )
.ad05		20 eb 8d	jsr $8deb	                jsr xt_one_plus
.ad08		20 eb 8d	jsr $8deb	                jsr xt_one_plus         ; ( addr+2 addr+4 )
.ad0b		20 01 89	jsr $8901	                jsr xt_fetch            ; ( addr+2 u-s )
.ad0e		20 4c 93	jsr $934c	                jsr xt_swap             ; ( u-s addr+2 )
.ad11		20 01 89	jsr $8901	                jsr xt_fetch            ; ( u-s addr-s )
.ad14		20 4c 93	jsr $934c	                jsr xt_swap             ; ( addr-s u-s )
.ad17		20 d3 95	jsr $95d3	                jsr xt_type
.ad1a		20 fa 84	jsr $84fa	                jsr xt_cr
.ad1d		60		rts		                rts
>ad1e		61 66 69 64 70 6e 3d 77		ed_cmd_list:    .text "afidpn=wqQ", 0
>ad26		71 51 00
.ad29						ed_cmd_table:
>ad29		6e a9 b5 aa e8 aa 11 aa		                .word ed_cmd_a, ed_cmd_f, ed_cmd_i, ed_cmd_d, ed_cmd_p, ed_cmd_n
>ad31		10 ab 09 ab
>ad35		79 aa 83 ab 74 ab 7f ab		                .word ed_cmd_equ, ed_cmd_w, ed_cmd_q, ed_cmd_qq
.ad3d						ed6502_end:

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/block.asm

.ad3d						xt_blk:
.ad3d		a9 04		lda #$04	                lda #blk_offset
.ad3f		4c 1f d6	jmp $d61f	                jmp push_upvar_tos
.ad42						z_blk:
.ad42						xt_blkbuffer:
.ad42		ca		dex		                dex
.ad43		ca		dex		                dex
.ad44		a0 2c		ldy #$2c	                ldy #blkbuffer_offset
.ad46		b1 08		lda ($08),y	                lda (up),y
.ad48		95 00		sta $00,x	                sta 0,x
.ad4a		c8		iny		                iny             ; Move along to the next byte
.ad4b		b1 08		lda ($08),y	                lda (up),y
.ad4d		95 01		sta $01,x	                sta 1,x
.ad4f		60		rts		z_blkbuffer:    rts
.ad50						xt_block:
.ad50		a0 2e		ldy #$2e	                ldy #buffblocknum_offset
.ad52		b1 08		lda ($08),y	                lda (up),y
.ad54		d5 00		cmp $00,x	                cmp 0,x
.ad56		d0 0f		bne $ad67	                bne _not_in_buffer
.ad58		c8		iny		                iny
.ad59		b1 08		lda ($08),y	                lda (up),y
.ad5b		d5 01		cmp $01,x	                cmp 1,x
.ad5d		d0 08		bne $ad67	                bne _not_in_buffer
.ad5f		a0 30		ldy #$30	                ldy #buffstatus_offset
.ad61		b1 08		lda ($08),y	                lda (up),y
.ad63		29 01		and #$01	                and #1          ; Check the in-use flag (bit 0)
.ad65		d0 30		bne $ad97	                bne _done       ; It's already in the buffer and in use.
.ad67						_not_in_buffer:
.ad67		a0 30		ldy #$30	                ldy #buffstatus_offset
.ad69		b1 08		lda ($08),y	                lda (up),y      ; Only bits 0 and 1 are used, so only
.ad6b		c9 03		cmp #$03	                cmp #3          ; LSB is needed.
.ad6d		d0 0c		bne $ad7b	                bne _buffer_available ; Unused or not dirty = available
.ad6f		20 42 ad	jsr $ad42	                jsr xt_blkbuffer
.ad72		20 4c af	jsr $af4c	                jsr xt_buffblocknum
.ad75		20 01 89	jsr $8901	                jsr xt_fetch
.ad78		20 39 af	jsr $af39	                jsr xt_block_write
.ad7b						_buffer_available:
.ad7b		a0 2e		ldy #$2e	                ldy #buffblocknum_offset
.ad7d		b5 00		lda $00,x	                lda 0,x
.ad7f		91 08		sta ($08),y	                sta (up),y
.ad81		c8		iny		                iny
.ad82		b5 01		lda $01,x	                lda 1,x
.ad84		91 08		sta ($08),y	                sta (up),y
.ad86		20 42 ad	jsr $ad42	                jsr xt_blkbuffer
.ad89		20 4c 93	jsr $934c	                jsr xt_swap
.ad8c		20 21 af	jsr $af21	                jsr xt_block_read
.ad8f		a9 01		lda #$01	                lda #1
.ad91		a0 30		ldy #$30	                ldy #buffstatus_offset
.ad93		91 08		sta ($08),y	                sta (up),y
.ad95		ca		dex		                dex
.ad96		ca		dex		                dex
.ad97						_done:
.ad97		a0 2c		ldy #$2c	                ldy #blkbuffer_offset
.ad99		b1 08		lda ($08),y	                lda (up),y
.ad9b		95 00		sta $00,x	                sta 0,x
.ad9d		c8		iny		                iny
.ad9e		b1 08		lda ($08),y	                lda (up),y
.ada0		95 01		sta $01,x	                sta 1,x
.ada2		60		rts		z_block:        rts
.ada3						xt_block_c65_init:
=0						io_blk_status = 0
=0						io_blk_action = 0
=0						io_blk_number = 0
=0						io_blk_buffer = 0
.ada3		a9 ff		lda #$ff	                lda #$ff
.ada5		8d 11 f0	sta $f011	                sta io_blk_status
.ada8		a9 00		lda #$00	                lda #$0
.adaa		8d 10 f0	sta $f010	                sta io_blk_action
.adad		ad 11 f0	lda $f011	                lda io_blk_status      ; $0 if OK, $ff otherwise
.adb0		49 ff		eor #$ff	                eor #$ff            ; invert to forth true/false
.adb2		ca		dex		                dex
.adb3		ca		dex		                dex
.adb4		95 00		sta $00,x	                sta 0,x             ; true ($ff) if OK, false (0) otherwise
.adb6		95 01		sta $01,x	                sta 1,x
.adb8		ca		dex		                dex
.adb9		ca		dex		                dex
.adba		a9 dd		lda #$dd	                lda #<c65_blk_read
.adbc		95 00		sta $00,x	                sta 0,x
.adbe		a9 ad		lda #$ad	                lda #>c65_blk_read
.adc0		95 01		sta $01,x	                sta 1,x
.adc2		20 2f af	jsr $af2f	                jsr xt_block_read_vector
.adc5		20 36 93	jsr $9336	                jsr xt_store
.adc8		ca		dex		                dex
.adc9		ca		dex		                dex
.adca		a9 d9		lda #$d9	                lda #<c65_blk_write
.adcc		95 00		sta $00,x	                sta 0,x
.adce		a9 ad		lda #$ad	                lda #>c65_blk_write
.add0		95 01		sta $01,x	                sta 1,x
.add2		20 47 af	jsr $af47	                jsr xt_block_write_vector
.add5		20 36 93	jsr $9336	                jsr xt_store
.add8						z_block_c65_init:
.add8		60		rts		                rts
.add9		a0 02		ldy #$02	c65_blk_write:  ldy #2
.addb		80 02		bra $addf	                bra c65_blk_rw
.addd		a0 01		ldy #$01	c65_blk_read:   ldy #1
.addf		b5 00		lda $00,x	c65_blk_rw:     lda 0,x                 ; ( addr blk# )
.ade1		8d 12 f0	sta $f012	                sta io_blk_number
.ade4		b5 01		lda $01,x	                lda 1,x
.ade6		8d 13 f0	sta $f013	                sta io_blk_number+1
.ade9		b5 02		lda $02,x	                lda 2,x
.adeb		8d 14 f0	sta $f014	                sta io_blk_buffer
.adee		b5 03		lda $03,x	                lda 3,x
.adf0		8d 15 f0	sta $f015	                sta io_blk_buffer+1
.adf3		8c 10 f0	sty $f010	                sty io_blk_action       ; trigger the r/w
.adf6		e8		inx		                inx                     ; clean up stack
.adf7		e8		inx		                inx
.adf8		e8		inx		                inx
.adf9		e8		inx		                inx
.adfa		60		rts		                rts
.adfb						xt_block_ramdrive_init:
.adfb		20 63 d7	jsr $d763	                jsr underflow_1
.adfe		20 10 a1	jsr $a110	                jsr sliteral_runtime
>ae01		09 ae 18 01			                .word ramdrive_code, ramdrive_code_end-ramdrive_code
.ae05		20 99 89	jsr $8999	                jsr xt_evaluate
.ae08						z_block_ramdrive_init:
.ae08		60		rts		                rts
.ae09						ramdrive_code:
>ae09		62 61 73 65 20 40 20 73		        .text "base @ swap decimal"
>ae11		77 61 70 20 64 65 63 69 6d 61 6c
>ae1c		20 31 30 32 34 20 2a		        .text " 1024 *" ; ( Calculate how many bytes are needed for numblocks blocks )
>ae23		20 64 75 70			        .text " dup"    ; ( Save a copy for formatting it at the end )
>ae27		20 62 75 66 66 65 72 3a		        .text " buffer: ramdrive" ; ( Create ramdrive )
>ae2f		20 72 61 6d 64 72 69 76 65
>ae38		20 3a 20 62 6c 6f 63 6b		        .text " : block-read-ramdrive"  ; ( addr u -- )
>ae40		2d 72 65 61 64 2d 72 61 6d 64 72 69 76 65
>ae4e		20 72 61 6d 64 72 69 76		        .text " ramdrive swap 1024 * + swap 1024 move ;"
>ae56		65 20 73 77 61 70 20 31 30 32 34 20 2a 20 2b 20
>ae66		73 77 61 70 20 31 30 32 34 20 6d 6f 76 65 20 3b
>ae76		20 3a 20 62 6c 6f 63 6b		        .text " : block-write-ramdrive" ; ( addr u -- )
>ae7e		2d 77 72 69 74 65 2d 72 61 6d 64 72 69 76 65
>ae8d		20 72 61 6d 64 72 69 76		        .text " ramdrive swap 1024 * + 1024 move ;"
>ae95		65 20 73 77 61 70 20 31 30 32 34 20 2a 20 2b 20
>aea5		31 30 32 34 20 6d 6f 76 65 20 3b
>aeb0		20 27 20 62 6c 6f 63 6b		        .text " ' block-read-ramdrive block-read-vector !" ; ( Replace I/O vectors )
>aeb8		2d 72 65 61 64 2d 72 61 6d 64 72 69 76 65 20 62
>aec8		6c 6f 63 6b 2d 72 65 61 64 2d 76 65 63 74 6f 72
>aed8		20 21
>aeda		20 27 20 62 6c 6f 63 6b		        .text " ' block-write-ramdrive block-write-vector !"
>aee2		2d 77 72 69 74 65 2d 72 61 6d 64 72 69 76 65 20
>aef2		62 6c 6f 63 6b 2d 77 72 69 74 65 2d 76 65 63 74
>af02		6f 72 20 21
>af06		20 72 61 6d 64 72 69 76		        .text " ramdrive swap blank base !"
>af0e		65 20 73 77 61 70 20 62 6c 61 6e 6b 20 62 61 73
>af1e		65 20 21
.af21						ramdrive_code_end:
.af21						xt_block_read:
.af21		a0 32		ldy #$32	                ldy #blockread_offset
.af23		b1 08		lda ($08),y	                lda (up),y
.af25		85 25		sta $25		                sta tmp1
.af27		c8		iny		                iny
.af28		b1 08		lda ($08),y	                lda (up),y
.af2a		85 26		sta $26		                sta tmp1+1
.af2c		6c 25 00	jmp ($0025)	                jmp (tmp1)
.af2f						z_block_read:
.af2f						xt_block_read_vector:
.af2f		a9 32		lda #$32	                lda #blockread_offset
.af31		4c 1f d6	jmp $d61f	                jmp push_upvar_tos
.af34						z_block_read_vector:
.af34						xt_block_word_error:
.af34		a9 0c		lda #$0c	                lda #err_blockwords
.af36		4c 79 d7	jmp $d779	                jmp error       ; no RTS needed
.af39						z_block_word_error:
.af39						xt_block_write:
.af39		a0 34		ldy #$34	                ldy #blockwrite_offset
.af3b		b1 08		lda ($08),y	                lda (up),y
.af3d		85 25		sta $25		                sta tmp1
.af3f		c8		iny		                iny
.af40		b1 08		lda ($08),y	                lda (up),y
.af42		85 26		sta $26		                sta tmp1+1
.af44		6c 25 00	jmp ($0025)	                jmp (tmp1)
.af47						z_block_write:
.af47						xt_block_write_vector:
.af47		a9 34		lda #$34	                lda #blockwrite_offset
.af49		4c 1f d6	jmp $d61f	                jmp push_upvar_tos
.af4c						z_block_write_vector:
.af4c						xt_buffblocknum:
.af4c		a9 2e		lda #$2e	                lda #buffblocknum_offset
.af4e		4c 1f d6	jmp $d61f	                jmp push_upvar_tos
.af51						z_buffblocknum:
.af51						xt_buffer:
.af51		a0 30		ldy #$30	                ldy #buffstatus_offset
.af53		b1 08		lda ($08),y	                lda (up),y      ; Only bits 0 and 1 are used, so only
.af55		c9 03		cmp #$03	                cmp #3          ; LSB is needed.
.af57		d0 0c		bne $af65	                bne _buffer_available ; Unused or not dirty = available
.af59		20 42 ad	jsr $ad42	                jsr xt_blkbuffer
.af5c		20 4c af	jsr $af4c	                jsr xt_buffblocknum
.af5f		20 01 89	jsr $8901	                jsr xt_fetch
.af62		20 39 af	jsr $af39	                jsr xt_block_write
.af65						_buffer_available:
.af65		a0 2e		ldy #$2e	                ldy #buffblocknum_offset
.af67		b5 00		lda $00,x	                lda 0,x
.af69		91 08		sta ($08),y	                sta (up),y
.af6b		c8		iny		                iny
.af6c		b5 01		lda $01,x	                lda 1,x
.af6e		91 08		sta ($08),y	                sta (up),y
.af70		a9 01		lda #$01	                lda #1
.af72		a0 30		ldy #$30	                ldy #buffstatus_offset
.af74		91 08		sta ($08),y	                sta (up),y
.af76						_done:
.af76		a0 2c		ldy #$2c	                ldy #blkbuffer_offset
.af78		b1 08		lda ($08),y	                lda (up),y
.af7a		95 00		sta $00,x	                sta 0,x
.af7c		c8		iny		                iny
.af7d		b1 08		lda ($08),y	                lda (up),y
.af7f		95 01		sta $01,x	                sta 1,x
.af81		60		rts		z_buffer:       rts
.af82						xt_buffstatus:
.af82		a9 30		lda #$30	                lda #buffstatus_offset
.af84		4c 1f d6	jmp $d61f	                jmp push_upvar_tos
.af87						z_buffstatus:
.af87						xt_empty_buffers:
.af87		a0 30		ldy #$30	                ldy #buffstatus_offset
.af89		a9 00		lda #$00	                lda #0
.af8b		91 08		sta ($08),y	                sta (up),y      ; Only LSB is used.
.af8d						z_empty_buffers:
.af8d		60		rts		                rts
.af8e						xt_flush:
.af8e		20 e9 af	jsr $afe9	                jsr xt_save_buffers
.af91		a0 30		ldy #$30	                ldy #buffstatus_offset
.af93		a9 00		lda #$00	                lda #0
.af95		91 08		sta ($08),y	                sta (up),y      ; Only LSB is used.
.af97						z_flush:
.af97		60		rts		                rts
.af98						xt_list:
.af98		20 63 d7	jsr $d763	                jsr underflow_1
.af9b		20 04 b0	jsr $b004	                jsr xt_scr
.af9e		20 36 93	jsr $9336	                jsr xt_store
.afa1		20 a4 b0	jsr $b0a4	                jsr xt_editor_l
.afa4		60		rts		z_list:         rts
.afa5						xt_load:
.afa5		20 63 d7	jsr $d763	                jsr underflow_1
.afa8		a0 05		ldy #$05	                ldy #blk_offset+1
.afaa		b1 08		lda ($08),y	                lda (up),y
.afac		48		pha		                pha
.afad		88		dey		                dey
.afae		b1 08		lda ($08),y	                lda (up),y
.afb0		48		pha		                pha
.afb1		b5 00		lda $00,x	                lda 0,x
.afb3		91 08		sta ($08),y	                sta (up),y
.afb5		c8		iny		                iny
.afb6		b5 01		lda $01,x	                lda 1,x
.afb8		91 08		sta ($08),y	                sta (up),y
.afba		20 50 ad	jsr $ad50	                jsr xt_block
.afbd		ca		dex		                dex
.afbe		ca		dex		                dex
.afbf		a9 04		lda #$04	                lda #4
.afc1		95 01		sta $01,x	                sta 1,x
.afc3		74 00		stz $00,x	                stz 0,x
.afc5		20 93 89	jsr $8993	                jsr load_evaluate
.afc8		a0 04		ldy #$04	                ldy #blk_offset
.afca		68		pla		                pla
.afcb		91 08		sta ($08),y	                sta (up),y
.afcd		c8		iny		                iny
.afce		68		pla		                pla
.afcf		91 08		sta ($08),y	                sta (up),y
.afd1		88		dey		                dey
.afd2		11 08		ora ($08),y	                ora (up),y
.afd4		f0 12		beq $afe8	                beq _done
.afd6		ca		dex		                dex
.afd7		ca		dex		                dex
.afd8		a0 04		ldy #$04	                ldy #blk_offset
.afda		b1 08		lda ($08),y	                lda (up),y
.afdc		95 00		sta $00,x	                sta 0,x
.afde		c8		iny		                iny
.afdf		b1 08		lda ($08),y	                lda (up),y
.afe1		95 01		sta $01,x	                sta 1,x
.afe3		20 50 ad	jsr $ad50	                jsr xt_block
.afe6		e8		inx		                inx
.afe7		e8		inx		                inx
.afe8						_done:
.afe8		60		rts		z_load:         rts
.afe9						xt_save_buffers:
.afe9		a0 30		ldy #$30	                ldy #buffstatus_offset
.afeb		b1 08		lda ($08),y	                lda (up),y      ; Only bits 0 and 1 are used, so only
.afed		c9 03		cmp #$03	                cmp #3          ; LSB is needed.
.afef		d0 12		bne $b003	                bne _done       ; Either not used or not dirty = done!
.aff1		20 42 ad	jsr $ad42	                jsr xt_blkbuffer
.aff4		20 4c af	jsr $af4c	                jsr xt_buffblocknum
.aff7		20 01 89	jsr $8901	                jsr xt_fetch
.affa		20 39 af	jsr $af39	                jsr xt_block_write
.affd		a9 01		lda #$01	                lda #1
.afff		a0 30		ldy #$30	                ldy #buffstatus_offset
.b001		91 08		sta ($08),y	                sta (up),y
.b003						_done:
.b003		60		rts		z_save_buffers: rts
.b004						xt_scr:
.b004		a9 06		lda #$06	                lda #scr_offset
.b006		4c 1f d6	jmp $d61f	                jmp push_upvar_tos
.b009						z_scr:
.b009						xt_thru:
.b009		20 68 d7	jsr $d768	                jsr underflow_2
.b00c		b5 01		lda $01,x	                lda 1,x
.b00e		48		pha		                pha
.b00f		b5 00		lda $00,x	                lda 0,x
.b011		48		pha		                pha
.b012		e8		inx		                inx
.b013		e8		inx		                inx
.b014						_thru_loop:
.b014		b5 01		lda $01,x	                lda 1,x
.b016		48		pha		                pha
.b017		b5 00		lda $00,x	                lda 0,x
.b019		48		pha		                pha
.b01a		20 a5 af	jsr $afa5	                jsr xt_load
.b01d		68		pla		                pla
.b01e		85 25		sta $25		                sta tmp1
.b020		68		pla		                pla
.b021		85 26		sta $26		                sta tmp1+1
.b023		68		pla		                pla
.b024		85 27		sta $27		                sta tmp2
.b026		68		pla		                pla
.b027		85 28		sta $28		                sta tmp2+1
.b029		c5 26		cmp $26		                cmp tmp1+1
.b02b		d0 08		bne $b035	                bne _next_screen
.b02d		a5 27		lda $27		                lda tmp2        ; Compare the LSB
.b02f		c5 25		cmp $25		                cmp tmp1
.b031		d0 02		bne $b035	                bne _next_screen
.b033		80 18		bra $b04d	                bra _done       ; We just did the last screen.
.b035						_next_screen:
.b035		a5 28		lda $28		                lda tmp2+1
.b037		48		pha		                pha
.b038		a5 27		lda $27		                lda tmp2
.b03a		48		pha		                pha
.b03b		e6 25		inc $25		                inc tmp1
.b03d		d0 02		bne $b041	                bne +
.b03f		e6 26		inc $26		                inc tmp1+1
.b041						+
.b041		ca		dex		                dex
.b042		ca		dex		                dex
.b043		a5 25		lda $25		                lda tmp1
.b045		95 00		sta $00,x	                sta 0,x
.b047		a5 26		lda $26		                lda tmp1+1
.b049		95 01		sta $01,x	                sta 1,x
.b04b		80 c7		bra $b014	                bra _thru_loop
.b04d						_done:
.b04d		60		rts		z_thru:         rts
.b04e						xt_update:
.b04e		a0 30		ldy #$30	                ldy #buffstatus_offset
.b050		b1 08		lda ($08),y	                lda (up),y
.b052		09 02		ora #$02	                ora #2          ; Turn on dirty flag (bit 2)
.b054		91 08		sta ($08),y	                sta (up),y
.b056		60		rts		z_update:       rts

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/editor.asm

.b057						xt_editor_screen_helper:
.b057		20 42 87	jsr $8742	                jsr xt_dup
.b05a		20 04 b0	jsr $b004	                jsr xt_scr
.b05d		20 36 93	jsr $9336	                jsr xt_store
.b060		20 51 af	jsr $af51	                jsr xt_buffer
.b063						z_editor_screen_helper:
.b063		60		rts		                rts
.b064						xt_editor_enter_screen:
.b064		20 57 b0	jsr $b057	                jsr xt_editor_screen_helper
.b067		20 3c 87	jsr $873c	                jsr xt_drop
.b06a		64 35		stz $35		                stz ed_head
.b06c						_prompt_loop:
.b06c		ca		dex		                dex
.b06d		ca		dex		                dex
.b06e		a5 35		lda $35		                lda ed_head
.b070		95 00		sta $00,x	                sta 0,x
.b072		74 01		stz $01,x	                stz 1,x
.b074		20 37 b1	jsr $b137	                jsr xt_editor_o
.b077		e6 35		inc $35		                inc ed_head
.b079		a9 10		lda #$10	                lda #16
.b07b		c5 35		cmp $35		                cmp ed_head
.b07d		d0 ed		bne $b06c	                bne _prompt_loop
.b07f						z_editor_enter_screen:
.b07f		60		rts		                rts
.b080						xt_editor_erase_screen:
.b080		20 57 b0	jsr $b057	                jsr xt_editor_screen_helper
.b083		ca		dex		                dex
.b084		ca		dex		                dex
.b085		74 00		stz $00,x	                stz 0,x
.b087		a9 04		lda #$04	                lda #4          ; 4 in MSB makes 1024 ($400).
.b089		95 01		sta $01,x	                sta 1,x
.b08b		20 99 88	jsr $8899	                jsr xt_blank
.b08e		20 4e b0	jsr $b04e	                jsr xt_update
.b091						z_editor_erase_screen:
.b091		60		rts		                rts
.b092						xt_editor_el:
.b092		20 1e b1	jsr $b11e	                jsr xt_editor_line
.b095		ca		dex		                dex
.b096		ca		dex		                dex
.b097		a9 40		lda #$40	                lda #64
.b099		95 00		sta $00,x	                sta 0,x
.b09b		74 01		stz $01,x	                stz 1,x
.b09d		20 99 88	jsr $8899	                jsr xt_blank
.b0a0		20 4e b0	jsr $b04e	                jsr xt_update
.b0a3		60		rts		z_editor_el:    rts
.b0a4						xt_editor_l:
.b0a4		ca		dex		                dex             ; Put SCR on the stack.
.b0a5		ca		dex		                dex
.b0a6		a0 06		ldy #$06	                ldy #scr_offset
.b0a8		b1 08		lda ($08),y	                lda (up),y
.b0aa		95 00		sta $00,x	                sta 0,x
.b0ac		c8		iny		                iny
.b0ad		b1 08		lda ($08),y	                lda (up),y
.b0af		95 01		sta $01,x	                sta 1,x
.b0b1		20 50 ad	jsr $ad50	                jsr xt_block    ; Get the current screen.
.b0b4		20 fa 84	jsr $84fa	                jsr xt_cr
.b0b7		80 08		bra $b0c1	                bra _after_screen_msg
.b0b9						_screen_msg:
>b0b9		53 63 72 65 65 6e 20 23		                .text "Screen #"
.b0c1						_after_screen_msg:
.b0c1		20 10 a1	jsr $a110	                jsr sliteral_runtime
>b0c4		b9 b0 08 00			                .word _screen_msg, _after_screen_msg-_screen_msg
.b0c8		20 d3 95	jsr $95d3	                jsr xt_type
.b0cb		20 04 b0	jsr $b004	                jsr xt_scr
.b0ce		20 01 89	jsr $8901	                jsr xt_fetch
.b0d1		ca		dex		                dex
.b0d2		ca		dex		                dex
.b0d3		a9 04		lda #$04	                lda #4          ; four spaces
.b0d5		95 00		sta $00,x	                sta 0,x
.b0d7		74 01		stz $01,x	                stz 1,x
.b0d9		20 0a 96	jsr $960a	                jsr xt_u_dot_r
.b0dc		64 29		stz $29		                stz tmp3
.b0de						_line_loop:
.b0de		20 fa 84	jsr $84fa	                jsr xt_cr
.b0e1		ca		dex		                dex
.b0e2		ca		dex		                dex
.b0e3		ca		dex		                dex
.b0e4		ca		dex		                dex
.b0e5		74 03		stz $03,x	                stz 3,x
.b0e7		a5 29		lda $29		                lda tmp3
.b0e9		95 02		sta $02,x	                sta 2,x
.b0eb		74 01		stz $01,x	                stz 1,x
.b0ed		a9 02		lda #$02	                lda #2
.b0ef		95 00		sta $00,x	                sta 0,x
.b0f1		20 0a 96	jsr $960a	                jsr xt_u_dot_r
.b0f4		20 c7 92	jsr $92c7	                jsr xt_space
.b0f7		20 42 87	jsr $8742	                jsr xt_dup
.b0fa		ca		dex		                dex
.b0fb		ca		dex		                dex
.b0fc		a9 40		lda #$40	                lda #64
.b0fe		95 00		sta $00,x	                sta 0,x
.b100		74 01		stz $01,x	                stz 1,x
.b102		20 d3 95	jsr $95d3	                jsr xt_type
.b105		18		clc		                clc
.b106		a9 40		lda #$40	                lda #64
.b108		75 00		adc $00,x	                adc 0,x
.b10a		95 00		sta $00,x	                sta 0,x
.b10c		90 02		bcc $b110	                bcc +
.b10e		f6 01		inc $01,x	                inc 1,x
.b110						+
.b110		e6 29		inc $29		                inc tmp3
.b112		a5 29		lda $29		                lda tmp3
.b114		c9 10		cmp #$10	                cmp #16
.b116		d0 c6		bne $b0de	                bne _line_loop
.b118		20 fa 84	jsr $84fa	                jsr xt_cr
.b11b		e8		inx		                inx
.b11c		e8		inx		                inx
.b11d		60		rts		z_editor_l:            rts
.b11e						xt_editor_line:
.b11e		20 63 d7	jsr $d763	                jsr underflow_1
.b121		a0 06		ldy #$06	                ldy #6          ; *64 is same as left shift 6 times.
.b123						_shift_tos_left:
.b123		16 00		asl $00,x	                asl 0,x         ; Shift TOS to the left
.b125		36 01		rol $01,x	                rol 1,x         ; ROL brings MSb from lower byte.
.b127		88		dey		                dey
.b128		d0 f9		bne $b123	                bne _shift_tos_left
.b12a		20 04 b0	jsr $b004	                jsr xt_scr
.b12d		20 01 89	jsr $8901	                jsr xt_fetch
.b130		20 50 ad	jsr $ad50	                jsr xt_block
.b133		20 55 8f	jsr $8f55	                jsr xt_plus
.b136		60		rts		z_editor_line:  rts
.b137						xt_editor_o:
.b137		20 fa 84	jsr $84fa	                jsr xt_cr
.b13a		20 42 87	jsr $8742	                jsr xt_dup
.b13d		20 56 9d	jsr $9d56	                jsr xt_two
.b140		20 0a 96	jsr $960a	                jsr xt_u_dot_r
.b143		20 c7 92	jsr $92c7	                jsr xt_space
.b146		a9 2a		lda #$2a	                lda #'*'
.b148		20 ac 87	jsr $87ac	                jsr emit_a
.b14b		20 c7 92	jsr $92c7	                jsr xt_space
.b14e		20 1e b1	jsr $b11e	                jsr xt_editor_line
.b151		20 42 87	jsr $8742	                jsr xt_dup      ; Save a copy of the line address for later.
.b154		ca		dex		                dex
.b155		ca		dex		                dex
.b156		a9 40		lda #$40	                lda #64         ; chars/line
.b158		95 00		sta $00,x	                sta 0,x
.b15a		74 01		stz $01,x	                stz 1,x
.b15c		20 e6 80	jsr $80e6	                jsr xt_accept
.b15f		20 42 87	jsr $8742	                jsr xt_dup
.b162		20 0f 9c	jsr $9c0f	                jsr xt_not_rote ; -rot
.b165		20 55 8f	jsr $8f55	                jsr xt_plus
.b168		ca		dex		                dex
.b169		ca		dex		                dex
.b16a		a9 40		lda #$40	                lda #64         ; chars/line
.b16c		95 00		sta $00,x	                sta 0,x
.b16e		74 01		stz $01,x	                stz 1,x
.b170		20 8d 90	jsr $908d	                jsr xt_rot
.b173		20 e6 8c	jsr $8ce6	                jsr xt_minus
.b176		20 99 88	jsr $8899	                jsr xt_blank
.b179		20 4e b0	jsr $b04e	                jsr xt_update
.b17c		60		rts		z_editor_o:     rts

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/wordlist.asm

.b17d						xt_also:
.b17d		20 a8 b1	jsr $b1a8	                jsr xt_get_order
.b180		20 07 8e	jsr $8e07	                jsr xt_over
.b183		20 4c 93	jsr $934c	                jsr xt_swap
.b186		20 eb 8d	jsr $8deb	                jsr xt_one_plus
.b189		20 b1 b2	jsr $b2b1	                jsr xt_set_order
.b18c		60		rts		z_also:         rts
.b18d						xt_definitions:
.b18d		a0 23		ldy #$23	                ldy #search_order_offset    ; Transfer byte variable
.b18f		b1 08		lda ($08),y	                lda (up),y                  ; SEARCH_ORDER[0] to
.b191		a0 08		ldy #$08	                ldy #current_offset         ; byte variable CURRENT.
.b193		91 08		sta ($08),y	                sta (up),y
.b195		60		rts		z_definitions:  rts
.b196						xt_forth:
.b196		a0 23		ldy #$23	                ldy #search_order_offset
.b198		a9 00		lda #$00	                lda #0          ; The WID for Forth is 0.
.b19a		91 08		sta ($08),y	                sta (up),y
.b19c						z_forth:
.b19c		60		rts		                rts
.b19d						xt_get_current:
.b19d		ca		dex		                dex
.b19e		ca		dex		                dex
.b19f		a0 08		ldy #$08	                ldy #current_offset
.b1a1		b1 08		lda ($08),y	                lda (up),y
.b1a3		95 00		sta $00,x	                sta 0,x         ; CURRENT is a byte variable
.b1a5		74 01		stz $01,x	                stz 1,x         ; so the MSB is zero.
.b1a7		60		rts		z_get_current:  rts
.b1a8						xt_get_order:
.b1a8		a0 22		ldy #$22	                ldy #num_order_offset
.b1aa		b1 08		lda ($08),y	                lda (up),y
.b1ac		85 25		sta $25		                sta tmp1
.b1ae		f0 16		beq $b1c6	                beq _done       ; If zero, there are no wordlists.
.b1b0						_loop:
.b1b0		c6 25		dec $25		                dec tmp1        ; Count down by bytes.
.b1b2		a9 23		lda #$23	                lda #search_order_offset
.b1b4		18		clc		                clc
.b1b5		65 25		adc $25		                adc tmp1
.b1b7		a8		tay		                tay
.b1b8		ca		dex		                dex
.b1b9		ca		dex		                dex
.b1ba		b1 08		lda ($08),y	                lda (up),y
.b1bc		95 00		sta $00,x	                sta 0,x         ; Search order array is bytes, so
.b1be		74 01		stz $01,x	                stz 1,x         ; put a zero in the high byte.
.b1c0		a9 00		lda #$00	                lda #0
.b1c2		c5 25		cmp $25		                cmp tmp1
.b1c4		d0 ea		bne $b1b0	                bne _loop
.b1c6						_done:
.b1c6		ca		dex		                dex
.b1c7		ca		dex		                dex
.b1c8		a0 22		ldy #$22	                ldy #num_order_offset
.b1ca		b1 08		lda ($08),y	                lda (up),y
.b1cc		95 00		sta $00,x	                sta 0,x
.b1ce		74 01		stz $01,x	                stz 1,x         ; We only support 8 wordlists.
.b1d0		60		rts		z_get_order:    rts
.b1d1						xt_only:
.b1d1		20 9e 94	jsr $949e	                jsr xt_true
.b1d4		20 b1 b2	jsr $b2b1	                jsr xt_set_order
.b1d7		60		rts		z_only:         rts
.b1d8						xt_order:
.b1d8		20 fa 84	jsr $84fa	                jsr xt_cr
.b1db		20 a8 b1	jsr $b1a8	                jsr xt_get_order        ; ( wid_n ... wid_1 n )
.b1de		b5 00		lda $00,x	                lda 0,x                 ; assumes no more than 255 wordlists
.b1e0		f0 1e		beq $b200	                beq _drop_done
.b1e2						_have_wordlists:
.b1e2		a8		tay		                tay
.b1e3						_loop:
.b1e3		e8		inx		                inx
.b1e4		e8		inx		                inx                     ; DROP, now ( wid_n ... wid_1 )
.b1e5		b5 00		lda $00,x	                lda 0,x
.b1e7		5a		phy		                phy
.b1e8		20 03 b2	jsr $b203	                jsr order_print_wid_string   ; internal helper function
.b1eb		7a		ply		                ply
.b1ec		88		dey		                dey
.b1ed		d0 f4		bne $b1e3	                bne _loop
.b1ef		20 c7 92	jsr $92c7	                jsr xt_space
.b1f2		20 c7 92	jsr $92c7	                jsr xt_space
.b1f5		20 9d b1	jsr $b19d	                jsr xt_get_current      ; ( wid )
.b1f8		b5 00		lda $00,x	                lda 0,x
.b1fa		20 03 b2	jsr $b203	                jsr order_print_wid_string
.b1fd		20 fa 84	jsr $84fa	                jsr xt_cr
.b200						_drop_done:
.b200		e8		inx		                inx
.b201		e8		inx		                inx
.b202						z_order:
.b202		60		rts		                rts
.b203						order_print_wid_string:
.b203		c9 04		cmp #$04	                cmp #4
.b205		90 09		bcc $b210	                bcc _output_string      ; less than 4, print a real string
.b207		ca		dex		                dex
.b208		ca		dex		                dex
.b209		95 00		sta $00,x	                sta 0,x
.b20b		74 01		stz $01,x	                stz 1,x
.b20d		4c fe 95	jmp $95fe	                jmp xt_u_dot            ; JSR/RTS as this routine is not compiled
.b210						_output_string:
.b210		a8		tay		                tay
.b211		b9 17 b2	lda $b217,y	                lda _wid_data,y
.b214		4c 9f d7	jmp $d79f	                jmp print_string_no_lf  ; JSR/RTS as this routine is not compiled
.b217						_wid_data:
>b217		04				        .byte str_wid_forth            ; WID 0: "Forth"
>b218		05				        .byte str_wid_editor           ; WID 1: "Editor"
>b219		06				        .byte str_wid_assembler        ; WID 2: "Assembler"
>b21a		07				        .byte str_wid_root             ; WID 3: "Root"
.b21b						xt_previous:
.b21b		20 a8 b1	jsr $b1a8	                jsr xt_get_order
.b21e		20 32 8d	jsr $8d32	                jsr xt_nip
.b221		20 df 8d	jsr $8ddf	                jsr xt_one_minus
.b224		20 b1 b2	jsr $b2b1	                jsr xt_set_order
.b227		60		rts		z_previous:     rts
.b228						xt_root_wordlist:
.b228		ca		dex		                dex             ; The WID for the Root wordlist is 3.
.b229		ca		dex		                dex
.b22a		a9 03		lda #$03	                lda #3
.b22c		95 00		sta $00,x	                sta 0,x
.b22e		74 01		stz $01,x	                stz 1,x
.b230						z_root_wordlist:
.b230		60		rts		                rts
.b231						xt_search_wordlist:
.b231		20 6d d7	jsr $d76d	                jsr underflow_3
.b234		a5 08		lda $08		                lda up
.b236		18		clc		                clc
.b237		69 0a		adc #$0a	                adc #wordlists_offset
.b239		85 27		sta $27		                sta tmp2
.b23b		a5 09		lda $09		                lda up+1
.b23d		69 00		adc #$00	                adc #0          ; Adding carry
.b23f		85 28		sta $28		                sta tmp2+1
.b241		b5 00		lda $00,x	                lda 0,x
.b243		0a		asl a		                asl             ; Convert wid to offset in cells (x2)
.b244		65 27		adc $27		                adc tmp2
.b246		85 27		sta $27		                sta tmp2
.b248		90 02		bcc $b24c	                bcc +
.b24a		e6 28		inc $28		                inc tmp2+1      ; Propagate carry if needed.
.b24c						+
.b24c		e8		inx		                inx
.b24d		e8		inx		                inx
.b24e		b5 00		lda $00,x	                lda 0,x
.b250		15 01		ora $01,x	                ora 1,x
.b252		f0 4e		beq $b2a2	                beq _done
.b254		a5 27		lda $27		                lda tmp2
.b256		05 28		ora $28		                ora tmp2+1
.b258		f0 48		beq $b2a2	                beq _done
.b25a		b2 27		lda ($27)	                lda (tmp2)              ; nt of first word in Dictionary
.b25c		85 25		sta $25		                sta tmp1
.b25e		e6 27		inc $27		                inc tmp2                ; Move to the upper byte
.b260		d0 02		bne $b264	                bne +
.b262		e6 28		inc $28		                inc tmp2+1
.b264						+
.b264		b2 27		lda ($27)	                lda (tmp2)
.b266		85 26		sta $26		                sta tmp1+1
.b268		20 45 d6	jsr $d645	                jsr find_header_name
.b26b		f0 31		beq $b29e	                beq _fail_done
.b26d		e8		inx		                inx
.b26e		e8		inx		                inx
.b26f		a5 25		lda $25		                lda tmp1
.b271		95 00		sta $00,x	                sta 0,x
.b273		a5 26		lda $26		                lda tmp1+1
.b275		95 01		sta $01,x	                sta 1,x
.b277		20 42 87	jsr $8742	                jsr xt_dup              ; ( nt nt )
.b27a		20 c8 9b	jsr $9bc8	                jsr xt_name_to_int      ; ( nt xt )
.b27d		20 4c 93	jsr $934c	                jsr xt_swap             ; ( xt nt )
.b280		a0 00		ldy #$00	                ldy #0                  ; Prepare flag
.b282		f6 00		inc $00,x	                inc 0,x
.b284		d0 02		bne $b288	                bne +
.b286		f6 01		inc $01,x	                inc 1,x                 ; ( xt nt+1 )
.b288						+
.b288		a1 00		lda ($00,x)	                lda (0,x)               ; ( xt char )
.b28a		29 04		and #$04	                and #IM
.b28c		d0 08		bne $b296	                bne _immediate          ; bit set, we're immediate
.b28e		a9 ff		lda #$ff	                lda #$FF                ; We're not immediate, return -1
.b290		95 00		sta $00,x	                sta 0,x
.b292		95 01		sta $01,x	                sta 1,x
.b294		80 0e		bra $b2a4	                bra _done_nodrop
.b296						_immediate:
.b296		a9 01		lda #$01	                lda #1                  ; We're immediate, return 1
.b298		95 00		sta $00,x	                sta 0,x
.b29a		74 01		stz $01,x	                stz 1,x
.b29c		80 06		bra $b2a4	                bra _done_nodrop
.b29e						_fail_done:
.b29e		74 02		stz $02,x	                stz 2,x         ; failure flag
.b2a0		74 03		stz $03,x	                stz 3,x
.b2a2						_done:
.b2a2		e8		inx		                inx
.b2a3		e8		inx		                inx
.b2a4						_done_nodrop:
.b2a4						z_search_wordlist:
.b2a4		60		rts		                rts
.b2a5						xt_set_current:
.b2a5		20 63 d7	jsr $d763	                jsr underflow_1
.b2a8		a0 08		ldy #$08	                ldy #current_offset
.b2aa		b5 00		lda $00,x	                lda 0,x         ; CURRENT is byte variable
.b2ac		91 08		sta ($08),y	                sta (up),y      ; so only the LSB is used.
.b2ae		e8		inx		                inx
.b2af		e8		inx		                inx
.b2b0		60		rts		z_set_current:  rts
.b2b1						xt_set_order:
.b2b1		a9 ff		lda #$ff	                lda #$FF
.b2b3		d5 01		cmp $01,x	                cmp 1,x
.b2b5		d0 12		bne $b2c9	                bne _start
.b2b7		d5 00		cmp $00,x	                cmp 0,x
.b2b9		d0 0e		bne $b2c9	                bne _start
.b2bb		ca		dex		                dex             ; Make room for the count.
.b2bc		ca		dex		                dex
.b2bd		74 03		stz $03,x	                stz 3,x         ; ROOT-WORDLIST is 3
.b2bf		a9 03		lda #$03	                lda #3
.b2c1		95 02		sta $02,x	                sta 2,x
.b2c3		74 01		stz $01,x	                stz 1,x         ; Count is 1.
.b2c5		a9 01		lda #$01	                lda #1
.b2c7		95 00		sta $00,x	                sta 0,x
.b2c9						_start:
.b2c9		a0 22		ldy #$22	                ldy #num_order_offset
.b2cb		b5 00		lda $00,x	                lda 0,x
.b2cd		91 08		sta ($08),y	                sta (up),y      ; #ORDER is a byte variable.
.b2cf		85 25		sta $25		                sta tmp1        ; Save a copy for zero check and looping.
.b2d1		e8		inx		                inx             ; Drop the count off the data stack.
.b2d2		e8		inx		                inx
.b2d3		a5 25		lda $25		                lda tmp1
.b2d5		f0 0d		beq $b2e4	                beq _done       ; If zero, there are no wordlists.
.b2d7		a0 23		ldy #$23	                ldy #search_order_offset
.b2d9						_loop:
.b2d9		b5 00		lda $00,x	                lda 0,x         ; The search order is a byte array
.b2db		91 08		sta ($08),y	                sta (up),y      ; so only save the LSB
.b2dd		c8		iny		                iny
.b2de		e8		inx		                inx
.b2df		e8		inx		                inx
.b2e0		c6 25		dec $25		                dec tmp1
.b2e2		d0 f5		bne $b2d9	                bne _loop
.b2e4						_done:
.b2e4		60		rts		z_set_order:    rts
.b2e5						xt_to_order:
.b2e5		20 8a 94	jsr $948a	                jsr xt_to_r
.b2e8		20 a8 b1	jsr $b1a8	                jsr xt_get_order
.b2eb		20 f0 8f	jsr $8ff0	                jsr xt_r_from
.b2ee		20 4c 93	jsr $934c	                jsr xt_swap
.b2f1		20 eb 8d	jsr $8deb	                jsr xt_one_plus
.b2f4		20 b1 b2	jsr $b2b1	                jsr xt_set_order
.b2f7		60		rts		z_to_order:     rts
.b2f8						xt_wordlist:
.b2f8		a0 09		ldy #$09	                ldy #num_wordlists_offset
.b2fa		b1 08		lda ($08),y	                lda (up),y      ; This is a byte variable, so only
.b2fc		c9 0c		cmp #$0c	                cmp #max_wordlists
.b2fe		d0 05		bne $b305	                bne _ok
.b300		a9 0b		lda #$0b	                lda #err_wordlist
.b302		4c 79 d7	jmp $d779	                jmp error
.b305						_ok:
.b305		1a		inc a		                ina             ; Increment the wordlist#
.b306		91 08		sta ($08),y	                sta (up),y      ; Save it into byte variable #wordlists
.b308		ca		dex		                dex             ; and put it on the stack.
.b309		ca		dex		                dex
.b30a		95 00		sta $00,x	                sta 0,x
.b30c		74 01		stz $01,x	                stz 1,x         ; 12 is the max, so upper byte is always zero.
.b30e		60		rts		z_wordlist:     rts

;******  Return to file: platform/../words/all.asm


;******  Return to file: platform/../taliforth.asm


;******  Processing file: platform/../definitions.asm

=120						dsp0      = zpage_end-7    ; initial Data Stack Pointer
.b30f						cold_zp_table:
>b30f	0000	00 08				cp:         .word cp0+256+1024      ; Compiler Pointer
>b311	0002	df ba				dp:         .word dictionary_start  ; Dictionary Pointer
>b313	0004	00 00				ip:         .word 0                 ; Instruction Pointer (current xt)
>b315	0006	00 00				workword:   .word 0                 ; nt (not xt!) of word being compiled, except in
>b317	0008	00 03				up:         .word cp0               ; Forth user vars at start of available RAM
>b319	000a	00 00				insrc:      .word 0                 ; input source for SOURCE-ID (0 for keyboard)
>b31b	000c	00 02				cib:        .word buffer0           ; address of current input buffer
>b31d	000e	00 00				ciblen:     .word 0                 ; length of current input buffer
>b31f	0010	00 00				toin:       .word 0                 ; pointer to CIB (>IN in Forth)
>b321	0012	2d f0				output:     .word kernel_putc       ; vector for EMIT
>b323	0014	27 f0				input:      .word kernel_getc       ; vector for KEY
>b325	0016	00 00				havekey:    .word 0                 ; vector for KEY?
>b327	0018	0a 00				base:       .word 10                ; number radix, default decimal
>b329	001a	00 00				state:      .word 0                 ; STATE: -1 compile, 0 interpret
>b32b	001c	00 00				status:     .word 0                 ; internal status used by : :NONAME ; ACCEPT
>b32d	001e					tmpdsp:     .byte ?         ; temporary DSP (X) storage (single byte)
>b32e	001f					loopctrl:   .byte ?         ; Offset and flags for DO/LOOP/+LOOP control.
>b32f	0020					loopidx0    .byte ?         ; cached LSB of current loop index for LOOP (not +LOOP)
=$100						lcbstack = $100
=256						loopindex = lcbstack+0      ; loop control block index for adjusted loopindex
=258						loopfufa  = lcbstack+2      ; loop control block offset for limit fudge factor
>b330	0021					loopleave:  .word ?         ; tmp for LEAVE chaining ;TODO could it use existing tmp?
>b332	0023					tmptos:     .word ?         ; temporary TOS storage
>b334	0025					tmp1:       .word ?         ; temporary storage
>b336	0027					tmp2:       .word ?         ; temporary storage
>b338	0029					tmp3:       .word ?         ; temporary storage (especially for print)
>b33a	002b					tohold:     .word ?         ; pointer for formatted output
>b33c	002d					scratch:    .word ?,?,?,?   ; 8 byte scratchpad (see UM/MOD)
>b344	0035					tmped:      .word ?,?,?     ; temporary for editors
.b32d						cold_zp_table_end:
.b32d						cold_user_table:
>b32d	0000	14 00				nc_limit_offset:        .word 20        ; byte limit for Native Compile size
>b32f	0002	00 00				uf_strip_offset:        .word 0         ; flag to strip underflow detection (0 off)
>b331	0004	00 00				blk_offset:             .word 0         ; BLK
>b333	0006	00 00				scr_offset:             .word 0         ; SCR
=12						max_wordlists = 12    ; Maximum number of wordlists supported (4 built-in, 8 user wordlists)
>b335	0008	00				current_offset:         .byte 0         ; CURRENT = FORTH-WORDLIST (compilation wordlist)
>b336	0009	04				num_wordlists_offset:   .byte 4         ; #WORDLISTS (FORTH EDITOR ASSEMBLER ROOT)
.b337	000a					wordlists_offset:
>b337	000a	df ba				    .word dictionary_start              ; FORTH-WORDLIST
>b339	000c	3e c9				    .word editor_dictionary_start       ; EDITOR-WORDLIST
>b33b	000e	8e c9				    .word assembler_dictionary_start    ; ASSEMBLER-WORDLIST
>b33d	0010	fd c8				    .word root_dictionary_start         ; ROOT-WORDLIST
>b33f	0012	00 00 00 00 00 00 00 00		    .word 0,0,0,0,0,0,0,0               ; Space for 8 User wordlists
>b347	001a	00 00 00 00 00 00 00 00
>b34f	0022	01				num_order_offset:       .byte 1         ; #ORDER (Number of wordlists in search order)
.b350	0023					search_order_offset:
>b350	0023	00 00 00 00 00 00 00 00		    .byte 0,0,0,0,0,0,0,0,0             ; SEARCH-ORDER (9 bytes to keep offsets even)
>b358	002b	00
>b359	002c	00 04				blkbuffer_offset:       .word cp0+256   ; Address of buffer (right after USER vars)
>b35b	002e	00 00				buffblocknum_offset:    .word 0         ; Block number current in buffer
>b35d	0030	00 00				buffstatus_offset:      .word 0         ; Buffer status (bit 0 = used, bit 1 = dirty) (not in use)
>b35f	0032	34 af				blockread_offset:       .word xt_block_word_error   ; Vector to block reading routine
>b361	0034	34 af				blockwrite_offset:      .word xt_block_word_error   ; Vector to block writing routine
.b363						cold_user_table_end:
=$03						AscCC   = $03  ; break (CTRL-c)
=$07						AscBELL = $07  ; bell sound
=$08						AscBS   = $08  ; backspace
=$0a						AscLF   = $0A  ; line feed
=$0d						AscCR   = $0D  ; carriage return
=$1b						AscESC  = $1B  ; escape
=$20						AscSP   = $20  ; space
=$7f						AscDEL  = $7F  ; delete (CTRL-h)
=$10						AscCP   = $10  ; CTRL-p (used to recall previous input history)
=$0e						AscCN   = $0E  ; CTRL-n (used to recall next input history)
=$20						OpJSR   = $20
=$4c						OpJMP   = $4C
=$60						OpRTS   = $60
=$80						OpBRA   = $80
=1						CO = 1  ; Compile Only
=2						AN = 2  ; Always Native Compile
=4						IM = 4  ; Immediate Word
=8						NN = 8  ; Never Native Compile
=16						UF = 16 ; Includes Underflow Check (RESERVED)
=32						HC = 32 ; Word has Code Field Area (CFA)
=79						MAX_LINE_LENGTH  = 79      ; assumes 80 character lines

;******  Return to file: platform/../taliforth.asm


;******  Processing file: platform/../opcodes.asm

.b363						oc_index_table:
>b363		63 b5 67 b5 fb b9 fb b9		        .word oc00, oc01, oc__, oc__, oc04, oc05, oc06, oc__
>b36b		6f b5 75 b5 7b b5 fb b9
>b373		81 b5 85 b5 8b b5 fb b9		        .word oc08, oc09, oc0A, oc__, oc0C, oc0D, oc0E, oc0F
>b37b		91 b5 95 b5 99 b5 9d b5
>b383		a2 b5 a6 b5 ae b5 fb b9		        .word oc10, oc11, oc12, oc__, oc14, oc15, oc16, oc17
>b38b		b5 b5 bb b5 c2 b5 c9 b5
>b393		d0 b5 d4 b5 da b5 fb b9		        .word oc18, oc19, oc1A, oc__, oc1C, oc1D, oc__, oc1F
>b39b		e0 b5 e4 b5 fb b9 ea b5
>b3a3		f0 b5 f4 b5 fb b9 fb b9		        .word oc20, oc21, oc__, oc__, oc24, oc25, oc26, oc27
>b3ab		fc b5 02 b6 08 b6 0e b6
>b3b3		15 b6 19 b6 1f b6 fb b9		        .word oc28, oc29, oc2A, oc__, OC2C, oc2D, oc2E, oc2F
>b3bb		25 b6 29 b6 2e b6 32 b6
>b3c3		37 b6 3b b6 43 b6 fb b9		        .word oc30, oc31, oc32, oc__, oc34, oc35, oc36, oc37
>b3cb		4a b6 52 b6 59 b6 60 b6
>b3d3		67 b6 6b b6 71 b6 fb b9		        .word oc38, oc39, oc3A, oc__, oc3C, oc3D, oc3E, oc0F
>b3db		77 b6 7d b6 83 b6 9d b5
>b3e3		8e b6 92 b6 fb b9 fb b9		        .word oc40, oc41, oc__, oc__, oc__, oc45, oc46, oc47
>b3eb		fb b9 9a b6 a0 b6 a6 b6
>b3f3		ad b6 b1 b6 b7 b6 fb b9		        .word oc48, oc49, oc4A, oc__, oc4C, oc4D, oc4E, oc4F
>b3fb		bd b6 c1 b6 c5 b6 c9 b6
>b403		ce b6 d2 b6 da b6 fb b9		        .word oc50, oc51, oc52, oc__, oc__, oc55, oc56, oc57
>b40b		fb b9 e1 b6 e8 b6 ef b6
>b413		f6 b6 fa b6 00 b7 fb b9		        .word oc58, oc59, oc5A, oc__, oc__, oc__, oc5E, oc5F
>b41b		fb b9 fb b9 0a b7 10 b7
>b423		15 b7 19 b7 fb b9 fb b9		        .word oc60, oc61, oc__, oc__, oc64, oc65, oc66, oc67
>b42b		21 b7 27 b7 2d b7 33 b7
>b433		3a b7 3e b7 44 b7 fb b9		        .word oc68, oc69, oc6A, oc__, oc6C, oc6D, oc6E, oc6F
>b43b		4a b7 50 b7 54 b7 58 b7
>b443		5d b7 61 b7 69 b7 fb b9		        .word oc70, oc71, oc72, oc__, oc74, oc75, oc76, oc77
>b44b		70 b7 77 b7 7e b7 85 b7
>b453		8c b7 90 b7 96 b7 fb b9		        .word oc78, oc79, oc7A, oc__, oc7C, oc7D, oc7E, oc7F
>b45b		9a b7 a1 b7 a7 b7 ad b7
>b463		b2 b7 b6 b7 fb b9 fb b9		        .word oc80, oc81, oc__, oc__, oc84, oc85, oc86, oc__
>b46b		be b7 c4 b7 ca b7 fb b9
>b473		d0 b7 d4 b7 da b7 fb b9		        .word oc88, oc89, oc8A, oc__, oc8C, oc8D, oc8E, oc8F
>b47b		de b7 e2 b7 e6 b7 ea b7
>b483		ef b7 f3 b7 fb b7 fb b9		        .word oc90, oc91, oc92, oc__, oc94, oc95, oc96, oc97
>b48b		02 b8 09 b8 10 b8 17 b8
>b493		1e b8 22 b8 28 b8 fb b9		        .word oc98, oc99, oc9A, oc__, oc9C, oc9D, oc9E, oc9F
>b49b		2c b8 30 b8 36 b8 3c b8
>b4a3		41 b8 47 b8 4f b8 fb b9		        .word ocA0, ocA1, ocA2, oc__, ocA4, ocA5, ocA6, ocA7
>b4ab		55 b8 5b b8 61 b8 67 b8
>b4b3		6e b8 72 b8 78 b8 fb b9		        .word ocA8, ocA9, ocAA, oc__, ocAC, ocAD, ocAE, ocAF
>b4bb		7c b8 80 b8 84 b8 88 b8
>b4c3		8d b8 91 b8 99 b8 fb b9		        .word ocB0, ocB1, ocB2, oc__, ocB4, ocB5, ocB6, ocB7
>b4cb		a0 b8 a7 b8 ae b8 b5 b8
>b4d3		bc b8 c0 b8 c6 b8 fb b9		        .word ocB8, ocB9, ocBA, oc__, ocBC, ocBD, ocBE, ocBF
>b4db		ca b8 d0 b8 d6 b8 dc b8
>b4e3		e1 b8 e7 b8 fb b9 fb b9		        .word ocC0, ocC1, oc__, oc__, ocC4, ocC5, ocC6, ocC7
>b4eb		ef b8 f5 b8 fb b8 01 b9
>b4f3		08 b9 0c b9 12 b9 fb b9		        .word ocC8, ocC9, ocCA, oc__, ocCC, ocCD, ocCE, ocCF
>b4fb		16 b9 1a b9 1e b9 22 b9
>b503		27 b9 2b b9 33 b9 fb b9		        .word ocD0, ocD1, ocD2, oc__, oc__, ocD5, ocD6, ocD7
>b50b		fb b9 3a b9 41 b9 48 b9
>b513		4f b9 53 b9 59 b9 fb b9		        .word ocD8, ocD9, ocDA, oc__, oc__, ocDD, ocDE, ocDF
>b51b		fb b9 5d b9 63 b9 69 b9
>b523		6e b9 74 b9 fb b9 fb b9		        .word ocE0, ocE1, oc__, oc__, ocE4, ocE5, ocE6, ocE7
>b52b		7c b9 82 b9 88 b9 8e b9
>b533		95 b9 99 b9 9f b9 fb b9		        .word ocE8, ocE9, ocEA, oc__, ocEC, ocED, ocEE, ocEF
>b53b		a3 b9 a7 b9 ab b9 af b9
>b543		b4 b9 b8 b9 c0 b9 fb b9		        .word ocF0, ocF1, ocF2, oc__, oc__, ocF5, ocF6, ocF7
>b54b		fb b9 c7 b9 ce b9 d5 b9
>b553		dc b9 e0 b9 e6 b9 fb b9		        .word ocF8, ocF9, ocFA, oc__, oc__, ocFD, ocFE, ocFF
>b55b		fb b9 ea b9 f0 b9 f6 b9
.b563						oc_table:
>b563		83 62 72 6b				oc00:	.text 2*64+3, "brk"              ; enforce the signature byte
>b567		87 6f 72 61 2e 7a 78 69			oc01:	.text 2*64+7, "ora.zxi"
>b56f		85 74 73 62 2e 7a		    oc04:   .text 2*64+5, "tsb.z"
>b575		85 6f 72 61 2e 7a			oc05:	.text 2*64+5, "ora.z"
>b57b		85 61 73 6c 2e 7a			oc06:	.text 2*64+5, "asl.z"
>b581		43 70 68 70				oc08:	.text 1*64+3, "php"
>b585		85 6f 72 61 2e 23			oc09:	.text 2*64+5, "ora.#"
>b58b		45 61 73 6c 2e 61			oc0A:	.text 1*64+5, "asl.a"
>b591		c3 74 73 62				oc0C:	.text 3*64+3, "tsb"
>b595		c3 6f 72 61				oc0D:	.text 3*64+3, "ora"
>b599		c3 61 73 6c				oc0E:	.text 3*64+3, "asl"
>b59d		c4 62 62 72 30				oc0F:	.text 3*64+4, "bbr0"
>b5a2		83 62 70 6c				oc10:	.text 2*64+3, "bpl"
>b5a6		87 6f 72 61 2e 7a 69 79			oc11:	.text 2*64+7, "ora.ziy"
>b5ae		86 6f 72 61 2e 7a 69			oc12:	.text 2*64+6, "ora.zi"
>b5b5		85 74 72 62 2e 7a			oc14:	.text 2*64+5, "trb.z"
>b5bb		86 6f 72 61 2e 7a 78			oc15:	.text 2*64+6, "ora.zx"
>b5c2		86 61 73 6c 2e 7a 78			oc16:	.text 2*64+6, "asl.zx"
>b5c9		86 72 6d 62 31 2e 7a			oc17:	.text 2*64+6, "rmb1.z"
>b5d0		43 63 6c 63				oc18:	.text 1*64+3, "clc"
>b5d4		c5 6f 72 61 2e 79			oc19:	.text 3*64+5, "ora.y"
>b5da		45 69 6e 63 2e 61			oc1A:	.text 1*64+5, "inc.a"
>b5e0		c3 74 72 62				oc1C:	.text 3*64+3, "trb"
>b5e4		c5 6f 72 61 2e 78			oc1D:	.text 3*64+5, "ora.x"
>b5ea		c5 61 73 6c 2e 78			oc1F:	.text 3*64+5, "asl.x"
>b5f0		c3 6a 73 72				oc20:	.text 3*64+3, "jsr"
>b5f4		87 61 6e 64 2e 7a 78 69			oc21:	.text 2*64+7, "and.zxi"
>b5fc		85 62 69 74 2e 7a			oc24:	.text 2*64+5, "bit.z"
>b602		85 61 6e 64 2e 7a			oc25:	.text 2*64+5, "and.z"
>b608		85 72 6f 6c 2e 7a			oc26:	.text 2*64+5, "rol.z"
>b60e		86 72 6d 62 32 2e 7a			oc27:	.text 2*64+6, "rmb2.z"
>b615		43 70 6c 70				oc28:	.text 1*64+3, "plp"
>b619		85 61 6e 64 2e 23			oc29:	.text 2*64+5, "and.#"
>b61f		45 72 6f 6c 2e 61			oc2A:	.text 1*64+5, "rol.a"
>b625		c3 62 69 74				oc2C:	.text 3*64+3, "bit"
>b629		c4 61 6e 64 2e				oc2D:	.text 3*64+4, "and."
>b62e		c3 72 6f 6c				oc2E:	.text 3*64+3, "rol"
>b632		c4 62 62 72 32				oc2F:	.text 3*64+4, "bbr2"
>b637		83 62 6d 69				oc30:	.text 2*64+3, "bmi"
>b63b		87 61 6e 64 2e 7a 69 79			oc31:	.text 2*64+7, "and.ziy"
>b643		86 61 6e 64 2e 7a 69			oc32:	.text 2*64+6, "and.zi"
>b64a		87 62 69 74 2e 7a 78 69			oc34:	.text 2*64+7, "bit.zxi"
>b652		86 61 6e 64 2e 7a 78			oc35:	.text 2*64+6, "and.zx"
>b659		86 72 6f 6c 2e 7a 78			oc36:	.text 2*64+6, "rol.zx"
>b660		86 72 6d 62 33 2e 7a			oc37:	.text 2*64+6, "rmb3.z"
>b667		43 73 65 63				oc38:	.text 1*64+3, "sec"
>b66b		c5 61 6e 64 2e 79			oc39:	.text 3*64+5, "and.y"
>b671		45 64 65 63 2e 61			oc3A:	.text 1*64+5, "dec.a"
>b677		c5 62 69 74 2e 78			oc3C:	.text 3*64+5, "bit.x"
>b67d		c5 61 6e 64 2e 78			oc3D:	.text 3*64+5, "and.x"
>b683		c5 72 6f 6c 2e 78			oc3E:	.text 3*64+5, "rol.x"
>b689		c4 62 62 72 33				oc3F:	.text 3*64+4, "bbr3"
>b68e		43 72 74 69				oc40:	.text 1*64+3, "rti"
>b692		87 65 6f 72 2e 7a 78 69			oc41:	.text 2*64+7, "eor.zxi"
>b69a		85 65 6f 72 2e 7a			oc45:	.text 2*64+5, "eor.z"
>b6a0		85 6c 73 72 2e 7a			oc46:	.text 2*64+5, "lsr.z"
>b6a6		86 72 62 6d 34 2e 7a			oc47:	.text 2*64+6, "rbm4.z"
>b6ad		43 70 68 61				oc48:	.text 1*64+3, "pha"
>b6b1		85 65 6f 72 2e 23			oc49:	.text 2*64+5, "eor.#"
>b6b7		45 6c 73 72 2e 61			oc4A:	.text 1*64+5, "lsr.a"
>b6bd		c3 6a 6d 70				oc4C:	.text 3*64+3, "jmp"
>b6c1		c3 65 6f 72				oc4D:	.text 3*64+3, "eor"
>b6c5		c3 6c 73 72				oc4E:	.text 3*64+3, "lsr"
>b6c9		c4 62 62 72 34				oc4F:	.text 3*64+4, "bbr4"
>b6ce		83 62 76 63				oc50:	.text 2*64+3, "bvc"
>b6d2		87 65 6f 72 2e 7a 69 79			oc51:	.text 2*64+7, "eor.ziy"
>b6da		86 65 6f 72 2e 7a 69			oc52:	.text 2*64+6, "eor.zi"
>b6e1		86 65 6f 72 2e 7a 78			oc55:	.text 2*64+6, "eor.zx"
>b6e8		86 6c 73 72 2e 7a 78			oc56:	.text 2*64+6, "lsr.zx"
>b6ef		86 72 62 6d 35 2e 7a			oc57:	.text 2*64+6, "rbm5.z"
>b6f6		43 63 6c 69				oc58:	.text 1*64+3, "cli"
>b6fa		c5 65 6f 72 2e 79			oc59:	.text 3*64+5, "eor.y"
>b700		43 70 68 79				oc5A:	.text 1*64+3, "phy"
>b704		c5 65 6f 72 2e 78			oc5D:	.text 3*64+5, "eor.x"
>b70a		c5 6c 73 72 2e 78			oc5E:	.text 3*64+5, "lsr.x"
>b710		c4 62 62 72 35				oc5F:	.text 3*64+4, "bbr5"
>b715		43 72 74 73				oc60:	.text 1*64+3, "rts"
>b719		87 61 64 63 2e 7a 78 69			oc61:	.text 2*64+7, "adc.zxi"
>b721		85 73 74 7a 2e 7a			oc64:	.text 2*64+5, "stz.z"
>b727		85 61 64 63 2e 7a			oc65:	.text 2*64+5, "adc.z"
>b72d		85 72 6f 72 2e 7a			oc66:	.text 2*64+5, "ror.z"
>b733		86 72 6d 62 36 2e 7a			oc67:	.text 2*64+6, "rmb6.z"
>b73a		43 70 6c 61				oc68:	.text 1*64+3, "pla"
>b73e		85 61 64 63 2e 23			oc69:	.text 2*64+5, "adc.#"
>b744		45 72 6f 72 2e 61			oc6A:	.text 1*64+5, "ror.a"
>b74a		c5 6a 6d 70 2e 69			oc6C:	.text 3*64+5, "jmp.i"
>b750		c3 61 64 63				oc6D:	.text 3*64+3, "adc"
>b754		c3 72 6f 72				oc6E:	.text 3*64+3, "ror"
>b758		c4 62 62 72 36				oc6F:	.text 3*64+4, "bbr6"
>b75d		83 62 76 73				oc70:	.text 2*64+3, "bvs"
>b761		87 61 64 63 2e 7a 69 79			oc71:	.text 2*64+7, "adc.ziy"
>b769		86 61 64 63 2e 7a 69			oc72:	.text 2*64+6, "adc.zi"
>b770		86 73 74 7a 2e 7a 78			oc74:	.text 2*64+6, "stz.zx"
>b777		86 61 64 63 2e 7a 78			oc75:	.text 2*64+6, "adc.zx"
>b77e		86 72 6f 72 2e 7a 78			oc76:	.text 2*64+6, "ror.zx"
>b785		86 72 6d 62 37 2e 7a			oc77:	.text 2*64+6, "rmb7.z"
>b78c		43 73 65 69				oc78:	.text 1*64+3, "sei"
>b790		c5 61 64 63 2e 79			oc79:	.text 3*64+5, "adc.y"
>b796		43 70 6c 79				oc7A:	.text 1*64+3, "ply"
>b79a		c6 6a 6d 70 2e 78 69			oc7C:	.text 3*64+6, "jmp.xi"
>b7a1		c5 61 64 63 2e 78			oc7D:	.text 3*64+5, "adc.x"
>b7a7		c5 72 6f 72 2e 78			oc7E:	.text 3*64+5, "ror.x"
>b7ad		c4 62 62 72 37				oc7F:	.text 3*64+4, "bbr7"
>b7b2		83 62 72 61				oc80:	.text 2*64+3, "bra"
>b7b6		87 73 74 61 2e 7a 78 69			oc81:	.text 2*64+7, "sta.zxi"
>b7be		85 73 74 79 2e 7a			oc84:	.text 2*64+5, "sty.z"
>b7c4		85 73 74 61 2e 7a			oc85:	.text 2*64+5, "sta.z"
>b7ca		85 73 74 78 2e 7a			oc86:	.text 2*64+5, "stx.z"
>b7d0		43 64 65 79				oc88:	.text 1*64+3, "dey"
>b7d4		85 62 69 74 2e 23			oc89:	.text 2*64+5, "bit.#"
>b7da		43 74 78 61				oc8A:	.text 1*64+3, "txa"
>b7de		c3 73 74 79				oc8C:	.text 3*64+3, "sty"
>b7e2		c3 73 74 61				oc8D:	.text 3*64+3, "sta"
>b7e6		c3 73 74 78				oc8E:	.text 3*64+3, "stx"
>b7ea		c4 62 62 73 30				oc8F:	.text 3*64+4, "bbs0"
>b7ef		83 62 63 63				oc90:	.text 2*64+3, "bcc"
>b7f3		87 73 74 61 2e 7a 69 79			oc91:	.text 2*64+7, "sta.ziy"
>b7fb		86 73 74 61 2e 7a 69			oc92:	.text 2*64+6, "sta.zi"
>b802		86 73 74 79 2e 7a 78			oc94:	.text 2*64+6, "sty.zx"
>b809		86 73 74 61 2e 7a 78			oc95:	.text 2*64+6, "sta.zx"
>b810		86 73 74 78 2e 7a 79			oc96:	.text 2*64+6, "stx.zy"
>b817		86 73 6d 62 31 2e 7a			oc97:	.text 2*64+6, "smb1.z"
>b81e		43 74 79 61				oc98:	.text 1*64+3, "tya"
>b822		c5 73 74 61 2e 79			oc99:	.text 3*64+5, "sta.y"
>b828		43 74 78 73				oc9A:	.text 1*64+3, "txs"
>b82c		c3 73 74 7a				oc9C:	.text 3*64+3, "stz"
>b830		c5 73 74 61 2e 78			oc9D:	.text 3*64+5, "sta.x"
>b836		c5 73 74 7a 2e 78			oc9E:	.text 3*64+5, "stz.x"
>b83c		c4 62 62 73 31				oc9F:	.text 3*64+4, "bbs1"
>b841		85 6c 64 79 2e 23			ocA0:	.text 2*64+5, "ldy.#"
>b847		87 6c 64 61 2e 7a 78 69			ocA1:	.text 2*64+7, "lda.zxi"
>b84f		85 6c 64 78 2e 23			ocA2:	.text 2*64+5, "ldx.#"
>b855		85 6c 64 79 2e 7a			ocA4:	.text 2*64+5, "ldy.z"
>b85b		85 6c 64 61 2e 7a			ocA5:	.text 2*64+5, "lda.z"
>b861		85 6c 64 78 2e 7a			ocA6:	.text 2*64+5, "ldx.z"
>b867		86 73 6d 62 32 2e 7a			ocA7:	.text 2*64+6, "smb2.z"
>b86e		43 74 61 79				ocA8:	.text 1*64+3, "tay"
>b872		85 6c 64 61 2e 23			ocA9:	.text 2*64+5, "lda.#"
>b878		43 74 61 78				ocAA:	.text 1*64+3, "tax"
>b87c		c3 6c 64 79				ocAC:	.text 3*64+3, "ldy"
>b880		c3 6c 64 61				ocAD:	.text 3*64+3, "lda"
>b884		c3 6c 64 78				ocAE:	.text 3*64+3, "ldx"
>b888		c4 62 62 73 32				ocAF:	.text 3*64+4, "bbs2"
>b88d		83 62 63 73				ocB0:	.text 2*64+3, "bcs"
>b891		87 6c 64 61 2e 7a 69 79			ocB1:	.text 2*64+7, "lda.ziy"
>b899		86 6c 64 61 2e 7a 69			ocB2:	.text 2*64+6, "lda.zi"
>b8a0		86 6c 64 79 2e 7a 78			ocB4:	.text 2*64+6, "ldy.zx"
>b8a7		86 6c 64 61 2e 7a 78			ocB5:	.text 2*64+6, "lda.zx"
>b8ae		86 6c 64 78 2e 7a 79			ocB6:	.text 2*64+6, "ldx.zy"
>b8b5		86 73 6d 62 33 2e 7a			ocB7:	.text 2*64+6, "smb3.z"
>b8bc		43 63 6c 76				ocB8:	.text 1*64+3, "clv"
>b8c0		c5 6c 64 61 2e 79			ocB9:	.text 3*64+5, "lda.y"
>b8c6		43 74 73 78				ocBA:	.text 1*64+3, "tsx"
>b8ca		c5 6c 64 79 2e 78			ocBC:	.text 3*64+5, "ldy.x"
>b8d0		c5 6c 64 61 2e 78			ocBD:	.text 3*64+5, "lda.x"
>b8d6		c5 6c 64 78 2e 79			ocBE:	.text 3*64+5, "ldx.y"
>b8dc		c4 62 62 73 34				ocBF:	.text 3*64+4, "bbs4"
>b8e1		85 63 70 79 2e 23			ocC0:	.text 2*64+5, "cpy.#"
>b8e7		87 63 6d 70 2e 7a 78 69			ocC1:	.text 2*64+7, "cmp.zxi"
>b8ef		85 63 70 79 2e 7a			ocC4:	.text 2*64+5, "cpy.z"
>b8f5		85 63 6d 70 2e 7a			ocC5:	.text 2*64+5, "cmp.z"
>b8fb		85 64 65 63 2e 7a			ocC6:	.text 2*64+5, "dec.z"
>b901		86 73 6d 62 34 2e 7a			ocC7:	.text 2*64+6, "smb4.z"
>b908		43 69 6e 79				ocC8:	.text 1*64+3, "iny"
>b90c		85 63 6d 70 2e 23			ocC9:	.text 2*64+5, "cmp.#"
>b912		43 64 65 78				ocCA:	.text 1*64+3, "dex"
>b916		c3 63 70 79				ocCC:	.text 3*64+3, "cpy"
>b91a		c3 63 6d 70				ocCD:	.text 3*64+3, "cmp"
>b91e		c3 64 65 63				ocCE:	.text 3*64+3, "dec"
>b922		c4 62 62 73 34				ocCF:	.text 3*64+4, "bbs4"
>b927		83 62 6e 65				ocD0:	.text 2*64+3, "bne"
>b92b		87 63 6d 70 2e 7a 69 79			ocD1:	.text 2*64+7, "cmp.ziy"
>b933		86 63 6d 70 2e 7a 69			ocD2:	.text 2*64+6, "cmp.zi"
>b93a		86 63 6d 70 2e 7a 78			ocD5:	.text 2*64+6, "cmp.zx"
>b941		86 64 65 63 2e 7a 78			ocD6:	.text 2*64+6, "dec.zx"
>b948		86 73 6d 62 35 2e 7a			ocD7:	.text 2*64+6, "smb5.z"
>b94f		43 63 6c 64				ocD8:	.text 1*64+3, "cld"
>b953		c5 63 6d 70 2e 79			ocD9:	.text 3*64+5, "cmp.y"
>b959		43 70 68 78				ocDA:	.text 1*64+3, "phx"
>b95d		c5 63 6d 70 2e 78			ocDD:	.text 3*64+5, "cmp.x"
>b963		c5 64 65 63 2e 78			ocDE:	.text 3*64+5, "dec.x"
>b969		c4 62 62 73 35				ocDF:	.text 3*64+4, "bbs5"
>b96e		85 63 70 78 2e 23			ocE0:	.text 2*64+5, "cpx.#"
>b974		87 73 62 63 2e 7a 78 69			ocE1:	.text 2*64+7, "sbc.zxi"
>b97c		85 63 70 78 2e 7a			ocE4:	.text 2*64+5, "cpx.z"
>b982		85 73 62 63 2e 7a			ocE5:	.text 2*64+5, "sbc.z"
>b988		85 69 6e 63 2e 7a			ocE6:	.text 2*64+5, "inc.z"
>b98e		86 73 6d 62 36 2e 7a			ocE7:	.text 2*64+6, "smb6.z"
>b995		43 69 6e 78				ocE8:	.text 1*64+3, "inx"
>b999		85 73 62 63 2e 23			ocE9:	.text 2*64+5, "sbc.#"
>b99f		43 6e 6f 70				ocEA:	.text 1*64+3, "nop"
>b9a3		c3 63 70 78				ocEC:	.text 3*64+3, "cpx"
>b9a7		c3 73 62 63				ocED:	.text 3*64+3, "sbc"
>b9ab		c3 69 6e 63				ocEE:	.text 3*64+3, "inc"
>b9af		c4 62 62 73 36				ocEF:	.text 3*64+4, "bbs6"
>b9b4		83 62 65 71				ocF0:	.text 2*64+3, "beq"
>b9b8		87 73 62 63 2e 7a 69 79			ocF1:	.text 2*64+7, "sbc.ziy"
>b9c0		86 73 62 63 2e 7a 69			ocF2:	.text 2*64+6, "sbc.zi"
>b9c7		86 73 62 63 2e 7a 78			ocF5:	.text 2*64+6, "sbc.zx"
>b9ce		86 69 6e 63 2e 7a 78			ocF6:	.text 2*64+6, "inc.zx"
>b9d5		86 73 6d 62 37 2e 7a			ocF7:	.text 2*64+6, "smb7.z"
>b9dc		43 73 65 64				ocF8:	.text 1*64+3, "sed"
>b9e0		c5 73 62 63 2e 79			ocF9:	.text 3*64+5, "sbc.y"
>b9e6		43 70 6c 78				ocFA:	.text 1*64+3, "plx"
>b9ea		c5 73 62 63 2e 78			ocFD:	.text 3*64+5, "sbc.x"
>b9f0		c5 69 6e 63 2e 78			ocFE:	.text 3*64+5, "inc.x"
>b9f6		c4 62 62 73 37				ocFF:	.text 3*64+4, "bbs7"
>b9fb		01 3f					oc__:	.text 1, "?"

;******  Return to file: platform/../taliforth.asm

.b9fd						forth_words_start:
>b9fd		20 63 72 20 2e 28 20 54		.binary "forth_words.asc"
>ba05		61 6c 69 20 46 6f 72 74 68 20 32 20 66 6f 72 20
>ba15		74 68 65 20 36 35 63 30 32 29 20 63 72 20 2e 28
>ba25		20 56 65 72 73 69 6f 6e 20 31 2e 31 20 30 36 2e
>ba35		20 41 70 72 20 32 30 32 34 20 29 20 63 72 20 2e
>ba45		28 20 43 6f 70 79 72 69 67 68 74 20 32 30 31 34
>ba55		2d 32 30 32 34 20 53 63 6f 74 20 57 2e 20 53 74
>ba65		65 76 65 6e 73 6f 6e 2c 20 53 61 6d 20 43 6f 6c
>ba75		77 65 6c 6c 2c 20 50 61 74 72 69 63 6b 20 53 75
>ba85		72 72 79 29 20 63 72 20 2e 28 20 54 61 6c 69 20
>ba95		46 6f 72 74 68 20 32 20 63 6f 6d 65 73 20 77 69
>baa5		74 68 20 61 62 73 6f 6c 75 74 65 6c 79 20 4e 4f
>bab5		20 57 41 52 52 41 4e 54 59 29 20 63 72 20 2e 28
>bac5		20 54 79 70 65 20 27 62 79 65 27 20 74 6f 20 65
>bad5		78 69 74 29 20 63 72 20
.badd						forth_words_end:
.badd						user_words_start:
>badd		20 20				.binary "user_words.asc"
.badf						user_words_end:

;******  Processing file: platform/../headers.asm

.badf						dictionary_start:
.badf						nt_drop:
>badf		04 10				        .byte 4, UF
>bae1		eb ba 3c 87 41 87		        .word nt_dup, xt_drop, z_drop
>bae7		64 72 6f 70			        .text "drop"
.baeb						nt_dup:
>baeb		03 10				        .byte 3, UF
>baed		f6 ba 42 87 4f 87		        .word nt_swap, xt_dup, z_dup
>baf3		64 75 70			        .text "dup"
.baf6						nt_swap:
>baf6		04 10				        .byte 4, UF
>baf8		02 bb 4c 93 5f 93		        .word nt_store, xt_swap, z_swap
>bafe		73 77 61 70			        .text "swap"
.bb02						nt_store:
>bb02		01 10				        .byte 1, UF
>bb04		0b bb 36 93 4b 93		        .word nt_fetch, xt_store, z_store
>bb0a		21				        .text "!"
.bb0b						nt_fetch:
>bb0b		01 10				        .byte 1, UF
>bb0d		14 bb 01 89 13 89		        .word nt_over, xt_fetch, z_fetch
>bb13		40				        .text "@"
.bb14						nt_over:
>bb14		04 10				        .byte 4, UF
>bb16		20 bb 07 8e 14 8e		        .word nt_to_r, xt_over, z_over
>bb1c		6f 76 65 72			        .text "over"
.bb20						nt_to_r:
>bb20		02 11				        .byte 2, CO+UF ; native is special case
>bb22		2a bb 8a 94 9d 94		        .word nt_r_from, xt_to_r, z_to_r
>bb28		3e 72				        .text ">r"
.bb2a						nt_r_from:
>bb2a		02 01				        .byte 2, CO    ; native is special case
>bb2c		34 bb f0 8f 00 90		        .word nt_r_fetch, xt_r_from, z_r_from
>bb32		72 3e				        .text "r>"
.bb34						nt_r_fetch:
>bb34		02 01				        .byte 2, CO    ; native is special case
>bb36		3e bb db 8f ef 8f		        .word nt_nip, xt_r_fetch, z_r_fetch
>bb3c		72 40				        .text "r@"
.bb3e						nt_nip:
>bb3e		03 10				        .byte 3, UF
>bb40		49 bb 32 8d 3f 8d		        .word nt_rot, xt_nip, z_nip
>bb46		6e 69 70			        .text "nip"
.bb49						nt_rot:
>bb49		03 10				        .byte 3, UF
>bb4b		54 bb 8d 90 a8 90		        .word nt_not_rote, xt_rot, z_rot
>bb51		72 6f 74			        .text "rot"
.bb54						nt_not_rote:
>bb54		04 10				        .byte 4, UF
>bb56		60 bb 0f 9c 2a 9c		        .word nt_tuck, xt_not_rote, z_not_rote
>bb5c		2d 72 6f 74			        .text "-rot"
.bb60						nt_tuck:
>bb60		04 10				        .byte 4, UF
>bb62		6c bb a7 94 c0 94		        .word nt_comma, xt_tuck, z_tuck
>bb68		74 75 63 6b			        .text "tuck"
.bb6c						nt_comma:
>bb6c		01 10				        .byte 1, UF
>bb6e		75 bb cf 83 dd 83		        .word nt_c_fetch, xt_comma, z_comma
>bb74		2c				        .text ","
.bb75						nt_c_fetch:
>bb75		02 10				        .byte 2, UF
>bb77		7f bb 2f 83 38 83		        .word nt_c_store, xt_c_fetch, z_c_fetch
>bb7d		63 40				        .text "c@"
.bb7f						nt_c_store:
>bb7f		02 10				        .byte 2, UF
>bb81		89 bb 39 83 44 83		        .word nt_plus_store, xt_c_store, z_c_store
>bb87		63 21				        .text "c!"
.bb89						nt_plus_store:
>bb89		02 10				        .byte 2, UF
>bb8b		93 bb 68 8f 87 8f		        .word nt_execute, xt_plus_store, z_plus_store
>bb91		2b 21				        .text "+!"
.bb93						nt_execute:
>bb93		07 10				        .byte 7, UF
>bb95		a2 bb ec 88 f2 88		        .word nt_emit, xt_execute, z_execute
>bb9b		65 78 65 63 75 74 65		        .text "execute"
.bba2						nt_emit:
>bba2		04 18				        .byte 4, NN+UF
>bba4		ae bb a5 87 af 87		        .word nt_type, xt_emit, z_emit
>bbaa		65 6d 69 74			        .text "emit"
.bbae						nt_type:
>bbae		04 10				        .byte 4, UF
>bbb0		ba bb d3 95 fd 95		        .word nt_dot, xt_type, z_type
>bbb6		74 79 70 65			        .text "type"
.bbba						nt_dot:
>bbba		01 10				        .byte 1, UF
>bbbc		c3 bb d2 86 f3 86		        .word nt_u_dot, xt_dot, z_dot
>bbc2		2e				        .text "."
.bbc3						nt_u_dot:
>bbc3		02 10				        .byte 2, UF
>bbc5		cd bb fe 95 09 96		        .word nt_u_dot_r, xt_u_dot, z_u_dot
>bbcb		75 2e				        .text "u."
.bbcd						nt_u_dot_r:
>bbcd		03 10				        .byte 3, UF
>bbcf		d8 bb 0a 96 2b 96		        .word nt_dot_r, xt_u_dot_r, z_u_dot_r
>bbd5		75 2e 72			        .text "u.r"
.bbd8						nt_dot_r:
>bbd8		02 10				        .byte 2, UF
>bbda		e2 bb 0e 87 3b 87		        .word nt_d_dot, xt_dot_r, z_dot_r
>bbe0		2e 72				        .text ".r"
.bbe2						nt_d_dot:
>bbe2		02 10				        .byte 2, UF
>bbe4		ec bb 14 9e 32 9e		        .word nt_d_dot_r, xt_d_dot, z_d_dot
>bbea		64 2e				        .text "d."
.bbec						nt_d_dot_r:
>bbec		03 10				        .byte 3, UF
>bbee		f7 bb 33 9e 5d 9e		        .word nt_ud_dot, xt_d_dot_r, z_d_dot_r
>bbf4		64 2e 72			        .text "d.r"
.bbf7						nt_ud_dot:
>bbf7		03 10				        .byte 3, UF
>bbf9		02 bc aa 9e bc 9e		        .word nt_ud_dot_r, xt_ud_dot, z_ud_dot
>bbff		75 64 2e			        .text "ud."
.bc02						nt_ud_dot_r:
>bc02		04 10				        .byte 4, UF
>bc04		0e bc bd 9e db 9e		        .word nt_question, xt_ud_dot_r, z_ud_dot_r
>bc0a		75 64 2e 72			        .text "ud.r"
.bc0e						nt_question:
>bc0e		01 00				        .byte 1, 0
>bc10		17 bc b6 98 bc 98		        .word nt_false, xt_question, z_question
>bc16		3f				        .text "?"
.bc17						nt_false:
>bc17		05 00				        .byte 5, 0
>bc19		24 bc 8b 9d 91 9d		        .word nt_true, xt_false, z_false
>bc1f		66 61 6c 73 65			        .text "false"
.bc24						nt_true:
>bc24		04 00				        .byte 4, 0
>bc26		30 bc 9e 94 a6 94		        .word nt_space, xt_true, z_true
>bc2c		74 72 75 65			        .text "true"
.bc30						nt_space:
>bc30		05 00				        .byte 5, 0
>bc32		3d bc c7 92 cc 92		        .word nt_zero, xt_space, z_space
>bc38		73 70 61 63 65			        .text "space"
.bc3d						nt_zero:
>bc3d		01 00				        .byte 1, 0
>bc3f		46 bc 8b 9d 91 9d		        .word nt_one, xt_zero, z_zero
>bc45		30				        .text "0"
.bc46						nt_one:
>bc46		01 00				        .byte 1, 0
>bc48		4f bc 25 9d 2d 9d		        .word nt_two, xt_one, z_one
>bc4e		31				        .text "1"
.bc4f						nt_two:
>bc4f		01 00				        .byte 1, 0
>bc51		58 bc 56 9d 5e 9d		        .word nt_two_dup, xt_two, z_two
>bc57		32				        .text "2"
.bc58						nt_two_dup:
>bc58		04 10				        .byte 4, UF
>bc5a		64 bc c9 94 e0 94		        .word nt_question_dup, xt_two_dup, z_two_dup
>bc60		32 64 75 70			        .text "2dup"
.bc64						nt_question_dup:
>bc64		04 10				        .byte 4, UF
>bc66		70 bc c7 8f da 8f		        .word nt_plus, xt_question_dup, z_question_dup
>bc6c		3f 64 75 70			        .text "?dup"
.bc70						nt_plus:
>bc70		01 10				        .byte 1, UF
>bc72		79 bc 55 8f 67 8f		        .word nt_minus, xt_plus, z_plus
>bc78		2b				        .text "+"
.bc79						nt_minus:
>bc79		01 10				        .byte 1, UF
>bc7b		82 bc e6 8c f8 8c		        .word nt_one_minus, xt_minus, z_minus
>bc81		2d				        .text "-"
.bc82						nt_one_minus:
>bc82		02 10				        .byte 2, UF
>bc84		8c bc df 8d ea 8d		        .word nt_one_plus, xt_one_minus, z_one_minus
>bc8a		31 2d				        .text "1-"
.bc8c						nt_one_plus:
>bc8c		02 10				        .byte 2, UF
>bc8e		96 bc eb 8d f4 8d		        .word nt_two_star, xt_one_plus, z_one_plus
>bc94		31 2b				        .text "1+"
.bc96						nt_two_star:
>bc96		02 10				        .byte 2, UF
>bc98		a0 bc 61 95 68 95		        .word nt_two_slash, xt_two_star, z_two_star
>bc9e		32 2a				        .text "2*"
.bca0						nt_two_slash:
>bca0		02 10				        .byte 2, UF
>bca2		aa bc 56 95 60 95		        .word nt_abs, xt_two_slash, z_two_slash
>bca8		32 2f				        .text "2/"
.bcaa						nt_abs:
>bcaa		03 10				        .byte 3, UF
>bcac		b5 bc d1 80 e5 80		        .word nt_dabs, xt_abs, z_abs
>bcb2		61 62 73			        .text "abs"
.bcb5						nt_dabs:
>bcb5		04 10				        .byte 4, UF
>bcb7		c1 bc da 9d f8 9d		        .word nt_and, xt_dabs, z_dabs
>bcbd		64 61 62 73			        .text "dabs"
.bcc1						nt_and:
>bcc1		03 10				        .byte 3, UF
>bcc3		cc bc 92 82 a3 82		        .word nt_or, xt_and, z_and
>bcc9		61 6e 64			        .text "and"
.bccc						nt_or:
>bccc		02 10				        .byte 2, UF
>bcce		d6 bc f5 8d 06 8e		        .word nt_xor, xt_or, z_or
>bcd4		6f 72				        .text "or"
.bcd6						nt_xor:
>bcd6		03 10				        .byte 3, UF
>bcd8		e1 bc 9c 97 ad 97		        .word nt_rshift, xt_xor, z_xor
>bcde		78 6f 72			        .text "xor"
.bce1						nt_rshift:
>bce1		06 10				        .byte 6, UF
>bce3		ef bc a9 90 bc 90		        .word nt_lshift, xt_rshift, z_rshift
>bce9		72 73 68 69 66 74		        .text "rshift"
.bcef						nt_lshift:
>bcef		06 10				        .byte 6, UF
>bcf1		fd bc 10 8c 23 8c		        .word nt_pick, xt_lshift, z_lshift
>bcf7		6c 73 68 69 66 74		        .text "lshift"
.bcfd						nt_pick:
>bcfd		04 00				        .byte 4, 0    ; underflow check is complicated, leave off here
>bcff		09 bd 44 8f 54 8f		        .word nt_char, xt_pick, z_pick
>bd05		70 69 63 6b			        .text "pick"
.bd09						nt_char:
>bd09		04 00				        .byte 4, 0
>bd0b		15 bd 55 83 6b 83		        .word nt_bracket_char, xt_char, z_char
>bd11		63 68 61 72			        .text "char"
.bd15						nt_bracket_char:
>bd15		06 05				        .byte 6, CO+IM
>bd17		23 bd 0f 83 15 83		        .word nt_char_plus, xt_bracket_char, z_bracket_char
>bd1d		5b 63 68 61 72 5d		        .text "[char]"
.bd23						nt_char_plus:
>bd23		05 00				        .byte 5, 0
>bd25		30 bd eb 8d f4 8d		        .word nt_chars, xt_one_plus, z_one_plus ; same as 1+
>bd2b		63 68 61 72 2b			        .text "char+"
.bd30						nt_chars:
>bd30		05 10				        .byte 5, UF     ; deleted during compile
>bd32		3d bd 6c 83 6f 83		        .word nt_cells, xt_chars, z_chars
>bd38		63 68 61 72 73			        .text "chars"
.bd3d						nt_cells:
>bd3d		05 00				        .byte 5, 0
>bd3f		4a bd 61 95 68 95		        .word nt_cell_plus, xt_two_star, z_two_star  ; same as 2*
>bd45		63 65 6c 6c 73			        .text "cells"
.bd4a						nt_cell_plus:
>bd4a		05 10				        .byte 5, UF
>bd4c		57 bd 45 83 54 83		        .word nt_here, xt_cell_plus, z_cell_plus
>bd52		63 65 6c 6c 2b			        .text "cell+"
.bd57						nt_here:
>bd57		04 00				        .byte 4, 0
>bd59		63 bd 02 8a 0c 8a		        .word nt_equal, xt_here, z_here
>bd5f		68 65 72 65			        .text "here"
.bd63						nt_equal:
>bd63		01 10				        .byte 1, UF
>bd65		6c bd 7d 88 98 88		        .word nt_not_equals, xt_equal, z_equal
>bd6b		3d				        .text "="
.bd6c						nt_not_equals:
>bd6c		02 10				        .byte 2, UF
>bd6e		76 bd 40 8d 5d 8d		        .word nt_less_than, xt_not_equals, z_not_equals
>bd74		3c 3e				        .text "<>"
.bd76						nt_less_than:
>bd76		01 10				        .byte 1, UF
>bd78		7f bd 06 8b 1a 8b		        .word nt_u_less_than, xt_less_than, z_less_than
>bd7e		3c				        .text "<"
.bd7f						nt_u_less_than:
>bd7f		02 10				        .byte 2, UF
>bd81		89 bd 42 96 57 96		        .word nt_u_greater_than, xt_u_less_than, z_u_less_than
>bd87		75 3c				        .text "u<"
.bd89						nt_u_greater_than:
>bd89		02 10				        .byte 2, UF
>bd8b		93 bd 2c 96 41 96		        .word nt_greater_than, xt_u_greater_than, z_u_greater_than
>bd91		75 3e				        .text "u>"
.bd93						nt_greater_than:
>bd93		01 10				        .byte 1, UF
>bd95		9c bd ed 89 01 8a		        .word nt_zero_equal, xt_greater_than, z_greater_than
>bd9b		3e				        .text ">"
.bd9c						nt_zero_equal:
>bd9c		02 10				        .byte 2, UF
>bd9e		a6 bd ae 97 bf 97		        .word nt_zero_unequal, xt_zero_equal, z_zero_equal
>bda4		30 3d				        .text "0="
.bda6						nt_zero_unequal:
>bda6		03 10				        .byte 3, UF
>bda8		b1 bd e4 97 f3 97		        .word nt_zero_greater, xt_zero_unequal, z_zero_unequal
>bdae		30 3c 3e			        .text "0<>"
.bdb1						nt_zero_greater:
>bdb1		02 10				        .byte 2, UF
>bdb3		bb bd c0 97 d3 97		        .word nt_zero_less, xt_zero_greater, z_zero_greater
>bdb9		30 3e				        .text "0>"
.bdbb						nt_zero_less:
>bdbb		02 10				        .byte 2, UF
>bdbd		c5 bd d4 97 e3 97		        .word nt_min, xt_zero_less, z_zero_less
>bdc3		30 3c				        .text "0<"
.bdc5						nt_min:
>bdc5		03 10				        .byte 3, UF
>bdc7		d0 bd ca 8c e5 8c		        .word nt_max, xt_min, z_min
>bdcd		6d 69 6e			        .text "min"
.bdd0						nt_max:
>bdd0		03 10				        .byte 3, UF
>bdd2		db bd ae 8c c9 8c		        .word nt_two_drop, xt_max, z_max
>bdd8		6d 61 78			        .text "max"
.bddb						nt_two_drop:
>bddb		05 10				        .byte 5, UF
>bddd		e8 bd c1 94 c8 94		        .word nt_two_swap, xt_two_drop, z_two_drop
>bde3		32 64 72 6f 70			        .text "2drop"
.bde8						nt_two_swap:
>bde8		05 10				        .byte 5, UF
>bdea		f5 bd 8f 95 b2 95		        .word nt_two_over, xt_two_swap, z_two_swap
>bdf0		32 73 77 61 70			        .text "2swap"
.bdf5						nt_two_over:
>bdf5		05 10				        .byte 5, UF
>bdf7		02 be 03 95 1a 95		        .word nt_two_store, xt_two_over, z_two_over
>bdfd		32 6f 76 65 72			        .text "2over"
.be02						nt_two_store:
>be02		02 10				        .byte 2, UF
>be04		0c be 69 95 8e 95		        .word nt_two_fetch, xt_two_store, z_two_store
>be0a		32 21				        .text "2!"
.be0c						nt_two_fetch:
>be0c		02 10				        .byte 2, UF
>be0e		16 be e1 94 02 95		        .word nt_two_variable, xt_two_fetch, z_two_fetch
>be14		32 40				        .text "2@"
.be16						nt_two_variable:
>be16		09 00				        .byte 9, 0
>be18		27 be 9b 9e a9 9e		        .word nt_two_constant, xt_two_variable, z_two_variable
>be1e		32 76 61 72 69 61 62 6c		        .text "2variable"
>be26		65
.be27						nt_two_constant:
>be27		09 10				        .byte 9, UF
>be29		38 be 5e 9e 82 9e		        .word nt_two_literal, xt_two_constant, z_two_constant
>be2f		32 63 6f 6e 73 74 61 6e		        .text "2constant"
>be37		74
.be38						nt_two_literal:
>be38		08 14				        .byte 8, UF+IM
>be3a		48 be 83 9e 9a 9e		        .word nt_two_r_fetch, xt_two_literal, z_two_literal
>be40		32 6c 69 74 65 72 61 6c		        .text "2literal"
.be48						nt_two_r_fetch:
>be48		03 09				        .byte 3, CO+NN          ; native is special case, leave NN for now
>be4a		53 be 1b 95 38 95		        .word nt_two_r_from, xt_two_r_fetch, z_two_r_fetch
>be50		32 72 40			        .text "2r@"
.be53						nt_two_r_from:
>be53		03 01				        .byte 3, CO             ; native is special case
>be55		5e be 39 95 55 95		        .word nt_two_to_r, xt_two_r_from, z_two_r_from
>be5b		32 72 3e			        .text "2r>"
.be5e						nt_two_to_r:
>be5e		03 11				        .byte 3, CO+UF          ; native is special case
>be60		69 be b3 95 d2 95		        .word nt_invert, xt_two_to_r, z_two_to_r
>be66		32 3e 72			        .text "2>r"
.be69						nt_invert:
>be69		06 10				        .byte 6, UF
>be6b		77 be 8d 8a 9c 8a		        .word nt_negate, xt_invert, z_invert
>be71		69 6e 76 65 72 74		        .text "invert"
.be77						nt_negate:
>be77		06 10				        .byte 6, UF
>be79		85 be 21 8d 31 8d		        .word nt_dnegate, xt_negate, z_negate
>be7f		6e 65 67 61 74 65		        .text "negate"
.be85						nt_dnegate:
>be85		07 10				        .byte 7, UF
>be87		94 be f9 9d 13 9e		        .word nt_c_comma, xt_dnegate, z_dnegate
>be8d		64 6e 65 67 61 74 65		        .text "dnegate"
.be94						nt_c_comma:
>be94		02 10				        .byte 2, UF
>be96		9e be 24 83 2e 83		        .word nt_bounds, xt_c_comma, z_c_comma
>be9c		63 2c				        .text "c,"
.be9e						nt_bounds:
>be9e		06 10				        .byte 6, UF
>bea0		ac be c8 99 e0 99		        .word nt_spaces, xt_bounds, z_bounds
>bea6		62 6f 75 6e 64 73		        .text "bounds"
.beac						nt_spaces:
>beac		06 10				        .byte 6, UF
>beae		ba be cd 92 08 93		        .word nt_bl, xt_spaces, z_spaces
>beb4		73 70 61 63 65 73		        .text "spaces"
.beba						nt_bl:
>beba		02 00				        .byte 2, 0
>bebc		c4 be 06 83 0e 83		        .word nt_minus_trailing, xt_bl, z_bl
>bec2		62 6c				        .text "bl"
.bec4						nt_minus_trailing:
>bec4		09 10				        .byte 9, UF
>bec6		d5 be d0 9f 0c a0		        .word nt_minus_leading, xt_minus_trailing, z_minus_trailing
>becc		2d 74 72 61 69 6c 69 6e		        .text "-trailing"
>bed4		67
.bed5						nt_minus_leading:
>bed5		08 10				        .byte 8, UF
>bed7		e5 be b7 9f cf 9f		        .word nt_slash_string, xt_minus_leading, z_minus_leading
>bedd		2d 6c 65 61 64 69 6e 67		        .text "-leading"
.bee5						nt_slash_string:
>bee5		07 10				        .byte 7, UF
>bee7		f4 be ac a0 cb a0		        .word nt_refill, xt_slash_string, z_slash_string
>beed		2f 73 74 72 69 6e 67		        .text "/string"
.bef4						nt_refill:
>bef4		06 00				        .byte 6, 0
>bef6		02 bf 3e 90 7f 90		        .word nt_accept, xt_refill, z_refill
>befc		72 65 66 69 6c 6c		        .text "refill"
.bf02						nt_accept:
>bf02		06 18				        .byte 6, UF+NN
>bf04		10 bf e6 80 de 81		        .word nt_input_to_r, xt_accept, z_accept
>bf0a		61 63 63 65 70 74		        .text "accept"
.bf10						nt_input_to_r:
>bf10		07 08				        .byte 7, NN
>bf12		1f bf 2c 9b 41 9b		        .word nt_r_to_input, xt_input_to_r, z_input_to_r
>bf18		69 6e 70 75 74 3e 72		        .text "input>r"
.bf1f						nt_r_to_input:
>bf1f		07 08				        .byte 7, NN
>bf21		2e bf 39 9d 50 9d		        .word nt_unused, xt_r_to_input, z_r_to_input
>bf27		72 3e 69 6e 70 75 74		        .text "r>input"
.bf2e						nt_unused:
>bf2e		06 00				        .byte 6, 0
>bf30		3c bf 05 97 14 97		        .word nt_depth, xt_unused, z_unused
>bf36		75 6e 75 73 65 64		        .text "unused"
.bf3c						nt_depth:
>bf3c		05 00				        .byte 5, 0
>bf3e		49 bf 12 86 20 86		        .word nt_key, xt_depth, z_depth
>bf44		64 65 70 74 68			        .text "depth"
.bf49						nt_key:
>bf49		03 00				        .byte 3, 0
>bf4b		54 bf d0 8a d9 8a		        .word nt_allot, xt_key, z_key
>bf51		6b 65 79			        .text "key"
.bf54						nt_allot:
>bf54		05 10				        .byte 5, UF
>bf56		61 bf 29 82 91 82		        .word nt_create, xt_allot, z_allot
>bf5c		61 6c 6c 6f 74			        .text "allot"
.bf61						nt_create:
>bf61		06 00				        .byte 6, 0
>bf63		6f bf 00 85 c9 85		        .word nt_does, xt_create, z_create
>bf69		63 72 65 61 74 65		        .text "create"
.bf6f						nt_does:
>bf6f		05 05				        .byte 5, CO+IM
>bf71		7c bf 91 86 9f 86		        .word nt_variable, xt_does, z_does
>bf77		64 6f 65 73 3e			        .text "does>"
.bf7c						nt_variable:
>bf7c		08 00				        .byte 8, 0
>bf7e		8c bf 15 97 2d 97		        .word nt_constant, xt_variable, z_variable
>bf84		76 61 72 69 61 62 6c 65		        .text "variable"
.bf8c						nt_constant:
>bf8c		08 10				        .byte 8, UF
>bf8e		9c bf a8 84 e5 84		        .word nt_value, xt_constant, z_constant
>bf94		63 6f 6e 73 74 61 6e 74		        .text "constant"
.bf9c						nt_value:
>bf9c		05 10				        .byte 5, UF
>bf9e		a9 bf a8 84 e5 84		        .word nt_to, xt_constant, z_constant
>bfa4		76 61 6c 75 65			        .text "value"
.bfa9						nt_to:
>bfa9		02 0c				        .byte 2, NN+IM
>bfab		b3 bf 80 93 bb 93		        .word nt_s_to_d, xt_to, z_to
>bfb1		74 6f				        .text "to"
.bfb3						nt_s_to_d:
>bfb3		03 10				        .byte 3, UF
>bfb5		be bf db 91 ec 91		        .word nt_d_to_s, xt_s_to_d, z_s_to_d
>bfbb		73 3e 64			        .text "s>d"
.bfbe						nt_d_to_s:
>bfbe		03 10				        .byte 3, UF
>bfc0		c9 bf d4 9d d9 9d		        .word nt_d_minus, xt_d_to_s, z_d_to_s
>bfc6		64 3e 73			        .text "d>s"
.bfc9						nt_d_minus:
>bfc9		02 10				        .byte 2, UF
>bfcb		d3 bf 92 9d b2 9d		        .word nt_d_plus, xt_d_minus, z_d_minus
>bfd1		64 2d				        .text "d-"
.bfd3						nt_d_plus:
>bfd3		02 10				        .byte 2, UF
>bfd5		dd bf b3 9d d3 9d		        .word nt_erase, xt_d_plus, z_d_plus
>bfdb		64 2b				        .text "d+"
.bfdd						nt_erase:
>bfdd		05 00				        .byte 5, 0      ; underflow checked by FILL
>bfdf		ea bf a3 88 eb 88		        .word nt_blank, xt_erase, z_erase
>bfe5		65 72 61 73 65			        .text "erase"
.bfea						nt_blank:
>bfea		05 00				        .byte 5, 0     ; underflow checked by FILL
>bfec		f7 bf 99 88 eb 88		        .word nt_fill, xt_blank, z_blank
>bff2		62 6c 61 6e 6b			        .text "blank"
.bff7						nt_fill:
>bff7		04 10				        .byte 4, UF
>bff9		03 c0 a9 88 eb 88		        .word nt_find_name, xt_fill, z_fill
>bfff		66 69 6c 6c			        .text "fill"
.c003						nt_find_name:
>c003		09 10				        .byte 9, UF
>c005		14 c0 8a 9a cd 9a		        .word nt_tick, xt_find_name, z_find_name
>c00b		66 69 6e 64 2d 6e 61 6d		        .text "find-name"
>c013		65
.c014						nt_tick:
>c014		01 00				        .byte 1, 0
>c016		1d c0 60 93 7f 93		        .word nt_bracket_tick, xt_tick, z_tick
>c01c		27				        .text "'"
.c01d						nt_bracket_tick:
>c01d		03 05				        .byte 3, CO+IM
>c01f		28 c0 16 83 1c 83		        .word nt_name_to_int, xt_bracket_tick, z_bracket_tick
>c025		5b 27 5d			        .text "[']"
.c028						nt_name_to_int:
>c028		08 10				        .byte 8, UF
>c02a		38 c0 c8 9b e4 9b		        .word nt_int_to_name, xt_name_to_int, z_name_to_int
>c030		6e 61 6d 65 3e 69 6e 74		        .text "name>int"
.c038						nt_int_to_name:
>c038		08 10				        .byte 8, UF
>c03a		48 c0 42 9b b2 9b		        .word nt_name_to_string, xt_int_to_name, z_int_to_name
>c040		69 6e 74 3e 6e 61 6d 65		        .text "int>name"
.c048						nt_name_to_string:
>c048		0b 10				        .byte 11, UF
>c04a		5b c0 e5 9b fb 9b		        .word nt_to_body, xt_name_to_string, z_name_to_string
>c050		6e 61 6d 65 3e 73 74 72		        .text "name>string"
>c058		69 6e 67
.c05b						nt_to_body:
>c05b		05 10				        .byte 5, UF
>c05d		68 c0 bc 93 de 93		        .word nt_defer, xt_to_body, z_to_body
>c063		3e 62 6f 64 79			        .text ">body"
.c068						nt_defer:
>c068		05 00				        .byte 5, 0
>c06a		75 c0 d1 85 03 86		        .word nt_latestxt, xt_defer, z_defer
>c070		64 65 66 65 72			        .text "defer"
.c075						nt_latestxt:
>c075		08 00				        .byte 8, 0
>c077		85 c0 c1 9b c7 9b		        .word nt_latestnt, xt_latestxt, z_latestxt
>c07d		6c 61 74 65 73 74 78 74		        .text "latestxt"
.c085						nt_latestnt:
>c085		08 00				        .byte 8, 0
>c087		95 c0 b3 9b c0 9b		        .word nt_parse_name, xt_latestnt, z_latestnt
>c08d		6c 61 74 65 73 74 6e 74		        .text "latestnt"
.c095						nt_parse_name:
>c095		0a 08				        .byte 10, NN
>c097		a7 c0 53 8e 43 8f		        .word nt_parse, xt_parse_name, z_parse_name
>c09d		70 61 72 73 65 2d 6e 61		        .text "parse-name"
>c0a5		6d 65
.c0a7						nt_parse:
>c0a7		05 10				        .byte 5, UF
>c0a9		b4 c0 ae 8e 43 8f		        .word nt_execute_parsing, xt_parse, z_parse
>c0af		70 61 72 73 65			        .text "parse"
.c0b4						nt_execute_parsing:
>c0b4		0f 10				        .byte 15, UF
>c0b6		cb c0 63 9a 89 9a		        .word nt_source, xt_execute_parsing, z_execute_parsing
>c0bc		65 78 65 63 75 74 65 2d		        .text "execute-parsing"
>c0c4		70 61 72 73 69 6e 67
.c0cb						nt_source:
>c0cb		06 00				        .byte 6, 0
>c0cd		d9 c0 a7 92 bb 92		        .word nt_source_id, xt_source, z_source
>c0d3		73 6f 75 72 63 65		        .text "source"
.c0d9						nt_source_id:
>c0d9		09 00				        .byte 9, 0
>c0db		ea c0 bc 92 c6 92		        .word nt_colon, xt_source_id, z_source_id
>c0e1		73 6f 75 72 63 65 2d 69		        .text "source-id"
>c0e9		64
.c0ea						nt_colon:
>c0ea		01 00				        .byte 1, 0
>c0ec		f3 c0 70 83 b2 83		        .word nt_semicolon, xt_colon, z_colon
>c0f2		3a				        .text ":"
.c0f3						nt_semicolon:
>c0f3		01 05				        .byte 1, CO+IM
>c0f5		fc c0 ed 91 4b 92		        .word nt_colon_noname, xt_semicolon, z_semicolon
>c0fb		3b				        .text ";"
.c0fc						nt_colon_noname:
>c0fc		07 00				        .byte 7, 0
>c0fe		0b c1 b3 83 ce 83		        .word nt_compile_comma, xt_colon_noname, z_colon_noname
>c104		3a 6e 6f 6e 61 6d 65		        .text ":noname"
.c10b						nt_compile_comma:
>c10b		08 18				        .byte 8, UF+NN
>c10d		1b c1 de 83 9c 84		        .word nt_left_bracket, xt_compile_comma, z_compile_comma
>c113		63 6f 6d 70 69 6c 65 2c		        .text "compile,"
.c11b						nt_left_bracket:
>c11b		01 05				        .byte 1, IM+CO
>c11d		24 c1 f3 8a f7 8a		        .word nt_right_bracket, xt_left_bracket, z_left_bracket
>c123		5b				        .text "["
.c124						nt_right_bracket:
>c124		01 04				        .byte 1, IM
>c126		2d c1 86 90 8c 90		        .word nt_literal, xt_right_bracket, z_right_bracket
>c12c		5d				        .text "]"
.c12d						nt_literal:
>c12d		07 15				        .byte 7, IM+CO+UF
>c12f		3c c1 1b 8b 58 8b		        .word nt_sliteral, xt_literal, z_literal
>c135		6c 69 74 65 72 61 6c		        .text "literal"
.c13c						nt_sliteral:
>c13c		08 15				        .byte 8, CO+IM+UF
>c13e		4c c1 cc a0 0f a1		        .word nt_dot_quote, xt_sliteral, z_sliteral
>c144		73 6c 69 74 65 72 61 6c		        .text "sliteral"
.c14c						nt_dot_quote:
>c14c		02 05				        .byte 2, CO+IM
>c14e		56 c1 03 87 0d 87		        .word nt_s_quote, xt_dot_quote, z_dot_quote
>c154		2e 22				        .text ".", $22
.c156						nt_s_quote:
>c156		02 0c				        .byte 2, IM+NN
>c158		60 c1 d6 90 da 91		        .word nt_s_backslash_quote, xt_s_quote, z_s_quote
>c15e		73 22				        .text "s", $22
.c160						nt_s_backslash_quote:
>c160		03 04				        .byte 3, IM
>c162		6b c1 bd 90 c6 90		        .word nt_postpone, xt_s_backslash_quote, z_s_backslash_quote
>c168		73 5c 22			        .text "s", $5C, $22
.c16b						nt_postpone:
>c16b		08 05				        .byte 8, IM+CO
>c16d		7b c1 88 8f c6 8f		        .word nt_immediate, xt_postpone, z_postpone
>c173		70 6f 73 74 70 6f 6e 65		        .text "postpone"
.c17b						nt_immediate:
>c17b		09 00				        .byte 9, 0
>c17d		8c c1 81 8a 8c 8a		        .word nt_compile_only, xt_immediate, z_immediate
>c183		69 6d 6d 65 64 69 61 74		        .text "immediate"
>c18b		65
.c18c						nt_compile_only:
>c18c		0c 00				        .byte 12, 0
>c18e		a0 c1 9c 84 a7 84		        .word nt_never_native, xt_compile_only, z_compile_only
>c194		63 6f 6d 70 69 6c 65 2d		        .text "compile-only"
>c19c		6f 6e 6c 79
.c1a0						nt_never_native:
>c1a0		0c 00				        .byte 12, 0
>c1a2		b4 c1 01 9c 0e 9c		        .word nt_always_native, xt_never_native, z_never_native
>c1a8		6e 65 76 65 72 2d 6e 61		        .text "never-native"
>c1b0		74 69 76 65
.c1b4						nt_always_native:
>c1b4		0d 00				        .byte 13, 0
>c1b6		c9 c1 b4 99 c1 99		        .word nt_allow_native, xt_always_native, z_always_native
>c1bc		61 6c 77 61 79 73 2d 6e		        .text "always-native"
>c1c4		61 74 69 76 65
.c1c9						nt_allow_native:
>c1c9		0c 00				        .byte 12, 0
>c1cb		dd c1 a8 99 b3 99		        .word nt_nc_limit, xt_allow_native, z_allow_native
>c1d1		61 6c 6c 6f 77 2d 6e 61		        .text "allow-native"
>c1d9		74 69 76 65
.c1dd						nt_nc_limit:
>c1dd		08 08				        .byte 8, NN
>c1df		ed c1 fc 9b 01 9c		        .word nt_strip_underflow, xt_nc_limit, z_nc_limit
>c1e5		6e 63 2d 6c 69 6d 69 74		        .text "nc-limit"
.c1ed						nt_strip_underflow:
>c1ed		0f 08				        .byte 15, NN
>c1ef		04 c2 51 9d 56 9d		        .word nt_abort, xt_strip_underflow, z_strip_underflow
>c1f5		73 74 72 69 70 2d 75 6e		        .text "strip-underflow"
>c1fd		64 65 72 66 6c 6f 77
.c204						nt_abort:
>c204		05 00				        .byte 5, 0
>c206		11 c2 60 80 b1 80		        .word nt_abort_quote, xt_abort, z_abort
>c20c		61 62 6f 72 74			        .text "abort"
.c211						nt_abort_quote:
>c211		06 0d				        .byte 6, CO+IM+NN
>c213		1f c2 b1 80 bb 80		        .word nt_do, xt_abort_quote, z_abort_quote
>c219		61 62 6f 72 74 22		        .text "abort", $22
.c21f						nt_do:
>c21f		02 0d				        .byte 2, CO+IM+NN
>c221		29 c2 35 86 4e 86		        .word nt_question_do, xt_do, z_do
>c227		64 6f				        .text "do"
.c229						nt_question_do:
>c229		03 0d				        .byte 3, CO+IM+NN
>c22b		34 c2 21 86 4e 86		        .word nt_i, xt_question_do, z_question_do
>c231		3f 64 6f			        .text "?do"
.c234						nt_i:
>c234		01 01				        .byte 1, CO
>c236		3d c2 26 8a 3a 8a		        .word nt_j, xt_i, z_i
>c23c		69				        .text "i"
.c23d						nt_j:
>c23d		01 01				        .byte 1, CO
>c23f		46 c2 b6 8a cf 8a		        .word nt_loop, xt_j, z_j
>c245		6a				        .text "j"
.c246						nt_loop:
>c246		04 05				        .byte 4, CO+IM
>c248		52 c2 82 8b e4 8b		        .word nt_plus_loop, xt_loop, z_loop
>c24e		6c 6f 6f 70			        .text "loop"
.c252						nt_plus_loop:
>c252		05 05				        .byte 5, CO+IM
>c254		5f c2 93 8b e4 8b		        .word nt_exit, xt_plus_loop, z_plus_loop
>c25a		2b 6c 6f 6f 70			        .text "+loop"
.c25f						nt_exit:
>c25f		04 03				        .byte 4, AN+CO
>c261		6b c2 00 89 01 89		        .word nt_unloop, xt_exit, z_exit
>c267		65 78 69 74			        .text "exit"
.c26b						nt_unloop:
>c26b		06 01				        .byte 6, CO
>c26d		79 c2 e0 96 ef 96		        .word nt_leave, xt_unloop, z_unloop
>c273		75 6e 6c 6f 6f 70		        .text "unloop"
.c279						nt_leave:
>c279		05 05				        .byte 5, CO+IM
>c27b		86 c2 dd 8a f2 8a		        .word nt_recurse, xt_leave, z_leave
>c281		6c 65 61 76 65			        .text "leave"
.c286						nt_recurse:
>c286		07 0d				        .byte 7, CO+IM+NN
>c288		95 c2 01 90 3d 90		        .word nt_quit, xt_recurse, z_recurse
>c28e		72 65 63 75 72 73 65		        .text "recurse"
.c295						nt_quit:
>c295		04 00				        .byte 4, 0
>c297		a1 c2 62 80 b1 80		        .word nt_begin, xt_quit, z_quit
>c29d		71 75 69 74			        .text "quit"
.c2a1						nt_begin:
>c2a1		05 05				        .byte 5, CO+IM
>c2a3		ae c2 02 8a 0c 8a		        .word nt_again, xt_begin, z_begin
>c2a9		62 65 67 69 6e			        .text "begin"
.c2ae						nt_again:
>c2ae		05 15				        .byte 5, CO+IM+UF
>c2b0		bb c2 21 82 27 82		        .word nt_state, xt_again, z_again
>c2b6		61 67 61 69 6e			        .text "again"
.c2bb						nt_state:
>c2bb		05 00				        .byte 5, 0
>c2bd		c8 c2 2b 93 35 93		        .word nt_evaluate, xt_state, z_state
>c2c3		73 74 61 74 65			        .text "state"
.c2c8						nt_evaluate:
>c2c8		08 10				        .byte 8, UF
>c2ca		d8 c2 99 89 ec 89		        .word nt_base, xt_evaluate, z_evaluate
>c2d0		65 76 61 6c 75 61 74 65		        .text "evaluate"
.c2d8						nt_base:
>c2d8		04 00				        .byte 4, 0
>c2da		e4 c2 fd 82 05 83		        .word nt_digit_question, xt_base, z_base
>c2e0		62 61 73 65			        .text "base"
.c2e4						nt_digit_question:
>c2e4		06 10				        .byte 6, UF
>c2e6		f2 c2 2e 9a 62 9a		        .word nt_number, xt_digit_question, z_digit_question
>c2ec		64 69 67 69 74 3f		        .text "digit?"
.c2f2						nt_number:
>c2f2		06 10				        .byte 6, UF
>c2f4		00 c3 2b 9c 24 9d		        .word nt_to_number, xt_number, z_number
>c2fa		6e 75 6d 62 65 72		        .text "number"
.c300						nt_to_number:
>c300		07 10				        .byte 7, UF
>c302		0f c3 ea 93 89 94		        .word nt_hex, xt_to_number, z_to_number
>c308		3e 6e 75 6d 62 65 72		        .text ">number"
.c30f						nt_hex:
>c30f		03 00				        .byte 3, 0
>c311		1a c3 0d 8a 13 8a		        .word nt_decimal, xt_hex, z_hex
>c317		68 65 78			        .text "hex"
.c31a						nt_decimal:
>c31a		07 00				        .byte 7, 0
>c31c		29 c3 ca 85 d0 85		        .word nt_count, xt_decimal, z_decimal
>c322		64 65 63 69 6d 61 6c		        .text "decimal"
.c329						nt_count:
>c329		05 10				        .byte 5, UF
>c32b		36 c3 e6 84 f9 84		        .word nt_m_star, xt_count, z_count
>c331		63 6f 75 6e 74			        .text "count"
.c336						nt_m_star:
>c336		02 10				        .byte 2, UF
>c338		40 c3 24 8c 3e 8c		        .word nt_um_star, xt_m_star, z_m_star
>c33e		6d 2a				        .text "m*"
.c340						nt_um_star:
>c340		03 10				        .byte 3, UF
>c342		4b c3 9a 96 df 96		        .word nt_star, xt_um_star, z_um_star
>c348		75 6d 2a			        .text "um*"
.c34b						nt_star:
>c34b		01 10				        .byte 1, UF
>c34d		54 c3 09 93 11 93		        .word nt_um_slash_mod, xt_star, z_star
>c353		2a				        .text "*"
.c354						nt_um_slash_mod:
>c354		06 10				        .byte 6, UF
>c356		62 c3 58 96 99 96		        .word nt_sm_slash_rem, xt_um_slash_mod, z_um_slash_mod
>c35c		75 6d 2f 6d 6f 64		        .text "um/mod"
.c362						nt_sm_slash_rem:
>c362		06 10				        .byte 6, UF
>c364		70 c3 7e 92 a6 92		        .word nt_fm_slash_mod, xt_sm_slash_rem, z_sm_slash_rem
>c36a		73 6d 2f 72 65 6d		        .text "sm/rem"
.c370						nt_fm_slash_mod:
>c370		06 10				        .byte 6, UF
>c372		7e c3 5c 89 92 89		        .word nt_slash, xt_fm_slash_mod, z_fm_slash_mod
>c378		66 6d 2f 6d 6f 64		        .text "fm/mod"
.c37e						nt_slash:
>c37e		01 10				        .byte 1, UF
>c380		87 c3 61 92 7d 92		        .word nt_slash_mod, xt_slash, z_slash
>c386		2f				        .text "/"
.c387						nt_slash_mod:
>c387		04 10				        .byte 4, UF
>c389		93 c3 66 92 7d 92		        .word nt_mod, xt_slash_mod, z_slash_mod
>c38f		2f 6d 6f 64			        .text "/mod"
.c393						nt_mod:
>c393		03 10				        .byte 3, UF
>c395		9e c3 f9 8c 01 8d		        .word nt_star_slash_mod, xt_mod, z_mod
>c39b		6d 6f 64			        .text "mod"
.c39e						nt_star_slash_mod:
>c39e		05 10				        .byte 5, UF
>c3a0		ab c3 1b 93 2a 93		        .word nt_star_slash, xt_star_slash_mod, z_star_slash_mod
>c3a6		2a 2f 6d 6f 64			        .text "*/mod"
.c3ab						nt_star_slash:
>c3ab		02 10				        .byte 2, UF
>c3ad		b5 c3 12 93 1a 93		        .word nt_backslash, xt_star_slash, z_star_slash
>c3b3		2a 2f				        .text "*/"
.c3b5						nt_backslash:
>c3b5		01 04				        .byte 1, IM
>c3b7		be c3 d2 82 fc 82		        .word nt_move, xt_backslash, z_backslash
>c3bd		5c				        .byte '\'
.c3be						nt_move:
>c3be		04 18				        .byte 4, NN+UF
>c3c0		ca c3 02 8d 20 8d		        .word nt_cmove_up, xt_move, z_move
>c3c6		6d 6f 76 65			        .text "move"
.c3ca						nt_cmove_up:
>c3ca		06 10				        .byte 6, UF
>c3cc		d8 c3 17 9f 51 9f		        .word nt_cmove, xt_cmove_up, z_cmove_up
>c3d2		63 6d 6f 76 65 3e		        .text "cmove>"
.c3d8						nt_cmove:
>c3d8		05 10				        .byte 5, UF
>c3da		e5 c3 dc 9e 16 9f		        .word nt_pad, xt_cmove, z_cmove
>c3e0		63 6d 6f 76 65			        .text "cmove"
.c3e5						nt_pad:
>c3e5		03 00				        .byte 3, 0
>c3e7		f0 c3 15 8e 24 8e		        .word nt_cleave, xt_pad, z_pad
>c3ed		70 61 64			        .text "pad"
.c3f0						nt_cleave:
>c3f0		06 10				        .byte 6, UF
>c3f2		fe c3 e1 99 2d 9a		        .word nt_hexstore, xt_cleave, z_cleave
>c3f8		63 6c 65 61 76 65		        .text "cleave"
.c3fe						nt_hexstore:
>c3fe		08 10				        .byte 8, UF
>c400		0e c4 ce 9a 20 9b		        .word nt_within, xt_hexstore, z_hexstore
>c406		68 65 78 73 74 6f 72 65		        .text "hexstore"
.c40e						nt_within:
>c40e		06 10				        .byte 6, UF
>c410		1c c4 42 97 57 97		        .word nt_to_in, xt_within, z_within
>c416		77 69 74 68 69 6e		        .text "within"
.c41c						nt_to_in:
>c41c		03 00				        .byte 3, 0
>c41e		27 c4 df 93 e9 93		        .word nt_less_number_sign, xt_to_in, z_to_in
>c424		3e 69 6e			        .text ">in"
.c427						nt_less_number_sign:
>c427		02 00				        .byte 2, 0
>c429		31 c4 f8 8a 05 8b		        .word nt_number_sign, xt_less_number_sign, z_less_number_sign
>c42f		3c 23				        .text "<#"
.c431						nt_number_sign:
>c431		01 10				        .byte 1, UF
>c433		3a c4 5e 8d 92 8d		        .word nt_number_sign_s, xt_number_sign, z_number_sign
>c439		23				        .text "#"
.c43a						nt_number_sign_s:
>c43a		02 10				        .byte 2, UF
>c43c		44 c4 b5 8d c5 8d		        .word nt_number_sign_greater, xt_number_sign_s, z_number_sign_s
>c442		23 73				        .text "#s"
.c444						nt_number_sign_greater:
>c444		02 10				        .byte 2, UF
>c446		4e c4 93 8d b4 8d		        .word nt_hold, xt_number_sign_greater, z_number_sign_greater
>c44c		23 3e				        .text "#>"
.c44e						nt_hold:
>c44e		04 10				        .byte 4, UF
>c450		5a c4 14 8a 25 8a		        .word nt_sign, xt_hold, z_hold
>c456		68 6f 6c 64			        .text "hold"
.c45a						nt_sign:
>c45a		04 10				        .byte 4, UF
>c45c		66 c4 4c 92 60 92		        .word nt_output, xt_sign, z_sign
>c462		73 69 67 6e			        .text "sign"
.c466						nt_output:
>c466		06 00				        .byte 6, 0
>c468		74 c4 2e 9d 38 9d		        .word nt_input, xt_output, z_output
>c46e		6f 75 74 70 75 74		        .text "output"
.c474						nt_input:
>c474		05 00				        .byte 5, 0
>c476		81 c4 21 9b 2b 9b		        .word nt_cr, xt_input, z_input
>c47c		69 6e 70 75 74			        .text "input"
.c481						nt_cr:
>c481		02 00				        .byte 2, 0
>c483		8b c4 fa 84 ff 84		        .word nt_page, xt_cr, z_cr
>c489		63 72				        .text "cr"
.c48b						nt_page:
>c48b		04 00				        .byte 4, 0
>c48d		97 c4 25 8e 42 8e		        .word nt_at_xy, xt_page, z_page
>c493		70 61 67 65			        .text "page"
.c497						nt_at_xy:
>c497		05 10				        .byte 5, UF
>c499		a4 c4 a4 82 d1 82		        .word nt_marker, xt_at_xy, z_at_xy
>c49f		61 74 2d 78 79			        .text "at-xy"
.c4a4						nt_marker:
>c4a4		06 04				        .byte 6, IM
>c4a6		b2 c4 3f 8c 7c 8c		        .word nt_words, xt_marker, z_marker
>c4ac		6d 61 72 6b 65 72		        .text "marker"
.c4b2						nt_words:
>c4b2		05 00				        .byte 5, 0
>c4b4		bf c4 4b 99 a7 99		        .word nt_wordsize, xt_words, z_words
>c4ba		77 6f 72 64 73			        .text "words"
.c4bf						nt_wordsize:
>c4bf		08 10				        .byte 8, UF
>c4c1		cf c4 6a 9d 8a 9d		        .word nt_aligned, xt_wordsize, z_wordsize
>c4c7		77 6f 72 64 73 69 7a 65		        .text "wordsize"
.c4cf						nt_aligned:
>c4cf		07 00				        .byte 7, 0
>c4d1		de c4 28 82 28 82		        .word nt_align, xt_align, z_align
>c4d7		61 6c 69 67 6e 65 64		        .text "aligned"
.c4de						nt_align:
>c4de		05 00				        .byte 5, 0
>c4e0		eb c4 28 82 28 82		        .word nt_bell, xt_align, z_align
>c4e6		61 6c 69 67 6e			        .text "align"
.c4eb						nt_bell:
>c4eb		04 00				        .byte 4, 0
>c4ed		f7 c4 c2 99 c7 99		        .word nt_dump, xt_bell, z_bell
>c4f3		62 65 6c 6c			        .text "bell"
.c4f7						nt_dump:
>c4f7		04 10				        .byte 4, UF
>c4f9		03 c5 3b 98 a1 98		        .word nt_dot_s, xt_dump, z_dump
>c4ff		64 75 6d 70			        .text "dump"
.c503						nt_dot_s:
>c503		02 00				        .byte 2, 0
>c505		0d c5 f7 97 3a 98		        .word +, xt_dot_s, z_dot_s
>c50b		2e 73				        .text ".s"
.c50d						+
.c50d						nt_disasm:
>c50d		06 10				        .byte 6, UF
>c50f		1b c5 38 a1 3e a1		        .word +, xt_disasm, z_disasm
>c515		64 69 73 61 73 6d		        .text "disasm"
.c51b						+
.c51b						nt_compare:
>c51b		07 10				        .byte 7, UF
>c51d		2a c5 52 9f b6 9f		        .word nt_search, xt_compare, z_compare
>c523		63 6f 6d 70 61 72 65		        .text "compare"
.c52a						nt_search:
>c52a		06 18				        .byte 6, UF+NN
>c52c		38 c5 0d a0 ab a0		        .word +, xt_search, z_search
>c532		73 65 61 72 63 68		        .text "search"
.c538						+
.c538						nt_environment_q:
>c538		0c 10				        .byte 12, UF
>c53a		4c c5 c4 87 40 88		        .word +, xt_environment_q, z_environment_q
>c540		65 6e 76 69 72 6f 6e 6d		        .text "environment?"
>c548		65 6e 74 3f
.c54c						+
.c54c						nt_find:
>c54c		04 10				        .byte 4, UF
>c54e		58 c5 14 89 5b 89		        .word nt_word, xt_find, z_find
>c554		66 69 6e 64			        .text "find"
.c558						nt_word:
>c558		04 10				        .byte 4, UF
>c55a		64 c5 58 97 9b 97		        .word nt_paren, xt_word, z_word
>c560		77 6f 72 64			        .text "word"
.c564						nt_paren:
>c564		01 04				        .byte 1, IM
>c566		6d c5 43 8e 52 8e		        .word nt_dot_paren, xt_paren, z_paren
>c56c		28				        .text "("
.c56d						nt_dot_paren:
>c56d		02 04				        .byte 2, IM
>c56f		77 c5 f4 86 02 87		        .word nt_if, xt_dot_paren, z_dot_paren
>c575		2e 28				        .text ".("
.c577						nt_if:
>c577		02 0d				        .byte 2, IM+CO+NN
>c579		81 c5 3b 8a 4b 8a		        .word nt_then, xt_if, z_if
>c57f		69 66				        .text "if"
.c581						nt_then:
>c581		04 0d				        .byte 4, IM+CO+NN
>c583		8d c5 56 87 9f 87		        .word nt_else, xt_then, z_then
>c589		74 68 65 6e			        .text "then"
.c58d						nt_else:
>c58d		04 0d				        .byte 4, IM+CO+NN
>c58f		99 c5 50 87 9f 87		        .word nt_repeat, xt_else, z_else
>c595		65 6c 73 65			        .text "else"
.c599						nt_repeat:
>c599		06 0d				        .byte 6, IM+CO+NN
>c59b		a7 c5 80 90 86 90		        .word nt_until, xt_repeat, z_repeat
>c5a1		72 65 70 65 61 74		        .text "repeat"
.c5a7						nt_until:
>c5a7		05 0d				        .byte 5, IM+CO+NN
>c5a9		b4 c5 f0 96 04 97		        .word nt_while, xt_until, z_until
>c5af		75 6e 74 69 6c			        .text "until"
.c5b4						nt_while:
>c5b4		05 0d				        .byte 5, IM+CO+NN
>c5b6		c1 c5 2e 97 41 97		        .word nt_case, xt_while, z_while
>c5bc		77 68 69 6c 65			        .text "while"
.c5c1						nt_case:
>c5c1		04 0d				        .byte 4, IM+CO+NN
>c5c3		cd c5 8b 9d 91 9d		        .word nt_of, xt_case, z_case    ; shares code with ZERO
>c5c9		63 61 73 65			        .text "case"
.c5cd						nt_of:
>c5cd		02 0d				        .byte 2, IM+CO+NN
>c5cf		d7 c5 c6 8d de 8d		        .word nt_endof, xt_of, z_of
>c5d5		6f 66				        .text "of"
.c5d7						nt_endof:
>c5d7		05 0d				        .byte 5, IM+CO+NN
>c5d9		e4 c5 50 87 9f 87		        .word nt_endcase, xt_endof, z_endof ; shares code with ELSE
>c5df		65 6e 64 6f 66			        .text "endof"
.c5e4						nt_endcase:
>c5e4		07 0d				        .byte 7, IM+CO+NN
>c5e6		f3 c5 af 87 c3 87		        .word nt_defer_fetch, xt_endcase, z_endcase
>c5ec		65 6e 64 63 61 73 65		        .text "endcase"
.c5f3						nt_defer_fetch:
>c5f3		06 00				        .byte 6, 0
>c5f5		01 c6 04 86 0a 86		        .word nt_defer_store, xt_defer_fetch, z_defer_fetch
>c5fb		64 65 66 65 72 40		        .text "defer@"
.c601						nt_defer_store:
>c601		06 00				        .byte 6, 0
>c603		0f c6 0b 86 11 86		        .word nt_is, xt_defer_store, z_defer_store
>c609		64 65 66 65 72 21		        .text "defer!"
.c60f						nt_is:
>c60f		02 04				        .byte 2, IM
>c611		19 c6 9d 8a b5 8a		        .word nt_action_of, xt_is, z_is
>c617		69 73				        .text "is"
.c619						nt_action_of:
>c619		09 04				        .byte 9, IM
>c61b		2a c6 08 82 20 82		        .word nt_useraddr, xt_action_of, z_action_of
>c621		61 63 74 69 6f 6e 2d 6f		        .text "action-of"
>c629		66
.c62a						nt_useraddr:
>c62a		08 00				        .byte 8, 0
>c62c		3a c6 5f 9d 69 9d		        .word nt_buffer_colon, xt_useraddr, z_useraddr
>c632		75 73 65 72 61 64 64 72		        .text "useraddr"
.c63a						nt_buffer_colon:
>c63a		07 00				        .byte 7, 0
>c63c		49 c6 1d 83 23 83		        .word +, xt_buffer_colon, z_buffer_colon
>c642		62 75 66 66 65 72 3a		        .text "buffer:"
.c649						+
.c649						nt_buffstatus:
>c649		0a 00				        .byte 10, 0
>c64b		5b c6 82 af 87 af		        .word nt_buffblocknum, xt_buffstatus, z_buffstatus
>c651		62 75 66 66 73 74 61 74		        .text "buffstatus"
>c659		75 73
.c65b						nt_buffblocknum:
>c65b		0c 00				        .byte 12, 0
>c65d		6f c6 4c af 51 af		        .word nt_blkbuffer, xt_buffblocknum, z_buffblocknum
>c663		62 75 66 66 62 6c 6f 63		        .text "buffblocknum"
>c66b		6b 6e 75 6d
.c66f						nt_blkbuffer:
>c66f		09 00				        .byte 9, 0
>c671		80 c6 42 ad 4f ad		        .word nt_scr, xt_blkbuffer, z_blkbuffer
>c677		62 6c 6b 62 75 66 66 65		        .text "blkbuffer"
>c67f		72
.c680						nt_scr:
>c680		03 08				        .byte 3, NN
>c682		8b c6 04 b0 09 b0		        .word nt_blk, xt_scr, z_scr
>c688		73 63 72			        .text "scr"
.c68b						nt_blk:
>c68b		03 08				        .byte 3, NN
>c68d		96 c6 3d ad 42 ad		        .word nt_block_write, xt_blk, z_blk
>c693		62 6c 6b			        .text "blk"
.c696						nt_block_write:
>c696		0b 08				        .byte 11, NN ; Deferred words need the HC (Code Field) flag.
>c698		a9 c6 39 af 47 af		        .word nt_block_write_vector, xt_block_write, z_block_write
>c69e		62 6c 6f 63 6b 2d 77 72		        .text "block-write"
>c6a6		69 74 65
.c6a9						nt_block_write_vector:
>c6a9		12 08				        .byte 18, NN ; Deferred words need the HC (Code Field) flag.
>c6ab		c3 c6 47 af 4c af		        .word nt_block_read, xt_block_write_vector, z_block_write_vector
>c6b1		62 6c 6f 63 6b 2d 77 72		        .text "block-write-vector"
>c6b9		69 74 65 2d 76 65 63 74 6f 72
.c6c3						nt_block_read:
>c6c3		0a 28				        .byte 10, HC+NN ; Deferred words need the HC (Code Field) flag.
>c6c5		d5 c6 21 af 2f af		        .word nt_block_read_vector, xt_block_read, z_block_read
>c6cb		62 6c 6f 63 6b 2d 72 65		        .text "block-read"
>c6d3		61 64
.c6d5						nt_block_read_vector:
>c6d5		11 28				        .byte 17, HC+NN ; Deferred words need the HC (Code Field) flag.
>c6d7		ee c6 2f af 34 af		        .word nt_save_buffers, xt_block_read_vector, z_block_read_vector
>c6dd		62 6c 6f 63 6b 2d 72 65		        .text "block-read-vector"
>c6e5		61 64 2d 76 65 63 74 6f 72
.c6ee						nt_save_buffers:
>c6ee		0c 00				        .byte 12, 0
>c6f0		02 c7 e9 af 03 b0		        .word nt_block, xt_save_buffers, z_save_buffers
>c6f6		73 61 76 65 2d 62 75 66		        .text "save-buffers"
>c6fe		66 65 72 73
.c702						nt_block:
>c702		05 00				        .byte 5, 0
>c704		0f c7 50 ad a2 ad		        .word nt_update, xt_block, z_block
>c70a		62 6c 6f 63 6b			        .text "block"
.c70f						nt_update:
>c70f		06 00				        .byte 6, 0
>c711		1d c7 4e b0 56 b0		        .word nt_buffer, xt_update, z_update
>c717		75 70 64 61 74 65		        .text "update"
.c71d						nt_buffer:
>c71d		06 00				        .byte 6, 0
>c71f		2b c7 51 af 81 af		        .word nt_empty_buffers, xt_buffer, z_buffer
>c725		62 75 66 66 65 72		        .text "buffer"
.c72b						nt_empty_buffers:
>c72b		0d 00				        .byte 13, 0
>c72d		40 c7 87 af 8d af		        .word nt_flush, xt_empty_buffers, z_empty_buffers
>c733		65 6d 70 74 79 2d 62 75		        .text "empty-buffers"
>c73b		66 66 65 72 73
.c740						nt_flush:
>c740		05 00				        .byte 5, 0
>c742		4d c7 8e af 97 af		        .word nt_load, xt_flush, z_flush
>c748		66 6c 75 73 68			        .text "flush"
.c74d						nt_load:
>c74d		04 10				        .byte 4, UF
>c74f		59 c7 a5 af e8 af		        .word nt_thru, xt_load, z_load
>c755		6c 6f 61 64			        .text "load"
.c759						nt_thru:
>c759		04 10				        .byte 4, UF
>c75b		65 c7 09 b0 4d b0		        .word +, xt_thru, z_thru
>c761		74 68 72 75			        .text "thru"
.c765						+
.c765						nt_list:
>c765		04 10				        .byte 4, UF
>c767		71 c7 98 af a4 af		        .word nt_block_c65_init, xt_list, z_list
>c76d		6c 69 73 74			        .text "list"
.c771						nt_block_c65_init:
>c771		0e 00				        .byte 14, 0
>c773		87 c7 a3 ad d8 ad		        .word +, xt_block_c65_init, z_block_c65_init
>c779		62 6c 6f 63 6b 2d 63 36		        .text "block-c65-init"
>c781		35 2d 69 6e 69 74
.c787						+
.c787						nt_block_ramdrive_init:
>c787		13 10				        .byte 19, UF
>c789		a2 c7 fb ad 08 ae		        .word +, xt_block_ramdrive_init, z_block_ramdrive_init
>c78f		62 6c 6f 63 6b 2d 72 61		        .text "block-ramdrive-init"
>c797		6d 64 72 69 76 65 2d 69 6e 69 74
.c7a2						+
.c7a2						nt_definitions:
>c7a2		0b 00				        .byte 11, 0
>c7a4		b5 c7 8d b1 95 b1		        .word nt_wordlist, xt_definitions, z_definitions
>c7aa		64 65 66 69 6e 69 74 69		        .text "definitions"
>c7b2		6f 6e 73
.c7b5						nt_wordlist:
>c7b5		08 00				        .byte 8, 0
>c7b7		c5 c7 f8 b2 0e b3		        .word nt_search_wordlist, xt_wordlist, z_wordlist
>c7bd		77 6f 72 64 6c 69 73 74		        .text "wordlist"
.c7c5						nt_search_wordlist:
>c7c5		0f 10				        .byte 15, UF
>c7c7		dc c7 31 b2 a4 b2		        .word nt_set_current, xt_search_wordlist, z_search_wordlist
>c7cd		73 65 61 72 63 68 2d 77		        .text "search-wordlist"
>c7d5		6f 72 64 6c 69 73 74
.c7dc						nt_set_current:
>c7dc		0b 10				        .byte 11, UF
>c7de		ef c7 a5 b2 b0 b2		        .word nt_get_current, xt_set_current, z_set_current
>c7e4		73 65 74 2d 63 75 72 72		        .text "set-current"
>c7ec		65 6e 74
.c7ef						nt_get_current:
>c7ef		0b 00				        .byte 11, 0
>c7f1		02 c8 9d b1 a7 b1		        .word nt_set_order, xt_get_current, z_get_current
>c7f7		67 65 74 2d 63 75 72 72		        .text "get-current"
>c7ff		65 6e 74
.c802						nt_set_order:
>c802		09 00				        .byte 9, 0
>c804		13 c8 b1 b2 e4 b2		        .word nt_get_order, xt_set_order, z_set_order
>c80a		73 65 74 2d 6f 72 64 65		        .text "set-order"
>c812		72
.c813						nt_get_order:
>c813		09 00				        .byte 9, 0
>c815		24 c8 a8 b1 d0 b1		        .word nt_root_wordlist, xt_get_order, z_get_order
>c81b		67 65 74 2d 6f 72 64 65		        .text "get-order"
>c823		72
.c824						nt_root_wordlist:
>c824		0d 00				        .byte 13, 0
>c826		39 c8 28 b2 30 b2		        .word +, xt_root_wordlist, z_root_wordlist
>c82c		72 6f 6f 74 2d 77 6f 72		        .text "root-wordlist"
>c834		64 6c 69 73 74
.c839						+
.c839						nt_assembler_wordlist:
>c839		12 00				        .byte 18, 0
>c83b		53 c8 56 9d 5e 9d		        .word +, xt_assembler_wordlist, z_assembler_wordlist
>c841		61 73 73 65 6d 62 6c 65		        .text "assembler-wordlist"
>c849		72 2d 77 6f 72 64 6c 69 73 74
.c853						+
.c853						nt_editor_wordlist:
>c853		0f 00				        .byte 15, 0
>c855		6a c8 25 9d 2d 9d		        .word +, xt_editor_wordlist, z_editor_wordlist
>c85b		65 64 69 74 6f 72 2d 77		        .text "editor-wordlist"
>c863		6f 72 64 6c 69 73 74
.c86a						+
.c86a						nt_forth_wordlist:
>c86a		0e 00				        .byte 14, 0
>c86c		80 c8 8b 9d 91 9d		        .word nt_only, xt_forth_wordlist, z_forth_wordlist
>c872		66 6f 72 74 68 2d 77 6f		        .text "forth-wordlist"
>c87a		72 64 6c 69 73 74
.c880						nt_only:
>c880		04 00				        .byte 4, 0
>c882		8c c8 d1 b1 d7 b1		        .word nt_also, xt_only, z_only
>c888		6f 6e 6c 79			        .text "only"
.c88c						nt_also:
>c88c		04 00				        .byte 4, 0
>c88e		98 c8 7d b1 8c b1		        .word nt_previous, xt_also, z_also
>c894		61 6c 73 6f			        .text "also"
.c898						nt_previous:
>c898		08 00				        .byte 8, 0
>c89a		a8 c8 1b b2 27 b2		        .word nt_to_order, xt_previous, z_previous
>c8a0		70 72 65 76 69 6f 75 73		        .text "previous"
.c8a8						nt_to_order:
>c8a8		06 00				        .byte 6, 0
>c8aa		b6 c8 e5 b2 f7 b2		        .word nt_order, xt_to_order, z_to_order
>c8b0		3e 6f 72 64 65 72		        .text ">order"
.c8b6						nt_order:
>c8b6		05 00				        .byte 5, 0
>c8b8		c3 c8 d8 b1 02 b2		        .word nt_forth, xt_order, z_order
>c8be		6f 72 64 65 72			        .text "order"
.c8c3						nt_forth:
>c8c3		05 00				        .byte 5, 0
>c8c5		d0 c8 96 b1 9c b1		        .word +, xt_forth, z_forth
>c8cb		66 6f 72 74 68			        .text "forth"
.c8d0						+
>c8d0		03 08				nt_see: .byte 3, NN
>c8d2		db c8 bd 98 4a 99		        .word +, xt_see, z_see
>c8d8		73 65 65			        .text "see"
.c8db						+
.c8db						nt_ed:
>c8db		03 08				        .byte 3, NN
>c8dd		e6 c8 4a a7 4d a7		        .word +, xt_ed, z_ed
>c8e3		65 64 3a			        .text "ed:"
.c8e6						+
.c8e6						nt_cold:
>c8e6		04 00				        .byte 4, 0
>c8e8		f2 c8 00 80 b1 80		        .word nt_bye, xt_cold, z_cold
>c8ee		63 6f 6c 64			        .text "cold"
.c8f2						nt_bye:
>c8f2		03				        .byte 3         ; length of word strings
>c8f3		00				        .byte 0         ; status byte
>c8f4		00 00				        .word 0000      ; next word in Dictionary, 0000 signals end
>c8f6		f4 97				        .word xt_bye    ; start of code block (xt of this word)
>c8f8		f7 97				        .word z_bye     ; end of code (RTS)
>c8fa		62 79 65			        .text "bye"     ; word name, always lower case, not zero-terminated
.c8fd						root_dictionary_start:
.c8fd						nt_root_set_order:
>c8fd		09 00				        .byte 9, 0
>c8ff		0e c9 b1 b2 e4 b2		        .word nt_root_forth, xt_set_order, z_set_order
>c905		73 65 74 2d 6f 72 64 65		        .text "set-order"
>c90d		72
.c90e						nt_root_forth:
>c90e		05 00				        .byte 5, 0
>c910		1b c9 96 b1 9c b1		        .word nt_root_forth_wordlist, xt_forth, z_forth
>c916		66 6f 72 74 68			        .text "forth"
.c91b						nt_root_forth_wordlist:
>c91b		0e 00				        .byte 14, 0
>c91d		31 c9 8b 9d 91 9d		        .word nt_root_words, xt_forth_wordlist, z_forth_wordlist
>c923		66 6f 72 74 68 2d 77 6f		        .text "forth-wordlist"
>c92b		72 64 6c 69 73 74
.c931						nt_root_words:
>c931		05 00				        .byte 5, 0
>c933		00 00 4b 99 a7 99		        .word 0000, xt_words, z_words
>c939		77 6f 72 64 73			        .text "words"
.c93e						editor_dictionary_start:
.c93e						nt_editor_o:
>c93e		01 00				        .byte 1, 0
>c940		47 c9 37 b1 7c b1		        .word nt_editor_line, xt_editor_o, z_editor_o
>c946		6f				        .text "o"
.c947						nt_editor_line:
>c947		04 10				        .byte 4, UF
>c949		53 c9 1e b1 36 b1		        .word nt_editor_l, xt_editor_line, z_editor_line
>c94f		6c 69 6e 65			        .text "line"
.c953						nt_editor_l:
>c953		01 00				        .byte 1, 0
>c955		5c c9 a4 b0 1d b1		        .word nt_editor_el, xt_editor_l, z_editor_l
>c95b		6c				        .text "l"
.c95c						nt_editor_el:
>c95c		02 00				        .byte 2, 0
>c95e		66 c9 92 b0 a3 b0		        .word nt_editor_erase_screen, xt_editor_el, z_editor_el
>c964		65 6c				        .text "el"
.c966						nt_editor_erase_screen:
>c966		0c 00				        .byte 12, 0
>c968		7a c9 80 b0 91 b0		        .word nt_editor_enter_screen, xt_editor_erase_screen, z_editor_erase_screen
>c96e		65 72 61 73 65 2d 73 63		        .text "erase-screen"
>c976		72 65 65 6e
.c97a						nt_editor_enter_screen:
>c97a		0c 00				        .byte 12, 0
>c97c		00 00 64 b0 7f b0		        .word 0000, xt_editor_enter_screen, z_editor_enter_screen
>c982		65 6e 74 65 72 2d 73 63		        .text "enter-screen"
>c98a		72 65 65 6e
.c98e						assembler_dictionary_start:
.c98e						nt_asm_adc_h:
>c98e		05 0c						.byte 5, IM+NN
>c990		9b c9				                .word nt_asm_adc_x
>c992		94 a3 99 a3					.word xt_asm_adc_h, z_asm_adc_h
>c996		61 64 63 2e 23					.text "adc.#"
.c99b						nt_asm_adc_x:
>c99b		05 0c						.byte 5, IM+NN
>c99d		a8 c9				                .word nt_asm_adc_y
>c99f		99 a3 9e a3					.word xt_asm_adc_x, z_asm_adc_x
>c9a3		61 64 63 2e 78					.text "adc.x"
.c9a8						nt_asm_adc_y:
>c9a8		05 0c						.byte 5, IM+NN
>c9aa		b5 c9				                .word nt_asm_adc_z
>c9ac		9e a3 a3 a3					.word xt_asm_adc_y, z_asm_adc_y
>c9b0		61 64 63 2e 79					.text "adc.y"
.c9b5						nt_asm_adc_z:
>c9b5		05 0c						.byte 5, IM+NN
>c9b7		c2 c9				                .word nt_asm_adc_zi
>c9b9		a3 a3 a8 a3					.word xt_asm_adc_z, z_asm_adc_z
>c9bd		61 64 63 2e 7a					.text "adc.z"
.c9c2						nt_asm_adc_zi:
>c9c2		06 0c						.byte 6, IM+NN
>c9c4		d0 c9				                .word nt_asm_adc_ziy
>c9c6		a8 a3 ad a3					.word xt_asm_adc_zi, z_asm_adc_zi
>c9ca		61 64 63 2e 7a 69				.text "adc.zi"
.c9d0						nt_asm_adc_ziy:
>c9d0		07 0c						.byte 7, IM+NN
>c9d2		df c9				                .word nt_asm_adc_zx
>c9d4		ad a3 b2 a3					.word xt_asm_adc_ziy, z_asm_adc_ziy
>c9d8		61 64 63 2e 7a 69 79				.text "adc.ziy"
.c9df						nt_asm_adc_zx:
>c9df		06 0c						.byte 6, IM+NN
>c9e1		ed c9				                .word nt_asm_adc_zxi
>c9e3		b2 a3 b7 a3					.word xt_asm_adc_zx, z_asm_adc_zx
>c9e7		61 64 63 2e 7a 78				.text "adc.zx"
.c9ed						nt_asm_adc_zxi:
>c9ed		07 0c						.byte 7, IM+NN
>c9ef		fc c9				                .word nt_asm_and
>c9f1		b7 a3 bc a3					.word xt_asm_adc_zxi, z_asm_adc_zxi
>c9f5		61 64 63 2e 7a 78 69				.text "adc.zxi"
.c9fc						nt_asm_and:
>c9fc		04 0c						.byte 4, IM+NN
>c9fe		08 ca				                .word nt_asm_and_h
>ca00		bc a3 c1 a3					.word xt_asm_and, z_asm_and
>ca04		61 6e 64 2e					.text "and."
.ca08						nt_asm_and_h:
>ca08		05 0c						.byte 5, IM+NN
>ca0a		15 ca				                .word nt_asm_and_x
>ca0c		c1 a3 c6 a3					.word xt_asm_and_h, z_asm_and_h
>ca10		61 6e 64 2e 23					.text "and.#"
.ca15						nt_asm_and_x:
>ca15		05 0c						.byte 5, IM+NN
>ca17		22 ca				                .word nt_asm_and_y
>ca19		c6 a3 cb a3					.word xt_asm_and_x, z_asm_and_x
>ca1d		61 6e 64 2e 78					.text "and.x"
.ca22						nt_asm_and_y:
>ca22		05 0c						.byte 5, IM+NN
>ca24		2f ca				                .word nt_asm_and_z
>ca26		cb a3 d0 a3					.word xt_asm_and_y, z_asm_and_y
>ca2a		61 6e 64 2e 79					.text "and.y"
.ca2f						nt_asm_and_z:
>ca2f		05 0c						.byte 5, IM+NN
>ca31		3c ca				                .word nt_asm_and_zi
>ca33		d0 a3 d5 a3					.word xt_asm_and_z, z_asm_and_z
>ca37		61 6e 64 2e 7a					.text "and.z"
.ca3c						nt_asm_and_zi:
>ca3c		06 0c						.byte 6, IM+NN
>ca3e		4a ca				                .word nt_asm_and_ziy
>ca40		d5 a3 da a3					.word xt_asm_and_zi, z_asm_and_zi
>ca44		61 6e 64 2e 7a 69				.text "and.zi"
.ca4a						nt_asm_and_ziy:
>ca4a		07 0c						.byte 7, IM+NN
>ca4c		59 ca				                .word nt_asm_and_zx
>ca4e		da a3 df a3					.word xt_asm_and_ziy, z_asm_and_ziy
>ca52		61 6e 64 2e 7a 69 79				.text "and.ziy"
.ca59						nt_asm_and_zx:
>ca59		06 0c						.byte 6, IM+NN
>ca5b		67 ca				                .word nt_asm_and_zxi
>ca5d		df a3 e4 a3					.word xt_asm_and_zx, z_asm_and_zx
>ca61		61 6e 64 2e 7a 78				.text "and.zx"
.ca67						nt_asm_and_zxi:
>ca67		07 0c						.byte 7, IM+NN
>ca69		76 ca				                .word nt_asm_asl
>ca6b		e4 a3 e9 a3					.word xt_asm_and_zxi, z_asm_and_zxi
>ca6f		61 6e 64 2e 7a 78 69				.text "and.zxi"
.ca76						nt_asm_asl:
>ca76		03 0c						.byte 3, IM+NN
>ca78		81 ca				                .word nt_asm_asl_a
>ca7a		e9 a3 ee a3					.word xt_asm_asl, z_asm_asl
>ca7e		61 73 6c					.text "asl"
.ca81						nt_asm_asl_a:
>ca81		05 0c						.byte 5, IM+NN
>ca83		8e ca				                .word nt_asm_asl_x
>ca85		ee a3 f3 a3					.word xt_asm_asl_a, z_asm_asl_a
>ca89		61 73 6c 2e 61					.text "asl.a"
.ca8e						nt_asm_asl_x:
>ca8e		05 0c						.byte 5, IM+NN
>ca90		9b ca				                .word nt_asm_asl_z
>ca92		f3 a3 f8 a3					.word xt_asm_asl_x, z_asm_asl_x
>ca96		61 73 6c 2e 78					.text "asl.x"
.ca9b						nt_asm_asl_z:
>ca9b		05 0c						.byte 5, IM+NN
>ca9d		a8 ca				                .word nt_asm_asl_zx
>ca9f		f8 a3 fd a3					.word xt_asm_asl_z, z_asm_asl_z
>caa3		61 73 6c 2e 7a					.text "asl.z"
.caa8						nt_asm_asl_zx:
>caa8		06 0c						.byte 6, IM+NN
>caaa		b6 ca				                .word nt_asm_bcc
>caac		fd a3 02 a4					.word xt_asm_asl_zx, z_asm_asl_zx
>cab0		61 73 6c 2e 7a 78				.text "asl.zx"
.cab6						nt_asm_bcc:
>cab6		03 0c						.byte 3, IM+NN
>cab8		c1 ca				                .word nt_asm_bcs
>caba		02 a4 07 a4					.word xt_asm_bcc, z_asm_bcc
>cabe		62 63 63					.text "bcc"
.cac1						nt_asm_bcs:
>cac1		03 0c						.byte 3, IM+NN
>cac3		cc ca				                .word nt_asm_beq
>cac5		07 a4 0e a4					.word xt_asm_bcs, z_asm_bcs
>cac9		62 63 73					.text "bcs"
.cacc						nt_asm_beq:
>cacc		03 0c						.byte 3, IM+NN
>cace		d7 ca				                .word nt_asm_bit
>cad0		0e a4 13 a4					.word xt_asm_beq, z_asm_beq
>cad4		62 65 71					.text "beq"
.cad7						nt_asm_bit:
>cad7		03 0c						.byte 3, IM+NN
>cad9		e2 ca				                .word nt_asm_bit_h
>cadb		13 a4 18 a4					.word xt_asm_bit, z_asm_bit
>cadf		62 69 74					.text "bit"
.cae2						nt_asm_bit_h:
>cae2		05 0c						.byte 5, IM+NN
>cae4		ef ca				                .word nt_asm_bit_x
>cae6		18 a4 1d a4					.word xt_asm_bit_h, z_asm_bit_h
>caea		62 69 74 2e 23					.text "bit.#"
.caef						nt_asm_bit_x:
>caef		05 0c						.byte 5, IM+NN
>caf1		fc ca				                .word nt_asm_bit_z
>caf3		1d a4 22 a4					.word xt_asm_bit_x, z_asm_bit_x
>caf7		62 69 74 2e 78					.text "bit.x"
.cafc						nt_asm_bit_z:
>cafc		05 0c						.byte 5, IM+NN
>cafe		09 cb				                .word nt_asm_bit_zx
>cb00		22 a4 27 a4					.word xt_asm_bit_z, z_asm_bit_z
>cb04		62 69 74 2e 7a					.text "bit.z"
.cb09						nt_asm_bit_zx:
>cb09		06 0c						.byte 6, IM+NN
>cb0b		17 cb				                .word nt_asm_bmi
>cb0d		27 a4 2c a4					.word xt_asm_bit_zx, z_asm_bit_zx
>cb11		62 69 74 2e 7a 78				.text "bit.zx"
.cb17						nt_asm_bmi:
>cb17		03 0c						.byte 3, IM+NN
>cb19		22 cb				                .word nt_asm_bne
>cb1b		2c a4 31 a4					.word xt_asm_bmi, z_asm_bmi
>cb1f		62 6d 69					.text "bmi"
.cb22						nt_asm_bne:
>cb22		03 0c						.byte 3, IM+NN
>cb24		2d cb				                .word nt_asm_bpl
>cb26		31 a4 36 a4					.word xt_asm_bne, z_asm_bne
>cb2a		62 6e 65					.text "bne"
.cb2d						nt_asm_bpl:
>cb2d		03 0c						.byte 3, IM+NN
>cb2f		38 cb				                .word nt_asm_bra
>cb31		36 a4 3b a4					.word xt_asm_bpl, z_asm_bpl
>cb35		62 70 6c					.text "bpl"
.cb38						nt_asm_bra:
>cb38		03 0c						.byte 3, IM+NN
>cb3a		43 cb				                .word nt_asm_brk
>cb3c		3b a4 40 a4					.word xt_asm_bra, z_asm_bra
>cb40		62 72 61					.text "bra"
.cb43						nt_asm_brk:
>cb43		03 0c						.byte 3, IM+NN
>cb45		4e cb				                .word nt_asm_bvc
>cb47		40 a4 45 a4					.word xt_asm_brk, z_asm_brk
>cb4b		62 72 6b					.text "brk"
.cb4e						nt_asm_bvc:
>cb4e		03 0c						.byte 3, IM+NN
>cb50		59 cb				                .word nt_asm_bvs
>cb52		45 a4 4a a4					.word xt_asm_bvc, z_asm_bvc
>cb56		62 76 63					.text "bvc"
.cb59						nt_asm_bvs:
>cb59		03 0c						.byte 3, IM+NN
>cb5b		64 cb				                .word nt_asm_clc
>cb5d		4a a4 4f a4					.word xt_asm_bvs, z_asm_bvs
>cb61		62 76 73					.text "bvs"
.cb64						nt_asm_clc:
>cb64		03 0c						.byte 3, IM+NN
>cb66		6f cb				                .word nt_asm_cld
>cb68		4f a4 54 a4					.word xt_asm_clc, z_asm_clc
>cb6c		63 6c 63					.text "clc"
.cb6f						nt_asm_cld:
>cb6f		03 0c						.byte 3, IM+NN
>cb71		7a cb				                .word nt_asm_cli
>cb73		54 a4 59 a4					.word xt_asm_cld, z_asm_cld
>cb77		63 6c 64					.text "cld"
.cb7a						nt_asm_cli:
>cb7a		03 0c						.byte 3, IM+NN
>cb7c		85 cb				                .word nt_asm_clv
>cb7e		59 a4 5e a4					.word xt_asm_cli, z_asm_cli
>cb82		63 6c 69					.text "cli"
.cb85						nt_asm_clv:
>cb85		03 0c						.byte 3, IM+NN
>cb87		90 cb				                .word nt_asm_cmp
>cb89		5e a4 63 a4					.word xt_asm_clv, z_asm_clv
>cb8d		63 6c 76					.text "clv"
.cb90						nt_asm_cmp:
>cb90		03 0c						.byte 3, IM+NN
>cb92		9b cb				                .word nt_asm_cmp_h
>cb94		63 a4 68 a4					.word xt_asm_cmp, z_asm_cmp
>cb98		63 6d 70					.text "cmp"
.cb9b						nt_asm_cmp_h:
>cb9b		05 0c						.byte 5, IM+NN
>cb9d		a8 cb				                .word nt_asm_cmp_x
>cb9f		68 a4 6d a4					.word xt_asm_cmp_h, z_asm_cmp_h
>cba3		63 6d 70 2e 23					.text "cmp.#"
.cba8						nt_asm_cmp_x:
>cba8		05 0c						.byte 5, IM+NN
>cbaa		b5 cb				                .word nt_asm_cmp_y
>cbac		6d a4 72 a4					.word xt_asm_cmp_x, z_asm_cmp_x
>cbb0		63 6d 70 2e 78					.text "cmp.x"
.cbb5						nt_asm_cmp_y:
>cbb5		05 0c						.byte 5, IM+NN
>cbb7		c2 cb				                .word nt_asm_cmp_z
>cbb9		72 a4 77 a4					.word xt_asm_cmp_y, z_asm_cmp_y
>cbbd		63 6d 70 2e 79					.text "cmp.y"
.cbc2						nt_asm_cmp_z:
>cbc2		05 0c						.byte 5, IM+NN
>cbc4		cf cb				                .word nt_asm_cmp_zi
>cbc6		77 a4 7c a4					.word xt_asm_cmp_z, z_asm_cmp_z
>cbca		63 6d 70 2e 7a					.text "cmp.z"
.cbcf						nt_asm_cmp_zi:
>cbcf		06 0c						.byte 6, IM+NN
>cbd1		dd cb				                .word nt_asm_cmp_ziy
>cbd3		7c a4 81 a4					.word xt_asm_cmp_zi, z_asm_cmp_zi
>cbd7		63 6d 70 2e 7a 69				.text "cmp.zi"
.cbdd						nt_asm_cmp_ziy:
>cbdd		07 0c						.byte 7, IM+NN
>cbdf		ec cb				                .word nt_asm_cmp_zx
>cbe1		81 a4 86 a4					.word xt_asm_cmp_ziy, z_asm_cmp_ziy
>cbe5		63 6d 70 2e 7a 69 79				.text "cmp.ziy"
.cbec						nt_asm_cmp_zx:
>cbec		06 0c						.byte 6, IM+NN
>cbee		fa cb				                .word nt_asm_cmp_zxi
>cbf0		86 a4 8b a4					.word xt_asm_cmp_zx, z_asm_cmp_zx
>cbf4		63 6d 70 2e 7a 78				.text "cmp.zx"
.cbfa						nt_asm_cmp_zxi:
>cbfa		07 0c						.byte 7, IM+NN
>cbfc		09 cc				                .word nt_asm_cpx
>cbfe		8b a4 90 a4					.word xt_asm_cmp_zxi, z_asm_cmp_zxi
>cc02		63 6d 70 2e 7a 78 69				.text "cmp.zxi"
.cc09						nt_asm_cpx:
>cc09		03 0c						.byte 3, IM+NN
>cc0b		14 cc				                .word nt_asm_cpx_h
>cc0d		90 a4 95 a4					.word xt_asm_cpx, z_asm_cpx
>cc11		63 70 78					.text "cpx"
.cc14						nt_asm_cpx_h:
>cc14		05 0c						.byte 5, IM+NN
>cc16		21 cc				                .word nt_asm_cpx_z
>cc18		95 a4 9a a4					.word xt_asm_cpx_h, z_asm_cpx_h
>cc1c		63 70 78 2e 23					.text "cpx.#"
.cc21						nt_asm_cpx_z:
>cc21		05 0c						.byte 5, IM+NN
>cc23		2e cc				                .word nt_asm_cpy
>cc25		9a a4 9f a4					.word xt_asm_cpx_z, z_asm_cpx_z
>cc29		63 70 78 2e 7a					.text "cpx.z"
.cc2e						nt_asm_cpy:
>cc2e		03 0c						.byte 3, IM+NN
>cc30		39 cc				                .word nt_asm_cpy_h
>cc32		9f a4 a6 a4					.word xt_asm_cpy, z_asm_cpy
>cc36		63 70 79					.text "cpy"
.cc39						nt_asm_cpy_h:
>cc39		05 0c						.byte 5, IM+NN
>cc3b		46 cc				                .word nt_asm_cpy_z
>cc3d		a6 a4 ab a4					.word xt_asm_cpy_h, z_asm_cpy_h
>cc41		63 70 79 2e 23					.text "cpy.#"
.cc46						nt_asm_cpy_z:
>cc46		05 0c						.byte 5, IM+NN
>cc48		53 cc				                .word nt_asm_dec
>cc4a		ab a4 b0 a4					.word xt_asm_cpy_z, z_asm_cpy_z
>cc4e		63 70 79 2e 7a					.text "cpy.z"
.cc53						nt_asm_dec:
>cc53		03 0c						.byte 3, IM+NN
>cc55		5e cc				                .word nt_asm_dec_a
>cc57		b0 a4 b5 a4					.word xt_asm_dec, z_asm_dec
>cc5b		64 65 63					.text "dec"
.cc5e						nt_asm_dec_a:
>cc5e		05 0c						.byte 5, IM+NN
>cc60		6b cc				                .word nt_asm_dec_x
>cc62		b5 a4 ba a4					.word xt_asm_dec_a, z_asm_dec_a
>cc66		64 65 63 2e 61					.text "dec.a"
.cc6b						nt_asm_dec_x:
>cc6b		05 0c						.byte 5, IM+NN
>cc6d		78 cc				                .word nt_asm_dec_z
>cc6f		ba a4 bf a4					.word xt_asm_dec_x, z_asm_dec_x
>cc73		64 65 63 2e 78					.text "dec.x"
.cc78						nt_asm_dec_z:
>cc78		05 0c						.byte 5, IM+NN
>cc7a		85 cc				                .word nt_asm_dec_zx
>cc7c		bf a4 c4 a4					.word xt_asm_dec_z, z_asm_dec_z
>cc80		64 65 63 2e 7a					.text "dec.z"
.cc85						nt_asm_dec_zx:
>cc85		06 0c						.byte 6, IM+NN
>cc87		93 cc				                .word nt_asm_dex
>cc89		c4 a4 c9 a4					.word xt_asm_dec_zx, z_asm_dec_zx
>cc8d		64 65 63 2e 7a 78				.text "dec.zx"
.cc93						nt_asm_dex:
>cc93		03 0c						.byte 3, IM+NN
>cc95		9e cc				                .word nt_asm_dey
>cc97		c9 a4 ce a4					.word xt_asm_dex, z_asm_dex
>cc9b		64 65 78					.text "dex"
.cc9e						nt_asm_dey:
>cc9e		03 0c						.byte 3, IM+NN
>cca0		a9 cc				                .word nt_asm_eor
>cca2		ce a4 d3 a4					.word xt_asm_dey, z_asm_dey
>cca6		64 65 79					.text "dey"
.cca9						nt_asm_eor:
>cca9		03 0c						.byte 3, IM+NN
>ccab		b4 cc				                .word nt_asm_eor_h
>ccad		d3 a4 d8 a4					.word xt_asm_eor, z_asm_eor
>ccb1		65 6f 72					.text "eor"
.ccb4						nt_asm_eor_h:
>ccb4		05 0c						.byte 5, IM+NN
>ccb6		c1 cc				                .word nt_asm_eor_x
>ccb8		d8 a4 dd a4					.word xt_asm_eor_h, z_asm_eor_h
>ccbc		65 6f 72 2e 23					.text "eor.#"
.ccc1						nt_asm_eor_x:
>ccc1		05 0c						.byte 5, IM+NN
>ccc3		ce cc				                .word nt_asm_eor_y
>ccc5		dd a4 e2 a4					.word xt_asm_eor_x, z_asm_eor_x
>ccc9		65 6f 72 2e 78					.text "eor.x"
.ccce						nt_asm_eor_y:
>ccce		05 0c						.byte 5, IM+NN
>ccd0		db cc				                .word nt_asm_eor_z
>ccd2		e2 a4 e7 a4					.word xt_asm_eor_y, z_asm_eor_y
>ccd6		65 6f 72 2e 79					.text "eor.y"
.ccdb						nt_asm_eor_z:
>ccdb		05 0c						.byte 5, IM+NN
>ccdd		e8 cc				                .word nt_asm_eor_zi
>ccdf		e7 a4 ec a4					.word xt_asm_eor_z, z_asm_eor_z
>cce3		65 6f 72 2e 7a					.text "eor.z"
.cce8						nt_asm_eor_zi:
>cce8		06 0c						.byte 6, IM+NN
>ccea		f6 cc				                .word nt_asm_eor_ziy
>ccec		ec a4 f1 a4					.word xt_asm_eor_zi, z_asm_eor_zi
>ccf0		65 6f 72 2e 7a 69				.text "eor.zi"
.ccf6						nt_asm_eor_ziy:
>ccf6		07 0c						.byte 7, IM+NN
>ccf8		05 cd				                .word nt_asm_eor_zx
>ccfa		f1 a4 f6 a4					.word xt_asm_eor_ziy, z_asm_eor_ziy
>ccfe		65 6f 72 2e 7a 69 79				.text "eor.ziy"
.cd05						nt_asm_eor_zx:
>cd05		06 0c						.byte 6, IM+NN
>cd07		13 cd				                .word nt_asm_eor_zxi
>cd09		f6 a4 fb a4					.word xt_asm_eor_zx, z_asm_eor_zx
>cd0d		65 6f 72 2e 7a 78				.text "eor.zx"
.cd13						nt_asm_eor_zxi:
>cd13		07 0c						.byte 7, IM+NN
>cd15		22 cd				                .word nt_asm_inc
>cd17		fb a4 00 a5					.word xt_asm_eor_zxi, z_asm_eor_zxi
>cd1b		65 6f 72 2e 7a 78 69				.text "eor.zxi"
.cd22						nt_asm_inc:
>cd22		03 0c						.byte 3, IM+NN
>cd24		2d cd				                .word nt_asm_inc_a
>cd26		00 a5 05 a5					.word xt_asm_inc, z_asm_inc
>cd2a		69 6e 63					.text "inc"
.cd2d						nt_asm_inc_a:
>cd2d		05 0c						.byte 5, IM+NN
>cd2f		3a cd				                .word nt_asm_inc_x
>cd31		05 a5 0a a5					.word xt_asm_inc_a, z_asm_inc_a
>cd35		69 6e 63 2e 61					.text "inc.a"
.cd3a						nt_asm_inc_x:
>cd3a		05 0c						.byte 5, IM+NN
>cd3c		47 cd				                .word nt_asm_inc_z
>cd3e		0a a5 0f a5					.word xt_asm_inc_x, z_asm_inc_x
>cd42		69 6e 63 2e 78					.text "inc.x"
.cd47						nt_asm_inc_z:
>cd47		05 0c						.byte 5, IM+NN
>cd49		54 cd				                .word nt_asm_inc_zx
>cd4b		0f a5 14 a5					.word xt_asm_inc_z, z_asm_inc_z
>cd4f		69 6e 63 2e 7a					.text "inc.z"
.cd54						nt_asm_inc_zx:
>cd54		06 0c						.byte 6, IM+NN
>cd56		62 cd				                .word nt_asm_inx
>cd58		14 a5 19 a5					.word xt_asm_inc_zx, z_asm_inc_zx
>cd5c		69 6e 63 2e 7a 78				.text "inc.zx"
.cd62						nt_asm_inx:
>cd62		03 0c						.byte 3, IM+NN
>cd64		6d cd				                .word nt_asm_iny
>cd66		19 a5 1e a5					.word xt_asm_inx, z_asm_inx
>cd6a		69 6e 78					.text "inx"
.cd6d						nt_asm_iny:
>cd6d		03 0c						.byte 3, IM+NN
>cd6f		78 cd				                .word nt_asm_jmp
>cd71		1e a5 23 a5					.word xt_asm_iny, z_asm_iny
>cd75		69 6e 79					.text "iny"
.cd78						nt_asm_jmp:
>cd78		03 0c						.byte 3, IM+NN
>cd7a		83 cd				                .word nt_asm_jmp_i
>cd7c		23 a5 28 a5					.word xt_asm_jmp, z_asm_jmp
>cd80		6a 6d 70					.text "jmp"
.cd83						nt_asm_jmp_i:
>cd83		05 0c						.byte 5, IM+NN
>cd85		90 cd				                .word nt_asm_jmp_xi
>cd87		28 a5 2d a5					.word xt_asm_jmp_i, z_asm_jmp_i
>cd8b		6a 6d 70 2e 69					.text "jmp.i"
.cd90						nt_asm_jmp_xi:
>cd90		06 0c						.byte 6, IM+NN
>cd92		9e cd				                .word nt_asm_jsr
>cd94		2d a5 32 a5					.word xt_asm_jmp_xi, z_asm_jmp_xi
>cd98		6a 6d 70 2e 78 69				.text "jmp.xi"
.cd9e						nt_asm_jsr:
>cd9e		03 0c						.byte 3, IM+NN
>cda0		a9 cd				                .word nt_asm_lda
>cda2		32 a5 37 a5					.word xt_asm_jsr, z_asm_jsr
>cda6		6a 73 72					.text "jsr"
.cda9						nt_asm_lda:
>cda9		03 0c						.byte 3, IM+NN
>cdab		b4 cd				                .word nt_asm_lda_h
>cdad		37 a5 3c a5					.word xt_asm_lda, z_asm_lda
>cdb1		6c 64 61					.text "lda"
.cdb4						nt_asm_lda_h:
>cdb4		05 0c						.byte 5, IM+NN
>cdb6		c1 cd				                .word nt_asm_lda_x
>cdb8		3c a5 41 a5					.word xt_asm_lda_h, z_asm_lda_h
>cdbc		6c 64 61 2e 23					.text "lda.#"
.cdc1						nt_asm_lda_x:
>cdc1		05 0c						.byte 5, IM+NN
>cdc3		ce cd				                .word nt_asm_lda_y
>cdc5		41 a5 46 a5					.word xt_asm_lda_x, z_asm_lda_x
>cdc9		6c 64 61 2e 78					.text "lda.x"
.cdce						nt_asm_lda_y:
>cdce		05 0c						.byte 5, IM+NN
>cdd0		db cd				                .word nt_asm_lda_z
>cdd2		46 a5 4b a5					.word xt_asm_lda_y, z_asm_lda_y
>cdd6		6c 64 61 2e 79					.text "lda.y"
.cddb						nt_asm_lda_z:
>cddb		05 0c						.byte 5, IM+NN
>cddd		e8 cd				                .word nt_asm_lda_zi
>cddf		4b a5 50 a5					.word xt_asm_lda_z, z_asm_lda_z
>cde3		6c 64 61 2e 7a					.text "lda.z"
.cde8						nt_asm_lda_zi:
>cde8		06 0c						.byte 6, IM+NN
>cdea		f6 cd				                .word nt_asm_lda_ziy
>cdec		50 a5 55 a5					.word xt_asm_lda_zi, z_asm_lda_zi
>cdf0		6c 64 61 2e 7a 69				.text "lda.zi"
.cdf6						nt_asm_lda_ziy:
>cdf6		07 0c						.byte 7, IM+NN
>cdf8		05 ce				                .word nt_asm_lda_zx
>cdfa		55 a5 5a a5					.word xt_asm_lda_ziy, z_asm_lda_ziy
>cdfe		6c 64 61 2e 7a 69 79				.text "lda.ziy"
.ce05						nt_asm_lda_zx:
>ce05		06 0c						.byte 6, IM+NN
>ce07		13 ce				                .word nt_asm_lda_zxi
>ce09		5a a5 5f a5					.word xt_asm_lda_zx, z_asm_lda_zx
>ce0d		6c 64 61 2e 7a 78				.text "lda.zx"
.ce13						nt_asm_lda_zxi:
>ce13		07 0c						.byte 7, IM+NN
>ce15		22 ce				                .word nt_asm_ldx
>ce17		5f a5 64 a5					.word xt_asm_lda_zxi, z_asm_lda_zxi
>ce1b		6c 64 61 2e 7a 78 69				.text "lda.zxi"
.ce22						nt_asm_ldx:
>ce22		03 0c						.byte 3, IM+NN
>ce24		2d ce				                .word nt_asm_ldx_h
>ce26		64 a5 69 a5					.word xt_asm_ldx, z_asm_ldx
>ce2a		6c 64 78					.text "ldx"
.ce2d						nt_asm_ldx_h:
>ce2d		05 0c						.byte 5, IM+NN
>ce2f		3a ce				                .word nt_asm_ldx_y
>ce31		69 a5 6e a5					.word xt_asm_ldx_h, z_asm_ldx_h
>ce35		6c 64 78 2e 23					.text "ldx.#"
.ce3a						nt_asm_ldx_y:
>ce3a		05 0c						.byte 5, IM+NN
>ce3c		47 ce				                .word nt_asm_ldx_z
>ce3e		6e a5 73 a5					.word xt_asm_ldx_y, z_asm_ldx_y
>ce42		6c 64 78 2e 79					.text "ldx.y"
.ce47						nt_asm_ldx_z:
>ce47		05 0c						.byte 5, IM+NN
>ce49		54 ce				                .word nt_asm_ldx_zy
>ce4b		73 a5 78 a5					.word xt_asm_ldx_z, z_asm_ldx_z
>ce4f		6c 64 78 2e 7a					.text "ldx.z"
.ce54						nt_asm_ldx_zy:
>ce54		06 0c						.byte 6, IM+NN
>ce56		62 ce				                .word nt_asm_ldy
>ce58		78 a5 7d a5					.word xt_asm_ldx_zy, z_asm_ldx_zy
>ce5c		6c 64 78 2e 7a 79				.text "ldx.zy"
.ce62						nt_asm_ldy:
>ce62		03 0c						.byte 3, IM+NN
>ce64		6d ce				                .word nt_asm_ldy_h
>ce66		7d a5 82 a5					.word xt_asm_ldy, z_asm_ldy
>ce6a		6c 64 79					.text "ldy"
.ce6d						nt_asm_ldy_h:
>ce6d		05 0c						.byte 5, IM+NN
>ce6f		7a ce				                .word nt_asm_ldy_x
>ce71		82 a5 87 a5					.word xt_asm_ldy_h, z_asm_ldy_h
>ce75		6c 64 79 2e 23					.text "ldy.#"
.ce7a						nt_asm_ldy_x:
>ce7a		05 0c						.byte 5, IM+NN
>ce7c		87 ce				                .word nt_asm_ldy_z
>ce7e		87 a5 8c a5					.word xt_asm_ldy_x, z_asm_ldy_x
>ce82		6c 64 79 2e 78					.text "ldy.x"
.ce87						nt_asm_ldy_z:
>ce87		05 0c						.byte 5, IM+NN
>ce89		94 ce				                .word nt_asm_ldy_zx
>ce8b		8c a5 91 a5					.word xt_asm_ldy_z, z_asm_ldy_z
>ce8f		6c 64 79 2e 7a					.text "ldy.z"
.ce94						nt_asm_ldy_zx:
>ce94		06 0c						.byte 6, IM+NN
>ce96		a2 ce				                .word nt_asm_lsr
>ce98		91 a5 96 a5					.word xt_asm_ldy_zx, z_asm_ldy_zx
>ce9c		6c 64 79 2e 7a 78				.text "ldy.zx"
.cea2						nt_asm_lsr:
>cea2		03 0c						.byte 3, IM+NN
>cea4		ad ce				                .word nt_asm_lsr_a
>cea6		96 a5 9b a5					.word xt_asm_lsr, z_asm_lsr
>ceaa		6c 73 72					.text "lsr"
.cead						nt_asm_lsr_a:
>cead		05 0c						.byte 5, IM+NN
>ceaf		ba ce				                .word nt_asm_lsr_x
>ceb1		9b a5 a0 a5					.word xt_asm_lsr_a, z_asm_lsr_a
>ceb5		6c 73 72 2e 61					.text "lsr.a"
.ceba						nt_asm_lsr_x:
>ceba		05 0c						.byte 5, IM+NN
>cebc		c7 ce				                .word nt_asm_lsr_z
>cebe		a0 a5 a5 a5					.word xt_asm_lsr_x, z_asm_lsr_x
>cec2		6c 73 72 2e 78					.text "lsr.x"
.cec7						nt_asm_lsr_z:
>cec7		05 0c						.byte 5, IM+NN
>cec9		d4 ce				                .word nt_asm_lsr_zx
>cecb		a5 a5 aa a5					.word xt_asm_lsr_z, z_asm_lsr_z
>cecf		6c 73 72 2e 7a					.text "lsr.z"
.ced4						nt_asm_lsr_zx:
>ced4		06 0c						.byte 6, IM+NN
>ced6		e2 ce				                .word nt_asm_nop
>ced8		aa a5 af a5					.word xt_asm_lsr_zx, z_asm_lsr_zx
>cedc		6c 73 72 2e 7a 78				.text "lsr.zx"
.cee2						nt_asm_nop:
>cee2		03 0c						.byte 3, IM+NN
>cee4		ed ce				                .word nt_asm_ora
>cee6		af a5 b4 a5					.word xt_asm_nop, z_asm_nop
>ceea		6e 6f 70					.text "nop"
.ceed						nt_asm_ora:
>ceed		03 0c						.byte 3, IM+NN
>ceef		f8 ce				                .word nt_asm_ora_h
>cef1		b4 a5 b9 a5					.word xt_asm_ora, z_asm_ora
>cef5		6f 72 61					.text "ora"
.cef8						nt_asm_ora_h:
>cef8		05 0c						.byte 5, IM+NN
>cefa		05 cf				                .word nt_asm_ora_x
>cefc		b9 a5 be a5					.word xt_asm_ora_h, z_asm_ora_h
>cf00		6f 72 61 2e 23					.text "ora.#"
.cf05						nt_asm_ora_x:
>cf05		05 0c						.byte 5, IM+NN
>cf07		12 cf				                .word nt_asm_ora_y
>cf09		be a5 c3 a5					.word xt_asm_ora_x, z_asm_ora_x
>cf0d		6f 72 61 2e 78					.text "ora.x"
.cf12						nt_asm_ora_y:
>cf12		05 0c						.byte 5, IM+NN
>cf14		1f cf				                .word nt_asm_ora_z
>cf16		c3 a5 c8 a5					.word xt_asm_ora_y, z_asm_ora_y
>cf1a		6f 72 61 2e 79					.text "ora.y"
.cf1f						nt_asm_ora_z:
>cf1f		05 0c						.byte 5, IM+NN
>cf21		2c cf				                .word nt_asm_ora_zi
>cf23		c8 a5 cd a5					.word xt_asm_ora_z, z_asm_ora_z
>cf27		6f 72 61 2e 7a					.text "ora.z"
.cf2c						nt_asm_ora_zi:
>cf2c		06 0c						.byte 6, IM+NN
>cf2e		3a cf				                .word nt_asm_ora_ziy
>cf30		cd a5 d4 a5					.word xt_asm_ora_zi, z_asm_ora_zi
>cf34		6f 72 61 2e 7a 69				.text "ora.zi"
.cf3a						nt_asm_ora_ziy:
>cf3a		07 0c						.byte 7, IM+NN
>cf3c		49 cf				                .word nt_asm_ora_zx
>cf3e		d4 a5 d9 a5					.word xt_asm_ora_ziy, z_asm_ora_ziy
>cf42		6f 72 61 2e 7a 69 79				.text "ora.ziy"
.cf49						nt_asm_ora_zx:
>cf49		06 0c						.byte 6, IM+NN
>cf4b		57 cf				                .word nt_asm_ora_zxi
>cf4d		d9 a5 de a5					.word xt_asm_ora_zx, z_asm_ora_zx
>cf51		6f 72 61 2e 7a 78				.text "ora.zx"
.cf57						nt_asm_ora_zxi:
>cf57		07 0c						.byte 7, IM+NN
>cf59		66 cf				                .word nt_asm_pha
>cf5b		de a5 e3 a5					.word xt_asm_ora_zxi, z_asm_ora_zxi
>cf5f		6f 72 61 2e 7a 78 69				.text "ora.zxi"
.cf66						nt_asm_pha:
>cf66		03 0c						.byte 3, IM+NN
>cf68		71 cf				                .word nt_asm_php
>cf6a		e3 a5 e8 a5					.word xt_asm_pha, z_asm_pha
>cf6e		70 68 61					.text "pha"
.cf71						nt_asm_php:
>cf71		03 0c						.byte 3, IM+NN
>cf73		7c cf				                .word nt_asm_phx
>cf75		e8 a5 ed a5					.word xt_asm_php, z_asm_php
>cf79		70 68 70					.text "php"
.cf7c						nt_asm_phx:
>cf7c		03 0c						.byte 3, IM+NN
>cf7e		87 cf				                .word nt_asm_phy
>cf80		ed a5 f2 a5					.word xt_asm_phx, z_asm_phx
>cf84		70 68 78					.text "phx"
.cf87						nt_asm_phy:
>cf87		03 0c						.byte 3, IM+NN
>cf89		92 cf				                .word nt_asm_pla
>cf8b		f2 a5 f7 a5					.word xt_asm_phy, z_asm_phy
>cf8f		70 68 79					.text "phy"
.cf92						nt_asm_pla:
>cf92		03 0c						.byte 3, IM+NN
>cf94		9d cf				                .word nt_asm_plp
>cf96		f7 a5 fc a5					.word xt_asm_pla, z_asm_pla
>cf9a		70 6c 61					.text "pla"
.cf9d						nt_asm_plp:
>cf9d		03 0c						.byte 3, IM+NN
>cf9f		a8 cf				                .word nt_asm_plx
>cfa1		fc a5 01 a6					.word xt_asm_plp, z_asm_plp
>cfa5		70 6c 70					.text "plp"
.cfa8						nt_asm_plx:
>cfa8		03 0c						.byte 3, IM+NN
>cfaa		b3 cf				                .word nt_asm_ply
>cfac		01 a6 06 a6					.word xt_asm_plx, z_asm_plx
>cfb0		70 6c 78					.text "plx"
.cfb3						nt_asm_ply:
>cfb3		03 0c						.byte 3, IM+NN
>cfb5		be cf				                .word nt_asm_rol
>cfb7		06 a6 0b a6					.word xt_asm_ply, z_asm_ply
>cfbb		70 6c 79					.text "ply"
.cfbe						nt_asm_rol:
>cfbe		03 0c						.byte 3, IM+NN
>cfc0		c9 cf				                .word nt_asm_rol_a
>cfc2		0b a6 10 a6					.word xt_asm_rol, z_asm_rol
>cfc6		72 6f 6c					.text "rol"
.cfc9						nt_asm_rol_a:
>cfc9		05 0c						.byte 5, IM+NN
>cfcb		d6 cf				                .word nt_asm_rol_x
>cfcd		10 a6 15 a6					.word xt_asm_rol_a, z_asm_rol_a
>cfd1		72 6f 6c 2e 61					.text "rol.a"
.cfd6						nt_asm_rol_x:
>cfd6		05 0c						.byte 5, IM+NN
>cfd8		e3 cf				                .word nt_asm_rol_z
>cfda		15 a6 1a a6					.word xt_asm_rol_x, z_asm_rol_x
>cfde		72 6f 6c 2e 78					.text "rol.x"
.cfe3						nt_asm_rol_z:
>cfe3		05 0c						.byte 5, IM+NN
>cfe5		f0 cf				                .word nt_asm_rol_zx
>cfe7		1a a6 1f a6					.word xt_asm_rol_z, z_asm_rol_z
>cfeb		72 6f 6c 2e 7a					.text "rol.z"
.cff0						nt_asm_rol_zx:
>cff0		06 0c						.byte 6, IM+NN
>cff2		fe cf				                .word nt_asm_ror
>cff4		1f a6 24 a6					.word xt_asm_rol_zx, z_asm_rol_zx
>cff8		72 6f 6c 2e 7a 78				.text "rol.zx"
.cffe						nt_asm_ror:
>cffe		03 0c						.byte 3, IM+NN
>d000		09 d0				                .word nt_asm_ror_a
>d002		24 a6 29 a6					.word xt_asm_ror, z_asm_ror
>d006		72 6f 72					.text "ror"
.d009						nt_asm_ror_a:
>d009		05 0c						.byte 5, IM+NN
>d00b		16 d0				                .word nt_asm_ror_x
>d00d		29 a6 2e a6					.word xt_asm_ror_a, z_asm_ror_a
>d011		72 6f 72 2e 61					.text "ror.a"
.d016						nt_asm_ror_x:
>d016		05 0c						.byte 5, IM+NN
>d018		23 d0				                .word nt_asm_ror_z
>d01a		2e a6 33 a6					.word xt_asm_ror_x, z_asm_ror_x
>d01e		72 6f 72 2e 78					.text "ror.x"
.d023						nt_asm_ror_z:
>d023		05 0c						.byte 5, IM+NN
>d025		30 d0				                .word nt_asm_ror_zx
>d027		33 a6 38 a6					.word xt_asm_ror_z, z_asm_ror_z
>d02b		72 6f 72 2e 7a					.text "ror.z"
.d030						nt_asm_ror_zx:
>d030		06 0c						.byte 6, IM+NN
>d032		3e d0				                .word nt_asm_rti
>d034		38 a6 3d a6					.word xt_asm_ror_zx, z_asm_ror_zx
>d038		72 6f 72 2e 7a 78				.text "ror.zx"
.d03e						nt_asm_rti:
>d03e		03 0c						.byte 3, IM+NN
>d040		49 d0				                .word nt_asm_rts
>d042		3d a6 42 a6					.word xt_asm_rti, z_asm_rti
>d046		72 74 69					.text "rti"
.d049						nt_asm_rts:
>d049		03 0c						.byte 3, IM+NN
>d04b		54 d0				                .word nt_asm_sbc
>d04d		42 a6 47 a6					.word xt_asm_rts, z_asm_rts
>d051		72 74 73					.text "rts"
.d054						nt_asm_sbc:
>d054		03 0c						.byte 3, IM+NN
>d056		5f d0				                .word nt_asm_sbc_h
>d058		47 a6 4c a6					.word xt_asm_sbc, z_asm_sbc
>d05c		73 62 63					.text "sbc"
.d05f						nt_asm_sbc_h:
>d05f		05 0c						.byte 5, IM+NN
>d061		6c d0				                .word nt_asm_sbc_x
>d063		4c a6 51 a6					.word xt_asm_sbc_h, z_asm_sbc_h
>d067		73 62 63 2e 23					.text "sbc.#"
.d06c						nt_asm_sbc_x:
>d06c		05 0c						.byte 5, IM+NN
>d06e		79 d0				                .word nt_asm_sbc_y
>d070		51 a6 56 a6					.word xt_asm_sbc_x, z_asm_sbc_x
>d074		73 62 63 2e 78					.text "sbc.x"
.d079						nt_asm_sbc_y:
>d079		05 0c						.byte 5, IM+NN
>d07b		86 d0				                .word nt_asm_sbc_z
>d07d		56 a6 5b a6					.word xt_asm_sbc_y, z_asm_sbc_y
>d081		73 62 63 2e 79					.text "sbc.y"
.d086						nt_asm_sbc_z:
>d086		05 0c						.byte 5, IM+NN
>d088		93 d0				                .word nt_asm_sbc_zi
>d08a		5b a6 60 a6					.word xt_asm_sbc_z, z_asm_sbc_z
>d08e		73 62 63 2e 7a					.text "sbc.z"
.d093						nt_asm_sbc_zi:
>d093		06 0c						.byte 6, IM+NN
>d095		a1 d0				                .word nt_asm_sbc_ziy
>d097		60 a6 65 a6					.word xt_asm_sbc_zi, z_asm_sbc_zi
>d09b		73 62 63 2e 7a 69				.text "sbc.zi"
.d0a1						nt_asm_sbc_ziy:
>d0a1		07 0c						.byte 7, IM+NN
>d0a3		b0 d0				                .word nt_asm_sbc_zx
>d0a5		65 a6 6a a6					.word xt_asm_sbc_ziy, z_asm_sbc_ziy
>d0a9		73 62 63 2e 7a 69 79				.text "sbc.ziy"
.d0b0						nt_asm_sbc_zx:
>d0b0		06 0c						.byte 6, IM+NN
>d0b2		be d0				                .word nt_asm_sbc_zxi
>d0b4		6a a6 6f a6					.word xt_asm_sbc_zx, z_asm_sbc_zx
>d0b8		73 62 63 2e 7a 78				.text "sbc.zx"
.d0be						nt_asm_sbc_zxi:
>d0be		07 0c						.byte 7, IM+NN
>d0c0		cd d0				                .word nt_asm_sec
>d0c2		6f a6 73 a6					.word xt_asm_sbc_zxi, z_asm_sbc_zxi
>d0c6		73 62 63 2e 7a 78 69				.text "sbc.zxi"
.d0cd						nt_asm_sec:
>d0cd		03 0c						.byte 3, IM+NN
>d0cf		d8 d0				                .word nt_asm_sed
>d0d1		73 a6 77 a6					.word xt_asm_sec, z_asm_sec
>d0d5		73 65 63					.text "sec"
.d0d8						nt_asm_sed:
>d0d8		03 0c						.byte 3, IM+NN
>d0da		e3 d0				                .word nt_asm_sei
>d0dc		77 a6 7b a6					.word xt_asm_sed, z_asm_sed
>d0e0		73 65 64					.text "sed"
.d0e3						nt_asm_sei:
>d0e3		03 0c						.byte 3, IM+NN
>d0e5		ee d0				                .word nt_asm_sta
>d0e7		7b a6 7f a6					.word xt_asm_sei, z_asm_sei
>d0eb		73 65 69					.text "sei"
.d0ee						nt_asm_sta:
>d0ee		03 0c						.byte 3, IM+NN
>d0f0		f9 d0				                .word nt_asm_sta_x
>d0f2		7f a6 83 a6					.word xt_asm_sta, z_asm_sta
>d0f6		73 74 61					.text "sta"
.d0f9						nt_asm_sta_x:
>d0f9		05 0c						.byte 5, IM+NN
>d0fb		06 d1				                .word nt_asm_sta_y
>d0fd		83 a6 87 a6					.word xt_asm_sta_x, z_asm_sta_x
>d101		73 74 61 2e 78					.text "sta.x"
.d106						nt_asm_sta_y:
>d106		05 0c						.byte 5, IM+NN
>d108		13 d1				                .word nt_asm_sta_z
>d10a		87 a6 8b a6					.word xt_asm_sta_y, z_asm_sta_y
>d10e		73 74 61 2e 79					.text "sta.y"
.d113						nt_asm_sta_z:
>d113		05 0c						.byte 5, IM+NN
>d115		20 d1				                .word nt_asm_sta_zi
>d117		8b a6 8f a6					.word xt_asm_sta_z, z_asm_sta_z
>d11b		73 74 61 2e 7a					.text "sta.z"
.d120						nt_asm_sta_zi:
>d120		06 0c						.byte 6, IM+NN
>d122		2e d1				                .word nt_asm_sta_ziy
>d124		8f a6 93 a6					.word xt_asm_sta_zi, z_asm_sta_zi
>d128		73 74 61 2e 7a 69				.text "sta.zi"
.d12e						nt_asm_sta_ziy:
>d12e		07 0c						.byte 7, IM+NN
>d130		3d d1				                .word nt_asm_sta_zx
>d132		93 a6 97 a6					.word xt_asm_sta_ziy, z_asm_sta_ziy
>d136		73 74 61 2e 7a 69 79				.text "sta.ziy"
.d13d						nt_asm_sta_zx:
>d13d		06 0c						.byte 6, IM+NN
>d13f		4b d1				                .word nt_asm_sta_zxi
>d141		97 a6 9b a6					.word xt_asm_sta_zx, z_asm_sta_zx
>d145		73 74 61 2e 7a 78				.text "sta.zx"
.d14b						nt_asm_sta_zxi:
>d14b		07 0c						.byte 7, IM+NN
>d14d		5a d1				                .word nt_asm_stx
>d14f		9b a6 9f a6					.word xt_asm_sta_zxi, z_asm_sta_zxi
>d153		73 74 61 2e 7a 78 69				.text "sta.zxi"
.d15a						nt_asm_stx:
>d15a		03 0c						.byte 3, IM+NN
>d15c		65 d1				                .word nt_asm_stx_z
>d15e		9f a6 a3 a6					.word xt_asm_stx, z_asm_stx
>d162		73 74 78					.text "stx"
.d165						nt_asm_stx_z:
>d165		05 0c						.byte 5, IM+NN
>d167		72 d1				                .word nt_asm_stx_zy
>d169		a3 a6 a7 a6					.word xt_asm_stx_z, z_asm_stx_z
>d16d		73 74 78 2e 7a					.text "stx.z"
.d172						nt_asm_stx_zy:
>d172		06 0c						.byte 6, IM+NN
>d174		80 d1				                .word nt_asm_sty
>d176		a7 a6 ab a6					.word xt_asm_stx_zy, z_asm_stx_zy
>d17a		73 74 78 2e 7a 79				.text "stx.zy"
.d180						nt_asm_sty:
>d180		03 0c						.byte 3, IM+NN
>d182		8b d1				                .word nt_asm_sty_z
>d184		ab a6 af a6					.word xt_asm_sty, z_asm_sty
>d188		73 74 79					.text "sty"
.d18b						nt_asm_sty_z:
>d18b		05 0c						.byte 5, IM+NN
>d18d		98 d1				                .word nt_asm_sty_zx
>d18f		af a6 b3 a6					.word xt_asm_sty_z, z_asm_sty_z
>d193		73 74 79 2e 7a					.text "sty.z"
.d198						nt_asm_sty_zx:
>d198		06 0c						.byte 6, IM+NN
>d19a		a6 d1				                .word nt_asm_stz
>d19c		b3 a6 b7 a6					.word xt_asm_sty_zx, z_asm_sty_zx
>d1a0		73 74 79 2e 7a 78				.text "sty.zx"
.d1a6						nt_asm_stz:
>d1a6		03 0c						.byte 3, IM+NN
>d1a8		b1 d1				                .word nt_asm_stz_x
>d1aa		b7 a6 bb a6					.word xt_asm_stz, z_asm_stz
>d1ae		73 74 7a					.text "stz"
.d1b1						nt_asm_stz_x:
>d1b1		05 0c						.byte 5, IM+NN
>d1b3		be d1				                .word nt_asm_stz_z
>d1b5		bb a6 bf a6					.word xt_asm_stz_x, z_asm_stz_x
>d1b9		73 74 7a 2e 78					.text "stz.x"
.d1be						nt_asm_stz_z:
>d1be		05 0c						.byte 5, IM+NN
>d1c0		cb d1				                .word nt_asm_stz_zx
>d1c2		bf a6 c3 a6					.word xt_asm_stz_z, z_asm_stz_z
>d1c6		73 74 7a 2e 7a					.text "stz.z"
.d1cb						nt_asm_stz_zx:
>d1cb		06 0c						.byte 6, IM+NN
>d1cd		d9 d1				                .word nt_asm_tax
>d1cf		c3 a6 c7 a6					.word xt_asm_stz_zx, z_asm_stz_zx
>d1d3		73 74 7a 2e 7a 78				.text "stz.zx"
.d1d9						nt_asm_tax:
>d1d9		03 0c						.byte 3, IM+NN
>d1db		e4 d1				                .word nt_asm_tay
>d1dd		c7 a6 cb a6					.word xt_asm_tax, z_asm_tax
>d1e1		74 61 78					.text "tax"
.d1e4						nt_asm_tay:
>d1e4		03 0c						.byte 3, IM+NN
>d1e6		ef d1				                .word nt_asm_trb
>d1e8		cb a6 cf a6					.word xt_asm_tay, z_asm_tay
>d1ec		74 61 79					.text "tay"
.d1ef						nt_asm_trb:
>d1ef		03 0c						.byte 3, IM+NN
>d1f1		fa d1				                .word nt_asm_trb_z
>d1f3		cf a6 d3 a6					.word xt_asm_trb, z_asm_trb
>d1f7		74 72 62					.text "trb"
.d1fa						nt_asm_trb_z:
>d1fa		05 0c						.byte 5, IM+NN
>d1fc		07 d2				                .word nt_asm_tsb
>d1fe		d3 a6 d7 a6					.word xt_asm_trb_z, z_asm_trb_z
>d202		74 72 62 2e 7a					.text "trb.z"
.d207						nt_asm_tsb:
>d207		03 0c						.byte 3, IM+NN
>d209		12 d2				                .word nt_asm_tsb_z
>d20b		d7 a6 db a6					.word xt_asm_tsb, z_asm_tsb
>d20f		74 73 62					.text "tsb"
.d212						nt_asm_tsb_z:
>d212		05 0c						.byte 5, IM+NN
>d214		1f d2				                .word nt_asm_tsx
>d216		db a6 df a6					.word xt_asm_tsb_z, z_asm_tsb_z
>d21a		74 73 62 2e 7a					.text "tsb.z"
.d21f						nt_asm_tsx:
>d21f		03 0c						.byte 3, IM+NN
>d221		2a d2				                .word nt_asm_txa
>d223		df a6 e3 a6					.word xt_asm_tsx, z_asm_tsx
>d227		74 73 78					.text "tsx"
.d22a						nt_asm_txa:
>d22a		03 0c						.byte 3, IM+NN
>d22c		35 d2				                .word nt_asm_txs
>d22e		e3 a6 e7 a6					.word xt_asm_txa, z_asm_txa
>d232		74 78 61					.text "txa"
.d235						nt_asm_txs:
>d235		03 0c						.byte 3, IM+NN
>d237		40 d2				                .word nt_asm_tya
>d239		e7 a6 eb a6					.word xt_asm_txs, z_asm_txs
>d23d		74 78 73					.text "txs"
.d240						nt_asm_tya:
>d240		03 0c						.byte 3, IM+NN
>d242		4b d2				                .word nt_asm_arrow
>d244		eb a6 ef a6					.word xt_asm_tya, z_asm_tya
>d248		74 79 61					.text "tya"
.d24b						nt_asm_arrow:
>d24b		03 04				                .byte 3, IM
>d24d		56 d2				                .word nt_asm_back_jump
>d24f		02 8a 0c 8a			                .word xt_asm_arrow, z_asm_arrow
>d253		2d 2d 3e			                .text "-->"
.d256						nt_asm_back_jump:
>d256		02 04				                .byte 2, IM
>d258		60 d2				                .word nt_asm_back_branch
>d25a		40 a7 40 a7			                .word xt_asm_back_jump, z_asm_back_jump
>d25e		3c 6a				                .text "<j"
.d260						nt_asm_back_branch:
>d260		02 04				                .byte 2, IM
>d262		6a d2				                .word nt_asm_push_a
>d264		41 a7 49 a7			                .word xt_asm_back_branch, z_asm_back_branch
>d268		3c 62				                .text "<b"
.d26a						nt_asm_push_a:
>d26a		06 0c				                .byte 6, IM+NN
>d26c		00 00				                .word 0000
>d26e		29 a7 38 a7			                .word xt_asm_push_a, z_asm_push_a
>d272		70 75 73 68 2d 61		                .text "push-a"

;******  Return to file: platform/../taliforth.asm


;******  Processing file: platform/../strings.asm

=0						ix := 0
=0						str_ok             = ix
=1						ix += 1
=1						str_compile        = ix
=2						ix += 1
=2						str_redefined      = ix
=3						ix += 1
=3						str_abc_upper      = ix
=4						ix += 1
=4						str_wid_forth      = ix
=5						ix += 1
=5						str_wid_editor     = ix
=6						ix += 1
=6						str_wid_assembler  = ix
=7						ix += 1
=7						str_wid_root       = ix
=8						ix += 1
=8						str_see_flags      = ix
=9						ix += 1
=9						str_see_nt         = ix
=10						ix += 1
=10						str_see_xt         = ix
=11						ix += 1
=11						str_see_size       = ix
=12						ix += 1
=12						str_disasm_lit     = ix
=13						ix += 1
=13						str_disasm_sdc     = ix
=14						ix += 1
=14						str_disasm_bra     = ix
=15						ix += 1
=15						str_disasm_0test   = ix
=16						ix += 1
.d278						string_table:
>d278		98 d2 9c d2 a6 d2 b1 d2		        .word s_ok, s_compiled, s_redefined, s_abc_upper              ; 0-3
>d280		e8 d2 e0 d2 d5 d2 ef d2		        .word s_wid_forth, s_wid_editor, s_wid_asm, s_wid_root        ; 4-7
>d288		f5 d2 11 d3 16 d3 1b d3		        .word s_see_flags, s_see_nt, s_see_xt, s_see_size             ; 8-11
>d290		2c d3 35 d3 47 d3 4f d3		        .word s_disasm_lit, s_disasm_sdc, s_disasm_bra, s_disasm_0test ; 12-15
>d298		20 6f 6b 00			s_ok:         .text " ok", 0         ; note space at beginning
>d29c		20 63 6f 6d 70 69 6c 65		s_compiled:   .text " compiled", 0   ; note space at beginning
>d2a4		64 00
>d2a6		72 65 64 65 66 69 6e 65		s_redefined:  .text "redefined ", 0  ; note space at end
>d2ae		64 20 00
>d2b1		30 31 32 33 34 35 36 37		s_abc_upper:  .text "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
>d2b9		38 39 41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e
>d2c9		4f 50 51 52 53 54 55 56 57 58 59 5a
>d2d5		41 73 73 65 6d 62 6c 65		s_wid_asm:    .text "Assembler ", 0  ; Wordlist ID 2, note space at end
>d2dd		72 20 00
>d2e0		45 64 69 74 6f 72 20 00		s_wid_editor: .text "Editor ", 0     ; Wordlist ID 1, note space at end
>d2e8		46 6f 72 74 68 20 00		s_wid_forth:  .text "Forth ", 0      ; Wordlist ID 0, note space at end
>d2ef		52 6f 6f 74 20 00		s_wid_root:   .text "Root ", 0       ; Wordlist ID 3, note space at end
>d2f5		66 6c 61 67 73 20 28 43		s_see_flags:  .text "flags (CO AN IM NN UF HC): ", 0
>d2fd		4f 20 41 4e 20 49 4d 20 4e 4e 20 55 46 20 48 43
>d30d		29 3a 20 00
>d311		6e 74 3a 20 00			s_see_nt:     .text "nt: ", 0
>d316		78 74 3a 20 00			s_see_xt:     .text "xt: ", 0
>d31b		73 69 7a 65 20 28 64 65		s_see_size:   .text "size (decimal): ", 0
>d323		63 69 6d 61 6c 29 3a 20 00
>d32c		4c 49 54 45 52 41 4c 20		s_disasm_lit: .text "LITERAL ", 0
>d334		00
>d335		53 54 41 43 4b 20 44 45		s_disasm_sdc: .text "STACK DEPTH CHECK", 0
>d33d		50 54 48 20 43 48 45 43 4b 00
>d347		42 52 41 4e 43 48 20 00		s_disasm_bra: .text "BRANCH ",0
>d34f		30 54 45 53 54 00		s_disasm_0test: .text "0TEST",0
=0						err_allot        = 0
=1						err_badsource    = 1
=2						err_compileonly  = 2
=3						err_defer        = 3
=4						err_divzero      = 4
=5						err_noname       = 5
=6						err_refill       = 6
=7						err_state        = 7
=8						err_syntax       = 8
=9						err_underflow    = 9
=10						err_negallot     = 10
=11						err_wordlist     = 11
=12						err_blockwords   = 12
=13						err_returnstack  = 13
.d355						error_table:
>d355		71 d3 92 d3 b2 d3 d3 d3		        .word es_allot, es_badsource, es_compileonly, es_defer  ;  0-3
>d35d		f0 d3 01 d4 11 d4 3f d4		        .word es_divzero, es_noname, es_refill, es_state        ;  4-7
>d365		57 d4 78 d4 8d d4 a9 d4		        .word es_syntax, es_underflow, es_negallot, es_wordlist ;  8-11
>d36d		c0 d4 ff d4			        .word es_blockwords, es_returnstack                     ; 12-13
>d371		41 4c 4c 4f 54 20 75 73		es_allot:       .text "ALLOT using all available memory", 0
>d379		69 6e 67 20 61 6c 6c 20 61 76 61 69 6c 61 62 6c
>d389		65 20 6d 65 6d 6f 72 79 00
>d392		49 6c 6c 65 67 61 6c 20		es_badsource:   .text "Illegal SOURCE-ID during REFILL", 0
>d39a		53 4f 55 52 43 45 2d 49 44 20 64 75 72 69 6e 67
>d3aa		20 52 45 46 49 4c 4c 00
>d3b2		49 6e 74 65 72 70 72 65		es_compileonly: .text "Interpreting a compile-only word", 0
>d3ba		74 69 6e 67 20 61 20 63 6f 6d 70 69 6c 65 2d 6f
>d3ca		6e 6c 79 20 77 6f 72 64 00
>d3d3		44 45 46 45 52 65 64 20		es_defer:       .text "DEFERed word not defined yet", 0
>d3db		77 6f 72 64 20 6e 6f 74 20 64 65 66 69 6e 65 64
>d3eb		20 79 65 74 00
>d3f0		44 69 76 69 73 69 6f 6e		es_divzero:     .text "Division by zero", 0
>d3f8		20 62 79 20 7a 65 72 6f 00
>d401		50 61 72 73 69 6e 67 20		es_noname:      .text "Parsing failure", 0
>d409		66 61 69 6c 75 72 65 00
>d411		51 55 49 54 20 63 6f 75		es_refill:      .text "QUIT could not get input (REFILL returned -1)", 0
>d419		6c 64 20 6e 6f 74 20 67 65 74 20 69 6e 70 75 74
>d429		20 28 52 45 46 49 4c 4c 20 72 65 74 75 72 6e 65
>d439		64 20 2d 31 29 00
>d43f		41 6c 72 65 61 64 79 20		es_state:       .text "Already in compile mode", 0
>d447		69 6e 20 63 6f 6d 70 69 6c 65 20 6d 6f 64 65 00
>d457		55 6e 64 65 66 69 6e 65		es_syntax:      .text "Undefined word or invalid number", 0
>d45f		64 20 77 6f 72 64 20 6f 72 20 69 6e 76 61 6c 69
>d46f		64 20 6e 75 6d 62 65 72 00
>d478		44 61 74 61 20 73 74 61		es_underflow:   .text "Data stack underflow", 0
>d480		63 6b 20 75 6e 64 65 72 66 6c 6f 77 00
>d48d		4d 61 78 20 6d 65 6d 6f		es_negallot:    .text "Max memory freed with ALLOT", 0
>d495		72 79 20 66 72 65 65 64 20 77 69 74 68 20 41 4c
>d4a5		4c 4f 54 00
>d4a9		4e 6f 20 77 6f 72 64 6c		es_wordlist:    .text "No wordlists available", 0
>d4b1		69 73 74 73 20 61 76 61 69 6c 61 62 6c 65 00
>d4c0		50 6c 65 61 73 65 20 61		es_blockwords:  .text "Please assign vectors BLOCK-READ-VECTOR and BLOCK-WRITE-VECTOR",0
>d4c8		73 73 69 67 6e 20 76 65 63 74 6f 72 73 20 42 4c
>d4d8		4f 43 4b 2d 52 45 41 44 2d 56 45 43 54 4f 52 20
>d4e8		61 6e 64 20 42 4c 4f 43 4b 2d 57 52 49 54 45 2d
>d4f8		56 45 43 54 4f 52 00
>d4ff		52 65 74 75 72 6e 20 73		es_returnstack: .text "Return stack:", 0
>d507		74 61 63 6b 3a 00
>d50d		0f 2f 43 4f 55 4e 54 45		envs_cs:        .text 15, "/COUNTED-STRING"
>d515		44 2d 53 54 52 49 4e 47
>d51d		05 2f 48 4f 4c 44		envs_hold:      .text 5, "/HOLD"
>d523		04 2f 50 41 44			envs_pad:       .text 4, "/PAD"
>d528		11 41 44 44 52 45 53 53		envs_aub:       .text 17, "ADDRESS-UNIT-BITS"
>d530		2d 55 4e 49 54 2d 42 49 54 53
>d53a		07 46 4c 4f 4f 52 45 44		envs_floored:   .text 7, "FLOORED"
>d542		08 4d 41 58 2d 43 48 41		envs_max_char:  .text 8, "MAX-CHAR"
>d54a		52
>d54b		05 4d 41 58 2d 4e		envs_max_n:     .text 5, "MAX-N"
>d551		05 4d 41 58 2d 55		envs_max_u:     .text 5, "MAX-U"
>d557		12 52 45 54 55 52 4e 2d		envs_rsc:       .text 18, "RETURN-STACK-CELLS"
>d55f		53 54 41 43 4b 2d 43 45 4c 4c 53
>d56a		0b 53 54 41 43 4b 2d 43		envs_sc:        .text 11, "STACK-CELLS"
>d572		45 4c 4c 53
>d576		09 57 4f 52 44 4c 49 53		envs_wl:        .text 9, "WORDLISTS"
>d57e		54 53
>d580		05 4d 41 58 2d 44		envs_max_d:     .text 5, "MAX-D"
>d586		06 4d 41 58 2d 55 44		envs_max_ud:    .text 6, "MAX-UD"

;******  Return to file: platform/../taliforth.asm

.d58d						cmpl_call_ya:
.d58d		48		pha		                pha             ; save LSB of address
.d58e		a9 20		lda #$20	                lda #OpJSR      ; load opcode for JSR
.d590		80 03		bra $d595	                bra +
.d592						cmpl_jump_ya:
.d592		48		pha		                pha             ; save LSB of address
.d593		a9 4c		lda #$4c	                lda #OpJMP      ; load opcode for JMP, fall thru
.d595						+
.d595		20 9d d5	jsr $d59d	                jsr cmpl_byte_a      ; compile opcode
.d598		68		pla		                pla             ; retrieve address LSB; fall thru to cmpl_word_ya
.d599						cmpl_word_ya:
.d599		20 9d d5	jsr $d59d	                jsr cmpl_byte_a      ; compile LSB of address
.d59c		98		tya		                tya             ; fall thru for MSB
.d59d						cmpl_byte_a:
.d59d		92 00		sta ($00)	                sta (cp)
.d59f		e6 00		inc $00		                inc cp
.d5a1		d0 02		bne $d5a5	                bne _done
.d5a3		e6 01		inc $01		                inc cp+1
.d5a5						_done:
.d5a5		60		rts		                rts
.d5a6						cmpl_call_tos:
.d5a6		a9 20		lda #$20	                lda #OpJSR
.d5a8		80 02		bra $d5ac	                bra +
.d5aa						cmpl_jump_tos:
.d5aa		a9 4c		lda #$4c	                lda #OpJMP
.d5ac						+
.d5ac		20 9d d5	jsr $d59d	                jsr cmpl_byte_a
.d5af		4c cf 83	jmp $83cf	                jmp xt_comma
.d5b2						cmpl_jump_later:
.d5b2		a9 4c		lda #$4c	                lda #OpJMP
.d5b4		20 9d d5	jsr $d59d	                jsr cmpl_byte_a
.d5b7		20 02 8a	jsr $8a02	                jsr xt_here
.d5ba		80 dd		bra $d599	                bra cmpl_word_ya
.d5bc						check_nc_limit:
.d5bc		48		pha		                pha
.d5bd		a0 01		ldy #$01	                ldy #nc_limit_offset+1
.d5bf		18		clc		                clc
.d5c0		b1 08		lda ($08),y	                lda (up),y              ; if MSB non zero we're done, leave with C=0
.d5c2		d0 06		bne $d5ca	                bne _done
.d5c4		68		pla		                pla
.d5c5		3a		dec a		                dea                     ; simplify test to A-1 < nc-limit
.d5c6		88		dey		                dey
.d5c7		d1 08		cmp ($08),y	                cmp (up),y              ; A-1 < LSB leaves C=0, else C=1
.d5c9		1a		inc a		                ina                     ; restore A
.d5ca						_done:
.d5ca		60		rts		                rts
.d5cb						doconst:
.d5cb		ca		dex		                dex             ; make room for constant
.d5cc		ca		dex		                dex
.d5cd		68		pla		                pla             ; LSB of return address
.d5ce		85 25		sta $25		                sta tmp1
.d5d0		68		pla		                pla             ; MSB of return address
.d5d1		85 26		sta $26		                sta tmp1+1
.d5d3		a0 01		ldy #$01	                ldy #1
.d5d5		b1 25		lda ($25),y	                lda (tmp1),y
.d5d7		95 00		sta $00,x	                sta 0,x
.d5d9		c8		iny		                iny
.d5da		b1 25		lda ($25),y	                lda (tmp1),y
.d5dc		95 01		sta $01,x	                sta 1,x
.d5de		60		rts		                rts
.d5df						dodefer:
.d5df		68		pla		                pla             ; LSB
.d5e0		85 25		sta $25		                sta tmp1
.d5e2		68		pla		                pla             ; MSB
.d5e3		85 26		sta $26		                sta tmp1+1
.d5e5		a0 01		ldy #$01	                ldy #1
.d5e7		b1 25		lda ($25),y	                lda (tmp1),y
.d5e9		85 27		sta $27		                sta tmp2
.d5eb		c8		iny		                iny
.d5ec		b1 25		lda ($25),y	                lda (tmp1),y
.d5ee		85 28		sta $28		                sta tmp2+1
.d5f0		6c 27 00	jmp ($0027)	                jmp (tmp2)      ; This is actually a jump to the new target
.d5f3						defer_error:
.d5f3		a9 03		lda #$03	                lda #err_defer
.d5f5		4c 79 d7	jmp $d779	                jmp error
.d5f8						dodoes:
.d5f8		7a		ply		                ply             ; LSB
.d5f9		68		pla		                pla             ; MSB
.d5fa		c8		iny		                iny
.d5fb		d0 01		bne $d5fe	                bne +
.d5fd		1a		inc a		                ina
.d5fe						+
.d5fe		84 27		sty $27		                sty tmp2
.d600		85 28		sta $28		                sta tmp2+1
.d602		ca		dex		                dex
.d603		ca		dex		                dex
.d604		7a		ply		                ply
.d605		68		pla		                pla
.d606		c8		iny		                iny
.d607		d0 01		bne $d60a	                bne +
.d609		1a		inc a		                ina
.d60a						+
.d60a		94 00		sty $00,x	                sty 0,x         ; LSB
.d60c		95 01		sta $01,x	                sta 1,x         ; MSB
.d60e		6c 27 00	jmp ($0027)	                jmp (tmp2)
.d611						dovar:
.d611		7a		ply		                ply             ; LSB
.d612		68		pla		                pla             ; MSB
.d613		c8		iny		                iny
.d614		d0 01		bne $d617	                bne +
.d616		1a		inc a		                ina
.d617						+
.d617		ca		dex		                dex
.d618		ca		dex		                dex
.d619		95 01		sta $01,x	                sta 1,x
.d61b		98		tya		                tya
.d61c		95 00		sta $00,x	                sta 0,x
.d61e		60		rts		                rts
.d61f						push_upvar_tos:
.d61f		ca		dex		                dex
.d620		ca		dex		                dex
.d621		18		clc		                clc
.d622		65 08		adc $08		                adc up
.d624		95 00		sta $00,x	                sta 0,x
.d626		a5 09		lda $09		                lda up+1
.d628		90 01		bcc $d62b	                bcc +
.d62a		1a		inc a		                ina
.d62b						+
.d62b		95 01		sta $01,x	                sta 1,x
.d62d		60		rts		                rts
.d62e						byte_to_ascii:
.d62e		48		pha		                pha
.d62f		4a		lsr a		                lsr             ; convert high nibble first
.d630		4a		lsr a		                lsr
.d631		4a		lsr a		                lsr
.d632		4a		lsr a		                lsr
.d633		20 37 d6	jsr $d637	                jsr _nibble_to_ascii
.d636		68		pla		                pla
.d637						_nibble_to_ascii:
.d637		29 0f		and #$0f	                and #$F
.d639		09 30		ora #$30	                ora #'0'
.d63b		c9 3a		cmp #$3a	                cmp #'9'+1
.d63d		90 02		bcc $d641	                bcc +
.d63f		69 06		adc #$06	                adc #6
.d641		4c ac 87	jmp $87ac	+               jmp emit_a
.d644		60		rts		                rts
.d645						find_header_name:
.d645		b5 02		lda $02,x	                lda 2,x                 ; Copy mystery string to tmp2
.d647		85 27		sta $27		                sta tmp2
.d649		b5 03		lda $03,x	                lda 3,x
.d64b		85 28		sta $28		                sta tmp2+1
.d64d						_loop:
.d64d		b2 25		lda ($25)	                lda (tmp1)
.d64f		d5 00		cmp $00,x	                cmp 0,x
.d651		d0 3a		bne $d68d	                bne _next_entry
.d653		b2 27		lda ($27)	                lda (tmp2)      ; first character of mystery string
.d655		a0 08		ldy #$08	                ldy #8
.d657		51 25		eor ($25),y	                eor (tmp1),y    ; flag any mismatched bits
.d659		29 df		and #$df	                and #%11011111  ; but ignore upper/lower case bit
.d65b		d0 30		bne $d68d	                bne _next_entry ; definitely not equal if any bits differ
.d65d		a5 25		lda $25		                lda tmp1
.d65f		48		pha		                pha             ; Save original address on the stack
.d660		18		clc		                clc
.d661		69 08		adc #$08	                adc #8
.d663		85 25		sta $25		                sta tmp1
.d665		a5 26		lda $26		                lda tmp1+1
.d667		48		pha		                pha
.d668		90 03		bcc $d66d	                bcc +
.d66a		1a		inc a		                ina
.d66b		85 26		sta $26		                sta tmp1+1
.d66d						+
.d66d		b4 00		ldy $00,x	                ldy 0,x         ; index is length of string minus 1
.d66f		88		dey		                dey
.d670						_next_char:
.d670		b1 27		lda ($27),y	                lda (tmp2),y    ; last char of mystery string
.d672		c9 5b		cmp #$5b	                cmp #'Z'+1
.d674		b0 06		bcs $d67c	                bcs _check_char
.d676		c9 41		cmp #$41	                cmp #'A'
.d678		90 02		bcc $d67c	                bcc _check_char
.d67a		09 20		ora #$20	                ora #$20
.d67c						_check_char:
.d67c		d1 25		cmp ($25),y	                cmp (tmp1),y    ; last char of word we're testing against
.d67e		d0 03		bne $d683	                bne _reset_tmp1
.d680		88		dey		                dey
.d681		10 ed		bpl $d670	                bpl _next_char
.d683						_reset_tmp1:
.d683		68		pla		                pla
.d684		85 26		sta $26		                sta tmp1+1
.d686		68		pla		                pla
.d687		85 25		sta $25		                sta tmp1
.d689		98		tya		                tya             ; leave A = $FF on success
.d68a		c8		iny		                iny             ; if Y was $FF, we succeeded
.d68b		f0 11		beq $d69e	                beq _done
.d68d						_next_entry:
.d68d		a0 02		ldy #$02	                ldy #2
.d68f		b1 25		lda ($25),y	                lda (tmp1),y
.d691		48		pha		                pha
.d692		c8		iny		                iny
.d693		b1 25		lda ($25),y	                lda (tmp1),y
.d695		85 26		sta $26		                sta tmp1+1
.d697		68		pla		                pla
.d698		85 25		sta $25		                sta tmp1
.d69a		05 26		ora $26		                ora tmp1+1
.d69c		d0 af		bne $d64d	                bne _loop
.d69e		c9 00		cmp #$00	_done:          cmp #0      ; A is 0 on failure and $FF on success
.d6a0		60		rts		                rts         ; so cmp #0 sets Z on failure and clears on success
.d6a1						compare_16bit:
.d6a1		b5 00		lda $00,x	                lda 0,x                 ; LSB of TOS
.d6a3		d5 02		cmp $02,x	                cmp 2,x                 ; LSB of NOS
.d6a5		f0 08		beq $d6af	                beq _equal
.d6a7		b5 01		lda $01,x	                lda 1,x                 ; MSB of TOS
.d6a9		f5 03		sbc $03,x	                sbc 3,x                 ; MSB of NOS
.d6ab		70 08		bvs $d6b5	                bvs _overflow
.d6ad		80 08		bra $d6b7	                bra _not_equal
.d6af						_equal:
.d6af		b5 01		lda $01,x	                lda 1,x                 ; MSB of TOS
.d6b1		f5 03		sbc $03,x	                sbc 3,x                 ; MSB of NOS
.d6b3		50 04		bvc $d6b9	                bvc _done
.d6b5						_overflow:
.d6b5		49 80		eor #$80	                eor #$80                ; complement negative flag
.d6b7						_not_equal:
.d6b7		09 01		ora #$01	                ora #1                  ; set Z=0 since we're not equal
.d6b9						_done:
.d6b9		60		rts		                rts
.d6ba						current_to_dp:
.d6ba		a0 08		ldy #$08	                ldy #current_offset
.d6bc		b1 08		lda ($08),y	                lda (up),y      ; current is a byte variable
.d6be		0a		asl a		                asl             ; turn it into an offset (in cells)
.d6bf		18		clc		                clc
.d6c0		69 0a		adc #$0a	                adc #wordlists_offset   ; add offset to wordlists base.
.d6c2		a8		tay		                tay
.d6c3		b1 08		lda ($08),y	                lda (up),y              ; get the dp for that wordlist.
.d6c5		85 02		sta $02		                sta dp
.d6c7		c8		iny		                iny
.d6c8		b1 08		lda ($08),y	                lda (up),y
.d6ca		85 03		sta $03		                sta dp+1
.d6cc		60		rts		                rts
.d6cd						dp_to_current:
.d6cd		a0 08		ldy #$08	                ldy #current_offset
.d6cf		b1 08		lda ($08),y	                lda (up),y      ; current is a byte variable
.d6d1		0a		asl a		                asl             ; turn it into an offset (in cells)
.d6d2		18		clc		                clc
.d6d3		69 0a		adc #$0a	                adc #wordlists_offset   ; add offset to wordlists base.
.d6d5		a8		tay		                tay
.d6d6		a5 02		lda $02		                lda dp
.d6d8		91 08		sta ($08),y	                sta (up),y              ; get the dp for that wordlist.
.d6da		c8		iny		                iny
.d6db		a5 03		lda $03		                lda dp+1
.d6dd		91 08		sta ($08),y	                sta (up),y
.d6df		60		rts		                rts
.d6e0						interpret:
.d6e0						_loop:
.d6e0		20 53 8e	jsr $8e53	                jsr xt_parse_name       ; ( "string" -- addr u )
.d6e3		b5 00		lda $00,x	                lda 0,x
.d6e5		15 01		ora $01,x	                ora 1,x
.d6e7		f0 5b		beq $d744	                beq _line_done
.d6e9		20 c9 94	jsr $94c9	                jsr xt_two_dup          ; ( addr u -- addr u addr u )
.d6ec		20 8a 9a	jsr $9a8a	                jsr xt_find_name        ; ( addr u addr u -- addr u nt|0 )
.d6ef		b5 00		lda $00,x	                lda 0,x
.d6f1		15 01		ora $01,x	                ora 1,x
.d6f3		d0 19		bne $d70e	                bne _got_name_token
.d6f5		e8		inx		                inx                     ; ( addr u 0 -- addr u )
.d6f6		e8		inx		                inx
.d6f7		20 2b 9c	jsr $9c2b	                jsr xt_number           ; ( addr u -- u|d )
.d6fa		a5 1a		lda $1a		                lda state
.d6fc		f0 e2		beq $d6e0	                beq _loop
.d6fe		a9 20		lda #$20	                lda #%00100000
.d700		24 1c		bit $1c		                bit status
.d702		d0 05		bne $d709	                bne _double_number
.d704		20 1b 8b	jsr $8b1b	                jsr xt_literal
.d707		80 d7		bra $d6e0	                bra _loop
.d709						_double_number:
.d709		20 83 9e	jsr $9e83	                jsr xt_two_literal
.d70c		80 d2		bra $d6e0	                bra _loop
.d70e						_got_name_token:
.d70e		b5 00		lda $00,x	                lda 0,x
.d710		95 04		sta $04,x	                sta 4,x
.d712		b5 01		lda $01,x	                lda 1,x
.d714		95 05		sta $05,x	                sta 5,x
.d716		e8		inx		                inx
.d717		e8		inx		                inx
.d718		e8		inx		                inx
.d719		e8		inx		                inx                     ; ( nt )
.d71a		20 eb 8d	jsr $8deb	                jsr xt_one_plus
.d71d		a1 00		lda ($00,x)	                lda (0,x)
.d71f		48		pha		                pha
.d720		20 df 8d	jsr $8ddf	                jsr xt_one_minus
.d723		20 c8 9b	jsr $9bc8	                jsr xt_name_to_int      ; ( nt - xt )
.d726		a5 1a		lda $1a		                lda state
.d728		d0 10		bne $d73a	                bne _compile
.d72a		68		pla		                pla
.d72b		29 01		and #$01	                and #CO                 ; mask everything but Compile Only bit
.d72d		f0 05		beq $d734	                beq _interpret
.d72f		a9 02		lda #$02	                lda #err_compileonly
.d731		4c 79 d7	jmp $d779	                jmp error
.d734						_interpret:
.d734		20 ec 88	jsr $88ec	                jsr xt_execute
.d737		4c e0 d6	jmp $d6e0	                jmp _loop
.d73a						_compile:
.d73a		68		pla		                pla
.d73b		29 04		and #$04	                and #IM                 ; Mask all but IM bit
.d73d		d0 f5		bne $d734	                bne _interpret          ; IMMEDIATE word, execute right now
.d73f		20 de 83	jsr $83de	                jsr xt_compile_comma
.d742		80 9c		bra $d6e0	                bra _loop
.d744						_line_done:
.d744		e8		inx		                inx
.d745		e8		inx		                inx
.d746		e8		inx		                inx
.d747		e8		inx		                inx
.d748		60		rts		                rts
.d749						is_printable:
.d749		c9 20		cmp #$20	                cmp #AscSP              ; $20
.d74b		90 08		bcc $d755	                bcc _done
.d74d		c9 80		cmp #$80	                cmp #$7F + 1             ; '~'
.d74f		b0 03		bcs $d754	                bcs _failed
.d751		38		sec		                sec
.d752		80 01		bra $d755	                bra _done
.d754						_failed:
.d754		18		clc		                clc
.d755						_done:
.d755		60		rts		                rts
.d756						is_whitespace:
.d756		c9 00		cmp #$00	                cmp #00         ; explicit comparison to leave Y untouched
.d758		90 08		bcc $d762	                bcc _done
.d75a		c9 21		cmp #$21	                cmp #AscSP+1
.d75c		b0 03		bcs $d761	                bcs _failed
.d75e		38		sec		                sec
.d75f		80 01		bra $d762	                bra _done
.d761						_failed:
.d761		18		clc		                clc
.d762						_done:
.d762		60		rts		                rts
.d763						underflow_1:
.d763		e0 77		cpx #$77	                cpx #dsp0-1
.d765		10 10		bpl $d777	                bpl underflow_error
.d767		60		rts		                rts
.d768						underflow_2:
.d768		e0 75		cpx #$75	                cpx #dsp0-3
.d76a		10 0b		bpl $d777	                bpl underflow_error
.d76c		60		rts		                rts
.d76d						underflow_3:
.d76d		e0 73		cpx #$73	                cpx #dsp0-5
.d76f		10 06		bpl $d777	                bpl underflow_error
.d771		60		rts		                rts
.d772						underflow_4:
.d772		e0 71		cpx #$71	                cpx #dsp0-7
.d774		10 01		bpl $d777	                bpl underflow_error
.d776		60		rts		                rts
.d777						underflow_error:
.d777		a9 09		lda #$09	                lda #err_underflow      ; fall through to error
.d779						error:
.d779		48		pha		                pha                     ; save error
.d77a		20 b9 d7	jsr $d7b9	                jsr print_error
.d77d		20 fa 84	jsr $84fa	                jsr xt_cr
.d780		68		pla		                pla
.d781		c9 09		cmp #$09	                cmp #err_underflow      ; should we display return stack?
.d783		d0 17		bne $d79c	                bne _no_underflow
.d785		a9 0d		lda #$0d	                lda #err_returnstack
.d787		20 b9 d7	jsr $d7b9	                jsr print_error
.d78a		ba		tsx		                tsx
.d78b						-
.d78b		e8		inx		                inx
.d78c		f0 0b		beq $d799	                beq +
.d78e		20 c7 92	jsr $92c7	                jsr xt_space
.d791		bd 00 01	lda $0100,x	                lda $100,x
.d794		20 2e d6	jsr $d62e	                jsr byte_to_ascii
.d797		80 f2		bra $d78b	                bra -
.d799						+
.d799		20 fa 84	jsr $84fa	                jsr xt_cr
.d79c						_no_underflow:
.d79c		4c 60 80	jmp $8060	                jmp xt_abort            ; no jsr, as we clobber return stack
.d79f						print_string_no_lf:
.d79f		0a		asl a		                asl
.d7a0		a8		tay		                tay
.d7a1		b9 78 d2	lda $d278,y	                lda string_table,y
.d7a4		85 29		sta $29		                sta tmp3                ; LSB
.d7a6		c8		iny		                iny
.d7a7		b9 78 d2	lda $d278,y	                lda string_table,y
.d7aa		85 2a		sta $2a		                sta tmp3+1              ; MSB
.d7ac						print_common:
.d7ac		a0 00		ldy #$00	                ldy #0
.d7ae						_loop:
.d7ae		b1 29		lda ($29),y	                lda (tmp3),y
.d7b0		f0 06		beq $d7b8	                beq _done               ; strings are zero-terminated
.d7b2		20 ac 87	jsr $87ac	                jsr emit_a              ; allows vectoring via output
.d7b5		c8		iny		                iny
.d7b6		80 f6		bra $d7ae	                bra _loop
.d7b8						_done:
.d7b8		60		rts		                rts
.d7b9						print_error:
.d7b9		0a		asl a		                asl
.d7ba		a8		tay		                tay
.d7bb		b9 55 d3	lda $d355,y	                lda error_table,y
.d7be		85 29		sta $29		                sta tmp3                ; LSB
.d7c0		c8		iny		                iny
.d7c1		b9 55 d3	lda $d355,y	                lda error_table,y
.d7c4		85 2a		sta $2a		                sta tmp3+1              ; MSB
.d7c6		20 ac d7	jsr $d7ac	                jsr print_common
.d7c9		60		rts		                rts
.d7ca						print_string:
.d7ca		20 9f d7	jsr $d79f	                jsr print_string_no_lf
.d7cd		4c fa 84	jmp $84fa	                jmp xt_cr               ; JSR/RTS because never compiled
.d7d0						print_u:
.d7d0		20 8b 9d	jsr $9d8b	                jsr xt_zero                     ; 0
.d7d3		20 f8 8a	jsr $8af8	                jsr xt_less_number_sign         ; <#
.d7d6		20 b5 8d	jsr $8db5	                jsr xt_number_sign_s            ; #S
.d7d9		20 93 8d	jsr $8d93	                jsr xt_number_sign_greater      ; #>
.d7dc		4c d3 95	jmp $95d3	                jmp xt_type                     ; JSR/RTS because never compiled

;******  Return to file: platform/platform-py65mon.asm


;******  Processing file: platform/simulator.asm

=$f000						io_start = $f000
>f000						                .byte ?
>f001						io_putc:        .byte ?     ; $f001     write byte to stdout
>f002						                .word ?
>f004						io_getc:        .byte ?     ; $f004     read byte from stdin
>f005						io_peekc:       .byte ?     ; $f005     non-blocking input
>f006						io_clk_start:   .byte ?     ; $f006     *read* to start cycle counter
>f007						io_clk_stop:    .byte ?     ; $f007     *read* to stop the cycle counter
>f008						io_clk_cycles:  .word ?,?   ; $f008-b   32-bit cycle count in NUXI order
>f00c						                .word ?,?
>f010						io_blk_action:  .byte ?     ; $f010     Write to act (status=0 read=1 write=2)
>f011						io_blk_status:  .byte ?     ; $f011     Read action result (OK=0)
>f012						io_blk_number:  .word ?     ; $f012     Little endian block number 0-ffff
>f014						io_blk_buffer:  .word ?     ; $f014     Little endian memory address
.f016						io_end:
.f016						kernel_init:
.f016		78		sei		                sei             ; Disable interrupts
.f017		a2 00		ldx #$00	                ldx #0
.f019		bd 32 f0	lda $f032,x	-               lda s_kernel_id,x
.f01c		f0 06		beq $f024	                beq _done
.f01e		20 2d f0	jsr $f02d	                jsr kernel_putc
.f021		e8		inx		                inx
.f022		80 f5		bra $f019	                bra -
.f024						_done:
.f024		4c 00 80	jmp $8000	                jmp forth
.f027						kernel_getc:
.f027						_loop:
.f027		ad 04 f0	lda $f004	                lda io_getc
.f02a		f0 fb		beq $f027	                beq _loop
.f02c		60		rts		                rts
.f02d						kernel_putc:
.f02d		8d 01 f0	sta $f001	                sta io_putc
.f030		60		rts		                rts
.f031						kernel_bye:
.f031		00		brk #		                brk

;******  Return to file: platform/platform-py65mon.asm

.f032						s_kernel_id:
>f032		54 61 6c 69 20 46 6f 72		        .text "Tali Forth 2 default kernel for py65mon (04. Dec 2022)", AscLF, 0
>f03a		74 68 20 32 20 64 65 66 61 75 6c 74 20 6b 65 72
>f04a		6e 65 6c 20 66 6f 72 20 70 79 36 35 6d 6f 6e 20
>f05a		28 30 34 2e 20 44 65 63 20 32 30 32 32 29 0a 00
>fffa		16 f0				v_nmi   .word kernel_init
>fffc		16 f0				v_reset .word kernel_init
>fffe		16 f0				v_irq   .word kernel_init

;******  End of listing
