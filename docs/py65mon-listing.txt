
; 64tass Turbo Assembler Macro V1.57.2900 listing file
; 64tass --nostart --list=docs/py65mon-listing.txt --labels=docs/py65mon-labelmap.txt --output taliforth-py65mon.bin platform/platform-py65mon.asm
; Sun Apr 21 09:27:12 2024

;Offset	;PC	;Hex		;Monitor	;Source

;******  Processing input file: platform/platform-py65mon.asm

=$0000						ram_start = $0000          ; start of installed 32 KiB of RAM
=32767						ram_end   = $8000-1        ; end of installed RAM
=$0000						zpage     = ram_start      ; begin of Zero Page ($0000-$00ff)
=$7f						zpage_end = $7F            ; end of Zero Page used ($0000-$007f)
=$0100						stack0    = $0100          ; begin of Return Stack ($0100-$01ff)
=31744						hist_buff = ram_end-$03ff  ; begin of history buffers
=$0000						user0     = zpage            ; TaliForth2 system variables
=$ff						rsp0      = $ff              ; initial Return Stack Pointer (65c02 stack)
=$ff						bsize     = $ff              ; size of input/output buffers
=512						buffer0   = stack0+$100      ; input buffer ($0200-$027f)
=768						cp0       = buffer0+bsize+1  ; Dictionary starts after last buffer
=31744						cp_end    = hist_buff        ; Last RAM byte available for code
=$ff						padoffset = $ff              ; offset from CP to PAD (holds number strings)
=						TALI_OPTIONAL_WORDS := [ "ed", "editor", "ramdrive", "block", "environment?", "assembler", "disassembler", "wordlist" ]
=["lf"]						TALI_OPTION_CR_EOL := [ "lf" ]
=1						TALI_OPTION_HISTORY := 1
=0						TALI_OPTION_TERSE := 0

;******  Processing file: platform/../taliforth.asm

.8000						code0:
.8000						forth:

;******  Processing file: platform/../native_words.asm

.8000						xt_cold:
.8000		d8		cld		                cld
.8001		a9 27		lda #$27	                lda #<kernel_putc
.8003		85 12		sta $12		                sta output
.8005		a9 f0		lda #$f0	                lda #>kernel_putc
.8007		85 13		sta $13		                sta output+1
.8009		a2 1d		ldx #$1d	                ldx #cold_zp_table_end-cold_zp_table-1
.800b						_load_zp_loop:
.800b		bd 5e a7	lda $a75e,x	                lda cold_zp_table,x
.800e		95 00		sta $00,x	                sta zpage,x
.8010		ca		dex		                dex
.8011		d0 f8		bne $800b	                bne _load_zp_loop
.8013		ad 5e a7	lda $a75e	                lda cold_zp_table
.8016		85 00		sta $00		                sta zpage
.8018		a2 ff		ldx #$ff	                ldx #rsp0
.801a		9a		txs		                txs
.801b		a2 78		ldx #$78	                ldx #dsp0
.801d		a0 35		ldy #$35	                ldy #cold_user_table_end-cold_user_table-1
.801f		a9 00		lda #$00	                lda #0
.8021						_load_user_vars_loop:
.8021		b9 7c a7	lda $a77c,y	                lda cold_user_table,y
.8024		91 08		sta ($08),y	                sta (up),y
.8026		88		dey		                dey
.8027		d0 f8		bne $8021	                bne _load_user_vars_loop
.8029		ad 7c a7	lda $a77c	                lda cold_user_table
.802c		92 08		sta ($08)	                sta (up)
.802e		20 d5 88	jsr $88d5	                jsr xt_cr
.8031		ca		dex		                dex
.8032		ca		dex		                dex
.8033		ca		dex		                dex
.8034		ca		dex		                dex
.8035		a9 46		lda #$46	                lda #<forth_words_start
.8037		95 02		sta $02,x	                sta 2,x
.8039		a9 ba		lda #$ba	                lda #>forth_words_start
.803b		95 03		sta $03,x	                sta 3,x
.803d		a9 e2		lda #$e2	                lda #<(user_words_end-forth_words_start)
.803f		95 00		sta $00,x	                sta 0,x
.8041		a9 00		lda #$00	                lda #>(user_words_end-forth_words_start)
.8043		95 01		sta $01,x	                sta 1,x
.8045		20 f2 8f	jsr $8ff2	                jsr xt_evaluate
.8048		9c 00 7c	stz $7c00	                stz hist_buff
.804b		9c 80 7c	stz $7c80	                stz hist_buff+$80
.804e		9c 00 7d	stz $7d00	                stz hist_buff+$100
.8051		9c 80 7d	stz $7d80	                stz hist_buff+$180
.8054		9c 00 7e	stz $7e00	                stz hist_buff+$200
.8057		9c 80 7e	stz $7e80	                stz hist_buff+$280
.805a		9c 00 7f	stz $7f00	                stz hist_buff+$300
.805d		9c 80 7f	stz $7f80	                stz hist_buff+$380
.8060						xt_abort:
.8060		a2 78		ldx #$78	                ldx #dsp0
.8062						xt_quit:
.8062		8a		txa		                txa             ; Save the DSP that we just defined
.8063		a2 ff		ldx #$ff	                ldx #rsp0
.8065		9a		txs		                txs
.8066		aa		tax		                tax             ; Restore the DSP. Dude, seriously.
.8067		64 04		stz $04		                stz ip
.8069		64 05		stz $05		                stz ip+1
.806b		64 0a		stz $0a		                stz insrc
.806d		64 0b		stz $0b		                stz insrc+1
.806f		a9 00		lda #$00	                lda #0
.8071		a0 04		ldy #$04	                ldy #blk_offset
.8073		91 08		sta ($08),y	                sta (up),y
.8075		c8		iny		                iny
.8076		91 08		sta ($08),y	                sta (up),y
.8078		a9 fc		lda #$fc	                lda #(256-4)
.807a		85 1f		sta $1f		                sta loopctrl
.807c		64 1a		stz $1a		                stz state
.807e		64 1b		stz $1b		                stz state+1
.8080						_get_line:
.8080		a9 00		lda #$00	                lda #<buffer0   ; input buffer, this is paranoid
.8082		85 0c		sta $0c		                sta cib
.8084		a9 02		lda #$02	                lda #>buffer0
.8086		85 0d		sta $0d		                sta cib+1
.8088		64 0e		stz $0e		                stz ciblen
.808a		64 0f		stz $0f		                stz ciblen+1
.808c		20 20 9a	jsr $9a20	                jsr xt_refill           ; ( -- f )
.808f		b5 00		lda $00,x	                lda 0,x
.8091		d0 05		bne $8098	                bne _success
.8093		a9 06		lda #$06	                lda #err_refill
.8095		4c 98 d7	jmp $d798	                jmp error
.8098						_success:
.8098		e8		inx		                inx                     ; drop
.8099		e8		inx		                inx
.809a		20 ef d6	jsr $d6ef	                jsr interpret
.809d		e0 78		cpx #$78	                cpx #dsp0
.809f		f0 05		beq $80a6	                beq _stack_ok
.80a1		90 03		bcc $80a6	                bcc _stack_ok           ; DSP must always be smaller than DSP0
.80a3		4c 96 d7	jmp $d796	                jmp underflow_error
.80a6						_stack_ok:
.80a6		a5 1a		lda $1a		                lda state
.80a8		f0 02		beq $80ac	                beq _print
.80aa		a9 01		lda #$01	                lda #1                  ; number for "compile" string
.80ac						_print:
.80ac		20 e9 d7	jsr $d7e9	                jsr print_string
.80af		80 cf		bra $8080	                bra _get_line
.80b1						z_cold:
.80b1						z_abort:
.80b1						z_quit:
.80b1						xt_abort_quote:
.80b1		20 03 9c	jsr $9c03	                jsr xt_s_quote          ; S"
.80b4		a0 80		ldy #$80	                ldy #>abort_quote_runtime
.80b6		a9 bc		lda #$bc	                lda #<abort_quote_runtime
.80b8		20 bf d5	jsr $d5bf	                jsr cmpl_subroutine     ; may not be JMP as JSR/RTS
.80bb		60		rts		z_abort_quote:  rts
.80bc						abort_quote_runtime:
.80bc		b5 04		lda $04,x	                lda 4,x
.80be		15 05		ora $05,x	                ora 5,x
.80c0		f0 09		beq $80cb	                beq _done       ; if FALSE, we're done
.80c2		20 35 a3	jsr $a335	                jsr xt_type
.80c5		20 d5 88	jsr $88d5	                jsr xt_cr
.80c8		4c 60 80	jmp $8060	                jmp xt_abort    ; not JSR, so never come back
.80cb						_done:
.80cb		8a		txa		                txa
.80cc		18		clc		                clc
.80cd		69 06		adc #$06	                adc #6
.80cf		aa		tax		                tax
.80d0		60		rts		                rts
.80d1						xt_abs:
.80d1		20 82 d7	jsr $d782	                jsr underflow_1
.80d4		b5 01		lda $01,x	                lda 1,x
.80d6		10 0d		bpl $80e5	                bpl _done       ; positive number, easy money!
.80d8		38		sec		                sec
.80d9		a9 00		lda #$00	                lda #0
.80db		f5 00		sbc $00,x	                sbc 0,x         ; LSB
.80dd		95 00		sta $00,x	                sta 0,x
.80df		a9 00		lda #$00	                lda #0          ; MSB
.80e1		f5 01		sbc $01,x	                sbc 1,x
.80e3		95 01		sta $01,x	                sta 1,x
.80e5						_done:
.80e5		60		rts		z_abs:          rts
.80e6						xt_accept:
.80e6		20 87 d7	jsr $d787	                jsr underflow_2
.80e9		b5 00		lda $00,x	                lda 0,x
.80eb		15 01		ora $01,x	                ora 1,x
.80ed		d0 09		bne $80f8	                bne _not_zero
.80ef		e8		inx		                inx
.80f0		e8		inx		                inx
.80f1		74 00		stz $00,x	                stz 0,x
.80f3		74 01		stz $01,x	                stz 1,x
.80f5		4c c4 81	jmp $81c4	                jmp accept_done
.80f8						_not_zero:
.80f8		b5 00		lda $00,x	                lda 0,x         ; number of chars to get in tmp2 ...
.80fa		85 27		sta $27		                sta tmp2
.80fc		64 28		stz $28		                stz tmp2+1      ; ... but we only accept max 255 chars
.80fe		b5 02		lda $02,x	                lda 2,x         ; address of buffer is NOS, to tmp1
.8100		85 25		sta $25		                sta tmp1
.8102		b5 03		lda $03,x	                lda 3,x
.8104		85 26		sta $26		                sta tmp1+1
.8106		e8		inx		                inx
.8107		e8		inx		                inx
.8108		a0 00		ldy #$00	                ldy #0
.810a		a5 1c		lda $1c		                lda status
.810c		29 f7		and #$f7	                and #$F7
.810e		1a		inc a		               ina
.810f		09 08		ora #$08	                ora #%00001000
.8111		85 1c		sta $1c		                sta status
.8113						accept_loop:
.8113		20 4c 92	jsr $924c	                jsr key_a
.8116		c9 0a		cmp #$0a	                cmp #AscLF
.8118		f0 20		beq $813a	                beq _eol
.811a		c9 0d		cmp #$0d	                cmp #AscCR
.811c		f0 1c		beq $813a	                beq _eol
.811e		c9 08		cmp #$08	                cmp #AscBS
.8120		f0 22		beq $8144	                beq _backspace
.8122		c9 7f		cmp #$7f	                cmp #AscDEL     ; (CTRL-h)
.8124		f0 1e		beq $8144	                beq _backspace
.8126		c9 10		cmp #$10	                cmp #AscCP
.8128		f0 36		beq $8160	                beq _ctrl_p
.812a		c9 0e		cmp #$0e	                cmp #AscCN
.812c		f0 44		beq $8172	                beq _ctrl_n
.812e		91 25		sta ($25),y	                sta (tmp1),y
.8130		c8		iny		                iny
.8131		20 7b 8d	jsr $8d7b	                jsr emit_a
.8134		c4 27		cpy $27		                cpy tmp2        ; reached character limit?
.8136		d0 db		bne $8113	                bne accept_loop       ; fall through if buffer limit reached
.8138		80 03		bra $813d	                bra _buffer_full
.813a						_eol:
.813a		20 82 9f	jsr $9f82	                jsr xt_space    ; print final space
.813d						_buffer_full:
.813d		94 00		sty $00,x	                sty 0,x         ; Y contains number of chars accepted already
.813f		74 01		stz $01,x	                stz 1,x         ; we only accept 256 chars
.8141		4c c4 81	jmp $81c4	                jmp accept_done
.8144						_backspace:
.8144		c0 00		cpy #$00	                cpy #0          ; buffer empty?
.8146		d0 06		bne $814e	                bne +
.8148		a9 07		lda #$07	                lda #AscBELL    ; complain and don't delete beyond the start of line
.814a		20 7b 8d	jsr $8d7b	                jsr emit_a
.814d		c8		iny		                iny
.814e						+
.814e		88		dey		                dey
.814f		a9 08		lda #$08	                lda #AscBS      ; move back one
.8151		20 7b 8d	jsr $8d7b	                jsr emit_a
.8154		a9 20		lda #$20	                lda #AscSP      ; print a space (rubout)
.8156		20 7b 8d	jsr $8d7b	                jsr emit_a
.8159		a9 08		lda #$08	                lda #AscBS      ; move back over space
.815b		20 7b 8d	jsr $8d7b	                jsr emit_a
.815e		80 b3		bra $8113	                bra accept_loop
.8160						_ctrl_p:
.8160		a5 1c		lda $1c		                lda status
.8162		29 07		and #$07	                and #7
.8164		d0 08		bne $816e	                bne _ctrl_p_dec
.8166		a5 1c		lda $1c		                lda status
.8168		09 07		ora #$07	                ora #7
.816a		85 1c		sta $1c		                sta status
.816c		80 11		bra $817f	                bra _recall_history
.816e						_ctrl_p_dec:
.816e		c6 1c		dec $1c		                dec status
.8170		80 0d		bra $817f	                bra _recall_history
.8172						_ctrl_n:
.8172		a9 08		lda #$08	                lda #$8
.8174		24 1c		bit $1c		                bit status
.8176		d0 07		bne $817f	                bne _recall_history
.8178		a5 1c		lda $1c		                lda status
.817a		29 f7		and #$f7	                and #$F7
.817c		1a		inc a		               ina
.817d		85 1c		sta $1c		                sta status
.817f						_recall_history:
.817f		a9 08		lda #$08	                lda #%00001000
.8181		14 1c		trb $1c		                trb status
.8183		20 df 81	jsr $81df	                jsr accept_total_recall
.8186		a9 0d		lda #$0d	                lda #AscCR
.8188		20 7b 8d	jsr $8d7b	                jsr emit_a
.818b						input_clear:
.818b		c0 00		cpy #$00	                cpy #0
.818d		f0 08		beq $8197	                beq input_cleared
.818f		a9 20		lda #$20	                lda #AscSP
.8191		20 7b 8d	jsr $8d7b	                jsr emit_a
.8194		88		dey		                dey
.8195		80 f4		bra $818b	                bra input_clear
.8197						input_cleared:
.8197		a9 0d		lda #$0d	                lda #AscCR
.8199		20 7b 8d	jsr $8d7b	                jsr emit_a
.819c		b1 29		lda ($29),y	                lda (tmp3),y
.819e		85 1d		sta $1d		                sta status+1
.81a0		e6 29		inc $29		                inc tmp3
.81a2		d0 02		bne $81a6	                bne +           ; Increment the upper byte on carry.
.81a4		e6 2a		inc $2a		                inc tmp3+1
.81a6						+
.81a6		a9 0d		lda #$0d	                lda #AscCR
.81a8		20 7b 8d	jsr $8d7b	                jsr emit_a
.81ab						_history_loop:
.81ab		c4 1d		cpy $1d		                cpy status+1
.81ad		d0 03		bne $81b2	                bne +
.81af		4c 13 81	jmp $8113	                jmp accept_loop       ; Needs a long jump
.81b2						+
.81b2		c4 27		cpy $27		                cpy tmp2
.81b4		f0 0a		beq $81c0	                beq _hist_filled_buffer
.81b6		b1 29		lda ($29),y	                lda (tmp3),y
.81b8		91 25		sta ($25),y	                sta (tmp1),y
.81ba		20 7b 8d	jsr $8d7b	                jsr emit_a
.81bd		c8		iny		                iny
.81be		80 eb		bra $81ab	                bra _history_loop
.81c0						_hist_filled_buffer:
.81c0		88		dey		                dey
.81c1		4c 13 81	jmp $8113	                jmp accept_loop
.81c4						accept_done:
.81c4		20 df 81	jsr $81df	                jsr accept_total_recall
.81c7		85 1d		sta $1d		                sta status+1
.81c9		a0 00		ldy #$00	                ldy #0
.81cb		91 29		sta ($29),y	                sta (tmp3),y
.81cd		e6 29		inc $29		                inc tmp3
.81cf		d0 02		bne $81d3	                bne +           ; Increment the upper byte on carry.
.81d1		e6 2a		inc $2a		                inc tmp3+1
.81d3						+
.81d3						_save_history_loop:
.81d3		c4 1d		cpy $1d		                cpy status+1
.81d5		f0 07		beq $81de	                beq _save_history_done
.81d7		b1 25		lda ($25),y	                lda (tmp1),y
.81d9		91 29		sta ($29),y	                sta (tmp3),y
.81db		c8		iny		                iny
.81dc		80 f5		bra $81d3	                bra _save_history_loop
.81de						_save_history_done:
.81de						z_accept:
.81de		60		rts		                rts
.81df						accept_total_recall:
.81df		a9 00		lda #$00	                lda #<hist_buff
.81e1		85 29		sta $29		                sta tmp3
.81e3		a9 7c		lda #$7c	                lda #>hist_buff
.81e5		85 2a		sta $2a		                sta tmp3+1
.81e7		a5 1c		lda $1c		                lda status
.81e9		6a		ror a		                ror
.81ea		29 03		and #$03	                and #3
.81ec		18		clc		                clc
.81ed		65 2a		adc $2a		                adc tmp3+1
.81ef		85 2a		sta $2a		                sta tmp3+1
.81f1		a5 1c		lda $1c		                lda status
.81f3		6a		ror a		                ror             ; Rotate through carry into msb.
.81f4		6a		ror a		                ror
.81f5		29 80		and #$80	                and #$80
.81f7		18		clc		                clc
.81f8		65 29		adc $29		                adc tmp3
.81fa		85 29		sta $29		                sta tmp3
.81fc		90 02		bcc $8200	                bcc +           ; Increment the upper byte on carry.
.81fe		e6 2a		inc $2a		                inc tmp3+1
.8200						+
.8200		98		tya		                tya
.8201		c9 80		cmp #$80	                cmp #$80
.8203		90 02		bcc $8207	                bcc +
.8205		a9 7f		lda #$7f	                lda #$7F
.8207						+
.8207		60		rts		                rts
.8208						xt_action_of:
.8208		a5 1a		lda $1a		                lda state
.820a		05 1b		ora $1b		                ora state+1
.820c		f0 0c		beq $821a	                beq _interpreting
.820e						_compiling:
.820e		20 24 85	jsr $8524	                jsr xt_bracket_tick
.8211		a0 8a		ldy #$8a	                ldy #>xt_defer_fetch
.8213		a9 50		lda #$50	                lda #<xt_defer_fetch
.8215		20 bf d5	jsr $d5bf	                jsr cmpl_subroutine
.8218		80 06		bra $8220	                bra _done
.821a						_interpreting:
.821a		20 65 a0	jsr $a065	                jsr xt_tick
.821d		20 50 8a	jsr $8a50	                jsr xt_defer_fetch
.8220						_done:
.8220		60		rts		z_action_of:           rts
.8221						xt_again:
.8221		20 82 d7	jsr $d782	                jsr underflow_1
.8224		b5 01		lda $01,x	                lda 1,x
.8226		a8		tay		                tay
.8227		b5 00		lda $00,x	                lda 0,x         ; A=LSB, Y=MSB
.8229		20 c4 d5	jsr $d5c4	                jsr cmpl_jump
.822c		e8		inx		                inx
.822d		e8		inx		                inx
.822e		60		rts		z_again:        rts
.822f						xt_align:
.822f						xt_aligned:
.822f						z_align:
.822f		60		rts		z_aligned:      rts             ; stripped out during native compile
.8230						xt_allot:
.8230		20 82 d7	jsr $d782	                jsr underflow_1
.8233		b5 01		lda $01,x	                lda 1,x
.8235		30 22		bmi $8259	                bmi _release
.8237		18		clc		                clc
.8238		a5 00		lda $00		                lda cp
.823a		75 00		adc $00,x	                adc 0,x
.823c		85 00		sta $00		                sta cp
.823e		a5 01		lda $01		                lda cp+1
.8240		75 01		adc $01,x	                adc 1,x
.8242		85 01		sta $01		                sta cp+1
.8244		a0 00		ldy #$00	                ldy #<cp_end
.8246		c4 00		cpy $00		                cpy cp
.8248		a9 7c		lda #$7c	                lda #>cp_end
.824a		e5 01		sbc $01		                sbc cp+1
.824c		b0 48		bcs $8296	                bcs _done               ; we're fine.
.824e		84 00		sty $00		                sty cp                  ; still #<cp_end
.8250		a9 7c		lda #$7c	                lda #>cp_end
.8252		85 01		sta $01		                sta cp+1
.8254		a9 00		lda #$00	                lda #err_allot
.8256		4c 98 d7	jmp $d798	                jmp error
.8259						_release:
.8259		ca		dex		                dex
.825a		ca		dex		                dex
.825b		a5 00		lda $00		                lda cp
.825d		95 00		sta $00,x	                sta 0,x
.825f		a5 01		lda $01		                lda cp+1
.8261		95 01		sta $01,x	                sta 1,x
.8263		20 0b 99	jsr $990b	                jsr xt_plus                     ; new CP is now TOS
.8266		ca		dex		                dex
.8267		ca		dex		                dex                             ; new CP now NOS
.8268		a9 00		lda #$00	                lda #<cp0
.826a		95 00		sta $00,x	                sta 0,x
.826c		a9 03		lda #$03	                lda #>cp0
.826e		95 01		sta $01,x	                sta 1,x                         ; CP0 is TOS
.8270		20 ae d6	jsr $d6ae	                jsr compare_16bit               ; still ( CP CP0 )
.8273		f0 17		beq $828c	                beq _nega_done
.8275		30 15		bmi $828c	                bmi _nega_done
.8277		a9 00		lda #$00	                lda #<cp0
.8279		85 00		sta $00		                sta cp
.827b		a9 03		lda #$03	                lda #>cp0
.827d		85 01		sta $01		                sta cp+1
.827f		a9 28		lda #$28	                lda #<dictionary_start
.8281		85 02		sta $02		                sta dp
.8283		a9 bb		lda #$bb	                lda #>dictionary_start
.8285		85 03		sta $03		                sta dp+1
.8287		a9 0a		lda #$0a	                lda #err_negallot
.8289		4c 98 d7	jmp $d798	                jmp error
.828c						_nega_done:
.828c		b5 02		lda $02,x	                lda 2,x
.828e		85 00		sta $00		                sta cp
.8290		b5 03		lda $03,x	                lda 3,x
.8292		85 01		sta $01		                sta cp+1
.8294		e8		inx		                inx
.8295		e8		inx		                inx                     ; drop through to _done
.8296						_done:
.8296		e8		inx		                inx
.8297		e8		inx		                inx
.8298						z_allot:
.8298		60		rts		                rts
.8299						xt_allow_native:
.8299		20 c9 d6	jsr $d6c9	                jsr current_to_dp
.829c		a0 01		ldy #$01	                ldy #1          ; offset for status byte
.829e		b1 02		lda ($02),y	                lda (dp),y
.82a0		29 f5		and #$f5	                and #$FF-NN-AN  ; AN and NN flag is clear.
.82a2		91 02		sta ($02),y	                sta (dp),y
.82a4						z_allow_native:
.82a4		60		rts		                rts
.82a5						xt_also:
.82a5		20 51 90	jsr $9051	                jsr xt_get_order
.82a8		20 bd 97	jsr $97bd	                jsr xt_over
.82ab		20 0c a0	jsr $a00c	                jsr xt_swap
.82ae		20 47 97	jsr $9747	                jsr xt_one_plus
.82b1		20 cf 9b	jsr $9bcf	                jsr xt_set_order
.82b4		60		rts		z_also:         rts
.82b5						xt_always_native:
.82b5		20 c9 d6	jsr $d6c9	                jsr current_to_dp
.82b8		a0 01		ldy #$01	                ldy #1          ; offset for status byte
.82ba		b1 02		lda ($02),y	                lda (dp),y
.82bc		09 02		ora #$02	                ora #AN         ; Make sure AN flag is set
.82be		29 f7		and #$f7	                and #$FF-NN     ; and NN flag is clear.
.82c0		91 02		sta ($02),y	                sta (dp),y
.82c2						z_always_native:
.82c2		60		rts		                rts
.82c3						xt_and:
.82c3		20 87 d7	jsr $d787	                jsr underflow_2
.82c6		b5 00		lda $00,x	                lda 0,x
.82c8		35 02		and $02,x	                and 2,x
.82ca		95 02		sta $02,x	                sta 2,x
.82cc		b5 01		lda $01,x	                lda 1,x
.82ce		35 03		and $03,x	                and 3,x
.82d0		95 03		sta $03,x	                sta 3,x
.82d2		e8		inx		                inx
.82d3		e8		inx		                inx
.82d4		60		rts		z_and:          rts
.82d5						xt_at_xy:
.82d5		20 87 d7	jsr $d787	                jsr underflow_2
.82d8		a5 18		lda $18		                lda base
.82da		48		pha		                pha
.82db		a9 0a		lda #$0a	                lda #10
.82dd		85 18		sta $18		                sta base
.82df		a9 1b		lda #$1b	                lda #AscESC
.82e1		20 7b 8d	jsr $8d7b	                jsr emit_a
.82e4		a9 5b		lda #$5b	                lda #'['
.82e6		20 7b 8d	jsr $8d7b	                jsr emit_a
.82e9		20 47 97	jsr $9747	                jsr xt_one_plus ; AT-XY is zero based, but ANSI is 1 based
.82ec		20 ef d7	jsr $d7ef	                jsr print_u
.82ef		a9 3b		lda #$3b	                lda #';'
.82f1		20 7b 8d	jsr $8d7b	                jsr emit_a
.82f4		20 47 97	jsr $9747	                jsr xt_one_plus ; AT-XY is zero based, but ANSI is 1 based
.82f7		20 ef d7	jsr $d7ef	                jsr print_u
.82fa		a9 48		lda #$48	                lda #'H'
.82fc		20 7b 8d	jsr $8d7b	                jsr emit_a
.82ff		68		pla		                pla
.8300		85 18		sta $18		                sta base
.8302		60		rts		z_at_xy:        rts
.8303						xt_backslash:
.8303		a0 04		ldy #$04	                ldy #blk_offset
.8305		b1 08		lda ($08),y	                lda (up),y
.8307		c8		iny		                iny
.8308		11 08		ora ($08),y	                ora (up),y
.830a		f0 19		beq $8325	                beq backslash_not_block
.830c		a5 10		lda $10		                lda toin
.830e		29 3f		and #$3f	                and #$3F
.8310		f0 1b		beq $832d	                beq z_backslash
.8312		c9 01		cmp #$01	                cmp #$1
.8314		f0 17		beq $832d	                beq z_backslash
.8316		a5 10		lda $10		                lda toin
.8318		29 c0		and #$c0	                and #$C0        ; Clear lower bits to move to beginning of line.
.831a		18		clc		                clc             ; Add $40 (64 decimal) to move to next line.
.831b		69 40		adc #$40	                adc #$40
.831d		85 10		sta $10		                sta toin
.831f		90 0c		bcc $832d	                bcc z_backslash
.8321		e6 11		inc $11		                inc toin+1
.8323		80 08		bra $832d	                bra z_backslash
.8325						backslash_not_block:
.8325		a5 0e		lda $0e		                lda ciblen
.8327		85 10		sta $10		                sta toin
.8329		a5 0f		lda $0f		                lda ciblen+1
.832b		85 11		sta $11		                sta toin+1
.832d		60		rts		z_backslash:    rts
.832e						xt_base:
.832e		ca		dex		                dex
.832f		ca		dex		                dex
.8330		a9 18		lda #$18	                lda #<base
.8332		95 00		sta $00,x	                sta 0,x         ; LSB
.8334		74 01		stz $01,x	                stz 1,x         ; MSB is always 0
.8336		60		rts		z_base:         rts
.8337						xt_begin:
.8337		20 8f 90	jsr $908f	                jsr xt_here
.833a		60		rts		z_begin:        rts
.833b						xt_bell:
.833b		a9 07		lda #$07	                lda #7          ; ASCII value for BELl
.833d		20 7b 8d	jsr $8d7b	                jsr emit_a
.8340		60		rts		z_bell:         rts
.8341						xt_bl:
.8341		ca		dex		                dex
.8342		ca		dex		                dex
.8343		a9 20		lda #$20	                lda #AscSP
.8345		95 00		sta $00,x	                sta 0,x
.8347		74 01		stz $01,x	                stz 1,x
.8349		60		rts		z_bl:           rts
.834a						xt_blk:
.834a		a9 04		lda #$04	                lda #blk_offset
.834c		4c 2c d6	jmp $d62c	                jmp push_upvar_tos
.834f						z_blk:
.834f						xt_blkbuffer:
.834f		ca		dex		                dex
.8350		ca		dex		                dex
.8351		a0 2c		ldy #$2c	                ldy #blkbuffer_offset
.8353		b1 08		lda ($08),y	                lda (up),y
.8355		95 00		sta $00,x	                sta 0,x
.8357		c8		iny		                iny             ; Move along to the next byte
.8358		b1 08		lda ($08),y	                lda (up),y
.835a		95 01		sta $01,x	                sta 1,x
.835c		60		rts		z_blkbuffer:    rts
.835d						xt_block:
.835d		a0 2e		ldy #$2e	                ldy #buffblocknum_offset
.835f		b1 08		lda ($08),y	                lda (up),y
.8361		d5 00		cmp $00,x	                cmp 0,x
.8363		d0 0f		bne $8374	                bne _not_in_buffer
.8365		c8		iny		                iny
.8366		b1 08		lda ($08),y	                lda (up),y
.8368		d5 01		cmp $01,x	                cmp 1,x
.836a		d0 08		bne $8374	                bne _not_in_buffer
.836c		a0 30		ldy #$30	                ldy #buffstatus_offset
.836e		b1 08		lda ($08),y	                lda (up),y
.8370		29 01		and #$01	                and #1          ; Check the in-use flag (bit 0)
.8372		d0 30		bne $83a4	                bne _done       ; It's already in the buffer and in use.
.8374						_not_in_buffer:
.8374		a0 30		ldy #$30	                ldy #buffstatus_offset
.8376		b1 08		lda ($08),y	                lda (up),y      ; Only bits 0 and 1 are used, so only
.8378		c9 03		cmp #$03	                cmp #3          ; LSB is needed.
.837a		d0 0c		bne $8388	                bne _buffer_available ; Unused or not dirty = available
.837c		20 4f 83	jsr $834f	                jsr xt_blkbuffer
.837f		20 2b 85	jsr $852b	                jsr xt_buffblocknum
.8382		20 05 8f	jsr $8f05	                jsr xt_fetch
.8385		20 f1 84	jsr $84f1	                jsr xt_block_write
.8388						_buffer_available:
.8388		a0 2e		ldy #$2e	                ldy #buffblocknum_offset
.838a		b5 00		lda $00,x	                lda 0,x
.838c		91 08		sta ($08),y	                sta (up),y
.838e		c8		iny		                iny
.838f		b5 01		lda $01,x	                lda 1,x
.8391		91 08		sta ($08),y	                sta (up),y
.8393		20 4f 83	jsr $834f	                jsr xt_blkbuffer
.8396		20 0c a0	jsr $a00c	                jsr xt_swap
.8399		20 d9 84	jsr $84d9	                jsr xt_block_read
.839c		a9 01		lda #$01	                lda #1
.839e		a0 30		ldy #$30	                ldy #buffstatus_offset
.83a0		91 08		sta ($08),y	                sta (up),y
.83a2		ca		dex		                dex
.83a3		ca		dex		                dex
.83a4						_done:
.83a4		a0 2c		ldy #$2c	                ldy #blkbuffer_offset
.83a6		b1 08		lda ($08),y	                lda (up),y
.83a8		95 00		sta $00,x	                sta 0,x
.83aa		c8		iny		                iny
.83ab		b1 08		lda ($08),y	                lda (up),y
.83ad		95 01		sta $01,x	                sta 1,x
.83af		60		rts		z_block:        rts
.83b0						xt_block_ramdrive_init:
.83b0		20 82 d7	jsr $d782	                jsr underflow_1
.83b3		4c ce 84	jmp $84ce	                jmp _after_ramdrive_code
.83b6						_ramdrive_code:
>83b6		62 61 73 65 20 40 20 73		        .text "base @ swap decimal"
>83be		77 61 70 20 64 65 63 69 6d 61 6c
>83c9		20 31 30 32 34 20 2a		        .text " 1024 *" ; ( Calculate how many bytes are needed for numblocks blocks )
>83d0		20 64 75 70			        .text " dup"    ; ( Save a copy for formatting it at the end )
>83d4		20 62 75 66 66 65 72 3a		        .text " buffer: ramdrive" ; ( Create ramdrive )
>83dc		20 72 61 6d 64 72 69 76 65
>83e5		20 3a 20 62 6c 6f 63 6b		        .text " : block-read-ramdrive"  ; ( addr u -- )
>83ed		2d 72 65 61 64 2d 72 61 6d 64 72 69 76 65
>83fb		20 72 61 6d 64 72 69 76		        .text " ramdrive swap 1024 * + swap 1024 move ;"
>8403		65 20 73 77 61 70 20 31 30 32 34 20 2a 20 2b 20
>8413		73 77 61 70 20 31 30 32 34 20 6d 6f 76 65 20 3b
>8423		20 3a 20 62 6c 6f 63 6b		        .text " : block-write-ramdrive" ; ( addr u -- )
>842b		2d 77 72 69 74 65 2d 72 61 6d 64 72 69 76 65
>843a		20 72 61 6d 64 72 69 76		        .text " ramdrive swap 1024 * + 1024 move ;"
>8442		65 20 73 77 61 70 20 31 30 32 34 20 2a 20 2b 20
>8452		31 30 32 34 20 6d 6f 76 65 20 3b
>845d		20 27 20 62 6c 6f 63 6b		        .text " ' block-read-ramdrive block-read-vector !" ; ( Replace I/O vectors )
>8465		2d 72 65 61 64 2d 72 61 6d 64 72 69 76 65 20 62
>8475		6c 6f 63 6b 2d 72 65 61 64 2d 76 65 63 74 6f 72
>8485		20 21
>8487		20 27 20 62 6c 6f 63 6b		        .text " ' block-write-ramdrive block-write-vector !"
>848f		2d 77 72 69 74 65 2d 72 61 6d 64 72 69 76 65 20
>849f		62 6c 6f 63 6b 2d 77 72 69 74 65 2d 76 65 63 74
>84af		6f 72 20 21
>84b3		20 72 61 6d 64 72 69 76		        .text " ramdrive swap blank base !"
>84bb		65 20 73 77 61 70 20 62 6c 61 6e 6b 20 62 61 73
>84cb		65 20 21
.84ce						_after_ramdrive_code:
.84ce		20 0d 9f	jsr $9f0d	                jsr sliteral_runtime
>84d1		b6 83 18 01			.word _ramdrive_code, _after_ramdrive_code-_ramdrive_code
.84d5		20 f2 8f	jsr $8ff2	                jsr xt_evaluate
.84d8						z_block_ramdrive_init:
.84d8		60		rts		                rts
.84d9						xt_block_read:
.84d9		a0 32		ldy #$32	                ldy #blockread_offset
.84db		b1 08		lda ($08),y	                lda (up),y
.84dd		85 25		sta $25		                sta tmp1
.84df		c8		iny		                iny
.84e0		b1 08		lda ($08),y	                lda (up),y
.84e2		85 26		sta $26		                sta tmp1+1
.84e4		6c 25 00	jmp ($0025)	                jmp (tmp1)
.84e7						z_block_read:
.84e7						xt_block_read_vector:
.84e7		a9 32		lda #$32	                lda #blockread_offset
.84e9		4c 2c d6	jmp $d62c	                jmp push_upvar_tos
.84ec						z_block_read_vector:
.84ec						xt_block_word_error:
.84ec		a9 0c		lda #$0c	                lda #err_blockwords
.84ee		4c 98 d7	jmp $d798	                jmp error       ; no RTS needed
.84f1						z_block_word_error:
.84f1						xt_block_write:
.84f1		a0 34		ldy #$34	                ldy #blockwrite_offset
.84f3		b1 08		lda ($08),y	                lda (up),y
.84f5		85 25		sta $25		                sta tmp1
.84f7		c8		iny		                iny
.84f8		b1 08		lda ($08),y	                lda (up),y
.84fa		85 26		sta $26		                sta tmp1+1
.84fc		6c 25 00	jmp ($0025)	                jmp (tmp1)
.84ff						z_block_write:
.84ff						xt_block_write_vector:
.84ff		a9 34		lda #$34	                lda #blockwrite_offset
.8501		4c 2c d6	jmp $d62c	                jmp push_upvar_tos
.8504						z_block_write_vector:
.8504						xt_bounds:
.8504		20 87 d7	jsr $d787	                jsr underflow_2
.8507		18		clc		                clc
.8508		b5 00		lda $00,x	                lda 0,x                 ; LSB u
.850a		b4 02		ldy $02,x	                ldy 2,x                 ; LSB addr
.850c		75 02		adc $02,x	                adc 2,x
.850e		95 02		sta $02,x	                sta 2,x                 ; LSB addr+u
.8510		94 00		sty $00,x	                sty 0,x
.8512		b5 01		lda $01,x	                lda 1,x                 ; MSB u
.8514		b4 03		ldy $03,x	                ldy 3,x                 ; MSB addr
.8516		75 03		adc $03,x	                adc 3,x
.8518		95 03		sta $03,x	                sta 3,x                 ; MSB addr+u
.851a		94 01		sty $01,x	                sty 1,x
.851c		60		rts		z_bounds:       rts
.851d						xt_bracket_char:
.851d		20 a1 85	jsr $85a1	                jsr xt_char
.8520		20 af 92	jsr $92af	                jsr xt_literal
.8523		60		rts		z_bracket_char: rts
.8524						xt_bracket_tick:
.8524		20 65 a0	jsr $a065	                jsr xt_tick
.8527		20 af 92	jsr $92af	                jsr xt_literal
.852a		60		rts		z_bracket_tick: rts
.852b						xt_buffblocknum:
.852b		a9 2e		lda #$2e	                lda #buffblocknum_offset
.852d		4c 2c d6	jmp $d62c	                jmp push_upvar_tos
.8530						z_buffblocknum:
.8530						xt_buffer:
.8530		a0 30		ldy #$30	                ldy #buffstatus_offset
.8532		b1 08		lda ($08),y	                lda (up),y      ; Only bits 0 and 1 are used, so only
.8534		c9 03		cmp #$03	                cmp #3          ; LSB is needed.
.8536		d0 0c		bne $8544	                bne _buffer_available ; Unused or not dirty = available
.8538		20 4f 83	jsr $834f	                jsr xt_blkbuffer
.853b		20 2b 85	jsr $852b	                jsr xt_buffblocknum
.853e		20 05 8f	jsr $8f05	                jsr xt_fetch
.8541		20 f1 84	jsr $84f1	                jsr xt_block_write
.8544						_buffer_available:
.8544		a0 2e		ldy #$2e	                ldy #buffblocknum_offset
.8546		b5 00		lda $00,x	                lda 0,x
.8548		91 08		sta ($08),y	                sta (up),y
.854a		c8		iny		                iny
.854b		b5 01		lda $01,x	                lda 1,x
.854d		91 08		sta ($08),y	                sta (up),y
.854f		a9 01		lda #$01	                lda #1
.8551		a0 30		ldy #$30	                ldy #buffstatus_offset
.8553		91 08		sta ($08),y	                sta (up),y
.8555						_done:
.8555		a0 2c		ldy #$2c	                ldy #blkbuffer_offset
.8557		b1 08		lda ($08),y	                lda (up),y
.8559		95 00		sta $00,x	                sta 0,x
.855b		c8		iny		                iny
.855c		b1 08		lda ($08),y	                lda (up),y
.855e		95 01		sta $01,x	                sta 1,x
.8560		60		rts		z_buffer:       rts
.8561						xt_buffer_colon:
.8561		20 db 88	jsr $88db	                jsr xt_create
.8564		20 30 82	jsr $8230	                jsr xt_allot
.8567		60		rts		z_buffer_colon: rts
.8568						xt_buffstatus:
.8568		a9 30		lda #$30	                lda #buffstatus_offset
.856a		4c 2c d6	jmp $d62c	                jmp push_upvar_tos
.856d						z_buffstatus:
.856d						xt_bye:
.856d		4c 2b f0	jmp $f02b	                jmp platform_bye
.8570						z_bye:
.8570						xt_c_comma:
.8570		20 82 d7	jsr $d782	                jsr underflow_1
.8573		b5 00		lda $00,x	                lda 0,x
.8575		20 cf d5	jsr $d5cf	                jsr cmpl_a
.8578		e8		inx		                inx
.8579		e8		inx		                inx
.857a		60		rts		z_c_comma:      rts
.857b						xt_c_fetch:
.857b		20 82 d7	jsr $d782	                jsr underflow_1
.857e		a1 00		lda ($00,x)	                lda (0,x)
.8580		95 00		sta $00,x	                sta 0,x
.8582		74 01		stz $01,x	                stz 1,x         ; Ignore LSB
.8584		60		rts		z_c_fetch:      rts
.8585						xt_c_store:
.8585		20 87 d7	jsr $d787	                jsr underflow_2
.8588		b5 02		lda $02,x	                lda 2,x
.858a		81 00		sta ($00,x)	                sta (0,x)
.858c		e8		inx		                inx
.858d		e8		inx		                inx
.858e		e8		inx		                inx
.858f		e8		inx		                inx
.8590		60		rts		z_c_store:      rts
.8591						xt_cell_plus:
.8591		20 82 d7	jsr $d782	                jsr underflow_1
.8594		f6 00		inc $00,x	                inc 0,x
.8596		d0 02		bne $859a	                bne +
.8598		f6 01		inc $01,x	                inc 1,x
.859a						+
.859a		f6 00		inc $00,x	                inc 0,x
.859c		d0 02		bne $85a0	                bne _done
.859e		f6 01		inc $01,x	                inc 1,x
.85a0						_done:
.85a0		60		rts		z_cell_plus:    rts
.85a1						xt_char:
.85a1		20 09 98	jsr $9809	                jsr xt_parse_name
.85a4		b5 00		lda $00,x	                lda 0,x
.85a6		15 01		ora $01,x	                ora 1,x
.85a8		d0 05		bne $85af	                bne _not_empty
.85aa		a9 05		lda #$05	                lda #err_noname
.85ac		4c 98 d7	jmp $d798	                jmp error
.85af						_not_empty:
.85af		e8		inx		                inx             ; drop number of characters, leave addr
.85b0		e8		inx		                inx
.85b1		a1 00		lda ($00,x)	                lda (0,x)       ; get character (equivalent to C@)
.85b3		95 00		sta $00,x	                sta 0,x
.85b5		74 01		stz $01,x	                stz 1,x         ; MSB is always zero
.85b7		60		rts		z_char:         rts
.85b8						xt_chars:
.85b8		20 82 d7	jsr $d782	                jsr underflow_1
.85bb		60		rts		z_chars:        rts
.85bc						xt_cleave:
.85bc		20 87 d7	jsr $d787	                jsr underflow_2
.85bf		20 99 94	jsr $9499	                jsr xt_minus_leading    ; -LEADING ( addr u )
.85c2		20 78 91	jsr $9178	                jsr xt_input_to_r       ; save old imput state
.85c5		b5 00		lda $00,x	                lda 0,x         ; u is new ciblen
.85c7		85 0e		sta $0e		                sta ciblen
.85c9		b5 01		lda $01,x	                lda 1,x
.85cb		85 0f		sta $0f		                sta ciblen+1
.85cd		b5 02		lda $02,x	                lda 2,x         ; addr is new cib
.85cf		85 0c		sta $0c		                sta cib
.85d1		b5 03		lda $03,x	                lda 3,x
.85d3		85 0d		sta $0d		                sta cib+1
.85d5		64 10		stz $10		                stz toin        ; >IN pointer is zero
.85d7		64 11		stz $11		                stz toin+1
.85d9		20 09 98	jsr $9809	                jsr xt_parse_name       ; ( addr u addr-s u-s )
.85dc		b5 00		lda $00,x	                lda 0,x
.85de		15 01		ora $01,x	                ora 1,x
.85e0		f0 23		beq $8605	                beq _done
.85e2		b5 04		lda $04,x	                lda 4,x         ; LSB of original u
.85e4		38		sec		                sec
.85e5		f5 00		sbc $00,x	                sbc 0,x
.85e7		95 04		sta $04,x	                sta 4,x
.85e9		b5 05		lda $05,x	                lda 5,x         ; MSB of original u
.85eb		f5 01		sbc $01,x	                sbc 1,x
.85ed		95 05		sta $05,x	                sta 5,x
.85ef		b5 06		lda $06,x	                lda 6,x         ; LSB of original addr
.85f1		18		clc		                clc
.85f2		75 00		adc $00,x	                adc 0,x
.85f4		95 06		sta $06,x	                sta 6,x
.85f6		b5 07		lda $07,x	                lda 7,x         ; MSB of original addr
.85f8		75 01		adc $01,x	                adc 1,x
.85fa		95 07		sta $07,x	                sta 7,x
.85fc		20 b0 a2	jsr $a2b0	                jsr xt_two_swap         ; ( addr-s u-s addr u )
.85ff		20 99 94	jsr $9499	                jsr xt_minus_leading
.8602		20 b0 a2	jsr $a2b0	                jsr xt_two_swap         ; ( addr u addr-s u-s )
.8605						_done:
.8605		20 cb 99	jsr $99cb	                jsr xt_r_to_input
.8608		60		rts		z_cleave:       rts
.8609						xt_cmove:
.8609		20 8c d7	jsr $d78c	                jsr underflow_3
.860c		b5 02		lda $02,x	                lda 2,x
.860e		85 27		sta $27		                sta tmp2        ; use tmp2 because easier to remember
.8610		b5 03		lda $03,x	                lda 3,x
.8612		85 28		sta $28		                sta tmp2+1
.8614		b5 04		lda $04,x	                lda 4,x
.8616		85 25		sta $25		                sta tmp1        ; use tmp1 because easier to remember
.8618		b5 05		lda $05,x	                lda 5,x
.861a		85 26		sta $26		                sta tmp1+1
.861c		a0 00		ldy #$00	                ldy #0
.861e		b5 01		lda $01,x	                lda 1,x         ; number of whole pages to move
.8620		f0 0f		beq $8631	                beq _dopartial
.8622						_page:
.8622		b1 25		lda ($25),y	                lda (tmp1),y
.8624		91 27		sta ($27),y	                sta (tmp2),y
.8626		c8		iny		                iny
.8627		d0 f9		bne $8622	                bne _page
.8629		e6 26		inc $26		                inc tmp1+1
.862b		e6 28		inc $28		                inc tmp2+1
.862d		d6 01		dec $01,x	                dec 1,x
.862f		d0 f1		bne $8622	                bne _page
.8631						_dopartial:
.8631		b5 00		lda $00,x	                lda 0,x         ; length of last page
.8633		f0 09		beq $863e	                beq _done
.8635						_partial:
.8635		b1 25		lda ($25),y	                lda (tmp1),y
.8637		91 27		sta ($27),y	                sta (tmp2),y
.8639		c8		iny		                iny
.863a		d6 00		dec $00,x	                dec 0,x
.863c		d0 f7		bne $8635	                bne _partial
.863e						_done:
.863e		8a		txa		                txa
.863f		18		clc		                clc
.8640		69 06		adc #$06	                adc #6
.8642		aa		tax		                tax
.8643		60		rts		z_cmove:        rts
.8644						xt_cmove_up:
.8644		20 8c d7	jsr $d78c	                jsr underflow_3
.8647		b5 02		lda $02,x	                lda 2,x
.8649		85 27		sta $27		                sta tmp2        ; use tmp2 because easier to remember
.864b		b5 03		lda $03,x	                lda 3,x
.864d		18		clc		                clc
.864e		75 01		adc $01,x	                adc 1,x
.8650		85 28		sta $28		                sta tmp2+1      ; point to last page of destination
.8652		b5 04		lda $04,x	                lda 4,x
.8654		85 25		sta $25		                sta tmp1        ; use tmp1 because easier to remember
.8656		b5 05		lda $05,x	                lda 5,x
.8658		18		clc		                clc
.8659		75 01		adc $01,x	                adc 1,x
.865b		85 26		sta $26		                sta tmp1+1      ; point to last page of source
.865d		f6 01		inc $01,x	                inc 1,x         ; allows us to use bne with dec 1,x below
.865f		b4 00		ldy $00,x	                ldy 0,x         ; length of last page
.8661		f0 0e		beq $8671	                beq _nopartial
.8663						_outerloop:
.8663		88		dey		                dey
.8664		f0 07		beq $866d	                beq _finishpage
.8666						_innerloop:
.8666		b1 25		lda ($25),y	                lda (tmp1),y
.8668		91 27		sta ($27),y	                sta (tmp2),y
.866a		88		dey		                dey
.866b		d0 f9		bne $8666	                bne _innerloop
.866d						_finishpage:
.866d		b2 25		lda ($25)	                lda (tmp1)      ; handle y = 0 separately
.866f		92 27		sta ($27)	                sta (tmp2)
.8671						_nopartial:
.8671		c6 26		dec $26		                dec tmp1+1      ; back up to previous pages
.8673		c6 28		dec $28		                dec tmp2+1
.8675		d6 01		dec $01,x	                dec 1,x
.8677		d0 ea		bne $8663	                bne _outerloop
.8679						_done:
.8679		8a		txa		                txa
.867a		18		clc		                clc
.867b		69 06		adc #$06	                adc #6
.867d		aa		tax		                tax
.867e		60		rts		z_cmove_up:     rts
.867f						xt_colon:
.867f		a5 1a		lda $1a		                lda state
.8681		05 1b		ora $1b		                ora state+1
.8683		f0 05		beq $868a	                beq +
.8685		a9 07		lda #$07	                lda #err_state
.8687		4c 98 d7	jmp $d798	                jmp error
.868a						+
.868a		c6 1a		dec $1a		                dec state
.868c		c6 1b		dec $1b		                dec state+1
.868e		a9 40		lda #$40	                lda #%01000000
.8690		04 1c		tsb $1c		                tsb status
.8692		20 c9 d6	jsr $d6c9	                jsr current_to_dp
.8695		a5 03		lda $03		                lda dp+1            ; CREATE uses a lot of variables
.8697		48		pha		                pha
.8698		a5 02		lda $02		                lda dp
.869a		48		pha		                pha
.869b		a9 80		lda #$80	                lda #%10000000
.869d		04 1c		tsb $1c		                tsb status
.869f		20 db 88	jsr $88db	                jsr xt_create
.86a2		20 c9 d6	jsr $d6c9	                jsr current_to_dp   ; This might be able to be omitted
.86a5		a5 02		lda $02		                lda dp
.86a7		85 06		sta $06		                sta workword
.86a9		a5 03		lda $03		                lda dp+1
.86ab		85 07		sta $07		                sta workword+1
.86ad		68		pla		                pla
.86ae		85 02		sta $02		                sta dp
.86b0		68		pla		                pla
.86b1		85 03		sta $03		                sta dp+1
.86b3		20 dc d6	jsr $d6dc	                jsr dp_to_current
.86b6		a5 00		lda $00		                lda cp
.86b8		38		sec		                sec
.86b9		e9 03		sbc #$03	                sbc #3
.86bb		85 00		sta $00		                sta cp
.86bd		b0 02		bcs $86c1	                bcs _done
.86bf		c6 01		dec $01		                dec cp+1
.86c1						_done:
.86c1		60		rts		z_colon:        rts
.86c2						xt_colon_noname:
.86c2		a5 1a		lda $1a		                lda state
.86c4		05 1b		ora $1b		                ora state+1
.86c6		f0 05		beq $86cd	                beq +
.86c8		a9 07		lda #$07	                lda #err_state
.86ca		4c 98 d7	jmp $d798	                jmp error
.86cd						+
.86cd		c6 1a		dec $1a		                dec state
.86cf		c6 1b		dec $1b		                dec state+1
.86d1		a9 40		lda #$40	                lda #%01000000
.86d3		14 1c		trb $1c		                trb status
.86d5		a5 00		lda $00		                lda cp
.86d7		85 06		sta $06		                sta workword
.86d9		a5 01		lda $01		                lda cp+1
.86db		85 07		sta $07		                sta workword+1
.86dd						_done:
.86dd		60		rts		z_colon_noname:        rts
.86de						xt_comma:
.86de		20 82 d7	jsr $d782	                jsr underflow_1
.86e1		b5 00		lda $00,x	                lda 0,x
.86e3		92 00		sta ($00)	                sta (cp)
.86e5		e6 00		inc $00		                inc cp
.86e7		d0 02		bne $86eb	                bne +
.86e9		e6 01		inc $01		                inc cp+1
.86eb						+
.86eb		b5 01		lda $01,x	                lda 1,x
.86ed		92 00		sta ($00)	                sta (cp)
.86ef		e6 00		inc $00		                inc cp
.86f1		d0 02		bne $86f5	                bne _done
.86f3		e6 01		inc $01		                inc cp+1
.86f5						_done:
.86f5		e8		inx		                inx
.86f6		e8		inx		                inx
.86f7		60		rts		z_comma:        rts
.86f8						xt_compare:
.86f8		20 91 d7	jsr $d791	                jsr underflow_4
.86fb		b5 02		lda $02,x	                lda 2,x
.86fd		85 27		sta $27		                sta tmp2
.86ff		b5 03		lda $03,x	                lda 3,x
.8701		85 28		sta $28		                sta tmp2+1
.8703		b5 06		lda $06,x	                lda 6,x
.8705		85 25		sta $25		                sta tmp1
.8707		b5 07		lda $07,x	                lda 7,x
.8709		85 26		sta $26		                sta tmp1+1
.870b						_compare_loop:
.870b		b5 04		lda $04,x	                lda 4,x
.870d		15 05		ora $05,x	                ora 5,x
.870f		f0 2c		beq $873d	                beq _str1_done
.8711		b5 00		lda $00,x	                lda 0,x
.8713		15 01		ora $01,x	                ora 1,x
.8715		f0 3a		beq $8751	                beq _greater    ; Str2 empty first
.8717						_check_letter:
.8717		b2 25		lda ($25)	                lda (tmp1)
.8719		d2 27		cmp ($27)	                cmp (tmp2)
.871b		90 26		bcc $8743	                bcc _less
.871d		d0 32		bne $8751	                bne _greater
.871f						_next_letter:
.871f		e6 25		inc $25		                inc tmp1
.8721		d0 02		bne $8725	                bne +
.8723		e6 26		inc $26		                inc tmp1+1
.8725						+
.8725		e6 27		inc $27		                inc tmp2
.8727		d0 02		bne $872b	                bne +
.8729		e6 28		inc $28		                inc tmp2+1
.872b						+
.872b		b5 04		lda $04,x	                lda 4,x
.872d		d0 02		bne $8731	                bne +
.872f		d6 05		dec $05,x	                dec 5,x
.8731						+
.8731		d6 04		dec $04,x	                dec 4,x
.8733		b5 00		lda $00,x	                lda 0,x
.8735		d0 02		bne $8739	                bne +
.8737		d6 01		dec $01,x	                dec 1,x
.8739						+
.8739		d6 00		dec $00,x	                dec 0,x
.873b		80 ce		bra $870b	                bra _compare_loop
.873d						_str1_done:
.873d		b5 00		lda $00,x	                lda 0,x
.873f		15 01		ora $01,x	                ora 1,x
.8741		f0 08		beq $874b	                beq _equal      ; Both out of letters
.8743						_less:
.8743		a9 ff		lda #$ff	                lda #$FF
.8745		95 06		sta $06,x	                sta 6,x
.8747		95 07		sta $07,x	                sta 7,x
.8749		80 0c		bra $8757	                bra _done
.874b						_equal:
.874b		74 06		stz $06,x	                stz 6,x
.874d		74 07		stz $07,x	                stz 7,x
.874f		80 06		bra $8757	                bra _done
.8751						_greater:
.8751		a9 01		lda #$01	                lda #1
.8753		95 06		sta $06,x	                sta 6,x
.8755		74 07		stz $07,x	                stz 7,x
.8757						_done:
.8757		8a		txa		                txa
.8758		18		clc		                clc
.8759		69 06		adc #$06	                adc #6
.875b		aa		tax		                tax
.875c		60		rts		z_compare:      rts
.875d						xt_compile_comma:
.875d		20 82 d7	jsr $d782	                jsr underflow_1
.8760		b5 01		lda $01,x	                lda 1,x                 ; MSB
.8762		48		pha		                pha
.8763		b5 00		lda $00,x	                lda 0,x
.8765		48		pha		                pha                     ; LSB
.8766		20 8e 91	jsr $918e	                jsr xt_int_to_name      ; ( xt -- nt )
.8769		b5 00		lda $00,x	                lda 0,x
.876b		15 01		ora $01,x	                ora 1,x
.876d		d0 03		bne $8772	                bne _check_nt
.876f		4c 6f 88	jmp $886f	                jmp compile_as_jump
.8772						_check_nt:
.8772		b5 00		lda $00,x	                lda 0,x
.8774		85 23		sta $23		                sta tmptos
.8776		b5 01		lda $01,x	                lda 1,x
.8778		85 24		sta $24		                sta tmptos+1
.877a		f6 00		inc $00,x	                inc 0,x
.877c		d0 02		bne $8780	                bne +
.877e		f6 01		inc $01,x	                inc 1,x                 ; ( nt -- nt+1 )
.8780						+
.8780		a1 00		lda ($00,x)	                lda (0,x)
.8782		85 29		sta $29		                sta tmp3                ; keep copy of status byte for NN
.8784		29 02		and #$02	                and #AN                 ; mask all but Always Native (AN) bit
.8786		f0 0d		beq $8795	                beq _compile_check
.8788		a5 23		lda $23		                lda tmptos
.878a		95 00		sta $00,x	                sta 0,x
.878c		a5 24		lda $24		                lda tmptos+1
.878e		95 01		sta $01,x	                sta 1,x
.8790		20 b8 a5	jsr $a5b8	                jsr xt_wordsize         ; ( nt -- u )
.8793		80 28		bra $87bd	                bra _compile_as_code
.8795						_compile_check:
.8795		a5 29		lda $29		                lda tmp3
.8797		29 08		and #$08	                and #NN
.8799		f0 03		beq $879e	                beq _check_size_limit
.879b		4c 6f 88	jmp $886f	                jmp compile_as_jump    ; too far for BRA
.879e						_check_size_limit:
.879e		a5 23		lda $23		                lda tmptos
.87a0		95 00		sta $00,x	                sta 0,x
.87a2		a5 24		lda $24		                lda tmptos+1
.87a4		95 01		sta $01,x	                sta 1,x
.87a6		20 b8 a5	jsr $a5b8	                jsr xt_wordsize         ; ( nt -- u )
.87a9		a0 01		ldy #$01	                ldy #nc_limit_offset+1
.87ab		b5 01		lda $01,x	                lda 1,x
.87ad		d1 08		cmp ($08),y	                cmp (up),y
.87af		90 0c		bcc $87bd	                bcc _compile_as_code    ; user-defined limit MSB
.87b1		d0 07		bne $87ba	                bne _jumpto_compile_as_jump
.87b3		88		dey		                dey
.87b4		b1 08		lda ($08),y	                lda (up),y              ; user-defined limit LSB
.87b6		d5 00		cmp $00,x	                cmp 0,x
.87b8		10 03		bpl $87bd	                bpl _compile_as_code    ; Allow native compiling for less
.87ba						_jumpto_compile_as_jump:
.87ba		4c 6f 88	jmp $886f	                jmp compile_as_jump    ; too far for BRA
.87bd						_compile_as_code:
.87bd		ca		dex		                dex
.87be		ca		dex		                dex                     ; ( -- u ? )
.87bf		ca		dex		                dex
.87c0		ca		dex		                dex                     ; ( -- u ? ? )
.87c1		b5 04		lda $04,x	                lda 4,x
.87c3		95 00		sta $00,x	                sta 0,x                 ; LSB of u
.87c5		b5 05		lda $05,x	                lda 5,x
.87c7		95 01		sta $01,x	                sta 1,x                 ; ( -- u ? u )
.87c9		68		pla		                pla
.87ca		95 04		sta $04,x	                sta 4,x                 ; LSB of xt
.87cc		68		pla		                pla
.87cd		95 05		sta $05,x	                sta 5,x                 ; ( -- xt ? u )
.87cf		a5 00		lda $00		                lda cp                  ; LSB of cp
.87d1		95 02		sta $02,x	                sta 2,x
.87d3		a5 01		lda $01		                lda cp+1
.87d5		95 03		sta $03,x	                sta 3,x                 ; ( -- xt cp u )
.87d7		a0 00		ldy #$00	                ldy #0
.87d9						_strip_loop:
.87d9		b9 5d 88	lda $885d,y	                lda strip_table,y      ; LSB of first word
.87dc		d5 04		cmp $04,x	                cmp 4,x                 ; LSB of xt
.87de		d0 07		bne $87e7	                bne _next_entry
.87e0		b9 5e 88	lda $885e,y	                lda strip_table+1,y
.87e3		d5 05		cmp $05,x	                cmp 5,x
.87e5		f0 0c		beq $87f3	                beq _found_entry
.87e7						_next_entry:
.87e7		b9 5d 88	lda $885d,y	                lda strip_table,y      ; pointing to LSB
.87ea		19 5e 88	ora $885e,y	                ora strip_table+1,y    ; get MSB
.87ed		f0 22		beq $8811	                beq _underflow_strip    ; table done, let's get out of here
.87ef		c8		iny		                iny
.87f0		c8		iny		                iny
.87f1		80 e6		bra $87d9	                bra _strip_loop
.87f3						_found_entry:
.87f3		98		tya		                tya
.87f4		4a		lsr a		                lsr
.87f5		a8		tay		                tay
.87f6		b9 69 88	lda $8869,y	                lda strip_size,y
.87f9		85 23		sta $23		                sta tmptos              ; save a copy
.87fb		18		clc		                clc
.87fc		75 04		adc $04,x	                adc 4,x
.87fe		95 04		sta $04,x	                sta 4,x
.8800		90 02		bcc $8804	                bcc+
.8802		f6 05		inc $05,x	                inc 5,x                 ; we just care about the carry
.8804						+
.8804		06 23		asl $23		                asl tmptos
.8806		38		sec		                sec
.8807		b5 00		lda $00,x	                lda 0,x
.8809		e5 23		sbc $23		                sbc tmptos
.880b		95 00		sta $00,x	                sta 0,x
.880d		b0 02		bcs $8811	                bcs +
.880f		d6 01		dec $01,x	                dec 1,x                 ; we just care about the borrow
.8811						+
.8811						_underflow_strip:
.8811		a0 02		ldy #$02	                ldy #uf_strip_offset
.8813		b1 08		lda ($08),y	                lda (up),y
.8815		c8		iny		                iny
.8816		11 08		ora ($08),y	                ora (up),y
.8818		f0 1c		beq $8836	                beq cmpl_inline
.881a		a5 29		lda $29		                lda tmp3
.881c		29 10		and #$10	                and #UF
.881e		f0 16		beq $8836	                beq cmpl_inline
.8820		18		clc		                clc
.8821		b5 04		lda $04,x	                lda 4,x
.8823		69 03		adc #$03	                adc #3
.8825		95 04		sta $04,x	                sta 4,x
.8827		90 02		bcc $882b	                bcc +
.8829		f6 05		inc $05,x	                inc 5,x                  ; we just care about the carry
.882b						+
.882b		38		sec		                sec
.882c		b5 00		lda $00,x	                lda 0,x
.882e		e9 03		sbc #$03	                sbc #3
.8830		95 00		sta $00,x	                sta 0,x
.8832		b0 02		bcs $8836	                bcs +
.8834		d6 01		dec $01,x	                dec 1,x                  ; we just care about the borrow
.8836						+
.8836						cmpl_inline:
.8836		b5 01		lda $01,x	                lda 1,x                 ; MSB
.8838		48		pha		                pha
.8839		b5 00		lda $00,x	                lda 0,x                 ; LSB
.883b		48		pha		                pha
.883c		20 f8 94	jsr $94f8	                jsr xt_move
.883f		18		clc		                clc
.8840		68		pla		                pla                     ; LSB
.8841		65 00		adc $00		                adc cp
.8843		85 00		sta $00		                sta cp
.8845		68		pla		                pla                     ; MSB
.8846		65 01		adc $01		                adc cp+1
.8848		85 01		sta $01		                sta cp+1
.884a		60		rts		                rts
.884b						cmpl_inline_y:
.884b		ca		dex		                dex             ; set up stack as ( src dst n -- )
.884c		ca		dex		                dex
.884d		ca		dex		                dex
.884e		ca		dex		                dex
.884f		94 00		sty $00,x	                sty 0,x
.8851		74 01		stz $01,x	                stz 1,x             ; assume < 256 bytes
.8853		a5 00		lda $00		                lda cp
.8855		95 02		sta $02,x	                sta 2,x
.8857		a5 01		lda $01		                lda cp+1
.8859		95 03		sta $03,x	                sta 3,x
.885b		80 d9		bra $8836	                bra cmpl_inline
.885d						strip_table:
>885d		ba 99 a5 99 a2 a1		                .word xt_r_from, xt_r_fetch, xt_to_r    ; R>, R@, >R
>8863		d4 a2 5a a2 00 00		                .word xt_two_to_r, xt_two_r_from, 0000  ; 2>R, 2R>, EOL
.8869						strip_size:
>8869		04 04 04 06 06 00		                .byte 4, 4, 4, 6, 6, 0          ; R>, R@, >R, 2>R, 2R>, EOL
.886f						compile_as_jump:
.886f		68		pla		                pla             ; LSB
.8870		7a		ply		                ply             ; MSB
.8871		20 bf d5	jsr $d5bf	                jsr cmpl_subroutine
.8874		e8		inx		                inx             ; drop xt
.8875		e8		inx		                inx
.8876						z_compile_comma:
.8876		60		rts		                rts
.8877						xt_compile_only:
.8877		20 c9 d6	jsr $d6c9	                jsr current_to_dp
.887a		a0 01		ldy #$01	                ldy #1          ; offset for status byte
.887c		b1 02		lda ($02),y	                lda (dp),y
.887e		09 01		ora #$01	                ora #CO        ; make sure bit 7 is set
.8880		91 02		sta ($02),y	                sta (dp),y
.8882		60		rts		z_compile_only: rts
.8883						xt_value:
.8883						xt_constant:
.8883		20 82 d7	jsr $d782	                jsr underflow_1
.8886		20 db 88	jsr $88db	                jsr xt_create
.8889		38		sec		                sec
.888a		a5 00		lda $00		                lda cp
.888c		e9 02		sbc #$02	                sbc #2
.888e		85 25		sta $25		                sta tmp1
.8890		a5 01		lda $01		                lda cp+1
.8892		e9 00		sbc #$00	                sbc #0
.8894		85 26		sta $26		                sta tmp1+1
.8896		a9 d8		lda #$d8	                lda #<doconst           ; LSB of DOCONST
.8898		92 25		sta ($25)	                sta (tmp1)
.889a		a0 01		ldy #$01	                ldy #1
.889c		a9 d5		lda #$d5	                lda #>doconst           ; MSB of DOCONST
.889e		91 25		sta ($25),y	                sta (tmp1),y
.88a0		20 de 86	jsr $86de	                jsr xt_comma            ; drop through to adjust_z
.88a3						adjust_z:
.88a3		20 4f 92	jsr $924f	                jsr xt_latestnt         ; gives us ( -- nt )
.88a6		b5 00		lda $00,x	                lda 0,x
.88a8		85 25		sta $25		                sta tmp1
.88aa		b5 01		lda $01,x	                lda 1,x
.88ac		85 26		sta $26		                sta tmp1+1
.88ae		a0 06		ldy #$06	                ldy #6
.88b0		b1 25		lda ($25),y	                lda (tmp1),y
.88b2		18		clc		                clc
.88b3		69 02		adc #$02	                adc #2
.88b5		91 25		sta ($25),y	                sta (tmp1),y
.88b7		c8		iny		                iny
.88b8		b1 25		lda ($25),y	                lda (tmp1),y
.88ba		69 00		adc #$00	                adc #0                  ; only need carry
.88bc		91 25		sta ($25),y	                sta (tmp1),y
.88be		e8		inx		                inx
.88bf		e8		inx		                inx
.88c0						z_value:
.88c0		60		rts		z_constant:     rts
.88c1						xt_count:
.88c1		20 82 d7	jsr $d782	                jsr underflow_1
.88c4		a1 00		lda ($00,x)	                lda (0,x)       ; Get number of characters (255 max)
.88c6		a8		tay		                tay
.88c7		f6 00		inc $00,x	                inc 0,x         ; LSB
.88c9		d0 02		bne $88cd	                bne +
.88cb		f6 01		inc $01,x	                inc 1,x         ; MSB
.88cd		98		tya		+               tya
.88ce		ca		dex		                dex
.88cf		ca		dex		                dex
.88d0		95 00		sta $00,x	                sta 0,x         ; LSB
.88d2		74 01		stz $01,x	                stz 1,x         ; MSB, always zero
.88d4		60		rts		z_count:        rts
.88d5						xt_cr:
.88d5		a9 0a		lda #$0a	                lda #AscLF
.88d7		20 7b 8d	jsr $8d7b	                jsr emit_a
.88da		60		rts		z_cr:           rts
.88db						xt_create:
.88db		20 09 98	jsr $9809	                jsr xt_parse_name       ; ( addr u )
.88de		b5 00		lda $00,x	                lda 0,x
.88e0		15 01		ora $01,x	                ora 1,x
.88e2		d0 05		bne $88e9	                bne _got_name
.88e4		a9 05		lda #$05	                lda #err_noname
.88e6		4c 98 d7	jmp $d798	                jmp error
.88e9						_got_name:
.88e9		74 01		stz $01,x	                stz 1,x
.88eb		20 ea a1	jsr $a1ea	                jsr xt_two_dup          ; ( addr u addr u )
.88ee		20 60 8f	jsr $8f60	                jsr xt_find_name        ; ( addr u flag ) (non-zero nt as flag)
.88f1		b5 00		lda $00,x	                lda 0,x
.88f3		15 01		ora $01,x	                ora 1,x
.88f5		f0 1e		beq $8915	                beq _new_name           ; We haven't seen this one before.
.88f7		e8		inx		                inx                     ; Drop flag (nt) from find-name.
.88f8		e8		inx		                inx
.88f9		24 1c		bit $1c		                bit status
.88fb		10 08		bpl $8905	                bpl _redefined_name     ; Bit 7 is zero, so print the message.
.88fd		a9 80		lda #$80	                lda #$80                ; Set bit 7 to indicate dup
.88ff		05 1c		ora $1c		                ora status
.8901		85 1c		sta $1c		                sta status
.8903		80 18		bra $891d	                bra _process_name
.8905						_redefined_name:
.8905		a9 02		lda #$02	                lda #str_redefined
.8907		20 be d7	jsr $d7be	                jsr print_string_no_lf
.890a		20 ea a1	jsr $a1ea	                jsr xt_two_dup           ; ( addr u addr u )
.890d		20 35 a3	jsr $a335	                jsr xt_type
.8910		20 82 9f	jsr $9f82	                jsr xt_space
.8913		80 08		bra $891d	                bra _process_name
.8915						_new_name:
.8915		e8		inx		                inx                     ; Drop flag (0) from find-name.
.8916		e8		inx		                inx
.8917		a9 7f		lda #$7f	                lda #$7F                ; Clear bit 0 of status to indicate new word.
.8919		25 1c		and $1c		                and status
.891b		85 1c		sta $1c		                sta status
.891d						_process_name:
.891d		b5 00		lda $00,x	                lda 0,x
.891f		85 27		sta $27		                sta tmp2                ; store length of string in tmp2
.8921		a5 00		lda $00		                lda cp
.8923		85 25		sta $25		                sta tmp1
.8925		a5 01		lda $01		                lda cp+1
.8927		85 26		sta $26		                sta tmp1+1
.8929		b5 00		lda $00,x	                lda 0,x
.892b		18		clc		                clc
.892c		69 08		adc #$08	                adc #8
.892e		85 29		sta $29		                sta tmp3                ; total header length
.8930		18		clc		                clc
.8931		69 03		adc #$03	                adc #3
.8933		95 00		sta $00,x	                sta 0,x
.8935		74 01		stz $01,x	                stz 1,x         ; max header size is 255 chars
.8937		20 30 82	jsr $8230	                jsr xt_allot    ; ( addr )
.893a		20 c9 d6	jsr $d6c9	                jsr current_to_dp
.893d		a0 00		ldy #$00	                ldy #0
.893f		a5 27		lda $27		                lda tmp2
.8941		91 25		sta ($25),y	                sta (tmp1),y
.8943		a9 08		lda #$08	                lda #NN
.8945		09 20		ora #$20	                ora #HC
.8947		c8		iny		                iny
.8948		91 25		sta ($25),y	                sta (tmp1),y
.894a		c8		iny		                iny
.894b		a5 02		lda $02		                lda dp
.894d		91 25		sta ($25),y	                sta (tmp1),y
.894f		c8		iny		                iny
.8950		a5 03		lda $03		                lda dp+1
.8952		91 25		sta ($25),y	                sta (tmp1),y
.8954		c8		iny		                iny
.8955		a5 26		lda $26		                lda tmp1+1
.8957		85 03		sta $03		                sta dp+1
.8959		a5 25		lda $25		                lda tmp1
.895b		85 02		sta $02		                sta dp
.895d		18		clc		                clc
.895e		65 29		adc $29		                adc tmp3        ; add total header length
.8960		91 25		sta ($25),y	                sta (tmp1),y
.8962		48		pha		                pha             ; we need this in the next step
.8963		c8		iny		                iny
.8964		a5 26		lda $26		                lda tmp1+1
.8966		69 00		adc #$00	                adc #0          ; only need the carry
.8968		91 25		sta ($25),y	                sta (tmp1),y
.896a		c8		iny		                iny
.896b		68		pla		                pla             ; LSB of "z_" address
.896c		18		clc		                clc
.896d		69 03		adc #$03	                adc #3
.896f		91 25		sta ($25),y	                sta (tmp1),y
.8971		88		dey		                dey             ; get the MSB of xt back
.8972		b1 25		lda ($25),y	                lda (tmp1),y
.8974		69 00		adc #$00	                adc #0          ; only need the carry
.8976		c8		iny		                iny
.8977		c8		iny		                iny
.8978		91 25		sta ($25),y	                sta (tmp1),y
.897a		c8		iny		                iny
.897b		b5 00		lda $00,x	                lda 0,x
.897d		38		sec		                sec
.897e		e9 08		sbc #$08	                sbc #8
.8980		85 23		sta $23		                sta tmptos
.8982		b5 01		lda $01,x	                lda 1,x
.8984		e9 00		sbc #$00	                sbc #0          ; only need carry
.8986		85 24		sta $24		                sta tmptos+1
.8988						_name_loop:
.8988		b1 23		lda ($23),y	                lda (tmptos),y
.898a		c9 5b		cmp #$5b	                cmp #'Z'+1
.898c		b0 06		bcs $8994	                bcs _store_name
.898e		c9 41		cmp #$41	                cmp #'A'
.8990		90 02		bcc $8994	                bcc _store_name
.8992		09 20		ora #$20	                ora #$20
.8994						_store_name:
.8994		91 25		sta ($25),y	                sta (tmp1),y
.8996		c8		iny		                iny
.8997		c6 27		dec $27		                dec tmp2
.8999		d0 ed		bne $8988	                bne _name_loop
.899b		a9 20		lda #$20	                lda #OpJSR
.899d		91 25		sta ($25),y	                sta (tmp1),y
.899f		c8		iny		                iny
.89a0		a9 1e		lda #$1e	                lda #<dovar
.89a2		91 25		sta ($25),y	                sta (tmp1),y
.89a4		c8		iny		                iny
.89a5		a9 d6		lda #$d6	                lda #>dovar
.89a7		91 25		sta ($25),y	                sta (tmp1),y
.89a9		20 dc d6	jsr $d6dc	                jsr dp_to_current
.89ac		e8		inx		                inx
.89ad		e8		inx		                inx
.89ae		60		rts		z_create:       rts
.89af						xt_d_minus:
.89af		20 91 d7	jsr $d791	                jsr underflow_4 ; two double numbers
.89b2		38		sec		                sec
.89b3		b5 06		lda $06,x	                lda 6,x         ; LSB of lower word
.89b5		f5 02		sbc $02,x	                sbc 2,x
.89b7		95 06		sta $06,x	                sta 6,x
.89b9		b5 07		lda $07,x	                lda 7,x         ; MSB of lower word
.89bb		f5 03		sbc $03,x	                sbc 3,x
.89bd		95 07		sta $07,x	                sta 7,x
.89bf		b5 04		lda $04,x	                lda 4,x         ; LSB of upper word
.89c1		f5 00		sbc $00,x	                sbc 0,x
.89c3		95 04		sta $04,x	                sta 4,x
.89c5		b5 05		lda $05,x	                lda 5,x         ; MSB of upper word
.89c7		f5 01		sbc $01,x	                sbc 1,x
.89c9		95 05		sta $05,x	                sta 5,x
.89cb		e8		inx		                inx
.89cc		e8		inx		                inx
.89cd		e8		inx		                inx
.89ce		e8		inx		                inx
.89cf		60		rts		z_d_minus:      rts
.89d0						xt_d_plus:
.89d0		20 91 d7	jsr $d791	                jsr underflow_4 ; two double numbers
.89d3		18		clc		                clc
.89d4		b5 02		lda $02,x	                lda 2,x         ; LSB of lower word
.89d6		75 06		adc $06,x	                adc 6,x
.89d8		95 06		sta $06,x	                sta 6,x
.89da		b5 03		lda $03,x	                lda 3,x         ; MSB of lower word
.89dc		75 07		adc $07,x	                adc 7,x
.89de		95 07		sta $07,x	                sta 7,x
.89e0		b5 00		lda $00,x	                lda 0,x         ; LSB of upper word
.89e2		75 04		adc $04,x	                adc 4,x
.89e4		95 04		sta $04,x	                sta 4,x
.89e6		b5 01		lda $01,x	                lda 1,x         ; MSB of upper word
.89e8		75 05		adc $05,x	                adc 5,x
.89ea		95 05		sta $05,x	                sta 5,x
.89ec		e8		inx		                inx
.89ed		e8		inx		                inx
.89ee		e8		inx		                inx
.89ef		e8		inx		                inx
.89f0		60		rts		z_d_plus:       rts
.89f1						xt_d_to_s:
.89f1		20 87 d7	jsr $d787	                jsr underflow_2
.89f4		e8		inx		                inx
.89f5		e8		inx		                inx
.89f6		60		rts		z_d_to_s:       rts
.89f7						xt_dabs:
.89f7		20 87 d7	jsr $d787	                jsr underflow_2 ; double number
.89fa		b5 01		lda $01,x	                lda 1,x         ; MSB of high cell
.89fc		10 17		bpl $8a15	                bpl _done       ; positive, we get off light
.89fe		a0 00		ldy #$00	                ldy #0
.8a00		38		sec		                sec
.8a01		98		tya		                tya
.8a02		f5 02		sbc $02,x	                sbc 2,x         ; LSB of low cell
.8a04		95 02		sta $02,x	                sta 2,x
.8a06		98		tya		                tya
.8a07		f5 03		sbc $03,x	                sbc 3,x         ; MSB of low cell
.8a09		95 03		sta $03,x	                sta 3,x
.8a0b		98		tya		                tya
.8a0c		f5 00		sbc $00,x	                sbc 0,x         ; LSB of high cell
.8a0e		95 00		sta $00,x	                sta 0,x
.8a10		98		tya		                tya
.8a11		f5 01		sbc $01,x	                sbc 1,x         ; MSB of high cell
.8a13		95 01		sta $01,x	                sta 1,x
.8a15						_done:
.8a15		60		rts		z_dabs:         rts
.8a16						xt_decimal:
.8a16		a9 0a		lda #$0a	                lda #10
.8a18		85 18		sta $18		                sta base
.8a1a		64 19		stz $19		                stz base+1              ; paranoid
.8a1c		60		rts		z_decimal:      rts
.8a1d						xt_defer:
.8a1d		20 db 88	jsr $88db	                jsr xt_create
.8a20		a5 00		lda $00		                lda cp          ; LSB
.8a22		38		sec		                sec
.8a23		e9 02		sbc #$02	                sbc #2
.8a25		85 25		sta $25		                sta tmp1
.8a27		a5 01		lda $01		                lda cp+1        ; MSB
.8a29		e9 00		sbc #$00	                sbc #0          ; we only care about the borrow
.8a2b		85 26		sta $26		                sta tmp1+1
.8a2d		a0 00		ldy #$00	                ldy #0
.8a2f		a9 ec		lda #$ec	                lda #<dodefer   ; LSB
.8a31		91 25		sta ($25),y	                sta (tmp1),y
.8a33		c8		iny		                iny
.8a34		a9 d5		lda #$d5	                lda #>dodefer   ; MSB
.8a36		91 25		sta ($25),y	                sta (tmp1),y
.8a38		a9 00		lda #$00	                lda #<defer_error
.8a3a		92 00		sta ($00)	                sta (cp)
.8a3c		e6 00		inc $00		                inc cp
.8a3e		d0 02		bne $8a42	                bne +
.8a40		e6 01		inc $01		                inc cp+1
.8a42						+
.8a42		a9 d6		lda #$d6	                lda #>defer_error
.8a44		92 00		sta ($00)	                sta (cp)
.8a46		e6 00		inc $00		                inc cp
.8a48		d0 02		bne $8a4c	                bne +
.8a4a		e6 01		inc $01		                inc cp+1
.8a4c						+
.8a4c		20 a3 88	jsr $88a3	                jsr adjust_z    ; adjust header to correct length
.8a4f		60		rts		z_defer:        rts
.8a50						xt_defer_fetch:
.8a50		20 c1 a0	jsr $a0c1	                jsr xt_to_body
.8a53		20 05 8f	jsr $8f05	                jsr xt_fetch
.8a56		60		rts		z_defer_fetch:  rts
.8a57						xt_defer_store:
.8a57		20 c1 a0	jsr $a0c1	                jsr xt_to_body
.8a5a		20 f1 9f	jsr $9ff1	                jsr xt_store
.8a5d		60		rts		z_defer_store:  rts
.8a5e						xt_definitions:
.8a5e		a0 23		ldy #$23	                ldy #search_order_offset    ; Transfer byte variable
.8a60		b1 08		lda ($08),y	                lda (up),y                  ; SEARCH_ORDER[0] to
.8a62		a0 08		ldy #$08	                ldy #current_offset         ; byte variable CURRENT.
.8a64		91 08		sta ($08),y	                sta (up),y
.8a66		60		rts		z_definitions:  rts
.8a67						xt_depth:
.8a67		a9 78		lda #$78	                lda #dsp0
.8a69		86 1e		stx $1e		                stx tmpdsp
.8a6b		38		sec		                sec
.8a6c		e5 1e		sbc $1e		                sbc tmpdsp
.8a6e		4a		lsr a		                lsr
.8a6f		ca		dex		                dex
.8a70		ca		dex		                dex
.8a71		95 00		sta $00,x	                sta 0,x
.8a73		74 01		stz $01,x	                stz 1,x
.8a75		60		rts		z_depth:        rts
.8a76						xt_digit_question:
.8a76		20 82 d7	jsr $d782	                jsr underflow_1
.8a79		ca		dex		                dex
.8a7a		ca		dex		                dex
.8a7b		74 00		stz $00,x	                stz 0,x                 ; default flag is failure
.8a7d		74 01		stz $01,x	                stz 1,x
.8a7f		74 03		stz $03,x	                stz 3,x                 ; paranoid
.8a81		b5 02		lda $02,x	                lda 2,x
.8a83		c9 30		cmp #$30	                cmp #'0'
.8a85		90 23		bcc $8aaa	                bcc _done               ; failure flag already set
.8a87		c9 3a		cmp #$3a	                cmp #'9'+1               ; this is actually ":"
.8a89		90 12		bcc $8a9d	                bcc _checkbase
.8a8b		c9 41		cmp #$41	                cmp #'A'
.8a8d		90 1b		bcc $8aaa	                bcc _done               ; failure flag is already set
.8a8f		c9 61		cmp #$61	                cmp #'a'
.8a91		90 07		bcc $8a9a	                bcc _case_done          ; not lower case, too low
.8a93		c9 7b		cmp #$7b	                cmp #'z'+1
.8a95		b0 03		bcs $8a9a	                bcs _case_done          ; not lower case, too high
.8a97		18		clc		                clc                     ; just right
.8a98		69 e0		adc #$e0	                adc #$E0                ; offset to upper case (wraps)
.8a9a						_case_done:
.8a9a		38		sec		                sec
.8a9b		e9 07		sbc #$07	                sbc #7                  ; fall through to _checkbase
.8a9d						_checkbase:
.8a9d		38		sec		                sec
.8a9e		e9 30		sbc #$30	                sbc #'0'                 ; this is also the conversion step
.8aa0		c5 18		cmp $18		                cmp base
.8aa2		b0 06		bcs $8aaa	                bcs _done               ; already have false flag
.8aa4		95 02		sta $02,x	                sta 2,x                 ; put number in NOS
.8aa6		d6 00		dec $00,x	                dec 0,x                 ; set success flag
.8aa8		d6 01		dec $01,x	                dec 1,x
.8aaa						_done:
.8aaa						z_digit_question:
.8aaa		60		rts		                rts
.8aab						xt_disasm:
.8aab		20 87 d7	jsr $d787	                jsr underflow_2
.8aae		20 68 ab	jsr $ab68	                jsr disassembler
.8ab1		60		rts		z_disasm:       rts
.8ab2						xt_dnegate:
.8ab2		20 87 d7	jsr $d787	                jsr underflow_2 ; double number
.8ab5		a0 00		ldy #$00	     		ldy #0
.8ab7		38		sec		                sec
.8ab8		98		tya		                tya
.8ab9		f5 02		sbc $02,x	                sbc 2,x         ; LSB of low cell
.8abb		95 02		sta $02,x	                sta 2,x
.8abd		98		tya		                tya
.8abe		f5 03		sbc $03,x	                sbc 3,x         ; MSB of low cell
.8ac0		95 03		sta $03,x	                sta 3,x
.8ac2		98		tya		                tya
.8ac3		f5 00		sbc $00,x	                sbc 0,x         ; LSB of high cell
.8ac5		95 00		sta $00,x	                sta 0,x
.8ac7		98		tya		                tya
.8ac8		f5 01		sbc $01,x	                sbc 1,x         ; MSB of high cell
.8aca		95 01		sta $01,x	                sta 1,x
.8acc		60		rts		z_dnegate:      rts
.8acd						xt_question_do:
.8acd		a0 01		ldy #$01	                ldy #1                  ; 1 is ?DO, jump to common code
.8acf		80 02		bra $8ad3	                bra do_common           ; skip flag for DO
.8ad1						xt_do:
.8ad1		a0 00		ldy #$00	                ldy #0                ; 0 is DO, drop through to DO_COMMON
.8ad3						do_common:
.8ad3		f0 18		beq $8aed	                beq _compile_do
.8ad5		ca		dex		                dex
.8ad6		ca		dex		                dex
.8ad7		a9 0a		lda #$0a	                lda #<question_do_runtime
.8ad9		95 00		sta $00,x	                sta 0,x
.8adb		a9 8b		lda #$8b	                lda #>question_do_runtime
.8add		95 01		sta $01,x	                sta 1,x
.8adf		a0 10		ldy #$10	                ldy #question_do_runtime_end-question_do_runtime
.8ae1		20 4b 88	jsr $884b	                jsr cmpl_inline_y
.8ae4		a5 00		lda $00		                lda cp
.8ae6		a4 01		ldy $01		                ldy cp+1
.8ae8		48		pha		                pha
.8ae9		20 cb d5	jsr $d5cb	                jsr cmpl_word      ; write two arbitrary placeholder bytes
.8aec		68		pla		                pla
.8aed						_compile_do:
.8aed		ca		dex		                dex
.8aee		ca		dex		                dex
.8aef		95 00		sta $00,x	                sta 0,x
.8af1		98		tya		                tya
.8af2		95 01		sta $01,x	                sta 1,x
.8af4		ca		dex		                dex
.8af5		ca		dex		                dex
.8af6		a5 21		lda $21		                lda loopleave
.8af8		95 00		sta $00,x	                sta 0,x
.8afa		a5 22		lda $22		                lda loopleave+1
.8afc		95 01		sta $01,x	                sta 1,x
.8afe		64 22		stz $22		                stz loopleave+1
.8b00		a0 8b		ldy #$8b	                ldy #>do_runtime
.8b02		a9 1a		lda #$1a	                lda #<do_runtime
.8b04		20 bf d5	jsr $d5bf	                jsr cmpl_subroutine
.8b07		4c 8f 90	jmp $908f	                jmp xt_here
.8b0a						z_question_do:
.8b0a						z_do:
.8b0a						question_do_runtime:
.8b0a		20 ea a1	jsr $a1ea	                jsr xt_two_dup          ; ( n1 n2 n1 n2 )
.8b0d		20 53 8e	jsr $8e53	                jsr xt_equal            ; ( -- n1 n2 f )
.8b10		20 2c 91	jsr $912c	                jsr zero_test_runtime   ; consume f, setting Z
.8b13		f0 07		beq $8b1c	                beq question_do_runtime_end+2
.8b15		e8		inx		                inx                     ; drop loop limits
.8b16		e8		inx		                inx
.8b17		e8		inx		                inx
.8b18		e8		inx		                inx
>8b19		4c				                .byte OpJMP             ; jmp
.8b1a						question_do_runtime_end:
.8b1a						do_runtime:
.8b1a		a4 1f		ldy $1f		                ldy loopctrl
.8b1c		30 05		bmi $8b23	                bmi +                   ; is this the first LCB?
.8b1e		a5 20		lda $20		                lda loopidx0            ; no, write cached LSB
.8b20		99 00 01	sta $0100,y	                sta loopindex,y         ; back to loopindex in the LCB
.8b23						+
.8b23		c8		iny		                iny                     ; Reserve 4 bytes for next LCB
.8b24		c8		iny		                iny
.8b25		c8		iny		                iny
.8b26		c8		iny		                iny
.8b27		84 1f		sty $1f		                sty loopctrl            ; Udpate LCB stack pointer
.8b29		38		sec		                sec
.8b2a		a9 00		lda #$00	                lda #0
.8b2c		f5 02		sbc $02,x	                sbc 2,x             ; LSB of limit
.8b2e		99 02 01	sta $0102,y	                sta loopfufa,y      ; write to loop control block
.8b31		a9 80		lda #$80	                lda #$80
.8b33		f5 03		sbc $03,x	                sbc 3,x             ; MSB of limit
.8b35		99 03 01	sta $0103,y	                sta loopfufa+1,y
.8b38		18		clc		                clc
.8b39		b5 00		lda $00,x	                lda 0,x             ; LSB of original index
.8b3b		79 02 01	adc $0102,y	                adc loopfufa,y
.8b3e		85 20		sta $20		                sta loopidx0        ; write LSB to cache not LCB
.8b40		b5 01		lda $01,x	                lda 1,x             ; MSB of orginal index
.8b42		79 03 01	adc $0103,y	                adc loopfufa+1,y
.8b45		99 01 01	sta $0101,y	                sta loopindex+1,y
.8b48		e8		inx		                inx                 ; clean up the stack
.8b49		e8		inx		                inx
.8b4a		e8		inx		                inx
.8b4b		e8		inx		                inx
.8b4c		60		rts		                rts
.8b4d						xt_does:
.8b4d		a0 8b		ldy #$8b	                ldy #>does_runtime
.8b4f		a9 5c		lda #$5c	                lda #<does_runtime
.8b51		20 bf d5	jsr $d5bf	                jsr cmpl_subroutine
.8b54		a0 d6		ldy #$d6	                ldy #>dodoes
.8b56		a9 05		lda #$05	                lda #<dodoes
.8b58		20 bf d5	jsr $d5bf	                jsr cmpl_subroutine
.8b5b		60		rts		z_does:         rts
.8b5c						does_runtime:
.8b5c		7a		ply		                ply             ; LSB
.8b5d		68		pla		                pla             ; MSB
.8b5e		c8		iny		                iny
.8b5f		d0 01		bne $8b62	                bne +
.8b61		1a		inc a		                ina
.8b62						+
.8b62		84 25		sty $25		                sty tmp1
.8b64		85 26		sta $26		                sta tmp1+1
.8b66		20 c9 d6	jsr $d6c9	                jsr current_to_dp   ; Grab the DP from the CURRENT wordlist.
.8b69		a5 02		lda $02		                lda dp
.8b6b		18		clc		                clc
.8b6c		69 04		adc #$04	                adc #4
.8b6e		85 27		sta $27		                sta tmp2
.8b70		a5 03		lda $03		                lda dp+1
.8b72		69 00		adc #$00	                adc #0          ; we only care about the carry
.8b74		85 28		sta $28		                sta tmp2+1
.8b76		b2 27		lda ($27)	                lda (tmp2)
.8b78		18		clc		                clc
.8b79		69 01		adc #$01	                adc #1
.8b7b		85 29		sta $29		                sta tmp3
.8b7d		a0 01		ldy #$01	                ldy #1
.8b7f		b1 27		lda ($27),y	                lda (tmp2),y
.8b81		69 00		adc #$00	                adc #0          ; we only care about the carry
.8b83		85 2a		sta $2a		                sta tmp3+1
.8b85		a5 25		lda $25		                lda tmp1        ; LSB
.8b87		92 29		sta ($29)	                sta (tmp3)
.8b89		a5 26		lda $26		                lda tmp1+1
.8b8b		91 29		sta ($29),y	                sta (tmp3),y    ; Y is still 1
.8b8d		60		rts		                rts
.8b8e						xt_dot:
.8b8e		20 82 d7	jsr $d782	                jsr underflow_1
.8b91		20 07 8d	jsr $8d07	                jsr xt_dup                      ; ( n n )
.8b94		20 d1 80	jsr $80d1	                jsr xt_abs                      ; ( n u )
.8b97		20 eb a5	jsr $a5eb	                jsr xt_zero                     ; ( n u 0 )
.8b9a		20 7f 92	jsr $927f	                jsr xt_less_number_sign         ; ( n u 0 )
.8b9d		20 08 97	jsr $9708	                jsr xt_number_sign_s            ; ( n ud )
.8ba0		20 78 9a	jsr $9a78	                jsr xt_rot                      ; ( ud n )
.8ba3		20 53 9e	jsr $9e53	                jsr xt_sign                     ; ( ud )
.8ba6		20 e6 96	jsr $96e6	                jsr xt_number_sign_greater      ; ( addr u )
.8ba9		20 35 a3	jsr $a335	                jsr xt_type
.8bac		20 82 9f	jsr $9f82	                jsr xt_space
.8baf		60		rts		z_dot:          rts
.8bb0						xt_dot_paren:
.8bb0		ca		dex		                dex
.8bb1		ca		dex		                dex
.8bb2		a9 29		lda #$29	                lda #41     ; Right parenthesis
.8bb4		95 00		sta $00,x	                sta 0,x
.8bb6		74 01		stz $01,x	                stz 1,x
.8bb8		20 64 98	jsr $9864	                jsr xt_parse
.8bbb		20 35 a3	jsr $a335	                jsr xt_type
.8bbe		60		rts		z_dot_paren:    rts
.8bbf						xt_dot_quote:
.8bbf		20 03 9c	jsr $9c03	                jsr xt_s_quote
.8bc2		a0 a3		ldy #$a3	                ldy #>xt_type
.8bc4		a9 35		lda #$35	                lda #<xt_type
.8bc6		20 bf d5	jsr $d5bf	                jsr cmpl_subroutine
.8bc9		60		rts		z_dot_quote:    rts
.8bca						xt_dot_r:
.8bca		20 87 d7	jsr $d787	                jsr underflow_2
.8bcd		20 a2 a1	jsr $a1a2	                jsr xt_to_r
.8bd0		20 07 8d	jsr $8d07	                jsr xt_dup
.8bd3		20 d1 80	jsr $80d1	                jsr xt_abs
.8bd6		20 eb a5	jsr $a5eb	                jsr xt_zero
.8bd9		20 7f 92	jsr $927f	                jsr xt_less_number_sign
.8bdc		20 08 97	jsr $9708	                jsr xt_number_sign_s
.8bdf		20 78 9a	jsr $9a78	                jsr xt_rot
.8be2		20 53 9e	jsr $9e53	                jsr xt_sign
.8be5		20 e6 96	jsr $96e6	                jsr xt_number_sign_greater
.8be8		20 ba 99	jsr $99ba	                jsr xt_r_from
.8beb		20 bd 97	jsr $97bd	                jsr xt_over
.8bee		20 86 94	jsr $9486	                jsr xt_minus
.8bf1		20 88 9f	jsr $9f88	                jsr xt_spaces
.8bf4		20 35 a3	jsr $a335	                jsr xt_type
.8bf7		60		rts		z_dot_r:        rts
.8bf8						xt_dot_s:
.8bf8		20 67 8a	jsr $8a67	                jsr xt_depth    ; ( -- u )
.8bfb		a9 3c		lda #$3c	                lda #'<'
.8bfd		20 7b 8d	jsr $8d7b	                jsr emit_a
.8c00		b5 00		lda $00,x	                lda 0,x
.8c02		48		pha		                pha
.8c03		ca		dex		                dex             ; DUP
.8c04		ca		dex		                dex
.8c05		95 00		sta $00,x	                sta 0,x
.8c07		74 01		stz $01,x	                stz 1,x
.8c09		20 ef d7	jsr $d7ef	                jsr print_u
.8c0c		a9 3e		lda #$3e	                lda #'>'
.8c0e		20 7b 8d	jsr $8d7b	                jsr emit_a
.8c11		a9 20		lda #$20	                lda #AscSP      ; ASCII for SPACE
.8c13		20 7b 8d	jsr $8d7b	                jsr emit_a
.8c16		e8		inx		                inx
.8c17		e8		inx		                inx
.8c18		e0 78		cpx #$78	                cpx #dsp0
.8c1a		f0 1e		beq $8c3a	                beq _done
.8c1c						_have_stack:
.8c1c		7a		ply		                ply
.8c1d		a9 77		lda #$77	                lda #dsp0-1     ; go up one to avoid garbage
.8c1f		85 29		sta $29		                sta tmp3
.8c21		64 2a		stz $2a		                stz tmp3+1      ; must be zero page on the 65c02
.8c23						_loop:
.8c23		ca		dex		                dex
.8c24		ca		dex		                dex
.8c25		b2 29		lda ($29)	                lda (tmp3)
.8c27		95 01		sta $01,x	                sta 1,x
.8c29		c6 29		dec $29		                dec tmp3
.8c2b		b2 29		lda ($29)	                lda (tmp3)
.8c2d		95 00		sta $00,x	                sta 0,x
.8c2f		c6 29		dec $29		                dec tmp3
.8c31		5a		phy		                phy
.8c32		20 8e 8b	jsr $8b8e	                jsr xt_dot
.8c35		7a		ply		                ply
.8c36		88		dey		                dey
.8c37		d0 ea		bne $8c23	                bne _loop
.8c39		48		pha		                pha             ; dummy to balance stack
.8c3a						_done:
.8c3a		68		pla		                pla
.8c3b		60		rts		z_dot_s:        rts
.8c3c						xt_d_dot:
.8c3c		20 87 d7	jsr $d787	                jsr underflow_2
.8c3f		20 bf a1	jsr $a1bf	                jsr xt_tuck
.8c42		20 f7 89	jsr $89f7	                jsr xt_dabs
.8c45		20 7f 92	jsr $927f	                jsr xt_less_number_sign
.8c48		20 08 97	jsr $9708	                jsr xt_number_sign_s
.8c4b		20 78 9a	jsr $9a78	                jsr xt_rot
.8c4e		20 53 9e	jsr $9e53	                jsr xt_sign
.8c51		20 e6 96	jsr $96e6	                jsr xt_number_sign_greater
.8c54		20 35 a3	jsr $a335	                jsr xt_type
.8c57		20 82 9f	jsr $9f82	                jsr xt_space
.8c5a		60		rts		z_d_dot:        rts
.8c5b						xt_d_dot_r:
.8c5b		20 8c d7	jsr $d78c	                jsr underflow_3
.8c5e		20 a2 a1	jsr $a1a2	                jsr xt_to_r
.8c61		20 bf a1	jsr $a1bf	                jsr xt_tuck
.8c64		20 f7 89	jsr $89f7	                jsr xt_dabs
.8c67		20 7f 92	jsr $927f	                jsr xt_less_number_sign
.8c6a		20 08 97	jsr $9708	                jsr xt_number_sign_s
.8c6d		20 78 9a	jsr $9a78	                jsr xt_rot
.8c70		20 53 9e	jsr $9e53	                jsr xt_sign
.8c73		20 e6 96	jsr $96e6	                jsr xt_number_sign_greater
.8c76		20 ba 99	jsr $99ba	                jsr xt_r_from
.8c79		20 bd 97	jsr $97bd	                jsr xt_over
.8c7c		20 86 94	jsr $9486	                jsr xt_minus
.8c7f		20 88 9f	jsr $9f88	                jsr xt_spaces
.8c82		20 35 a3	jsr $a335	                jsr xt_type
.8c85		60		rts		z_d_dot_r:      rts
.8c86						xt_drop:
.8c86		20 82 d7	jsr $d782	                jsr underflow_1
.8c89		e8		inx		                inx
.8c8a		e8		inx		                inx
.8c8b		60		rts		z_drop:         rts
.8c8c						xt_dump:
.8c8c		20 87 d7	jsr $d787	                jsr underflow_2
.8c8f						_row:
.8c8f		a0 10		ldy #$10	                ldy #16
.8c91		64 27		stz $27		                stz tmp2
.8c93		20 d5 88	jsr $88d5	                jsr xt_cr
.8c96		b5 03		lda $03,x	                lda 3,x
.8c98		20 3b d6	jsr $d63b	                jsr byte_to_ascii
.8c9b		b5 02		lda $02,x	                lda 2,x
.8c9d		20 3b d6	jsr $d63b	                jsr byte_to_ascii
.8ca0		20 82 9f	jsr $9f82	                jsr xt_space
.8ca3		20 82 9f	jsr $9f82	                jsr xt_space
.8ca6						_loop:
.8ca6		b5 00		lda $00,x	                lda 0,x
.8ca8		15 01		ora $01,x	                ora 1,x
.8caa		f0 39		beq $8ce5	                beq _all_printed
.8cac		a1 02		lda ($02,x)	                lda (2,x)
.8cae		48		pha		                pha                     ; byte_to_ascii destroys A
.8caf		20 3b d6	jsr $d63b	                jsr byte_to_ascii
.8cb2		20 82 9f	jsr $9f82	                jsr xt_space
.8cb5		68		pla		                pla
.8cb6		20 68 d7	jsr $d768	                jsr is_printable
.8cb9		b0 02		bcs $8cbd	                bcs _printable
.8cbb		a9 2e		lda #$2e	                lda #'.'                 ; Print dot if not printable
.8cbd						_printable:
.8cbd		5a		phy		                phy                     ; save counter
.8cbe		a4 27		ldy $27		                ldy tmp2
.8cc0		91 00		sta ($00),y	                sta (cp),y
.8cc2		e6 27		inc $27		                inc tmp2
.8cc4		7a		ply		                ply
.8cc5		c0 09		cpy #$09	                cpy #9
.8cc7		d0 03		bne $8ccc	                bne _next_char
.8cc9		20 82 9f	jsr $9f82	                jsr xt_space
.8ccc						_next_char:
.8ccc		f6 02		inc $02,x	                inc 2,x
.8cce		d0 02		bne $8cd2	                bne _counter
.8cd0		f6 03		inc $03,x	                inc 3,x
.8cd2						_counter:
.8cd2		b5 00		lda $00,x	                lda 0,x
.8cd4		d0 02		bne $8cd8	                bne +
.8cd6		d6 01		dec $01,x	                dec 1,x
.8cd8						+
.8cd8		d6 00		dec $00,x	                dec 0,x
.8cda		88		dey		                dey
.8cdb		d0 c9		bne $8ca6	                bne _loop               ; next byte
.8cdd		20 82 9f	jsr $9f82	                jsr xt_space
.8ce0		20 f3 8c	jsr $8cf3	                jsr dump_print_ascii
.8ce3		80 aa		bra $8c8f	                bra _row                ; new row
.8ce5						_all_printed:
.8ce5		a5 27		lda $27		                lda tmp2
.8ce7		f0 06		beq $8cef	                beq _done
.8ce9		20 82 9f	jsr $9f82	                jsr xt_space
.8cec		20 f3 8c	jsr $8cf3	                jsr dump_print_ascii
.8cef						_done:
.8cef		20 e2 a1	jsr $a1e2	                jsr xt_two_drop         ; one byte less than 4x INX
.8cf2		60		rts		z_dump:         rts
.8cf3						dump_print_ascii:
.8cf3		a0 00		ldy #$00	                ldy #0
.8cf5						_ascii_loop:
.8cf5		b1 00		lda ($00),y	                lda (cp),y
.8cf7		20 7b 8d	jsr $8d7b	                jsr emit_a
.8cfa		c8		iny		                iny
.8cfb		c0 08		cpy #$08	                cpy #8
.8cfd		d0 03		bne $8d02	                bne +
.8cff		20 82 9f	jsr $9f82	                jsr xt_space
.8d02						+
.8d02		c6 27		dec $27		                dec tmp2
.8d04		d0 ef		bne $8cf5	                bne _ascii_loop
.8d06		60		rts		                rts
.8d07						xt_dup:
.8d07		20 82 d7	jsr $d782	                jsr underflow_1
.8d0a		ca		dex		                dex
.8d0b		ca		dex		                dex
.8d0c		b5 02		lda $02,x	                lda 2,x         ; LSB
.8d0e		95 00		sta $00,x	                sta 0,x
.8d10		b5 03		lda $03,x	                lda 3,x         ; MSB
.8d12		95 01		sta $01,x	                sta 1,x
.8d14		60		rts		z_dup:          rts
.8d15						xt_ed:
.8d15		20 57 b4	jsr $b457	                jsr ed6502      ; kept in separate file
.8d18		60		rts		z_ed:           rts
.8d19						xt_else:
.8d19						xt_endof:
.8d19		20 8f 90	jsr $908f	                jsr xt_here
.8d1c		20 47 97	jsr $9747	                jsr xt_one_plus
.8d1f		20 c4 d5	jsr $d5c4	                jsr cmpl_jump
.8d22		20 0c a0	jsr $a00c	                jsr xt_swap         ; ( target orig )
.8d25						xt_then:
.8d25		20 8f 90	jsr $908f	                jsr xt_here
.8d28		a1 02		lda ($02,x)	                lda (2,x)           ; get LSB at orig
.8d2a		1a		inc a		                ina                 ; was LSB $FF?  (only check for $XXFF)
.8d2b		d0 3b		bne $8d68	                bne _no_opt
.8d2d		20 ea a1	jsr $a1ea	                jsr xt_two_dup
.8d30		20 0c a0	jsr $a00c	                jsr xt_swap
.8d33		20 86 94	jsr $9486	                jsr xt_minus        ; ( C: orig here offset )
.8d36		b5 01		lda $01,x	                lda 1,x
.8d38		d0 2c		bne $8d66	                bne _too_far        ; MSB must be zero
.8d3a		b5 00		lda $00,x	                lda 0,x
.8d3c		3a		dec a		                dea                 ; we want here - orig - 2
.8d3d		3a		dec a		                dea                 ; don't care about carry
.8d3e		30 26		bmi $8d66	                bmi _too_far        ; up to 127 is ok
.8d40		95 00		sta $00,x	                sta 0,x             ; stash offset - 2
.8d42		38		sec		                sec                 ; put orig - 2 in tmp1
.8d43		b5 04		lda $04,x	                lda 4,x
.8d45		e9 02		sbc #$02	                sbc #2
.8d47		85 25		sta $25		                sta tmp1
.8d49		b5 05		lda $05,x	                lda 5,x
.8d4b		e9 00		sbc #$00	                sbc #0
.8d4d		85 26		sta $26		                sta tmp1+1
.8d4f		a0 00		ldy #$00	                ldy #0
.8d51						-
.8d51		b9 70 8d	lda $8d70,y	                lda beq_opt+1,y               ; skip the jsr
.8d54		91 25		sta ($25),y	                sta (tmp1),y
.8d56		c8		iny		                iny
.8d57		c0 03		cpy #$03	                cpy #(beq_opt_end-beq_opt-2)  ; three bytes, skip jsr and offset
.8d59		d0 f6		bne $8d51	                bne -
.8d5b		b5 00		lda $00,x	                lda 0,x             ; write the offset
.8d5d		91 25		sta ($25),y	                sta (tmp1),y
.8d5f		e8		inx		                inx                 ; clear the stack
.8d60		e8		inx		                inx
.8d61		e8		inx		                inx
.8d62		e8		inx		                inx
.8d63		e8		inx		                inx
.8d64		e8		inx		                inx
.8d65		60		rts		                rts                 ; all done
.8d66						_too_far:
.8d66		e8		inx		                inx                 ; discard the offset we calculated
.8d67		e8		inx		                inx
.8d68						_no_opt:
.8d68		20 0c a0	jsr $a00c	                jsr xt_swap
.8d6b		20 f1 9f	jsr $9ff1	                jsr xt_store
.8d6e						z_else:
.8d6e						z_endof:
.8d6e		60		rts		z_then:         rts
.8d6f						beq_opt:
.8d6f		20 2c 91	jsr $912c	                jsr zero_test_runtime       ; replaces jsr zero_branch_runtime
.8d72		f0 00		beq $8d74	                beq beq_opt_end             ; the beq overwrites the placeholder
.8d74						beq_opt_end:
.8d74						xt_emit:
.8d74		20 82 d7	jsr $d782	                jsr underflow_1
.8d77		b5 00		lda $00,x	                lda 0,x
.8d79		e8		inx		                inx
.8d7a		e8		inx		                inx
.8d7b						emit_a:
.8d7b		6c 12 00	jmp ($0012)	                jmp (output)            ; JSR/RTS
.8d7e						z_emit:
.8d7e						xt_empty_buffers:
.8d7e		a0 30		ldy #$30	                ldy #buffstatus_offset
.8d80		a9 00		lda #$00	                lda #0
.8d82		91 08		sta ($08),y	                sta (up),y      ; Only LSB is used.
.8d84						z_empty_buffers:
.8d84		60		rts		                rts
.8d85						xt_endcase:
.8d85		a0 8c		ldy #$8c	                ldy #>xt_drop
.8d87		a9 86		lda #$86	                lda #<xt_drop
.8d89		20 bf d5	jsr $d5bf	                jsr cmpl_subroutine
.8d8c						_endcase_loop:
.8d8c		b5 00		lda $00,x	                lda 0,x
.8d8e		15 01		ora $01,x	                ora 1,x
.8d90		f0 05		beq $8d97	                beq _done
.8d92		20 25 8d	jsr $8d25	                jsr xt_then
.8d95		80 f5		bra $8d8c	                bra _endcase_loop
.8d97						_done:
.8d97		e8		inx		                inx
.8d98		e8		inx		                inx
.8d99		60		rts		z_endcase:      rts
.8d9a						xt_environment_q:
.8d9a		20 82 d7	jsr $d782	                jsr underflow_1
.8d9d		a0 00		ldy #$00	                ldy #00                 ; counter for table
.8d9f		5a		phy		                phy
.8da0						_table_loop:
.8da0		20 ea a1	jsr $a1ea	                jsr xt_two_dup          ; ( addr u addr u ) 2DUP does not use Y
.8da3		ca		dex		                dex
.8da4		ca		dex		                dex                     ; ( addr u addr u ? )
.8da5		b9 17 8e	lda $8e17,y	                lda env_table_single,y
.8da8		95 00		sta $00,x	                sta 0,x
.8daa		c8		iny		                iny
.8dab		b9 17 8e	lda $8e17,y	                lda env_table_single,y
.8dae		95 01		sta $01,x	                sta 1,x                 ; ( addr u addr u addr-t )
.8db0		c8		iny		                iny
.8db1		15 00		ora $00,x	                ora 0,x
.8db3		f0 4d		beq $8e02	                beq _table_done
.8db5		5a		phy		                phy                     ; save Y, which is used by COUNT
.8db6		20 c1 88	jsr $88c1	                jsr xt_count            ; ( addr u addr u addr-s u-s )
.8db9		20 f8 86	jsr $86f8	                jsr xt_compare          ; ( addr u f )
.8dbc		7a		ply		                ply
.8dbd		b5 00		lda $00,x	                lda 0,x
.8dbf		15 01		ora $01,x	                ora 1,x
.8dc1		f0 04		beq $8dc7	                beq _got_result
.8dc3		e8		inx		                inx                     ; DROP, now ( addr u )
.8dc4		e8		inx		                inx
.8dc5		80 d9		bra $8da0	                bra _table_loop
.8dc7						_got_result:
.8dc7		e8		inx		                inx                     ; drop flag, now ( addr u )
.8dc8		e8		inx		                inx
.8dc9		88		dey		                dey                     ; go back to index we had
.8dca		88		dey		                dey
.8dcb		68		pla		                pla
.8dcc		d0 0d		bne $8ddb	                bne _double_result
.8dce		b9 35 8e	lda $8e35,y	                lda env_results_single,y
.8dd1		95 02		sta $02,x	                sta 2,x
.8dd3		c8		iny		                iny
.8dd4		b9 35 8e	lda $8e35,y	                lda env_results_single,y
.8dd7		95 03		sta $03,x	                sta 3,x                 ; ( res u )
.8dd9		80 1f		bra $8dfa	                bra _set_flag
.8ddb						_double_result:
.8ddb		ca		dex		                dex                     ; ( addr u ? )
.8ddc		ca		dex		                dex
.8ddd		98		tya		                tya
.8dde		38		sec		                sec
.8ddf		e9 18		sbc #$18	                sbc #24
.8de1		0a		asl a		                asl
.8de2		a8		tay		                tay
.8de3		b9 4b 8e	lda $8e4b,y	                lda env_results_double,y
.8de6		95 02		sta $02,x	                sta 2,x
.8de8		c8		iny		                iny
.8de9		b9 4b 8e	lda $8e4b,y	                lda env_results_double,y
.8dec		95 03		sta $03,x	                sta 3,x                 ; ( res u ? )
.8dee		c8		iny		                iny
.8def		b9 4b 8e	lda $8e4b,y	                lda env_results_double,y
.8df2		95 04		sta $04,x	                sta 4,x
.8df4		c8		iny		                iny
.8df5		b9 4b 8e	lda $8e4b,y	                lda env_results_double,y
.8df8		95 05		sta $05,x	                sta 5,x                 ; ( res res ? )
.8dfa						_set_flag:
.8dfa		a9 ff		lda #$ff	                lda #$FF
.8dfc		95 00		sta $00,x	                sta 0,x
.8dfe		95 01		sta $01,x	                sta 1,x                 ; ( res f )
.8e00		80 14		bra $8e16	                bra _done
.8e02						_table_done:
.8e02		68		pla		                pla
.8e03		d0 09		bne $8e0e	                bne _no_match
.8e05		1a		inc a		                ina
.8e06		48		pha		                pha
.8e07		8a		txa		                txa
.8e08		18		clc		                clc
.8e09		69 06		adc #$06	                adc #6                  ; skip six bytes
.8e0b		aa		tax		                tax                     ; ( addr u )
.8e0c		80 92		bra $8da0	                bra _table_loop
.8e0e						_no_match:
.8e0e		8a		txa		                txa
.8e0f		18		clc		                clc
.8e10		69 0a		adc #$0a	                adc #10
.8e12		aa		tax		                tax                     ; ( addr ) - not ( 0 ) !
.8e13		20 fe 8e	jsr $8efe	                jsr xt_false
.8e16						_done:
.8e16						z_environment_q:
.8e16		60		rts		                rts
.8e17						env_table_single:
>8e17		3f d5 4f d5 55 d5 5a d5		        .word envs_cs, envs_hold, envs_pad, envs_aub, envs_floored
>8e1f		6c d5
>8e21		74 d5 7d d5 83 d5 89 d5		        .word envs_max_char, envs_max_n, envs_max_u, envs_rsc
>8e29		9c d5 a8 d5 00 00		        .word envs_sc, envs_wl, 0000
.8e2f						env_table_double:
>8e2f		b2 d5 b8 d5 00 00		        .word envs_max_d, envs_max_ud, 0000
.8e35						env_results_single:
>8e35		ff 00				        .word $00FF     ; /COUNTED-STRING
>8e37		ff 00				        .word $00FF     ; /HOLD
>8e39		54 00				        .word $0054     ; /PAD (this is 84 decimal)
>8e3b		08 00				        .word $0008     ; ADDRESS-UNIT-BITS (keep "$" to avoid octal!)
>8e3d		00 00				        .word 0000      ; FLOORED ("FALSE", we have symmetric)
>8e3f		ff 00				        .word $00FF     ; MAX-CHAR
>8e41		ff 7f				        .word $7FFF     ; MAX-N
>8e43		ff ff				        .word $FFFF     ; MAX-U
>8e45		80 00				        .word $0080     ; RETURN-STACK-CELLS
>8e47		20 00				        .word $0020     ; STACK-CELLS (from definitions.asm)
>8e49		09 00				        .word $0009     ; WORDLISTS
.8e4b						env_results_double:
>8e4b		ff 7f ff ff			        .word $7FFF, $FFFF      ; MAX-D
>8e4f		ff ff ff ff			        .word $FFFF, $FFFF      ; MAX-UD
.8e53						xt_equal:
.8e53		20 87 d7	jsr $d787	                jsr underflow_2
.8e56		b5 00		lda $00,x	                lda 0,x                 ; LSB
.8e58		d5 02		cmp $02,x	                cmp 2,x
.8e5a		d0 0a		bne $8e66	                bne _false
.8e5c		b5 01		lda $01,x	                lda 1,x                 ; MSB
.8e5e		d5 03		cmp $03,x	                cmp 3,x
.8e60		d0 04		bne $8e66	                bne _false
.8e62		a9 ff		lda #$ff	                lda #$FF
.8e64		80 02		bra $8e68	                bra _done
.8e66		a9 00		lda #$00	_false:         lda #0                  ; drop thru to done
.8e68		95 02		sta $02,x	_done:          sta 2,x
.8e6a		95 03		sta $03,x	                sta 3,x
.8e6c		e8		inx		                inx
.8e6d		e8		inx		                inx
.8e6e		60		rts		z_equal:        rts
.8e6f						xt_blank:
.8e6f		ca		dex		                dex
.8e70		ca		dex		                dex
.8e71		a9 20		lda #$20	                lda #AscSP
.8e73		95 00		sta $00,x	                sta 0,x
.8e75		74 01		stz $01,x	                stz 1,x
.8e77		80 06		bra $8e7f	                bra xt_fill     ; skip over code for ERASE
.8e79						xt_erase:
.8e79		ca		dex		                dex
.8e7a		ca		dex		                dex
.8e7b		74 00		stz $00,x	                stz 0,x
.8e7d		74 01		stz $01,x	                stz 1,x
.8e7f						xt_fill:
.8e7f		20 8c d7	jsr $d78c	                jsr underflow_3
.8e82		b5 04		lda $04,x	                lda 4,x         ; LSB
.8e84		85 25		sta $25		                sta tmp1
.8e86		b5 05		lda $05,x	                lda 5,x
.8e88		85 26		sta $26		                sta tmp1+1
.8e8a		b5 02		lda $02,x	                lda 2,x
.8e8c		85 27		sta $27		                sta tmp2
.8e8e		b5 03		lda $03,x	                lda 3,x
.8e90		85 28		sta $28		                sta tmp2+1
.8e92		b5 00		lda $00,x	                lda 0,x
.8e94		a8		tay		                tay
.8e95						_loop:
.8e95		a9 7f		lda #$7f	                lda #>ram_end           ; MSB
.8e97		c5 26		cmp $26		                cmp tmp1+1
.8e99		90 21		bcc $8ebc	                bcc _done               ; RAM_END < TMP1, so leave
.8e9b		d0 06		bne $8ea3	                bne _check_counter      ; RAM_END is not smaller and not equal
.8e9d		a9 ff		lda #$ff	                lda #<ram_end           ; LSB, because MSBs were equal
.8e9f		c5 25		cmp $25		                cmp tmp1
.8ea1		90 19		bcc $8ebc	                bcc _done               ; RAM_END < TMP1, so leave
.8ea3						_check_counter:
.8ea3		a5 27		lda $27		                lda tmp2
.8ea5		05 28		ora $28		                ora tmp2+1
.8ea7		f0 13		beq $8ebc	                beq _done
.8ea9		98		tya		                tya
.8eaa		92 25		sta ($25)	                sta (tmp1)
.8eac		a5 27		lda $27		                lda tmp2
.8eae		d0 02		bne $8eb2	                bne +
.8eb0		c6 28		dec $28		                dec tmp2+1
.8eb2		c6 27		dec $27		+               dec tmp2
.8eb4		e6 25		inc $25		                inc tmp1
.8eb6		d0 dd		bne $8e95	                bne _loop
.8eb8		e6 26		inc $26		                inc tmp1+1
.8eba		80 d9		bra $8e95	                bra _loop
.8ebc						_done:
.8ebc		8a		txa		                txa
.8ebd		18		clc		                clc
.8ebe		69 06		adc #$06	                adc #6
.8ec0		aa		tax		                tax
.8ec1						z_blank:
.8ec1						z_erase:
.8ec1		60		rts		z_fill:         rts
.8ec2						xt_execute:
.8ec2		20 82 d7	jsr $d782	                jsr underflow_1
.8ec5		20 c9 8e	jsr $8ec9	                jsr doexecute   ; do not combine to JMP (native coding)
.8ec8		60		rts		z_execute:      rts
.8ec9						doexecute:
.8ec9		b5 00		lda $00,x	                lda 0,x
.8ecb		85 04		sta $04		                sta ip
.8ecd		b5 01		lda $01,x	                lda 1,x
.8ecf		85 05		sta $05		                sta ip+1
.8ed1		e8		inx		                inx
.8ed2		e8		inx		                inx
.8ed3		6c 04 00	jmp ($0004)	                jmp (ip)
.8ed6						xt_execute_parsing:
.8ed6		20 8c d7	jsr $d78c	                jsr underflow_3
.8ed9		20 78 91	jsr $9178	                jsr xt_input_to_r       ; save normal input for later
.8edc		20 9b 95	jsr $959b	                jsr xt_not_rote         ; -ROT ( xt addr u )
.8edf		b5 00		lda $00,x	                lda 0,x                 ; TOS is new ciblen
.8ee1		85 0e		sta $0e		                sta ciblen
.8ee3		b5 01		lda $01,x	                lda 1,x
.8ee5		85 0f		sta $0f		                sta ciblen+1
.8ee7		b5 02		lda $02,x	                lda 2,x                 ; NOS is new cib
.8ee9		85 0c		sta $0c		                sta cib
.8eeb		b5 03		lda $03,x	                lda 3,x
.8eed		85 0d		sta $0d		                sta cib+1
.8eef		64 10		stz $10		                stz toin                ; Set >IN to zero
.8ef1		64 11		stz $11		                stz toin+1
.8ef3		20 e2 a1	jsr $a1e2	                jsr xt_two_drop         ; 2DROP ( xt )
.8ef6		20 c2 8e	jsr $8ec2	                jsr xt_execute
.8ef9		20 cb 99	jsr $99cb	                jsr xt_r_to_input
.8efc						z_execute_parsing:
.8efc		60		rts		                rts
.8efd						xt_exit:
.8efd		60		rts		                rts             ; keep before z_exit
.8efe						z_exit:
.8efe						xt_false:
.8efe		ca		dex		                dex
.8eff		ca		dex		                dex
.8f00		74 00		stz $00,x	                stz 0,x
.8f02		74 01		stz $01,x	                stz 1,x
.8f04		60		rts		z_false:        rts
.8f05						xt_fetch:
.8f05		20 82 d7	jsr $d782	                jsr underflow_1
.8f08		a1 00		lda ($00,x)	                lda (0,x)               ; LSB
.8f0a		a8		tay		                tay
.8f0b		f6 00		inc $00,x	                inc 0,x
.8f0d		d0 02		bne $8f11	                bne +
.8f0f		f6 01		inc $01,x	                inc 1,x
.8f11						+
.8f11		a1 00		lda ($00,x)	                lda (0,x)               ; MSB
.8f13		95 01		sta $01,x	                sta 1,x
.8f15		94 00		sty $00,x	                sty 0,x
.8f17		60		rts		z_fetch:        rts
.8f18						xt_find:
.8f18		20 82 d7	jsr $d782	                jsr underflow_1
.8f1b		b5 01		lda $01,x	                lda 1,x                 ; MSB
.8f1d		48		pha		                pha
.8f1e		b5 00		lda $00,x	                lda 0,x                 ; LSB
.8f20		48		pha		                pha
.8f21		20 c1 88	jsr $88c1	                jsr xt_count            ; ( caddr -- addr u )
.8f24		20 60 8f	jsr $8f60	                jsr xt_find_name        ; ( addr u -- nt | 0 )
.8f27		b5 00		lda $00,x	                lda 0,x
.8f29		15 01		ora $01,x	                ora 1,x
.8f2b		d0 0b		bne $8f38	                bne _found_word
.8f2d		20 fe 8e	jsr $8efe	                jsr xt_false            ; ( 0 0 )
.8f30		68		pla		                pla                     ; LSB of address
.8f31		95 02		sta $02,x	                sta 2,x
.8f33		68		pla		                pla
.8f34		95 03		sta $03,x	                sta 3,x                 ; MSB of address
.8f36		80 27		bra $8f5f	                bra _done               ; ( addr 0 )
.8f38						_found_word:
.8f38		68		pla		                pla
.8f39		68		pla		                pla
.8f3a		20 07 8d	jsr $8d07	                jsr xt_dup              ; ( nt nt )
.8f3d		20 17 95	jsr $9517	                jsr xt_name_to_int      ; ( nt xt )
.8f40		20 0c a0	jsr $a00c	                jsr xt_swap             ; ( xt nt )
.8f43		a0 00		ldy #$00	                ldy #0                  ; Prepare flag
.8f45		f6 00		inc $00,x	                inc 0,x
.8f47		d0 02		bne $8f4b	                bne +
.8f49		f6 01		inc $01,x	                inc 1,x                 ; ( xt nt+1 )
.8f4b						+
.8f4b		a1 00		lda ($00,x)	                lda (0,x)               ; ( xt char )
.8f4d		29 04		and #$04	                and #IM
.8f4f		d0 08		bne $8f59	                bne _immediate          ; bit set, we're immediate
.8f51		a9 ff		lda #$ff	                lda #$FF                ; We're not immediate, return -1
.8f53		95 00		sta $00,x	                sta 0,x
.8f55		95 01		sta $01,x	                sta 1,x
.8f57		80 06		bra $8f5f	                bra _done
.8f59						_immediate:
.8f59		a9 01		lda #$01	                lda #1                  ; We're immediate, return 1
.8f5b		95 00		sta $00,x	                sta 0,x
.8f5d		74 01		stz $01,x	                stz 1,x
.8f5f						_done:
.8f5f		60		rts		z_find:         rts
.8f60						xt_find_name:
.8f60		20 87 d7	jsr $d787	                jsr underflow_2
.8f63		b5 00		lda $00,x	                lda 0,x
.8f65		15 01		ora $01,x	                ora 1,x
.8f67		d0 03		bne $8f6c	                bne _nonempty
.8f69		4c 9d 8f	jmp $8f9d	                jmp _fail_done
.8f6c						_nonempty:
.8f6c		64 29		stz $29		                stz tmp3                ; Start at the beginning
.8f6e						_wordlist_loop:
.8f6e		a0 22		ldy #$22	                ldy #num_order_offset   ; Compare to byte variable #ORDER
.8f70		a5 29		lda $29		                lda tmp3
.8f72		d1 08		cmp ($08),y	                cmp (up),y              ; Check to see if we are done
.8f74		f0 27		beq $8f9d	                beq _fail_done
.8f76		18		clc		                clc             ; SEARCH-ORDER is array of bytes.
.8f77		69 23		adc #$23	                adc #search_order_offset
.8f79		a8		tay		                tay
.8f7a		b1 08		lda ($08),y	                lda (up),y      ; Get the id byte, which is the offset
.8f7c		0a		asl a		                asl                     ; Turn offset into cells offset.
.8f7d		18		clc		                clc
.8f7e		69 0a		adc #$0a	                adc #wordlists_offset
.8f80		a8		tay		                tay
.8f81		b1 08		lda ($08),y	                lda (up),y
.8f83		85 25		sta $25		                sta tmp1
.8f85		c8		iny		                iny
.8f86		b1 08		lda ($08),y	                lda (up),y
.8f88		85 26		sta $26		                sta tmp1+1
.8f8a		20 52 d6	jsr $d652	                jsr find_header_name
.8f8d		d0 04		bne $8f93	                bne _success
.8f8f		e6 29		inc $29		                inc tmp3
.8f91		80 db		bra $8f6e	                bra _wordlist_loop
.8f93						_success:
.8f93		a5 25		lda $25		                lda tmp1
.8f95		95 02		sta $02,x	                sta 2,x
.8f97		a5 26		lda $26		                lda tmp1+1
.8f99		95 03		sta $03,x	                sta 3,x
.8f9b		80 04		bra $8fa1	                bra _done
.8f9d						_fail_done:
.8f9d		74 02		stz $02,x	                stz 2,x         ; failure flag
.8f9f		74 03		stz $03,x	                stz 3,x
.8fa1						_done:
.8fa1		e8		inx		                inx
.8fa2		e8		inx		                inx
.8fa3		60		rts		z_find_name:    rts
.8fa4						xt_flush:
.8fa4		20 35 9d	jsr $9d35	                jsr xt_save_buffers
.8fa7		a0 30		ldy #$30	                ldy #buffstatus_offset
.8fa9		a9 00		lda #$00	                lda #0
.8fab		91 08		sta ($08),y	                sta (up),y      ; Only LSB is used.
.8fad						z_flush:
.8fad		60		rts		                rts
.8fae						xt_fm_slash_mod:
.8fae		20 8c d7	jsr $d78c	                jsr underflow_3
.8fb1		64 27		stz $27		                stz tmp2        ; default: n is positive
.8fb3		b5 01		lda $01,x	                lda 1,x         ; MSB of n1
.8fb5		10 0e		bpl $8fc5	                bpl _check_d
.8fb7		e6 27		inc $27		                inc tmp2        ; set flag to negative for n1
.8fb9		20 50 95	jsr $9550	                jsr xt_negate   ; NEGATE
.8fbc		20 a2 a1	jsr $a1a2	                jsr xt_to_r     ; >R
.8fbf		20 b2 8a	jsr $8ab2	                jsr xt_dnegate  ; DNEGATE
.8fc2		20 ba 99	jsr $99ba	                jsr xt_r_from   ; R>
.8fc5						_check_d:
.8fc5		b5 03		lda $03,x	                lda 3,x         ; MSB of high word of d
.8fc7		10 0d		bpl $8fd6	                bpl _multiply
.8fc9		18		clc		                clc
.8fca		b5 00		lda $00,x	                lda 0,x         ; LSB of n1
.8fcc		75 02		adc $02,x	                adc 2,x         ; LSB of dh
.8fce		95 02		sta $02,x	                sta 2,x
.8fd0		b5 01		lda $01,x	                lda 1,x         ; MSB of n1
.8fd2		75 03		adc $03,x	                adc 3,x         ; MSB of dh
.8fd4		95 03		sta $03,x	                sta 3,x
.8fd6						_multiply:
.8fd6		20 ec a3	jsr $a3ec	                jsr xt_um_slash_mod     ; ( d n1 -- rem n2 )
.8fd9		a5 27		lda $27		                lda tmp2
.8fdb		f0 07		beq $8fe4	                beq _done
.8fdd		e8		inx		                inx             ; pretend that we SWAP
.8fde		e8		inx		                inx
.8fdf		20 50 95	jsr $9550	                jsr xt_negate
.8fe2		ca		dex		                dex
.8fe3		ca		dex		                dex
.8fe4						_done:
.8fe4		60		rts		z_fm_slash_mod: rts
.8fe5						xt_forth:
.8fe5		a0 23		ldy #$23	                ldy #search_order_offset
.8fe7		a9 00		lda #$00	                lda #0          ; The WID for Forth is 0.
.8fe9		91 08		sta ($08),y	                sta (up),y
.8feb						z_forth:
.8feb		60		rts		                rts
.8fec						load_evaluate:
.8fec		a9 ff		lda #$ff	                lda #$FF
.8fee		85 25		sta $25		                sta tmp1
.8ff0		80 11		bra $9003	                bra load_evaluate_start
.8ff2						xt_evaluate:
.8ff2		20 87 d7	jsr $d787	                jsr underflow_2
.8ff5		64 25		stz $25		                stz tmp1
.8ff7		b5 00		lda $00,x	                lda 0,x
.8ff9		15 01		ora $01,x	                ora 1,x
.8ffb		d0 06		bne $9003	                bne evaluate_got_work
.8ffd		e8		inx		                inx
.8ffe		e8		inx		                inx
.8fff		e8		inx		                inx
.9000		e8		inx		                inx
.9001		80 42		bra $9045	                bra evaluate_done
.9003						load_evaluate_start:
.9003						evaluate_got_work:
.9003		a0 05		ldy #$05	                ldy #blk_offset+1
.9005		b1 08		lda ($08),y	                lda (up),y
.9007		48		pha		                pha
.9008		88		dey		                dey
.9009		b1 08		lda ($08),y	                lda (up),y
.900b		48		pha		                pha
.900c		a5 25		lda $25		                lda tmp1
.900e		d0 05		bne $9015	                bne _nozero
.9010		91 08		sta ($08),y	                sta (up),y
.9012		c8		iny		                iny
.9013		91 08		sta ($08),y	                sta (up),y
.9015						_nozero:
.9015		20 78 91	jsr $9178	                jsr xt_input_to_r
.9018		a9 ff		lda #$ff	                lda #$FF
.901a		85 0a		sta $0a		                sta insrc
.901c		85 0b		sta $0b		                sta insrc+1
.901e		64 10		stz $10		                stz toin
.9020		64 11		stz $11		                stz toin+1
.9022		b5 00		lda $00,x	                lda 0,x
.9024		85 0e		sta $0e		                sta ciblen
.9026		b5 01		lda $01,x	                lda 1,x
.9028		85 0f		sta $0f		                sta ciblen+1
.902a		b5 02		lda $02,x	                lda 2,x
.902c		85 0c		sta $0c		                sta cib
.902e		b5 03		lda $03,x	                lda 3,x
.9030		85 0d		sta $0d		                sta cib+1
.9032		e8		inx		                inx             ; A clean stack is a clean mind
.9033		e8		inx		                inx
.9034		e8		inx		                inx
.9035		e8		inx		                inx
.9036		20 ef d6	jsr $d6ef	                jsr interpret   ; ( -- )
.9039		20 cb 99	jsr $99cb	                jsr xt_r_to_input
.903c		a0 04		ldy #$04	                ldy #blk_offset
.903e		68		pla		                pla
.903f		91 08		sta ($08),y	                sta (up),y
.9041		c8		iny		                iny
.9042		68		pla		                pla
.9043		91 08		sta ($08),y	                sta (up),y
.9045						evaluate_done:
.9045		60		rts		z_evaluate:     rts
.9046						xt_get_current:
.9046		ca		dex		                dex
.9047		ca		dex		                dex
.9048		a0 08		ldy #$08	                ldy #current_offset
.904a		b1 08		lda ($08),y	                lda (up),y
.904c		95 00		sta $00,x	                sta 0,x         ; CURRENT is a byte variable
.904e		74 01		stz $01,x	                stz 1,x         ; so the MSB is zero.
.9050		60		rts		z_get_current:  rts
.9051						xt_get_order:
.9051		a0 22		ldy #$22	                ldy #num_order_offset
.9053		b1 08		lda ($08),y	                lda (up),y
.9055		85 25		sta $25		                sta tmp1
.9057		f0 16		beq $906f	                beq _done       ; If zero, there are no wordlists.
.9059						_loop:
.9059		c6 25		dec $25		                dec tmp1        ; Count down by bytes.
.905b		a9 23		lda #$23	                lda #search_order_offset
.905d		18		clc		                clc
.905e		65 25		adc $25		                adc tmp1
.9060		a8		tay		                tay
.9061		ca		dex		                dex
.9062		ca		dex		                dex
.9063		b1 08		lda ($08),y	                lda (up),y
.9065		95 00		sta $00,x	                sta 0,x         ; Search order array is bytes, so
.9067		74 01		stz $01,x	                stz 1,x         ; put a zero in the high byte.
.9069		a9 00		lda #$00	                lda #0
.906b		c5 25		cmp $25		                cmp tmp1
.906d		d0 ea		bne $9059	                bne _loop
.906f						_done:
.906f		ca		dex		                dex
.9070		ca		dex		                dex
.9071		a0 22		ldy #$22	                ldy #num_order_offset
.9073		b1 08		lda ($08),y	                lda (up),y
.9075		95 00		sta $00,x	                sta 0,x
.9077		74 01		stz $01,x	                stz 1,x         ; We only support 8 wordlists.
.9079		60		rts		z_get_order:    rts
.907a						xt_greater_than:
.907a		20 87 d7	jsr $d787	                jsr underflow_2
.907d		a0 00		ldy #$00	                ldy #0          ; default false
.907f		20 ae d6	jsr $d6ae	                jsr compare_16bit
.9082		f0 03		beq $9087	                beq _false
.9084		10 01		bpl $9087	                bpl _false
.9086		88		dey		                dey
.9087						_false:
.9087		98		tya		                tya
.9088		e8		inx		                inx
.9089		e8		inx		                inx
.908a		95 00		sta $00,x	                sta 0,x
.908c		95 01		sta $01,x	                sta 1,x
.908e		60		rts		z_greater_than: rts
.908f						xt_here:
.908f						xt_asm_arrow:
.908f		ca		dex		                dex
.9090		ca		dex		                dex
.9091		a5 00		lda $00		                lda cp
.9093		95 00		sta $00,x	                sta 0,x
.9095		a5 01		lda $01		                lda cp+1
.9097		95 01		sta $01,x	                sta 1,x
.9099						z_asm_arrow:
.9099		60		rts		z_here:         rts
.909a						xt_hex:
.909a		a9 10		lda #$10	                lda #16
.909c		85 18		sta $18		                sta base
.909e		64 19		stz $19		                stz base+1              ; paranoid
.90a0		60		rts		z_hex:          rts
.90a1						xt_hexstore:
.90a1		20 8c d7	jsr $d78c	                jsr underflow_3
.90a4		20 07 8d	jsr $8d07	                jsr xt_dup              ; Save copy of original address
.90a7		20 d4 a2	jsr $a2d4	                jsr xt_two_to_r         ; ( addr1 u1 ) ( R: addr2 addr2 )
.90aa						_loop:
.90aa		b5 00		lda $00,x	                lda 0,x
.90ac		15 01		ora $01,x	                ora 1,x
.90ae		f0 36		beq $90e6	                beq _done
.90b0		20 bc 85	jsr $85bc	                jsr xt_cleave           ; ( addr1 u1 addr3 u3 ) ( R: addr2 addr2 )
.90b3		20 d4 a2	jsr $a2d4	                jsr xt_two_to_r
.90b6		20 eb a5	jsr $a5eb	                jsr xt_zero
.90b9		20 eb a5	jsr $a5eb	                jsr xt_zero
.90bc		20 5a a2	jsr $a25a	                jsr xt_two_r_from       ; ( addr1 u1 0 0 addr3 u3 ) ( R: addr2 addr2 )
.90bf		20 ef a0	jsr $a0ef	                jsr xt_to_number        ; ( addr1 u1 n n addr4 u4 ) ( R: addr2 addr2 )
.90c2		b5 00		lda $00,x	                lda 0,x
.90c4		15 01		ora $01,x	                ora 1,x
.90c6		d0 17		bne $90df	                bne _have_chars_left
.90c8		20 e2 a1	jsr $a1e2	                jsr xt_two_drop         ; ( addr1 u1 n n ) ( R: addr2 addr2 )
.90cb		20 f1 89	jsr $89f1	                jsr xt_d_to_s           ; ( addr1 u1 n ) ( R: addr2 addr2 )
.90ce		20 a5 99	jsr $99a5	                jsr xt_r_fetch          ; ( addr1 u1 n addr2 ) ( R: addr2 addr2 )
.90d1		20 85 85	jsr $8585	                jsr xt_c_store          ; ( addr1 u1 ) ( R: addr2 addr2 )
.90d4		20 ba 99	jsr $99ba	                jsr xt_r_from           ; R>
.90d7		20 47 97	jsr $9747	                jsr xt_one_plus         ; 1+
.90da		20 a2 a1	jsr $a1a2	                jsr xt_to_r             ; >R ( addr1 u1 ) ( R: addr2+1 addr2 )
.90dd		80 cb		bra $90aa	                bra _loop
.90df						_have_chars_left:
.90df		8a		txa		                txa
.90e0		18		clc		                clc
.90e1		69 08		adc #$08	                adc #8
.90e3		aa		tax		                tax
.90e4		80 c4		bra $90aa	                bra _loop
.90e6						_done:
.90e6		e8		inx		                inx
.90e7		e8		inx		                inx
.90e8		e8		inx		                inx
.90e9		e8		inx		                inx                     ; 2DROP
.90ea		20 5a a2	jsr $a25a	                jsr xt_two_r_from       ; ( addr2+n addr2 )
.90ed		20 0c a0	jsr $a00c	                jsr xt_swap
.90f0		20 86 94	jsr $9486	                jsr xt_minus            ; ( n )
.90f3		60		rts		z_hexstore:     rts
.90f4						xt_hold:
.90f4		20 82 d7	jsr $d782	                jsr underflow_1
.90f7		a5 2b		lda $2b		                lda tohold
.90f9		d0 02		bne $90fd	                bne +
.90fb		c6 2c		dec $2c		                dec tohold+1
.90fd						+
.90fd		c6 2b		dec $2b		                dec tohold
.90ff		b5 00		lda $00,x	                lda 0,x
.9101		92 2b		sta ($2b)	                sta (tohold)
.9103		e8		inx		                inx
.9104		e8		inx		                inx
.9105		60		rts		z_hold:         rts
.9106						xt_i:
.9106		ca		dex		                dex
.9107		ca		dex		                dex
.9108		a4 1f		ldy $1f		                ldy loopctrl
.910a		38		sec		                sec
.910b		a5 20		lda $20		                lda loopidx0        ; cached LSB of loopindex
.910d		f9 02 01	sbc $0102,y	                sbc loopfufa,y
.9110		95 00		sta $00,x	                sta 0,x
.9112		b9 01 01	lda $0101,y	                lda loopindex+1,y
.9115		f9 03 01	sbc $0103,y	                sbc loopfufa+1,y
.9118		95 01		sta $01,x	                sta 1,x
.911a		60		rts		z_i:            rts
.911b						xt_if:
.911b		a0 91		ldy #$91	                ldy #>zero_branch_runtime
.911d		a9 36		lda #$36	                lda #<zero_branch_runtime
.911f		20 bf d5	jsr $d5bf	                jsr cmpl_subroutine
.9122		20 8f 90	jsr $908f	                jsr xt_here
.9125		a9 ff		lda #$ff	                lda #$FF
.9127		a8		tay		                tay
.9128		20 cb d5	jsr $d5cb	                jsr cmpl_word
.912b		60		rts		z_if:           rts
.912c						zero_test_runtime:
.912c		e8		inx		                inx
.912d		e8		inx		                inx
.912e		b5 fe		lda $fe,x	                lda $FE,x           ; wraparound so inx doesn't wreck Z status
.9130		15 ff		ora $ff,x	                ora $FF,x
.9132		60		rts		                rts
.9133		d0 03		bne $9138	                bne zero_test_footer_end+2  ; branch fwd if non-zero
>9135		4c				                .byte OpJMP                 ; else JMP back
.9136						zero_test_footer_end:
.9136						zero_branch_runtime:
.9136		68		pla		                pla
.9137		85 25		sta $25		                sta tmp1
.9139		68		pla		                pla
.913a		85 26		sta $26		                sta tmp1+1
.913c		b5 00		lda $00,x	                lda 0,x
.913e		15 01		ora $01,x	                ora 1,x
.9140		f0 0d		beq $914f	                beq _zero
.9142		a5 25		lda $25		                lda tmp1        ; LSB
.9144		18		clc		                clc
.9145		69 03		adc #$03	                adc #3          ; add one to RTS address plus two address bytes
.9147		85 25		sta $25		                sta tmp1
.9149		90 11		bcc $915c	                bcc _jump
.914b		e6 26		inc $26		                inc tmp1+1      ; MSB
.914d		80 0d		bra $915c	                bra _jump
.914f						_zero:
.914f		a0 01		ldy #$01	                ldy #1
.9151		b1 25		lda ($25),y	                lda (tmp1),y
.9153		48		pha		                pha
.9154		c8		iny		                iny
.9155		b1 25		lda ($25),y	                lda (tmp1),y
.9157		85 26		sta $26		                sta tmp1+1
.9159		68		pla		                pla
.915a		85 25		sta $25		                sta tmp1
.915c						_jump:
.915c		e8		inx		                inx
.915d		e8		inx		                inx
.915e		6c 25 00	jmp ($0025)	                jmp (tmp1)
.9161						xt_immediate:
.9161		20 c9 d6	jsr $d6c9	                jsr current_to_dp
.9164		a0 01		ldy #$01	                ldy #1          ; offset for status byte
.9166		b1 02		lda ($02),y	                lda (dp),y
.9168		09 04		ora #$04	                ora #IM        ; make sure bit 7 is set
.916a		91 02		sta ($02),y	                sta (dp),y
.916c		60		rts		z_immediate:    rts
.916d						xt_input:
.916d		ca		dex		                dex
.916e		ca		dex		                dex
.916f		a9 14		lda #$14	                lda #<input
.9171		95 00		sta $00,x	                sta 0,x
.9173		a9 00		lda #$00	                lda #>input
.9175		95 01		sta $01,x	                sta 1,x
.9177		60		rts		z_input:        rts
.9178						xt_input_to_r:
.9178		68		pla		                pla
.9179		85 25		sta $25		                sta tmp1
.917b		68		pla		                pla
.917c		85 26		sta $26		                sta tmp1+1
.917e		a0 07		ldy #$07	                ldy #7
.9180						_loop:
.9180		b9 0a 00	lda $000a,y	                lda insrc,y     ; insrc+7 is toin+1
.9183		48		pha		                pha
.9184		88		dey		                dey
.9185		10 f9		bpl $9180	                bpl _loop
.9187		a5 26		lda $26		                lda tmp1+1
.9189		48		pha		                pha
.918a		a5 25		lda $25		                lda tmp1
.918c		48		pha		                pha
.918d		60		rts		z_input_to_r: 	rts
.918e						xt_int_to_name:
.918e		20 82 d7	jsr $d782	                jsr underflow_1
.9191		ca		dex		                dex
.9192		ca		dex		                dex
.9193		74 00		stz $00,x	                stz 0,x
.9195		74 01		stz $01,x	                stz 1,x
.9197						_wordlist_loop:
.9197		b5 00		lda $00,x	                lda 0,x                 ; Get the current wordlist.
.9199		0a		asl a		                asl                     ; Turn offset into cells offset.
.919a		18		clc		                clc
.919b		69 0a		adc #$0a	                adc #wordlists_offset
.919d		a8		tay		                tay
.919e		b1 08		lda ($08),y	                lda (up),y              ; Save the DP for this wordlist
.91a0		85 27		sta $27		                sta tmp2                ; into tmp2
.91a2		c8		iny		                iny
.91a3		b1 08		lda ($08),y	                lda (up),y
.91a5		85 28		sta $28		                sta tmp2+1
.91a7		a5 27		lda $27		                lda tmp2
.91a9		05 28		ora $28		                ora tmp2+1
.91ab		f0 36		beq $91e3	                beq _next_wordlist
.91ad		b5 02		lda $02,x	                lda 2,x         ; Target xt is now behind wordlist id.
.91af		85 29		sta $29		                sta tmp3        ; Save target xt in tmp3
.91b1		b5 03		lda $03,x	                lda 3,x
.91b3		85 2a		sta $2a		                sta tmp3+1
.91b5						_loop:
.91b5		a0 04		ldy #$04	                ldy #4          ; xt is four bytes down
.91b7		b1 27		lda ($27),y	                lda (tmp2),y    ; LSB of xt of current nt
.91b9		c5 29		cmp $29		                cmp tmp3
.91bb		d0 07		bne $91c4	                bne _no_match
.91bd		c8		iny		                iny
.91be		b1 27		lda ($27),y	                lda (tmp2),y    ; MSB of xt of current nt
.91c0		c5 2a		cmp $2a		                cmp tmp3+1
.91c2		f0 30		beq $91f4	                beq _match
.91c4						_no_match:
.91c4		18		clc		                clc
.91c5		a5 27		lda $27		                lda tmp2
.91c7		69 02		adc #$02	                adc #2
.91c9		85 27		sta $27		                sta tmp2
.91cb		90 02		bcc $91cf	                bcc +
.91cd		e6 28		inc $28		                inc tmp2+1
.91cf						+
.91cf		a0 00		ldy #$00	                ldy #0
.91d1		b1 27		lda ($27),y	                lda (tmp2),y
.91d3		48		pha		                pha
.91d4		c8		iny		                iny
.91d5		11 27		ora ($27),y	                ora (tmp2),y
.91d7		f0 09		beq $91e2	                beq _zero
.91d9		b1 27		lda ($27),y	                lda (tmp2),y
.91db		85 28		sta $28		                sta tmp2+1
.91dd		68		pla		                pla
.91de		85 27		sta $27		                sta tmp2
.91e0		80 d3		bra $91b5	                bra _loop
.91e2						_zero:
.91e2		68		pla		                pla             ; Leftover from above loop
.91e3						_next_wordlist:
.91e3		b5 00		lda $00,x	                lda 0,x
.91e5		1a		inc a		                ina
.91e6		95 00		sta $00,x	                sta 0,x
.91e8		c9 0c		cmp #$0c	                cmp #max_wordlists
.91ea		d0 ab		bne $9197	                bne _wordlist_loop
.91ec		e8		inx		                inx
.91ed		e8		inx		                inx
.91ee		74 00		stz $00,x	                stz 0,x
.91f0		74 01		stz $01,x	                stz 1,x
.91f2		80 0a		bra $91fe	                bra z_int_to_name
.91f4						_match:
.91f4		e8		inx		                inx
.91f5		e8		inx		                inx
.91f6		a5 27		lda $27		                lda tmp2
.91f8		95 00		sta $00,x	                sta 0,x
.91fa		a5 28		lda $28		                lda tmp2+1
.91fc		95 01		sta $01,x	                sta 1,x
.91fe		60		rts		z_int_to_name:  rts
.91ff						xt_invert:
.91ff		20 82 d7	jsr $d782	                jsr underflow_1
.9202		a9 ff		lda #$ff	                lda #$FF
.9204		55 00		eor $00,x	                eor 0,x         ; LSB
.9206		95 00		sta $00,x	                sta 0,x
.9208		a9 ff		lda #$ff	                lda #$FF
.920a		55 01		eor $01,x	                eor 1,x         ; MSB
.920c		95 01		sta $01,x	                sta 1,x
.920e		60		rts		z_invert:       rts
.920f						xt_is:
.920f		a5 1a		lda $1a		                lda state
.9211		05 1b		ora $1b		                ora state+1
.9213		f0 0c		beq $9221	                beq _interpreting
.9215						_compiling:
.9215		20 24 85	jsr $8524	                jsr xt_bracket_tick
.9218		a0 8a		ldy #$8a	                ldy #>xt_defer_store
.921a		a9 57		lda #$57	                lda #<xt_defer_store
.921c		20 bf d5	jsr $d5bf	                jsr cmpl_subroutine
.921f		80 06		bra $9227	                bra _done
.9221						_interpreting:
.9221		20 65 a0	jsr $a065	                jsr xt_tick
.9224		20 57 8a	jsr $8a57	                jsr xt_defer_store
.9227						_done:
.9227		60		rts		z_is:           rts
.9228						xt_j:
.9228		ca		dex		                dex                 ; make space on the stack
.9229		ca		dex		                dex
.922a		a5 1f		lda $1f		                lda loopctrl
.922c		38		sec		                sec
.922d		e9 04		sbc #$04	                sbc #4
.922f		a8		tay		                tay
.9230		38		sec		                sec
.9231		b9 00 01	lda $0100,y	                lda loopindex,y
.9234		f9 02 01	sbc $0102,y	                sbc loopfufa,y
.9237		95 00		sta $00,x	                sta 0,x
.9239		b9 01 01	lda $0101,y	                lda loopindex+1,y
.923c		f9 03 01	sbc $0103,y	                sbc loopfufa+1,y
.923f		95 01		sta $01,x	                sta 1,x
.9241		60		rts		z_j:            rts
.9242						xt_key:
.9242		20 4c 92	jsr $924c	                jsr key_a               ; returns char in A
.9245		ca		dex		                dex
.9246		ca		dex		                dex
.9247		95 00		sta $00,x	                sta 0,x
.9249		74 01		stz $01,x	                stz 1,x
.924b		60		rts		z_key:          rts
.924c						key_a:
.924c		6c 14 00	jmp ($0014)	                jmp (input)             ; JSR/RTS
.924f						xt_latestnt:
.924f		ca		dex		                dex
.9250		ca		dex		                dex
.9251		20 c9 d6	jsr $d6c9	                jsr current_to_dp
.9254		a5 02		lda $02		                lda dp
.9256		95 00		sta $00,x	                sta 0,x
.9258		a5 03		lda $03		                lda dp+1
.925a		95 01		sta $01,x	                sta 1,x
.925c		60		rts		z_latestnt:     rts
.925d						xt_latestxt:
.925d		20 4f 92	jsr $924f	                jsr xt_latestnt         ; ( nt )
.9260		20 17 95	jsr $9517	                jsr xt_name_to_int      ; ( xt )
.9263		60		rts		z_latestxt:     rts
.9264						xt_leave:
.9264		a5 21		lda $21		                lda loopleave
.9266		a4 22		ldy $22		                ldy loopleave+1
.9268		20 c4 d5	jsr $d5c4	                jsr cmpl_jump   ; emit the JMP chaining prior leave address
.926b		38		sec		                sec
.926c		a5 00		lda $00		                lda cp
.926e		e9 02		sbc #$02	                sbc #2
.9270		85 21		sta $21		                sta loopleave
.9272		a5 01		lda $01		                lda cp+1
.9274		b0 01		bcs $9277	                bcs +
.9276		3a		dec a		                dea
.9277		85 22		sta $22		+               sta loopleave+1
.9279						z_leave:
.9279		60		rts		                rts
.927a						xt_left_bracket:
.927a		64 1a		stz $1a		                stz state
.927c		64 1b		stz $1b		                stz state+1
.927e		60		rts		z_left_bracket: rts
.927f						xt_less_number_sign:
.927f		20 cb 97	jsr $97cb	                jsr xt_pad      ; ( addr )
.9282		b5 00		lda $00,x	                lda 0,x
.9284		85 2b		sta $2b		                sta tohold
.9286		b5 01		lda $01,x	                lda 1,x
.9288		85 2c		sta $2c		                sta tohold+1
.928a		e8		inx		                inx
.928b		e8		inx		                inx
.928c						z_less_number_sign:
.928c		60		rts		                rts
.928d						xt_less_than:
.928d		20 87 d7	jsr $d787	                jsr underflow_2
.9290		a0 00		ldy #$00	                ldy #0          ; default false
.9292		20 ae d6	jsr $d6ae	                jsr compare_16bit
.9295		f0 03		beq $929a	                beq _false
.9297		30 01		bmi $929a	                bmi _false
.9299		88		dey		                dey
.929a						_false:
.929a		98		tya		                tya
.929b		e8		inx		                inx
.929c		e8		inx		                inx
.929d		95 00		sta $00,x	                sta 0,x
.929f		95 01		sta $01,x	                sta 1,x
.92a1		60		rts		z_less_than:    rts
.92a2						xt_list:
.92a2		20 82 d7	jsr $d782	                jsr underflow_1
.92a5		20 50 9d	jsr $9d50	                jsr xt_scr
.92a8		20 f1 9f	jsr $9ff1	                jsr xt_store
.92ab		20 85 a6	jsr $a685	                jsr xt_editor_l
.92ae		60		rts		z_list:         rts
.92af						xt_literal:
.92af		20 82 d7	jsr $d782	                jsr underflow_1
.92b2		a0 92		ldy #$92	                ldy #>literal_runtime
.92b4		a9 bd		lda #$bd	                lda #<literal_runtime
.92b6		20 bf d5	jsr $d5bf	                jsr cmpl_subroutine
.92b9		20 de 86	jsr $86de	                jsr xt_comma
.92bc		60		rts		z_literal:      rts
.92bd						literal_runtime:
.92bd		ca		dex		                dex
.92be		ca		dex		                dex
.92bf		68		pla		                pla             ; LSB
.92c0		85 25		sta $25		                sta tmp1
.92c2		68		pla		                pla             ; MSB
.92c3		85 26		sta $26		                sta tmp1+1
.92c5		a0 01		ldy #$01	                ldy #1
.92c7		b1 25		lda ($25),y	                lda (tmp1),y    ; LSB
.92c9		95 00		sta $00,x	                sta 0,x
.92cb		c8		iny		                iny
.92cc		b1 25		lda ($25),y	                lda (tmp1),y    ; MSB
.92ce		95 01		sta $01,x	                sta 1,x
.92d0		98		tya		                tya
.92d1		18		clc		                clc
.92d2		65 25		adc $25		                adc tmp1
.92d4		a8		tay		                tay
.92d5		a5 26		lda $26		                lda tmp1+1
.92d7		69 00		adc #$00	                adc #0
.92d9		48		pha		                pha
.92da		5a		phy		                phy
.92db		60		rts		                rts
.92dc						xt_load:
.92dc		20 82 d7	jsr $d782	                jsr underflow_1
.92df		a0 05		ldy #$05	                ldy #blk_offset+1
.92e1		b1 08		lda ($08),y	                lda (up),y
.92e3		48		pha		                pha
.92e4		88		dey		                dey
.92e5		b1 08		lda ($08),y	                lda (up),y
.92e7		48		pha		                pha
.92e8		b5 00		lda $00,x	                lda 0,x
.92ea		91 08		sta ($08),y	                sta (up),y
.92ec		c8		iny		                iny
.92ed		b5 01		lda $01,x	                lda 1,x
.92ef		91 08		sta ($08),y	                sta (up),y
.92f1		20 5d 83	jsr $835d	                jsr xt_block
.92f4		ca		dex		                dex
.92f5		ca		dex		                dex
.92f6		a9 04		lda #$04	                lda #4
.92f8		95 01		sta $01,x	                sta 1,x
.92fa		74 00		stz $00,x	                stz 0,x
.92fc		20 ec 8f	jsr $8fec	                jsr load_evaluate
.92ff		a0 04		ldy #$04	                ldy #blk_offset
.9301		68		pla		                pla
.9302		91 08		sta ($08),y	                sta (up),y
.9304		c8		iny		                iny
.9305		68		pla		                pla
.9306		91 08		sta ($08),y	                sta (up),y
.9308		88		dey		                dey
.9309		11 08		ora ($08),y	                ora (up),y
.930b		f0 12		beq $931f	                beq _done
.930d		ca		dex		                dex
.930e		ca		dex		                dex
.930f		a0 04		ldy #$04	                ldy #blk_offset
.9311		b1 08		lda ($08),y	                lda (up),y
.9313		95 00		sta $00,x	                sta 0,x
.9315		c8		iny		                iny
.9316		b1 08		lda ($08),y	                lda (up),y
.9318		95 01		sta $01,x	                sta 1,x
.931a		20 5d 83	jsr $835d	                jsr xt_block
.931d		e8		inx		                inx
.931e		e8		inx		                inx
.931f						_done:
.931f		60		rts		z_load:         rts
.9320						xt_loop:
.9320		ca		dex		                dex
.9321		ca		dex		                dex
.9322		a9 83		lda #$83	                lda #<loop_runtime
.9324		95 00		sta $00,x	                sta 0,x
.9326		a9 93		lda #$93	                lda #>loop_runtime
.9328		95 01		sta $01,x	                sta 1,x
.932a		a0 12		ldy #$12	                ldy #loop_runtime_end-loop_runtime
.932c		20 4b 88	jsr $884b	                jsr cmpl_inline_y
.932f		80 0f		bra $9340	                bra xt_loop_common
.9331						xt_plus_loop:
.9331		ca		dex		                dex
.9332		ca		dex		                dex
.9333		a9 95		lda #$95	                lda #<plus_loop_runtime
.9335		95 00		sta $00,x	                sta 0,x
.9337		a9 93		lda #$93	                lda #>plus_loop_runtime
.9339		95 01		sta $01,x	                sta 1,x
.933b		a0 1b		ldy #$1b	                ldy #plus_loop_runtime_end-plus_loop_runtime
.933d		20 4b 88	jsr $884b	                jsr cmpl_inline_y
.9340						xt_loop_common:
.9340		20 de 86	jsr $86de	                jsr xt_comma
.9343		a5 22		lda $22		                lda loopleave+1         ; MSB=0 means we're done
.9345		f0 19		beq $9360	                beq _noleave
.9347						_next:
.9347		a0 01		ldy #$01	                ldy #1
.9349		b1 21		lda ($21),y	                lda (loopleave),y
.934b		48		pha		                pha
.934c		a5 01		lda $01		                lda cp+1
.934e		91 21		sta ($21),y	                sta (loopleave),y
.9350		88		dey		                dey
.9351		b1 21		lda ($21),y	                lda (loopleave),y
.9353		48		pha		                pha
.9354		a5 00		lda $00		                lda cp
.9356		91 21		sta ($21),y	                sta (loopleave),y
.9358		68		pla		                pla
.9359		85 21		sta $21		                sta loopleave
.935b		68		pla		                pla
.935c		85 22		sta $22		                sta loopleave+1
.935e		d0 e7		bne $9347	                bne _next
.9360						_noleave:
.9360		b5 00		lda $00,x	                lda 0,x
.9362		85 21		sta $21		                sta loopleave
.9364		b5 01		lda $01,x	                lda 1,x
.9366		85 22		sta $22		                sta loopleave+1
.9368		a9 74		lda #$74	                lda #<xt_unloop
.936a		95 00		sta $00,x	                sta 0,x
.936c		a9 a4		lda #$a4	                lda #>xt_unloop
.936e		95 01		sta $01,x	                sta 1,x
.9370		20 5d 87	jsr $875d	                jsr xt_compile_comma
.9373		b5 01		lda $01,x	                lda 1,x                 ; MSB=0 means DO so nothing to do
.9375		f0 09		beq $9380	                beq +
.9377		20 8f 90	jsr $908f	                jsr xt_here
.937a		20 0c a0	jsr $a00c	                jsr xt_swap
.937d		4c f1 9f	jmp $9ff1	                jmp xt_store            ; write here as ?DO jmp target and return
.9380		e8		inx		+               inx                     ; drop the ignored word for DO
.9381		e8		inx		                inx
.9382						z_loop:
.9382		60		rts		z_plus_loop:    rts
.9383						loop_runtime:
.9383		e6 20		inc $20		                inc loopidx0        ; increment the LSB of loopindex
.9385		d0 0d		bne $9394	                bne _repeat         ; avoid expensive test most of the time
.9387		a4 1f		ldy $1f		                ldy loopctrl
.9389		b9 01 01	lda $0101,y	_chkv:          lda loopindex+1,y
.938c		1a		inc a		                ina
.938d		c9 80		cmp #$80	                cmp #$80
.938f		f0 06		beq $9397	                beq _repeat+3       ; done?  skip jmp back
.9391		99 01 01	sta $0101,y	                sta loopindex+1,y
.9394						_repeat:
>9394		4c				                .byte OpJMP
.9395						loop_runtime_end:
.9395						plus_loop_runtime:
.9395		18		clc		                clc
.9396		b5 00		lda $00,x	                lda 0,x             ; LSB of step
.9398		65 20		adc $20		                adc loopidx0
.939a		85 20		sta $20		                sta loopidx0
.939c		e8		inx		                inx                 ; dump step from TOS before MSB test
.939d		e8		inx		                inx                 ; since we might skip it
.939e		b5 ff		lda $ff,x	                lda $FF,x           ; MSB of step since 1,x == -1,x+2
.93a0		d0 02		bne $93a4	                bne _chkv           ; if it's non-zero we have to check
.93a2		90 0b		bcc $93af	                bcc _repeat         ; but if 0 and no carry, we're good
.93a4		b8		clv		_chkv:          clv
.93a5		a4 1f		ldy $1f		                ldy loopctrl        ; get LCB offset
.93a7		79 01 01	adc $0101,y	                adc loopindex+1,y   ; MSB of index
.93aa		99 01 01	sta $0101,y	                sta loopindex+1,y   ; put MSB of index back on stack
.93ad		70 03		bvs $93b2	                bvs _repeat+3     ; skip over JMP instruction
.93af						_repeat:
>93af		4c				                .byte OpJMP
.93b0						plus_loop_runtime_end:
.93b0						xt_lshift:
.93b0		20 87 d7	jsr $d787	                jsr underflow_2
.93b3		b5 00		lda $00,x	                lda 0,x
.93b5		29 0f		and #$0f	                and #%00001111
.93b7		f0 08		beq $93c1	                beq _done
.93b9		a8		tay		                tay
.93ba						_loop:
.93ba		16 02		asl $02,x	                asl 2,x
.93bc		36 03		rol $03,x	                rol 3,x
.93be		88		dey		                dey
.93bf		d0 f9		bne $93ba	                bne _loop
.93c1						_done:
.93c1		e8		inx		                inx
.93c2		e8		inx		                inx
.93c3		60		rts		z_lshift:       rts
.93c4						xt_m_star:
.93c4		20 87 d7	jsr $d787	                jsr underflow_2
.93c7		b5 01		lda $01,x	                lda 1,x         ; MSB of n1
.93c9		55 03		eor $03,x	                eor 3,x         ; MSB of n2
.93cb		48		pha		                pha
.93cc		20 d1 80	jsr $80d1	                jsr xt_abs
.93cf		20 0c a0	jsr $a00c	                jsr xt_swap
.93d2		20 d1 80	jsr $80d1	                jsr xt_abs
.93d5		20 2e a4	jsr $a42e	                jsr xt_um_star          ; ( d )
.93d8		68		pla		                pla
.93d9		10 03		bpl $93de	                bpl _done
.93db		20 b2 8a	jsr $8ab2	                jsr xt_dnegate
.93de						_done:
.93de		60		rts		z_m_star:       rts
.93df						xt_marker:
.93df		20 c9 d6	jsr $d6c9	                jsr current_to_dp
.93e2		a5 02		lda $02		                lda dp
.93e4		48		pha		                pha
.93e5		a5 03		lda $03		                lda dp+1
.93e7		48		pha		                pha
.93e8		a5 00		lda $00		                lda cp
.93ea		48		pha		                pha
.93eb		a5 01		lda $01		                lda cp+1
.93ed		48		pha		                pha
.93ee		20 db 88	jsr $88db	                jsr xt_create
.93f1		a5 00		lda $00		                lda cp          ; LSB
.93f3		38		sec		                sec
.93f4		e9 02		sbc #$02	                sbc #2
.93f6		85 00		sta $00		                sta cp
.93f8		a5 01		lda $01		                lda cp+1        ; MSB
.93fa		e9 00		sbc #$00	                sbc #0          ; we only care about the borrow
.93fc		85 01		sta $01		                sta cp+1
.93fe		a0 94		ldy #$94	                ldy #>marker_runtime
.9400		a9 1d		lda #$1d	                lda #<marker_runtime
.9402		20 cb d5	jsr $d5cb	                jsr cmpl_word
.9405		7a		ply		                ply                     ; MSB
.9406		68		pla		                pla                     ; LSB
.9407		20 cb d5	jsr $d5cb	                jsr cmpl_word
.940a		7a		ply		                ply                     ; MSB
.940b		68		pla		                pla                     ; LSB
.940c		20 cb d5	jsr $d5cb	                jsr cmpl_word
.940f		a0 04		ldy #$04	                ldy #4                  ; Start at CURRENT
.9411						_marker_loop:
.9411		b1 08		lda ($08),y	                lda (up),y
.9413		20 cf d5	jsr $d5cf	                jsr cmpl_a
.9416		c8		iny		                iny
.9417		98		tya		                tya
.9418		c9 28		cmp #$28	                cmp #40                 ; One past the end of the search order.
.941a		d0 f5		bne $9411	                bne _marker_loop
.941c		60		rts		z_marker:       rts
.941d						marker_runtime:
.941d		68		pla		                pla
.941e		85 25		sta $25		                sta tmp1        ; LSB of address
.9420		68		pla		                pla
.9421		85 26		sta $26		                sta tmp1+1      ; MSB of address
.9423		e6 25		inc $25		                inc tmp1
.9425		d0 02		bne $9429	                bne +
.9427		e6 26		inc $26		                inc tmp1+1
.9429						+
.9429		a0 00		ldy #$00	                ldy #0
.942b		b1 25		lda ($25),y	                lda (tmp1),y
.942d		85 00		sta $00		                sta cp
.942f		c8		iny		                iny
.9430		b1 25		lda ($25),y	                lda (tmp1),y
.9432		85 01		sta $01		                sta cp+1
.9434		c8		iny		                iny
.9435		b1 25		lda ($25),y	                lda (tmp1),y
.9437		85 02		sta $02		                sta dp
.9439		c8		iny		                iny
.943a		b1 25		lda ($25),y	                lda (tmp1),y
.943c		85 03		sta $03		                sta dp+1
.943e		a0 04		ldy #$04	                ldy #4
.9440						_marker_restore_loop:
.9440		b1 25		lda ($25),y	                lda (tmp1), y
.9442		91 08		sta ($08),y	                sta (up), y
.9444		c8		iny		                iny
.9445		98		tya		                tya
.9446		c9 28		cmp #$28	                cmp #40                 ; One past the end of the search order.
.9448		d0 f6		bne $9440	                bne _marker_restore_loop
.944a		20 dc d6	jsr $d6dc	                jsr dp_to_current       ; Move the CURRENT DP back.
.944d		60		rts		                rts
.944e						xt_max:
.944e		20 87 d7	jsr $d787	                jsr underflow_2
.9451		b5 00		lda $00,x	                lda 0,x         ; LSB of TOS
.9453		d5 02		cmp $02,x	                cmp 2,x         ; LSB of NOS, this sets the carry
.9455		b5 01		lda $01,x	                lda 1,x         ; MSB of TOS
.9457		f5 03		sbc $03,x	                sbc 3,x         ; MSB of NOS
.9459		50 02		bvc $945d	                bvc _no_overflow
.945b		49 80		eor #$80	                eor #$80        ; complement negative flag
.945d						_no_overflow:
.945d		30 08		bmi $9467	                bmi _keep_nos
.945f		b5 00		lda $00,x	                lda 0,x
.9461		95 02		sta $02,x	                sta 2,x
.9463		b5 01		lda $01,x	                lda 1,x
.9465		95 03		sta $03,x	                sta 3,x
.9467						_keep_nos:
.9467		e8		inx		                inx
.9468		e8		inx		                inx
.9469		60		rts		z_max:          rts
.946a						xt_min:
.946a		20 87 d7	jsr $d787	                jsr underflow_2
.946d		b5 00		lda $00,x	                lda 0,x         ; LSB of TOS
.946f		d5 02		cmp $02,x	                cmp 2,x         ; LSB of NOS, this sets carry
.9471		b5 01		lda $01,x	                lda 1,x         ; MSB of TOS
.9473		f5 03		sbc $03,x	                sbc 3,x         ; MSB of NOS
.9475		50 02		bvc $9479	                bvc _no_overflow
.9477		49 80		eor #$80	                eor #$80
.9479						_no_overflow:
.9479		10 08		bpl $9483	                bpl _keep_nos
.947b		b5 00		lda $00,x	                lda 0,x
.947d		95 02		sta $02,x	                sta 2,x
.947f		b5 01		lda $01,x	                lda 1,x
.9481		95 03		sta $03,x	                sta 3,x
.9483						_keep_nos:
.9483		e8		inx		                inx
.9484		e8		inx		                inx
.9485		60		rts		z_min:          rts
.9486						xt_minus:
.9486		20 87 d7	jsr $d787	                jsr underflow_2
.9489		38		sec		                sec
.948a		b5 02		lda $02,x	                lda 2,x         ; LSB
.948c		f5 00		sbc $00,x	                sbc 0,x
.948e		95 02		sta $02,x	                sta 2,x
.9490		b5 03		lda $03,x	                lda 3,x         ; MSB
.9492		f5 01		sbc $01,x	                sbc 1,x
.9494		95 03		sta $03,x	                sta 3,x
.9496		e8		inx		                inx
.9497		e8		inx		                inx
.9498		60		rts		z_minus:        rts
.9499						xt_minus_leading:
.9499		20 87 d7	jsr $d787	                jsr underflow_2
.949c						_loop:
.949c		b5 00		lda $00,x	                lda 0,x
.949e		15 01		ora $01,x	                ora 1,x
.94a0		f0 0f		beq $94b1	                beq _done
.94a2		a1 02		lda ($02,x)	                lda (2,x)               ; get first character
.94a4		20 75 d7	jsr $d775	                jsr is_whitespace
.94a7		90 08		bcc $94b1	                bcc _done
.94a9		20 32 97	jsr $9732	                jsr xt_one              ; ( addr u 1 )
.94ac		20 85 9e	jsr $9e85	                jsr xt_slash_string     ; ( addr+ u-1 )
.94af		80 eb		bra $949c	                bra _loop
.94b1						_done:
.94b1						z_minus_leading:
.94b1		60		rts		                rts
.94b2						xt_minus_trailing:
.94b2		20 87 d7	jsr $d787	                jsr underflow_2
.94b5		b5 00		lda $00,x	                lda 0,x         ; LSB of n
.94b7		15 01		ora $01,x	                ora 1,x         ; MSB of n
.94b9		f0 33		beq $94ee	                beq _done
.94bb		18		clc		                clc
.94bc		b5 02		lda $02,x	                lda 2,x         ; LSB of addr
.94be		75 00		adc $00,x	                adc 0,x
.94c0		85 25		sta $25		                sta tmp1
.94c2		b5 03		lda $03,x	                lda 3,x         ; MSB of addr
.94c4		75 01		adc $01,x	                adc 1,x
.94c6		85 26		sta $26		                sta tmp1+1
.94c8		a5 25		lda $25		                lda tmp1
.94ca		d0 02		bne $94ce	                bne +
.94cc		c6 26		dec $26		                dec tmp1+1
.94ce						+
.94ce		c6 25		dec $25		                dec tmp1
.94d0						_loop:
.94d0		b2 25		lda ($25)	                lda (tmp1)
.94d2		c9 20		cmp #$20	                cmp #AscSP
.94d4		d0 18		bne $94ee	                bne _done
.94d6		a5 25		lda $25		                lda tmp1
.94d8		d0 02		bne $94dc	                bne +
.94da		c6 26		dec $26		                dec tmp1+1
.94dc						+
.94dc		c6 25		dec $25		                dec tmp1
.94de		b5 00		lda $00,x	                lda 0,x
.94e0		d0 02		bne $94e4	                bne +
.94e2		d6 01		dec $01,x	                dec 1,x
.94e4						+
.94e4		d6 00		dec $00,x	                dec 0,x
.94e6		b5 00		lda $00,x	                lda 0,x
.94e8		15 01		ora $01,x	                ora 1,x
.94ea		f0 02		beq $94ee	                beq _done       ; Count has reached zero - we're done!
.94ec		80 e2		bra $94d0	                bra _loop
.94ee						_done:
.94ee						z_minus_trailing:
.94ee		60		rts		                rts
.94ef						xt_mod:
.94ef		20 87 d7	jsr $d787	                jsr underflow_2
.94f2		20 6d 9e	jsr $9e6d	                jsr xt_slash_mod
.94f5		e8		inx		                inx             ; DROP
.94f6		e8		inx		                inx
.94f7						z_mod:
.94f7		60		rts		                rts
.94f8						xt_move:
.94f8		b5 03		lda $03,x	                lda 3,x                 ; MSB of addr2
.94fa		d5 05		cmp $05,x	                cmp 5,x                 ; MSB of addr1
.94fc		f0 05		beq $9503	                beq _lsb                ; wasn't helpful, move to LSB
.94fe		b0 0e		bcs $950e	                bcs _to_move_up         ; we want CMOVE>
.9500		4c 09 86	jmp $8609	                jmp xt_cmove            ; JSR/RTS
.9503						_lsb:
.9503		b5 02		lda $02,x	                lda 2,x                 ; LSB of addr2
.9505		d5 04		cmp $04,x	                cmp 4,x                 ; LSB of addr1
.9507		f0 08		beq $9511	                beq _equal              ; LSB is equal as well
.9509		b0 03		bcs $950e	                bcs _to_move_up         ; we want CMOVE>
.950b		4c 09 86	jmp $8609	                jmp xt_cmove            ; JSR/RTS
.950e						_to_move_up:
.950e		4c 44 86	jmp $8644	                jmp xt_cmove_up         ; JSR/RTS
.9511						_equal:
.9511		8a		txa		                txa
.9512		18		clc		                clc
.9513		69 06		adc #$06	                adc #6
.9515		aa		tax		                tax
.9516		60		rts		z_move:         rts
.9517						xt_name_to_int:
.9517		20 82 d7	jsr $d782	                jsr underflow_1
.951a		b5 00		lda $00,x	                lda 0,x
.951c		18		clc		                clc
.951d		69 04		adc #$04	                adc #4
.951f		85 29		sta $29		                sta tmp3
.9521		b5 01		lda $01,x	                lda 1,x
.9523		90 01		bcc $9526	                bcc _done
.9525		1a		inc a		                ina
.9526						_done:
.9526		85 2a		sta $2a		                sta tmp3+1
.9528		a0 00		ldy #$00	                ldy #0
.952a		b1 29		lda ($29),y	                lda (tmp3),y
.952c		95 00		sta $00,x	                sta 0,x
.952e		c8		iny		                iny
.952f		b1 29		lda ($29),y	                lda (tmp3),y
.9531		95 01		sta $01,x	                sta 1,x
.9533		60		rts		z_name_to_int:  rts
.9534						xt_name_to_string:
.9534		20 82 d7	jsr $d782	                jsr underflow_1
.9537		ca		dex		                dex
.9538		ca		dex		                dex
.9539		a1 02		lda ($02,x)	                lda (2,x)
.953b		95 00		sta $00,x	                sta 0,x
.953d		74 01		stz $01,x	                stz 1,x
.953f		b5 02		lda $02,x	                lda 2,x         ; LSB
.9541		18		clc		                clc
.9542		69 08		adc #$08	                adc #8
.9544		95 02		sta $02,x	                sta 2,x
.9546		90 02		bcc $954a	                bcc z_name_to_string
.9548		f6 03		inc $03,x	                inc 3,x         ; MSB
.954a						z_name_to_string:
.954a		60		rts		                rts
.954b						xt_nc_limit:
.954b		a9 00		lda #$00	                lda #nc_limit_offset
.954d		4c 2c d6	jmp $d62c	                jmp push_upvar_tos
.9550						z_nc_limit:
.9550						xt_negate:
.9550		20 82 d7	jsr $d782	                jsr underflow_1
.9553		a9 00		lda #$00	        	lda #0
.9555		38		sec		                sec
.9556		f5 00		sbc $00,x	                sbc 0,x         ; LSB
.9558		95 00		sta $00,x	                sta 0,x
.955a		a9 00		lda #$00	                lda #0
.955c		f5 01		sbc $01,x	                sbc 1,x         ; MSB
.955e		95 01		sta $01,x	                sta 1,x
.9560		60		rts		z_negate:       rts
.9561						xt_never_native:
.9561		20 c9 d6	jsr $d6c9	                jsr current_to_dp
.9564		a0 01		ldy #$01	                ldy #1          ; offset for status byte
.9566		b1 02		lda ($02),y	                lda (dp),y
.9568		09 08		ora #$08	                ora #NN         ; Make sure NN flag is set
.956a		29 fd		and #$fd	                and #$FF-AN     ; and AN flag is clear.
.956c		91 02		sta ($02),y	                sta (dp),y
.956e						z_never_native:
.956e		60		rts		                rts
.956f						xt_nip:
.956f		20 87 d7	jsr $d787	                jsr underflow_2
.9572		b5 00		lda $00,x	                lda 0,x         ; LSB
.9574		95 02		sta $02,x	                sta 2,x
.9576		b5 01		lda $01,x	                lda 1,x         ; MSB
.9578		95 03		sta $03,x	                sta 3,x
.957a		e8		inx		                inx
.957b		e8		inx		                inx
.957c		60		rts		z_nip:          rts
.957d						xt_not_equals:
.957d		20 87 d7	jsr $d787	                jsr underflow_2
.9580		a0 00		ldy #$00	                ldy #0                  ; default is true
.9582		b5 00		lda $00,x	                lda 0,x                 ; LSB
.9584		d5 02		cmp $02,x	                cmp 2,x
.9586		d0 0a		bne $9592	                bne _not_equal
.9588		b5 01		lda $01,x	                lda 1,x                 ; MSB
.958a		d5 03		cmp $03,x	                cmp 3,x
.958c		d0 04		bne $9592	                bne _not_equal
.958e		a9 ff		lda #$ff	                lda #$FF
.9590		80 01		bra $9593	                bra _done
.9592						_not_equal:
.9592		88		dey		                dey                     ; drop thru to done
.9593						_done:
.9593		98		tya		                tya
.9594		e8		inx		                inx
.9595		e8		inx		                inx
.9596		95 00		sta $00,x	                sta 0,x
.9598		95 01		sta $01,x	                sta 1,x
.959a		60		rts		z_not_equals:   rts
.959b						xt_not_rote:
.959b		20 8c d7	jsr $d78c	                jsr underflow_3
.959e		b4 01		ldy $01,x	                ldy 1,x         ; MSB first
.95a0		b5 03		lda $03,x	                lda 3,x
.95a2		95 01		sta $01,x	                sta 1,x
.95a4		b5 05		lda $05,x	                lda 5,x
.95a6		95 03		sta $03,x	                sta 3,x
.95a8		94 05		sty $05,x	                sty 5,x
.95aa		b4 00		ldy $00,x	                ldy 0,x         ; LSB second
.95ac		b5 02		lda $02,x	                lda 2,x
.95ae		95 00		sta $00,x	                sta 0,x
.95b0		b5 04		lda $04,x	                lda 4,x
.95b2		95 02		sta $02,x	                sta 2,x
.95b4		94 04		sty $04,x	                sty 4,x
.95b6		60		rts		z_not_rote:     rts
.95b7						xt_number:
.95b7		20 87 d7	jsr $d787	                jsr underflow_2
.95ba		64 1e		stz $1e		                stz tmpdsp      ; %n000 000d
.95bc		a5 18		lda $18		                lda base
.95be		48		pha		                pha
.95bf		20 ea a1	jsr $a1ea	                jsr xt_two_dup
.95c2		a1 02		lda ($02,x)	                lda (2,x)
.95c4						_check_dec:
.95c4		c9 23		cmp #$23	                cmp #'#'
.95c6		d0 04		bne $95cc	                bne _check_hex
.95c8		a9 0a		lda #$0a	                lda #10
.95ca		80 42		bra $960e	                bra _base_changed
.95cc						_check_hex:
.95cc		c9 24		cmp #$24	                cmp #'$'
.95ce		d0 04		bne $95d4	                bne _check_binary
.95d0		a9 10		lda #$10	                lda #16
.95d2		80 3a		bra $960e	                bra _base_changed
.95d4						_check_binary:
.95d4		c9 25		cmp #$25	                cmp #'%'
.95d6		d0 04		bne $95dc	                bne _check_char
.95d8		a9 02		lda #$02	                lda #2
.95da		80 32		bra $960e	                bra _base_changed
.95dc						_check_char:
.95dc		c9 27		cmp #$27	                cmp #"'"
.95de		d0 3a		bne $961a	                bne _check_minus
.95e0		b5 00		lda $00,x	                lda 0,x         ; Get the length
.95e2		c9 03		cmp #$03	                cmp #3
.95e4		d0 26		bne $960c	                bne _not_a_char
.95e6		b5 01		lda $01,x	                lda 1,x
.95e8		d0 22		bne $960c	                bne _not_a_char ; No compare needed to check for non-zero.
.95ea		b5 02		lda $02,x	                lda 2,x         ; LSB of address
.95ec		18		clc		                clc
.95ed		69 02		adc #$02	                adc #2          ; length of string
.95ef		85 23		sta $23		                sta tmptos
.95f1		b5 03		lda $03,x	                lda 3,x
.95f3		69 00		adc #$00	                adc #0          ; only need carry
.95f5		85 24		sta $24		                sta tmptos+1
.95f7		b2 23		lda ($23)	                lda (tmptos)
.95f9		c9 27		cmp #$27	                cmp #"'"
.95fb		d0 0f		bne $960c	                bne _not_a_char
.95fd		f6 02		inc $02,x	                inc 2,x
.95ff		d0 02		bne $9603	                bne +
.9601		f6 03		inc $03,x	                inc 3,x
.9603						+
.9603		a1 02		lda ($02,x)	                lda (2,x)
.9605		95 02		sta $02,x	                sta 2,x
.9607		74 03		stz $03,x	                stz 3,x
.9609		4c 8c 96	jmp $968c	                jmp _drop_original_string ; Single flag will drop the TOS for us.
.960c						_not_a_char:
.960c		80 5c		bra $966a	                bra _number_error
.960e						_base_changed:
.960e		85 18		sta $18		                sta base        ; Switch to the new base
.9610		f6 02		inc $02,x	                inc 2,x         ; start one character later
.9612		d0 02		bne $9616	                bne +
.9614		f6 03		inc $03,x	                inc 3,x
.9616						+
.9616		d6 00		dec $00,x	                dec 0,x         ; decrease string length by one
.9618		a1 02		lda ($02,x)	                lda (2,x)       ; Load the first char again
.961a						_check_minus:
.961a		c9 2d		cmp #$2d	                cmp #'-'
.961c		d0 0c		bne $962a	                bne _check_dot
.961e		a9 80		lda #$80	                lda #$80
.9620		85 1e		sta $1e		                sta tmpdsp      ; set the sign bit
.9622		f6 02		inc $02,x	                inc 2,x         ; start one character later
.9624		d0 02		bne $9628	                bne +
.9626		f6 03		inc $03,x	                inc 3,x
.9628						+
.9628		d6 00		dec $00,x	                dec 0,x         ; decrease string length by one
.962a						_check_dot:
.962a		b5 02		lda $02,x	                lda 2,x         ; LSB of address
.962c		18		clc		                clc
.962d		75 00		adc $00,x	                adc 0,x         ; length of string
.962f		85 23		sta $23		                sta tmptos
.9631		b5 03		lda $03,x	                lda 3,x
.9633		69 00		adc #$00	                adc #0          ; only need carry
.9635		85 24		sta $24		                sta tmptos+1
.9637		a5 23		lda $23		                lda tmptos
.9639		d0 02		bne $963d	                bne +
.963b		c6 24		dec $24		                dec tmptos+1
.963d						+
.963d		c6 23		dec $23		                dec tmptos
.963f		b2 23		lda ($23)	                lda (tmptos)
.9641		c9 2e		cmp #$2e	                cmp #'.'
.9643		d0 04		bne $9649	                bne _main
.9645		e6 1e		inc $1e		                inc tmpdsp
.9647		d6 00		dec $00,x	                dec 0,x
.9649						_main:
.9649		ca		dex		                dex
.964a		ca		dex		                dex
.964b		ca		dex		                dex
.964c		ca		dex		                dex
.964d		b5 04		lda $04,x	                lda 4,x         ; LSB of length
.964f		95 00		sta $00,x	                sta 0,x
.9651		74 01		stz $01,x	                stz 1,x         ; MSB, max length 255 chars
.9653		b5 06		lda $06,x	                lda 6,x         ; LSB of address
.9655		95 02		sta $02,x	                sta 2,x
.9657		b5 07		lda $07,x	                lda 7,x         ; MSB of address
.9659		95 03		sta $03,x	                sta 3,x
.965b		74 04		stz $04,x	                stz 4,x         ; clear space for ud
.965d		74 05		stz $05,x	                stz 5,x
.965f		74 06		stz $06,x	                stz 6,x
.9661		74 07		stz $07,x	                stz 7,x
.9663		20 ef a0	jsr $a0ef	                jsr xt_to_number        ; (ud addr u -- ud addr u )
.9666		b5 00		lda $00,x	                lda 0,x
.9668		f0 1e		beq $9688	                beq _all_converted
.966a						_number_error:
.966a		20 e2 a1	jsr $a1e2	                jsr xt_two_drop ; >NUMBER modified addr u
.966d		20 e2 a1	jsr $a1e2	                jsr xt_two_drop ; ud   (partially converted number)
.9670		a9 3e		lda #$3e	                lda #'>'
.9672		20 7b 8d	jsr $8d7b	                jsr emit_a
.9675		20 35 a3	jsr $a335	                jsr xt_type
.9678		a9 3c		lda #$3c	                lda #'<'
.967a		20 7b 8d	jsr $8d7b	                jsr emit_a
.967d		20 82 9f	jsr $9f82	                jsr xt_space
.9680		68		pla		                pla
.9681		85 18		sta $18		                sta base
.9683		a9 08		lda #$08	                lda #err_syntax
.9685		4c 98 d7	jmp $d798	                jmp error
.9688						_all_converted:
.9688		e8		inx		                inx ; Drop the current addr u
.9689		e8		inx		                inx
.968a		e8		inx		                inx
.968b		e8		inx		                inx
.968c						_drop_original_string:
.968c		20 b0 a2	jsr $a2b0	                jsr xt_two_swap  ; Drop the original addr u
.968f		20 e2 a1	jsr $a1e2	                jsr xt_two_drop  ; (was saved for unknown word error message)
.9692		a5 1e		lda $1e		                lda tmpdsp      ; flag for double/minus
.9694		a0 20		ldy #$20	                ldy #%00100000  ; status bit 5 for double(1) or single(0)
.9696		0a		asl a		                asl             ; %n000 000d => %0000 00d0, C=n, Z=d
.9697		f0 0a		beq $96a3	                beq _single
.9699		98		tya		                tya
.969a		04 1c		tsb $1c		                tsb status
.969c		90 0f		bcc $96ad	                bcc _done       ; no minus, all done
.969e		20 b2 8a	jsr $8ab2	                jsr xt_dnegate
.96a1		80 0a		bra $96ad	                bra _done
.96a3						_single:
.96a3		e8		inx		                inx
.96a4		e8		inx		                inx
.96a5		98		tya		                tya
.96a6		14 1c		trb $1c		                trb status
.96a8		90 03		bcc $96ad	                bcc _done       ; no minus, all done
.96aa		20 50 95	jsr $9550	                jsr xt_negate
.96ad						_done:
.96ad		68		pla		                pla
.96ae		85 18		sta $18		                sta base
.96b0		60		rts		z_number:       rts
.96b1						xt_number_sign:
.96b1		20 87 d7	jsr $d787	                jsr underflow_2         ; double number
.96b4		20 2e 83	jsr $832e	                jsr xt_base
.96b7		20 05 8f	jsr $8f05	                jsr xt_fetch            ; ( ud1 base )
.96ba		20 a2 a1	jsr $a1a2	                jsr xt_to_r             ; >r
.96bd		20 eb a5	jsr $a5eb	                jsr xt_zero             ; 0
.96c0		20 a5 99	jsr $99a5	                jsr xt_r_fetch          ; r@
.96c3		20 ec a3	jsr $a3ec	                jsr xt_um_slash_mod     ; um/mod
.96c6		20 78 9a	jsr $9a78	                jsr xt_rot              ; rot
.96c9		20 78 9a	jsr $9a78	                jsr xt_rot              ; rot
.96cc		20 ba 99	jsr $99ba	                jsr xt_r_from           ; r>
.96cf		20 ec a3	jsr $a3ec	                jsr xt_um_slash_mod     ; um/mod
.96d2		20 78 9a	jsr $9a78	                jsr xt_rot              ; rot
.96d5		20 78 9a	jsr $9a78	                jsr xt_rot              ; ( ud rem )
.96d8		b5 00		lda $00,x	                lda 0,x
.96da		a8		tay		                tay
.96db		b9 e3 d2	lda $d2e3,y	                lda s_abc_upper,y
.96de		95 00		sta $00,x	                sta 0,x
.96e0		74 01		stz $01,x	                stz 1,x                 ; paranoid; now ( ud char )
.96e2		20 f4 90	jsr $90f4	                jsr xt_hold
.96e5						z_number_sign:
.96e5		60		rts		                rts
.96e6						xt_number_sign_greater:
.96e6		20 87 d7	jsr $d787	                jsr underflow_2         ; double number
.96e9		a5 2b		lda $2b		                lda tohold
.96eb		95 00		sta $00,x	                sta 0,x         ; LSB of tohold
.96ed		95 02		sta $02,x	                sta 2,x
.96ef		a5 2c		lda $2c		                lda tohold+1
.96f1		95 01		sta $01,x	                sta 1,x         ; MSB of addr
.96f3		95 03		sta $03,x	                sta 3,x         ; ( addr addr )
.96f5		20 cb 97	jsr $97cb	                jsr xt_pad      ; ( addr addr pad )
.96f8		38		sec		                sec
.96f9		b5 00		lda $00,x	                lda 0,x         ; LSB of pad address
.96fb		f5 02		sbc $02,x	                sbc 2,x
.96fd		95 02		sta $02,x	                sta 2,x
.96ff		b5 01		lda $01,x	                lda 1,x         ; MSB, which should always be zero
.9701		f5 03		sbc $03,x	                sbc 3,x
.9703		95 03		sta $03,x	                sta 3,x         ; ( addr u pad )
.9705		e8		inx		                inx
.9706		e8		inx		                inx
.9707						z_number_sign_greater:
.9707		60		rts		                rts
.9708						xt_number_sign_s:
.9708		20 87 d7	jsr $d787	                jsr underflow_2
.970b						_loop:
.970b		20 b1 96	jsr $96b1	                jsr xt_number_sign
.970e		b5 00		lda $00,x	                lda 0,x
.9710		15 01		ora $01,x	                ora 1,x
.9712		15 02		ora $02,x	                ora 2,x
.9714		15 03		ora $03,x	                ora 3,x
.9716		d0 f3		bne $970b	                bne _loop
.9718						z_number_sign_s:
.9718		60		rts		                rts
.9719						xt_of:
.9719		a0 97		ldy #$97	                ldy #>xt_over
.971b		a9 bd		lda #$bd	                lda #<xt_over
.971d		20 bf d5	jsr $d5bf	                jsr cmpl_subroutine
.9720		a0 8e		ldy #$8e	                ldy #>xt_equal
.9722		a9 53		lda #$53	                lda #<xt_equal
.9724		20 bf d5	jsr $d5bf	                jsr cmpl_subroutine
.9727		20 1b 91	jsr $911b	                jsr xt_if
.972a		a0 8c		ldy #$8c	                ldy #>xt_drop
.972c		a9 86		lda #$86	                lda #<xt_drop
.972e		20 bf d5	jsr $d5bf	                jsr cmpl_subroutine
.9731		60		rts		z_of:           rts
.9732						xt_editor_wordlist:
.9732						xt_one:
.9732		ca		dex		                dex
.9733		ca		dex		                dex
.9734		a9 01		lda #$01	                lda #1
.9736		95 00		sta $00,x	                sta 0,x
.9738		74 01		stz $01,x	                stz 1,x
.973a						z_editor_wordlist:
.973a						z_one:
.973a		60		rts		                rts
.973b						xt_one_minus:
.973b		20 82 d7	jsr $d782	                jsr underflow_1
.973e		b5 00		lda $00,x	                lda 0,x
.9740		d0 02		bne $9744	                bne +
.9742		d6 01		dec $01,x	                dec 1,x
.9744						+
.9744		d6 00		dec $00,x	                dec 0,x
.9746		60		rts		z_one_minus:    rts
.9747						xt_char_plus:
.9747						xt_one_plus:
.9747		20 82 d7	jsr $d782	                jsr underflow_1
.974a		f6 00		inc $00,x	                inc 0,x
.974c		d0 02		bne $9750	                bne _done
.974e		f6 01		inc $01,x	                inc 1,x
.9750						_done:
.9750						z_char_plus:
.9750		60		rts		z_one_plus:     rts
.9751						xt_only:
.9751		ca		dex		                dex
.9752		ca		dex		                dex
.9753		a9 ff		lda #$ff	                lda #$FF
.9755		95 00		sta $00,x	                sta 0,x
.9757		95 01		sta $01,x	                sta 1,x
.9759		20 cf 9b	jsr $9bcf	                jsr xt_set_order
.975c		60		rts		z_only:         rts
.975d						xt_or:
.975d		20 87 d7	jsr $d787	                jsr underflow_2
.9760		b5 00		lda $00,x	                lda 0,x
.9762		15 02		ora $02,x	                ora 2,x
.9764		95 02		sta $02,x	                sta 2,x
.9766		b5 01		lda $01,x	                lda 1,x
.9768		15 03		ora $03,x	                ora 3,x
.976a		95 03		sta $03,x	                sta 3,x
.976c		e8		inx		                inx
.976d		e8		inx		                inx
.976e		60		rts		z_or:           rts
.976f						xt_order:
.976f		20 d5 88	jsr $88d5	                jsr xt_cr
.9772		20 51 90	jsr $9051	                jsr xt_get_order        ; ( wid_n ... wid_1 n )
.9775		b5 00		lda $00,x	                lda 0,x                 ; assumes no more than 255 wordlists
.9777		f0 1e		beq $9797	                beq _drop_done
.9779						_have_wordlists:
.9779		a8		tay		                tay
.977a						_loop:
.977a		e8		inx		                inx
.977b		e8		inx		                inx                     ; DROP, now ( wid_n ... wid_1 )
.977c		b5 00		lda $00,x	                lda 0,x
.977e		5a		phy		                phy
.977f		20 9a 97	jsr $979a	                jsr order_print_wid_string   ; internal helper function
.9782		7a		ply		                ply
.9783		88		dey		                dey
.9784		d0 f4		bne $977a	                bne _loop
.9786		20 82 9f	jsr $9f82	                jsr xt_space
.9789		20 82 9f	jsr $9f82	                jsr xt_space
.978c		20 46 90	jsr $9046	                jsr xt_get_current      ; ( wid )
.978f		b5 00		lda $00,x	                lda 0,x
.9791		20 9a 97	jsr $979a	                jsr order_print_wid_string
.9794		20 d5 88	jsr $88d5	                jsr xt_cr
.9797						_drop_done:
.9797		e8		inx		                inx
.9798		e8		inx		                inx
.9799						z_order:
.9799		60		rts		                rts
.979a						order_print_wid_string:
.979a		c9 04		cmp #$04	                cmp #4
.979c		90 09		bcc $97a7	                bcc _output_string      ; less than 4, print a real string
.979e		ca		dex		                dex
.979f		ca		dex		                dex
.97a0		95 00		sta $00,x	                sta 0,x
.97a2		74 01		stz $01,x	                stz 1,x
.97a4		4c 60 a3	jmp $a360	                jmp xt_u_dot            ; JSR/RTS as this routine is not compiled
.97a7						_output_string:
.97a7		a8		tay		                tay
.97a8		b9 ae 97	lda $97ae,y	                lda _wid_data,y
.97ab		4c be d7	jmp $d7be	                jmp print_string_no_lf  ; JSR/RTS as this routine is not compiled
.97ae						_wid_data:
>97ae		04				        .byte str_wid_forth            ; WID 0: "Forth"
>97af		05				        .byte str_wid_editor           ; WID 1: "Editor"
>97b0		06				        .byte str_wid_assembler        ; WID 2: "Assembler"
>97b1		07				        .byte str_wid_root             ; WID 3: "Root"
.97b2						xt_output:
.97b2		ca		dex		                dex
.97b3		ca		dex		                dex
.97b4		a9 12		lda #$12	                lda #<output
.97b6		95 00		sta $00,x	                sta 0,x
.97b8		a9 00		lda #$00	                lda #>output
.97ba		95 01		sta $01,x	                sta 1,x
.97bc		60		rts		z_output:       rts
.97bd						xt_over:
.97bd		20 87 d7	jsr $d787	                jsr underflow_2
.97c0		ca		dex		                dex
.97c1		ca		dex		                dex
.97c2		b5 04		lda $04,x	                lda 4,x         ; LSB
.97c4		95 00		sta $00,x	                sta 0,x
.97c6		b5 05		lda $05,x	                lda 5,x         ; MSB
.97c8		95 01		sta $01,x	                sta 1,x
.97ca		60		rts		z_over:         rts
.97cb						xt_pad:
.97cb		ca		dex		                dex
.97cc		ca		dex		                dex
.97cd		a5 00		lda $00		                lda cp
.97cf		18		clc		                clc
.97d0		69 ff		adc #$ff	                adc #padoffset  ; assumes padoffset one byte in size
.97d2		95 00		sta $00,x	                sta 0,x
.97d4		a5 01		lda $01		                lda cp+1
.97d6		69 00		adc #$00	                adc #0          ; only need carry
.97d8		95 01		sta $01,x	                sta 1,x
.97da		60		rts		z_pad:          rts
.97db						xt_page:
.97db		a9 1b		lda #$1b	                lda #AscESC
.97dd		20 7b 8d	jsr $8d7b	                jsr emit_a
.97e0		a9 5b		lda #$5b	                lda #'['
.97e2		20 7b 8d	jsr $8d7b	                jsr emit_a
.97e5		a9 32		lda #$32	                lda #'2'
.97e7		20 7b 8d	jsr $8d7b	                jsr emit_a
.97ea		a9 4a		lda #$4a	                lda #'J'
.97ec		20 7b 8d	jsr $8d7b	                jsr emit_a
.97ef		20 eb a5	jsr $a5eb	                jsr xt_zero
.97f2		20 eb a5	jsr $a5eb	                jsr xt_zero
.97f5		20 d5 82	jsr $82d5	                jsr xt_at_xy
.97f8		60		rts		z_page:         rts
.97f9						xt_paren:
.97f9		ca		dex		                dex
.97fa		ca		dex		                dex
.97fb		a9 29		lda #$29	                lda #41     ; Right parenthesis
.97fd		95 00		sta $00,x	                sta 0,x
.97ff		74 01		stz $01,x	                stz 1,x
.9801		20 64 98	jsr $9864	                jsr xt_parse
.9804		e8		inx		                inx
.9805		e8		inx		                inx
.9806		e8		inx		                inx
.9807		e8		inx		                inx
.9808		60		rts		z_paren:        rts
.9809						xt_parse_name:
.9809		a5 0e		lda $0e		                lda ciblen              ; LSB of counter
.980b		38		sec		                sec
.980c		e5 10		sbc $10		                sbc toin
.980e		85 25		sta $25		                sta tmp1
.9810		a5 0f		lda $0f		                lda ciblen+1            ; MSB
.9812		e5 11		sbc $11		                sbc toin+1
.9814		85 26		sta $26		                sta tmp1+1
.9816		a5 25		lda $25		                lda tmp1
.9818		05 26		ora $26		                ora tmp1+1
.981a		f0 28		beq $9844	                beq _empty_line
.981c		a5 0c		lda $0c		                lda cib
.981e		18		clc		                clc
.981f		65 10		adc $10		                adc toin
.9821		85 27		sta $27		                sta tmp2                ; LSB of first character
.9823		a5 0d		lda $0d		                lda cib+1
.9825		65 11		adc $11		                adc toin+1
.9827		85 28		sta $28		                sta tmp2+1              ; MSB
.9829						_skip_loop:
.9829		b2 27		lda ($27)	                lda (tmp2)              ; work copy of cib
.982b		20 75 d7	jsr $d775	                jsr is_whitespace
.982e		90 1f		bcc $984f	                bcc _char_found
.9830		e6 27		inc $27		                inc tmp2
.9832		d0 02		bne $9836	                bne +
.9834		e6 28		inc $28		                inc tmp2+1
.9836						+
.9836		a5 25		lda $25		                lda tmp1
.9838		d0 02		bne $983c	                bne +
.983a		c6 26		dec $26		                dec tmp1+1
.983c		c6 25		dec $25		+               dec tmp1
.983e		a5 25		lda $25		                lda tmp1
.9840		05 26		ora $26		                ora tmp1+1
.9842		d0 e5		bne $9829	                bne _skip_loop          ; fall through if empty line
.9844						_empty_line:
.9844		ca		dex		                dex
.9845		ca		dex		                dex
.9846		ca		dex		                dex
.9847		ca		dex		                dex
.9848		74 00		stz $00,x	                stz 0,x                 ; TOS is zero
.984a		74 01		stz $01,x	                stz 1,x
.984c		4c f9 98	jmp $98f9	                jmp z_parse_name        ; skip over PARSE
.984f						_char_found:
.984f		a5 27		lda $27		                lda tmp2
.9851		38		sec		                sec
.9852		e5 0c		sbc $0c		                sbc cib
.9854		85 10		sta $10		                sta toin
.9856		a5 28		lda $28		                lda tmp2+1
.9858		e5 0d		sbc $0d		                sbc cib+1
.985a		85 11		sta $11		                sta toin+1
.985c		ca		dex		                dex
.985d		ca		dex		                dex
.985e		a9 20		lda #$20	                lda #AscSP
.9860		95 00		sta $00,x	                sta 0,x
.9862		74 01		stz $01,x	                stz 1,x                 ; paranoid, now ( "name" c )
.9864						xt_parse:
.9864		20 82 d7	jsr $d782	                jsr underflow_1
.9867		a5 0e		lda $0e		                lda ciblen
.9869		05 0f		ora $0f		                ora ciblen+1
.986b		f0 0c		beq $9879	                beq _abort_parse
.986d		a5 11		lda $11		                lda toin+1              ; MSB
.986f		c5 0f		cmp $0f		                cmp ciblen+1
.9871		90 0e		bcc $9881	                bcc _go_parse           ; unsigned comparison
.9873		a5 10		lda $10		                lda toin                ; LSB
.9875		c5 0e		cmp $0e		                cmp ciblen
.9877		90 08		bcc $9881	                bcc _go_parse
.9879						_abort_parse:
.9879		ca		dex		                dex
.987a		ca		dex		                dex
.987b		74 00		stz $00,x	                stz 0,x
.987d		74 01		stz $01,x	                stz 1,x
.987f		80 78		bra $98f9	                bra _done
.9881						_go_parse:
.9881		b5 00		lda $00,x	                lda 0,x
.9883		85 23		sta $23		                sta tmptos
.9885		ca		dex		                dex
.9886		ca		dex		                dex
.9887		a5 0c		lda $0c		                lda cib
.9889		18		clc		                clc
.988a		65 10		adc $10		                adc toin        ; LSB
.988c		85 25		sta $25		                sta tmp1
.988e		85 27		sta $27		                sta tmp2
.9890		95 02		sta $02,x	                sta 2,x
.9892		a5 0d		lda $0d		                lda cib+1
.9894		65 11		adc $11		                adc toin+1      ; MSB
.9896		85 26		sta $26		                sta tmp1+1
.9898		85 28		sta $28		                sta tmp2+1
.989a		95 03		sta $03,x	                sta 3,x
.989c		a5 0c		lda $0c		                lda cib
.989e		18		clc		                clc
.989f		65 0e		adc $0e		                adc ciblen
.98a1		85 29		sta $29		                sta tmp3
.98a3		a5 0d		lda $0d		                lda cib+1
.98a5		65 0f		adc $0f		                adc ciblen+1
.98a7		85 2a		sta $2a		                sta tmp3+1
.98a9		64 24		stz $24		                stz tmptos+1
.98ab						_loop:
.98ab		a5 27		lda $27		                lda tmp2
.98ad		c5 29		cmp $29		                cmp tmp3
.98af		d0 06		bne $98b7	                bne _not_empty
.98b1		a5 28		lda $28		                lda tmp2+1
.98b3		c5 2a		cmp $2a		                cmp tmp3+1
.98b5		f0 1d		beq $98d4	                beq _eol
.98b7						_not_empty:
.98b7		b2 27		lda ($27)	                lda (tmp2)
.98b9		a4 23		ldy $23		                ldy tmptos
.98bb		c0 20		cpy #$20	                cpy #AscSP
.98bd		d0 07		bne $98c6	                bne _not_whitespace
.98bf		20 75 d7	jsr $d775	                jsr is_whitespace
.98c2		90 02		bcc $98c6	                bcc _not_whitespace
.98c4		80 0c		bra $98d2	                bra _found_delimiter
.98c6						_not_whitespace:
.98c6		c5 23		cmp $23		                cmp tmptos
.98c8		f0 08		beq $98d2	                beq _found_delimiter
.98ca		e6 27		inc $27		                inc tmp2
.98cc		d0 dd		bne $98ab	                bne _loop
.98ce		e6 28		inc $28		                inc tmp2+1
.98d0		80 d9		bra $98ab	                bra _loop
.98d2						_found_delimiter:
.98d2		e6 24		inc $24		                inc tmptos+1
.98d4						_eol:
.98d4		a5 27		lda $27		                lda tmp2
.98d6		38		sec		                sec
.98d7		e5 25		sbc $25		                sbc tmp1
.98d9		95 00		sta $00,x	                sta 0,x
.98db		a5 28		lda $28		                lda tmp2+1
.98dd		e5 26		sbc $26		                sbc tmp1+1
.98df		95 01		sta $01,x	                sta 1,x
.98e1		a5 27		lda $27		                lda tmp2
.98e3		38		sec		                sec
.98e4		e5 0c		sbc $0c		                sbc cib
.98e6		85 10		sta $10		                sta toin
.98e8		a5 28		lda $28		                lda tmp2+1
.98ea		e5 0d		sbc $0d		                sbc cib+1
.98ec		85 11		sta $11		                sta toin+1
.98ee		a5 10		lda $10		                lda toin
.98f0		18		clc		                clc
.98f1		65 24		adc $24		                adc tmptos+1
.98f3		85 10		sta $10		                sta toin
.98f5		90 02		bcc $98f9	                bcc +
.98f7		e6 11		inc $11		                inc toin+1
.98f9						+
.98f9						_done:
.98f9						z_parse_name:
.98f9		60		rts		z_parse:        rts
.98fa						xt_pick:
.98fa		16 00		asl $00,x	                asl 0,x         ; we assume u < 128 (stack is small)
.98fc		8a		txa		                txa
.98fd		75 00		adc $00,x	                adc 0,x
.98ff		a8		tay		                tay
.9900		b9 02 00	lda $0002,y	                lda 0002,y
.9903		95 00		sta $00,x	                sta 0,x
.9905		b9 03 00	lda $0003,y	                lda 0003,y
.9908		95 01		sta $01,x	                sta 1,x
.990a		60		rts		z_pick:         rts
.990b						xt_plus:
.990b		20 87 d7	jsr $d787	                jsr underflow_2
.990e		18		clc		                clc
.990f		b5 00		lda $00,x	                lda 0,x         ; LSB
.9911		75 02		adc $02,x	                adc 2,x
.9913		95 02		sta $02,x	                sta 2,x
.9915		b5 01		lda $01,x	                lda 1,x         ; MSB. No CLC, conserve carry bit
.9917		75 03		adc $03,x	                adc 3,x
.9919		95 03		sta $03,x	                sta 3,x
.991b		e8		inx		                inx
.991c		e8		inx		                inx
.991d		60		rts		z_plus:         rts
.991e						xt_plus_store:
.991e		20 87 d7	jsr $d787	                jsr underflow_2
.9921		b5 00		lda $00,x	                lda 0,x
.9923		85 25		sta $25		                sta tmp1
.9925		b5 01		lda $01,x	                lda 1,x
.9927		85 26		sta $26		                sta tmp1+1
.9929		a0 00		ldy #$00	                ldy #0          ; LSB
.992b		b1 25		lda ($25),y	                lda (tmp1),y
.992d		18		clc		                clc
.992e		75 02		adc $02,x	                adc 2,x
.9930		91 25		sta ($25),y	                sta (tmp1),y
.9932		c8		iny		                iny             ; MSB
.9933		b1 25		lda ($25),y	                lda (tmp1),y
.9935		75 03		adc $03,x	                adc 3,x
.9937		91 25		sta ($25),y	                sta (tmp1),y
.9939		e8		inx		                inx
.993a		e8		inx		                inx
.993b		e8		inx		                inx
.993c		e8		inx		                inx
.993d		60		rts		z_plus_store:   rts
.993e						xt_postpone:
.993e		20 09 98	jsr $9809	                jsr xt_parse_name               ; ( -- addr n )
.9941		b5 00		lda $00,x	                lda 0,x
.9943		15 01		ora $01,x	                ora 1,x
.9945		d0 05		bne $994c	                bne +
.9947		a9 05		lda #$05	                lda #err_noname
.9949		4c 98 d7	jmp $d798	                jmp error
.994c						+
.994c		20 60 8f	jsr $8f60	                jsr xt_find_name                ; ( -- nt | 0 )
.994f		d0 05		bne $9956	                bne +
.9951		a9 05		lda #$05	                lda #err_noname
.9953		4c 98 d7	jmp $d798	                jmp error
.9956						+
.9956		b5 00		lda $00,x	                lda 0,x
.9958		85 25		sta $25		                sta tmp1
.995a		b5 01		lda $01,x	                lda 1,x
.995c		85 26		sta $26		                sta tmp1+1
.995e		20 17 95	jsr $9517	                jsr xt_name_to_int              ; ( nt -- xt )
.9961		e6 25		inc $25		                inc tmp1
.9963		d0 02		bne $9967	                bne +
.9965		e6 26		inc $26		                inc tmp1+1
.9967						+
.9967		b2 25		lda ($25)	                lda (tmp1)
.9969		29 04		and #$04	                and #IM         ; mask all but Intermediate flag
.996b		f0 05		beq $9972	                beq _not_immediate
.996d		20 5d 87	jsr $875d	                jsr xt_compile_comma
.9970		80 0a		bra $997c	                bra _done
.9972						_not_immediate:
.9972		20 af 92	jsr $92af	                jsr xt_literal
.9975		a0 87		ldy #$87	                ldy #>xt_compile_comma
.9977		a9 5d		lda #$5d	                lda #<xt_compile_comma
.9979		20 bf d5	jsr $d5bf	                jsr cmpl_subroutine
.997c						_done:
.997c		60		rts		z_postpone:     rts
.997d						xt_previous:
.997d		20 51 90	jsr $9051	                jsr xt_get_order
.9980		20 6f 95	jsr $956f	                jsr xt_nip
.9983		20 3b 97	jsr $973b	                jsr xt_one_minus
.9986		20 cf 9b	jsr $9bcf	                jsr xt_set_order
.9989		60		rts		z_previous:     rts
.998a						xt_question:
.998a		20 05 8f	jsr $8f05	                jsr xt_fetch
.998d		20 8e 8b	jsr $8b8e	                jsr xt_dot
.9990		60		rts		z_question:     rts
.9991						xt_question_dup:
.9991		20 82 d7	jsr $d782	                jsr underflow_1
.9994		b5 00		lda $00,x	                lda 0,x
.9996		15 01		ora $01,x	                ora 1,x
.9998		f0 0a		beq $99a4	                beq _done
.999a		ca		dex		                dex
.999b		ca		dex		                dex
.999c		b5 02		lda $02,x	                lda 2,x
.999e		95 00		sta $00,x	                sta 0,x
.99a0		b5 03		lda $03,x	                lda 3,x
.99a2		95 01		sta $01,x	                sta 1,x
.99a4						_done:
.99a4		60		rts		z_question_dup: rts
.99a5						xt_r_fetch:
.99a5		7a		ply		                ply             ; LSB
.99a6		84 25		sty $25		                sty tmp1
.99a8		7a		ply		                ply             ; MSB
.99a9		ca		dex		                dex
.99aa		ca		dex		                dex
.99ab		68		pla		                pla             ; LSB
.99ac		95 00		sta $00,x	                sta 0,x
.99ae		68		pla		                pla             ; MSB
.99af		95 01		sta $01,x	                sta 1,x
.99b1		48		pha		                pha
.99b2		b5 00		lda $00,x	                lda 0,x
.99b4		48		pha		                pha
.99b5		5a		phy		                phy             ; MSB
.99b6		a4 25		ldy $25		                ldy tmp1
.99b8		5a		phy		                phy             ; LSB
.99b9		60		rts		z_r_fetch:      rts
.99ba						xt_r_from:
.99ba		68		pla		                pla             ; LSB
.99bb		85 23		sta $23		                sta tmptos
.99bd		7a		ply		                ply             ; MSB
.99be		ca		dex		                dex
.99bf		ca		dex		                dex
.99c0		68		pla		                pla             ; LSB
.99c1		95 00		sta $00,x	                sta 0,x
.99c3		68		pla		                pla             ; MSB
.99c4		95 01		sta $01,x	                sta 1,x
.99c6		5a		phy		                phy             ; MSB
.99c7		a5 23		lda $23		                lda tmptos
.99c9		48		pha		                pha             ; LSB
.99ca		60		rts		z_r_from:       rts
.99cb						xt_r_to_input:
.99cb		68		pla		                pla
.99cc		85 25		sta $25		                sta tmp1
.99ce		68		pla		                pla
.99cf		85 26		sta $26		                sta tmp1+1
.99d1		a0 00		ldy #$00	                ldy #0
.99d3						_loop:
.99d3		68		pla		                pla
.99d4		99 0a 00	sta $000a,y	                sta insrc,y
.99d7		c8		iny		                iny
.99d8		c0 08		cpy #$08	                cpy #8
.99da		d0 f7		bne $99d3	                bne _loop
.99dc		a5 26		lda $26		                lda tmp1+1
.99de		48		pha		                pha
.99df		a5 25		lda $25		                lda tmp1
.99e1		48		pha		                pha
.99e2		60		rts		z_r_to_input: 	rts
.99e3						xt_recurse:
.99e3		a0 00		ldy #$00	                ldy #0
.99e5		a9 20		lda #$20	                lda #OpJSR
.99e7		91 00		sta ($00),y	                sta (cp),y
.99e9		c8		iny		                iny
.99ea		24 1c		bit $1c		                bit status
.99ec		70 0c		bvs $99fa	                bvs _nt_in_workword
.99ee		a5 06		lda $06		                lda workword
.99f0		91 00		sta ($00),y	                sta (cp),y
.99f2		c8		iny		                iny
.99f3		a5 07		lda $07		                lda workword+1
.99f5		91 00		sta ($00),y	                sta (cp),y
.99f7		c8		iny		                iny
.99f8		80 1b		bra $9a15	                bra _update_cp
.99fa						_nt_in_workword:
.99fa		a5 06		lda $06		                lda workword            ; LSB
.99fc		18		clc		                clc
.99fd		69 04		adc #$04	                adc #4
.99ff		85 25		sta $25		                sta tmp1
.9a01		a5 07		lda $07		                lda workword+1          ; MSB
.9a03		69 00		adc #$00	                adc #0
.9a05		85 26		sta $26		                sta tmp1+1
.9a07		b2 25		lda ($25)	                lda (tmp1)
.9a09		91 00		sta ($00),y	                sta (cp),y
.9a0b		5a		phy		                phy
.9a0c		a0 01		ldy #$01	                ldy #1
.9a0e		b1 25		lda ($25),y	                lda (tmp1),y
.9a10		7a		ply		                ply
.9a11		c8		iny		                iny
.9a12		91 00		sta ($00),y	                sta (cp),y
.9a14		c8		iny		                iny
.9a15						_update_cp:
.9a15		98		tya		                tya
.9a16		18		clc		                clc
.9a17		65 00		adc $00		                adc cp
.9a19		85 00		sta $00		                sta cp
.9a1b		90 02		bcc $9a1f	                bcc _done
.9a1d		e6 01		inc $01		                inc cp+1
.9a1f						_done:
.9a1f		60		rts		z_recurse:      rts
.9a20						xt_refill:
.9a20		a5 0a		lda $0a		                lda insrc               ; cheat: We only check LSB
.9a22		d0 2d		bne $9a51	                bne _src_not_kbd
.9a24		ca		dex		                dex
.9a25		ca		dex		                dex
.9a26		ca		dex		                dex
.9a27		ca		dex		                dex
.9a28		a5 0c		lda $0c		                lda cib                 ; address of CIB is NOS
.9a2a		95 02		sta $02,x	                sta 2,x
.9a2c		a5 0d		lda $0d		                lda cib+1
.9a2e		95 03		sta $03,x	                sta 3,x
.9a30		64 0e		stz $0e		                stz ciblen              ; go in with empty buffer
.9a32		64 0f		stz $0f		                stz ciblen+1
.9a34		a9 ff		lda #$ff	                lda #bsize              ; max number of chars is TOS
.9a36		95 00		sta $00,x	                sta 0,x
.9a38		74 01		stz $01,x	                stz 1,x                 ; cheat: We only accept max 255
.9a3a		20 e6 80	jsr $80e6	                jsr xt_accept           ; ( addr n1 -- n2)
.9a3d		b5 00		lda $00,x	                lda 0,x
.9a3f		85 0e		sta $0e		                sta ciblen
.9a41		b5 01		lda $01,x	                lda 1,x
.9a43		85 0f		sta $0f		                sta ciblen+1            ; though we only accept 255 chars
.9a45		64 10		stz $10		                stz toin
.9a47		64 11		stz $11		                stz toin+1
.9a49		a9 ff		lda #$ff	                lda #$FF                ; overwrite with TRUE flag
.9a4b		95 00		sta $00,x	                sta 0,x
.9a4d		95 01		sta $01,x	                sta 1,x
.9a4f		80 10		bra $9a61	                bra _done
.9a51						_src_not_kbd:
.9a51		1a		inc a		                ina
.9a52		d0 08		bne $9a5c	                bne _src_not_string
.9a54		ca		dex		                dex
.9a55		ca		dex		                dex
.9a56		74 00		stz $00,x	                stz 0,x
.9a58		74 01		stz $01,x	                stz 1,x
.9a5a		80 05		bra $9a61	                bra z_refill
.9a5c						_src_not_string:
.9a5c		a9 01		lda #$01	                lda #err_badsource
.9a5e		4c 98 d7	jmp $d798	                jmp error
.9a61						_done:
.9a61		60		rts		z_refill:       rts
.9a62						xt_repeat:
.9a62		20 21 82	jsr $8221	                jsr xt_again
.9a65		4c 25 8d	jmp $8d25	                jmp xt_then
.9a68						z_repeat:
.9a68						xt_right_bracket:
.9a68		a9 ff		lda #$ff	                lda #$FF
.9a6a		85 1a		sta $1a		                sta state
.9a6c		85 1b		sta $1b		                sta state+1
.9a6e						z_right_bracket:
.9a6e		60		rts		                rts
.9a6f						xt_root_wordlist:
.9a6f		ca		dex		                dex             ; The WID for the Root wordlist is 3.
.9a70		ca		dex		                dex
.9a71		a9 03		lda #$03	                lda #3
.9a73		95 00		sta $00,x	                sta 0,x
.9a75		74 01		stz $01,x	                stz 1,x
.9a77						z_root_wordlist:
.9a77		60		rts		                rts
.9a78						xt_rot:
.9a78		20 8c d7	jsr $d78c	                jsr underflow_3
.9a7b		b4 05		ldy $05,x	                ldy 5,x         ; MSB first
.9a7d		b5 03		lda $03,x	                lda 3,x
.9a7f		95 05		sta $05,x	                sta 5,x
.9a81		b5 01		lda $01,x	                lda 1,x
.9a83		95 03		sta $03,x	                sta 3,x
.9a85		94 01		sty $01,x	                sty 1,x
.9a87		b4 04		ldy $04,x	                ldy 4,x         ; LSB next
.9a89		b5 02		lda $02,x	                lda 2,x
.9a8b		95 04		sta $04,x	                sta 4,x
.9a8d		b5 00		lda $00,x	                lda 0,x
.9a8f		95 02		sta $02,x	                sta 2,x
.9a91		94 00		sty $00,x	                sty 0,x
.9a93		60		rts		z_rot:          rts
.9a94						xt_rshift:
.9a94		20 87 d7	jsr $d787	                jsr underflow_2
.9a97		b5 00		lda $00,x	                lda 0,x
.9a99		29 0f		and #$0f	                and #%00001111
.9a9b		f0 08		beq $9aa5	                beq _done               ; if 0 shifts, quit
.9a9d		a8		tay		                tay
.9a9e						_loop:
.9a9e		56 03		lsr $03,x	                lsr 3,x
.9aa0		76 02		ror $02,x	                ror 2,x
.9aa2		88		dey		                dey
.9aa3		d0 f9		bne $9a9e	                bne _loop
.9aa5						_done:
.9aa5		e8		inx		                inx
.9aa6		e8		inx		                inx
.9aa7		60		rts		z_rshift:       rts
.9aa8						xt_s_backslash_quote:
.9aa8		a9 ff		lda #$ff	                lda #$FF
.9aaa		85 27		sta $27		                sta tmp2
.9aac		64 28		stz $28		                stz tmp2+1
.9aae		20 07 9c	jsr $9c07	                jsr s_quote_start
.9ab1						_done:
.9ab1						z_s_backslash_quote:
.9ab1		60		rts		                rts
.9ab2						convert_hex_value:
.9ab2		c9 41		cmp #$41	        cmp #'A'
.9ab4		90 07		bcc $9abd	        bcc _digit
.9ab6		29 df		and #$df	        and #$DF                ; Make it uppercase.
.9ab8		38		sec		        sec
.9ab9		e9 37		sbc #$37	        sbc #'7'                ; gives value 10 for 'A'
.9abb		80 03		bra $9ac0	        bra _done
.9abd						_digit:
.9abd		38		sec		        sec
.9abe		e9 30		sbc #$30	        sbc #'0'
.9ac0						_done:
.9ac0		60		rts		        rts
.9ac1						xt_search_wordlist:
.9ac1		20 8c d7	jsr $d78c	                jsr underflow_3
.9ac4		a5 08		lda $08		                lda up
.9ac6		18		clc		                clc
.9ac7		69 0a		adc #$0a	                adc #wordlists_offset
.9ac9		85 27		sta $27		                sta tmp2
.9acb		a5 09		lda $09		                lda up+1
.9acd		69 00		adc #$00	                adc #0          ; Adding carry
.9acf		85 28		sta $28		                sta tmp2+1
.9ad1		b5 00		lda $00,x	                lda 0,x
.9ad3		0a		asl a		                asl             ; Convert wid to offset in cells (x2)
.9ad4		65 27		adc $27		                adc tmp2
.9ad6		85 27		sta $27		                sta tmp2
.9ad8		90 02		bcc $9adc	                bcc +
.9ada		e6 28		inc $28		                inc tmp2+1      ; Propagate carry if needed.
.9adc						+
.9adc		e8		inx		                inx
.9add		e8		inx		                inx
.9ade		b5 00		lda $00,x	                lda 0,x
.9ae0		15 01		ora $01,x	                ora 1,x
.9ae2		f0 4e		beq $9b32	                beq _done
.9ae4		a5 27		lda $27		                lda tmp2
.9ae6		05 28		ora $28		                ora tmp2+1
.9ae8		f0 48		beq $9b32	                beq _done
.9aea		b2 27		lda ($27)	                lda (tmp2)              ; nt of first word in Dictionary
.9aec		85 25		sta $25		                sta tmp1
.9aee		e6 27		inc $27		                inc tmp2                ; Move to the upper byte
.9af0		d0 02		bne $9af4	                bne +
.9af2		e6 28		inc $28		                inc tmp2+1
.9af4						+
.9af4		b2 27		lda ($27)	                lda (tmp2)
.9af6		85 26		sta $26		                sta tmp1+1
.9af8		20 52 d6	jsr $d652	                jsr find_header_name
.9afb		f0 31		beq $9b2e	                beq _fail_done
.9afd		e8		inx		                inx
.9afe		e8		inx		                inx
.9aff		a5 25		lda $25		                lda tmp1
.9b01		95 00		sta $00,x	                sta 0,x
.9b03		a5 26		lda $26		                lda tmp1+1
.9b05		95 01		sta $01,x	                sta 1,x
.9b07		20 07 8d	jsr $8d07	                jsr xt_dup              ; ( nt nt )
.9b0a		20 17 95	jsr $9517	                jsr xt_name_to_int      ; ( nt xt )
.9b0d		20 0c a0	jsr $a00c	                jsr xt_swap             ; ( xt nt )
.9b10		a0 00		ldy #$00	                ldy #0                  ; Prepare flag
.9b12		f6 00		inc $00,x	                inc 0,x
.9b14		d0 02		bne $9b18	                bne +
.9b16		f6 01		inc $01,x	                inc 1,x                 ; ( xt nt+1 )
.9b18						+
.9b18		a1 00		lda ($00,x)	                lda (0,x)               ; ( xt char )
.9b1a		29 04		and #$04	                and #IM
.9b1c		d0 08		bne $9b26	                bne _immediate          ; bit set, we're immediate
.9b1e		a9 ff		lda #$ff	                lda #$FF                ; We're not immediate, return -1
.9b20		95 00		sta $00,x	                sta 0,x
.9b22		95 01		sta $01,x	                sta 1,x
.9b24		80 0e		bra $9b34	                bra _done_nodrop
.9b26						_immediate:
.9b26		a9 01		lda #$01	                lda #1                  ; We're immediate, return 1
.9b28		95 00		sta $00,x	                sta 0,x
.9b2a		74 01		stz $01,x	                stz 1,x
.9b2c		80 06		bra $9b34	                bra _done_nodrop
.9b2e						_fail_done:
.9b2e		74 02		stz $02,x	                stz 2,x         ; failure flag
.9b30		74 03		stz $03,x	                stz 3,x
.9b32						_done:
.9b32		e8		inx		                inx
.9b33		e8		inx		                inx
.9b34						_done_nodrop:
.9b34						z_search_wordlist:
.9b34		60		rts		                rts
.9b35						xt_see:
.9b35		20 09 98	jsr $9809	                jsr xt_parse_name       ; ( addr u )
.9b38		20 60 8f	jsr $8f60	                jsr xt_find_name        ; ( nt | 0 )
.9b3b		b5 00		lda $00,x	                lda 0,x
.9b3d		15 01		ora $01,x	                ora 1,x
.9b3f		d0 05		bne $9b46	                bne +
.9b41		a9 05		lda #$05	                lda #err_noname
.9b43		4c 98 d7	jmp $d798	                jmp error
.9b46						+
.9b46		20 d5 88	jsr $88d5	                jsr xt_cr
.9b49		a5 18		lda $18		                lda base
.9b4b		48		pha		                pha
.9b4c		20 9a 90	jsr $909a	                jsr xt_hex
.9b4f		a9 09		lda #$09	                lda #str_see_nt
.9b51		20 be d7	jsr $d7be	                jsr print_string_no_lf
.9b54		20 07 8d	jsr $8d07	                jsr xt_dup              ; ( nt nt )
.9b57		20 60 a3	jsr $a360	                jsr xt_u_dot
.9b5a		20 82 9f	jsr $9f82	                jsr xt_space            ; ( nt )
.9b5d		20 07 8d	jsr $8d07	                jsr xt_dup              ; ( nt nt )
.9b60		20 17 95	jsr $9517	                jsr xt_name_to_int      ; ( nt xt )
.9b63		a9 0a		lda #$0a	                lda #str_see_xt
.9b65		20 be d7	jsr $d7be	                jsr print_string_no_lf
.9b68		20 07 8d	jsr $8d07	                jsr xt_dup              ; ( nt xt xt )
.9b6b		20 60 a3	jsr $a360	                jsr xt_u_dot
.9b6e		20 d5 88	jsr $88d5	                jsr xt_cr               ; ( nt xt )
.9b71		a9 08		lda #$08	                lda #str_see_flags
.9b73		20 be d7	jsr $d7be	                jsr print_string_no_lf
.9b76		20 bd 97	jsr $97bd	                jsr xt_over             ; ( nt xt nt )
.9b79		20 47 97	jsr $9747	                jsr xt_one_plus         ; ( nt xt nt+1 )
.9b7c		20 05 8f	jsr $8f05	                jsr xt_fetch            ; ( nt xt flags )
.9b7f		b5 00		lda $00,x	                lda 0,x
.9b81		a0 06		ldy #$06	                ldy #6                  ; Not all bits are used
.9b83						_flag_loop:
.9b83		48		pha		                pha
.9b84		29 01		and #$01	                and #%00000001
.9b86		18		clc		                clc
.9b87		69 30		adc #$30	                adc #'0'
.9b89		20 7b 8d	jsr $8d7b	                jsr emit_a
.9b8c		20 82 9f	jsr $9f82	                jsr xt_space
.9b8f		68		pla		                pla
.9b90		6a		ror a		                ror                     ; Next flag
.9b91		88		dey		                dey
.9b92		d0 ef		bne $9b83	                bne _flag_loop
.9b94		20 d5 88	jsr $88d5	                jsr xt_cr
.9b97		e8		inx		                inx
.9b98		e8		inx		                inx                     ; ( nt xt )
.9b99		a9 0b		lda #$0b	                lda #str_see_size
.9b9b		20 be d7	jsr $d7be	                jsr print_string_no_lf
.9b9e		20 0c a0	jsr $a00c	                jsr xt_swap             ; ( xt nt )
.9ba1		20 b8 a5	jsr $a5b8	                jsr xt_wordsize         ; ( xt u )
.9ba4		20 07 8d	jsr $8d07	                jsr xt_dup              ; ( xt u u ) for DUMP and DISASM
.9ba7		20 16 8a	jsr $8a16	                jsr xt_decimal
.9baa		20 60 a3	jsr $a360	                jsr xt_u_dot            ; ( xt u )
.9bad		20 9a 90	jsr $909a	                jsr xt_hex
.9bb0		20 d5 88	jsr $88d5	                jsr xt_cr
.9bb3		20 ea a1	jsr $a1ea	                jsr xt_two_dup          ; ( xt u xt u )
.9bb6		20 8c 8c	jsr $8c8c	                jsr xt_dump
.9bb9		20 d5 88	jsr $88d5	                jsr xt_cr
.9bbc		20 ab 8a	jsr $8aab	                jsr xt_disasm
.9bbf		68		pla		                pla
.9bc0		85 18		sta $18		                sta base
.9bc2		60		rts		z_see:          rts
.9bc3						xt_set_current:
.9bc3		20 82 d7	jsr $d782	                jsr underflow_1
.9bc6		a0 08		ldy #$08	                ldy #current_offset
.9bc8		b5 00		lda $00,x	                lda 0,x         ; CURRENT is byte variable
.9bca		91 08		sta ($08),y	                sta (up),y      ; so only the LSB is used.
.9bcc		e8		inx		                inx
.9bcd		e8		inx		                inx
.9bce		60		rts		z_set_current:  rts
.9bcf						xt_set_order:
.9bcf		a9 ff		lda #$ff	                lda #$FF
.9bd1		d5 01		cmp $01,x	                cmp 1,x
.9bd3		d0 12		bne $9be7	                bne _start
.9bd5		d5 00		cmp $00,x	                cmp 0,x
.9bd7		d0 0e		bne $9be7	                bne _start
.9bd9		ca		dex		                dex             ; Make room for the count.
.9bda		ca		dex		                dex
.9bdb		74 03		stz $03,x	                stz 3,x         ; ROOT-WORDLIST is 3
.9bdd		a9 03		lda #$03	                lda #3
.9bdf		95 02		sta $02,x	                sta 2,x
.9be1		74 01		stz $01,x	                stz 1,x         ; Count is 1.
.9be3		a9 01		lda #$01	                lda #1
.9be5		95 00		sta $00,x	                sta 0,x
.9be7						_start:
.9be7		a0 22		ldy #$22	                ldy #num_order_offset
.9be9		b5 00		lda $00,x	                lda 0,x
.9beb		91 08		sta ($08),y	                sta (up),y      ; #ORDER is a byte variable.
.9bed		85 25		sta $25		                sta tmp1        ; Save a copy for zero check and looping.
.9bef		e8		inx		                inx             ; Drop the count off the data stack.
.9bf0		e8		inx		                inx
.9bf1		a5 25		lda $25		                lda tmp1
.9bf3		f0 0d		beq $9c02	                beq _done       ; If zero, there are no wordlists.
.9bf5		a0 23		ldy #$23	                ldy #search_order_offset
.9bf7						_loop:
.9bf7		b5 00		lda $00,x	                lda 0,x         ; The search order is a byte array
.9bf9		91 08		sta ($08),y	                sta (up),y      ; so only save the LSB
.9bfb		c8		iny		                iny
.9bfc		e8		inx		                inx
.9bfd		e8		inx		                inx
.9bfe		c6 25		dec $25		                dec tmp1
.9c00		d0 f5		bne $9bf7	                bne _loop
.9c02						_done:
.9c02		60		rts		z_set_order:    rts
.9c03						xt_s_quote:
.9c03		64 27		stz $27		                stz tmp2
.9c05		64 28		stz $28		                stz tmp2+1
.9c07						s_quote_start:
.9c07		ca		dex		                dex
.9c08		ca		dex		                dex
.9c09		ca		dex		                dex
.9c0a		ca		dex		                dex
.9c0b		20 c4 d5	jsr $d5c4	                jsr cmpl_jump
.9c0e		a5 00		lda $00		                lda cp
.9c10		95 02		sta $02,x	                sta 2,x
.9c12		a5 01		lda $01		                lda cp+1
.9c14		95 03		sta $03,x	                sta 3,x
.9c16						_savechars_loop:
.9c16		a5 11		lda $11		                lda toin+1              ; MSB
.9c18		c5 0f		cmp $0f		                cmp ciblen+1
.9c1a		90 2a		bcc $9c46	                bcc _input_fine         ; unsigned comparison
.9c1c		a5 10		lda $10		                lda toin                ; LSB
.9c1e		c5 0e		cmp $0e		                cmp ciblen
.9c20		90 24		bcc $9c46	                bcc _input_fine
.9c22		a5 27		lda $27		                lda tmp2
.9c24		48		pha		                pha
.9c25		a5 28		lda $28		                lda tmp2+1
.9c27		48		pha		                pha
.9c28		a5 29		lda $29		                lda tmp3    ; Only tmp3 used, so don't bother with tmp3+1
.9c2a		48		pha		                pha
.9c2b		20 20 9a	jsr $9a20	                jsr xt_refill           ; ( -- f )
.9c2e		68		pla		                pla
.9c2f		85 29		sta $29		                sta tmp3
.9c31		68		pla		                pla
.9c32		85 28		sta $28		                sta tmp2+1
.9c34		68		pla		                pla
.9c35		85 27		sta $27		                sta tmp2
.9c37		b5 00		lda $00,x	                lda 0,x
.9c39		15 01		ora $01,x	                ora 1,x
.9c3b		d0 05		bne $9c42	                bne _refill_ok
.9c3d		a9 06		lda #$06	                lda #err_refill
.9c3f		4c 98 d7	jmp $d798	                jmp error
.9c42						_refill_ok:
.9c42		e8		inx		                inx
.9c43		e8		inx		                inx
.9c44		80 d0		bra $9c16	                bra _savechars_loop
.9c46						_input_fine:
.9c46		a5 0c		lda $0c		                lda cib
.9c48		18		clc		                clc
.9c49		65 10		adc $10		                adc toin        ; LSB
.9c4b		85 25		sta $25		                sta tmp1
.9c4d		a5 0d		lda $0d		                lda cib+1
.9c4f		65 11		adc $11		                adc toin+1      ; MSB
.9c51		85 26		sta $26		                sta tmp1+1
.9c53		b2 25		lda ($25)	                lda (tmp1)
.9c55		24 27		bit $27		                bit tmp2
.9c57		30 03		bmi $9c5c	                bmi _handle_escapes    ; Only checking bit 7
.9c59		4c df 9c	jmp $9cdf	                jmp _regular_char
.9c5c						_handle_escapes:
.9c5c		24 28		bit $28		                bit tmp2+1
.9c5e		30 03		bmi $9c63	                bmi _escaped
.9c60		4c d5 9c	jmp $9cd5	                jmp _not_escaped
.9c63						_escaped:
.9c63		70 3c		bvs $9ca1	                bvs _check_esc_chars
.9c65		a9 01		lda #$01	                lda #1
.9c67		24 28		bit $28		                bit tmp2+1
.9c69		d0 10		bne $9c7b	                bne _esc_x_second_digit
.9c6b		e6 28		inc $28		                inc tmp2+1  ; Adjust flag for second digit next time.
.9c6d		b2 25		lda ($25)	                lda (tmp1)  ; Get the char again.
.9c6f		20 b2 9a	jsr $9ab2	                jsr convert_hex_value
.9c72		0a		asl a		                asl
.9c73		0a		asl a		                asl
.9c74		0a		asl a		                asl
.9c75		0a		asl a		                asl
.9c76		85 29		sta $29		                sta tmp3    ; Save it for later.
.9c78		4c e6 9c	jmp $9ce6	                jmp _next_character
.9c7b						_esc_x_second_digit:
.9c7b		64 28		stz $28		                stz tmp2+1
.9c7d		b2 25		lda ($25)	                lda (tmp1)
.9c7f		20 b2 9a	jsr $9ab2	                jsr convert_hex_value
.9c82		05 29		ora $29		                ora tmp3
.9c84		4c e3 9c	jmp $9ce3	                jmp _save_character
.9c87						_esc_tr_table:
>9c87		07				    .byte   7               ; a -> BEL (ASCII value 7)
>9c88		08				    .byte   8               ; b -> Backspace (ASCII value 8)
>9c89		00 00				    .byte   0,0             ; c, d no escape
>9c8b		1b				    .byte   27              ; e -> ESC (ASCII value 27)
>9c8c		0c				    .byte   12              ; f -> FF (ASCII value 12)
>9c8d		00 00 00 00 00			    .byte   0,0,0,0,0       ; g,h,i,j,k
>9c92		0a				    .byte   10              ; l -> LF (ASCII value 10)
>9c93		8d				    .byte   13+128          ; m -> CR/LF pair (ASCII values 13, 10)
>9c94		0a				    .byte   10              ; n behaves like l --> lf
>9c95		00 00				    .byte   0,0             ; o,p
>9c97		22				    .byte   34              ; q -> Double quote (ASCII value 34)
>9c98		0d				    .byte   13              ; r ->  CR (ASCII value 13)
>9c99		00				    .byte   0               ; s
>9c9a		09				    .byte   9               ; t -> Horizontal TAB (ASCII value 9)
>9c9b		00				    .byte   0               ; u
>9c9c		0b				    .byte   11              ; v -> Vertical TAB (ASCII value 11)
>9c9d		00 00 00			    .byte   0,0,0           ; w,x,y   (x is a special case later)
>9ca0		80				    .byte   0+128           ; z -> NULL (ASCII value 0)
.9ca1						_check_esc_chars:
.9ca1		64 28		stz $28		                stz tmp2+1
.9ca3		c9 61		cmp #$61	                cmp #'a'
.9ca5		30 1a		bmi $9cc1	                bmi _check_esc_quote
.9ca7		c9 7b		cmp #$7b	                cmp #'z'+1
.9ca9		10 16		bpl $9cc1	                bpl _check_esc_quote
.9cab		a8		tay		                tay
.9cac		b9 26 9c	lda $9c26,y	                lda _esc_tr_table - 'a',y   ; fake base address to index with a-z directly
.9caf		d0 03		bne $9cb4	                bne _esc_replace
.9cb1		98		tya		                tya                     ; revert if no translation
.9cb2		80 0d		bra $9cc1	                bra _check_esc_quote
.9cb4		10 2d		bpl $9ce3	_esc_replace:   bpl _save_character     ; simple replacement
.9cb6		29 7f		and #$7f	                and #$7F                ; clear hi bit
.9cb8		f0 29		beq $9ce3	                beq _save_character     ; NUL we can just output
.9cba		20 cf d5	jsr $d5cf	                jsr cmpl_a              ; else output first char (CR)
.9cbd		a9 0a		lda #$0a	                lda #10                 ; followed by LF
.9cbf		80 22		bra $9ce3	                bra _save_character
.9cc1						_check_esc_quote:
.9cc1		c9 22		cmp #$22	                cmp #'"'
.9cc3		f0 1e		beq $9ce3	                beq _save_character
.9cc5						_check_esc_x:
.9cc5		c9 78		cmp #$78	                cmp #'x'
.9cc7		d0 06		bne $9ccf	                bne _check_esc_backslash
.9cc9		a9 be		lda #$be	                lda #%10111110        ; Clear bits 6 and 0
.9ccb		85 28		sta $28		                sta tmp2+1
.9ccd		80 17		bra $9ce6	                bra _next_character
.9ccf						_check_esc_backslash:
.9ccf		c9 5c		cmp #$5c	                cmp #'\'
.9cd1		d0 0c		bne $9cdf	                bne _regular_char
.9cd3		80 0e		bra $9ce3	                bra _save_character
.9cd5						_not_escaped:
.9cd5		c9 5c		cmp #$5c	                cmp #'\'
.9cd7		d0 06		bne $9cdf	                bne _regular_char
.9cd9		a9 ff		lda #$ff	                lda #$FF
.9cdb		85 28		sta $28		                sta tmp2+1
.9cdd		80 07		bra $9ce6	                bra _next_character
.9cdf						_regular_char:
.9cdf		c9 22		cmp #$22	                cmp #'"'
.9ce1		f0 0c		beq $9cef	                beq _found_string_end
.9ce3						_save_character:
.9ce3		20 cf d5	jsr $d5cf	                jsr cmpl_a
.9ce6						_next_character:
.9ce6		e6 10		inc $10		                inc toin
.9ce8		d0 02		bne $9cec	                bne _savechars_loop_longjump
.9cea		e6 11		inc $11		                inc toin+1
.9cec						_savechars_loop_longjump:
.9cec		4c 16 9c	jmp $9c16	                jmp _savechars_loop
.9cef						_found_string_end:
.9cef		e6 10		inc $10		                inc toin
.9cf1		d0 02		bne $9cf5	                bne +
.9cf3		e6 11		inc $11		                inc toin+1
.9cf5						+
.9cf5		a5 00		lda $00		                lda cp
.9cf7		38		sec		                sec
.9cf8		f5 02		sbc $02,x	                sbc 2,x
.9cfa		95 00		sta $00,x	                sta 0,x         ; LSB
.9cfc		a5 01		lda $01		                lda cp+1
.9cfe		f5 03		sbc $03,x	                sbc 3,x
.9d00		95 01		sta $01,x	                sta 1,x         ; MSB
.9d02		b5 02		lda $02,x	                lda 2,x
.9d04		38		sec		                sec
.9d05		e9 02		sbc #$02	                sbc #2
.9d07		85 25		sta $25		                sta tmp1
.9d09		b5 03		lda $03,x	                lda 3,x
.9d0b		e9 00		sbc #$00	                sbc #0          ; Propagate borrow
.9d0d		85 26		sta $26		                sta tmp1+1
.9d0f		a5 00		lda $00		                lda cp
.9d11		92 25		sta ($25)	                sta (tmp1)
.9d13		a0 01		ldy #$01	                ldy #1
.9d15		a5 01		lda $01		                lda cp+1
.9d17		91 25		sta ($25),y	                sta (tmp1),y
.9d19		a5 1a		lda $1a		                lda state
.9d1b		05 1b		ora $1b		                ora state+1             ; paranoid
.9d1d		f0 03		beq $9d22	                beq _done
.9d1f		20 f3 9e	jsr $9ef3	                jsr sliteral_const_str         ; ( addr u -- )
.9d22						_done:
.9d22		60		rts		z_s_quote:      rts
.9d23						xt_s_to_d:
.9d23		20 82 d7	jsr $d782	                jsr underflow_1
.9d26		ca		dex		                dex
.9d27		ca		dex		                dex
.9d28		74 00		stz $00,x	                stz 0,x
.9d2a		74 01		stz $01,x	                stz 1,x
.9d2c		b5 03		lda $03,x	                lda 3,x
.9d2e		10 04		bpl $9d34	                bpl _done
.9d30		d6 00		dec $00,x	                dec 0,x
.9d32		d6 01		dec $01,x	                dec 1,x
.9d34						_done:
.9d34		60		rts		z_s_to_d:       rts
.9d35						xt_save_buffers:
.9d35		a0 30		ldy #$30	                ldy #buffstatus_offset
.9d37		b1 08		lda ($08),y	                lda (up),y      ; Only bits 0 and 1 are used, so only
.9d39		c9 03		cmp #$03	                cmp #3          ; LSB is needed.
.9d3b		d0 12		bne $9d4f	                bne _done       ; Either not used or not dirty = done!
.9d3d		20 4f 83	jsr $834f	                jsr xt_blkbuffer
.9d40		20 2b 85	jsr $852b	                jsr xt_buffblocknum
.9d43		20 05 8f	jsr $8f05	                jsr xt_fetch
.9d46		20 f1 84	jsr $84f1	                jsr xt_block_write
.9d49		a9 01		lda #$01	                lda #1
.9d4b		a0 30		ldy #$30	                ldy #buffstatus_offset
.9d4d		91 08		sta ($08),y	                sta (up),y
.9d4f						_done:
.9d4f		60		rts		z_save_buffers: rts
.9d50						xt_scr:
.9d50		a9 06		lda #$06	                lda #scr_offset
.9d52		4c 2c d6	jmp $d62c	                jmp push_upvar_tos
.9d55						z_scr:
.9d55						xt_search:
.9d55		20 91 d7	jsr $d791	                jsr underflow_4
.9d58		b5 00		lda $00,x	                lda 0,x
.9d5a		15 01		ora $01,x	                ora 1,x
.9d5c		d0 0b		bne $9d69	                bne _start_search
.9d5e		e8		inx		                inx             ; Remove u2
.9d5f		e8		inx		                inx
.9d60		a9 ff		lda #$ff	                lda #$FF        ; Turn addr2 into a true flag
.9d62		95 00		sta $00,x	                sta 0,x
.9d64		95 01		sta $01,x	                sta 1,x
.9d66		4c f3 9d	jmp $9df3	                jmp z_search
.9d69						_start_search:
.9d69		20 eb a5	jsr $a5eb	                jsr xt_zero
.9d6c						_search_loop:
.9d6c		18		clc		                clc
.9d6d		b5 00		lda $00,x	                lda 0,x
.9d6f		75 02		adc $02,x	                adc 2,x
.9d71		85 25		sta $25		                sta tmp1
.9d73		b5 01		lda $01,x	                lda 1,x
.9d75		75 03		adc $03,x	                adc 3,x
.9d77		d5 07		cmp $07,x	                cmp 7,x
.9d79		90 12		bcc $9d8d	                bcc _init_comparison ; Obviously less
.9d7b		d0 06		bne $9d83	                bne _not_found
.9d7d		b5 06		lda $06,x	                lda 6,x
.9d7f		c5 25		cmp $25		                cmp tmp1
.9d81		b0 0a		bcs $9d8d	                bcs _init_comparison
.9d83						_not_found:
.9d83		e8		inx		                inx             ; Remove offset
.9d84		e8		inx		                inx
.9d85		e8		inx		                inx             ; Remove u2
.9d86		e8		inx		                inx
.9d87		74 00		stz $00,x	                stz 0,x         ; Turn addr2 into a false flag
.9d89		74 01		stz $01,x	                stz 1,x
.9d8b		80 66		bra $9df3	                bra z_search
.9d8d						_init_comparison:
.9d8d		18		clc		                clc
.9d8e		b5 08		lda $08,x	                lda 8,x
.9d90		75 00		adc $00,x	                adc 0,x
.9d92		85 25		sta $25		                sta tmp1
.9d94		b5 09		lda $09,x	                lda 9,x
.9d96		75 01		adc $01,x	                adc 1,x
.9d98		85 26		sta $26		                sta tmp1+1
.9d9a		b5 04		lda $04,x	                lda 4,x
.9d9c		85 27		sta $27		                sta tmp2
.9d9e		b5 05		lda $05,x	                lda 5,x
.9da0		85 28		sta $28		                sta tmp2+1
.9da2		b5 02		lda $02,x	                lda 2,x
.9da4		85 29		sta $29		                sta tmp3
.9da6		b5 03		lda $03,x	                lda 3,x
.9da8		85 2a		sta $2a		                sta tmp3+1
.9daa						_comparison_loop:
.9daa		b2 25		lda ($25)	                lda (tmp1)
.9dac		d2 27		cmp ($27)	                cmp (tmp2)
.9dae		f0 05		beq $9db5	                beq _letters_match
.9db0		20 47 97	jsr $9747	                jsr xt_one_plus
.9db3		80 b7		bra $9d6c	                bra _search_loop
.9db5						_letters_match:
.9db5		e6 25		inc $25		                inc tmp1
.9db7		d0 02		bne $9dbb	                bne +
.9db9		e6 26		inc $26		                inc tmp1+1
.9dbb						+
.9dbb		e6 27		inc $27		                inc tmp2
.9dbd		d0 02		bne $9dc1	                bne +
.9dbf		e6 28		inc $28		                inc tmp2+1
.9dc1						+
.9dc1		a5 29		lda $29		                lda tmp3
.9dc3		d0 02		bne $9dc7	                bne +
.9dc5		c6 2a		dec $2a		                dec tmp3+1
.9dc7						+
.9dc7		c6 29		dec $29		                dec tmp3
.9dc9		a5 29		lda $29		                lda tmp3
.9dcb		05 2a		ora $2a		                ora tmp3+1
.9dcd		d0 db		bne $9daa	                bne _comparison_loop ; Check the next letter
.9dcf		18		clc		                clc
.9dd0		b5 00		lda $00,x	                lda 0,x
.9dd2		75 08		adc $08,x	                adc 8,x
.9dd4		95 08		sta $08,x	                sta 8,x
.9dd6		b5 01		lda $01,x	                lda 1,x
.9dd8		75 09		adc $09,x	                adc 9,x
.9dda		95 09		sta $09,x	                sta 9,x
.9ddc		38		sec		                sec
.9ddd		b5 06		lda $06,x	                lda 6,x
.9ddf		f5 00		sbc $00,x	                sbc 0,x
.9de1		95 06		sta $06,x	                sta 6,x
.9de3		b5 07		lda $07,x	                lda 7,x
.9de5		f5 01		sbc $01,x	                sbc 1,x
.9de7		95 07		sta $07,x	                sta 7,x
.9de9		e8		inx		                inx             ; drop offset
.9dea		e8		inx		                inx
.9deb		e8		inx		                inx             ; drop u2
.9dec		e8		inx		                inx
.9ded		a9 ff		lda #$ff	                lda #$FF
.9def		95 00		sta $00,x	                sta 0,x         ; Turn addr2 into a true flag.
.9df1		95 01		sta $01,x	                sta 1,x
.9df3		60		rts		z_search:       rts
.9df4						xt_semicolon:
.9df4		24 1c		bit $1c		                bit status
.9df6		70 11		bvs $9e09	                bvs _colonword
.9df8		a9 60		lda #$60	                lda #OpRTS
.9dfa		20 cf d5	jsr $d5cf	                jsr cmpl_a
.9dfd		ca		dex		                dex
.9dfe		ca		dex		                dex
.9dff		a5 06		lda $06		                lda workword
.9e01		95 00		sta $00,x	                sta 0,x
.9e03		a5 07		lda $07		                lda workword+1
.9e05		95 01		sta $01,x	                sta 1,x
.9e07		80 45		bra $9e4e	                bra _semicolon_done
.9e09						_colonword:
.9e09		a0 06		ldy #$06	                ldy #6
.9e0b		a5 00		lda $00		                lda cp
.9e0d		91 06		sta ($06),y	                sta (workword),y
.9e0f		c8		iny		                iny
.9e10		a5 01		lda $01		                lda cp+1
.9e12		91 06		sta ($06),y	                sta (workword),y
.9e14		a9 60		lda #$60	                lda #OpRTS
.9e16		20 cf d5	jsr $d5cf	                jsr cmpl_a
.9e19		24 1c		bit $1c		                bit status
.9e1b		10 26		bpl $9e43	                bpl _new_word   ; Bit 7 is clear = new word
.9e1d		ca		dex		                dex
.9e1e		ca		dex		                dex
.9e1f		ca		dex		                dex
.9e20		ca		dex		                dex
.9e21		b2 06		lda ($06)	                lda (workword)
.9e23		95 00		sta $00,x	                sta 0,x
.9e25		74 01		stz $01,x	                stz 1,x
.9e27		a5 06		lda $06		                lda workword
.9e29		18		clc		                clc
.9e2a		69 08		adc #$08	                adc #8
.9e2c		95 02		sta $02,x	                sta 2,x
.9e2e		a5 07		lda $07		                lda workword+1
.9e30		69 00		adc #$00	                adc #0                  ; only want carry
.9e32		95 03		sta $03,x	                sta 3,x
.9e34		a9 02		lda #$02	                lda #str_redefined       ; address of string "redefined"
.9e36		20 be d7	jsr $d7be	                jsr print_string_no_lf
.9e39		20 35 a3	jsr $a335	                jsr xt_type
.9e3c		20 82 9f	jsr $9f82	                jsr xt_space
.9e3f		a9 80		lda #$80	                lda #%10000000
.9e41		14 1c		trb $1c		                trb status
.9e43						_new_word:
.9e43		a5 06		lda $06		                lda workword
.9e45		85 02		sta $02		                sta dp
.9e47		a5 07		lda $07		                lda workword+1
.9e49		85 03		sta $03		                sta dp+1
.9e4b		20 dc d6	jsr $d6dc	                jsr dp_to_current       ; Save the updated DP to the
.9e4e						_semicolon_done:
.9e4e		64 1a		stz $1a		                stz state
.9e50		64 1b		stz $1b		                stz state+1
.9e52		60		rts		z_semicolon:    rts
.9e53						xt_sign:
.9e53		20 82 d7	jsr $d782	                jsr underflow_1
.9e56		b5 01		lda $01,x	                lda 1,x         ; check MSB of TOS
.9e58		30 04		bmi $9e5e	                bmi _minus
.9e5a		e8		inx		                inx
.9e5b		e8		inx		                inx
.9e5c		80 09		bra $9e67	                bra _done
.9e5e						_minus:
.9e5e		a9 2d		lda #$2d	                lda #'-'
.9e60		95 00		sta $00,x	                sta 0,x         ; overwrite TOS
.9e62		74 01		stz $01,x	                stz 1,x         ; paranoid
.9e64		20 f4 90	jsr $90f4	                jsr xt_hold
.9e67						_done:
.9e67		60		rts		z_sign:         rts
.9e68						xt_slash:
.9e68		a9 00		lda #$00	                lda #0
.9e6a		48		pha		                pha
.9e6b		80 03		bra $9e70	                bra slashmod_common
.9e6d						xt_slash_mod:
.9e6d		a9 ff		lda #$ff	                lda #$FF
.9e6f		48		pha		                pha             ; falls through to _common
.9e70						slashmod_common:
.9e70		20 a2 a1	jsr $a1a2	                jsr xt_to_r             ; >R
.9e73		20 23 9d	jsr $9d23	                jsr xt_s_to_d           ; S>D
.9e76		20 ba 99	jsr $99ba	                jsr xt_r_from           ; R>
.9e79		20 39 9f	jsr $9f39	                jsr xt_sm_slash_rem     ; SM/REM
.9e7c		68		pla		                pla
.9e7d		d0 05		bne $9e84	                bne _done
.9e7f		20 0c a0	jsr $a00c	                jsr xt_swap
.9e82		e8		inx		                inx             ; DROP
.9e83		e8		inx		                inx
.9e84						_done:
.9e84						z_slash_mod:
.9e84		60		rts		z_slash:        rts
.9e85						xt_slash_string:
.9e85		20 8c d7	jsr $d78c	                jsr underflow_3
.9e88		18		clc		                clc             ; 3OS+TOS
.9e89		b5 00		lda $00,x	                lda 0,x
.9e8b		75 04		adc $04,x	                adc 4,x
.9e8d		95 04		sta $04,x	                sta 4,x
.9e8f		b5 01		lda $01,x	                lda 1,x
.9e91		75 05		adc $05,x	                adc 5,x
.9e93		95 05		sta $05,x	                sta 5,x
.9e95		38		sec		                sec             ; NOS-TOS
.9e96		b5 02		lda $02,x	                lda 2,x
.9e98		f5 00		sbc $00,x	                sbc 0,x
.9e9a		95 02		sta $02,x	                sta 2,x
.9e9c		b5 03		lda $03,x	                lda 3,x
.9e9e		f5 01		sbc $01,x	                sbc 1,x
.9ea0		95 03		sta $03,x	                sta 3,x
.9ea2		e8		inx		                inx
.9ea3		e8		inx		                inx
.9ea4		60		rts		z_slash_string: rts
.9ea5						xt_sliteral:
.9ea5		20 87 d7	jsr $d787	                jsr underflow_2
.9ea8		20 c4 d5	jsr $d5c4	                jsr cmpl_jump
.9eab		8a		txa		                txa
.9eac		38		sec		                sec
.9ead		e9 06		sbc #$06	                sbc #6
.9eaf		aa		tax		                tax
.9eb0		b5 08		lda $08,x	                lda 8,x
.9eb2		95 04		sta $04,x	                sta 4,x
.9eb4		b5 09		lda $09,x	                lda 9,x
.9eb6		95 05		sta $05,x	                sta 5,x
.9eb8		b5 06		lda $06,x	                lda 6,x
.9eba		95 00		sta $00,x	                sta 0,x
.9ebc		b5 07		lda $07,x	                lda 7,x
.9ebe		95 01		sta $01,x	                sta 1,x
.9ec0		a5 00		lda $00		                lda cp
.9ec2		95 08		sta $08,x	                sta 8,x
.9ec4		95 02		sta $02,x	                sta 2,x
.9ec6		a5 01		lda $01		                lda cp+1
.9ec8		95 09		sta $09,x	                sta 9,x
.9eca		95 03		sta $03,x	                sta 3,x
.9ecc		20 f8 94	jsr $94f8	                jsr xt_move
.9ecf		18		clc		                clc
.9ed0		a5 00		lda $00		                lda cp
.9ed2		75 00		adc $00,x	                adc 0,x
.9ed4		85 00		sta $00		                sta cp
.9ed6		a5 01		lda $01		                lda cp+1
.9ed8		75 01		adc $01,x	                adc 1,x
.9eda		85 01		sta $01		                sta cp+1
.9edc		b5 02		lda $02,x	                lda 2,x
.9ede		38		sec		                sec
.9edf		e9 02		sbc #$02	                sbc #2
.9ee1		85 25		sta $25		                sta tmp1
.9ee3		b5 03		lda $03,x	                lda 3,x
.9ee5		e9 00		sbc #$00	                sbc #0          ; Propagate borrow
.9ee7		85 26		sta $26		                sta tmp1+1
.9ee9		a5 00		lda $00		                lda cp
.9eeb		92 25		sta ($25)	                sta (tmp1)
.9eed		a0 01		ldy #$01	                ldy #1
.9eef		a5 01		lda $01		                lda cp+1
.9ef1		91 25		sta ($25),y	                sta (tmp1),y
.9ef3						sliteral_const_str:
.9ef3		a0 9f		ldy #$9f	                ldy #>sliteral_runtime
.9ef5		a9 0d		lda #$0d	                lda #<sliteral_runtime
.9ef7		20 bf d5	jsr $d5bf	                jsr cmpl_subroutine
.9efa		b4 03		ldy $03,x	                ldy 3,x                ; address MSB
.9efc		b5 02		lda $02,x	                lda 2,x                ; address LSB
.9efe		20 cb d5	jsr $d5cb	                jsr cmpl_word
.9f01		b4 01		ldy $01,x	                ldy 1,x                ; length MSB
.9f03		b5 00		lda $00,x	                lda 0,x                ; length LSB
.9f05		20 cb d5	jsr $d5cb	                jsr cmpl_word
.9f08		e8		inx		                inx
.9f09		e8		inx		                inx
.9f0a		e8		inx		                inx
.9f0b		e8		inx		                inx
.9f0c		60		rts		z_sliteral:     rts
.9f0d						sliteral_runtime:
.9f0d		ca		dex		                dex
.9f0e		ca		dex		                dex
.9f0f		ca		dex		                dex
.9f10		ca		dex		                dex
.9f11		68		pla		                pla
.9f12		85 25		sta $25		                sta tmp1        ; LSB of address
.9f14		68		pla		                pla
.9f15		85 26		sta $26		                sta tmp1+1      ; MSB of address
.9f17		a0 01		ldy #$01	                ldy #1          ; adjust for JSR/RTS mechanics on 65c02
.9f19		b1 25		lda ($25),y	                lda (tmp1),y
.9f1b		95 02		sta $02,x	                sta 2,x         ; LSB of address
.9f1d		c8		iny		                iny
.9f1e		b1 25		lda ($25),y	                lda (tmp1),y
.9f20		95 03		sta $03,x	                sta 3,x         ; MSB of address
.9f22		c8		iny		                iny
.9f23		b1 25		lda ($25),y	                lda (tmp1),y
.9f25		95 00		sta $00,x	                sta 0,x         ; LSB of length
.9f27		c8		iny		                iny
.9f28		b1 25		lda ($25),y	                lda (tmp1),y
.9f2a		95 01		sta $01,x	                sta 1,x         ; MSB of length
.9f2c		18		clc		                clc
.9f2d		a5 25		lda $25		                lda tmp1
.9f2f		69 04		adc #$04	                adc #4
.9f31		a8		tay		                tay             ; LSB
.9f32		a5 26		lda $26		                lda tmp1+1
.9f34		69 00		adc #$00	                adc #0          ; we only need carry
.9f36		48		pha		                pha             ; MSB
.9f37		5a		phy		                phy
.9f38		60		rts		                rts
.9f39						xt_sm_slash_rem:
.9f39		20 8c d7	jsr $d78c	                jsr underflow_3 ; contains double number
.9f3c		b5 03		lda $03,x	                lda 3,x
.9f3e		48		pha		                pha
.9f3f		b5 01		lda $01,x	                lda 1,x
.9f41		55 03		eor $03,x	                eor 3,x
.9f43		48		pha		                pha
.9f44		20 d1 80	jsr $80d1	                jsr xt_abs
.9f47		e8		inx		                inx             ; pretend we pushed n1 to R
.9f48		e8		inx		                inx
.9f49		20 f7 89	jsr $89f7	                jsr xt_dabs
.9f4c		ca		dex		                dex
.9f4d		ca		dex		                dex
.9f4e		20 ec a3	jsr $a3ec	                jsr xt_um_slash_mod     ; UM/MOD
.9f51		68		pla		                pla
.9f52		10 03		bpl $9f57	                bpl +
.9f54		20 50 95	jsr $9550	                jsr xt_negate
.9f57						+
.9f57		68		pla		                pla
.9f58		10 07		bpl $9f61	                bpl _done
.9f5a		e8		inx		                inx             ; pretend we pushed quotient to R
.9f5b		e8		inx		                inx
.9f5c		20 50 95	jsr $9550	                jsr xt_negate
.9f5f		ca		dex		                dex
.9f60		ca		dex		                dex
.9f61						_done:
.9f61		60		rts		z_sm_slash_rem: rts
.9f62						xt_source:
.9f62		ca		dex		                dex
.9f63		ca		dex		                dex
.9f64		a5 0c		lda $0c		                lda cib
.9f66		95 00		sta $00,x	                sta 0,x
.9f68		a5 0d		lda $0d		                lda cib+1
.9f6a		95 01		sta $01,x	                sta 1,x
.9f6c		ca		dex		                dex
.9f6d		ca		dex		                dex
.9f6e		a5 0e		lda $0e		                lda ciblen
.9f70		95 00		sta $00,x	                sta 0,x
.9f72		a5 0f		lda $0f		                lda ciblen+1
.9f74		95 01		sta $01,x	                sta 1,x
.9f76		60		rts		z_source:       rts
.9f77						xt_source_id:
.9f77		ca		dex		                dex
.9f78		ca		dex		                dex
.9f79		a5 0a		lda $0a		                lda insrc
.9f7b		95 00		sta $00,x	                sta 0,x
.9f7d		a5 0b		lda $0b		                lda insrc+1
.9f7f		95 01		sta $01,x	                sta 1,x
.9f81		60		rts		z_source_id:    rts
.9f82						xt_space:
.9f82		a9 20		lda #$20	                lda #AscSP
.9f84		20 7b 8d	jsr $8d7b	                jsr emit_a
.9f87		60		rts		z_space:        rts
.9f88						xt_spaces:
.9f88		20 82 d7	jsr $d782	                jsr underflow_1
.9f8b		20 eb a5	jsr $a5eb	                jsr xt_zero
.9f8e		20 4e 94	jsr $944e	                jsr xt_max
.9f91		b5 00		lda $00,x	                lda 0,x
.9f93		15 01		ora $01,x	                ora 1,x
.9f95		f0 2a		beq $9fc1	                beq _done
.9f97		b4 01		ldy $01,x	                ldy 1,x
.9f99		d0 0c		bne $9fa7	                bne _lots_of_spaces
.9f9b		b4 00		ldy $00,x	                ldy 0,x
.9f9d						_quick_loop:
.9f9d		a9 20		lda #$20	                lda #AscSP
.9f9f		20 7b 8d	jsr $8d7b	                jsr emit_a
.9fa2		88		dey		                dey
.9fa3		f0 1c		beq $9fc1	                beq _done
.9fa5		80 f6		bra $9f9d	                bra _quick_loop
.9fa7						_lots_of_spaces:
.9fa7		b4 00		ldy $00,x	                ldy 0,x
.9fa9						_first_slow_loop:
.9fa9		f0 08		beq $9fb3	                beq _slow_outer_loop
.9fab		a9 20		lda #$20	                lda #AscSP
.9fad		20 7b 8d	jsr $8d7b	                jsr emit_a
.9fb0		88		dey		                dey
.9fb1		80 f6		bra $9fa9	                bra _first_slow_loop
.9fb3						_slow_outer_loop:
.9fb3		a0 00		ldy #$00	                ldy #00
.9fb5						_slow_inner_loop:
.9fb5		a9 20		lda #$20	                lda #AscSP
.9fb7		20 7b 8d	jsr $8d7b	                jsr emit_a
.9fba		88		dey		                dey
.9fbb		d0 f8		bne $9fb5	                bne _slow_inner_loop
.9fbd		d6 01		dec $01,x	                dec 1,x
.9fbf		d0 f2		bne $9fb3	                bne _slow_outer_loop
.9fc1						_done:
.9fc1		e8		inx		                inx             ; drop
.9fc2		e8		inx		                inx
.9fc3		60		rts		z_spaces:       rts
.9fc4						xt_star:
.9fc4		20 87 d7	jsr $d787	                jsr underflow_2
.9fc7		20 2e a4	jsr $a42e	                jsr xt_um_star
.9fca		e8		inx		                inx
.9fcb		e8		inx		                inx
.9fcc		60		rts		z_star:         rts
.9fcd						xt_star_slash:
.9fcd		20 d6 9f	jsr $9fd6	                jsr xt_star_slash_mod
.9fd0		20 0c a0	jsr $a00c	                jsr xt_swap
.9fd3		e8		inx		                inx
.9fd4		e8		inx		                inx
.9fd5						z_star_slash:
.9fd5		60		rts		                rts
.9fd6						xt_star_slash_mod:
.9fd6		20 8c d7	jsr $d78c	                jsr underflow_3
.9fd9		20 a2 a1	jsr $a1a2	                jsr xt_to_r
.9fdc		20 c4 93	jsr $93c4	                jsr xt_m_star
.9fdf		20 ba 99	jsr $99ba	                jsr xt_r_from
.9fe2		20 39 9f	jsr $9f39	                jsr xt_sm_slash_rem
.9fe5						z_star_slash_mod:
.9fe5		60		rts		                rts
.9fe6						xt_state:
.9fe6		ca		dex		                dex
.9fe7		ca		dex		                dex
.9fe8		a9 1a		lda #$1a	                lda #<state
.9fea		95 00		sta $00,x	                sta 0,x
.9fec		a9 00		lda #$00	                lda #>state
.9fee		95 01		sta $01,x	                sta 1,x
.9ff0		60		rts		z_state:        rts
.9ff1						xt_store:
.9ff1		20 87 d7	jsr $d787	                jsr underflow_2
.9ff4		b5 02		lda $02,x	                lda 2,x         ; LSB
.9ff6		81 00		sta ($00,x)	                sta (0,x)
.9ff8		f6 00		inc $00,x	                inc 0,x
.9ffa		d0 02		bne $9ffe	                bne +
.9ffc		f6 01		inc $01,x	                inc 1,x
.9ffe						+
.9ffe		b5 03		lda $03,x	                lda 3,x         ; MSB
.a000		81 00		sta ($00,x)	                sta (0,x)
.a002		e8		inx		                inx             ; 2DROP
.a003		e8		inx		                inx
.a004		e8		inx		                inx
.a005		e8		inx		                inx
.a006		60		rts		z_store:        rts
.a007						xt_strip_underflow:
.a007		a9 02		lda #$02	                lda #uf_strip_offset
.a009		4c 2c d6	jmp $d62c	                jmp push_upvar_tos
.a00c						z_strip_underflow:
.a00c						xt_swap:
.a00c		20 87 d7	jsr $d787	                jsr underflow_2
.a00f		b5 00		lda $00,x	                lda 0,x         ; LSB
.a011		b4 02		ldy $02,x	                ldy 2,x
.a013		95 02		sta $02,x	                sta 2,x
.a015		94 00		sty $00,x	                sty 0,x
.a017		b5 01		lda $01,x	                lda 1,x         ; MSB
.a019		b4 03		ldy $03,x	                ldy 3,x
.a01b		95 03		sta $03,x	                sta 3,x
.a01d		94 01		sty $01,x	                sty 1,x
.a01f		60		rts		z_swap:         rts
.a020						xt_thru:
.a020		20 87 d7	jsr $d787	                jsr underflow_2
.a023		b5 01		lda $01,x	                lda 1,x
.a025		48		pha		                pha
.a026		b5 00		lda $00,x	                lda 0,x
.a028		48		pha		                pha
.a029		e8		inx		                inx
.a02a		e8		inx		                inx
.a02b						_thru_loop:
.a02b		b5 01		lda $01,x	                lda 1,x
.a02d		48		pha		                pha
.a02e		b5 00		lda $00,x	                lda 0,x
.a030		48		pha		                pha
.a031		20 dc 92	jsr $92dc	                jsr xt_load
.a034		68		pla		                pla
.a035		85 25		sta $25		                sta tmp1
.a037		68		pla		                pla
.a038		85 26		sta $26		                sta tmp1+1
.a03a		68		pla		                pla
.a03b		85 27		sta $27		                sta tmp2
.a03d		68		pla		                pla
.a03e		85 28		sta $28		                sta tmp2+1
.a040		c5 26		cmp $26		                cmp tmp1+1
.a042		d0 08		bne $a04c	                bne _next_screen
.a044		a5 27		lda $27		                lda tmp2        ; Compare the LSB
.a046		c5 25		cmp $25		                cmp tmp1
.a048		d0 02		bne $a04c	                bne _next_screen
.a04a		80 18		bra $a064	                bra _done       ; We just did the last screen.
.a04c						_next_screen:
.a04c		a5 28		lda $28		                lda tmp2+1
.a04e		48		pha		                pha
.a04f		a5 27		lda $27		                lda tmp2
.a051		48		pha		                pha
.a052		e6 25		inc $25		                inc tmp1
.a054		d0 02		bne $a058	                bne +
.a056		e6 26		inc $26		                inc tmp1+1
.a058						+
.a058		ca		dex		                dex
.a059		ca		dex		                dex
.a05a		a5 25		lda $25		                lda tmp1
.a05c		95 00		sta $00,x	                sta 0,x
.a05e		a5 26		lda $26		                lda tmp1+1
.a060		95 01		sta $01,x	                sta 1,x
.a062		80 c7		bra $a02b	                bra _thru_loop
.a064						_done:
.a064		60		rts		z_thru:         rts
.a065						xt_tick:
.a065		20 09 98	jsr $9809	                jsr xt_parse_name       ; ( -- addr u )
.a068		b5 00		lda $00,x	                lda 0,x
.a06a		15 01		ora $01,x	                ora 1,x
.a06c		d0 05		bne $a073	                bne +
.a06e		a9 05		lda #$05	                lda #err_noname
.a070		4c 98 d7	jmp $d798	                jmp error
.a073						+
.a073		20 60 8f	jsr $8f60	                jsr xt_find_name        ; ( addr u -- nt )
.a076		b5 00		lda $00,x	                lda 0,x
.a078		15 01		ora $01,x	                ora 1,x
.a07a		d0 05		bne $a081	                bne +
.a07c		a9 08		lda #$08	                lda #err_syntax
.a07e		4c 98 d7	jmp $d798	                jmp error
.a081						+
.a081		20 17 95	jsr $9517	                jsr xt_name_to_int      ; ( nt -- xt )
.a084		60		rts		z_tick:         rts
.a085						xt_to:
.a085		20 65 a0	jsr $a065	                jsr xt_tick             ; ( [n] xt )
.a088		b5 00		lda $00,x	                lda 0,x                 ; LSB
.a08a		18		clc		                clc
.a08b		69 03		adc #$03	                adc #3
.a08d		85 25		sta $25		                sta tmp1
.a08f		b5 01		lda $01,x	                lda 1,x                 ; MSB
.a091		69 00		adc #$00	                adc #0                  ; we just want the carry
.a093		85 26		sta $26		                sta tmp1+1
.a095		a5 1a		lda $1a		                lda state
.a097		05 1b		ora $1b		                ora state+1
.a099		f0 14		beq $a0af	                beq _interpret
.a09b		a5 25		lda $25		                lda tmp1            ; replace TOS with tmp1
.a09d		95 00		sta $00,x	                sta 0,x
.a09f		a5 26		lda $26		                lda tmp1+1
.a0a1		95 01		sta $01,x	                sta 1,x
.a0a3		20 af 92	jsr $92af	                jsr xt_literal      ; generate the runtime for LITERAL tmp1
.a0a6		a0 9f		ldy #$9f	                ldy #>xt_store      ; write the runtime for !
.a0a8		a9 f1		lda #$f1	                lda #<xt_store
.a0aa		20 bf d5	jsr $d5bf	                jsr cmpl_subroutine
.a0ad		80 11		bra $a0c0	                bra _done
.a0af						_interpret:
.a0af		20 87 d7	jsr $d787	                jsr underflow_2
.a0b2		e8		inx		                inx
.a0b3		e8		inx		                inx                     ; leaving just ( n )
.a0b4		b5 00		lda $00,x	                lda 0,x
.a0b6		92 25		sta ($25)	                sta (tmp1)              ; LSB
.a0b8		a0 01		ldy #$01	                ldy #1
.a0ba		b5 01		lda $01,x	                lda 1,x                 ; MSB
.a0bc		91 25		sta ($25),y	                sta (tmp1),y            ; fall through to common
.a0be		e8		inx		                inx                     ; DROP
.a0bf		e8		inx		                inx
.a0c0						_done:
.a0c0		60		rts		z_to:           rts
.a0c1						xt_to_body:
.a0c1		20 82 d7	jsr $d782	                jsr underflow_1
.a0c4		20 07 8d	jsr $8d07	                jsr xt_dup              ; ( xt xt )
.a0c7		20 8e 91	jsr $918e	                jsr xt_int_to_name      ; ( xt nt )
.a0ca		f6 00		inc $00,x	                inc 0,x
.a0cc		d0 02		bne $a0d0	                bne +
.a0ce		f6 01		inc $01,x	                inc 1,x
.a0d0						+
.a0d0		a1 00		lda ($00,x)	                lda (0,x)               ; get status byte
.a0d2		29 20		and #$20	                and #HC
.a0d4		f0 0b		beq $a0e1	                beq _no_cfa
.a0d6		18		clc		                clc
.a0d7		b5 02		lda $02,x	                lda 2,x         ; LSB
.a0d9		69 03		adc #$03	                adc #3
.a0db		95 02		sta $02,x	                sta 2,x
.a0dd		90 02		bcc $a0e1	                bcc _no_cfa
.a0df		f6 03		inc $03,x	                inc 3,x         ; MSB
.a0e1						_no_cfa:
.a0e1		e8		inx		                inx             ; get rid of the nt
.a0e2		e8		inx		                inx
.a0e3						_done:
.a0e3		60		rts		z_to_body:      rts
.a0e4						xt_to_in:
.a0e4		ca		dex		                dex
.a0e5		ca		dex		                dex
.a0e6		a9 10		lda #$10	                lda #<toin
.a0e8		95 00		sta $00,x	                sta 0,x
.a0ea		a9 00		lda #$00	                lda #>toin      ; paranoid, should be zero
.a0ec		95 01		sta $01,x	                sta 1,x
.a0ee		60		rts		z_to_in:        rts
.a0ef						xt_to_number:
.a0ef		20 91 d7	jsr $d791	                jsr underflow_4
.a0f2		b5 06		lda $06,x	                lda 6,x         ; ud-lo LSB
.a0f4		85 2d		sta $2d		                sta scratch
.a0f6		b5 07		lda $07,x	                lda 7,x         ; ud-lo MSB
.a0f8		85 2e		sta $2e		                sta scratch+1
.a0fa		b5 04		lda $04,x	                lda 4,x         ; ud-hi LSB
.a0fc		85 2f		sta $2f		                sta scratch+2
.a0fe		b5 05		lda $05,x	                lda 5,x         ; ud-hi MSB
.a100		85 30		sta $30		                sta scratch+3
.a102		ca		dex		                dex
.a103		ca		dex		                dex
.a104						_loop:
.a104		a1 04		lda ($04,x)	                lda (4,x)
.a106		95 00		sta $00,x	                sta 0,x                 ; ( ud-lo ud-hi addr u char )
.a108		74 01		stz $01,x	                stz 1,x                 ; paranoid
.a10a		20 76 8a	jsr $8a76	                jsr xt_digit_question   ; ( char -- n -1 | char 0 )
.a10d		b5 00		lda $00,x	                lda 0,x
.a10f		d0 04		bne $a115	                bne _digit_ok
.a111		e8		inx		                inx
.a112		e8		inx		                inx
.a113		80 67		bra $a17c	                bra _done       ; ( ud-lo ud-hi addr u char )
.a115						_digit_ok:
.a115		b5 02		lda $02,x	                lda 2,x
.a117		85 31		sta $31		                sta scratch+4
.a119		b5 03		lda $03,x	                lda 3,x
.a11b		85 32		sta $32		                sta scratch+5
.a11d		a5 2f		lda $2f		                lda scratch+2
.a11f		95 02		sta $02,x	                sta 2,x         ; NOS
.a121		a5 30		lda $30		                lda scratch+3
.a123		95 03		sta $03,x	                sta 3,x
.a125		a5 18		lda $18		                lda base
.a127		95 00		sta $00,x	                sta 0,x         ; TOS
.a129		74 01		stz $01,x	                stz 1,x         ; now ( ud-lo ud-hi addr u ud-hi base)
.a12b		20 2e a4	jsr $a42e	                jsr xt_um_star  ; ( ud-lo ud-hi addr u ud-hi-lo ud-hi-hi )
.a12e		b5 02		lda $02,x	                lda 2,x         ; ud-hi-lo
.a130		85 33		sta $33		                sta scratch+6
.a132		b5 03		lda $03,x	                lda 3,x
.a134		85 34		sta $34		                sta scratch+7
.a136		a5 2d		lda $2d		                lda scratch
.a138		95 02		sta $02,x	                sta 2,x
.a13a		a5 2e		lda $2e		                lda scratch+1
.a13c		95 03		sta $03,x	                sta 3,x         ; ( ud-lo ud-hi addr u ud-lo ud-hi-hi )
.a13e		a5 18		lda $18		                lda base
.a140		95 00		sta $00,x	                sta 0,x
.a142		74 01		stz $01,x	                stz 1,x         ; ( ud-lo ud-hi addr u ud-lo base )
.a144		20 2e a4	jsr $a42e	                jsr xt_um_star  ; ( ud-lo ud-hi addr u ud-lo-lo ud-lo-hi )
.a147		b5 00		lda $00,x	                lda 0,x
.a149		85 2f		sta $2f		                sta scratch+2
.a14b		b5 01		lda $01,x	                lda 1,x
.a14d		85 30		sta $30		                sta scratch+3
.a14f		b5 02		lda $02,x	                lda 2,x
.a151		85 2d		sta $2d		                sta scratch
.a153		b5 03		lda $03,x	                lda 3,x
.a155		85 2e		sta $2e		                sta scratch+1
.a157		18		clc		                clc
.a158		a5 2d		lda $2d		                lda scratch     ; ud-lo LSB
.a15a		65 31		adc $31		                adc scratch+4   ; n LSB
.a15c		85 2d		sta $2d		                sta scratch     ; this is the new ud-lo
.a15e		a5 2e		lda $2e		                lda scratch+1   ; ud-lo MSB
.a160		65 32		adc $32		                adc scratch+5   ; n MSB
.a162		85 2e		sta $2e		                sta scratch+1
.a164		a5 2f		lda $2f		                lda scratch+2   ; LSB
.a166		65 33		adc $33		                adc scratch+6
.a168		85 2f		sta $2f		                sta scratch+2   ; this is the new ud-hi
.a16a		a5 30		lda $30		                lda scratch+3   ; MSB
.a16c		65 34		adc $34		                adc scratch+7
.a16e		85 30		sta $30		                sta scratch+3
.a170		e8		inx		                inx
.a171		e8		inx		                inx             ; ( ud-lo ud-hi addr u ud-lo-lo )
.a172		f6 04		inc $04,x	                inc 4,x
.a174		d0 02		bne $a178	                bne +
.a176		f6 05		inc $05,x	                inc 5,x
.a178						+
.a178		d6 02		dec $02,x	                dec 2,x
.a17a		d0 88		bne $a104	                bne _loop
.a17c						_done:
.a17c		e8		inx		                inx
.a17d		e8		inx		                inx             ; ( ud-lo ud-hi addr u )
.a17e		a5 2d		lda $2d		                lda scratch     ; new ud-lo
.a180		95 06		sta $06,x	                sta 6,x
.a182		a5 2e		lda $2e		                lda scratch+1
.a184		95 07		sta $07,x	                sta 7,x
.a186		a5 2f		lda $2f		                lda scratch+2
.a188		95 04		sta $04,x	                sta 4,x
.a18a		a5 30		lda $30		                lda scratch+3
.a18c		95 05		sta $05,x	                sta 5,x
.a18e		60		rts		z_to_number:    rts
.a18f						xt_to_order:
.a18f		20 a2 a1	jsr $a1a2	                jsr xt_to_r
.a192		20 51 90	jsr $9051	                jsr xt_get_order
.a195		20 ba 99	jsr $99ba	                jsr xt_r_from
.a198		20 0c a0	jsr $a00c	                jsr xt_swap
.a19b		20 47 97	jsr $9747	                jsr xt_one_plus
.a19e		20 cf 9b	jsr $9bcf	                jsr xt_set_order
.a1a1		60		rts		z_to_order:     rts
.a1a2						xt_to_r:
.a1a2		68		pla		                pla             ; LSB
.a1a3		85 23		sta $23		                sta tmptos
.a1a5		7a		ply		                ply             ; MSB
.a1a6		20 82 d7	jsr $d782	                jsr underflow_1
.a1a9		b5 01		lda $01,x	                lda 1,x         ; MSB
.a1ab		48		pha		                pha
.a1ac		b5 00		lda $00,x	                lda 0,x         ; LSB
.a1ae		48		pha		                pha
.a1af		e8		inx		                inx
.a1b0		e8		inx		                inx
.a1b1		5a		phy		                phy             ; MSB
.a1b2		a5 23		lda $23		                lda tmptos
.a1b4		48		pha		                pha             ; LSB
.a1b5		60		rts		z_to_r:         rts
.a1b6						xt_true:
.a1b6		ca		dex		                dex
.a1b7		ca		dex		                dex
.a1b8		a9 ff		lda #$ff	                lda #$FF
.a1ba		95 00		sta $00,x	                sta 0,x
.a1bc		95 01		sta $01,x	                sta 1,x
.a1be		60		rts		z_true:         rts
.a1bf						xt_tuck:
.a1bf		20 87 d7	jsr $d787	                jsr underflow_2
.a1c2		ca		dex		                dex
.a1c3		ca		dex		                dex
.a1c4		b4 04		ldy $04,x	                ldy 4,x         ; LSB
.a1c6		b5 02		lda $02,x	                lda 2,x
.a1c8		95 04		sta $04,x	                sta 4,x
.a1ca		94 02		sty $02,x	                sty 2,x
.a1cc		95 00		sta $00,x	                sta 0,x
.a1ce		b4 05		ldy $05,x	                ldy 5,x         ; MSB
.a1d0		b5 03		lda $03,x	                lda 3,x
.a1d2		95 05		sta $05,x	                sta 5,x
.a1d4		94 03		sty $03,x	                sty 3,x         ; bba
.a1d6		95 01		sta $01,x	                sta 1,x         ; baa
.a1d8		60		rts		z_tuck:         rts
.a1d9						xt_assembler_wordlist:
.a1d9						xt_two:
.a1d9		ca		dex		                dex
.a1da		ca		dex		                dex
.a1db		a9 02		lda #$02	                lda #2
.a1dd		95 00		sta $00,x	                sta 0,x
.a1df		74 01		stz $01,x	                stz 1,x
.a1e1						z_assembler_wordlist:
.a1e1		60		rts		z_two:          rts
.a1e2						xt_two_drop:
.a1e2		20 87 d7	jsr $d787	                jsr underflow_2
.a1e5		e8		inx		                inx
.a1e6		e8		inx		                inx
.a1e7		e8		inx		                inx
.a1e8		e8		inx		                inx
.a1e9		60		rts		z_two_drop:     rts
.a1ea						xt_two_dup:
.a1ea		20 87 d7	jsr $d787	                jsr underflow_2
.a1ed		ca		dex		                dex
.a1ee		ca		dex		                dex
.a1ef		ca		dex		                dex
.a1f0		ca		dex		                dex
.a1f1		b5 04		lda $04,x	                lda 4,x         ; TOS
.a1f3		95 00		sta $00,x	                sta 0,x
.a1f5		b5 05		lda $05,x	                lda 5,x
.a1f7		95 01		sta $01,x	                sta 1,x
.a1f9		b5 06		lda $06,x	                lda 6,x         ; NOS
.a1fb		95 02		sta $02,x	                sta 2,x
.a1fd		b5 07		lda $07,x	                lda 7,x
.a1ff		95 03		sta $03,x	                sta 3,x
.a201		60		rts		z_two_dup:      rts
.a202						xt_two_fetch:
.a202		20 82 d7	jsr $d782	                jsr underflow_1
.a205		b5 00		lda $00,x	                lda 0,x
.a207		85 25		sta $25		                sta tmp1
.a209		b4 01		ldy $01,x	                ldy 1,x
.a20b		84 26		sty $26		                sty tmp1+1
.a20d		ca		dex		                dex             ; reuse one stack element
.a20e		ca		dex		                dex
.a20f		b2 25		lda ($25)	                lda (tmp1)      ; copy LSB
.a211		95 00		sta $00,x	                sta 0,x
.a213		a0 01		ldy #$01	                ldy #1          ; copy next
.a215		b1 25		lda ($25),y	                lda (tmp1),y
.a217		95 01		sta $01,x	                sta 1,x
.a219		c8		iny		                iny             ; copy next
.a21a		b1 25		lda ($25),y	                lda (tmp1),y
.a21c		95 02		sta $02,x	                sta 2,x
.a21e		c8		iny		                iny             ; copy next
.a21f		b1 25		lda ($25),y	                lda (tmp1),y
.a221		95 03		sta $03,x	                sta 3,x
.a223		60		rts		z_two_fetch:    rts
.a224						xt_two_over:
.a224		20 91 d7	jsr $d791	                jsr underflow_4
.a227		ca		dex		                dex
.a228		ca		dex		                dex
.a229		ca		dex		                dex
.a22a		ca		dex		                dex
.a22b		b5 08		lda $08,x	                lda 8,x
.a22d		95 00		sta $00,x	                sta 0,x
.a22f		b5 09		lda $09,x	                lda 9,x
.a231		95 01		sta $01,x	                sta 1,x
.a233		b5 0a		lda $0a,x	                lda 10,x
.a235		95 02		sta $02,x	                sta 2,x
.a237		b5 0b		lda $0b,x	                lda 11,x
.a239		95 03		sta $03,x	                sta 3,x
.a23b		60		rts		z_two_over:     rts
.a23c						xt_two_r_fetch:
.a23c		ca		dex		                dex
.a23d		ca		dex		                dex
.a23e		ca		dex		                dex
.a23f		ca		dex		                dex
.a240		8a		txa		                txa
.a241		ba		tsx		                tsx
.a242		da		phx		                phx             ; 65c02 has no TXY, so do it the hard way
.a243		7a		ply		                ply
.a244		aa		tax		                tax
.a245		b9 03 01	lda $0103,y	                lda $0103,y     ; LSB of top entry
.a248		95 00		sta $00,x	                sta 0,x
.a24a		b9 04 01	lda $0104,y	                lda $0104,y     ; MSB of top entry
.a24d		95 01		sta $01,x	                sta 1,x
.a24f		b9 05 01	lda $0105,y	                lda $0105,y     ; LSB of bottom entry
.a252		95 02		sta $02,x	                sta 2,x
.a254		b9 06 01	lda $0106,y	                lda $0106,y     ; MSB of top entry
.a257		95 03		sta $03,x	                sta 3,x
.a259		60		rts		z_two_r_fetch:  rts
.a25a						xt_two_r_from:
.a25a		68		pla		                pla                     ; LSB
.a25b		85 25		sta $25		                sta tmp1
.a25d		68		pla		                pla                     ; MSB
.a25e		85 26		sta $26		                sta tmp1+1
.a260		ca		dex		                dex
.a261		ca		dex		                dex
.a262		ca		dex		                dex
.a263		ca		dex		                dex
.a264		68		pla		                pla                     ; LSB
.a265		95 00		sta $00,x	                sta 0,x
.a267		68		pla		                pla                     ; MSB
.a268		95 01		sta $01,x	                sta 1,x
.a26a		68		pla		                pla                     ; LSB
.a26b		95 02		sta $02,x	                sta 2,x
.a26d		68		pla		                pla                     ; MSB
.a26e		95 03		sta $03,x	                sta 3,x
.a270		a5 26		lda $26		                lda tmp1+1              ; MSB
.a272		48		pha		                pha
.a273		a5 25		lda $25		                lda tmp1                ; LSB
.a275		48		pha		                pha
.a276		60		rts		z_two_r_from:   rts
.a277						xt_two_slash:
.a277		20 82 d7	jsr $d782	                jsr underflow_1
.a27a		b5 01		lda $01,x	                lda 1,x
.a27c		0a		asl a		                asl                     ; save the sign
.a27d		76 01		ror $01,x	                ror 1,x
.a27f		76 00		ror $00,x	                ror 0,x
.a281		60		rts		z_two_slash:    rts
.a282						xt_two_star:
.a282						xt_cells:
.a282		20 82 d7	jsr $d782	                jsr underflow_1
.a285		16 00		asl $00,x	                asl 0,x
.a287		36 01		rol $01,x	                rol 1,x
.a289						z_cells:
.a289		60		rts		z_two_star:     rts
.a28a						xt_two_store:
.a28a		20 8c d7	jsr $d78c	                jsr underflow_3
.a28d		b5 00		lda $00,x	                lda 0,x
.a28f		85 25		sta $25		                sta tmp1
.a291		b4 01		ldy $01,x	                ldy 1,x
.a293		84 26		sty $26		                sty tmp1+1
.a295		e8		inx		                inx
.a296		e8		inx		                inx
.a297		b5 00		lda $00,x	                lda 0,x         ; copy MSB
.a299		92 25		sta ($25)	                sta (tmp1)
.a29b		b5 01		lda $01,x	                lda 1,x         ; copy next
.a29d		a0 01		ldy #$01	                ldy #1
.a29f		91 25		sta ($25),y	                sta (tmp1),y
.a2a1		b5 02		lda $02,x	                lda 2,x         ; copy next
.a2a3		c8		iny		                iny
.a2a4		91 25		sta ($25),y	                sta (tmp1),y
.a2a6		b5 03		lda $03,x	                lda 3,x         ; copy MSB
.a2a8		c8		iny		                iny
.a2a9		91 25		sta ($25),y	                sta (tmp1),y
.a2ab		e8		inx		                inx             ; 2DROP
.a2ac		e8		inx		                inx
.a2ad		e8		inx		                inx
.a2ae		e8		inx		                inx
.a2af		60		rts		z_two_store:    rts
.a2b0						xt_two_swap:
.a2b0		20 91 d7	jsr $d791	                jsr underflow_4
.a2b3		b5 00		lda $00,x	                lda 0,x
.a2b5		b4 04		ldy $04,x	                ldy 4,x
.a2b7		95 04		sta $04,x	                sta 4,x
.a2b9		94 00		sty $00,x	                sty 0,x
.a2bb		b5 01		lda $01,x	                lda 1,x
.a2bd		b4 05		ldy $05,x	                ldy 5,x
.a2bf		95 05		sta $05,x	                sta 5,x
.a2c1		94 01		sty $01,x	                sty 1,x
.a2c3		b5 02		lda $02,x	                lda 2,x
.a2c5		b4 06		ldy $06,x	                ldy 6,x
.a2c7		95 06		sta $06,x	                sta 6,x
.a2c9		94 02		sty $02,x	                sty 2,x
.a2cb		b5 03		lda $03,x	                lda 3,x
.a2cd		b4 07		ldy $07,x	                ldy 7,x
.a2cf		95 07		sta $07,x	                sta 7,x
.a2d1		94 03		sty $03,x	                sty 3,x
.a2d3		60		rts		z_two_swap:     rts
.a2d4						xt_two_to_r:
.a2d4		68		pla		                pla             ; LSB
.a2d5		85 25		sta $25		                sta tmp1
.a2d7		68		pla		                pla             ; MSB
.a2d8		85 26		sta $26		                sta tmp1+1
.a2da		20 87 d7	jsr $d787	                jsr underflow_2
.a2dd		b5 03		lda $03,x	                lda 3,x         ; MSB
.a2df		48		pha		                pha
.a2e0		b5 02		lda $02,x	                lda 2,x         ; LSB
.a2e2		48		pha		                pha
.a2e3		b5 01		lda $01,x	                lda 1,x         ; MSB
.a2e5		48		pha		                pha
.a2e6		b5 00		lda $00,x	                lda 0,x         ; LSB
.a2e8		48		pha		                pha
.a2e9		e8		inx		                inx
.a2ea		e8		inx		                inx
.a2eb		e8		inx		                inx
.a2ec		e8		inx		                inx
.a2ed		a5 26		lda $26		                lda tmp1+1      ; MSB
.a2ef		48		pha		                pha
.a2f0		a5 25		lda $25		                lda tmp1        ; LSB
.a2f2		48		pha		                pha
.a2f3		60		rts		z_two_to_r:     rts
.a2f4						xt_two_constant:
.a2f4		20 87 d7	jsr $d787	                jsr underflow_2
.a2f7		20 db 88	jsr $88db	                jsr xt_create
.a2fa		20 0c a0	jsr $a00c	                jsr xt_swap
.a2fd		20 de 86	jsr $86de	                jsr xt_comma
.a300		20 de 86	jsr $86de	                jsr xt_comma
.a303		20 5c 8b	jsr $8b5c	                jsr does_runtime    ; does> turns into these two routines.
.a306		20 05 d6	jsr $d605	                jsr dodoes
.a309		20 07 8d	jsr $8d07	                jsr xt_dup
.a30c		20 05 8f	jsr $8f05	                jsr xt_fetch
.a30f		20 0c a0	jsr $a00c	                jsr xt_swap
.a312		20 91 85	jsr $8591	                jsr xt_cell_plus
.a315		20 05 8f	jsr $8f05	                jsr xt_fetch
.a318		60		rts		z_two_constant: rts
.a319						xt_two_literal:
.a319		20 87 d7	jsr $d787	                jsr underflow_2 ; double number
.a31c		20 0c a0	jsr $a00c	                jsr xt_swap
.a31f		20 af 92	jsr $92af	                jsr xt_literal
.a322		20 af 92	jsr $92af	                jsr xt_literal
.a325		60		rts		z_two_literal:  rts
.a326						xt_two_variable:
.a326		20 db 88	jsr $88db	                jsr xt_create
.a329		ca		dex		                dex
.a32a		ca		dex		                dex
.a32b		a9 04		lda #$04	                lda #4
.a32d		95 00		sta $00,x	                sta 0,x
.a32f		74 01		stz $01,x	                stz 1,x
.a331		20 30 82	jsr $8230	                jsr xt_allot
.a334		60		rts		z_two_variable: rts
.a335						xt_type:
.a335		20 87 d7	jsr $d787	                jsr underflow_2
.a338		b5 02		lda $02,x	                lda 2,x
.a33a		85 25		sta $25		                sta tmp1
.a33c		b5 03		lda $03,x	                lda 3,x
.a33e		85 26		sta $26		                sta tmp1+1
.a340						_loop:
.a340		b5 00		lda $00,x	                lda 0,x
.a342		15 01		ora $01,x	                ora 1,x
.a344		f0 15		beq $a35b	                beq _done
.a346		b2 25		lda ($25)	                lda (tmp1)
.a348		20 7b 8d	jsr $8d7b	                jsr emit_a      ; avoids stack foolery
.a34b		e6 25		inc $25		                inc tmp1
.a34d		d0 02		bne $a351	                bne +
.a34f		e6 26		inc $26		                inc tmp1+1
.a351						+
.a351		b5 00		lda $00,x	                lda 0,x
.a353		d0 02		bne $a357	                bne +
.a355		d6 01		dec $01,x	                dec 1,x
.a357						+
.a357		d6 00		dec $00,x	                dec 0,x
.a359		80 e5		bra $a340	                bra _loop
.a35b						_done:
.a35b		e8		inx		                inx
.a35c		e8		inx		                inx
.a35d		e8		inx		                inx
.a35e		e8		inx		                inx
.a35f		60		rts		z_type:         rts
.a360						xt_u_dot:
.a360		20 82 d7	jsr $d782	                jsr underflow_1
.a363		20 ef d7	jsr $d7ef	                jsr print_u
.a366		a9 20		lda #$20	                lda #AscSP
.a368		20 7b 8d	jsr $8d7b	                jsr emit_a
.a36b		60		rts		z_u_dot:        rts
.a36c						xt_u_dot_r:
.a36c		20 87 d7	jsr $d787	                jsr underflow_2
.a36f		20 a2 a1	jsr $a1a2	                jsr xt_to_r
.a372		20 eb a5	jsr $a5eb	                jsr xt_zero
.a375		20 7f 92	jsr $927f	                jsr xt_less_number_sign
.a378		20 08 97	jsr $9708	                jsr xt_number_sign_s
.a37b		20 e6 96	jsr $96e6	                jsr xt_number_sign_greater
.a37e		20 ba 99	jsr $99ba	                jsr xt_r_from
.a381		20 bd 97	jsr $97bd	                jsr xt_over
.a384		20 86 94	jsr $9486	                jsr xt_minus
.a387		20 88 9f	jsr $9f88	                jsr xt_spaces
.a38a		20 35 a3	jsr $a335	                jsr xt_type
.a38d		60		rts		z_u_dot_r:      rts
.a38e						xt_u_greater_than:
.a38e		20 87 d7	jsr $d787	                jsr underflow_2
.a391		b5 00		lda $00,x	                lda 0,x
.a393		d5 02		cmp $02,x	                cmp 2,x
.a395		b5 01		lda $01,x	                lda 1,x
.a397		f5 03		sbc $03,x	                sbc 3,x
.a399		e8		inx		                inx
.a39a		e8		inx		                inx
.a39b		a9 00		lda #$00	                lda #0
.a39d		69 ff		adc #$ff	                adc #$FF
.a39f		95 00		sta $00,x	                sta 0,x         ; store flag
.a3a1		95 01		sta $01,x	                sta 1,x
.a3a3		60		rts		z_u_greater_than:    rts
.a3a4						xt_u_less_than:
.a3a4		20 87 d7	jsr $d787	                jsr underflow_2
.a3a7		b5 02		lda $02,x	                lda 2,x
.a3a9		d5 00		cmp $00,x	                cmp 0,x
.a3ab		b5 03		lda $03,x	                lda 3,x
.a3ad		f5 01		sbc $01,x	                sbc 1,x
.a3af		e8		inx		                inx
.a3b0		e8		inx		                inx
.a3b1		a9 00		lda #$00	                lda #0
.a3b3		69 ff		adc #$ff	                adc #$FF
.a3b5		95 00		sta $00,x	                sta 0,x         ; store flag
.a3b7		95 01		sta $01,x	                sta 1,x
.a3b9		60		rts		z_u_less_than:    rts
.a3ba						xt_ud_dot:
.a3ba		20 87 d7	jsr $d787	                jsr underflow_2 ; double number
.a3bd		20 7f 92	jsr $927f	                jsr xt_less_number_sign
.a3c0		20 08 97	jsr $9708	                jsr xt_number_sign_s
.a3c3		20 e6 96	jsr $96e6	                jsr xt_number_sign_greater
.a3c6		20 35 a3	jsr $a335	                jsr xt_type
.a3c9		20 82 9f	jsr $9f82	                jsr xt_space
.a3cc		60		rts		z_ud_dot:        rts
.a3cd						xt_ud_dot_r:
.a3cd		20 8c d7	jsr $d78c	                jsr underflow_3
.a3d0		20 a2 a1	jsr $a1a2	                jsr xt_to_r
.a3d3		20 7f 92	jsr $927f	                jsr xt_less_number_sign
.a3d6		20 08 97	jsr $9708	                jsr xt_number_sign_s
.a3d9		20 e6 96	jsr $96e6	                jsr xt_number_sign_greater
.a3dc		20 ba 99	jsr $99ba	                jsr xt_r_from
.a3df		20 bd 97	jsr $97bd	                jsr xt_over
.a3e2		20 86 94	jsr $9486	                jsr xt_minus
.a3e5		20 88 9f	jsr $9f88	                jsr xt_spaces
.a3e8		20 35 a3	jsr $a335	                jsr xt_type
.a3eb		60		rts		z_ud_dot_r:      rts
.a3ec						xt_um_slash_mod:
.a3ec		20 8c d7	jsr $d78c	                jsr underflow_3
.a3ef		b5 00		lda $00,x	                lda 0,x
.a3f1		15 01		ora $01,x	                ora 1,x
.a3f3		d0 05		bne $a3fa	                bne _not_zero
.a3f5		a9 04		lda #$04	                lda #err_divzero
.a3f7		4c 98 d7	jmp $d798	                jmp error
.a3fa						_not_zero:
.a3fa		a9 11		lda #$11	                lda #17
.a3fc		85 23		sta $23		                sta tmptos
.a3fe						_loop:
.a3fe		36 04		rol $04,x	                rol 4,x
.a400		36 05		rol $05,x	                rol 5,x
.a402		c6 23		dec $23		                dec tmptos
.a404		f0 22		beq $a428	                beq _done
.a406		36 02		rol $02,x	                rol 2,x
.a408		36 03		rol $03,x	                rol 3,x
.a40a		64 25		stz $25		                stz tmp1        ; store the bit we got from hi cell (MSB)
.a40c		26 25		rol $25		                rol tmp1
.a40e		38		sec		                sec
.a40f		b5 02		lda $02,x	                lda 2,x
.a411		f5 00		sbc $00,x	                sbc 0,x
.a413		85 26		sta $26		                sta tmp1+1
.a415		b5 03		lda $03,x	                lda 3,x
.a417		f5 01		sbc $01,x	                sbc 1,x
.a419		a8		tay		                tay
.a41a		a5 25		lda $25		                lda tmp1
.a41c		e9 00		sbc #$00	                sbc #0
.a41e		90 de		bcc $a3fe	                bcc _loop
.a420		a5 26		lda $26		                lda tmp1+1
.a422		95 02		sta $02,x	                sta 2,x
.a424		94 03		sty $03,x	                sty 3,x         ; used as temp storage
.a426		80 d6		bra $a3fe	                bra _loop
.a428						_done:
.a428		e8		inx		                inx
.a429		e8		inx		                inx
.a42a		20 0c a0	jsr $a00c	                jsr xt_swap
.a42d		60		rts		z_um_slash_mod: rts
.a42e						xt_um_star:
.a42e		20 87 d7	jsr $d787	                jsr underflow_2
.a431		18		clc		                clc
.a432		b5 00		lda $00,x	                lda 0,x         ; copy TOS to tmp2
.a434		e9 00		sbc #$00	                sbc #0
.a436		85 27		sta $27		                sta tmp2
.a438		b5 01		lda $01,x	                lda 1,x
.a43a		e9 00		sbc #$00	                sbc #0
.a43c		90 31		bcc $a46f	                bcc _zero       ; is TOS zero?
.a43e		85 28		sta $28		                sta tmp2+1
.a440		a9 00		lda #$00	                lda #0
.a442		85 25		sta $25		                sta tmp1
.a444		86 29		stx $29		                stx tmp3        ; tested for exit from outer loop
.a446		ca		dex		                dex
.a447		ca		dex		                dex
.a448						_outer_loop:
.a448		a0 08		ldy #$08	                ldy #8          ; counter inner loop
.a44a		56 04		lsr $04,x	                lsr 4,x         ; think "2,x" then later "3,x"
.a44c						_inner_loop:
.a44c		90 0c		bcc $a45a	                bcc _no_add
.a44e		85 26		sta $26		                sta tmp1+1      ; save time, don't CLC
.a450		a5 25		lda $25		                lda tmp1
.a452		65 27		adc $27		                adc tmp2
.a454		85 25		sta $25		                sta tmp1
.a456		a5 26		lda $26		                lda tmp1+1
.a458		65 28		adc $28		                adc tmp2+1
.a45a						_no_add:
.a45a		6a		ror a		                ror
.a45b		66 25		ror $25		                ror tmp1
.a45d		76 04		ror $04,x	                ror 4,x         ; think "2,x" then later "3,x"
.a45f		88		dey		                dey
.a460		d0 ea		bne $a44c	                bne _inner_loop ; go back for one more shift?
.a462		e8		inx		                inx
.a463		e4 29		cpx $29		                cpx tmp3
.a465		d0 e1		bne $a448	                bne _outer_loop ; go back for eight more shifts?
.a467		95 01		sta $01,x	                sta 1,x
.a469		a5 25		lda $25		                lda tmp1
.a46b		95 00		sta $00,x	                sta 0,x
.a46d		80 04		bra $a473	                bra _done
.a46f						_zero:
.a46f		74 02		stz $02,x	                stz 2,x
.a471		74 03		stz $03,x	                stz 3,x
.a473						_done:
.a473		60		rts		z_um_star:      rts
.a474						xt_unloop:
.a474		a4 1f		ldy $1f		                ldy loopctrl
.a476		88		dey		                dey
.a477		88		dey		                dey
.a478		88		dey		                dey
.a479		88		dey		                dey
.a47a		84 1f		sty $1f		                sty loopctrl
.a47c		30 05		bmi $a483	                bmi z_unloop            ; no active loops?
.a47e		b9 00 01	lda $0100,y	                lda loopindex,y         ; else re-cache the LSB of loopindex
.a481		85 20		sta $20		                sta loopidx0
.a483		60		rts		z_unloop:       rts
.a484						xt_until:
.a484		a0 00		ldy #$00	                ldy #0
.a486						-
.a486		b9 2c 91	lda $912c,y	                lda zero_test_runtime,y
.a489		c9 60		cmp #$60	                cmp #OpRTS
.a48b		f0 03		beq $a490	                beq +
.a48d		20 cf d5	jsr $d5cf	                jsr cmpl_a
.a490						+
.a490		c8		iny		                iny
.a491		c0 0a		cpy #$0a	                cpy #(zero_test_footer_end - zero_test_runtime)
.a493		d0 f1		bne $a486	                bne -
.a495		20 de 86	jsr $86de	                jsr xt_comma
.a498		60		rts		z_until:        rts
.a499						xt_unused:
.a499		ca		dex		                dex
.a49a		ca		dex		                dex
.a49b		a9 00		lda #$00	                lda #<cp_end
.a49d		38		sec		                sec
.a49e		e5 00		sbc $00		                sbc cp
.a4a0		95 00		sta $00,x	                sta 0,x
.a4a2		a9 7c		lda #$7c	                lda #>cp_end
.a4a4		e5 01		sbc $01		                sbc cp+1
.a4a6		95 01		sta $01,x	                sta 1,x
.a4a8		60		rts		z_unused:       rts
.a4a9						xt_update:
.a4a9		a0 30		ldy #$30	                ldy #buffstatus_offset
.a4ab		b1 08		lda ($08),y	                lda (up),y
.a4ad		09 02		ora #$02	                ora #2          ; Turn on dirty flag (bit 2)
.a4af		91 08		sta ($08),y	                sta (up),y
.a4b1		60		rts		z_update:       rts
.a4b2						xt_useraddr:
.a4b2		ca		dex		                dex
.a4b3		ca		dex		                dex
.a4b4		a9 08		lda #$08	                lda #<up
.a4b6		95 00		sta $00,x	                sta 0,x
.a4b8		a9 00		lda #$00	                lda #>up
.a4ba		95 01		sta $01,x	                sta 1,x
.a4bc		60		rts		z_useraddr:     rts
.a4bd						xt_variable:
.a4bd		20 db 88	jsr $88db	                jsr xt_create
.a4c0		a9 00		lda #$00	                lda #0
.a4c2		92 00		sta ($00)	                sta (cp)
.a4c4		e6 00		inc $00		                inc cp
.a4c6		d0 02		bne $a4ca	                bne +
.a4c8		e6 01		inc $01		                inc cp+1
.a4ca						+
.a4ca		92 00		sta ($00)	                sta (cp)
.a4cc		e6 00		inc $00		                inc cp
.a4ce		d0 02		bne $a4d2	                bne +
.a4d0		e6 01		inc $01		                inc cp+1
.a4d2						+
.a4d2		20 a3 88	jsr $88a3	                jsr adjust_z
.a4d5		60		rts		z_variable:     rts
.a4d6						xt_while:
.a4d6		a0 91		ldy #$91	                ldy #>zero_branch_runtime
.a4d8		a9 36		lda #$36	                lda #<zero_branch_runtime
.a4da		20 bf d5	jsr $d5bf	                jsr cmpl_subroutine
.a4dd		20 8f 90	jsr $908f	                jsr xt_here
.a4e0		a9 ff		lda #$ff	                lda #$FF
.a4e2		a8		tay		                tay
.a4e3		20 cb d5	jsr $d5cb	                jsr cmpl_word
.a4e6		20 0c a0	jsr $a00c	                jsr xt_swap
.a4e9		60		rts		z_while:        rts
.a4ea						xt_within:
.a4ea		20 8c d7	jsr $d78c	                jsr underflow_3
.a4ed		20 bd 97	jsr $97bd	                jsr xt_over
.a4f0		20 86 94	jsr $9486	                jsr xt_minus
.a4f3		20 a2 a1	jsr $a1a2	                jsr xt_to_r
.a4f6		20 86 94	jsr $9486	                jsr xt_minus
.a4f9		20 ba 99	jsr $99ba	                jsr xt_r_from
.a4fc		20 a4 a3	jsr $a3a4	                jsr xt_u_less_than
.a4ff		60		rts		z_within:       rts
.a500						xt_word:
.a500		20 82 d7	jsr $d782	                jsr underflow_1
.a503		a4 10		ldy $10		                ldy toin                ; >IN
.a505						_loop:
.a505		c4 0e		cpy $0e		                cpy ciblen              ; quit if end of input
.a507		f0 09		beq $a512	                beq _found_char
.a509		b1 0c		lda ($0c),y	                lda (cib),y
.a50b		d5 00		cmp $00,x	                cmp 0,x                 ; ASCII of delimiter
.a50d		d0 03		bne $a512	                bne _found_char
.a50f		c8		iny		                iny
.a510		80 f3		bra $a505	                bra _loop
.a512						_found_char:
.a512		84 10		sty $10		                sty toin
.a514		20 64 98	jsr $9864	                jsr xt_parse            ; Returns ( addr u )
.a517		b5 00		lda $00,x	                lda 0,x
.a519		92 00		sta ($00)	                sta (cp)                ; Save length of string
.a51b		48		pha		                pha                     ; Keep copy of length for later
.a51c		20 07 8d	jsr $8d07	                jsr xt_dup              ; ( addr u u )
.a51f		a5 00		lda $00		                lda cp
.a521		18		clc		                clc
.a522		69 01		adc #$01	                adc #1
.a524		95 02		sta $02,x	                sta 2,x                 ; LSB of CP
.a526		a5 01		lda $01		                lda cp+1
.a528		69 00		adc #$00	                adc #0
.a52a		95 03		sta $03,x	                sta 3,x                 ; ( addr cp+1 u )
.a52c		20 f8 94	jsr $94f8	                jsr xt_move
.a52f		ca		dex		                dex
.a530		ca		dex		                dex
.a531		a5 00		lda $00		                lda cp
.a533		95 00		sta $00,x	                sta 0,x
.a535		a5 01		lda $01		                lda cp+1
.a537		95 01		sta $01,x	                sta 1,x
.a539		68		pla		                pla                     ; length of string
.a53a		18		clc		                clc
.a53b		65 00		adc $00		                adc cp
.a53d		85 00		sta $00		                sta cp
.a53f		90 02		bcc $a543	                bcc z_word
.a541		e6 01		inc $01		                inc cp+1
.a543		60		rts		z_word:         rts
.a544						xt_wordlist:
.a544		a0 09		ldy #$09	                ldy #num_wordlists_offset
.a546		b1 08		lda ($08),y	                lda (up),y      ; This is a byte variable, so only
.a548		c9 0c		cmp #$0c	                cmp #max_wordlists
.a54a		d0 05		bne $a551	                bne _ok
.a54c		a9 0b		lda #$0b	                lda #err_wordlist
.a54e		4c 98 d7	jmp $d798	                jmp error
.a551						_ok:
.a551		1a		inc a		                ina             ; Increment the wordlist#
.a552		91 08		sta ($08),y	                sta (up),y      ; Save it into byte variable #wordlists
.a554		ca		dex		                dex             ; and put it on the stack.
.a555		ca		dex		                dex
.a556		95 00		sta $00,x	                sta 0,x
.a558		74 01		stz $01,x	                stz 1,x         ; 12 is the max, so upper byte is always zero.
.a55a		60		rts		z_wordlist:     rts
.a55b						xt_words:
.a55b		20 d5 88	jsr $88d5	                jsr xt_cr
.a55e		a9 00		lda #$00	                lda #0
.a560		48		pha		                pha
.a561		ca		dex		                dex                     ; Make room on the stack for
.a562		ca		dex		                dex                     ; a dictionary pointer.
.a563		64 29		stz $29		                stz tmp3                ; Start at the beginning of
.a565						_wordlist_loop:
.a565		a0 22		ldy #$22	                ldy #num_order_offset   ; Check against byte variable #ORDER.
.a567		a5 29		lda $29		                lda tmp3
.a569		d1 08		cmp ($08),y	                cmp (up),y              ; See if we are done.
.a56b		d0 02		bne $a56f	                bne _have_wordlist
.a56d		80 45		bra $a5b4	                bra _words_done
.a56f						_have_wordlist:
.a56f		18		clc		                clc                     ; Index into byte array SEARCH-ORDER.
.a570		69 23		adc #$23	                adc #search_order_offset
.a572		a8		tay		                tay
.a573		b1 08		lda ($08),y	                lda (up),y              ; Get the index into array WORDLISTS
.a575		0a		asl a		                asl                     ; Turn offset into cells offset.
.a576		18		clc		                clc
.a577		69 0a		adc #$0a	                adc #wordlists_offset
.a579		a8		tay		                tay
.a57a		b1 08		lda ($08),y	                lda (up),y              ; Save the DP for this wordlist
.a57c		95 00		sta $00,x	                sta 0,x                 ; on the stack. ( nt )
.a57e		c8		iny		                iny
.a57f		b1 08		lda ($08),y	                lda (up),y
.a581		95 01		sta $01,x	                sta 1,x
.a583						_loop:
.a583		20 07 8d	jsr $8d07	                jsr xt_dup              ; ( nt nt )
.a586		20 34 95	jsr $9534	                jsr xt_name_to_string   ; ( nt addr u )
.a589		68		pla		                pla
.a58a		18		clc		                clc
.a58b		75 00		adc $00,x	                adc 0,x
.a58d		1a		inc a		                ina                     ; don't forget the space between words
.a58e		c9 4f		cmp #$4f	                cmp #MAX_LINE_LENGTH    ; usually 79
.a590		90 06		bcc $a598	                bcc +
.a592		20 d5 88	jsr $88d5	                jsr xt_cr
.a595		b5 00		lda $00,x	                lda 0,x                 ; After going to next line, start
.a597		1a		inc a		                ina                     ; with length of this word.
.a598						+
.a598		48		pha		                pha
.a599		20 35 a3	jsr $a335	                jsr xt_type             ; ( nt )
.a59c		a9 20		lda #$20	                lda #AscSP
.a59e		20 7b 8d	jsr $8d7b	                jsr emit_a
.a5a1		20 47 97	jsr $9747	                jsr xt_one_plus         ; 1+
.a5a4		20 47 97	jsr $9747	                jsr xt_one_plus         ; 1+
.a5a7		20 05 8f	jsr $8f05	                jsr xt_fetch            ; @ ( nt+1 )
.a5aa		b5 00		lda $00,x	                lda 0,x
.a5ac		15 01		ora $01,x	                ora 1,x
.a5ae		d0 d3		bne $a583	                bne _loop
.a5b0		e6 29		inc $29		                inc tmp3
.a5b2		80 b1		bra $a565	                bra _wordlist_loop
.a5b4						_words_done:
.a5b4		68		pla		                pla                     ; dump counter
.a5b5		e8		inx		                inx
.a5b6		e8		inx		                inx
.a5b7		60		rts		z_words:        rts
.a5b8						xt_wordsize:
.a5b8		20 82 d7	jsr $d782	                jsr underflow_1
.a5bb		b5 00		lda $00,x	                lda 0,x
.a5bd		85 25		sta $25		                sta tmp1
.a5bf		b5 01		lda $01,x	                lda 1,x
.a5c1		85 26		sta $26		                sta tmp1+1
.a5c3		a0 06		ldy #$06	                ldy #6
.a5c5		b1 25		lda ($25),y	                lda (tmp1),y    ; LSB of z
.a5c7		88		dey		                dey
.a5c8		88		dey		                dey
.a5c9		38		sec		                sec
.a5ca		f1 25		sbc ($25),y	                sbc (tmp1),y    ; LSB of xt
.a5cc		95 00		sta $00,x	                sta 0,x
.a5ce		a0 07		ldy #$07	                ldy #7
.a5d0		b1 25		lda ($25),y	                lda (tmp1),y    ; MSB of z
.a5d2		88		dey		                dey
.a5d3		88		dey		                dey
.a5d4		f1 25		sbc ($25),y	                sbc (tmp1),y    ; MSB of xt
.a5d6		95 01		sta $01,x	                sta 1,x
.a5d8		60		rts		z_wordsize:     rts
.a5d9						xt_xor:
.a5d9		20 87 d7	jsr $d787	                jsr underflow_2
.a5dc		b5 00		lda $00,x	                lda 0,x
.a5de		55 02		eor $02,x	                eor 2,x
.a5e0		95 02		sta $02,x	                sta 2,x
.a5e2		b5 01		lda $01,x	                lda 1,x
.a5e4		55 03		eor $03,x	                eor 3,x
.a5e6		95 03		sta $03,x	                sta 3,x
.a5e8		e8		inx		                inx
.a5e9		e8		inx		                inx
.a5ea		60		rts		z_xor:          rts
.a5eb						xt_case:
.a5eb						xt_forth_wordlist:
.a5eb						xt_zero:
.a5eb		ca		dex		                dex             ; push
.a5ec		ca		dex		                dex
.a5ed		74 00		stz $00,x	                stz 0,x
.a5ef		74 01		stz $01,x	                stz 1,x
.a5f1						z_case:
.a5f1						z_forth_wordlist:
.a5f1						z_zero:
.a5f1		60		rts		                rts
.a5f2						xt_zero_equal:
.a5f2		20 82 d7	jsr $d782	                jsr underflow_1
.a5f5		b5 00		lda $00,x	                lda 0,x
.a5f7		15 01		ora $01,x	                ora 1,x
.a5f9		f0 02		beq $a5fd	                beq _zero       ; if 0, A is inverse of the TRUE (-1) we want
.a5fb		a9 ff		lda #$ff	                lda #$FF        ; else set A inverse of the FALSE (0) we want
.a5fd						_zero:
.a5fd		49 ff		eor #$ff	                eor #$FF        ; now just invert
.a5ff						_store:
.a5ff		95 00		sta $00,x	                sta 0,x
.a601		95 01		sta $01,x	                sta 1,x
.a603		60		rts		z_zero_equal:   rts
.a604						xt_zero_greater:
.a604		20 82 d7	jsr $d782	                jsr underflow_1
.a607		a0 00		ldy #$00	                ldy #0          ; Default is FALSE (TOS is negative)
.a609		b5 01		lda $01,x	                lda 1,x         ; MSB
.a60b		30 05		bmi $a612	                bmi _done       ; TOS is negative, keep FLASE
.a60d		15 00		ora $00,x	                ora 0,x
.a60f		f0 01		beq $a612	                beq _done       ; TOS is zero, keep FALSE
.a611		88		dey		                dey             ; TOS is postive, make true
.a612						_done:
.a612		98		tya		                tya
.a613		95 00		sta $00,x	                sta 0,x
.a615		95 01		sta $01,x	                sta 1,x
.a617		60		rts		z_zero_greater: rts
.a618						xt_zero_less:
.a618		20 82 d7	jsr $d782	                jsr underflow_1
.a61b		a0 00		ldy #$00	                ldy #0          ; Default is FALSE (TOS positive)
.a61d		b5 01		lda $01,x	                lda 1,x         ; MSB
.a61f		10 01		bpl $a622	                bpl _done       ; TOS is positive, so keep FALSE
.a621		88		dey		                dey             ; TOS is negative, make TRUE
.a622						_done:
.a622		98		tya		                tya
.a623		95 00		sta $00,x	                sta 0,x
.a625		95 01		sta $01,x	                sta 1,x
.a627		60		rts		z_zero_less:    rts
.a628						xt_zero_unequal:
.a628		20 82 d7	jsr $d782	                jsr underflow_1
.a62b		b5 00		lda $00,x	                lda 0,x
.a62d		15 01		ora $01,x	                ora 1,x
.a62f		f0 02		beq $a633	                beq _zero
.a631		a9 ff		lda #$ff	                lda #$FF
.a633						_zero:
.a633		95 00		sta $00,x	                sta 0,x
.a635		95 01		sta $01,x	                sta 1,x
.a637		60		rts		z_zero_unequal: rts
.a638						xt_editor_screen_helper:
.a638		20 07 8d	jsr $8d07	                jsr xt_dup
.a63b		20 50 9d	jsr $9d50	                jsr xt_scr
.a63e		20 f1 9f	jsr $9ff1	                jsr xt_store
.a641		20 30 85	jsr $8530	                jsr xt_buffer
.a644						z_editor_screen_helper:
.a644		60		rts		                rts
.a645						xt_editor_enter_screen:
.a645		20 38 a6	jsr $a638	                jsr xt_editor_screen_helper
.a648		20 86 8c	jsr $8c86	                jsr xt_drop
.a64b		64 35		stz $35		                stz ed_head
.a64d						_prompt_loop:
.a64d		ca		dex		                dex
.a64e		ca		dex		                dex
.a64f		a5 35		lda $35		                lda ed_head
.a651		95 00		sta $00,x	                sta 0,x
.a653		74 01		stz $01,x	                stz 1,x
.a655		20 18 a7	jsr $a718	                jsr xt_editor_o
.a658		e6 35		inc $35		                inc ed_head
.a65a		a9 10		lda #$10	                lda #16
.a65c		c5 35		cmp $35		                cmp ed_head
.a65e		d0 ed		bne $a64d	                bne _prompt_loop
.a660						z_editor_enter_screen:
.a660		60		rts		                rts
.a661						xt_editor_erase_screen:
.a661		20 38 a6	jsr $a638	                jsr xt_editor_screen_helper
.a664		ca		dex		                dex
.a665		ca		dex		                dex
.a666		74 00		stz $00,x	                stz 0,x
.a668		a9 04		lda #$04	                lda #4          ; 4 in MSB makes 1024 ($400).
.a66a		95 01		sta $01,x	                sta 1,x
.a66c		20 6f 8e	jsr $8e6f	                jsr xt_blank
.a66f		20 a9 a4	jsr $a4a9	                jsr xt_update
.a672						z_editor_erase_screen:
.a672		60		rts		                rts
.a673						xt_editor_el:
.a673		20 ff a6	jsr $a6ff	                jsr xt_editor_line
.a676		ca		dex		                dex
.a677		ca		dex		                dex
.a678		a9 40		lda #$40	                lda #64
.a67a		95 00		sta $00,x	                sta 0,x
.a67c		74 01		stz $01,x	                stz 1,x
.a67e		20 6f 8e	jsr $8e6f	                jsr xt_blank
.a681		20 a9 a4	jsr $a4a9	                jsr xt_update
.a684		60		rts		z_editor_el:    rts
.a685						xt_editor_l:
.a685		ca		dex		                dex             ; Put SCR on the stack.
.a686		ca		dex		                dex
.a687		a0 06		ldy #$06	                ldy #scr_offset
.a689		b1 08		lda ($08),y	                lda (up),y
.a68b		95 00		sta $00,x	                sta 0,x
.a68d		c8		iny		                iny
.a68e		b1 08		lda ($08),y	                lda (up),y
.a690		95 01		sta $01,x	                sta 1,x
.a692		20 5d 83	jsr $835d	                jsr xt_block    ; Get the current screen.
.a695		20 d5 88	jsr $88d5	                jsr xt_cr
.a698		80 08		bra $a6a2	                bra _after_screen_msg
.a69a						_screen_msg:
>a69a		53 63 72 65 65 6e 20 23		                .text "Screen #"
.a6a2						_after_screen_msg:
.a6a2		20 0d 9f	jsr $9f0d	                jsr sliteral_runtime
>a6a5		9a a6 08 00			                .word _screen_msg, _after_screen_msg-_screen_msg
.a6a9		20 35 a3	jsr $a335	                jsr xt_type
.a6ac		20 50 9d	jsr $9d50	                jsr xt_scr
.a6af		20 05 8f	jsr $8f05	                jsr xt_fetch
.a6b2		ca		dex		                dex
.a6b3		ca		dex		                dex
.a6b4		a9 04		lda #$04	                lda #4          ; four spaces
.a6b6		95 00		sta $00,x	                sta 0,x
.a6b8		74 01		stz $01,x	                stz 1,x
.a6ba		20 6c a3	jsr $a36c	                jsr xt_u_dot_r
.a6bd		64 29		stz $29		                stz tmp3
.a6bf						_line_loop:
.a6bf		20 d5 88	jsr $88d5	                jsr xt_cr
.a6c2		ca		dex		                dex
.a6c3		ca		dex		                dex
.a6c4		ca		dex		                dex
.a6c5		ca		dex		                dex
.a6c6		74 03		stz $03,x	                stz 3,x
.a6c8		a5 29		lda $29		                lda tmp3
.a6ca		95 02		sta $02,x	                sta 2,x
.a6cc		74 01		stz $01,x	                stz 1,x
.a6ce		a9 02		lda #$02	                lda #2
.a6d0		95 00		sta $00,x	                sta 0,x
.a6d2		20 6c a3	jsr $a36c	                jsr xt_u_dot_r
.a6d5		20 82 9f	jsr $9f82	                jsr xt_space
.a6d8		20 07 8d	jsr $8d07	                jsr xt_dup
.a6db		ca		dex		                dex
.a6dc		ca		dex		                dex
.a6dd		a9 40		lda #$40	                lda #64
.a6df		95 00		sta $00,x	                sta 0,x
.a6e1		74 01		stz $01,x	                stz 1,x
.a6e3		20 35 a3	jsr $a335	                jsr xt_type
.a6e6		18		clc		                clc
.a6e7		a9 40		lda #$40	                lda #64
.a6e9		75 00		adc $00,x	                adc 0,x
.a6eb		95 00		sta $00,x	                sta 0,x
.a6ed		90 02		bcc $a6f1	                bcc +
.a6ef		f6 01		inc $01,x	                inc 1,x
.a6f1						+
.a6f1		e6 29		inc $29		                inc tmp3
.a6f3		a5 29		lda $29		                lda tmp3
.a6f5		c9 10		cmp #$10	                cmp #16
.a6f7		d0 c6		bne $a6bf	                bne _line_loop
.a6f9		20 d5 88	jsr $88d5	                jsr xt_cr
.a6fc		e8		inx		                inx
.a6fd		e8		inx		                inx
.a6fe		60		rts		z_editor_l:            rts
.a6ff						xt_editor_line:
.a6ff		20 82 d7	jsr $d782	                jsr underflow_1
.a702		a0 06		ldy #$06	                ldy #6          ; *64 is same as left shift 6 times.
.a704						_shift_tos_left:
.a704		16 00		asl $00,x	                asl 0,x         ; Shift TOS to the left
.a706		36 01		rol $01,x	                rol 1,x         ; ROL brings MSb from lower byte.
.a708		88		dey		                dey
.a709		d0 f9		bne $a704	                bne _shift_tos_left
.a70b		20 50 9d	jsr $9d50	                jsr xt_scr
.a70e		20 05 8f	jsr $8f05	                jsr xt_fetch
.a711		20 5d 83	jsr $835d	                jsr xt_block
.a714		20 0b 99	jsr $990b	                jsr xt_plus
.a717		60		rts		z_editor_line:  rts
.a718						xt_editor_o:
.a718		20 d5 88	jsr $88d5	                jsr xt_cr
.a71b		20 07 8d	jsr $8d07	                jsr xt_dup
.a71e		20 d9 a1	jsr $a1d9	                jsr xt_two
.a721		20 6c a3	jsr $a36c	                jsr xt_u_dot_r
.a724		20 82 9f	jsr $9f82	                jsr xt_space
.a727		a9 2a		lda #$2a	                lda #'*'
.a729		20 7b 8d	jsr $8d7b	                jsr emit_a
.a72c		20 82 9f	jsr $9f82	                jsr xt_space
.a72f		20 ff a6	jsr $a6ff	                jsr xt_editor_line
.a732		20 07 8d	jsr $8d07	                jsr xt_dup      ; Save a copy of the line address for later.
.a735		ca		dex		                dex
.a736		ca		dex		                dex
.a737		a9 40		lda #$40	                lda #64         ; chars/line
.a739		95 00		sta $00,x	                sta 0,x
.a73b		74 01		stz $01,x	                stz 1,x
.a73d		20 e6 80	jsr $80e6	                jsr xt_accept
.a740		20 07 8d	jsr $8d07	                jsr xt_dup
.a743		20 9b 95	jsr $959b	                jsr xt_not_rote ; -rot
.a746		20 0b 99	jsr $990b	                jsr xt_plus
.a749		ca		dex		                dex
.a74a		ca		dex		                dex
.a74b		a9 40		lda #$40	                lda #64         ; chars/line
.a74d		95 00		sta $00,x	                sta 0,x
.a74f		74 01		stz $01,x	                stz 1,x
.a751		20 78 9a	jsr $9a78	                jsr xt_rot
.a754		20 86 94	jsr $9486	                jsr xt_minus
.a757		20 6f 8e	jsr $8e6f	                jsr xt_blank
.a75a		20 a9 a4	jsr $a4a9	                jsr xt_update
.a75d		60		rts		z_editor_o:     rts

;******  Return to file: platform/../taliforth.asm


;******  Processing file: platform/../definitions.asm

=120						dsp0      = zpage_end-7    ; initial Data Stack Pointer
.a75e						cold_zp_table:
>a75e	0000	00 08				cp:         .word cp0+256+1024      ; Compiler Pointer
>a760	0002	28 bb				dp:         .word dictionary_start  ; Dictionary Pointer
>a762	0004	00 00				ip:         .word 0                 ; Instruction Pointer (current xt)
>a764	0006	00 00				workword:   .word 0                 ; nt (not xt!) of word being compiled, except in
>a766	0008	00 03				up:         .word cp0               ; Forth user vars at start of available RAM
>a768	000a	00 00				insrc:      .word 0                 ; input source for SOURCE-ID (0 for keyboard)
>a76a	000c	00 02				cib:        .word buffer0           ; address of current input buffer
>a76c	000e	00 00				ciblen:     .word 0                 ; length of current input buffer
>a76e	0010	00 00				toin:       .word 0                 ; pointer to CIB (>IN in Forth)
>a770	0012	27 f0				output:     .word kernel_putc       ; vector for EMIT
>a772	0014	21 f0				input:      .word kernel_getc       ; vector for KEY
>a774	0016	00 00				havekey:    .word 0                 ; vector for KEY?
>a776	0018	0a 00				base:       .word 10                ; number radix, default decimal
>a778	001a	00 00				state:      .word 0                 ; STATE: -1 compile, 0 interpret
>a77a	001c	00 00				status:     .word 0                 ; internal status used by : :NONAME ; ACCEPT
>a77c	001e					tmpdsp:     .byte ?         ; temporary DSP (X) storage (single byte)
>a77d	001f					loopctrl:   .byte ?         ; Offset and flags for DO/LOOP/+LOOP control.
>a77e	0020					loopidx0    .byte ?         ; cached LSB of current loop index for LOOP (not +LOOP)
=$100						lcbstack = $100
=256						loopindex = lcbstack+0      ; loop control block index for adjusted loopindex
=258						loopfufa  = lcbstack+2      ; loop control block offset for limit fudge factor
>a77f	0021					loopleave:  .word ?         ; tmp for LEAVE chaining ;TODO could it use existing tmp?
>a781	0023					tmptos:     .word ?         ; temporary TOS storage
>a783	0025					tmp1:       .word ?         ; temporary storage
>a785	0027					tmp2:       .word ?         ; temporary storage
>a787	0029					tmp3:       .word ?         ; temporary storage (especially for print)
>a789	002b					tohold:     .word ?         ; pointer for formatted output
>a78b	002d					scratch:    .word ?,?,?,?   ; 8 byte scratchpad (see UM/MOD)
>a793	0035					tmped:      .word ?,?,?     ; temporary for editors
.a77c						cold_zp_table_end:
.a77c						cold_user_table:
>a77c	0000	14 00				nc_limit_offset:        .word 20        ; byte limit for Native Compile size
>a77e	0002	00 00				uf_strip_offset:        .word 0         ; flag to strip underflow detection (0 off)
>a780	0004	00 00				blk_offset:             .word 0         ; BLK
>a782	0006	00 00				scr_offset:             .word 0         ; SCR
=12						max_wordlists = 12    ; Maximum number of wordlists supported (4 built-in, 8 user wordlists)
>a784	0008	00				current_offset:         .byte 0         ; CURRENT = FORTH-WORDLIST (compilation wordlist)
>a785	0009	04				num_wordlists_offset:   .byte 4         ; #WORDLISTS (FORTH EDITOR ASSEMBLER ROOT)
.a786	000a					wordlists_offset:
>a786	000a	28 bb				    .word dictionary_start              ; FORTH-WORDLIST
>a788	000c	70 c9				    .word editor_dictionary_start       ; EDITOR-WORDLIST
>a78a	000e	c0 c9				    .word assembler_dictionary_start    ; ASSEMBLER-WORDLIST
>a78c	0010	2f c9				    .word root_dictionary_start         ; ROOT-WORDLIST
>a78e	0012	00 00 00 00 00 00 00 00		    .word 0,0,0,0,0,0,0,0               ; Space for 8 User wordlists
>a796	001a	00 00 00 00 00 00 00 00
>a79e	0022	01				num_order_offset:       .byte 1         ; #ORDER (Number of wordlists in search order)
.a79f	0023					search_order_offset:
>a79f	0023	00 00 00 00 00 00 00 00		    .byte 0,0,0,0,0,0,0,0,0             ; SEARCH-ORDER (9 bytes to keep offsets even)
>a7a7	002b	00
>a7a8	002c	00 04				blkbuffer_offset:       .word cp0+256   ; Address of buffer (right after USER vars)
>a7aa	002e	00 00				buffblocknum_offset:    .word 0         ; Block number current in buffer
>a7ac	0030	00 00				buffstatus_offset:      .word 0         ; Buffer status (bit 0 = used, bit 1 = dirty) (not in use)
>a7ae	0032	ec 84				blockread_offset:       .word xt_block_word_error   ; Vector to block reading routine
>a7b0	0034	ec 84				blockwrite_offset:      .word xt_block_word_error   ; Vector to block writing routine
.a7b2						cold_user_table_end:
=$03						AscCC   = $03  ; break (CTRL-c)
=$07						AscBELL = $07  ; bell sound
=$08						AscBS   = $08  ; backspace
=$0a						AscLF   = $0A  ; line feed
=$0d						AscCR   = $0D  ; carriage return
=$1b						AscESC  = $1B  ; escape
=$20						AscSP   = $20  ; space
=$7f						AscDEL  = $7F  ; delete (CTRL-h)
=$10						AscCP   = $10  ; CTRL-p (used to recall previous input history)
=$0e						AscCN   = $0E  ; CTRL-n (used to recall next input history)
=$20						OpJSR   = $20
=$4c						OpJMP   = $4C
=$60						OpRTS   = $60
=$80						OpBRA   = $80
=1						CO = 1  ; Compile Only
=2						AN = 2  ; Always Native Compile
=4						IM = 4  ; Immediate Word
=8						NN = 8  ; Never Native Compile
=16						UF = 16 ; Includes Underflow Check (RESERVED)
=32						HC = 32 ; Word has Code Field Area (CFA)
=79						MAX_LINE_LENGTH  = 79      ; assumes 80 character lines

;******  Return to file: platform/../taliforth.asm


;******  Processing file: platform/../assembler.asm

.a7b2						assembler:
.a7b2						xt_asm_adc_h:
.a7b2		a9 69		lda #$69	                lda #$69
.a7b4		4c 0d ab	jmp $ab0d	                jmp asm_common
.a7b7						z_asm_adc_h:
.a7b7						xt_asm_adc_x:
.a7b7		a9 7d		lda #$7d	                lda #$7D
.a7b9		4c 0d ab	jmp $ab0d	                jmp asm_common
.a7bc						z_asm_adc_x:
.a7bc						xt_asm_adc_y:
.a7bc		a9 79		lda #$79	                lda #$79
.a7be		4c 0d ab	jmp $ab0d	                jmp asm_common
.a7c1						z_asm_adc_y:
.a7c1						xt_asm_adc_z:
.a7c1		a9 65		lda #$65	                lda #$65
.a7c3		4c 0d ab	jmp $ab0d	                jmp asm_common
.a7c6						z_asm_adc_z:
.a7c6						xt_asm_adc_zi:
.a7c6		a9 72		lda #$72	                lda #$72
.a7c8		4c 0d ab	jmp $ab0d	                jmp asm_common
.a7cb						z_asm_adc_zi:
.a7cb						xt_asm_adc_ziy:
.a7cb		a9 71		lda #$71	                lda #$71
.a7cd		4c 0d ab	jmp $ab0d	                jmp asm_common
.a7d0						z_asm_adc_ziy:
.a7d0						xt_asm_adc_zx:
.a7d0		a9 75		lda #$75	                lda #$75
.a7d2		4c 0d ab	jmp $ab0d	                jmp asm_common
.a7d5						z_asm_adc_zx:
.a7d5						xt_asm_adc_zxi:
.a7d5		a9 61		lda #$61	                lda #$61
.a7d7		4c 0d ab	jmp $ab0d	                jmp asm_common
.a7da						z_asm_adc_zxi:
.a7da						xt_asm_and:
.a7da		a9 2d		lda #$2d	                lda #$2D
.a7dc		4c 0d ab	jmp $ab0d	                jmp asm_common
.a7df						z_asm_and:
.a7df						xt_asm_and_h:
.a7df		a9 29		lda #$29	                lda #$29
.a7e1		4c 0d ab	jmp $ab0d	                jmp asm_common
.a7e4						z_asm_and_h:
.a7e4						xt_asm_and_x:
.a7e4		a9 3d		lda #$3d	                lda #$3D
.a7e6		4c 0d ab	jmp $ab0d	                jmp asm_common
.a7e9						z_asm_and_x:
.a7e9						xt_asm_and_y:
.a7e9		a9 39		lda #$39	                lda #$39
.a7eb		4c 0d ab	jmp $ab0d	                jmp asm_common
.a7ee						z_asm_and_y:
.a7ee						xt_asm_and_z:
.a7ee		a9 25		lda #$25	                lda #$25
.a7f0		4c 0d ab	jmp $ab0d	                jmp asm_common
.a7f3						z_asm_and_z:
.a7f3						xt_asm_and_zi:
.a7f3		a9 32		lda #$32	                lda #$32
.a7f5		4c 0d ab	jmp $ab0d	                jmp asm_common
.a7f8						z_asm_and_zi:
.a7f8						xt_asm_and_ziy:
.a7f8		a9 31		lda #$31	                lda #$31
.a7fa		4c 0d ab	jmp $ab0d	                jmp asm_common
.a7fd						z_asm_and_ziy:
.a7fd						xt_asm_and_zx:
.a7fd		a9 35		lda #$35	                lda #$35
.a7ff		4c 0d ab	jmp $ab0d	                jmp asm_common
.a802						z_asm_and_zx:
.a802						xt_asm_and_zxi:
.a802		a9 21		lda #$21	                lda #$21
.a804		4c 0d ab	jmp $ab0d	                jmp asm_common
.a807						z_asm_and_zxi:
.a807						xt_asm_asl:
.a807		a9 0e		lda #$0e	                lda #$0E
.a809		4c 0d ab	jmp $ab0d	                jmp asm_common
.a80c						z_asm_asl:
.a80c						xt_asm_asl_a:
.a80c		a9 0a		lda #$0a	                lda #$0A
.a80e		4c 0d ab	jmp $ab0d	                jmp asm_common
.a811						z_asm_asl_a:
.a811						xt_asm_asl_x:
.a811		a9 1e		lda #$1e	                lda #$1E
.a813		4c 0d ab	jmp $ab0d	                jmp asm_common
.a816						z_asm_asl_x:
.a816						xt_asm_asl_z:
.a816		a9 06		lda #$06	                lda #$06
.a818		4c 0d ab	jmp $ab0d	                jmp asm_common
.a81b						z_asm_asl_z:
.a81b						xt_asm_asl_zx:
.a81b		a9 16		lda #$16	                lda #$16
.a81d		4c 0d ab	jmp $ab0d	                jmp asm_common
.a820						z_asm_asl_zx:
.a820						xt_asm_bcc:
.a820		a9 90		lda #$90	                lda #$90
.a822		4c 0d ab	jmp $ab0d	                jmp asm_common
.a825						z_asm_bcc:
.a825						xt_asm_bcs:
.a825		a9 b0		lda #$b0	                lda #$B0
.a827		a0 02		ldy #$02	                ldy #2
.a829		4c 0d ab	jmp $ab0d	                jmp asm_common
.a82c						z_asm_bcs:
.a82c						xt_asm_beq:
.a82c		a9 f0		lda #$f0	                lda #$F0
.a82e		4c 0d ab	jmp $ab0d	                jmp asm_common
.a831						z_asm_beq:
.a831						xt_asm_bit:
.a831		a9 2c		lda #$2c	                lda #$2C
.a833		4c 0d ab	jmp $ab0d	                jmp asm_common
.a836						z_asm_bit:
.a836						xt_asm_bit_h:
.a836		a9 89		lda #$89	                lda #$89
.a838		4c 0d ab	jmp $ab0d	                jmp asm_common
.a83b						z_asm_bit_h:
.a83b						xt_asm_bit_x:
.a83b		a9 3c		lda #$3c	                lda #$3C
.a83d		4c 0d ab	jmp $ab0d	                jmp asm_common
.a840						z_asm_bit_x:
.a840						xt_asm_bit_z:
.a840		a9 24		lda #$24	                lda #$24
.a842		4c 0d ab	jmp $ab0d	                jmp asm_common
.a845						z_asm_bit_z:
.a845						xt_asm_bit_zx:
.a845		a9 34		lda #$34	                lda #$34
.a847		4c 0d ab	jmp $ab0d	                jmp asm_common
.a84a						z_asm_bit_zx:
.a84a						xt_asm_bmi:
.a84a		a9 30		lda #$30	                lda #$30
.a84c		4c 0d ab	jmp $ab0d	                jmp asm_common
.a84f						z_asm_bmi:
.a84f						xt_asm_bne:
.a84f		a9 d0		lda #$d0	                lda #$D0
.a851		4c 0d ab	jmp $ab0d	                jmp asm_common
.a854						z_asm_bne:
.a854						xt_asm_bpl:
.a854		a9 10		lda #$10	                lda #$10
.a856		4c 0d ab	jmp $ab0d	                jmp asm_common
.a859						z_asm_bpl:
.a859						xt_asm_bra:
.a859		a9 80		lda #$80	                lda #$80
.a85b		4c 0d ab	jmp $ab0d	                jmp asm_common
.a85e						z_asm_bra:
.a85e						xt_asm_brk:
.a85e		a9 00		lda #$00	                lda #$00
.a860		4c 0d ab	jmp $ab0d	                jmp asm_common
.a863						z_asm_brk:
.a863						xt_asm_bvc:
.a863		a9 50		lda #$50	                lda #$50
.a865		4c 0d ab	jmp $ab0d	                jmp asm_common
.a868						z_asm_bvc:
.a868						xt_asm_bvs:
.a868		a9 70		lda #$70	                lda #$70
.a86a		4c 0d ab	jmp $ab0d	                jmp asm_common
.a86d						z_asm_bvs:
.a86d						xt_asm_clc:
.a86d		a9 18		lda #$18	                lda #$18
.a86f		4c 0d ab	jmp $ab0d	                jmp asm_common
.a872						z_asm_clc:
.a872						xt_asm_cld:
.a872		a9 d8		lda #$d8	                lda #$D8
.a874		4c 0d ab	jmp $ab0d	                jmp asm_common
.a877						z_asm_cld:
.a877						xt_asm_cli:
.a877		a9 58		lda #$58	                lda #$58
.a879		4c 0d ab	jmp $ab0d	                jmp asm_common
.a87c						z_asm_cli:
.a87c						xt_asm_clv:
.a87c		a9 b8		lda #$b8	                lda #$B8
.a87e		4c 0d ab	jmp $ab0d	                jmp asm_common
.a881						z_asm_clv:
.a881						xt_asm_cmp:
.a881		a9 cd		lda #$cd	                lda #$CD
.a883		4c 0d ab	jmp $ab0d	                jmp asm_common
.a886						z_asm_cmp:
.a886						xt_asm_cmp_h:
.a886		a9 c9		lda #$c9	                lda #$C9
.a888		4c 0d ab	jmp $ab0d	                jmp asm_common
.a88b						z_asm_cmp_h:
.a88b						xt_asm_cmp_x:
.a88b		a9 dd		lda #$dd	                lda #$DD
.a88d		4c 0d ab	jmp $ab0d	                jmp asm_common
.a890						z_asm_cmp_x:
.a890						xt_asm_cmp_y:
.a890		a9 d9		lda #$d9	                lda #$D9
.a892		4c 0d ab	jmp $ab0d	                jmp asm_common
.a895						z_asm_cmp_y:
.a895						xt_asm_cmp_z:
.a895		a9 c5		lda #$c5	                lda #$C5
.a897		4c 0d ab	jmp $ab0d	                jmp asm_common
.a89a						z_asm_cmp_z:
.a89a						xt_asm_cmp_zi:
.a89a		a9 d2		lda #$d2	                lda #$D2
.a89c		4c 0d ab	jmp $ab0d	                jmp asm_common
.a89f						z_asm_cmp_zi:
.a89f						xt_asm_cmp_ziy:
.a89f		a9 d1		lda #$d1	                lda #$D1
.a8a1		4c 0d ab	jmp $ab0d	                jmp asm_common
.a8a4						z_asm_cmp_ziy:
.a8a4						xt_asm_cmp_zx:
.a8a4		a9 d5		lda #$d5	                lda #$D5
.a8a6		4c 0d ab	jmp $ab0d	                jmp asm_common
.a8a9						z_asm_cmp_zx:
.a8a9						xt_asm_cmp_zxi:
.a8a9		a9 c1		lda #$c1	                lda #$C1
.a8ab		4c 0d ab	jmp $ab0d	                jmp asm_common
.a8ae						z_asm_cmp_zxi:
.a8ae						xt_asm_cpx:
.a8ae		a9 ec		lda #$ec	                lda #$EC
.a8b0		4c 0d ab	jmp $ab0d	                jmp asm_common
.a8b3						z_asm_cpx:
.a8b3						xt_asm_cpx_h:
.a8b3		a9 e0		lda #$e0	                lda #$E0
.a8b5		4c 0d ab	jmp $ab0d	                jmp asm_common
.a8b8						z_asm_cpx_h:
.a8b8						xt_asm_cpx_z:
.a8b8		a9 e4		lda #$e4	                lda #$E4
.a8ba		4c 0d ab	jmp $ab0d	                jmp asm_common
.a8bd						z_asm_cpx_z:
.a8bd						xt_asm_cpy:
.a8bd		a9 cc		lda #$cc	                lda #$CC
.a8bf		a0 03		ldy #$03	                ldy #3
.a8c1		4c 0d ab	jmp $ab0d	                jmp asm_common
.a8c4						z_asm_cpy:
.a8c4						xt_asm_cpy_h:
.a8c4		a9 c0		lda #$c0	                lda #$C0
.a8c6		4c 0d ab	jmp $ab0d	                jmp asm_common
.a8c9						z_asm_cpy_h:
.a8c9						xt_asm_cpy_z:
.a8c9		a9 c4		lda #$c4	                lda #$C4
.a8cb		4c 0d ab	jmp $ab0d	                jmp asm_common
.a8ce						z_asm_cpy_z:
.a8ce						xt_asm_dec:
.a8ce		a9 ce		lda #$ce	                lda #$CE
.a8d0		4c 0d ab	jmp $ab0d	                jmp asm_common
.a8d3						z_asm_dec:
.a8d3						xt_asm_dec_a:
.a8d3		a9 3a		lda #$3a	                lda #$3A
.a8d5		4c 0d ab	jmp $ab0d	                jmp asm_common
.a8d8						z_asm_dec_a:
.a8d8						xt_asm_dec_x:
.a8d8		a9 de		lda #$de	                lda #$DE
.a8da		4c 0d ab	jmp $ab0d	                jmp asm_common
.a8dd						z_asm_dec_x:
.a8dd						xt_asm_dec_z:
.a8dd		a9 c6		lda #$c6	                lda #$C6
.a8df		4c 0d ab	jmp $ab0d	                jmp asm_common
.a8e2						z_asm_dec_z:
.a8e2						xt_asm_dec_zx:
.a8e2		a9 d6		lda #$d6	                lda #$D6
.a8e4		4c 0d ab	jmp $ab0d	                jmp asm_common
.a8e7						z_asm_dec_zx:
.a8e7						xt_asm_dex:
.a8e7		a9 ca		lda #$ca	                lda #$CA
.a8e9		4c 0d ab	jmp $ab0d	                jmp asm_common
.a8ec						z_asm_dex:
.a8ec						xt_asm_dey:
.a8ec		a9 88		lda #$88	                lda #$88
.a8ee		4c 0d ab	jmp $ab0d	                jmp asm_common
.a8f1						z_asm_dey:
.a8f1						xt_asm_eor:
.a8f1		a9 4d		lda #$4d	                lda #$4D
.a8f3		4c 0d ab	jmp $ab0d	                jmp asm_common
.a8f6						z_asm_eor:
.a8f6						xt_asm_eor_h:
.a8f6		a9 49		lda #$49	                lda #$49
.a8f8		4c 0d ab	jmp $ab0d	                jmp asm_common
.a8fb						z_asm_eor_h:
.a8fb						xt_asm_eor_x:
.a8fb		a9 5d		lda #$5d	                lda #$5D
.a8fd		4c 0d ab	jmp $ab0d	                jmp asm_common
.a900						z_asm_eor_x:
.a900						xt_asm_eor_y:
.a900		a9 59		lda #$59	                lda #$59
.a902		4c 0d ab	jmp $ab0d	                jmp asm_common
.a905						z_asm_eor_y:
.a905						xt_asm_eor_z:
.a905		a9 45		lda #$45	                lda #$45
.a907		4c 0d ab	jmp $ab0d	                jmp asm_common
.a90a						z_asm_eor_z:
.a90a						xt_asm_eor_zi:
.a90a		a9 52		lda #$52	                lda #$52
.a90c		4c 0d ab	jmp $ab0d	                jmp asm_common
.a90f						z_asm_eor_zi:
.a90f						xt_asm_eor_ziy:
.a90f		a9 51		lda #$51	                lda #$51
.a911		4c 0d ab	jmp $ab0d	                jmp asm_common
.a914						z_asm_eor_ziy:
.a914						xt_asm_eor_zx:
.a914		a9 55		lda #$55	                lda #$55
.a916		4c 0d ab	jmp $ab0d	                jmp asm_common
.a919						z_asm_eor_zx:
.a919						xt_asm_eor_zxi:
.a919		a9 41		lda #$41	                lda #$41
.a91b		4c 0d ab	jmp $ab0d	                jmp asm_common
.a91e						z_asm_eor_zxi:
.a91e						xt_asm_inc:
.a91e		a9 ee		lda #$ee	                lda #$EE
.a920		4c 0d ab	jmp $ab0d	                jmp asm_common
.a923						z_asm_inc:
.a923						xt_asm_inc_a:
.a923		a9 1a		lda #$1a	                lda #$1A
.a925		4c 0d ab	jmp $ab0d	                jmp asm_common
.a928						z_asm_inc_a:
.a928						xt_asm_inc_x:
.a928		a9 fe		lda #$fe	                lda #$FE
.a92a		4c 0d ab	jmp $ab0d	                jmp asm_common
.a92d						z_asm_inc_x:
.a92d						xt_asm_inc_z:
.a92d		a9 e6		lda #$e6	                lda #$E6
.a92f		4c 0d ab	jmp $ab0d	                jmp asm_common
.a932						z_asm_inc_z:
.a932						xt_asm_inc_zx:
.a932		a9 f6		lda #$f6	                lda #$F6
.a934		4c 0d ab	jmp $ab0d	                jmp asm_common
.a937						z_asm_inc_zx:
.a937						xt_asm_inx:
.a937		a9 e8		lda #$e8	                lda #$E8
.a939		4c 0d ab	jmp $ab0d	                jmp asm_common
.a93c						z_asm_inx:
.a93c						xt_asm_iny:
.a93c		a9 c8		lda #$c8	                lda #$C8
.a93e		4c 0d ab	jmp $ab0d	                jmp asm_common
.a941						z_asm_iny:
.a941						xt_asm_jmp:
.a941		a9 4c		lda #$4c	                lda #$4C
.a943		4c 0d ab	jmp $ab0d	                jmp asm_common
.a946						z_asm_jmp:
.a946						xt_asm_jmp_i:
.a946		a9 6c		lda #$6c	                lda #$6C
.a948		4c 0d ab	jmp $ab0d	                jmp asm_common
.a94b						z_asm_jmp_i:
.a94b						xt_asm_jmp_xi:
.a94b		a9 7c		lda #$7c	                lda #$7C
.a94d		4c 0d ab	jmp $ab0d	                jmp asm_common
.a950						z_asm_jmp_xi:
.a950						xt_asm_jsr:
.a950		a9 20		lda #$20	                lda #$20
.a952		4c 0d ab	jmp $ab0d	                jmp asm_common
.a955						z_asm_jsr:
.a955						xt_asm_lda:
.a955		a9 ad		lda #$ad	                lda #$AD
.a957		4c 0d ab	jmp $ab0d	                jmp asm_common
.a95a						z_asm_lda:
.a95a						xt_asm_lda_h:
.a95a		a9 a9		lda #$a9	                lda #$A9
.a95c		4c 0d ab	jmp $ab0d	                jmp asm_common
.a95f						z_asm_lda_h:
.a95f						xt_asm_lda_x:
.a95f		a9 bd		lda #$bd	                lda #$BD
.a961		4c 0d ab	jmp $ab0d	                jmp asm_common
.a964						z_asm_lda_x:
.a964						xt_asm_lda_y:
.a964		a9 b9		lda #$b9	                lda #$B9
.a966		4c 0d ab	jmp $ab0d	                jmp asm_common
.a969						z_asm_lda_y:
.a969						xt_asm_lda_z:
.a969		a9 a5		lda #$a5	                lda #$A5
.a96b		4c 0d ab	jmp $ab0d	                jmp asm_common
.a96e						z_asm_lda_z:
.a96e						xt_asm_lda_zi:
.a96e		a9 b2		lda #$b2	                lda #$B2
.a970		4c 0d ab	jmp $ab0d	                jmp asm_common
.a973						z_asm_lda_zi:
.a973						xt_asm_lda_ziy:
.a973		a9 b1		lda #$b1	                lda #$B1
.a975		4c 0d ab	jmp $ab0d	                jmp asm_common
.a978						z_asm_lda_ziy:
.a978						xt_asm_lda_zx:
.a978		a9 b5		lda #$b5	                lda #$B5
.a97a		4c 0d ab	jmp $ab0d	                jmp asm_common
.a97d						z_asm_lda_zx:
.a97d						xt_asm_lda_zxi:
.a97d		a9 a1		lda #$a1	                lda #$A1
.a97f		4c 0d ab	jmp $ab0d	                jmp asm_common
.a982						z_asm_lda_zxi:
.a982						xt_asm_ldx:
.a982		a9 ae		lda #$ae	                lda #$AE
.a984		4c 0d ab	jmp $ab0d	                jmp asm_common
.a987						z_asm_ldx:
.a987						xt_asm_ldx_h:
.a987		a9 a2		lda #$a2	                lda #$A2
.a989		4c 0d ab	jmp $ab0d	                jmp asm_common
.a98c						z_asm_ldx_h:
.a98c						xt_asm_ldx_y:
.a98c		a9 be		lda #$be	                lda #$BE
.a98e		4c 0d ab	jmp $ab0d	                jmp asm_common
.a991						z_asm_ldx_y:
.a991						xt_asm_ldx_z:
.a991		a9 a6		lda #$a6	                lda #$A6
.a993		4c 0d ab	jmp $ab0d	                jmp asm_common
.a996						z_asm_ldx_z:
.a996						xt_asm_ldx_zy:
.a996		a9 b6		lda #$b6	                lda #$B6
.a998		4c 0d ab	jmp $ab0d	                jmp asm_common
.a99b						z_asm_ldx_zy:
.a99b						xt_asm_ldy:
.a99b		a9 ac		lda #$ac	                lda #$AC
.a99d		4c 0d ab	jmp $ab0d	                jmp asm_common
.a9a0						z_asm_ldy:
.a9a0						xt_asm_ldy_h:
.a9a0		a9 a0		lda #$a0	                lda #$A0
.a9a2		4c 0d ab	jmp $ab0d	                jmp asm_common
.a9a5						z_asm_ldy_h:
.a9a5						xt_asm_ldy_x:
.a9a5		a9 bc		lda #$bc	                lda #$BC
.a9a7		4c 0d ab	jmp $ab0d	                jmp asm_common
.a9aa						z_asm_ldy_x:
.a9aa						xt_asm_ldy_z:
.a9aa		a9 a4		lda #$a4	                lda #$A4
.a9ac		4c 0d ab	jmp $ab0d	                jmp asm_common
.a9af						z_asm_ldy_z:
.a9af						xt_asm_ldy_zx:
.a9af		a9 b4		lda #$b4	                lda #$B4
.a9b1		4c 0d ab	jmp $ab0d	                jmp asm_common
.a9b4						z_asm_ldy_zx:
.a9b4						xt_asm_lsr:
.a9b4		a9 4e		lda #$4e	                lda #$4E
.a9b6		4c 0d ab	jmp $ab0d	                jmp asm_common
.a9b9						z_asm_lsr:
.a9b9						xt_asm_lsr_a:
.a9b9		a9 4a		lda #$4a	                lda #$4A
.a9bb		4c 0d ab	jmp $ab0d	                jmp asm_common
.a9be						z_asm_lsr_a:
.a9be						xt_asm_lsr_x:
.a9be		a9 5e		lda #$5e	                lda #$5E
.a9c0		4c 0d ab	jmp $ab0d	                jmp asm_common
.a9c3						z_asm_lsr_x:
.a9c3						xt_asm_lsr_z:
.a9c3		a9 46		lda #$46	                lda #$46
.a9c5		4c 0d ab	jmp $ab0d	                jmp asm_common
.a9c8						z_asm_lsr_z:
.a9c8						xt_asm_lsr_zx:
.a9c8		a9 56		lda #$56	                lda #$56
.a9ca		4c 0d ab	jmp $ab0d	                jmp asm_common
.a9cd						z_asm_lsr_zx:
.a9cd						xt_asm_nop:
.a9cd		a9 ea		lda #$ea	                lda #$EA
.a9cf		4c 0d ab	jmp $ab0d	                jmp asm_common
.a9d2						z_asm_nop:
.a9d2						xt_asm_ora:
.a9d2		a9 0d		lda #$0d	                lda #$0D
.a9d4		4c 0d ab	jmp $ab0d	                jmp asm_common
.a9d7						z_asm_ora:
.a9d7						xt_asm_ora_h:
.a9d7		a9 09		lda #$09	                lda #$09
.a9d9		4c 0d ab	jmp $ab0d	                jmp asm_common
.a9dc						z_asm_ora_h:
.a9dc						xt_asm_ora_x:
.a9dc		a9 1d		lda #$1d	                lda #$1D
.a9de		4c 0d ab	jmp $ab0d	                jmp asm_common
.a9e1						z_asm_ora_x:
.a9e1						xt_asm_ora_y:
.a9e1		a9 19		lda #$19	                lda #$19
.a9e3		4c 0d ab	jmp $ab0d	                jmp asm_common
.a9e6						z_asm_ora_y:
.a9e6						xt_asm_ora_z:
.a9e6		a9 05		lda #$05	                lda #$05
.a9e8		4c 0d ab	jmp $ab0d	                jmp asm_common
.a9eb						z_asm_ora_z:
.a9eb						xt_asm_ora_zi:
.a9eb		a9 12		lda #$12	                lda #$12
.a9ed		a0 02		ldy #$02	                ldy #2
.a9ef		4c 0d ab	jmp $ab0d	                jmp asm_common
.a9f2						z_asm_ora_zi:
.a9f2						xt_asm_ora_ziy:
.a9f2		a9 11		lda #$11	                lda #$11
.a9f4		4c 0d ab	jmp $ab0d	                jmp asm_common
.a9f7						z_asm_ora_ziy:
.a9f7						xt_asm_ora_zx:
.a9f7		a9 15		lda #$15	                lda #$15
.a9f9		4c 0d ab	jmp $ab0d	                jmp asm_common
.a9fc						z_asm_ora_zx:
.a9fc						xt_asm_ora_zxi:
.a9fc		a9 01		lda #$01	                lda #$01
.a9fe		4c 0d ab	jmp $ab0d	                jmp asm_common
.aa01						z_asm_ora_zxi:
.aa01						xt_asm_pha:
.aa01		a9 48		lda #$48	                lda #$48
.aa03		4c 0d ab	jmp $ab0d	                jmp asm_common
.aa06						z_asm_pha:
.aa06						xt_asm_php:
.aa06		a9 08		lda #$08	                lda #$08
.aa08		4c 0d ab	jmp $ab0d	                jmp asm_common
.aa0b						z_asm_php:
.aa0b						xt_asm_phx:
.aa0b		a9 da		lda #$da	                lda #$DA
.aa0d		4c 0d ab	jmp $ab0d	                jmp asm_common
.aa10						z_asm_phx:
.aa10						xt_asm_phy:
.aa10		a9 5a		lda #$5a	                lda #$5A
.aa12		4c 0d ab	jmp $ab0d	                jmp asm_common
.aa15						z_asm_phy:
.aa15						xt_asm_pla:
.aa15		a9 68		lda #$68	                lda #$68
.aa17		4c 0d ab	jmp $ab0d	                jmp asm_common
.aa1a						z_asm_pla:
.aa1a						xt_asm_plp:
.aa1a		a9 28		lda #$28	                lda #$28
.aa1c		4c 0d ab	jmp $ab0d	                jmp asm_common
.aa1f						z_asm_plp:
.aa1f						xt_asm_plx:
.aa1f		a9 fa		lda #$fa	                lda #$FA
.aa21		4c 0d ab	jmp $ab0d	                jmp asm_common
.aa24						z_asm_plx:
.aa24						xt_asm_ply:
.aa24		a9 7a		lda #$7a	                lda #$7A
.aa26		4c 0d ab	jmp $ab0d	                jmp asm_common
.aa29						z_asm_ply:
.aa29						xt_asm_rol:
.aa29		a9 2e		lda #$2e	                lda #$2E
.aa2b		4c 0d ab	jmp $ab0d	                jmp asm_common
.aa2e						z_asm_rol:
.aa2e						xt_asm_rol_a:
.aa2e		a9 2a		lda #$2a	                lda #$2A
.aa30		4c 0d ab	jmp $ab0d	                jmp asm_common
.aa33						z_asm_rol_a:
.aa33						xt_asm_rol_x:
.aa33		a9 3e		lda #$3e	                lda #$3E
.aa35		4c 0d ab	jmp $ab0d	                jmp asm_common
.aa38						z_asm_rol_x:
.aa38						xt_asm_rol_z:
.aa38		a9 26		lda #$26	                lda #$26
.aa3a		4c 0d ab	jmp $ab0d	                jmp asm_common
.aa3d						z_asm_rol_z:
.aa3d						xt_asm_rol_zx:
.aa3d		a9 36		lda #$36	                lda #$36
.aa3f		4c 0d ab	jmp $ab0d	                jmp asm_common
.aa42						z_asm_rol_zx:
.aa42						xt_asm_ror:
.aa42		a9 6e		lda #$6e	                lda #$6E
.aa44		4c 0d ab	jmp $ab0d	                jmp asm_common
.aa47						z_asm_ror:
.aa47						xt_asm_ror_a:
.aa47		a9 6a		lda #$6a	                lda #$6A
.aa49		4c 0d ab	jmp $ab0d	                jmp asm_common
.aa4c						z_asm_ror_a:
.aa4c						xt_asm_ror_x:
.aa4c		a9 7e		lda #$7e	                lda #$7E
.aa4e		4c 0d ab	jmp $ab0d	                jmp asm_common
.aa51						z_asm_ror_x:
.aa51						xt_asm_ror_z:
.aa51		a9 66		lda #$66	                lda #$66
.aa53		4c 0d ab	jmp $ab0d	                jmp asm_common
.aa56						z_asm_ror_z:
.aa56						xt_asm_ror_zx:
.aa56		a9 76		lda #$76	                lda #$76
.aa58		4c 0d ab	jmp $ab0d	                jmp asm_common
.aa5b						z_asm_ror_zx:
.aa5b						xt_asm_rti:
.aa5b		a9 40		lda #$40	                lda #$40
.aa5d		4c 0d ab	jmp $ab0d	                jmp asm_common
.aa60						z_asm_rti:
.aa60						xt_asm_rts:
.aa60		a9 60		lda #$60	                lda #$60
.aa62		4c 0d ab	jmp $ab0d	                jmp asm_common
.aa65						z_asm_rts:
.aa65						xt_asm_sbc:
.aa65		a9 ed		lda #$ed	                lda #$ED
.aa67		4c 0d ab	jmp $ab0d	                jmp asm_common
.aa6a						z_asm_sbc:
.aa6a						xt_asm_sbc_h:
.aa6a		a9 e9		lda #$e9	                lda #$E9
.aa6c		4c 0d ab	jmp $ab0d	                jmp asm_common
.aa6f						z_asm_sbc_h:
.aa6f						xt_asm_sbc_x:
.aa6f		a9 fd		lda #$fd	                lda #$FD
.aa71		4c 0d ab	jmp $ab0d	                jmp asm_common
.aa74						z_asm_sbc_x:
.aa74						xt_asm_sbc_y:
.aa74		a9 f9		lda #$f9	                lda #$F9
.aa76		4c 0d ab	jmp $ab0d	                jmp asm_common
.aa79						z_asm_sbc_y:
.aa79						xt_asm_sbc_z:
.aa79		a9 e5		lda #$e5	                lda #$E5
.aa7b		4c 0d ab	jmp $ab0d	                jmp asm_common
.aa7e						z_asm_sbc_z:
.aa7e						xt_asm_sbc_zi:
.aa7e		a9 f2		lda #$f2	                lda #$F2
.aa80		4c 0d ab	jmp $ab0d	                jmp asm_common
.aa83						z_asm_sbc_zi:
.aa83						xt_asm_sbc_ziy:
.aa83		a9 f1		lda #$f1	                lda #$F1
.aa85		4c 0d ab	jmp $ab0d	                jmp asm_common
.aa88						z_asm_sbc_ziy:
.aa88						xt_asm_sbc_zx:
.aa88		a9 f5		lda #$f5	                lda #$F5
.aa8a		4c 0d ab	jmp $ab0d	                jmp asm_common
.aa8d						z_asm_sbc_zx:
.aa8d						xt_asm_sbc_zxi:
.aa8d		a9 e1		lda #$e1	                lda #$E1
.aa8f		80 7c		bra $ab0d	                bra asm_common  ; <-- limit for BRA instead of JMP
.aa91						z_asm_sbc_zxi:
.aa91						xt_asm_sec:
.aa91		a9 38		lda #$38	                lda #$38
.aa93		80 78		bra $ab0d	                bra asm_common
.aa95						z_asm_sec:
.aa95						xt_asm_sed:
.aa95		a9 f8		lda #$f8	                lda #$F8
.aa97		80 74		bra $ab0d	                bra asm_common
.aa99						z_asm_sed:
.aa99						xt_asm_sei:
.aa99		a9 78		lda #$78	                lda #$78
.aa9b		80 70		bra $ab0d	                bra asm_common
.aa9d						z_asm_sei:
.aa9d						xt_asm_sta:
.aa9d		a9 8d		lda #$8d	                lda #$8D
.aa9f		80 6c		bra $ab0d	                bra asm_common
.aaa1						z_asm_sta:
.aaa1						xt_asm_sta_x:
.aaa1		a9 9d		lda #$9d	                lda #$9D
.aaa3		80 68		bra $ab0d	                bra asm_common
.aaa5						z_asm_sta_x:
.aaa5						xt_asm_sta_y:
.aaa5		a9 99		lda #$99	                lda #$99
.aaa7		80 64		bra $ab0d	                bra asm_common
.aaa9						z_asm_sta_y:
.aaa9						xt_asm_sta_z:
.aaa9		a9 85		lda #$85	                lda #$85
.aaab		80 60		bra $ab0d	                bra asm_common
.aaad						z_asm_sta_z:
.aaad						xt_asm_sta_zi:
.aaad		a9 92		lda #$92	                lda #$92
.aaaf		80 5c		bra $ab0d	                bra asm_common
.aab1						z_asm_sta_zi:
.aab1						xt_asm_sta_ziy:
.aab1		a9 91		lda #$91	                lda #$91
.aab3		80 58		bra $ab0d	                bra asm_common
.aab5						z_asm_sta_ziy:
.aab5						xt_asm_sta_zx:
.aab5		a9 95		lda #$95	                lda #$95
.aab7		80 54		bra $ab0d	                bra asm_common
.aab9						z_asm_sta_zx:
.aab9						xt_asm_sta_zxi:
.aab9		a9 81		lda #$81	                lda #$81
.aabb		80 50		bra $ab0d	                bra asm_common
.aabd						z_asm_sta_zxi:
.aabd						xt_asm_stx:
.aabd		a9 8e		lda #$8e	                lda #$8E
.aabf		80 4c		bra $ab0d	                bra asm_common
.aac1						z_asm_stx:
.aac1						xt_asm_stx_z:
.aac1		a9 86		lda #$86	                lda #$86
.aac3		80 48		bra $ab0d	                bra asm_common
.aac5						z_asm_stx_z:
.aac5						xt_asm_stx_zy:
.aac5		a9 96		lda #$96	                lda #$96
.aac7		80 44		bra $ab0d	                bra asm_common
.aac9						z_asm_stx_zy:
.aac9						xt_asm_sty:
.aac9		a9 8c		lda #$8c	                lda #$8C
.aacb		80 40		bra $ab0d	                bra asm_common
.aacd						z_asm_sty:
.aacd						xt_asm_sty_z:
.aacd		a9 84		lda #$84	                lda #$84
.aacf		80 3c		bra $ab0d	                bra asm_common
.aad1						z_asm_sty_z:
.aad1						xt_asm_sty_zx:
.aad1		a9 94		lda #$94	                lda #$94
.aad3		80 38		bra $ab0d	                bra asm_common
.aad5						z_asm_sty_zx:
.aad5						xt_asm_stz:
.aad5		a9 9c		lda #$9c	                lda #$9C
.aad7		80 34		bra $ab0d	                bra asm_common
.aad9						z_asm_stz:
.aad9						xt_asm_stz_x:
.aad9		a9 9e		lda #$9e	                lda #$9E
.aadb		80 30		bra $ab0d	                bra asm_common
.aadd						z_asm_stz_x:
.aadd						xt_asm_stz_z:
.aadd		a9 64		lda #$64	                lda #$64
.aadf		80 2c		bra $ab0d	                bra asm_common
.aae1						z_asm_stz_z:
.aae1						xt_asm_stz_zx:
.aae1		a9 74		lda #$74	                lda #$74
.aae3		80 28		bra $ab0d	                bra asm_common
.aae5						z_asm_stz_zx:
.aae5						xt_asm_tax:
.aae5		a9 aa		lda #$aa	                lda #$AA
.aae7		80 24		bra $ab0d	                bra asm_common
.aae9						z_asm_tax:
.aae9						xt_asm_tay:
.aae9		a9 a8		lda #$a8	                lda #$A8
.aaeb		80 20		bra $ab0d	                bra asm_common
.aaed						z_asm_tay:
.aaed						xt_asm_trb:
.aaed		a9 1c		lda #$1c	                lda #$1C
.aaef		80 1c		bra $ab0d	                bra asm_common
.aaf1						z_asm_trb:
.aaf1						xt_asm_trb_z:
.aaf1		a9 14		lda #$14	                lda #$14
.aaf3		80 18		bra $ab0d	                bra asm_common
.aaf5						z_asm_trb_z:
.aaf5						xt_asm_tsb:
.aaf5		a9 0c		lda #$0c	                lda #$0C
.aaf7		80 14		bra $ab0d	                bra asm_common
.aaf9						z_asm_tsb:
.aaf9						xt_asm_tsb_z:
.aaf9		a9 04		lda #$04	                lda #$04
.aafb		80 10		bra $ab0d	                bra asm_common
.aafd						z_asm_tsb_z:
.aafd						xt_asm_tsx:
.aafd		a9 ba		lda #$ba	                lda #$BA
.aaff		80 0c		bra $ab0d	                bra asm_common
.ab01						z_asm_tsx:
.ab01						xt_asm_txa:
.ab01		a9 8a		lda #$8a	                lda #$8A
.ab03		80 08		bra $ab0d	                bra asm_common
.ab05						z_asm_txa:
.ab05						xt_asm_txs:
.ab05		a9 9a		lda #$9a	                lda #$9A
.ab07		80 04		bra $ab0d	                bra asm_common
.ab09						z_asm_txs:
.ab09						xt_asm_tya:
.ab09		a9 98		lda #$98	                lda #$98
.ab0b		80 00		bra $ab0d	                bra asm_common
.ab0d						z_asm_tya:
.ab0d						asm_common:
.ab0d		a8		tay		                tay
.ab0e		20 cf d5	jsr $d5cf	                jsr cmpl_a
.ab11		a9 bd		lda #$bd	                lda #<oc_index_table
.ab13		85 27		sta $27		                sta tmp2
.ab15		a9 ad		lda #$ad	                lda #>oc_index_table
.ab17		85 28		sta $28		                sta tmp2+1
.ab19		98		tya		                tya             ; retrieve opcode
.ab1a		0a		asl a		                asl             ; times two for offset
.ab1b		90 02		bcc $ab1f	                bcc +
.ab1d		e6 28		inc $28		                inc tmp2+1
.ab1f						+
.ab1f		a8		tay		                tay             ; use Y as the index
.ab20		b1 27		lda ($27),y	                lda (tmp2),y    ; LSB
.ab22		85 29		sta $29		                sta tmp3
.ab24		c8		iny		                iny
.ab25		b1 27		lda ($27),y	                lda (tmp2),y    ; MSB
.ab27		85 2a		sta $2a		                sta tmp3+1
.ab29		b2 29		lda ($29)	                lda (tmp3)      ; get "lengths byte"
.ab2b		2a		rol a		                rol
.ab2c		2a		rol a		                rol
.ab2d		2a		rol a		                rol             ; Three times because we go through Carry
.ab2e		29 03		and #$03	                and #%00000011
.ab30		a8		tay		                tay
.ab31		88		dey		                dey
.ab32		f0 12		beq $ab46	                beq _done
.ab34		20 82 d7	jsr $d782	                jsr underflow_1
.ab37		b5 00		lda $00,x	                lda 0,x
.ab39		20 cf d5	jsr $d5cf	                jsr cmpl_a      ; does not use Y
.ab3c		88		dey		                dey
.ab3d		f0 05		beq $ab44	                beq _done_drop
.ab3f		b5 01		lda $01,x	                lda 1,x
.ab41		20 cf d5	jsr $d5cf	                jsr cmpl_a      ; Fall through to _done_drop
.ab44						_done_drop:
.ab44		e8		inx		                inx
.ab45		e8		inx		                inx             ; Fall through to _done
.ab46						_done:
.ab46		60		rts		                rts             ; Returns to original caller
.ab47						xt_asm_push_a:
.ab47		a0 00		ldy #$00	                ldy #0
.ab49						_loop:
.ab49		b9 57 ab	lda $ab57,y	                lda asm_push_a_data,y
.ab4c		c9 ff		cmp #$ff	                cmp #$FF
.ab4e		f0 06		beq $ab56	                beq _done
.ab50		20 cf d5	jsr $d5cf	                jsr cmpl_a      ; does not change Y
.ab53		c8		iny		                iny
.ab54		80 f3		bra $ab49	                bra _loop
.ab56						_done:
.ab56						z_asm_push_a:
.ab56		60		rts		                rts
.ab57						asm_push_a_data:
>ab57		ca ca 95 00 74 01		        .byte $CA, $CA, $95, 00, $74, $01
>ab5d		ff				        .byte $FF               ; terminator
.ab5e						xt_asm_back_jump:
.ab5e						z_asm_back_jump:
.ab5e		60		rts		                rts
.ab5f						xt_asm_back_branch:
.ab5f		20 8f 90	jsr $908f	                jsr xt_here             ; ( addr-l addr-h )
.ab62		20 86 94	jsr $9486	                jsr xt_minus            ; ( offset )
.ab65		3a		dec a		                dea
.ab66		3a		dec a		                dea
.ab67						z_asm_back_branch:
.ab67		60		rts		                rts
.ab68						assembler_end:

;******  Return to file: platform/../taliforth.asm


;******  Processing file: platform/../disassembler.asm

.ab68						disassembler:
.ab68		20 d5 88	jsr $88d5	                jsr xt_cr       ; ( addr u )
.ab6b						_byte_loop:
.ab6b		20 bd 97	jsr $97bd	                jsr xt_over     ; ( addr u addr )
.ab6e		20 60 a3	jsr $a360	                jsr xt_u_dot    ; ( addr u )
.ab71		20 82 9f	jsr $9f82	                jsr xt_space
.ab74		a9 bd		lda #$bd	                lda #<oc_index_table
.ab76		85 27		sta $27		                sta tmp2
.ab78		a9 ad		lda #$ad	                lda #>oc_index_table
.ab7a		85 28		sta $28		                sta tmp2+1
.ab7c		a1 02		lda ($02,x)	                lda (2,x)       ; get opcode that addr points to
.ab7e		85 2d		sta $2d		                sta scratch     ; Save opcode
.ab80		0a		asl a		                asl             ; multiply by two for offset
.ab81		90 02		bcc $ab85	                bcc +
.ab83		e6 28		inc $28		                inc tmp2+1      ; we're on second page
.ab85						+
.ab85		a8		tay		                tay             ; use Y as the index
.ab86		b1 27		lda ($27),y	                lda (tmp2),y    ; LSB
.ab88		85 29		sta $29		                sta tmp3
.ab8a		48		pha		                pha
.ab8b		c8		iny		                iny
.ab8c		b1 27		lda ($27),y	                lda (tmp2),y    ; MSB
.ab8e		85 2a		sta $2a		                sta tmp3+1
.ab90		48		pha		                pha
.ab91		b2 29		lda ($29)	                lda (tmp3)
.ab93		a8		tay		                tay                     ; save copy of lengths byte
.ab94		10 3c		bpl $abd2	                bpl _no_operand         ; bit 7 clear, single-byte instruction
.ab96		20 eb a5	jsr $a5eb	                jsr xt_zero             ; ( addr u 0 ) ZERO does not use Y
.ab99		f6 04		inc $04,x	                inc 4,x
.ab9b		d0 02		bne $ab9f	                bne +
.ab9d		f6 05		inc $05,x	                inc 5,x                 ; ( addr+1 u 0 )
.ab9f						+
.ab9f		b5 02		lda $02,x	                lda 2,x
.aba1		d0 02		bne $aba5	                bne +
.aba3		d6 03		dec $03,x	                dec 3,x
.aba5						+
.aba5		d6 02		dec $02,x	                dec 2,x                 ; ( addr+1 u-1 0 )
.aba7		a1 04		lda ($04,x)	                lda (4,x)
.aba9		95 00		sta $00,x	                sta 0,x                 ; LSB of operand ( addr+1 u-1 LSB )
.abab		85 2e		sta $2e		                sta scratch+1           ; Save a copy in the scratch buffer
.abad		98		tya		                tya                     ; retrieve copy of lengths byte
.abae		2a		rol a		                rol                     ; shift bit 6 to bit 7
.abaf		10 14		bpl $abc5	                bpl _print_operand
.abb1		f6 04		inc $04,x	                inc 4,x
.abb3		d0 02		bne $abb7	                bne +
.abb5		f6 05		inc $05,x	                inc 5,x                 ; ( addr+2 u-1 LSB )
.abb7						+
.abb7		b5 02		lda $02,x	                lda 2,x
.abb9		d0 02		bne $abbd	                bne +
.abbb		d6 03		dec $03,x	                dec 3,x
.abbd						+
.abbd		d6 02		dec $02,x	                dec 2,x                 ; ( addr+2 u-2 LSB )
.abbf		a1 04		lda ($04,x)	                lda (4,x)
.abc1		95 01		sta $01,x	                sta 1,x                 ; MSB of operand ( addr+2 u-2 opr )
.abc3		85 2f		sta $2f		                sta scratch+2           ; Save a copy in the scratch buffer
.abc5						_print_operand:
.abc5		ca		dex		                dex
.abc6		ca		dex		                dex
.abc7		a9 05		lda #$05	                lda #5
.abc9		95 00		sta $00,x	                sta 0,x
.abcb		74 01		stz $01,x	                stz 1,x                 ; ( addr+n u-n opr 5 )
.abcd		20 6c a3	jsr $a36c	                jsr xt_u_dot_r          ; U.R ( addr+n u-n )
.abd0		80 0b		bra $abdd	                bra _print_mnemonic
.abd2						_no_operand:
.abd2		ca		dex		                dex
.abd3		ca		dex		                dex
.abd4		a9 05		lda #$05	                lda #5
.abd6		95 00		sta $00,x	                sta 0,x
.abd8		74 01		stz $01,x	                stz 1,x                 ; ( addr u 5 )
.abda		20 88 9f	jsr $9f88	                jsr xt_spaces           ; ( addr u )
.abdd						_print_mnemonic:
.abdd		20 82 9f	jsr $9f82	                jsr xt_space
.abe0		ca		dex		                dex
.abe1		ca		dex		                dex                     ; ( addr u ? )
.abe2		68		pla		                pla                     ; MSB
.abe3		95 01		sta $01,x	                sta 1,x                 ; ( addr u MSB )
.abe5		68		pla		                pla                     ; LSB
.abe6		95 00		sta $00,x	                sta 0,x                 ; ( addr u addr-o )
.abe8		20 c1 88	jsr $88c1	                jsr xt_count            ; ( addr u addr-o u-o )
.abeb		74 01		stz $01,x	                stz 1,x                 ; paranoid
.abed		b5 00		lda $00,x	                lda 0,x
.abef		29 07		and #$07	                and #%00000111          ; ( addr u addr-o u-o )
.abf1		95 00		sta $00,x	                sta 0,x
.abf3		20 35 a3	jsr $a335	                jsr xt_type             ; ( addr u )
.abf6		a5 2d		lda $2d		                lda scratch
.abf8		c9 20		cmp #$20	                cmp #OpJSR
.abfa		d0 4e		bne $ac4a	                bne _not_jsr
.abfc		ca		dex		                dex
.abfd		ca		dex		                dex
.abfe		a9 05		lda #$05	                lda #5
.ac00		95 00		sta $00,x	                sta 0,x
.ac02		74 01		stz $01,x	                stz 1,x
.ac04		20 88 9f	jsr $9f88	                jsr xt_spaces
.ac07		a0 10		ldy #$10	                ldy #(_end_handlers - _special_handlers - 4)
.ac09		b9 36 ac	lda $ac36,y	_check_handler: lda _special_handlers,y
.ac0c		c5 2e		cmp $2e		                cmp scratch+1
.ac0e		d0 07		bne $ac17	                bne _next_handler
.ac10		b9 37 ac	lda $ac37,y	                lda _special_handlers+1,y
.ac13		c5 2f		cmp $2f		                cmp scratch+2
.ac15		f0 0c		beq $ac23	                beq _run_handler
.ac17		88		dey		_next_handler:  dey
.ac18		88		dey		                dey
.ac19		88		dey		                dey
.ac1a		88		dey		                dey
.ac1b		10 ec		bpl $ac09	                bpl _check_handler
.ac1d						_not_special:
.ac1d		20 6d ad	jsr $ad6d	                jsr disasm_jsr
.ac20		4c b4 ac	jmp $acb4	                jmp _printing_done
.ac23						_run_handler:
.ac23		b9 38 ac	lda $ac38,y	                lda _special_handlers+2,y
.ac26		85 30		sta $30		                sta scratch+3
.ac28		b9 39 ac	lda $ac39,y	                lda _special_handlers+3,y
.ac2b		85 31		sta $31		                sta scratch+4
.ac2d		20 33 ac	jsr $ac33	                jsr _dispatch_handler
.ac30		4c b4 ac	jmp $acb4	                jmp _printing_done
.ac33						_dispatch_handler:
.ac33		6c 30 00	jmp ($0030)	                jmp (scratch+3)
.ac36						_special_handlers:
>ac36		bd 92 4f ad			    .word literal_runtime,      disasm_literal
>ac3a		0d 9f fa ac			    .word sliteral_runtime,     disasm_sliteral
>ac3e		36 91 31 ad			    .word zero_branch_runtime,  disasm_0branch
>ac42		2c 91 3d ad			    .word zero_test_runtime,    disasm_0test
>ac46		1a 8b 45 ad			    .word do_runtime,           disasm_do
.ac4a						_end_handlers:
.ac4a						_not_jsr:
.ac4a		c9 4c		cmp #$4c	                cmp #OpJMP
.ac4c		d0 2c		bne $ac7a	                bne _not_jmp
.ac4e		a5 2e		lda $2e		                lda scratch+1   ; Copy the pointer.
.ac50		85 30		sta $30		                sta scratch+3
.ac52		a5 2f		lda $2f		                lda scratch+2
.ac54		85 31		sta $31		                sta scratch+4
.ac56		b2 30		lda ($30)	                lda (scratch+3)
.ac58		c9 20		cmp #$20	                cmp #OpJSR ; check for JSR
.ac5a		d0 58		bne $acb4	                bne _printing_done
.ac5c		e6 30		inc $30		                inc scratch+3
.ac5e		d0 02		bne $ac62	                bne +
.ac60		e6 31		inc $31		                inc scratch+4
.ac62						+
.ac62		b2 30		lda ($30)	                lda (scratch+3)
.ac64		c9 0d		cmp #$0d	                cmp #<sliteral_runtime
.ac66		d0 4c		bne $acb4	                bne _printing_done
.ac68		e6 30		inc $30		                inc scratch+3
.ac6a		d0 02		bne $ac6e	                bne +
.ac6c		e6 31		inc $31		                inc scratch+4
.ac6e						+
.ac6e		b2 30		lda ($30)	                lda (scratch+3)
.ac70		c9 9f		cmp #$9f	                cmp #>sliteral_runtime
.ac72		d0 40		bne $acb4	                bne _printing_done
.ac74		20 d0 ac	jsr $acd0	                jsr disasm_sliteral_jump
.ac77		4c b4 ac	jmp $acb4	                jmp _printing_done
.ac7a						_not_jmp:
.ac7a		c9 80		cmp #$80	                cmp #OpBRA            ; is it bra?
.ac7c		f0 06		beq $ac84	                beq _is_rel
.ac7e		29 1f		and #$1f	                and #$1F
.ac80		49 10		eor #$10	                eor #$10            ; do bottom five bits match xxx10000 ?
.ac82		d0 30		bne $acb4	                bne _printing_done
.ac84						_is_rel:
.ac84		a0 76		ldy #$76	                ldy #'v'            ; we'll indicate branch forward or back with v or ^
.ac86		ca		dex		                dex
.ac87		ca		dex		                dex
.ac88		74 01		stz $01,x	                stz 1,x
.ac8a		a5 2e		lda $2e		                lda scratch+1
.ac8c		95 00		sta $00,x	                sta 0,x
.ac8e		10 04		bpl $ac94	                bpl +
.ac90		d6 01		dec $01,x	                dec 1,x             ; for negative offsets extend the sign bit so add works out
.ac92		a0 5e		ldy #$5e	                ldy #'^'            ; it's a backward branch
.ac94		38		sec		+               sec                 ; start counting from address after opcode
.ac95		75 04		adc $04,x	                adc 4,x
.ac97		95 00		sta $00,x	                sta 0,x
.ac99		b5 01		lda $01,x	                lda 1,x
.ac9b		75 05		adc $05,x	                adc 5,x
.ac9d		95 01		sta $01,x	                sta 1,x
.ac9f		5a		phy		                phy                 ; save the direction indicator
.aca0		ca		dex		                dex
.aca1		ca		dex		                dex
.aca2		a9 09		lda #$09	                lda #9
.aca4		95 00		sta $00,x	                sta 0,x
.aca6		74 01		stz $01,x	                stz 1,x
.aca8		20 6c a3	jsr $a36c	                jsr xt_u_dot_r      ; print the destination with 5 leading spaces
.acab		a9 20		lda #$20	                lda #AscSp          ; print space and branch direction indicator
.acad		20 7b 8d	jsr $8d7b	                jsr emit_a
.acb0		68		pla		                pla
.acb1		20 7b 8d	jsr $8d7b	                jsr emit_a
.acb4						_printing_done:
.acb4		20 d5 88	jsr $88d5	                jsr xt_cr
.acb7		f6 02		inc $02,x	                inc 2,x
.acb9		d0 02		bne $acbd	                bne +
.acbb		f6 03		inc $03,x	                inc 3,x                 ; ( addr+1 u )
.acbd						+
.acbd		20 3b 97	jsr $973b	                jsr xt_one_minus        ; ( addr+1 u-1 )
.acc0		b5 00		lda $00,x	                lda 0,x                 ; All done?
.acc2		15 01		ora $01,x	                ora 1,x
.acc4		f0 07		beq $accd	                beq _done
.acc6		b5 01		lda $01,x	                lda 1,x                 ; Catch mid-instruction ranges
.acc8		30 03		bmi $accd	                bmi _done
.acca		4c 6b ab	jmp $ab6b	                jmp _byte_loop          ; out of range for BRA
.accd						_done:
.accd		4c e2 a1	jmp $a1e2	                jmp xt_two_drop         ; JSR/RTS
.acd0						disasm_sliteral_jump:
.acd0		20 0c a0	jsr $a00c	                jsr xt_swap
.acd3		ca		dex		                dex
.acd4		ca		dex		                dex
.acd5		a5 2e		lda $2e		                lda scratch+1
.acd7		95 00		sta $00,x	                sta 0,x
.acd9		a5 2f		lda $2f		                lda scratch+2
.acdb		95 01		sta $01,x	                sta 1,x
.acdd		20 0c a0	jsr $a00c	                jsr xt_swap
.ace0		20 86 94	jsr $9486	                jsr xt_minus
.ace3		20 3b 97	jsr $973b	                jsr xt_one_minus
.ace6		20 86 94	jsr $9486	                jsr xt_minus
.ace9		ca		dex		                dex
.acea		ca		dex		                dex
.aceb		a5 2e		lda $2e		                lda scratch+1
.aced		95 00		sta $00,x	                sta 0,x
.acef		a5 2f		lda $2f		                lda scratch+2
.acf1		95 01		sta $01,x	                sta 1,x
.acf3		20 3b 97	jsr $973b	                jsr xt_one_minus
.acf6		20 0c a0	jsr $a00c	                jsr xt_swap ; ( new_addr new_n )
.acf9		60		rts		                rts
.acfa						disasm_sliteral:
.acfa		a9 53		lda #$53	                lda #'S'
.acfc		20 7b 8d	jsr $8d7b	                jsr emit_a ; Print S before LITERAL so it becomes SLITERAL
.acff		a9 0c		lda #$0c	                lda #str_disasm_lit     ; "LITERAL "
.ad01		20 be d7	jsr $d7be	                jsr print_string_no_lf
.ad04		20 0c a0	jsr $a00c	                jsr xt_swap             ; switch to (u addr)
.ad07		20 47 97	jsr $9747	                jsr xt_one_plus
.ad0a		20 07 8d	jsr $8d07	                jsr xt_dup
.ad0d		20 05 8f	jsr $8f05	                jsr xt_fetch
.ad10		20 60 a3	jsr $a360	                jsr xt_u_dot            ; Print the address of the string
.ad13		20 d9 a1	jsr $a1d9	                jsr xt_two
.ad16		20 0b 99	jsr $990b	                jsr xt_plus
.ad19		20 07 8d	jsr $8d07	                jsr xt_dup
.ad1c		20 8a 99	jsr $998a	                jsr xt_question         ; Print the length of the string
.ad1f		20 47 97	jsr $9747	                jsr xt_one_plus
.ad22		20 0c a0	jsr $a00c	                jsr xt_swap            ; ( addr+4 u )
.ad25		ca		dex		                dex
.ad26		ca		dex		                dex
.ad27		a9 04		lda #$04	                lda #4
.ad29		95 00		sta $00,x	                sta 0,x
.ad2b		74 01		stz $01,x	                stz 1,x
.ad2d		20 86 94	jsr $9486	                jsr xt_minus            ; ( addr+4 u-4 )
.ad30		60		rts		                rts
.ad31						disasm_0branch:
.ad31		a9 30		lda #$30	                lda #'0'
.ad33		20 7b 8d	jsr $8d7b	                jsr emit_a ; Print 0 before BRANCH so it becomes 0BRANCH
.ad36						disasm_branch:
.ad36		a9 0e		lda #$0e	                lda #str_disasm_bra
.ad38		20 be d7	jsr $d7be	                jsr print_string_no_lf ; "BRANCH "
.ad3b		80 17		bra $ad54	                bra disasm_print_literal
.ad3d						disasm_0test:
.ad3d		a9 0f		lda #$0f	                lda #str_disasm_0test
.ad3f		20 be d7	jsr $d7be	                jsr print_string_no_lf
.ad42		4c 7b 8d	jmp $8d7b	                jmp emit_a
.ad45						disasm_do:
.ad45		a9 44		lda #$44	                lda #'D'
.ad47		20 7b 8d	jsr $8d7b	                jsr emit_a
.ad4a		a9 4f		lda #$4f	                lda #'O'
.ad4c		4c 7b 8d	jmp $8d7b	                jmp emit_a
.ad4f						disasm_literal:
.ad4f		a9 0c		lda #$0c	                lda #str_disasm_lit
.ad51		20 be d7	jsr $d7be	                jsr print_string_no_lf ; "LITERAL "
.ad54						disasm_print_literal:
.ad54		20 0c a0	jsr $a00c	                jsr xt_swap ; switch to (u addr)
.ad57		20 47 97	jsr $9747	                jsr xt_one_plus
.ad5a		20 07 8d	jsr $8d07	                jsr xt_dup
.ad5d		20 8a 99	jsr $998a	                jsr xt_question ; Print the value at the address
.ad60		20 47 97	jsr $9747	                jsr xt_one_plus
.ad63		20 0c a0	jsr $a00c	                jsr xt_swap ; (addr+2 u)
.ad66		20 3b 97	jsr $973b	                jsr xt_one_minus
.ad69		20 3b 97	jsr $973b	                jsr xt_one_minus ; (addr+2 u-2)
.ad6c		60		rts		                rts
.ad6d						disasm_jsr:
.ad6d		ca		dex		                dex
.ad6e		ca		dex		                dex
.ad6f		a5 2e		lda $2e		                lda scratch+1
.ad71		95 00		sta $00,x	                sta 0,x
.ad73		a5 2f		lda $2f		                lda scratch+2
.ad75		95 01		sta $01,x	                sta 1,x
.ad77		20 8e 91	jsr $918e	                jsr xt_int_to_name
.ad7a		b5 00		lda $00,x	                lda 0,x
.ad7c		15 01		ora $01,x	                ora 1,x
.ad7e		f0 07		beq $ad87	                beq _disasm_no_nt
.ad80		20 34 95	jsr $9534	                jsr xt_name_to_string
.ad83		20 35 a3	jsr $a335	                jsr xt_type
.ad86		60		rts		                rts
.ad87						_disasm_no_nt:
.ad87		20 86 8c	jsr $8c86	                jsr xt_drop ; the 0 indicating no name token
.ad8a		ca		dex		                dex
.ad8b		ca		dex		                dex
.ad8c		a5 2e		lda $2e		                lda scratch+1
.ad8e		95 00		sta $00,x	                sta 0,x
.ad90		a5 2f		lda $2f		                lda scratch+2
.ad92		95 01		sta $01,x	                sta 1,x
.ad94		ca		dex		                dex
.ad95		ca		dex		                dex
.ad96		a9 82		lda #$82	                lda #<underflow_1
.ad98		95 00		sta $00,x	                sta 0,x
.ad9a		a9 d7		lda #$d7	                lda #>underflow_1
.ad9c		95 01		sta $01,x	                sta 1,x
.ad9e		20 ae d6	jsr $d6ae	                jsr compare_16bit
.ada1		f0 02		beq $ada5	                beq _disasm_jsr_uflow_check_upper
.ada3		b0 14		bcs $adb9	                bcs _disasm_jsr_unknown
.ada5						_disasm_jsr_uflow_check_upper:
.ada5		a9 91		lda #$91	                lda #<underflow_4
.ada7		95 00		sta $00,x	                sta 0,x
.ada9		a9 d7		lda #$d7	                lda #>underflow_4
.adab		95 01		sta $01,x	                sta 1,x
.adad		20 ae d6	jsr $d6ae	                jsr compare_16bit
.adb0		f0 02		beq $adb4	                beq _disasm_jsr_soc
.adb2		90 05		bcc $adb9	                bcc _disasm_jsr_unknown
.adb4						_disasm_jsr_soc:
.adb4		a9 0d		lda #$0d	                lda #str_disasm_sdc
.adb6		20 be d7	jsr $d7be	                jsr print_string_no_lf  ; "STACK DEPTH CHECK"
.adb9						_disasm_jsr_unknown:
.adb9		20 e2 a1	jsr $a1e2	                jsr xt_two_drop
.adbc		60		rts		                rts
.adbd						oc_index_table:
>adbd		bd af c1 af 55 b4 55 b4		        .word oc00, oc01, oc__, oc__, oc04, oc05, oc06, oc__
>adc5		c9 af cf af d5 af 55 b4
>adcd		db af df af e5 af 55 b4		        .word oc08, oc09, oc0A, oc__, oc0C, oc0D, oc0E, oc0F
>add5		eb af ef af f3 af f7 af
>addd		fc af 00 b0 08 b0 55 b4		        .word oc10, oc11, oc12, oc__, oc14, oc15, oc16, oc17
>ade5		0f b0 15 b0 1c b0 23 b0
>aded		2a b0 2e b0 34 b0 55 b4		        .word oc18, oc19, oc1A, oc__, oc1C, oc1D, oc__, oc1F
>adf5		3a b0 3e b0 55 b4 44 b0
>adfd		4a b0 4e b0 55 b4 55 b4		        .word oc20, oc21, oc__, oc__, oc24, oc25, oc26, oc27
>ae05		56 b0 5c b0 62 b0 68 b0
>ae0d		6f b0 73 b0 79 b0 55 b4		        .word oc28, oc29, oc2A, oc__, OC2C, oc2D, oc2E, oc2F
>ae15		7f b0 83 b0 88 b0 8c b0
>ae1d		91 b0 95 b0 9d b0 55 b4		        .word oc30, oc31, oc32, oc__, oc34, oc35, oc36, oc37
>ae25		a4 b0 ac b0 b3 b0 ba b0
>ae2d		c1 b0 c5 b0 cb b0 55 b4		        .word oc38, oc39, oc3A, oc__, oc3C, oc3D, oc3E, oc0F
>ae35		d1 b0 d7 b0 dd b0 f7 af
>ae3d		e8 b0 ec b0 55 b4 55 b4		        .word oc40, oc41, oc__, oc__, oc__, oc45, oc46, oc47
>ae45		55 b4 f4 b0 fa b0 00 b1
>ae4d		07 b1 0b b1 11 b1 55 b4		        .word oc48, oc49, oc4A, oc__, oc4C, oc4D, oc4E, oc4F
>ae55		17 b1 1b b1 1f b1 23 b1
>ae5d		28 b1 2c b1 34 b1 55 b4		        .word oc50, oc51, oc52, oc__, oc__, oc55, oc56, oc57
>ae65		55 b4 3b b1 42 b1 49 b1
>ae6d		50 b1 54 b1 5a b1 55 b4		        .word oc58, oc59, oc5A, oc__, oc__, oc__, oc5E, oc5F
>ae75		55 b4 55 b4 64 b1 6a b1
>ae7d		6f b1 73 b1 55 b4 55 b4		        .word oc60, oc61, oc__, oc__, oc64, oc65, oc66, oc67
>ae85		7b b1 81 b1 87 b1 8d b1
>ae8d		94 b1 98 b1 9e b1 55 b4		        .word oc68, oc69, oc6A, oc__, oc6C, oc6D, oc6E, oc6F
>ae95		a4 b1 aa b1 ae b1 b2 b1
>ae9d		b7 b1 bb b1 c3 b1 55 b4		        .word oc70, oc71, oc72, oc__, oc74, oc75, oc76, oc77
>aea5		ca b1 d1 b1 d8 b1 df b1
>aead		e6 b1 ea b1 f0 b1 55 b4		        .word oc78, oc79, oc7A, oc__, oc7C, oc7D, oc7E, oc7F
>aeb5		f4 b1 fb b1 01 b2 07 b2
>aebd		0c b2 10 b2 55 b4 55 b4		        .word oc80, oc81, oc__, oc__, oc84, oc85, oc86, oc__
>aec5		18 b2 1e b2 24 b2 55 b4
>aecd		2a b2 2e b2 34 b2 55 b4		        .word oc88, oc89, oc8A, oc__, oc8C, oc8D, oc8E, oc8F
>aed5		38 b2 3c b2 40 b2 44 b2
>aedd		49 b2 4d b2 55 b2 55 b4		        .word oc90, oc91, oc92, oc__, oc94, oc95, oc96, oc97
>aee5		5c b2 63 b2 6a b2 71 b2
>aeed		78 b2 7c b2 82 b2 55 b4		        .word oc98, oc99, oc9A, oc__, oc9C, oc9D, oc9E, oc9F
>aef5		86 b2 8a b2 90 b2 96 b2
>aefd		9b b2 a1 b2 a9 b2 55 b4		        .word ocA0, ocA1, ocA2, oc__, ocA4, ocA5, ocA6, ocA7
>af05		af b2 b5 b2 bb b2 c1 b2
>af0d		c8 b2 cc b2 d2 b2 55 b4		        .word ocA8, ocA9, ocAA, oc__, ocAC, ocAD, ocAE, ocAF
>af15		d6 b2 da b2 de b2 e2 b2
>af1d		e7 b2 eb b2 f3 b2 55 b4		        .word ocB0, ocB1, ocB2, oc__, ocB4, ocB5, ocB6, ocB7
>af25		fa b2 01 b3 08 b3 0f b3
>af2d		16 b3 1a b3 20 b3 55 b4		        .word ocB8, ocB9, ocBA, oc__, ocBC, ocBD, ocBE, ocBF
>af35		24 b3 2a b3 30 b3 36 b3
>af3d		3b b3 41 b3 55 b4 55 b4		        .word ocC0, ocC1, oc__, oc__, ocC4, ocC5, ocC6, ocC7
>af45		49 b3 4f b3 55 b3 5b b3
>af4d		62 b3 66 b3 6c b3 55 b4		        .word ocC8, ocC9, ocCA, oc__, ocCC, ocCD, ocCE, ocCF
>af55		70 b3 74 b3 78 b3 7c b3
>af5d		81 b3 85 b3 8d b3 55 b4		        .word ocD0, ocD1, ocD2, oc__, oc__, ocD5, ocD6, ocD7
>af65		55 b4 94 b3 9b b3 a2 b3
>af6d		a9 b3 ad b3 b3 b3 55 b4		        .word ocD8, ocD9, ocDA, oc__, oc__, ocDD, ocDE, ocDF
>af75		55 b4 b7 b3 bd b3 c3 b3
>af7d		c8 b3 ce b3 55 b4 55 b4		        .word ocE0, ocE1, oc__, oc__, ocE4, ocE5, ocE6, ocE7
>af85		d6 b3 dc b3 e2 b3 e8 b3
>af8d		ef b3 f3 b3 f9 b3 55 b4		        .word ocE8, ocE9, ocEA, oc__, ocEC, ocED, ocEE, ocEF
>af95		fd b3 01 b4 05 b4 09 b4
>af9d		0e b4 12 b4 1a b4 55 b4		        .word ocF0, ocF1, ocF2, oc__, oc__, ocF5, ocF6, ocF7
>afa5		55 b4 21 b4 28 b4 2f b4
>afad		36 b4 3a b4 40 b4 55 b4		        .word ocF8, ocF9, ocFA, oc__, oc__, ocFD, ocFE, ocFF
>afb5		55 b4 44 b4 4a b4 50 b4
.afbd						oc_table:
>afbd		83 62 72 6b				oc00:	.text 2*64+3, "brk"              ; enforce the signature byte
>afc1		87 6f 72 61 2e 7a 78 69			oc01:	.text 2*64+7, "ora.zxi"
>afc9		85 74 73 62 2e 7a		    oc04:   .text 2*64+5, "tsb.z"
>afcf		85 6f 72 61 2e 7a			oc05:	.text 2*64+5, "ora.z"
>afd5		85 61 73 6c 2e 7a			oc06:	.text 2*64+5, "asl.z"
>afdb		43 70 68 70				oc08:	.text 1*64+3, "php"
>afdf		85 6f 72 61 2e 23			oc09:	.text 2*64+5, "ora.#"
>afe5		45 61 73 6c 2e 61			oc0A:	.text 1*64+5, "asl.a"
>afeb		c3 74 73 62				oc0C:	.text 3*64+3, "tsb"
>afef		c3 6f 72 61				oc0D:	.text 3*64+3, "ora"
>aff3		c3 61 73 6c				oc0E:	.text 3*64+3, "asl"
>aff7		c4 62 62 72 30				oc0F:	.text 3*64+4, "bbr0"
>affc		83 62 70 6c				oc10:	.text 2*64+3, "bpl"
>b000		87 6f 72 61 2e 7a 69 79			oc11:	.text 2*64+7, "ora.ziy"
>b008		86 6f 72 61 2e 7a 69			oc12:	.text 2*64+6, "ora.zi"
>b00f		85 74 72 62 2e 7a			oc14:	.text 2*64+5, "trb.z"
>b015		86 6f 72 61 2e 7a 78			oc15:	.text 2*64+6, "ora.zx"
>b01c		86 61 73 6c 2e 7a 78			oc16:	.text 2*64+6, "asl.zx"
>b023		86 72 6d 62 31 2e 7a			oc17:	.text 2*64+6, "rmb1.z"
>b02a		43 63 6c 63				oc18:	.text 1*64+3, "clc"
>b02e		c5 6f 72 61 2e 79			oc19:	.text 3*64+5, "ora.y"
>b034		45 69 6e 63 2e 61			oc1A:	.text 1*64+5, "inc.a"
>b03a		c3 74 72 62				oc1C:	.text 3*64+3, "trb"
>b03e		c5 6f 72 61 2e 78			oc1D:	.text 3*64+5, "ora.x"
>b044		c5 61 73 6c 2e 78			oc1F:	.text 3*64+5, "asl.x"
>b04a		c3 6a 73 72				oc20:	.text 3*64+3, "jsr"
>b04e		87 61 6e 64 2e 7a 78 69			oc21:	.text 2*64+7, "and.zxi"
>b056		85 62 69 74 2e 7a			oc24:	.text 2*64+5, "bit.z"
>b05c		85 61 6e 64 2e 7a			oc25:	.text 2*64+5, "and.z"
>b062		85 72 6f 6c 2e 7a			oc26:	.text 2*64+5, "rol.z"
>b068		86 72 6d 62 32 2e 7a			oc27:	.text 2*64+6, "rmb2.z"
>b06f		43 70 6c 70				oc28:	.text 1*64+3, "plp"
>b073		85 61 6e 64 2e 23			oc29:	.text 2*64+5, "and.#"
>b079		45 72 6f 6c 2e 61			oc2A:	.text 1*64+5, "rol.a"
>b07f		c3 62 69 74				oc2C:	.text 3*64+3, "bit"
>b083		c4 61 6e 64 2e				oc2D:	.text 3*64+4, "and."
>b088		c3 72 6f 6c				oc2E:	.text 3*64+3, "rol"
>b08c		c4 62 62 72 32				oc2F:	.text 3*64+4, "bbr2"
>b091		83 62 6d 69				oc30:	.text 2*64+3, "bmi"
>b095		87 61 6e 64 2e 7a 69 79			oc31:	.text 2*64+7, "and.ziy"
>b09d		86 61 6e 64 2e 7a 69			oc32:	.text 2*64+6, "and.zi"
>b0a4		87 62 69 74 2e 7a 78 69			oc34:	.text 2*64+7, "bit.zxi"
>b0ac		86 61 6e 64 2e 7a 78			oc35:	.text 2*64+6, "and.zx"
>b0b3		86 72 6f 6c 2e 7a 78			oc36:	.text 2*64+6, "rol.zx"
>b0ba		86 72 6d 62 33 2e 7a			oc37:	.text 2*64+6, "rmb3.z"
>b0c1		43 73 65 63				oc38:	.text 1*64+3, "sec"
>b0c5		c5 61 6e 64 2e 79			oc39:	.text 3*64+5, "and.y"
>b0cb		45 64 65 63 2e 61			oc3A:	.text 1*64+5, "dec.a"
>b0d1		c5 62 69 74 2e 78			oc3C:	.text 3*64+5, "bit.x"
>b0d7		c5 61 6e 64 2e 78			oc3D:	.text 3*64+5, "and.x"
>b0dd		c5 72 6f 6c 2e 78			oc3E:	.text 3*64+5, "rol.x"
>b0e3		c4 62 62 72 33				oc3F:	.text 3*64+4, "bbr3"
>b0e8		43 72 74 69				oc40:	.text 1*64+3, "rti"
>b0ec		87 65 6f 72 2e 7a 78 69			oc41:	.text 2*64+7, "eor.zxi"
>b0f4		85 65 6f 72 2e 7a			oc45:	.text 2*64+5, "eor.z"
>b0fa		85 6c 73 72 2e 7a			oc46:	.text 2*64+5, "lsr.z"
>b100		86 72 62 6d 34 2e 7a			oc47:	.text 2*64+6, "rbm4.z"
>b107		43 70 68 61				oc48:	.text 1*64+3, "pha"
>b10b		85 65 6f 72 2e 23			oc49:	.text 2*64+5, "eor.#"
>b111		45 6c 73 72 2e 61			oc4A:	.text 1*64+5, "lsr.a"
>b117		c3 6a 6d 70				oc4C:	.text 3*64+3, "jmp"
>b11b		c3 65 6f 72				oc4D:	.text 3*64+3, "eor"
>b11f		c3 6c 73 72				oc4E:	.text 3*64+3, "lsr"
>b123		c4 62 62 72 34				oc4F:	.text 3*64+4, "bbr4"
>b128		83 62 76 63				oc50:	.text 2*64+3, "bvc"
>b12c		87 65 6f 72 2e 7a 69 79			oc51:	.text 2*64+7, "eor.ziy"
>b134		86 65 6f 72 2e 7a 69			oc52:	.text 2*64+6, "eor.zi"
>b13b		86 65 6f 72 2e 7a 78			oc55:	.text 2*64+6, "eor.zx"
>b142		86 6c 73 72 2e 7a 78			oc56:	.text 2*64+6, "lsr.zx"
>b149		86 72 62 6d 35 2e 7a			oc57:	.text 2*64+6, "rbm5.z"
>b150		43 63 6c 69				oc58:	.text 1*64+3, "cli"
>b154		c5 65 6f 72 2e 79			oc59:	.text 3*64+5, "eor.y"
>b15a		43 70 68 79				oc5A:	.text 1*64+3, "phy"
>b15e		c5 65 6f 72 2e 78			oc5D:	.text 3*64+5, "eor.x"
>b164		c5 6c 73 72 2e 78			oc5E:	.text 3*64+5, "lsr.x"
>b16a		c4 62 62 72 35				oc5F:	.text 3*64+4, "bbr5"
>b16f		43 72 74 73				oc60:	.text 1*64+3, "rts"
>b173		87 61 64 63 2e 7a 78 69			oc61:	.text 2*64+7, "adc.zxi"
>b17b		85 73 74 7a 2e 7a			oc64:	.text 2*64+5, "stz.z"
>b181		85 61 64 63 2e 7a			oc65:	.text 2*64+5, "adc.z"
>b187		85 72 6f 72 2e 7a			oc66:	.text 2*64+5, "ror.z"
>b18d		86 72 6d 62 36 2e 7a			oc67:	.text 2*64+6, "rmb6.z"
>b194		43 70 6c 61				oc68:	.text 1*64+3, "pla"
>b198		85 61 64 63 2e 23			oc69:	.text 2*64+5, "adc.#"
>b19e		45 72 6f 72 2e 61			oc6A:	.text 1*64+5, "ror.a"
>b1a4		c5 6a 6d 70 2e 69			oc6C:	.text 3*64+5, "jmp.i"
>b1aa		c3 61 64 63				oc6D:	.text 3*64+3, "adc"
>b1ae		c3 72 6f 72				oc6E:	.text 3*64+3, "ror"
>b1b2		c4 62 62 72 36				oc6F:	.text 3*64+4, "bbr6"
>b1b7		83 62 76 73				oc70:	.text 2*64+3, "bvs"
>b1bb		87 61 64 63 2e 7a 69 79			oc71:	.text 2*64+7, "adc.ziy"
>b1c3		86 61 64 63 2e 7a 69			oc72:	.text 2*64+6, "adc.zi"
>b1ca		86 73 74 7a 2e 7a 78			oc74:	.text 2*64+6, "stz.zx"
>b1d1		86 61 64 63 2e 7a 78			oc75:	.text 2*64+6, "adc.zx"
>b1d8		86 72 6f 72 2e 7a 78			oc76:	.text 2*64+6, "ror.zx"
>b1df		86 72 6d 62 37 2e 7a			oc77:	.text 2*64+6, "rmb7.z"
>b1e6		43 73 65 69				oc78:	.text 1*64+3, "sei"
>b1ea		c5 61 64 63 2e 79			oc79:	.text 3*64+5, "adc.y"
>b1f0		43 70 6c 79				oc7A:	.text 1*64+3, "ply"
>b1f4		c6 6a 6d 70 2e 78 69			oc7C:	.text 3*64+6, "jmp.xi"
>b1fb		c5 61 64 63 2e 78			oc7D:	.text 3*64+5, "adc.x"
>b201		c5 72 6f 72 2e 78			oc7E:	.text 3*64+5, "ror.x"
>b207		c4 62 62 72 37				oc7F:	.text 3*64+4, "bbr7"
>b20c		83 62 72 61				oc80:	.text 2*64+3, "bra"
>b210		87 73 74 61 2e 7a 78 69			oc81:	.text 2*64+7, "sta.zxi"
>b218		85 73 74 79 2e 7a			oc84:	.text 2*64+5, "sty.z"
>b21e		85 73 74 61 2e 7a			oc85:	.text 2*64+5, "sta.z"
>b224		85 73 74 78 2e 7a			oc86:	.text 2*64+5, "stx.z"
>b22a		43 64 65 79				oc88:	.text 1*64+3, "dey"
>b22e		85 62 69 74 2e 23			oc89:	.text 2*64+5, "bit.#"
>b234		43 74 78 61				oc8A:	.text 1*64+3, "txa"
>b238		c3 73 74 79				oc8C:	.text 3*64+3, "sty"
>b23c		c3 73 74 61				oc8D:	.text 3*64+3, "sta"
>b240		c3 73 74 78				oc8E:	.text 3*64+3, "stx"
>b244		c4 62 62 73 30				oc8F:	.text 3*64+4, "bbs0"
>b249		83 62 63 63				oc90:	.text 2*64+3, "bcc"
>b24d		87 73 74 61 2e 7a 69 79			oc91:	.text 2*64+7, "sta.ziy"
>b255		86 73 74 61 2e 7a 69			oc92:	.text 2*64+6, "sta.zi"
>b25c		86 73 74 79 2e 7a 78			oc94:	.text 2*64+6, "sty.zx"
>b263		86 73 74 61 2e 7a 78			oc95:	.text 2*64+6, "sta.zx"
>b26a		86 73 74 78 2e 7a 79			oc96:	.text 2*64+6, "stx.zy"
>b271		86 73 6d 62 31 2e 7a			oc97:	.text 2*64+6, "smb1.z"
>b278		43 74 79 61				oc98:	.text 1*64+3, "tya"
>b27c		c5 73 74 61 2e 79			oc99:	.text 3*64+5, "sta.y"
>b282		43 74 78 73				oc9A:	.text 1*64+3, "txs"
>b286		c3 73 74 7a				oc9C:	.text 3*64+3, "stz"
>b28a		c5 73 74 61 2e 78			oc9D:	.text 3*64+5, "sta.x"
>b290		c5 73 74 7a 2e 78			oc9E:	.text 3*64+5, "stz.x"
>b296		c4 62 62 73 31				oc9F:	.text 3*64+4, "bbs1"
>b29b		85 6c 64 79 2e 23			ocA0:	.text 2*64+5, "ldy.#"
>b2a1		87 6c 64 61 2e 7a 78 69			ocA1:	.text 2*64+7, "lda.zxi"
>b2a9		85 6c 64 78 2e 23			ocA2:	.text 2*64+5, "ldx.#"
>b2af		85 6c 64 79 2e 7a			ocA4:	.text 2*64+5, "ldy.z"
>b2b5		85 6c 64 61 2e 7a			ocA5:	.text 2*64+5, "lda.z"
>b2bb		85 6c 64 78 2e 7a			ocA6:	.text 2*64+5, "ldx.z"
>b2c1		86 73 6d 62 32 2e 7a			ocA7:	.text 2*64+6, "smb2.z"
>b2c8		43 74 61 79				ocA8:	.text 1*64+3, "tay"
>b2cc		85 6c 64 61 2e 23			ocA9:	.text 2*64+5, "lda.#"
>b2d2		43 74 61 78				ocAA:	.text 1*64+3, "tax"
>b2d6		c3 6c 64 79				ocAC:	.text 3*64+3, "ldy"
>b2da		c3 6c 64 61				ocAD:	.text 3*64+3, "lda"
>b2de		c3 6c 64 78				ocAE:	.text 3*64+3, "ldx"
>b2e2		c4 62 62 73 32				ocAF:	.text 3*64+4, "bbs2"
>b2e7		83 62 63 73				ocB0:	.text 2*64+3, "bcs"
>b2eb		87 6c 64 61 2e 7a 69 79			ocB1:	.text 2*64+7, "lda.ziy"
>b2f3		86 6c 64 61 2e 7a 69			ocB2:	.text 2*64+6, "lda.zi"
>b2fa		86 6c 64 79 2e 7a 78			ocB4:	.text 2*64+6, "ldy.zx"
>b301		86 6c 64 61 2e 7a 78			ocB5:	.text 2*64+6, "lda.zx"
>b308		86 6c 64 78 2e 7a 79			ocB6:	.text 2*64+6, "ldx.zy"
>b30f		86 73 6d 62 33 2e 7a			ocB7:	.text 2*64+6, "smb3.z"
>b316		43 63 6c 76				ocB8:	.text 1*64+3, "clv"
>b31a		c5 6c 64 61 2e 79			ocB9:	.text 3*64+5, "lda.y"
>b320		43 74 73 78				ocBA:	.text 1*64+3, "tsx"
>b324		c5 6c 64 79 2e 78			ocBC:	.text 3*64+5, "ldy.x"
>b32a		c5 6c 64 61 2e 78			ocBD:	.text 3*64+5, "lda.x"
>b330		c5 6c 64 78 2e 79			ocBE:	.text 3*64+5, "ldx.y"
>b336		c4 62 62 73 34				ocBF:	.text 3*64+4, "bbs4"
>b33b		85 63 70 79 2e 23			ocC0:	.text 2*64+5, "cpy.#"
>b341		87 63 6d 70 2e 7a 78 69			ocC1:	.text 2*64+7, "cmp.zxi"
>b349		85 63 70 79 2e 7a			ocC4:	.text 2*64+5, "cpy.z"
>b34f		85 63 6d 70 2e 7a			ocC5:	.text 2*64+5, "cmp.z"
>b355		85 64 65 63 2e 7a			ocC6:	.text 2*64+5, "dec.z"
>b35b		86 73 6d 62 34 2e 7a			ocC7:	.text 2*64+6, "smb4.z"
>b362		43 69 6e 79				ocC8:	.text 1*64+3, "iny"
>b366		85 63 6d 70 2e 23			ocC9:	.text 2*64+5, "cmp.#"
>b36c		43 64 65 78				ocCA:	.text 1*64+3, "dex"
>b370		c3 63 70 79				ocCC:	.text 3*64+3, "cpy"
>b374		c3 63 6d 70				ocCD:	.text 3*64+3, "cmp"
>b378		c3 64 65 63				ocCE:	.text 3*64+3, "dec"
>b37c		c4 62 62 73 34				ocCF:	.text 3*64+4, "bbs4"
>b381		83 62 6e 65				ocD0:	.text 2*64+3, "bne"
>b385		87 63 6d 70 2e 7a 69 79			ocD1:	.text 2*64+7, "cmp.ziy"
>b38d		86 63 6d 70 2e 7a 69			ocD2:	.text 2*64+6, "cmp.zi"
>b394		86 63 6d 70 2e 7a 78			ocD5:	.text 2*64+6, "cmp.zx"
>b39b		86 64 65 63 2e 7a 78			ocD6:	.text 2*64+6, "dec.zx"
>b3a2		86 73 6d 62 35 2e 7a			ocD7:	.text 2*64+6, "smb5.z"
>b3a9		43 63 6c 64				ocD8:	.text 1*64+3, "cld"
>b3ad		c5 63 6d 70 2e 79			ocD9:	.text 3*64+5, "cmp.y"
>b3b3		43 70 68 78				ocDA:	.text 1*64+3, "phx"
>b3b7		c5 63 6d 70 2e 78			ocDD:	.text 3*64+5, "cmp.x"
>b3bd		c5 64 65 63 2e 78			ocDE:	.text 3*64+5, "dec.x"
>b3c3		c4 62 62 73 35				ocDF:	.text 3*64+4, "bbs5"
>b3c8		85 63 70 78 2e 23			ocE0:	.text 2*64+5, "cpx.#"
>b3ce		87 73 62 63 2e 7a 78 69			ocE1:	.text 2*64+7, "sbc.zxi"
>b3d6		85 63 70 78 2e 7a			ocE4:	.text 2*64+5, "cpx.z"
>b3dc		85 73 62 63 2e 7a			ocE5:	.text 2*64+5, "sbc.z"
>b3e2		85 69 6e 63 2e 7a			ocE6:	.text 2*64+5, "inc.z"
>b3e8		86 73 6d 62 36 2e 7a			ocE7:	.text 2*64+6, "smb6.z"
>b3ef		43 69 6e 78				ocE8:	.text 1*64+3, "inx"
>b3f3		85 73 62 63 2e 23			ocE9:	.text 2*64+5, "sbc.#"
>b3f9		43 6e 6f 70				ocEA:	.text 1*64+3, "nop"
>b3fd		c3 63 70 78				ocEC:	.text 3*64+3, "cpx"
>b401		c3 73 62 63				ocED:	.text 3*64+3, "sbc"
>b405		c3 69 6e 63				ocEE:	.text 3*64+3, "inc"
>b409		c4 62 62 73 36				ocEF:	.text 3*64+4, "bbs6"
>b40e		83 62 65 71				ocF0:	.text 2*64+3, "beq"
>b412		87 73 62 63 2e 7a 69 79			ocF1:	.text 2*64+7, "sbc.ziy"
>b41a		86 73 62 63 2e 7a 69			ocF2:	.text 2*64+6, "sbc.zi"
>b421		86 73 62 63 2e 7a 78			ocF5:	.text 2*64+6, "sbc.zx"
>b428		86 69 6e 63 2e 7a 78			ocF6:	.text 2*64+6, "inc.zx"
>b42f		86 73 6d 62 37 2e 7a			ocF7:	.text 2*64+6, "smb7.z"
>b436		43 73 65 64				ocF8:	.text 1*64+3, "sed"
>b43a		c5 73 62 63 2e 79			ocF9:	.text 3*64+5, "sbc.y"
>b440		43 70 6c 78				ocFA:	.text 1*64+3, "plx"
>b444		c5 73 62 63 2e 78			ocFD:	.text 3*64+5, "sbc.x"
>b44a		c5 69 6e 63 2e 78			ocFE:	.text 3*64+5, "inc.x"
>b450		c4 62 62 73 37				ocFF:	.text 3*64+4, "bbs7"
>b455		01 3f					oc__:	.text 1, "?"
.b457						disassembler_end:

;******  Return to file: platform/../taliforth.asm


;******  Processing file: platform/../ed.asm

=$0035						ed_head  = tmped    ; pointer to first list element (addr) (2 bytes)
=$0037						ed_cur   = tmped+2  ; current line number (1 is first line) (2 bytes)
=$0039						ed_flags = tmped+4  ; Flags used by ed, where
=$003a						ed_base  = tmped+5  ; used to hold BASE and put it back at the end.
.b457						ed6502:
.b457		a5 18		lda $18		                lda base
.b459		85 3a		sta $3a		                sta ed_base
.b45b		a9 0a		lda #$0a	                lda #10
.b45d		85 18		sta $18		                sta base
.b45f		64 35		stz $35		                stz ed_head
.b461		64 36		stz $36		                stz ed_head+1
.b463		64 37		stz $37		                stz ed_cur
.b465		64 38		stz $38		                stz ed_cur+1
.b467		64 39		stz $39		                stz ed_flags
.b469		20 eb a5	jsr $a5eb	                jsr xt_zero
.b46c		20 eb a5	jsr $a5eb	                jsr xt_zero             ; ( addr-t u-t )
.b46f		20 d5 88	jsr $88d5	                jsr xt_cr
.b472						ed_input_loop:
.b472		a9 81		lda #$81	                lda #%10000001
.b474		14 39		trb $39		                trb ed_flags
.b476		20 51 b9	jsr $b951	                jsr ed_get_input
.b479		a5 0e		lda $0e		                lda ciblen
.b47b		d0 1f		bne $b49c	                bne _command_mode
.b47d		ca		dex		                dex
.b47e		ca		dex		                dex                     ; ( addr-t u-t ? )
.b47f		a5 37		lda $37		                lda ed_cur
.b481		95 00		sta $00,x	                sta 0,x
.b483		a5 38		lda $38		                lda ed_cur+1
.b485		95 01		sta $01,x	                sta 1,x                 ; ( addr-t u-t u )
.b487		a9 80		lda #$80	                lda #%10000000
.b489		04 39		tsb $39		                tsb ed_flags
.b48b		20 47 97	jsr $9747	                jsr xt_one_plus         ; ( addr-t u-t u+1 )
.b48e		20 6d b9	jsr $b96d	                jsr ed_is_valid_line
.b491		b0 03		bcs $b496	                bcs +
.b493		4c 41 b9	jmp $b941	                jmp ed_error_1drop
.b496						+
.b496		20 eb a5	jsr $a5eb	                jsr xt_zero             ; ( addr-t u-t u+1 0 )
.b499		4c 67 b5	jmp $b567	                jmp _line_number_only_from_external
.b49c						_command_mode:
.b49c		20 eb a5	jsr $a5eb	                jsr xt_zero             ; parameter 1 is NOS ( addr-t u-t 0 )
.b49f		20 eb a5	jsr $a5eb	                jsr xt_zero             ; parameter 2 is TOS ( addr-t u-t 0 0 )
.b4a2						_prefix_dot:
.b4a2		b2 0c		lda ($0c)	                lda (cib)
.b4a4		c9 2e		cmp #$2e	                cmp #'.'                ; ASCII '.'
.b4a6		d0 3a		bne $b4e2	                bne _prefix_dollar
.b4a8		20 62 b9	jsr $b962	                jsr ed_have_text
.b4ab		a5 37		lda $37		                lda ed_cur
.b4ad		95 02		sta $02,x	                sta 2,x
.b4af		a5 38		lda $38		                lda ed_cur+1
.b4b1		95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t cur 0 )
.b4b3		a9 80		lda #$80	                lda #%10000000
.b4b5		04 39		tsb $39		                tsb ed_flags
.b4b7		a5 0e		lda $0e		                lda ciblen
.b4b9		3a		dec a		                dea                     ; sets Z if A was 1
.b4ba		d0 03		bne $b4bf	                bne +
.b4bc		4c 67 b5	jmp $b567	                jmp _line_number_only_from_external
.b4bf						+
.b4bf		ca		dex		                dex
.b4c0		ca		dex		                dex
.b4c1		ca		dex		                dex
.b4c2		ca		dex		                dex
.b4c3		a5 0c		lda $0c		                lda cib
.b4c5		95 02		sta $02,x	                sta 2,x
.b4c7		a5 0d		lda $0d		                lda cib+1
.b4c9		95 03		sta $03,x	                sta 3,x
.b4cb		a5 0e		lda $0e		                lda ciblen
.b4cd		95 00		sta $00,x	                sta 0,x
.b4cf		a5 0f		lda $0f		                lda ciblen+1
.b4d1		95 01		sta $01,x	                sta 1,x
.b4d3		20 3b 97	jsr $973b	                jsr xt_one_minus        ; ( addr-t u-t para1 0 addr u-1 )
.b4d6		20 0c a0	jsr $a00c	                jsr xt_swap             ; ( addr-t u-t para1 0 u-1 addr )
.b4d9		20 47 97	jsr $9747	                jsr xt_one_plus         ; ( addr-t u-t para1 0 u-1 addr+1 )
.b4dc		20 0c a0	jsr $a00c	                jsr xt_swap             ; ( addr-t u-t para1 0 addr+1 u-1 )
.b4df		4c bf b5	jmp $b5bf	                jmp _check_for_para2
.b4e2						_prefix_dollar:
.b4e2		b2 0c		lda ($0c)	                lda (cib)
.b4e4		c9 24		cmp #$24	                cmp #'$'
.b4e6		d0 1c		bne $b504	                bne _prefix_percent
.b4e8		20 62 b9	jsr $b962	                jsr ed_have_text
.b4eb		e8		inx		                inx
.b4ec		e8		inx		                inx                     ; ( addr-t u-t 0 )
.b4ed		20 8f b9	jsr $b98f	                jsr ed_last_line          ; ( addr-t u-t 0 para1 )
.b4f0		20 0c a0	jsr $a00c	                jsr xt_swap             ; SWAP ( addr-t u-t para1 0 )
.b4f3		a9 80		lda #$80	                lda #%10000000
.b4f5		04 39		tsb $39		                tsb ed_flags
.b4f7		a5 0e		lda $0e		                lda ciblen
.b4f9		3a		dec a		                dea                     ; sets Z if A was 1
.b4fa		d0 03		bne $b4ff	                bne +
.b4fc		4c 67 b5	jmp $b567	                jmp _line_number_only_from_external
.b4ff						+
.b4ff		a0 01		ldy #$01	                ldy #01
.b501		4c 3b b6	jmp $b63b	                jmp _check_command
.b504						_prefix_percent:
.b504		b2 0c		lda ($0c)	                lda (cib)
.b506		c9 25		cmp #$25	                cmp #'%'                ; ASCII '%'
.b508		f0 04		beq $b50e	                beq _whole_text
.b50a		c9 2c		cmp #$2c	                cmp #','                ; ASCII ','
.b50c		d0 17		bne $b525	                bne _prefix_semicolon
.b50e						_whole_text:
.b50e		20 62 b9	jsr $b962	                jsr ed_have_text
.b511		a9 01		lda #$01	                lda #01
.b513		95 02		sta $02,x	                sta 2,x                 ; LSB of NOS is para 1
.b515		74 03		stz $03,x	                stz 3,x                 ; ( addr-t u-t para1 0 )
.b517						_semicolon_entry:
.b517		e8		inx		                inx
.b518		e8		inx		                inx                     ; DROP ( addr-t u-t para1 )
.b519		20 8f b9	jsr $b98f	                jsr ed_last_line          ; ( addr-t u-t para1 para2 )
.b51c		a9 80		lda #$80	                lda #%10000000
.b51e		04 39		tsb $39		                tsb ed_flags
.b520		a0 01		ldy #$01	                ldy #01
.b522		4c 3b b6	jmp $b63b	                jmp _check_command
.b525						_prefix_semicolon:
.b525		b2 0c		lda ($0c)	                lda (cib)
.b527		c9 3b		cmp #$3b	                cmp #';'                ; ASCII ';'
.b529		d0 0d		bne $b538	                bne _prefix_number
.b52b		20 62 b9	jsr $b962	                jsr ed_have_text
.b52e		a5 37		lda $37		                lda ed_cur
.b530		95 02		sta $02,x	                sta 2,x
.b532		a5 38		lda $38		                lda ed_cur+1
.b534		95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t cur 0 )
.b536		80 df		bra $b517	                bra _semicolon_entry
.b538						_prefix_number:
.b538		20 eb a5	jsr $a5eb	                jsr xt_zero
.b53b		20 eb a5	jsr $a5eb	                jsr xt_zero             ; ( addr-t u-t 0 0 0 0 )
.b53e		ca		dex		                dex
.b53f		ca		dex		                dex
.b540		ca		dex		                dex
.b541		ca		dex		                dex                     ; ( addr-t u-t 0 0 0 0 ? ? )
.b542		a5 0c		lda $0c		                lda cib
.b544		95 02		sta $02,x	                sta 2,x
.b546		a5 0d		lda $0d		                lda cib+1
.b548		95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t 0 0 0 0 cib ? )
.b54a		a5 0e		lda $0e		                lda ciblen
.b54c		95 00		sta $00,x	                sta 0,x
.b54e		a5 0f		lda $0f		                lda ciblen+1
.b550		95 01		sta $01,x	                sta 1,x                 ; ( addr-t u-t 0 0 0 0 cib ciblen )
.b552		20 ef a0	jsr $a0ef	                jsr xt_to_number        ; ( addr-t u-t 0 0 ud addr2 u2 )
.b555		b5 00		lda $00,x	                lda 0,x
.b557		15 01		ora $01,x	                ora 1,x
.b559		d0 24		bne $b57f	                bne _have_unconverted_chars
.b55b		e8		inx		                inx
.b55c		e8		inx		                inx
.b55d		e8		inx		                inx
.b55e		e8		inx		                inx                     ; 2DROP ( addr-t u-t 0 0 ud )
.b55f		20 f1 89	jsr $89f1	                jsr xt_d_to_s           ; D>S ( addr-t u-t 0 0 u )
.b562		20 9b 95	jsr $959b	                jsr xt_not_rote         ; -ROT ( addr-t u-t u 0 0 )
.b565		e8		inx		                inx
.b566		e8		inx		                inx                     ; ( addr-t u-t u 0 ) drop through
.b567						_line_number_only_from_external:
.b567		20 0c a0	jsr $a00c	                jsr xt_swap             ; ( addr-t u-t 0 u )
.b56a		20 6d b9	jsr $b96d	                jsr ed_is_valid_line
.b56d		b0 03		bcs $b572	                bcs +
.b56f		4c 3f b9	jmp $b93f	                jmp ed_error_2drop
.b572						+
.b572		20 0c a0	jsr $a00c	                jsr xt_swap             ; ( addr-t u-t u 0 )
.b575		20 fc b9	jsr $b9fc	                jsr ed_para1_to_cur
.b578		a9 80		lda #$80	                lda #%10000000
.b57a		04 39		tsb $39		                tsb ed_flags
.b57c		4c 1a b8	jmp $b81a	                jmp ed_cmd_p_from_external
.b57f						_have_unconverted_chars:
.b57f		20 07 8d	jsr $8d07	                jsr xt_dup              ; ( addr-t u-t 0 0 ud addr2 u2 u2 )
.b582		ca		dex		                dex
.b583		ca		dex		                dex                     ; ( addr-t u-t 0 0 ud addr2 u2 u2 ? )
.b584		a5 0e		lda $0e		                lda ciblen
.b586		95 00		sta $00,x	                sta 0,x
.b588		a5 0f		lda $0f		                lda ciblen+1
.b58a		95 01		sta $01,x	                sta 1,x                 ; ( addr-t u-t 0 0 ud addr2 u2 u2 ciblen )
.b58c		20 53 8e	jsr $8e53	                jsr xt_equal            ; ( addr-t u-t 0 0 ud addr2 u2 f )
.b58f		b5 00		lda $00,x	                lda 0,x
.b591		15 01		ora $01,x	                ora 1,x
.b593		f0 0e		beq $b5a3	                beq _no_command_yet
.b595		8a		txa		                txa
.b596		18		clc		                clc
.b597		69 0a		adc #$0a	                adc #10
.b599		aa		tax		                tax                     ; ( addr-t u-t 0 0 )
.b59a		a9 80		lda #$80	                lda #%10000000
.b59c		14 39		trb $39		                trb ed_flags
.b59e		a0 00		ldy #$00	                ldy #00
.b5a0		4c 3b b6	jmp $b63b	                jmp _check_command
.b5a3						_no_command_yet:
.b5a3		e8		inx		                inx
.b5a4		e8		inx		                inx                     ; ( ... 0 0 ud addr2 u2 )
.b5a5		20 a2 a1	jsr $a1a2	                jsr xt_to_r             ; >R ( ... 0 0 ud addr2 ) (R: u2)
.b5a8		20 9b 95	jsr $959b	                jsr xt_not_rote         ; -ROT ( ... 0 0 addr2 ud ) (R: u2)
.b5ab		20 f1 89	jsr $89f1	                jsr xt_d_to_s           ; D>S  ( ... 0 0 addr2 para1 ) (R: u2)
.b5ae		b5 00		lda $00,x	                lda 0,x                 ; LSB
.b5b0		95 06		sta $06,x	                sta 6,x
.b5b2		b5 01		lda $01,x	                lda 1,x                 ; MSB
.b5b4		95 07		sta $07,x	                sta 7,x                 ; ( ... para1 0 addr2 para1 ) (R: u2)
.b5b6		e8		inx		                inx
.b5b7		e8		inx		                inx                     ; ( addr-t u-t para1 0 addr2 ) (R: u2)
.b5b8		20 ba 99	jsr $99ba	                jsr xt_r_from           ; R> ( addr-t u-t para1 0 addr2 u2 ) fall through
.b5bb		a9 80		lda #$80	                lda #%10000000
.b5bd		04 39		tsb $39		                tsb ed_flags
.b5bf						_check_for_para2:
.b5bf		a1 02		lda ($02,x)	                lda (2,x)
.b5c1		c9 2c		cmp #$2c	                cmp #','                ; ASCII code for ',' (comma)
.b5c3		f0 0d		beq $b5d2	                beq _got_comma
.b5c5		38		sec		                sec
.b5c6		a5 0e		lda $0e		                lda ciblen
.b5c8		f5 00		sbc $00,x	                sbc 0,x
.b5ca		a8		tay		                tay
.b5cb		e8		inx		                inx
.b5cc		e8		inx		                inx
.b5cd		e8		inx		                inx
.b5ce		e8		inx		                inx                     ; 2DROP ( addr-t u-t para1 0 )
.b5cf		4c 3b b6	jmp $b63b	                jmp _check_command
.b5d2						_got_comma:
.b5d2		f6 02		inc $02,x	                inc 2,x
.b5d4		d0 02		bne $b5d8	                bne +
.b5d6		f6 03		inc $03,x	                inc 3,x                 ; ( addr-t u-t para1 0 addr2+1 u2 )
.b5d8						+
.b5d8		b5 01		lda $01,x	                lda 1,x
.b5da		f0 02		beq $b5de	                beq +
.b5dc		d6 01		dec $01,x	                dec 1,x
.b5de						+
.b5de		d6 00		dec $00,x	                dec 0,x                 ; ( addr-t u-t para1 0 addr2+1 u2-1 )
.b5e0		a1 02		lda ($02,x)	                lda (2,x)
.b5e2		c9 24		cmp #$24	                cmp #$24                ; ASCII for '$'
.b5e4		d0 14		bne $b5fa	                bne _para2_not_dollar
.b5e6		38		sec		                sec
.b5e7		a5 0e		lda $0e		                lda ciblen
.b5e9		f5 02		sbc $02,x	                sbc 2,x
.b5eb		a8		tay		                tay
.b5ec		c8		iny		                iny
.b5ed		5a		phy		                phy
.b5ee		8a		txa		                txa
.b5ef		18		clc		                clc
.b5f0		69 06		adc #$06	                adc #06
.b5f2		aa		tax		                tax                     ; ( addr-t u-t para1 )
.b5f3		20 8f b9	jsr $b98f	                jsr ed_last_line          ; ( addr-t u-t para1 para2 )
.b5f6		7a		ply		                ply
.b5f7		4c 3b b6	jmp $b63b	                jmp _check_command
.b5fa						_para2_not_dollar:
.b5fa		20 a2 a1	jsr $a1a2	                jsr xt_to_r             ; >R ( ... para1 0 addr2+1 ) (R: u2-1)
.b5fd		20 eb a5	jsr $a5eb	                jsr xt_zero             ; 0 ( ... para1 0 addr2+1 0 ) (R: u2-1)
.b600		20 eb a5	jsr $a5eb	                jsr xt_zero             ; 0 ( ... para1 0 addr2+1 0 0 ) (R: u2-1)
.b603		20 78 9a	jsr $9a78	                jsr xt_rot              ; ROT ( ... para1 0 0 0 addr2+1 ) (R: u2-1)
.b606		20 ba 99	jsr $99ba	                jsr xt_r_from           ; R> ( ... para1 0 0 0 addr2+1 u2-1)
.b609		20 07 8d	jsr $8d07	                jsr xt_dup              ; DUP ( ... para1 0 0 0 addr2+1 u2-1 u2-1)
.b60c		20 a2 a1	jsr $a1a2	                jsr xt_to_r             ; >R ( ... para1 0 0 0 addr2+1 u2-1 ) (R: u2-1)
.b60f		20 ef a0	jsr $a0ef	                jsr xt_to_number        ; >NUMBER ( ... para1 0 ud addr3 u3 ) (R: u2-1)
.b612		20 07 8d	jsr $8d07	                jsr xt_dup              ; DUP ( ... para1 0 ud addr3 u3 u3 ) (R: u2-1)
.b615		20 ba 99	jsr $99ba	                jsr xt_r_from           ; R> ( ... para1 0 ud addr3 u3 u3 u2-1 )
.b618		20 53 8e	jsr $8e53	                jsr xt_equal            ; = ( ... para1 0 ud addr3 u3 f )
.b61b		b5 00		lda $00,x	                lda 0,x
.b61d		15 01		ora $01,x	                ora 1,x
.b61f		f0 08		beq $b629	                beq _second_number
.b621		8a		txa		                txa
.b622		18		clc		                clc
.b623		69 0c		adc #$0c	                adc #12
.b625		aa		tax		                tax                     ; back to ( addr-t u-t )
.b626		4c 43 b9	jmp $b943	                jmp ed_error
.b629						_second_number:
.b629		e8		inx		                inx
.b62a		e8		inx		                inx                     ; ( addr-t u-t para1 0 ud addr3 u3 )
.b62b		38		sec		                sec
.b62c		a5 0e		lda $0e		                lda ciblen
.b62e		f5 00		sbc $00,x	                sbc 0,x
.b630		48		pha		                pha
.b631		20 e2 a1	jsr $a1e2	                jsr xt_two_drop         ; 2DROP ( addr-t u-t para1 0 ud )
.b634		20 f1 89	jsr $89f1	                jsr xt_d_to_s           ; D>S  ( addr-t u-t para1 0 para2 )
.b637		20 6f 95	jsr $956f	                jsr xt_nip              ; NIP ( addr-t u-t para1 para2 )
.b63a		7a		ply		                ply
.b63b						_check_command:
.b63b		24 39		bit $39		                bit ed_flags
.b63d		30 08		bmi $b647	                bmi _check_command_have_arg
.b63f		a5 37		lda $37		                lda ed_cur
.b641		95 02		sta $02,x	                sta 2,x
.b643		a5 38		lda $38		                lda ed_cur+1
.b645		95 03		sta $03,x	                sta 3,x
.b647						_check_command_have_arg:
.b647		b1 0c		lda ($0c),y	                lda (cib),y             ; get mystery char from input
.b649		85 25		sta $25		                sta tmp1
.b64b		da		phx		                phx
.b64c		a2 00		ldx #$00	                ldx #00
.b64e						_cmd_loop:
.b64e		bd 27 ba	lda $ba27,x	                lda ed_cmd_list,x
.b651		f0 07		beq $b65a	                beq _illegal_command    ; zero marks end of list
.b653		c5 25		cmp $25		                cmp tmp1
.b655		f0 07		beq $b65e	                beq _found_cmd
.b657		e8		inx		                inx
.b658		80 f4		bra $b64e	                bra _cmd_loop
.b65a						_illegal_command:
.b65a		fa		plx		                plx
.b65b		4c 3f b9	jmp $b93f	                jmp ed_error_2drop
.b65e						_found_cmd:
.b65e		8a		txa		                txa
.b65f		0a		asl a		                asl
.b660		aa		tax		                tax                     ; X * 2 for table
.b661		7c 32 ba	jmp ($ba32,x)	                jmp (ed_cmd_table,x)
.b664						ed_next_command:
.b664		e8		inx		                inx
.b665		e8		inx		                inx
.b666		e8		inx		                inx
.b667		e8		inx		                inx                     ; ( addr-t u-t ) Fall through
.b668						_next_command_empty:
.b668		4c 72 b4	jmp $b472	                jmp ed_input_loop
.b66b						ed_all_done:
.b66b		64 0e		stz $0e		                stz ciblen
.b66d		64 0f		stz $0f		                stz ciblen+1
.b66f		20 e2 a1	jsr $a1e2	                jsr xt_two_drop                 ; 2DROP ( addr-t u-t )
.b672		a5 3a		lda $3a		                lda ed_base
.b674		85 18		sta $18		                sta base
.b676		60		rts		                rts
.b677						ed_cmd_a:
.b677		fa		plx		                plx
.b678		e8		inx		                inx
.b679		e8		inx		                inx                     ;  DROP ( addr-t u-t para1 )
.b67a						ed_entry_cmd_i:
.b67a						ed_cmd_a_have_para:
.b67a		20 c5 b9	jsr $b9c5	                jsr ed_num_to_addr        ;  ( addr-t u-t addr1 )
.b67d		20 d5 88	jsr $88d5	                jsr xt_cr
.b680						_next_string_loop:
.b680		20 51 b9	jsr $b951	                jsr ed_get_input
.b683		b2 0c		lda ($0c)	                lda (cib)
.b685		c9 2e		cmp #$2e	                cmp #'.'                ; ASCII for '.'
.b687		d0 16		bne $b69f	                bne _add_line
.b689		a4 0e		ldy $0e		                ldy ciblen
.b68b		c0 01		cpy #$01	                cpy #01
.b68d		d0 10		bne $b69f	                bne _add_line
.b68f		a4 0f		ldy $0f		                ldy ciblen+1
.b691		d0 0c		bne $b69f	                bne _add_line
.b693		e8		inx		                inx
.b694		e8		inx		                inx
.b695		a9 40		lda #$40	                lda #%01000000
.b697		04 39		tsb $39		                tsb ed_flags
.b699		20 d5 88	jsr $88d5	                jsr xt_cr
.b69c		4c 72 b4	jmp $b472	                jmp ed_input_loop
.b69f						_add_line:
.b69f		20 07 8d	jsr $8d07	                jsr xt_dup              ; DUP ( addr-t u-t addr1 addr1 )
.b6a2		20 8f 90	jsr $908f	                jsr xt_here             ; HERE ( addr-t u-t addr1 addr1 here )
.b6a5		20 0c a0	jsr $a00c	                jsr xt_swap             ; SWAP ( addr-t u-t addr1 here addr1 )
.b6a8		20 05 8f	jsr $8f05	                jsr xt_fetch            ; @  ( addr-t u-t addr1 here addr2 )
.b6ab		20 de 86	jsr $86de	                jsr xt_comma            ; ,  ( addr-t u-t addr1 here )
.b6ae		20 bf a1	jsr $a1bf	                jsr xt_tuck             ; TUCK ( addr-t u-t here addr1 here )
.b6b1		20 0c a0	jsr $a00c	                jsr xt_swap             ; SWAP ( addr-t u-t here here addr1 )
.b6b4		20 f1 9f	jsr $9ff1	                jsr xt_store            ; ! ( addr-t u-t here )
.b6b7		20 8f 90	jsr $908f	                jsr xt_here             ; HERE ( addr-t u-t here here2)
.b6ba		a5 00		lda $00		                lda cp
.b6bc		18		clc		                clc
.b6bd		69 04		adc #$04	                adc #04
.b6bf		85 00		sta $00		                sta cp
.b6c1		90 02		bcc $b6c5	                bcc +
.b6c3		e6 01		inc $01		                inc cp+1
.b6c5						+
.b6c5		e6 37		inc $37		                inc ed_cur
.b6c7		d0 02		bne $b6cb	                bne +
.b6c9		e6 38		inc $38		                inc ed_cur+1
.b6cb						+
.b6cb		20 8f 90	jsr $908f	                jsr xt_here     ; HERE ( addr-t u-t here here2 here3 )
.b6ce		20 07 8d	jsr $8d07	                jsr xt_dup      ; DUP ( addr-t u-t here here2 here3 here3 )
.b6d1		ca		dex		                dex
.b6d2		ca		dex		                dex             ; ( addr-t u-t here here2 here3 here3 ? )
.b6d3		a5 0c		lda $0c		                lda cib
.b6d5		95 00		sta $00,x	                sta 0,x
.b6d7		a5 0d		lda $0d		                lda cib+1
.b6d9		95 01		sta $01,x	                sta 1,x         ; ( addr-t u-t here here2 here3 here3 cib )
.b6db		20 0c a0	jsr $a00c	                jsr xt_swap     ; SWAP ( addr-t u-t here here2 here3 cib here3 )
.b6de		ca		dex		                dex
.b6df		ca		dex		                dex             ; ( addr-t u-t here here2 here3 cib here3 ? )
.b6e0		a5 0e		lda $0e		                lda ciblen
.b6e2		95 00		sta $00,x	                sta 0,x
.b6e4		a5 0f		lda $0f		                lda ciblen+1
.b6e6		95 01		sta $01,x	                sta 1,x         ; ( addr-t u-t here here2 here3 cib here3 ciblen )
.b6e8		20 f8 94	jsr $94f8	                jsr xt_move     ; ( addr-t u-t here here2 here3 )
.b6eb		18		clc		                clc
.b6ec		a5 00		lda $00		                lda cp
.b6ee		65 0e		adc $0e		                adc ciblen
.b6f0		85 00		sta $00		                sta cp
.b6f2		90 06		bcc $b6fa	                bcc +
.b6f4		a5 01		lda $01		                lda cp+1
.b6f6		65 0f		adc $0f		                adc ciblen+1
.b6f8		85 01		sta $01		                sta cp+1
.b6fa						+
.b6fa		20 bd 97	jsr $97bd	                jsr xt_over             ; OVER ( addr-t u-t here here2 here3 here2 )
.b6fd		20 f1 9f	jsr $9ff1	                jsr xt_store            ; ! ( addr-t u-t here here2 )
.b700		20 47 97	jsr $9747	                jsr xt_one_plus         ; 1+
.b703		20 47 97	jsr $9747	                jsr xt_one_plus         ; 1+ ( addr-t u-t here here2+2 )
.b706		20 07 8d	jsr $8d07	                jsr xt_dup              ; DUP ( addr-t u-t here here2+2 here2+2 )
.b709		a5 0e		lda $0e		                lda ciblen
.b70b		95 02		sta $02,x	                sta 2,x
.b70d		a5 0f		lda $0f		                lda ciblen+1
.b70f		95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t here ciblen here2+2 )
.b711		20 f1 9f	jsr $9ff1	                jsr xt_store            ; ! ( addr-t u-t here )
.b714		20 d5 88	jsr $88d5	                jsr xt_cr
.b717		4c 80 b6	jmp $b680	                jmp _next_string_loop
.b71a						ed_cmd_d:
.b71a		fa		plx		                plx
.b71b		20 62 b9	jsr $b962	                jsr ed_have_text
.b71e		20 b7 b9	jsr $b9b7	                jsr ed_no_line_zero
.b721		b5 00		lda $00,x	                lda 0,x
.b723		15 01		ora $01,x	                ora 1,x
.b725		d0 08		bne $b72f	                bne +
.b727		20 bd 97	jsr $97bd	                jsr xt_over             ; ( addr-t u-t para1 0 para1 )
.b72a		20 6c b7	jsr $b76c	                jsr _cmd_d_common       ; ( addr-t u-t para1 0 )
.b72d		80 33		bra $b762	                bra _cmd_d_done
.b72f						+
.b72f		20 6d b9	jsr $b96d	                jsr ed_is_valid_line      ; result is in C flag
.b732		b0 03		bcs $b737	                bcs _cmd_d_loop
.b734		4c 3f b9	jmp $b93f	                jmp ed_error_2drop
.b737						_cmd_d_loop:
.b737		20 ea a1	jsr $a1ea	                jsr xt_two_dup          ; 2DUP ( addr-t u-t para1 para2 para1 para2 )
.b73a		20 7a 90	jsr $907a	                jsr xt_greater_than     ; > ( addr-t u-t para1 para2 f )
.b73d		b5 00		lda $00,x	                lda 0,x
.b73f		15 01		ora $01,x	                ora 1,x
.b741		d0 0d		bne $b750	                bne _cmd_d_done_with_flag
.b743		e8		inx		                inx
.b744		e8		inx		                inx                     ; Get rid of the flag from >
.b745		20 07 8d	jsr $8d07	                jsr xt_dup              ; DUP ( addr-t u-t para1 para2 para2 )
.b748		20 6c b7	jsr $b76c	                jsr _cmd_d_common       ; ( addr-t u-t para1 para2 )
.b74b		20 3b 97	jsr $973b	                jsr xt_one_minus        ; 1- ( addr-t u-t para1 para2-1 )
.b74e		80 e7		bra $b737	                bra _cmd_d_loop
.b750						_cmd_d_done_with_flag:
.b750		e8		inx		                inx                     ; ( addr-t u-t para1 para2 )
.b751		e8		inx		                inx
.b752		b5 02		lda $02,x	                lda 2,x
.b754		d0 02		bne $b758	                bne +
.b756		d6 03		dec $03,x	                dec 3,x
.b758						+
.b758		d6 02		dec $02,x	                dec 2,x
.b75a		b5 02		lda $02,x	                lda 2,x
.b75c		85 37		sta $37		                sta ed_cur
.b75e		b5 03		lda $03,x	                lda 3,x
.b760		85 38		sta $38		                sta ed_cur+1            ; drop through to _cmd_d_done
.b762						_cmd_d_done:
.b762		a9 40		lda #$40	                lda #%01000000
.b764		04 39		tsb $39		                tsb ed_flags
.b766		20 d5 88	jsr $88d5	                jsr xt_cr
.b769		4c 64 b6	jmp $b664	                jmp ed_next_command
.b76c						_cmd_d_common:
.b76c		20 07 8d	jsr $8d07	                jsr xt_dup              ; DUP ( addr-t u-t u u )
.b76f		20 c5 b9	jsr $b9c5	                jsr ed_num_to_addr        ; ( addr-t u-t u addr )
.b772		20 05 8f	jsr $8f05	                jsr xt_fetch            ; @ ( addr-t u-t u addr1 )
.b775		20 0c a0	jsr $a00c	                jsr xt_swap             ; SWAP ( addr-t u-t addr1 u )
.b778		20 3b 97	jsr $973b	                jsr xt_one_minus        ; 1- ( addr-t u-t addr1 u-1 )
.b77b		20 c5 b9	jsr $b9c5	                jsr ed_num_to_addr        ; ( addr-t u-t addr1 addr-1 )
.b77e		20 f1 9f	jsr $9ff1	                jsr xt_store            ; ! ( addr-t u-t )
.b781		60		rts		                rts
.b782						ed_cmd_equ:
.b782		fa		plx		                plx
.b783		a5 35		lda $35		                lda ed_head
.b785		05 36		ora $36		                ora ed_head+1
.b787		d0 08		bne $b791	                bne _cmd_equ_have_text
.b789		ca		dex		                dex
.b78a		ca		dex		                dex
.b78b		74 00		stz $00,x	                stz 0,x
.b78d		74 01		stz $01,x	                stz 1,x                 ; ( addr-t u-t para1 para2 0 )
.b78f		80 21		bra $b7b2	                bra _cmd_equ_done
.b791						_cmd_equ_have_text:
.b791		20 b7 b9	jsr $b9b7	                jsr ed_no_line_zero
.b794		24 39		bit $39		                bit ed_flags
.b796		30 0c		bmi $b7a4	                bmi _cmd_equ_have_para
.b798		ca		dex		                dex
.b799		ca		dex		                dex                     ; ( addr-t u-t para1 para2 ? )
.b79a		a5 37		lda $37		                lda ed_cur
.b79c		95 00		sta $00,x	                sta 0,x
.b79e		a5 38		lda $38		                lda ed_cur+1
.b7a0		95 01		sta $01,x	                sta 1,x
.b7a2		80 0e		bra $b7b2	                bra _cmd_equ_done       ; ( addr-t u-t para1 para2 cur )
.b7a4						_cmd_equ_have_para:
.b7a4		b5 00		lda $00,x	                lda 0,x
.b7a6		15 01		ora $01,x	                ora 1,x
.b7a8		d0 05		bne $b7af	                bne _cmd_equ_two_paras
.b7aa		20 bd 97	jsr $97bd	                jsr xt_over             ; ( addr-t u-t para1 para2 para1)
.b7ad		80 03		bra $b7b2	                bra _cmd_equ_done
.b7af						_cmd_equ_two_paras:
.b7af		20 07 8d	jsr $8d07	                jsr xt_dup              ; ( addr-t u-t para1 para2 para2) drop through
.b7b2						_cmd_equ_done:
.b7b2		20 d5 88	jsr $88d5	                jsr xt_cr               ; number goes on new line
.b7b5		20 60 a3	jsr $a360	                jsr xt_u_dot            ; ( addr-t u-t para1 para2 )
.b7b8		20 d5 88	jsr $88d5	                jsr xt_cr
.b7bb		4c 64 b6	jmp $b664	                jmp ed_next_command
.b7be						ed_cmd_f:
.b7be		fa		plx		                plx
.b7bf		24 39		bit $39		                bit ed_flags
.b7c1		30 17		bmi $b7da	                bmi _cmd_f_have_para
.b7c3		20 d5 88	jsr $88d5	                jsr xt_cr
.b7c6		20 a2 a1	jsr $a1a2	                jsr xt_to_r             ; >R   ( addr-t u-t 0 ) ( R: 0 )
.b7c9		20 78 9a	jsr $9a78	                jsr xt_rot              ; ROT  ( u-t 0 addr-t ) ( R: 0 )
.b7cc		20 07 8d	jsr $8d07	                jsr xt_dup              ; DUP  ( u-t 0 addr-t addr-t ) ( R: 0 )
.b7cf		20 60 a3	jsr $a360	                jsr xt_u_dot            ; U.   ( u-t 0 addr-t ) ( R: 0 )
.b7d2		20 9b 95	jsr $959b	                jsr xt_not_rote         ; -ROT ( addr-t u-t 0 ) ( R: 0 )
.b7d5		20 ba 99	jsr $99ba	                jsr xt_r_from           ; R>   ( addr-t u-t 0 0 )
.b7d8		80 11		bra $b7eb	                bra _cmd_f_done
.b7da						_cmd_f_have_para:
.b7da		20 bd 97	jsr $97bd	                jsr xt_over
.b7dd		20 d5 88	jsr $88d5	                jsr xt_cr
.b7e0		20 60 a3	jsr $a360	                jsr xt_u_dot
.b7e3		b5 02		lda $02,x	                lda 2,x
.b7e5		95 06		sta $06,x	                sta 6,x
.b7e7		b5 03		lda $03,x	                lda 3,x
.b7e9		95 07		sta $07,x	                sta 7,x                 ; fall through to _cmd_f_done
.b7eb						_cmd_f_done:
.b7eb		20 d5 88	jsr $88d5	                jsr xt_cr
.b7ee		4c 64 b6	jmp $b664	                jmp ed_next_command
.b7f1						ed_cmd_i:
.b7f1		fa		plx		                plx
.b7f2		e8		inx		                inx
.b7f3		e8		inx		                inx                     ;  DROP ( addr-t u-t para1 )
.b7f4		24 39		bit $39		                bit ed_flags
.b7f6		30 08		bmi $b800	                bmi _cmd_i_have_para
.b7f8		a5 37		lda $37		                lda ed_cur
.b7fa		95 00		sta $00,x	                sta 0,x
.b7fc		a5 38		lda $38		                lda ed_cur+1
.b7fe		95 01		sta $01,x	                sta 1,x                 ;  ( addr-t u-t cur ) drop through
.b800						_cmd_i_have_para:
.b800		b5 00		lda $00,x	                lda 0,x
.b802		15 01		ora $01,x	                ora 1,x
.b804		f0 09		beq $b80f	                beq _cmd_i_done
.b806		20 3b 97	jsr $973b	                jsr xt_one_minus        ; 1-  ( addr-t u-t para1-1 )
.b809		20 eb a5	jsr $a5eb	                jsr xt_zero             ; 0   ( addr-t u-t para1-1 0 )
.b80c		20 4e 94	jsr $944e	                jsr xt_max              ; MAX ( addr-t u-t para1-1 | 0 )
.b80f						_cmd_i_done:
.b80f		4c 7a b6	jmp $b67a	                jmp ed_entry_cmd_i
.b812						ed_cmd_n:
.b812		fa		plx		                plx
.b813		a9 01		lda #$01	                lda #%00000001
.b815		04 39		tsb $39		                tsb ed_flags
.b817		80 05		bra $b81e	                bra ed_cmd_p_entry_for_cmd_n
.b819						ed_cmd_p:
.b819		fa		plx		                plx
.b81a						ed_cmd_p_from_external:
.b81a		a9 01		lda #$01	                lda #%00000001
.b81c		14 39		trb $39		                trb ed_flags
.b81e						ed_cmd_p_entry_for_cmd_n:
.b81e		20 62 b9	jsr $b962	                jsr ed_have_text
.b821		20 b7 b9	jsr $b9b7	                jsr ed_no_line_zero
.b824		20 d5 88	jsr $88d5	                jsr xt_cr
.b827		b5 00		lda $00,x	                lda 0,x
.b829		15 01		ora $01,x	                ora 1,x
.b82b		d0 10		bne $b83d	                bne _cmd_p_loop
.b82d		b5 02		lda $02,x	                lda 2,x
.b82f		85 37		sta $37		                sta ed_cur
.b831		b5 03		lda $03,x	                lda 3,x
.b833		85 38		sta $38		                sta ed_cur+1
.b835		20 bd 97	jsr $97bd	                jsr xt_over             ; OVER ( addr-t u-t para1 para2 para1 )
.b838		20 66 b8	jsr $b866	                jsr _cmd_p_common       ; ( addr-t u-t para1 para2 )
.b83b		80 26		bra $b863	                bra _cmd_p_all_done
.b83d						_cmd_p_loop:
.b83d		20 ea a1	jsr $a1ea	                jsr xt_two_dup          ; 2DUP ( addr-t u-t para1 para2 para1 para2 )
.b840		20 7a 90	jsr $907a	                jsr xt_greater_than     ; > ( addr-t u-t para1 para2 f )
.b843		b5 00		lda $00,x	                lda 0,x
.b845		15 01		ora $01,x	                ora 1,x
.b847		d0 10		bne $b859	                bne _cmd_p_done
.b849		e8		inx		                inx
.b84a		e8		inx		                inx                     ; Get rid of the flag from >
.b84b		20 bd 97	jsr $97bd	                jsr xt_over             ; ( addr-t u-t para1 para2 para1 )
.b84e		20 66 b8	jsr $b866	                jsr _cmd_p_common       ; ( addr-t u-t para1 para2 )
.b851		f6 02		inc $02,x	                inc 2,x
.b853		d0 02		bne $b857	                bne +
.b855		f6 03		inc $03,x	                inc 3,x
.b857						+
.b857		80 e4		bra $b83d	                bra _cmd_p_loop
.b859						_cmd_p_done:
.b859		e8		inx		                inx
.b85a		e8		inx		                inx                     ; fall through to _cmp_p_all_done
.b85b		b5 00		lda $00,x	                lda 0,x
.b85d		85 37		sta $37		                sta ed_cur
.b85f		b5 01		lda $01,x	                lda 1,x
.b861		85 38		sta $38		                sta ed_cur+1
.b863						_cmd_p_all_done:
.b863		4c 64 b6	jmp $b664	                jmp ed_next_command
.b866						_cmd_p_common:
.b866		a5 39		lda $39		                lda ed_flags
.b868		4a		lsr a		                lsr                     ; bit 0 now in carry
.b869		90 0b		bcc $b876	                bcc _cmd_p_common_no_num
.b86b		20 07 8d	jsr $8d07	                jsr xt_dup              ; DUP ( addr-t u-t para1 para1 )
.b86e		20 60 a3	jsr $a360	                jsr xt_u_dot            ; U. ( addr-t u-t para1 )
.b871		a9 09		lda #$09	                lda #$09                 ; ASCII for Tab
.b873		20 7b 8d	jsr $8d7b	                jsr emit_a
.b876						_cmd_p_common_no_num:
.b876		20 c5 b9	jsr $b9c5	                jsr ed_num_to_addr        ; ( addr-t u-t addr )
.b879		20 05 ba	jsr $ba05	                jsr ed_print_addr
.b87c		60		rts		                rts
.b87d						ed_cmd_q:
.b87d		fa		plx		                plx
.b87e		24 39		bit $39		                bit ed_flags            ; bit 6 is change flag
.b880		50 03		bvc $b885	                bvc +
.b882		4c 3f b9	jmp $b93f	                jmp ed_error_2drop
.b885						+
.b885		4c 6b b6	jmp $b66b	                jmp ed_all_done            ; can't fall thru because of PLX
.b888						ed_cmd_qq:
.b888		fa		plx		                plx
.b889		4c 6b b6	jmp $b66b	                jmp ed_all_done
.b88c						ed_cmd_w:
.b88c		fa		plx		                plx
.b88d		20 62 b9	jsr $b962	                jsr ed_have_text
.b890		24 39		bit $39		                bit ed_flags
.b892		30 13		bmi $b8a7	                bmi _cmd_w_have_para
.b894		b5 06		lda $06,x	                lda 6,x
.b896		15 07		ora $07,x	                ora 7,x
.b898		d0 03		bne $b89d	                bne +
.b89a		4c 3f b9	jmp $b93f	                jmp ed_error_2drop
.b89d						+
.b89d		b5 06		lda $06,x	                lda 6,x
.b89f		95 02		sta $02,x	                sta 2,x
.b8a1		b5 07		lda $07,x	                lda 7,x
.b8a3		95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t addr-t ? )
.b8a5		80 08		bra $b8af	                bra _cmd_w_para_ready
.b8a7						_cmd_w_have_para:
.b8a7		b5 02		lda $02,x	                lda 2,x
.b8a9		95 06		sta $06,x	                sta 6,x
.b8ab		b5 03		lda $03,x	                lda 3,x
.b8ad		95 07		sta $07,x	                sta 7,x                 ; drop through to _cmd_w_para_ready
.b8af						_cmd_w_para_ready:
.b8af		a9 35		lda #$35	                lda #<ed_head
.b8b1		95 00		sta $00,x	                sta 0,x
.b8b3		a9 00		lda #$00	                lda #>ed_head
.b8b5		95 01		sta $01,x	                sta 1,x                 ; ( addr-t u-t addr-t addr-h )
.b8b7		20 bd 97	jsr $97bd	                jsr xt_over             ; OVER ( addr-t u-t addr-t addr-h addr-t )
.b8ba		20 a2 a1	jsr $a1a2	                jsr xt_to_r             ; >R ( addr-t u-t addr-t addr-h ) ( R: addr-t )
.b8bd						_cmd_w_loop:
.b8bd		20 05 8f	jsr $8f05	                jsr xt_fetch            ; @ ( addr-t u-t addr-t addr1 ) ( R: addr-t )
.b8c0		b5 00		lda $00,x	                lda 0,x
.b8c2		15 01		ora $01,x	                ora 1,x
.b8c4		f0 55		beq $b91b	                beq _cmd_w_eol
.b8c6		20 ea a1	jsr $a1ea	                jsr xt_two_dup          ; 2DUP ( addr-t addr-1 addr-t addr-1 ) ( R: addr-t addr-1 addr-t )
.b8c9		20 d4 a2	jsr $a2d4	                jsr xt_two_to_r         ; 2>R  ( addr-t addr-1 ) (R: ... )
.b8cc		20 47 97	jsr $9747	                jsr xt_one_plus         ; 1+ ( addr-t addr1+1 ) (R: ... )
.b8cf		20 47 97	jsr $9747	                jsr xt_one_plus         ; 1+ ( addr-t addr1+2 ) (R: ... )
.b8d2		20 07 8d	jsr $8d07	                jsr xt_dup              ; DUP ( addr-t addr1+2 addr1+2 ) ( R: ... )
.b8d5		20 05 8f	jsr $8f05	                jsr xt_fetch            ; @ ( addr-t addr1+2 addr-s ) ( R: ... )
.b8d8		20 0c a0	jsr $a00c	                jsr xt_swap             ; SWAP ( addr-t addr-s addr1+2 ) ( R: ... )
.b8db		20 47 97	jsr $9747	                jsr xt_one_plus         ; 1+ ( addr-t addr-s addr1+1 ) (R: ... )
.b8de		20 47 97	jsr $9747	                jsr xt_one_plus         ; 1+ ( addr-t addr-s addr1+2 ) (R: ... )
.b8e1		20 05 8f	jsr $8f05	                jsr xt_fetch            ; @ ( addr-t addr-s u-s ) ( R: ... )
.b8e4		20 9b 95	jsr $959b	                jsr xt_not_rote         ; -ROT ( u-s addr-t addr-s ) ( R: ... )
.b8e7		20 0c a0	jsr $a00c	                jsr xt_swap             ; SWAP ( u-s addr-s addr-t ) ( R: ... )
.b8ea		20 78 9a	jsr $9a78	                jsr xt_rot              ; ROT (addr-s addr-t u-s ) ( R: ... )
.b8ed		20 07 8d	jsr $8d07	                jsr xt_dup              ; DUP (addr-s addr-t u-s u-s ) ( R: ... )
.b8f0		20 a2 a1	jsr $a1a2	                jsr xt_to_r             ; >R (addr-s addr-t u-s ) ( R: ... u-s )
.b8f3		20 f8 94	jsr $94f8	                jsr xt_move             ; MOVE ( )( R: addr-t addr-1 addr-t )
.b8f6		20 ba 99	jsr $99ba	                jsr xt_r_from           ; R> ( u-s )  ( R: addr-t addr-h addr-t )
.b8f9		20 5a a2	jsr $a25a	                jsr xt_two_r_from       ; 2R> ( u-s addr-t addr-h ) ( R: addr-t )
.b8fc		20 9b 95	jsr $959b	                jsr xt_not_rote         ; -ROT ( addr-h u-s addr-t ) ( R: addr-t )
.b8ff		20 0b 99	jsr $990b	                jsr xt_plus             ; + ( addr-h addr-t1 ) ( R: addr-t )
.b902		20 07 8d	jsr $8d07	                jsr xt_dup              ; DUP ( addr-h addr-t1 addr-t1 ) ( R: addr-t )
.b905		ca		dex		                dex
.b906		ca		dex		                dex                     ; ( addr-h addr-t1 addr-t1 ? ) ( R: addr-t )
.b907		a9 0a		lda #$0a	                lda #AscLF              ; ASCII for LF
.b909		95 00		sta $00,x	                sta 0,x
.b90b		74 01		stz $01,x	                stz 1,x                 ; ( addr-h addr-t1 addr-t1 c ) ( R: addr-t )
.b90d		20 0c a0	jsr $a00c	                jsr xt_swap             ; SWAP ( addr-h addr-t1 c addr-t1 ) ( R: addr-t )
.b910		20 f1 9f	jsr $9ff1	                jsr xt_store            ; ! ( addr-h addr-t1 ) ( R: addr-t )
.b913		20 47 97	jsr $9747	                jsr xt_one_plus         ; 1+ ( addr-h addr-t1+1 ) ( R: addr-t )
.b916		20 0c a0	jsr $a00c	                jsr xt_swap             ; SWAP ( addr-t1+1 addr-h ) ( R: addr-t )
.b919		80 a2		bra $b8bd	                bra _cmd_w_loop
.b91b						_cmd_w_eol:
.b91b		20 0c a0	jsr $a00c	                jsr xt_swap             ; SWAP ( addr-t u-t addr-n addr-tn ) ( R: addr-t )
.b91e		20 ba 99	jsr $99ba	                jsr xt_r_from           ; R> ( addr-t u-t addr-n addr-tn addr-t )
.b921		20 86 94	jsr $9486	                jsr xt_minus            ; - ( addr-t u-t addr-n u )
.b924		b5 00		lda $00,x	                lda 0,x
.b926		95 04		sta $04,x	                sta 4,x
.b928		b5 01		lda $01,x	                lda 1,x
.b92a		95 05		sta $05,x	                sta 5,x                 ; ( addr-t u addr-n u )
.b92c		20 d5 88	jsr $88d5	                jsr xt_cr
.b92f		20 07 8d	jsr $8d07	                jsr xt_dup              ; DUP ( addr-t u addr-n u u )
.b932		20 60 a3	jsr $a360	                jsr xt_u_dot            ; U. ( addr-t u addr-n u )
.b935		20 d5 88	jsr $88d5	                jsr xt_cr
.b938		a9 40		lda #$40	                lda #%01000000
.b93a		14 39		trb $39		                trb ed_flags
.b93c		4c 64 b6	jmp $b664	                jmp ed_next_command
.b93f						ed_error_2drop:
.b93f		e8		inx		                inx
.b940		e8		inx		                inx                     ; drop through to _error_1drop
.b941						ed_error_1drop:
.b941		e8		inx		                inx
.b942		e8		inx		                inx                     ; drop through to _error
.b943						ed_error:
.b943		20 d5 88	jsr $88d5	                jsr xt_cr
.b946		a9 3f		lda #$3f	                lda #'?'
.b948		20 7b 8d	jsr $8d7b	                jsr emit_a
.b94b		20 d5 88	jsr $88d5	                jsr xt_cr
.b94e		4c 72 b4	jmp $b472	                jmp ed_input_loop
.b951						ed_get_input:
.b951		20 20 9a	jsr $9a20	                jsr xt_refill           ;  ( addr-t u-t f )
.b954		b5 00		lda $00,x	                lda 0,x
.b956		15 01		ora $01,x	                ora 1,x
.b958		d0 05		bne $b95f	                bne +
.b95a		7a		ply		                ply
.b95b		7a		ply		                ply
.b95c		4c 41 b9	jmp $b941	                jmp ed_error_1drop
.b95f						+
.b95f		e8		inx		                inx
.b960		e8		inx		                inx
.b961		60		rts		                rts
.b962						ed_have_text:
.b962		a5 35		lda $35		                lda ed_head
.b964		05 36		ora $36		                ora ed_head+1
.b966		d0 04		bne $b96c	                bne +
.b968		7a		ply		                ply
.b969		7a		ply		                ply
.b96a		80 d7		bra $b943	                bra ed_error
.b96c						+
.b96c		60		rts		                rts
.b96d						ed_is_valid_line:
.b96d		38		sec		                sec                             ; default is legal line number
.b96e		b5 00		lda $00,x	                lda 0,x
.b970		15 01		ora $01,x	                ora 1,x
.b972		f0 19		beq $b98d	                beq _is_valid_line_nope_zero    ; ( n )
.b974		20 07 8d	jsr $8d07	                jsr xt_dup                      ; DUP ( n n )
.b977		20 8f b9	jsr $b98f	                jsr ed_last_line                  ; ( n n last )
.b97a		20 0c a0	jsr $a00c	                jsr xt_swap                     ; SWAP ( n last n )
.b97d		20 8d 92	jsr $928d	                jsr xt_less_than                ; < ( n f )
.b980		b5 00		lda $00,x	                lda 0,x                         ; 0 flag is good
.b982		15 01		ora $01,x	                ora 1,x
.b984		d0 05		bne $b98b	                bne _is_valid_line_too_small
.b986		e8		inx		                inx
.b987		e8		inx		                inx                     ; DROP flag ( n )
.b988		38		sec		                sec                     ; Who knows what's happened to C by now
.b989		80 03		bra $b98e	                bra _is_valid_line_done ; only one exit from this routine
.b98b						_is_valid_line_too_small:
.b98b		e8		inx		                inx
.b98c		e8		inx		                inx                     ; drop through to _is_valid_line_zero
.b98d						_is_valid_line_nope_zero:
.b98d		18		clc		                clc                     ; drop through to _is_valid_line_done
.b98e						_is_valid_line_done:
.b98e		60		rts		                rts
.b98f						ed_last_line:
.b98f		64 25		stz $25		                stz tmp1
.b991		64 26		stz $26		                stz tmp1+1
.b993		ca		dex		                dex
.b994		ca		dex		                dex                     ; ( ? )
.b995		a9 35		lda #$35	                lda #<ed_head
.b997		95 00		sta $00,x	                sta 0,x
.b999		a9 00		lda #$00	                lda #>ed_head
.b99b		95 01		sta $01,x	                sta 1,x                 ; ( addr )
.b99d						_last_line_loop:
.b99d		20 05 8f	jsr $8f05	                jsr xt_fetch            ; ( addr | 0 )
.b9a0		b5 00		lda $00,x	                lda 0,x
.b9a2		15 01		ora $01,x	                ora 1,x
.b9a4		f0 08		beq $b9ae	                beq _last_line_done
.b9a6		e6 25		inc $25		                inc tmp1
.b9a8		d0 02		bne $b9ac	                bne +
.b9aa		e6 26		inc $26		                inc tmp1+1
.b9ac						+
.b9ac		80 ef		bra $b99d	                bra _last_line_loop
.b9ae						_last_line_done:
.b9ae		a5 25		lda $25		                lda tmp1
.b9b0		95 00		sta $00,x	                sta 0,x
.b9b2		a5 26		lda $26		                lda tmp1+1
.b9b4		95 01		sta $01,x	                sta 1,x                 ; ( u )
.b9b6		60		rts		                rts
.b9b7						ed_no_line_zero:
.b9b7		b5 02		lda $02,x	                lda 2,x
.b9b9		15 03		ora $03,x	                ora 3,x
.b9bb		d0 07		bne $b9c4	                bne _no_line_zero_done
.b9bd		24 39		bit $39		                bit ed_flags
.b9bf		10 03		bpl $b9c4	                bpl _no_line_zero_done
.b9c1		4c 3f b9	jmp $b93f	                jmp ed_error_2drop
.b9c4						_no_line_zero_done:
.b9c4		60		rts		                rts
.b9c5						ed_num_to_addr:
.b9c5		ca		dex		                dex
.b9c6		ca		dex		                dex                     ; ( u ? )
.b9c7		a9 35		lda #$35	                lda #<ed_head
.b9c9		95 00		sta $00,x	                sta 0,x
.b9cb		a9 00		lda #$00	                lda #>ed_head
.b9cd		95 01		sta $01,x	                sta 1,x                 ; ( u addr-h )
.b9cf		b5 02		lda $02,x	                lda 2,x
.b9d1		15 03		ora $03,x	                ora 3,x
.b9d3		d0 05		bne $b9da	                bne _num_to_addr_loop
.b9d5		20 6f 95	jsr $956f	                jsr xt_nip              ; ( addr-h )
.b9d8		80 21		bra $b9fb	                bra _num_to_addr_done
.b9da						_num_to_addr_loop:
.b9da		20 05 8f	jsr $8f05	                jsr xt_fetch            ; @ ( u addr1 )
.b9dd		b5 00		lda $00,x	                lda 0,x
.b9df		15 01		ora $01,x	                ora 1,x
.b9e1		d0 05		bne $b9e8	                bne +
.b9e3		20 6f 95	jsr $956f	                jsr xt_nip              ; NIP ( addr1 )
.b9e6		80 13		bra $b9fb	                bra _num_to_addr_done
.b9e8						+
.b9e8		20 0c a0	jsr $a00c	                jsr xt_swap             ; SWAP ( addr1 u )
.b9eb		20 3b 97	jsr $973b	                jsr xt_one_minus        ; 1- ( addr1 u-1 )
.b9ee		b5 00		lda $00,x	                lda 0,x
.b9f0		15 01		ora $01,x	                ora 1,x
.b9f2		f0 05		beq $b9f9	                beq _num_to_addr_finished
.b9f4		20 0c a0	jsr $a00c	                jsr xt_swap             ; SWAP ( u-1 addr1 )
.b9f7		80 e1		bra $b9da	                bra _num_to_addr_loop
.b9f9						_num_to_addr_finished:
.b9f9		e8		inx		                inx
.b9fa		e8		inx		                inx                     ; ( addr )
.b9fb						_num_to_addr_done:
.b9fb		60		rts		                rts
.b9fc						ed_para1_to_cur:
.b9fc		b5 02		lda $02,x	                lda 2,x
.b9fe		85 37		sta $37		                sta ed_cur
.ba00		b5 03		lda $03,x	                lda 3,x
.ba02		85 38		sta $38		                sta ed_cur+1
.ba04		60		rts		                rts
.ba05						ed_print_addr:
.ba05		20 47 97	jsr $9747	                jsr xt_one_plus
.ba08		20 47 97	jsr $9747	                jsr xt_one_plus         ; ( addr+2 )
.ba0b		20 07 8d	jsr $8d07	                jsr xt_dup              ; ( addr+2 addr+2 )
.ba0e		20 47 97	jsr $9747	                jsr xt_one_plus
.ba11		20 47 97	jsr $9747	                jsr xt_one_plus         ; ( addr+2 addr+4 )
.ba14		20 05 8f	jsr $8f05	                jsr xt_fetch            ; ( addr+2 u-s )
.ba17		20 0c a0	jsr $a00c	                jsr xt_swap             ; ( u-s addr+2 )
.ba1a		20 05 8f	jsr $8f05	                jsr xt_fetch            ; ( u-s addr-s )
.ba1d		20 0c a0	jsr $a00c	                jsr xt_swap             ; ( addr-s u-s )
.ba20		20 35 a3	jsr $a335	                jsr xt_type
.ba23		20 d5 88	jsr $88d5	                jsr xt_cr
.ba26		60		rts		                rts
>ba27		61 66 69 64 70 6e 3d 77		ed_cmd_list:    .text "afidpn=wqQ", 0
>ba2f		71 51 00
.ba32						ed_cmd_table:
>ba32		77 b6 be b7 f1 b7 1a b7		                .word ed_cmd_a, ed_cmd_f, ed_cmd_i, ed_cmd_d, ed_cmd_p, ed_cmd_n
>ba3a		19 b8 12 b8
>ba3e		82 b7 8c b8 7d b8 88 b8		                .word ed_cmd_equ, ed_cmd_w, ed_cmd_q, ed_cmd_qq
.ba46						ed6502_end:

;******  Return to file: platform/../taliforth.asm

.ba46						forth_words_start:
>ba46		20 63 72 20 2e 28 20 54		.binary "forth_words.asc"
>ba4e		61 6c 69 20 46 6f 72 74 68 20 32 20 66 6f 72 20
>ba5e		74 68 65 20 36 35 63 30 32 29 20 63 72 20 2e 28
>ba6e		20 56 65 72 73 69 6f 6e 20 31 2e 31 20 30 36 2e
>ba7e		20 41 70 72 20 32 30 32 34 20 29 20 63 72 20 2e
>ba8e		28 20 43 6f 70 79 72 69 67 68 74 20 32 30 31 34
>ba9e		2d 32 30 32 34 20 53 63 6f 74 20 57 2e 20 53 74
>baae		65 76 65 6e 73 6f 6e 2c 20 53 61 6d 20 43 6f 6c
>babe		77 65 6c 6c 2c 20 50 61 74 72 69 63 6b 20 53 75
>bace		72 72 79 29 20 63 72 20 2e 28 20 54 61 6c 69 20
>bade		46 6f 72 74 68 20 32 20 63 6f 6d 65 73 20 77 69
>baee		74 68 20 61 62 73 6f 6c 75 74 65 6c 79 20 4e 4f
>bafe		20 57 41 52 52 41 4e 54 59 29 20 63 72 20 2e 28
>bb0e		20 54 79 70 65 20 27 62 79 65 27 20 74 6f 20 65
>bb1e		78 69 74 29 20 63 72 20
.bb26						forth_words_end:
.bb26						user_words_start:
>bb26		20 20				.binary "user_words.asc"
.bb28						user_words_end:

;******  Processing file: platform/../headers.asm

.bb28						dictionary_start:
.bb28						nt_drop:
>bb28		04 10				        .byte 4, UF
>bb2a		34 bb 86 8c 8b 8c		        .word nt_dup, xt_drop, z_drop
>bb30		64 72 6f 70			        .text "drop"
.bb34						nt_dup:
>bb34		03 10				        .byte 3, UF
>bb36		3f bb 07 8d 14 8d		        .word nt_swap, xt_dup, z_dup
>bb3c		64 75 70			        .text "dup"
.bb3f						nt_swap:
>bb3f		04 10				        .byte 4, UF
>bb41		4b bb 0c a0 1f a0		        .word nt_store, xt_swap, z_swap
>bb47		73 77 61 70			        .text "swap"
.bb4b						nt_store:
>bb4b		01 10				        .byte 1, UF
>bb4d		54 bb f1 9f 06 a0		        .word nt_fetch, xt_store, z_store
>bb53		21				        .text "!"
.bb54						nt_fetch:
>bb54		01 10				        .byte 1, UF
>bb56		5d bb 05 8f 17 8f		        .word nt_over, xt_fetch, z_fetch
>bb5c		40				        .text "@"
.bb5d						nt_over:
>bb5d		04 10				        .byte 4, UF
>bb5f		69 bb bd 97 ca 97		        .word nt_to_r, xt_over, z_over
>bb65		6f 76 65 72			        .text "over"
.bb69						nt_to_r:
>bb69		02 11				        .byte 2, CO+UF ; native is special case
>bb6b		73 bb a2 a1 b5 a1		        .word nt_r_from, xt_to_r, z_to_r
>bb71		3e 72				        .text ">r"
.bb73						nt_r_from:
>bb73		02 01				        .byte 2, CO    ; native is special case
>bb75		7d bb ba 99 ca 99		        .word nt_r_fetch, xt_r_from, z_r_from
>bb7b		72 3e				        .text "r>"
.bb7d						nt_r_fetch:
>bb7d		02 01				        .byte 2, CO    ; native is special case
>bb7f		87 bb a5 99 b9 99		        .word nt_nip, xt_r_fetch, z_r_fetch
>bb85		72 40				        .text "r@"
.bb87						nt_nip:
>bb87		03 10				        .byte 3, UF
>bb89		92 bb 6f 95 7c 95		        .word nt_rot, xt_nip, z_nip
>bb8f		6e 69 70			        .text "nip"
.bb92						nt_rot:
>bb92		03 10				        .byte 3, UF
>bb94		9d bb 78 9a 93 9a		        .word nt_not_rote, xt_rot, z_rot
>bb9a		72 6f 74			        .text "rot"
.bb9d						nt_not_rote:
>bb9d		04 10				        .byte 4, UF
>bb9f		a9 bb 9b 95 b6 95		        .word nt_tuck, xt_not_rote, z_not_rote
>bba5		2d 72 6f 74			        .text "-rot"
.bba9						nt_tuck:
>bba9		04 10				        .byte 4, UF
>bbab		b5 bb bf a1 d8 a1		        .word nt_comma, xt_tuck, z_tuck
>bbb1		74 75 63 6b			        .text "tuck"
.bbb5						nt_comma:
>bbb5		01 10				        .byte 1, UF
>bbb7		be bb de 86 f7 86		        .word nt_c_fetch, xt_comma, z_comma
>bbbd		2c				        .text ","
.bbbe						nt_c_fetch:
>bbbe		02 10				        .byte 2, UF
>bbc0		c8 bb 7b 85 84 85		        .word nt_c_store, xt_c_fetch, z_c_fetch
>bbc6		63 40				        .text "c@"
.bbc8						nt_c_store:
>bbc8		02 10				        .byte 2, UF
>bbca		d2 bb 85 85 90 85		        .word nt_plus_store, xt_c_store, z_c_store
>bbd0		63 21				        .text "c!"
.bbd2						nt_plus_store:
>bbd2		02 10				        .byte 2, UF
>bbd4		dc bb 1e 99 3d 99		        .word nt_execute, xt_plus_store, z_plus_store
>bbda		2b 21				        .text "+!"
.bbdc						nt_execute:
>bbdc		07 10				        .byte 7, UF
>bbde		eb bb c2 8e c8 8e		        .word nt_emit, xt_execute, z_execute
>bbe4		65 78 65 63 75 74 65		        .text "execute"
.bbeb						nt_emit:
>bbeb		04 18				        .byte 4, NN+UF
>bbed		f7 bb 74 8d 7e 8d		        .word nt_type, xt_emit, z_emit
>bbf3		65 6d 69 74			        .text "emit"
.bbf7						nt_type:
>bbf7		04 10				        .byte 4, UF
>bbf9		03 bc 35 a3 5f a3		        .word nt_dot, xt_type, z_type
>bbff		74 79 70 65			        .text "type"
.bc03						nt_dot:
>bc03		01 10				        .byte 1, UF
>bc05		0c bc 8e 8b af 8b		        .word nt_u_dot, xt_dot, z_dot
>bc0b		2e				        .text "."
.bc0c						nt_u_dot:
>bc0c		02 10				        .byte 2, UF
>bc0e		16 bc 60 a3 6b a3		        .word nt_u_dot_r, xt_u_dot, z_u_dot
>bc14		75 2e				        .text "u."
.bc16						nt_u_dot_r:
>bc16		03 10				        .byte 3, UF
>bc18		21 bc 6c a3 8d a3		        .word nt_dot_r, xt_u_dot_r, z_u_dot_r
>bc1e		75 2e 72			        .text "u.r"
.bc21						nt_dot_r:
>bc21		02 10				        .byte 2, UF
>bc23		2b bc ca 8b f7 8b		        .word nt_d_dot, xt_dot_r, z_dot_r
>bc29		2e 72				        .text ".r"
.bc2b						nt_d_dot:
>bc2b		02 10				        .byte 2, UF
>bc2d		35 bc 3c 8c 5a 8c		        .word nt_d_dot_r, xt_d_dot, z_d_dot
>bc33		64 2e				        .text "d."
.bc35						nt_d_dot_r:
>bc35		03 10				        .byte 3, UF
>bc37		40 bc 5b 8c 85 8c		        .word nt_ud_dot, xt_d_dot_r, z_d_dot_r
>bc3d		64 2e 72			        .text "d.r"
.bc40						nt_ud_dot:
>bc40		03 10				        .byte 3, UF
>bc42		4b bc ba a3 cc a3		        .word nt_ud_dot_r, xt_ud_dot, z_ud_dot
>bc48		75 64 2e			        .text "ud."
.bc4b						nt_ud_dot_r:
>bc4b		04 10				        .byte 4, UF
>bc4d		57 bc cd a3 eb a3		        .word nt_question, xt_ud_dot_r, z_ud_dot_r
>bc53		75 64 2e 72			        .text "ud.r"
.bc57						nt_question:
>bc57		01 00				        .byte 1, 0
>bc59		60 bc 8a 99 90 99		        .word nt_false, xt_question, z_question
>bc5f		3f				        .text "?"
.bc60						nt_false:
>bc60		05 00				        .byte 5, 0
>bc62		6d bc fe 8e 04 8f		        .word nt_true, xt_false, z_false
>bc68		66 61 6c 73 65			        .text "false"
.bc6d						nt_true:
>bc6d		04 00				        .byte 4, 0
>bc6f		79 bc b6 a1 be a1		        .word nt_space, xt_true, z_true
>bc75		74 72 75 65			        .text "true"
.bc79						nt_space:
>bc79		05 00				        .byte 5, 0
>bc7b		86 bc 82 9f 87 9f		        .word nt_zero, xt_space, z_space
>bc81		73 70 61 63 65			        .text "space"
.bc86						nt_zero:
>bc86		01 00				        .byte 1, 0
>bc88		8f bc eb a5 f1 a5		        .word nt_one, xt_zero, z_zero
>bc8e		30				        .text "0"
.bc8f						nt_one:
>bc8f		01 00				        .byte 1, 0
>bc91		98 bc 32 97 3a 97		        .word nt_two, xt_one, z_one
>bc97		31				        .text "1"
.bc98						nt_two:
>bc98		01 00				        .byte 1, 0
>bc9a		a1 bc d9 a1 e1 a1		        .word nt_two_dup, xt_two, z_two
>bca0		32				        .text "2"
.bca1						nt_two_dup:
>bca1		04 10				        .byte 4, UF
>bca3		ad bc ea a1 01 a2		        .word nt_question_dup, xt_two_dup, z_two_dup
>bca9		32 64 75 70			        .text "2dup"
.bcad						nt_question_dup:
>bcad		04 10				        .byte 4, UF
>bcaf		b9 bc 91 99 a4 99		        .word nt_plus, xt_question_dup, z_question_dup
>bcb5		3f 64 75 70			        .text "?dup"
.bcb9						nt_plus:
>bcb9		01 10				        .byte 1, UF
>bcbb		c2 bc 0b 99 1d 99		        .word nt_minus, xt_plus, z_plus
>bcc1		2b				        .text "+"
.bcc2						nt_minus:
>bcc2		01 10				        .byte 1, UF
>bcc4		cb bc 86 94 98 94		        .word nt_one_minus, xt_minus, z_minus
>bcca		2d				        .text "-"
.bccb						nt_one_minus:
>bccb		02 10				        .byte 2, UF
>bccd		d5 bc 3b 97 46 97		        .word nt_one_plus, xt_one_minus, z_one_minus
>bcd3		31 2d				        .text "1-"
.bcd5						nt_one_plus:
>bcd5		02 10				        .byte 2, UF
>bcd7		df bc 47 97 50 97		        .word nt_two_star, xt_one_plus, z_one_plus
>bcdd		31 2b				        .text "1+"
.bcdf						nt_two_star:
>bcdf		02 10				        .byte 2, UF
>bce1		e9 bc 82 a2 89 a2		        .word nt_two_slash, xt_two_star, z_two_star
>bce7		32 2a				        .text "2*"
.bce9						nt_two_slash:
>bce9		02 10				        .byte 2, UF
>bceb		f3 bc 77 a2 81 a2		        .word nt_abs, xt_two_slash, z_two_slash
>bcf1		32 2f				        .text "2/"
.bcf3						nt_abs:
>bcf3		03 10				        .byte 3, UF
>bcf5		fe bc d1 80 e5 80		        .word nt_dabs, xt_abs, z_abs
>bcfb		61 62 73			        .text "abs"
.bcfe						nt_dabs:
>bcfe		04 10				        .byte 4, UF
>bd00		0a bd f7 89 15 8a		        .word nt_and, xt_dabs, z_dabs
>bd06		64 61 62 73			        .text "dabs"
.bd0a						nt_and:
>bd0a		03 10				        .byte 3, UF
>bd0c		15 bd c3 82 d4 82		        .word nt_or, xt_and, z_and
>bd12		61 6e 64			        .text "and"
.bd15						nt_or:
>bd15		02 10				        .byte 2, UF
>bd17		1f bd 5d 97 6e 97		        .word nt_xor, xt_or, z_or
>bd1d		6f 72				        .text "or"
.bd1f						nt_xor:
>bd1f		03 10				        .byte 3, UF
>bd21		2a bd d9 a5 ea a5		        .word nt_rshift, xt_xor, z_xor
>bd27		78 6f 72			        .text "xor"
.bd2a						nt_rshift:
>bd2a		06 10				        .byte 6, UF
>bd2c		38 bd 94 9a a7 9a		        .word nt_lshift, xt_rshift, z_rshift
>bd32		72 73 68 69 66 74		        .text "rshift"
.bd38						nt_lshift:
>bd38		06 10				        .byte 6, UF
>bd3a		46 bd b0 93 c3 93		        .word nt_pick, xt_lshift, z_lshift
>bd40		6c 73 68 69 66 74		        .text "lshift"
.bd46						nt_pick:
>bd46		04 00				        .byte 4, 0    ; underflow check is complicated, leave off here
>bd48		52 bd fa 98 0a 99		        .word nt_char, xt_pick, z_pick
>bd4e		70 69 63 6b			        .text "pick"
.bd52						nt_char:
>bd52		04 00				        .byte 4, 0
>bd54		5e bd a1 85 b7 85		        .word nt_bracket_char, xt_char, z_char
>bd5a		63 68 61 72			        .text "char"
.bd5e						nt_bracket_char:
>bd5e		06 05				        .byte 6, CO+IM
>bd60		6c bd 1d 85 23 85		        .word nt_char_plus, xt_bracket_char, z_bracket_char
>bd66		5b 63 68 61 72 5d		        .text "[char]"
.bd6c						nt_char_plus:
>bd6c		05 00				        .byte 5, 0
>bd6e		79 bd 47 97 50 97		        .word nt_chars, xt_one_plus, z_one_plus ; same as 1+
>bd74		63 68 61 72 2b			        .text "char+"
.bd79						nt_chars:
>bd79		05 12				        .byte 5, AN+UF   ; deleted during compile
>bd7b		86 bd b8 85 bb 85		        .word nt_cells, xt_chars, z_chars
>bd81		63 68 61 72 73			        .text "chars"
.bd86						nt_cells:
>bd86		05 00				        .byte 5, 0
>bd88		93 bd 82 a2 89 a2		        .word nt_cell_plus, xt_two_star, z_two_star  ; same as 2*
>bd8e		63 65 6c 6c 73			        .text "cells"
.bd93						nt_cell_plus:
>bd93		05 10				        .byte 5, UF
>bd95		a0 bd 91 85 a0 85		        .word nt_here, xt_cell_plus, z_cell_plus
>bd9b		63 65 6c 6c 2b			        .text "cell+"
.bda0						nt_here:
>bda0		04 00				        .byte 4, 0
>bda2		ac bd 8f 90 99 90		        .word nt_equal, xt_here, z_here
>bda8		68 65 72 65			        .text "here"
.bdac						nt_equal:
>bdac		01 10				        .byte 1, UF
>bdae		b5 bd 53 8e 6e 8e		        .word nt_not_equals, xt_equal, z_equal
>bdb4		3d				        .text "="
.bdb5						nt_not_equals:
>bdb5		02 10				        .byte 2, UF
>bdb7		bf bd 7d 95 9a 95		        .word nt_less_than, xt_not_equals, z_not_equals
>bdbd		3c 3e				        .text "<>"
.bdbf						nt_less_than:
>bdbf		01 10				        .byte 1, UF
>bdc1		c8 bd 8d 92 a1 92		        .word nt_u_less_than, xt_less_than, z_less_than
>bdc7		3c				        .text "<"
.bdc8						nt_u_less_than:
>bdc8		02 10				        .byte 2, UF
>bdca		d2 bd a4 a3 b9 a3		        .word nt_u_greater_than, xt_u_less_than, z_u_less_than
>bdd0		75 3c				        .text "u<"
.bdd2						nt_u_greater_than:
>bdd2		02 10				        .byte 2, UF
>bdd4		dc bd 8e a3 a3 a3		        .word nt_greater_than, xt_u_greater_than, z_u_greater_than
>bdda		75 3e				        .text "u>"
.bddc						nt_greater_than:
>bddc		01 10				        .byte 1, UF
>bdde		e5 bd 7a 90 8e 90		        .word nt_zero_equal, xt_greater_than, z_greater_than
>bde4		3e				        .text ">"
.bde5						nt_zero_equal:
>bde5		02 10				        .byte 2, UF
>bde7		ef bd f2 a5 03 a6		        .word nt_zero_unequal, xt_zero_equal, z_zero_equal
>bded		30 3d				        .text "0="
.bdef						nt_zero_unequal:
>bdef		03 10				        .byte 3, UF
>bdf1		fa bd 28 a6 37 a6		        .word nt_zero_greater, xt_zero_unequal, z_zero_unequal
>bdf7		30 3c 3e			        .text "0<>"
.bdfa						nt_zero_greater:
>bdfa		02 10				        .byte 2, UF
>bdfc		04 be 04 a6 17 a6		        .word nt_zero_less, xt_zero_greater, z_zero_greater
>be02		30 3e				        .text "0>"
.be04						nt_zero_less:
>be04		02 10				        .byte 2, UF
>be06		0e be 18 a6 27 a6		        .word nt_min, xt_zero_less, z_zero_less
>be0c		30 3c				        .text "0<"
.be0e						nt_min:
>be0e		03 10				        .byte 3, UF
>be10		19 be 6a 94 85 94		        .word nt_max, xt_min, z_min
>be16		6d 69 6e			        .text "min"
.be19						nt_max:
>be19		03 10				        .byte 3, UF
>be1b		24 be 4e 94 69 94		        .word nt_two_drop, xt_max, z_max
>be21		6d 61 78			        .text "max"
.be24						nt_two_drop:
>be24		05 10				        .byte 5, UF
>be26		31 be e2 a1 e9 a1		        .word nt_two_swap, xt_two_drop, z_two_drop
>be2c		32 64 72 6f 70			        .text "2drop"
.be31						nt_two_swap:
>be31		05 10				        .byte 5, UF
>be33		3e be b0 a2 d3 a2		        .word nt_two_over, xt_two_swap, z_two_swap
>be39		32 73 77 61 70			        .text "2swap"
.be3e						nt_two_over:
>be3e		05 10				        .byte 5, UF
>be40		4b be 24 a2 3b a2		        .word nt_two_store, xt_two_over, z_two_over
>be46		32 6f 76 65 72			        .text "2over"
.be4b						nt_two_store:
>be4b		02 10				        .byte 2, UF
>be4d		55 be 8a a2 af a2		        .word nt_two_fetch, xt_two_store, z_two_store
>be53		32 21				        .text "2!"
.be55						nt_two_fetch:
>be55		02 10				        .byte 2, UF
>be57		5f be 02 a2 23 a2		        .word nt_two_variable, xt_two_fetch, z_two_fetch
>be5d		32 40				        .text "2@"
.be5f						nt_two_variable:
>be5f		09 00				        .byte 9, 0
>be61		70 be 26 a3 34 a3		        .word nt_two_constant, xt_two_variable, z_two_variable
>be67		32 76 61 72 69 61 62 6c		        .text "2variable"
>be6f		65
.be70						nt_two_constant:
>be70		09 10				        .byte 9, UF
>be72		81 be f4 a2 18 a3		        .word nt_two_literal, xt_two_constant, z_two_constant
>be78		32 63 6f 6e 73 74 61 6e		        .text "2constant"
>be80		74
.be81						nt_two_literal:
>be81		08 14				        .byte 8, UF+IM
>be83		91 be 19 a3 25 a3		        .word nt_two_r_fetch, xt_two_literal, z_two_literal
>be89		32 6c 69 74 65 72 61 6c		        .text "2literal"
.be91						nt_two_r_fetch:
>be91		03 09				        .byte 3, CO+NN          ; native is special case, leave NN for now
>be93		9c be 3c a2 59 a2		        .word nt_two_r_from, xt_two_r_fetch, z_two_r_fetch
>be99		32 72 40			        .text "2r@"
.be9c						nt_two_r_from:
>be9c		03 01				        .byte 3, CO             ; native is special case
>be9e		a7 be 5a a2 76 a2		        .word nt_two_to_r, xt_two_r_from, z_two_r_from
>bea4		32 72 3e			        .text "2r>"
.bea7						nt_two_to_r:
>bea7		03 11				        .byte 3, CO+UF          ; native is special case
>bea9		b2 be d4 a2 f3 a2		        .word nt_invert, xt_two_to_r, z_two_to_r
>beaf		32 3e 72			        .text "2>r"
.beb2						nt_invert:
>beb2		06 10				        .byte 6, UF
>beb4		c0 be ff 91 0e 92		        .word nt_negate, xt_invert, z_invert
>beba		69 6e 76 65 72 74		        .text "invert"
.bec0						nt_negate:
>bec0		06 10				        .byte 6, UF
>bec2		ce be 50 95 60 95		        .word nt_dnegate, xt_negate, z_negate
>bec8		6e 65 67 61 74 65		        .text "negate"
.bece						nt_dnegate:
>bece		07 10				        .byte 7, UF
>bed0		dd be b2 8a cc 8a		        .word nt_c_comma, xt_dnegate, z_dnegate
>bed6		64 6e 65 67 61 74 65		        .text "dnegate"
.bedd						nt_c_comma:
>bedd		02 10				        .byte 2, UF
>bedf		e7 be 70 85 7a 85		        .word nt_bounds, xt_c_comma, z_c_comma
>bee5		63 2c				        .text "c,"
.bee7						nt_bounds:
>bee7		06 10				        .byte 6, UF
>bee9		f5 be 04 85 1c 85		        .word nt_spaces, xt_bounds, z_bounds
>beef		62 6f 75 6e 64 73		        .text "bounds"
.bef5						nt_spaces:
>bef5		06 10				        .byte 6, UF
>bef7		03 bf 88 9f c3 9f		        .word nt_bl, xt_spaces, z_spaces
>befd		73 70 61 63 65 73		        .text "spaces"
.bf03						nt_bl:
>bf03		02 00				        .byte 2, 0
>bf05		0d bf 41 83 49 83		        .word nt_minus_trailing, xt_bl, z_bl
>bf0b		62 6c				        .text "bl"
.bf0d						nt_minus_trailing:
>bf0d		09 10				        .byte 9, UF
>bf0f		1e bf b2 94 ee 94		        .word nt_minus_leading, xt_minus_trailing, z_minus_trailing
>bf15		2d 74 72 61 69 6c 69 6e		        .text "-trailing"
>bf1d		67
.bf1e						nt_minus_leading:
>bf1e		08 10				        .byte 8, UF
>bf20		2e bf 99 94 b1 94		        .word nt_slash_string, xt_minus_leading, z_minus_leading
>bf26		2d 6c 65 61 64 69 6e 67		        .text "-leading"
.bf2e						nt_slash_string:
>bf2e		07 10				        .byte 7, UF
>bf30		3d bf 85 9e a4 9e		        .word nt_refill, xt_slash_string, z_slash_string
>bf36		2f 73 74 72 69 6e 67		        .text "/string"
.bf3d						nt_refill:
>bf3d		06 00				        .byte 6, 0
>bf3f		4b bf 20 9a 61 9a		        .word nt_accept, xt_refill, z_refill
>bf45		72 65 66 69 6c 6c		        .text "refill"
.bf4b						nt_accept:
>bf4b		06 18				        .byte 6, UF+NN
>bf4d		59 bf e6 80 de 81		        .word nt_input_to_r, xt_accept, z_accept
>bf53		61 63 63 65 70 74		        .text "accept"
.bf59						nt_input_to_r:
>bf59		07 08				        .byte 7, NN
>bf5b		68 bf 78 91 8d 91		        .word nt_r_to_input, xt_input_to_r, z_input_to_r
>bf61		69 6e 70 75 74 3e 72		        .text "input>r"
.bf68						nt_r_to_input:
>bf68		07 08				        .byte 7, NN
>bf6a		77 bf cb 99 e2 99		        .word nt_unused, xt_r_to_input, z_r_to_input
>bf70		72 3e 69 6e 70 75 74		        .text "r>input"
.bf77						nt_unused:
>bf77		06 00				        .byte 6, 0
>bf79		85 bf 99 a4 a8 a4		        .word nt_depth, xt_unused, z_unused
>bf7f		75 6e 75 73 65 64		        .text "unused"
.bf85						nt_depth:
>bf85		05 00				        .byte 5, 0
>bf87		92 bf 67 8a 75 8a		        .word nt_key, xt_depth, z_depth
>bf8d		64 65 70 74 68			        .text "depth"
.bf92						nt_key:
>bf92		03 00				        .byte 3, 0
>bf94		9d bf 42 92 4b 92		        .word nt_allot, xt_key, z_key
>bf9a		6b 65 79			        .text "key"
.bf9d						nt_allot:
>bf9d		05 10				        .byte 5, UF
>bf9f		aa bf 30 82 98 82		        .word nt_create, xt_allot, z_allot
>bfa5		61 6c 6c 6f 74			        .text "allot"
.bfaa						nt_create:
>bfaa		06 00				        .byte 6, 0
>bfac		b8 bf db 88 ae 89		        .word nt_does, xt_create, z_create
>bfb2		63 72 65 61 74 65		        .text "create"
.bfb8						nt_does:
>bfb8		05 05				        .byte 5, CO+IM
>bfba		c5 bf 4d 8b 5b 8b		        .word nt_variable, xt_does, z_does
>bfc0		64 6f 65 73 3e			        .text "does>"
.bfc5						nt_variable:
>bfc5		08 00				        .byte 8, 0
>bfc7		d5 bf bd a4 d5 a4		        .word nt_constant, xt_variable, z_variable
>bfcd		76 61 72 69 61 62 6c 65		        .text "variable"
.bfd5						nt_constant:
>bfd5		08 10				        .byte 8, UF
>bfd7		e5 bf 83 88 c0 88		        .word nt_value, xt_constant, z_constant
>bfdd		63 6f 6e 73 74 61 6e 74		        .text "constant"
.bfe5						nt_value:
>bfe5		05 10				        .byte 5, UF
>bfe7		f2 bf 83 88 c0 88		        .word nt_to, xt_constant, z_constant
>bfed		76 61 6c 75 65			        .text "value"
.bff2						nt_to:
>bff2		02 0c				        .byte 2, NN+IM
>bff4		fc bf 85 a0 c0 a0		        .word nt_s_to_d, xt_to, z_to
>bffa		74 6f				        .text "to"
.bffc						nt_s_to_d:
>bffc		03 10				        .byte 3, UF
>bffe		07 c0 23 9d 34 9d		        .word nt_d_to_s, xt_s_to_d, z_s_to_d
>c004		73 3e 64			        .text "s>d"
.c007						nt_d_to_s:
>c007		03 10				        .byte 3, UF
>c009		12 c0 f1 89 f6 89		        .word nt_d_minus, xt_d_to_s, z_d_to_s
>c00f		64 3e 73			        .text "d>s"
.c012						nt_d_minus:
>c012		02 10				        .byte 2, UF
>c014		1c c0 af 89 cf 89		        .word nt_d_plus, xt_d_minus, z_d_minus
>c01a		64 2d				        .text "d-"
.c01c						nt_d_plus:
>c01c		02 10				        .byte 2, UF
>c01e		26 c0 d0 89 f0 89		        .word nt_erase, xt_d_plus, z_d_plus
>c024		64 2b				        .text "d+"
.c026						nt_erase:
>c026		05 00				        .byte 5, 0      ; underflow checked by FILL
>c028		33 c0 79 8e c1 8e		        .word nt_blank, xt_erase, z_erase
>c02e		65 72 61 73 65			        .text "erase"
.c033						nt_blank:
>c033		05 00				        .byte 5, 0     ; underflow checked by FILL
>c035		40 c0 6f 8e c1 8e		        .word nt_fill, xt_blank, z_blank
>c03b		62 6c 61 6e 6b			        .text "blank"
.c040						nt_fill:
>c040		04 10				        .byte 4, UF
>c042		4c c0 7f 8e c1 8e		        .word nt_find_name, xt_fill, z_fill
>c048		66 69 6c 6c			        .text "fill"
.c04c						nt_find_name:
>c04c		09 10				        .byte 9, UF
>c04e		5d c0 60 8f a3 8f		        .word nt_tick, xt_find_name, z_find_name
>c054		66 69 6e 64 2d 6e 61 6d		        .text "find-name"
>c05c		65
.c05d						nt_tick:
>c05d		01 00				        .byte 1, 0
>c05f		66 c0 65 a0 84 a0		        .word nt_bracket_tick, xt_tick, z_tick
>c065		27				        .text "'"
.c066						nt_bracket_tick:
>c066		03 05				        .byte 3, CO+IM
>c068		71 c0 24 85 2a 85		        .word nt_name_to_int, xt_bracket_tick, z_bracket_tick
>c06e		5b 27 5d			        .text "[']"
.c071						nt_name_to_int:
>c071		08 10				        .byte 8, UF
>c073		81 c0 17 95 33 95		        .word nt_int_to_name, xt_name_to_int, z_name_to_int
>c079		6e 61 6d 65 3e 69 6e 74		        .text "name>int"
.c081						nt_int_to_name:
>c081		08 10				        .byte 8, UF
>c083		91 c0 8e 91 fe 91		        .word nt_name_to_string, xt_int_to_name, z_int_to_name
>c089		69 6e 74 3e 6e 61 6d 65		        .text "int>name"
.c091						nt_name_to_string:
>c091		0b 10				        .byte 11, UF
>c093		a4 c0 34 95 4a 95		        .word nt_to_body, xt_name_to_string, z_name_to_string
>c099		6e 61 6d 65 3e 73 74 72		        .text "name>string"
>c0a1		69 6e 67
.c0a4						nt_to_body:
>c0a4		05 10				        .byte 5, UF
>c0a6		b1 c0 c1 a0 e3 a0		        .word nt_defer, xt_to_body, z_to_body
>c0ac		3e 62 6f 64 79			        .text ">body"
.c0b1						nt_defer:
>c0b1		05 00				        .byte 5, 0
>c0b3		be c0 1d 8a 4f 8a		        .word nt_latestxt, xt_defer, z_defer
>c0b9		64 65 66 65 72			        .text "defer"
.c0be						nt_latestxt:
>c0be		08 00				        .byte 8, 0
>c0c0		ce c0 5d 92 63 92		        .word nt_latestnt, xt_latestxt, z_latestxt
>c0c6		6c 61 74 65 73 74 78 74		        .text "latestxt"
.c0ce						nt_latestnt:
>c0ce		08 00				        .byte 8, 0
>c0d0		de c0 4f 92 5c 92		        .word nt_parse_name, xt_latestnt, z_latestnt
>c0d6		6c 61 74 65 73 74 6e 74		        .text "latestnt"
.c0de						nt_parse_name:
>c0de		0a 08				        .byte 10, NN
>c0e0		f0 c0 09 98 f9 98		        .word nt_parse, xt_parse_name, z_parse_name
>c0e6		70 61 72 73 65 2d 6e 61		        .text "parse-name"
>c0ee		6d 65
.c0f0						nt_parse:
>c0f0		05 10				        .byte 5, UF
>c0f2		fd c0 64 98 f9 98		        .word nt_execute_parsing, xt_parse, z_parse
>c0f8		70 61 72 73 65			        .text "parse"
.c0fd						nt_execute_parsing:
>c0fd		0f 10				        .byte 15, UF
>c0ff		14 c1 d6 8e fc 8e		        .word nt_source, xt_execute_parsing, z_execute_parsing
>c105		65 78 65 63 75 74 65 2d		        .text "execute-parsing"
>c10d		70 61 72 73 69 6e 67
.c114						nt_source:
>c114		06 00				        .byte 6, 0
>c116		22 c1 62 9f 76 9f		        .word nt_source_id, xt_source, z_source
>c11c		73 6f 75 72 63 65		        .text "source"
.c122						nt_source_id:
>c122		09 00				        .byte 9, 0
>c124		33 c1 77 9f 81 9f		        .word nt_colon, xt_source_id, z_source_id
>c12a		73 6f 75 72 63 65 2d 69		        .text "source-id"
>c132		64
.c133						nt_colon:
>c133		01 00				        .byte 1, 0
>c135		3c c1 7f 86 c1 86		        .word nt_semicolon, xt_colon, z_colon
>c13b		3a				        .text ":"
.c13c						nt_semicolon:
>c13c		01 05				        .byte 1, CO+IM
>c13e		45 c1 f4 9d 52 9e		        .word nt_colon_noname, xt_semicolon, z_semicolon
>c144		3b				        .text ";"
.c145						nt_colon_noname:
>c145		07 00				        .byte 7, 0
>c147		54 c1 c2 86 dd 86		        .word nt_compile_comma, xt_colon_noname, z_colon_noname
>c14d		3a 6e 6f 6e 61 6d 65		        .text ":noname"
.c154						nt_compile_comma:
>c154		08 18				        .byte 8, UF+NN
>c156		64 c1 5d 87 76 88		        .word nt_left_bracket, xt_compile_comma, z_compile_comma
>c15c		63 6f 6d 70 69 6c 65 2c		        .text "compile,"
.c164						nt_left_bracket:
>c164		01 05				        .byte 1, IM+CO
>c166		6d c1 7a 92 7e 92		        .word nt_right_bracket, xt_left_bracket, z_left_bracket
>c16c		5b				        .text "["
.c16d						nt_right_bracket:
>c16d		01 04				        .byte 1, IM
>c16f		76 c1 68 9a 6e 9a		        .word nt_literal, xt_right_bracket, z_right_bracket
>c175		5d				        .text "]"
.c176						nt_literal:
>c176		07 15				        .byte 7, IM+CO+UF
>c178		85 c1 af 92 bc 92		        .word nt_sliteral, xt_literal, z_literal
>c17e		6c 69 74 65 72 61 6c		        .text "literal"
.c185						nt_sliteral:
>c185		08 15				        .byte 8, CO+IM+UF
>c187		95 c1 a5 9e 0c 9f		        .word nt_dot_quote, xt_sliteral, z_sliteral
>c18d		73 6c 69 74 65 72 61 6c		        .text "sliteral"
.c195						nt_dot_quote:
>c195		02 05				        .byte 2, CO+IM
>c197		9f c1 bf 8b c9 8b		        .word nt_s_quote, xt_dot_quote, z_dot_quote
>c19d		2e 22				        .text ".", $22
.c19f						nt_s_quote:
>c19f		02 0c				        .byte 2, IM+NN
>c1a1		a9 c1 03 9c 22 9d		        .word nt_s_backslash_quote, xt_s_quote, z_s_quote
>c1a7		73 22				        .text "s", $22
.c1a9						nt_s_backslash_quote:
>c1a9		03 04				        .byte 3, IM
>c1ab		b4 c1 a8 9a b1 9a		        .word nt_postpone, xt_s_backslash_quote, z_s_backslash_quote
>c1b1		73 5c 22			        .text "s", $5C, $22
.c1b4						nt_postpone:
>c1b4		08 05				        .byte 8, IM+CO
>c1b6		c4 c1 3e 99 7c 99		        .word nt_immediate, xt_postpone, z_postpone
>c1bc		70 6f 73 74 70 6f 6e 65		        .text "postpone"
.c1c4						nt_immediate:
>c1c4		09 00				        .byte 9, 0
>c1c6		d5 c1 61 91 6c 91		        .word nt_compile_only, xt_immediate, z_immediate
>c1cc		69 6d 6d 65 64 69 61 74		        .text "immediate"
>c1d4		65
.c1d5						nt_compile_only:
>c1d5		0c 00				        .byte 12, 0
>c1d7		e9 c1 77 88 82 88		        .word nt_never_native, xt_compile_only, z_compile_only
>c1dd		63 6f 6d 70 69 6c 65 2d		        .text "compile-only"
>c1e5		6f 6e 6c 79
.c1e9						nt_never_native:
>c1e9		0c 00				        .byte 12, 0
>c1eb		fd c1 61 95 6e 95		        .word nt_always_native, xt_never_native, z_never_native
>c1f1		6e 65 76 65 72 2d 6e 61		        .text "never-native"
>c1f9		74 69 76 65
.c1fd						nt_always_native:
>c1fd		0d 00				        .byte 13, 0
>c1ff		12 c2 b5 82 c2 82		        .word nt_allow_native, xt_always_native, z_always_native
>c205		61 6c 77 61 79 73 2d 6e		        .text "always-native"
>c20d		61 74 69 76 65
.c212						nt_allow_native:
>c212		0c 00				        .byte 12, 0
>c214		26 c2 99 82 a4 82		        .word nt_nc_limit, xt_allow_native, z_allow_native
>c21a		61 6c 6c 6f 77 2d 6e 61		        .text "allow-native"
>c222		74 69 76 65
.c226						nt_nc_limit:
>c226		08 08				        .byte 8, NN
>c228		36 c2 4b 95 50 95		        .word nt_strip_underflow, xt_nc_limit, z_nc_limit
>c22e		6e 63 2d 6c 69 6d 69 74		        .text "nc-limit"
.c236						nt_strip_underflow:
>c236		0f 08				        .byte 15, NN
>c238		4d c2 07 a0 0c a0		        .word nt_abort, xt_strip_underflow, z_strip_underflow
>c23e		73 74 72 69 70 2d 75 6e		        .text "strip-underflow"
>c246		64 65 72 66 6c 6f 77
.c24d						nt_abort:
>c24d		05 00				        .byte 5, 0
>c24f		5a c2 60 80 b1 80		        .word nt_abort_quote, xt_abort, z_abort
>c255		61 62 6f 72 74			        .text "abort"
.c25a						nt_abort_quote:
>c25a		06 0d				        .byte 6, CO+IM+NN
>c25c		68 c2 b1 80 bb 80		        .word nt_do, xt_abort_quote, z_abort_quote
>c262		61 62 6f 72 74 22		        .text "abort", $22
.c268						nt_do:
>c268		02 0d				        .byte 2, CO+IM+NN
>c26a		72 c2 d1 8a 0a 8b		        .word nt_question_do, xt_do, z_do
>c270		64 6f				        .text "do"
.c272						nt_question_do:
>c272		03 0d				        .byte 3, CO+IM+NN
>c274		7d c2 cd 8a 0a 8b		        .word nt_i, xt_question_do, z_question_do
>c27a		3f 64 6f			        .text "?do"
.c27d						nt_i:
>c27d		01 01				        .byte 1, CO
>c27f		86 c2 06 91 1a 91		        .word nt_j, xt_i, z_i
>c285		69				        .text "i"
.c286						nt_j:
>c286		01 01				        .byte 1, CO
>c288		8f c2 28 92 41 92		        .word nt_loop, xt_j, z_j
>c28e		6a				        .text "j"
.c28f						nt_loop:
>c28f		04 05				        .byte 4, CO+IM
>c291		9b c2 20 93 82 93		        .word nt_plus_loop, xt_loop, z_loop
>c297		6c 6f 6f 70			        .text "loop"
.c29b						nt_plus_loop:
>c29b		05 05				        .byte 5, CO+IM
>c29d		a8 c2 31 93 82 93		        .word nt_exit, xt_plus_loop, z_plus_loop
>c2a3		2b 6c 6f 6f 70			        .text "+loop"
.c2a8						nt_exit:
>c2a8		04 03				        .byte 4, AN+CO
>c2aa		b4 c2 fd 8e fe 8e		        .word nt_unloop, xt_exit, z_exit
>c2b0		65 78 69 74			        .text "exit"
.c2b4						nt_unloop:
>c2b4		06 01				        .byte 6, CO
>c2b6		c2 c2 74 a4 83 a4		        .word nt_leave, xt_unloop, z_unloop
>c2bc		75 6e 6c 6f 6f 70		        .text "unloop"
.c2c2						nt_leave:
>c2c2		05 05				        .byte 5, CO+IM
>c2c4		cf c2 64 92 79 92		        .word nt_recurse, xt_leave, z_leave
>c2ca		6c 65 61 76 65			        .text "leave"
.c2cf						nt_recurse:
>c2cf		07 0d				        .byte 7, CO+IM+NN
>c2d1		de c2 e3 99 1f 9a		        .word nt_quit, xt_recurse, z_recurse
>c2d7		72 65 63 75 72 73 65		        .text "recurse"
.c2de						nt_quit:
>c2de		04 00				        .byte 4, 0
>c2e0		ea c2 62 80 b1 80		        .word nt_begin, xt_quit, z_quit
>c2e6		71 75 69 74			        .text "quit"
.c2ea						nt_begin:
>c2ea		05 07				        .byte 5, AN+CO+IM
>c2ec		f7 c2 37 83 3a 83		        .word nt_again, xt_begin, z_begin
>c2f2		62 65 67 69 6e			        .text "begin"
.c2f7						nt_again:
>c2f7		05 17				        .byte 5, AN+CO+IM+UF
>c2f9		04 c3 21 82 2e 82		        .word nt_state, xt_again, z_again
>c2ff		61 67 61 69 6e			        .text "again"
.c304						nt_state:
>c304		05 00				        .byte 5, 0
>c306		11 c3 e6 9f f0 9f		        .word nt_evaluate, xt_state, z_state
>c30c		73 74 61 74 65			        .text "state"
.c311						nt_evaluate:
>c311		08 10				        .byte 8, UF
>c313		21 c3 f2 8f 45 90		        .word nt_base, xt_evaluate, z_evaluate
>c319		65 76 61 6c 75 61 74 65		        .text "evaluate"
.c321						nt_base:
>c321		04 00				        .byte 4, 0
>c323		2d c3 2e 83 36 83		        .word nt_digit_question, xt_base, z_base
>c329		62 61 73 65			        .text "base"
.c32d						nt_digit_question:
>c32d		06 10				        .byte 6, UF
>c32f		3b c3 76 8a aa 8a		        .word nt_number, xt_digit_question, z_digit_question
>c335		64 69 67 69 74 3f		        .text "digit?"
.c33b						nt_number:
>c33b		06 10				        .byte 6, UF
>c33d		49 c3 b7 95 b0 96		        .word nt_to_number, xt_number, z_number
>c343		6e 75 6d 62 65 72		        .text "number"
.c349						nt_to_number:
>c349		07 10				        .byte 7, UF
>c34b		58 c3 ef a0 8e a1		        .word nt_hex, xt_to_number, z_to_number
>c351		3e 6e 75 6d 62 65 72		        .text ">number"
.c358						nt_hex:
>c358		03 00				        .byte 3, 0
>c35a		63 c3 9a 90 a0 90		        .word nt_decimal, xt_hex, z_hex
>c360		68 65 78			        .text "hex"
.c363						nt_decimal:
>c363		07 00				        .byte 7, 0
>c365		72 c3 16 8a 1c 8a		        .word nt_count, xt_decimal, z_decimal
>c36b		64 65 63 69 6d 61 6c		        .text "decimal"
.c372						nt_count:
>c372		05 10				        .byte 5, UF
>c374		7f c3 c1 88 d4 88		        .word nt_m_star, xt_count, z_count
>c37a		63 6f 75 6e 74			        .text "count"
.c37f						nt_m_star:
>c37f		02 10				        .byte 2, UF
>c381		89 c3 c4 93 de 93		        .word nt_um_star, xt_m_star, z_m_star
>c387		6d 2a				        .text "m*"
.c389						nt_um_star:
>c389		03 10				        .byte 3, UF
>c38b		94 c3 2e a4 73 a4		        .word nt_star, xt_um_star, z_um_star
>c391		75 6d 2a			        .text "um*"
.c394						nt_star:
>c394		01 10				        .byte 1, UF
>c396		9d c3 c4 9f cc 9f		        .word nt_um_slash_mod, xt_star, z_star
>c39c		2a				        .text "*"
.c39d						nt_um_slash_mod:
>c39d		06 10				        .byte 6, UF
>c39f		ab c3 ec a3 2d a4		        .word nt_sm_slash_rem, xt_um_slash_mod, z_um_slash_mod
>c3a5		75 6d 2f 6d 6f 64		        .text "um/mod"
.c3ab						nt_sm_slash_rem:
>c3ab		06 10				        .byte 6, UF
>c3ad		b9 c3 39 9f 61 9f		        .word nt_fm_slash_mod, xt_sm_slash_rem, z_sm_slash_rem
>c3b3		73 6d 2f 72 65 6d		        .text "sm/rem"
.c3b9						nt_fm_slash_mod:
>c3b9		06 10				        .byte 6, UF
>c3bb		c7 c3 ae 8f e4 8f		        .word nt_slash, xt_fm_slash_mod, z_fm_slash_mod
>c3c1		66 6d 2f 6d 6f 64		        .text "fm/mod"
.c3c7						nt_slash:
>c3c7		01 10				        .byte 1, UF
>c3c9		d0 c3 68 9e 84 9e		        .word nt_slash_mod, xt_slash, z_slash
>c3cf		2f				        .text "/"
.c3d0						nt_slash_mod:
>c3d0		04 10				        .byte 4, UF
>c3d2		dc c3 6d 9e 84 9e		        .word nt_mod, xt_slash_mod, z_slash_mod
>c3d8		2f 6d 6f 64			        .text "/mod"
.c3dc						nt_mod:
>c3dc		03 10				        .byte 3, UF
>c3de		e7 c3 ef 94 f7 94		        .word nt_star_slash_mod, xt_mod, z_mod
>c3e4		6d 6f 64			        .text "mod"
.c3e7						nt_star_slash_mod:
>c3e7		05 10				        .byte 5, UF
>c3e9		f4 c3 d6 9f e5 9f		        .word nt_star_slash, xt_star_slash_mod, z_star_slash_mod
>c3ef		2a 2f 6d 6f 64			        .text "*/mod"
.c3f4						nt_star_slash:
>c3f4		02 10				        .byte 2, UF
>c3f6		fe c3 cd 9f d5 9f		        .word nt_backslash, xt_star_slash, z_star_slash
>c3fc		2a 2f				        .text "*/"
.c3fe						nt_backslash:
>c3fe		01 04				        .byte 1, IM
>c400		07 c4 03 83 2d 83		        .word nt_move, xt_backslash, z_backslash
>c406		5c				        .byte '\'
.c407						nt_move:
>c407		04 18				        .byte 4, NN+UF
>c409		13 c4 f8 94 16 95		        .word nt_cmove_up, xt_move, z_move
>c40f		6d 6f 76 65			        .text "move"
.c413						nt_cmove_up:
>c413		06 10				        .byte 6, UF
>c415		21 c4 44 86 7e 86		        .word nt_cmove, xt_cmove_up, z_cmove_up
>c41b		63 6d 6f 76 65 3e		        .text "cmove>"
.c421						nt_cmove:
>c421		05 10				        .byte 5, UF
>c423		2e c4 09 86 43 86		        .word nt_pad, xt_cmove, z_cmove
>c429		63 6d 6f 76 65			        .text "cmove"
.c42e						nt_pad:
>c42e		03 00				        .byte 3, 0
>c430		39 c4 cb 97 da 97		        .word nt_cleave, xt_pad, z_pad
>c436		70 61 64			        .text "pad"
.c439						nt_cleave:
>c439		06 10				        .byte 6, UF
>c43b		47 c4 bc 85 08 86		        .word nt_hexstore, xt_cleave, z_cleave
>c441		63 6c 65 61 76 65		        .text "cleave"
.c447						nt_hexstore:
>c447		08 10				        .byte 8, UF
>c449		57 c4 a1 90 f3 90		        .word nt_within, xt_hexstore, z_hexstore
>c44f		68 65 78 73 74 6f 72 65		        .text "hexstore"
.c457						nt_within:
>c457		06 10				        .byte 6, UF
>c459		65 c4 ea a4 ff a4		        .word nt_to_in, xt_within, z_within
>c45f		77 69 74 68 69 6e		        .text "within"
.c465						nt_to_in:
>c465		03 00				        .byte 3, 0
>c467		70 c4 e4 a0 ee a0		        .word nt_less_number_sign, xt_to_in, z_to_in
>c46d		3e 69 6e			        .text ">in"
.c470						nt_less_number_sign:
>c470		02 00				        .byte 2, 0
>c472		7a c4 7f 92 8c 92		        .word nt_number_sign, xt_less_number_sign, z_less_number_sign
>c478		3c 23				        .text "<#"
.c47a						nt_number_sign:
>c47a		01 10				        .byte 1, UF
>c47c		83 c4 b1 96 e5 96		        .word nt_number_sign_s, xt_number_sign, z_number_sign
>c482		23				        .text "#"
.c483						nt_number_sign_s:
>c483		02 10				        .byte 2, UF
>c485		8d c4 08 97 18 97		        .word nt_number_sign_greater, xt_number_sign_s, z_number_sign_s
>c48b		23 73				        .text "#s"
.c48d						nt_number_sign_greater:
>c48d		02 10				        .byte 2, UF
>c48f		97 c4 e6 96 07 97		        .word nt_hold, xt_number_sign_greater, z_number_sign_greater
>c495		23 3e				        .text "#>"
.c497						nt_hold:
>c497		04 10				        .byte 4, UF
>c499		a3 c4 f4 90 05 91		        .word nt_sign, xt_hold, z_hold
>c49f		68 6f 6c 64			        .text "hold"
.c4a3						nt_sign:
>c4a3		04 10				        .byte 4, UF
>c4a5		af c4 53 9e 67 9e		        .word nt_output, xt_sign, z_sign
>c4ab		73 69 67 6e			        .text "sign"
.c4af						nt_output:
>c4af		06 00				        .byte 6, 0
>c4b1		bd c4 b2 97 bc 97		        .word nt_input, xt_output, z_output
>c4b7		6f 75 74 70 75 74		        .text "output"
.c4bd						nt_input:
>c4bd		05 00				        .byte 5, 0
>c4bf		ca c4 6d 91 77 91		        .word nt_cr, xt_input, z_input
>c4c5		69 6e 70 75 74			        .text "input"
.c4ca						nt_cr:
>c4ca		02 00				        .byte 2, 0
>c4cc		d4 c4 d5 88 da 88		        .word nt_page, xt_cr, z_cr
>c4d2		63 72				        .text "cr"
.c4d4						nt_page:
>c4d4		04 00				        .byte 4, 0
>c4d6		e0 c4 db 97 f8 97		        .word nt_at_xy, xt_page, z_page
>c4dc		70 61 67 65			        .text "page"
.c4e0						nt_at_xy:
>c4e0		05 10				        .byte 5, UF
>c4e2		ed c4 d5 82 02 83		        .word nt_marker, xt_at_xy, z_at_xy
>c4e8		61 74 2d 78 79			        .text "at-xy"
.c4ed						nt_marker:
>c4ed		06 04				        .byte 6, IM
>c4ef		fb c4 df 93 1c 94		        .word nt_words, xt_marker, z_marker
>c4f5		6d 61 72 6b 65 72		        .text "marker"
.c4fb						nt_words:
>c4fb		05 00				        .byte 5, 0
>c4fd		08 c5 5b a5 b7 a5		        .word nt_wordsize, xt_words, z_words
>c503		77 6f 72 64 73			        .text "words"
.c508						nt_wordsize:
>c508		08 10				        .byte 8, UF
>c50a		18 c5 b8 a5 d8 a5		        .word nt_aligned, xt_wordsize, z_wordsize
>c510		77 6f 72 64 73 69 7a 65		        .text "wordsize"
.c518						nt_aligned:
>c518		07 00				        .byte 7, 0
>c51a		27 c5 2f 82 2f 82		        .word nt_align, xt_align, z_align
>c520		61 6c 69 67 6e 65 64		        .text "aligned"
.c527						nt_align:
>c527		05 00				        .byte 5, 0
>c529		34 c5 2f 82 2f 82		        .word nt_bell, xt_align, z_align
>c52f		61 6c 69 67 6e			        .text "align"
.c534						nt_bell:
>c534		04 00				        .byte 4, 0
>c536		40 c5 3b 83 40 83		        .word nt_dump, xt_bell, z_bell
>c53c		62 65 6c 6c			        .text "bell"
.c540						nt_dump:
>c540		04 10				        .byte 4, UF
>c542		4c c5 8c 8c f2 8c		        .word nt_dot_s, xt_dump, z_dump
>c548		64 75 6d 70			        .text "dump"
.c54c						nt_dot_s:
>c54c		02 00				        .byte 2, 0
>c54e		56 c5 f8 8b 3b 8c		        .word +, xt_dot_s, z_dot_s
>c554		2e 73				        .text ".s"
.c556						+
.c556						nt_disasm:
>c556		06 10				        .byte 6, UF
>c558		64 c5 ab 8a b1 8a		        .word +, xt_disasm, z_disasm
>c55e		64 69 73 61 73 6d		        .text "disasm"
.c564						+
.c564						nt_compare:
>c564		07 10				        .byte 7, UF
>c566		73 c5 f8 86 5c 87		        .word nt_search, xt_compare, z_compare
>c56c		63 6f 6d 70 61 72 65		        .text "compare"
.c573						nt_search:
>c573		06 18				        .byte 6, UF+NN
>c575		81 c5 55 9d f3 9d		        .word +, xt_search, z_search
>c57b		73 65 61 72 63 68		        .text "search"
.c581						+
.c581						nt_environment_q:
>c581		0c 10				        .byte 12, UF
>c583		95 c5 9a 8d 16 8e		        .word +, xt_environment_q, z_environment_q
>c589		65 6e 76 69 72 6f 6e 6d		        .text "environment?"
>c591		65 6e 74 3f
.c595						+
.c595						nt_find:
>c595		04 10				        .byte 4, UF
>c597		a1 c5 18 8f 5f 8f		        .word nt_word, xt_find, z_find
>c59d		66 69 6e 64			        .text "find"
.c5a1						nt_word:
>c5a1		04 10				        .byte 4, UF
>c5a3		ad c5 00 a5 43 a5		        .word nt_paren, xt_word, z_word
>c5a9		77 6f 72 64			        .text "word"
.c5ad						nt_paren:
>c5ad		01 04				        .byte 1, IM
>c5af		b6 c5 f9 97 08 98		        .word nt_dot_paren, xt_paren, z_paren
>c5b5		28				        .text "("
.c5b6						nt_dot_paren:
>c5b6		02 04				        .byte 2, IM
>c5b8		c0 c5 b0 8b be 8b		        .word nt_if, xt_dot_paren, z_dot_paren
>c5be		2e 28				        .text ".("
.c5c0						nt_if:
>c5c0		02 0d				        .byte 2, IM+CO+NN
>c5c2		ca c5 1b 91 2b 91		        .word nt_then, xt_if, z_if
>c5c8		69 66				        .text "if"
.c5ca						nt_then:
>c5ca		04 0d				        .byte 4, IM+CO+NN
>c5cc		d6 c5 25 8d 6e 8d		        .word nt_else, xt_then, z_then
>c5d2		74 68 65 6e			        .text "then"
.c5d6						nt_else:
>c5d6		04 0d				        .byte 4, IM+CO+NN
>c5d8		e2 c5 19 8d 6e 8d		        .word nt_repeat, xt_else, z_else
>c5de		65 6c 73 65			        .text "else"
.c5e2						nt_repeat:
>c5e2		06 0d				        .byte 6, IM+CO+NN
>c5e4		f0 c5 62 9a 68 9a		        .word nt_until, xt_repeat, z_repeat
>c5ea		72 65 70 65 61 74		        .text "repeat"
.c5f0						nt_until:
>c5f0		05 0d				        .byte 5, IM+CO+NN
>c5f2		fd c5 84 a4 98 a4		        .word nt_while, xt_until, z_until
>c5f8		75 6e 74 69 6c			        .text "until"
.c5fd						nt_while:
>c5fd		05 0d				        .byte 5, IM+CO+NN
>c5ff		0a c6 d6 a4 e9 a4		        .word nt_case, xt_while, z_while
>c605		77 68 69 6c 65			        .text "while"
.c60a						nt_case:
>c60a		04 0d				        .byte 4, IM+CO+NN
>c60c		16 c6 eb a5 f1 a5		        .word nt_of, xt_case, z_case    ; shares code with ZERO
>c612		63 61 73 65			        .text "case"
.c616						nt_of:
>c616		02 0d				        .byte 2, IM+CO+NN
>c618		20 c6 19 97 31 97		        .word nt_endof, xt_of, z_of
>c61e		6f 66				        .text "of"
.c620						nt_endof:
>c620		05 0d				        .byte 5, IM+CO+NN
>c622		2d c6 19 8d 6e 8d		        .word nt_endcase, xt_endof, z_endof ; shares code with ELSE
>c628		65 6e 64 6f 66			        .text "endof"
.c62d						nt_endcase:
>c62d		07 0d				        .byte 7, IM+CO+NN
>c62f		3c c6 85 8d 99 8d		        .word nt_defer_fetch, xt_endcase, z_endcase
>c635		65 6e 64 63 61 73 65		        .text "endcase"
.c63c						nt_defer_fetch:
>c63c		06 00				        .byte 6, 0
>c63e		4a c6 50 8a 56 8a		        .word nt_defer_store, xt_defer_fetch, z_defer_fetch
>c644		64 65 66 65 72 40		        .text "defer@"
.c64a						nt_defer_store:
>c64a		06 00				        .byte 6, 0
>c64c		58 c6 57 8a 5d 8a		        .word nt_is, xt_defer_store, z_defer_store
>c652		64 65 66 65 72 21		        .text "defer!"
.c658						nt_is:
>c658		02 04				        .byte 2, IM
>c65a		62 c6 0f 92 27 92		        .word nt_action_of, xt_is, z_is
>c660		69 73				        .text "is"
.c662						nt_action_of:
>c662		09 04				        .byte 9, IM
>c664		73 c6 08 82 20 82		        .word nt_useraddr, xt_action_of, z_action_of
>c66a		61 63 74 69 6f 6e 2d 6f		        .text "action-of"
>c672		66
.c673						nt_useraddr:
>c673		08 00				        .byte 8, 0
>c675		83 c6 b2 a4 bc a4		        .word nt_buffer_colon, xt_useraddr, z_useraddr
>c67b		75 73 65 72 61 64 64 72		        .text "useraddr"
.c683						nt_buffer_colon:
>c683		07 00				        .byte 7, 0
>c685		92 c6 61 85 67 85		        .word +, xt_buffer_colon, z_buffer_colon
>c68b		62 75 66 66 65 72 3a		        .text "buffer:"
.c692						+
.c692						nt_buffstatus:
>c692		0a 00				        .byte 10, 0
>c694		a4 c6 68 85 6d 85		        .word nt_buffblocknum, xt_buffstatus, z_buffstatus
>c69a		62 75 66 66 73 74 61 74		        .text "buffstatus"
>c6a2		75 73
.c6a4						nt_buffblocknum:
>c6a4		0c 00				        .byte 12, 0
>c6a6		b8 c6 2b 85 30 85		        .word nt_blkbuffer, xt_buffblocknum, z_buffblocknum
>c6ac		62 75 66 66 62 6c 6f 63		        .text "buffblocknum"
>c6b4		6b 6e 75 6d
.c6b8						nt_blkbuffer:
>c6b8		09 00				        .byte 9, 0
>c6ba		c9 c6 4f 83 5c 83		        .word nt_scr, xt_blkbuffer, z_blkbuffer
>c6c0		62 6c 6b 62 75 66 66 65		        .text "blkbuffer"
>c6c8		72
.c6c9						nt_scr:
>c6c9		03 08				        .byte 3, NN
>c6cb		d4 c6 50 9d 55 9d		        .word nt_blk, xt_scr, z_scr
>c6d1		73 63 72			        .text "scr"
.c6d4						nt_blk:
>c6d4		03 08				        .byte 3, NN
>c6d6		df c6 4a 83 4f 83		        .word nt_block_write, xt_blk, z_blk
>c6dc		62 6c 6b			        .text "blk"
.c6df						nt_block_write:
>c6df		0b 08				        .byte 11, NN ; Deferred words need the HC (Code Field) flag.
>c6e1		f2 c6 f1 84 ff 84		        .word nt_block_write_vector, xt_block_write, z_block_write
>c6e7		62 6c 6f 63 6b 2d 77 72		        .text "block-write"
>c6ef		69 74 65
.c6f2						nt_block_write_vector:
>c6f2		12 08				        .byte 18, NN ; Deferred words need the HC (Code Field) flag.
>c6f4		0c c7 ff 84 04 85		        .word nt_block_read, xt_block_write_vector, z_block_write_vector
>c6fa		62 6c 6f 63 6b 2d 77 72		        .text "block-write-vector"
>c702		69 74 65 2d 76 65 63 74 6f 72
.c70c						nt_block_read:
>c70c		0a 28				        .byte 10, HC+NN ; Deferred words need the HC (Code Field) flag.
>c70e		1e c7 d9 84 e7 84		        .word nt_block_read_vector, xt_block_read, z_block_read
>c714		62 6c 6f 63 6b 2d 72 65		        .text "block-read"
>c71c		61 64
.c71e						nt_block_read_vector:
>c71e		11 28				        .byte 17, HC+NN ; Deferred words need the HC (Code Field) flag.
>c720		37 c7 e7 84 ec 84		        .word nt_save_buffers, xt_block_read_vector, z_block_read_vector
>c726		62 6c 6f 63 6b 2d 72 65		        .text "block-read-vector"
>c72e		61 64 2d 76 65 63 74 6f 72
.c737						nt_save_buffers:
>c737		0c 00				        .byte 12, 0
>c739		4b c7 35 9d 4f 9d		        .word nt_block, xt_save_buffers, z_save_buffers
>c73f		73 61 76 65 2d 62 75 66		        .text "save-buffers"
>c747		66 65 72 73
.c74b						nt_block:
>c74b		05 00				        .byte 5, 0
>c74d		58 c7 5d 83 af 83		        .word nt_update, xt_block, z_block
>c753		62 6c 6f 63 6b			        .text "block"
.c758						nt_update:
>c758		06 00				        .byte 6, 0
>c75a		66 c7 a9 a4 b1 a4		        .word nt_buffer, xt_update, z_update
>c760		75 70 64 61 74 65		        .text "update"
.c766						nt_buffer:
>c766		06 00				        .byte 6, 0
>c768		74 c7 30 85 60 85		        .word nt_empty_buffers, xt_buffer, z_buffer
>c76e		62 75 66 66 65 72		        .text "buffer"
.c774						nt_empty_buffers:
>c774		0d 00				        .byte 13, 0
>c776		89 c7 7e 8d 84 8d		        .word nt_flush, xt_empty_buffers, z_empty_buffers
>c77c		65 6d 70 74 79 2d 62 75		        .text "empty-buffers"
>c784		66 66 65 72 73
.c789						nt_flush:
>c789		05 00				        .byte 5, 0
>c78b		96 c7 a4 8f ad 8f		        .word nt_load, xt_flush, z_flush
>c791		66 6c 75 73 68			        .text "flush"
.c796						nt_load:
>c796		04 10				        .byte 4, UF
>c798		a2 c7 dc 92 1f 93		        .word nt_thru, xt_load, z_load
>c79e		6c 6f 61 64			        .text "load"
.c7a2						nt_thru:
>c7a2		04 10				        .byte 4, UF
>c7a4		ae c7 20 a0 64 a0		        .word nt_list, xt_thru, z_thru
>c7aa		74 68 72 75			        .text "thru"
.c7ae						nt_list:
>c7ae		04 10				        .byte 4, UF
>c7b0		ba c7 a2 92 ae 92		        .word +, xt_list, z_list
>c7b6		6c 69 73 74			        .text "list"
.c7ba						+
.c7ba						nt_block_ramdrive_init:
>c7ba		13 10				        .byte 19, UF
>c7bc		d5 c7 b0 83 d8 84		        .word +, xt_block_ramdrive_init, z_block_ramdrive_init
>c7c2		62 6c 6f 63 6b 2d 72 61		        .text "block-ramdrive-init"
>c7ca		6d 64 72 69 76 65 2d 69 6e 69 74
.c7d5						+
.c7d5						nt_definitions:
>c7d5		0b 00				        .byte 11, 0
>c7d7		e8 c7 5e 8a 66 8a		        .word nt_wordlist, xt_definitions, z_definitions
>c7dd		64 65 66 69 6e 69 74 69		        .text "definitions"
>c7e5		6f 6e 73
.c7e8						nt_wordlist:
>c7e8		08 00				        .byte 8, 0
>c7ea		f8 c7 44 a5 5a a5		        .word nt_search_wordlist, xt_wordlist, z_wordlist
>c7f0		77 6f 72 64 6c 69 73 74		        .text "wordlist"
.c7f8						nt_search_wordlist:
>c7f8		0f 10				        .byte 15, UF
>c7fa		0f c8 c1 9a 34 9b		        .word nt_set_current, xt_search_wordlist, z_search_wordlist
>c800		73 65 61 72 63 68 2d 77		        .text "search-wordlist"
>c808		6f 72 64 6c 69 73 74
.c80f						nt_set_current:
>c80f		0b 10				        .byte 11, UF
>c811		22 c8 c3 9b ce 9b		        .word nt_get_current, xt_set_current, z_set_current
>c817		73 65 74 2d 63 75 72 72		        .text "set-current"
>c81f		65 6e 74
.c822						nt_get_current:
>c822		0b 00				        .byte 11, 0
>c824		35 c8 46 90 50 90		        .word nt_set_order, xt_get_current, z_get_current
>c82a		67 65 74 2d 63 75 72 72		        .text "get-current"
>c832		65 6e 74
.c835						nt_set_order:
>c835		09 00				        .byte 9, 0
>c837		46 c8 cf 9b 02 9c		        .word nt_get_order, xt_set_order, z_set_order
>c83d		73 65 74 2d 6f 72 64 65		        .text "set-order"
>c845		72
.c846						nt_get_order:
>c846		09 00				        .byte 9, 0
>c848		57 c8 51 90 79 90		        .word nt_root_wordlist, xt_get_order, z_get_order
>c84e		67 65 74 2d 6f 72 64 65		        .text "get-order"
>c856		72
.c857						nt_root_wordlist:
>c857		0d 00				        .byte 13, 0
>c859		6c c8 6f 9a 77 9a		        .word +, xt_root_wordlist, z_root_wordlist
>c85f		72 6f 6f 74 2d 77 6f 72		        .text "root-wordlist"
>c867		64 6c 69 73 74
.c86c						+
.c86c						nt_assembler_wordlist:
>c86c		12 00				        .byte 18, 0
>c86e		86 c8 d9 a1 e1 a1		        .word +, xt_assembler_wordlist, z_assembler_wordlist
>c874		61 73 73 65 6d 62 6c 65		        .text "assembler-wordlist"
>c87c		72 2d 77 6f 72 64 6c 69 73 74
.c886						+
.c886						nt_editor_wordlist:
>c886		0f 00				        .byte 15, 0
>c888		9d c8 32 97 3a 97		        .word +, xt_editor_wordlist, z_editor_wordlist
>c88e		65 64 69 74 6f 72 2d 77		        .text "editor-wordlist"
>c896		6f 72 64 6c 69 73 74
.c89d						+
.c89d						nt_forth_wordlist:
>c89d		0e 00				        .byte 14, 0
>c89f		b3 c8 eb a5 f1 a5		        .word nt_only, xt_forth_wordlist, z_forth_wordlist
>c8a5		66 6f 72 74 68 2d 77 6f		        .text "forth-wordlist"
>c8ad		72 64 6c 69 73 74
.c8b3						nt_only:
>c8b3		04 00				        .byte 4, 0
>c8b5		bf c8 51 97 5c 97		        .word nt_also, xt_only, z_only
>c8bb		6f 6e 6c 79			        .text "only"
.c8bf						nt_also:
>c8bf		04 00				        .byte 4, 0
>c8c1		cb c8 a5 82 b4 82		        .word nt_previous, xt_also, z_also
>c8c7		61 6c 73 6f			        .text "also"
.c8cb						nt_previous:
>c8cb		08 00				        .byte 8, 0
>c8cd		db c8 7d 99 89 99		        .word nt_to_order, xt_previous, z_previous
>c8d3		70 72 65 76 69 6f 75 73		        .text "previous"
.c8db						nt_to_order:
>c8db		06 00				        .byte 6, 0
>c8dd		e9 c8 8f a1 a1 a1		        .word nt_order, xt_to_order, z_to_order
>c8e3		3e 6f 72 64 65 72		        .text ">order"
.c8e9						nt_order:
>c8e9		05 00				        .byte 5, 0
>c8eb		f6 c8 6f 97 99 97		        .word nt_forth, xt_order, z_order
>c8f1		6f 72 64 65 72			        .text "order"
.c8f6						nt_forth:
>c8f6		05 00				        .byte 5, 0
>c8f8		03 c9 e5 8f eb 8f		        .word +, xt_forth, z_forth
>c8fe		66 6f 72 74 68			        .text "forth"
.c903						+
>c903		03 08				nt_see: .byte 3, NN
>c905		0e c9 35 9b c2 9b		        .word +, xt_see, z_see
>c90b		73 65 65			        .text "see"
.c90e						+
.c90e						nt_ed:
>c90e		02 08				        .byte 2, NN
>c910		18 c9 15 8d 18 8d		        .word +, xt_ed, z_ed
>c916		65 64				        .text "ed"
.c918						+
.c918						nt_cold:
>c918		04 00				        .byte 4, 0
>c91a		24 c9 00 80 b1 80		        .word nt_bye, xt_cold, z_cold
>c920		63 6f 6c 64			        .text "cold"
.c924						nt_bye:
>c924		03				        .byte 3         ; length of word strings
>c925		00				        .byte 0         ; status byte
>c926		00 00				        .word 0000      ; next word in Dictionary, 0000 signals end
>c928		6d 85				        .word xt_bye    ; start of code block (xt of this word)
>c92a		70 85				        .word z_bye     ; end of code (RTS)
>c92c		62 79 65			        .text "bye"     ; word name, always lower case, not zero-terminated
.c92f						root_dictionary_start:
.c92f						nt_root_set_order:
>c92f		09 00				        .byte 9, 0
>c931		40 c9 cf 9b 02 9c		        .word nt_root_forth, xt_set_order, z_set_order
>c937		73 65 74 2d 6f 72 64 65		        .text "set-order"
>c93f		72
.c940						nt_root_forth:
>c940		05 00				        .byte 5, 0
>c942		4d c9 e5 8f eb 8f		        .word nt_root_forth_wordlist, xt_forth, z_forth
>c948		66 6f 72 74 68			        .text "forth"
.c94d						nt_root_forth_wordlist:
>c94d		0e 00				        .byte 14, 0
>c94f		63 c9 eb a5 f1 a5		        .word nt_root_words, xt_forth_wordlist, z_forth_wordlist
>c955		66 6f 72 74 68 2d 77 6f		        .text "forth-wordlist"
>c95d		72 64 6c 69 73 74
.c963						nt_root_words:
>c963		05 00				        .byte 5, 0
>c965		00 00 5b a5 b7 a5		        .word 0000, xt_words, z_words
>c96b		77 6f 72 64 73			        .text "words"
.c970						editor_dictionary_start:
.c970						nt_editor_o:
>c970		01 00				        .byte 1, 0
>c972		79 c9 18 a7 5d a7		        .word nt_editor_line, xt_editor_o, z_editor_o
>c978		6f				        .text "o"
.c979						nt_editor_line:
>c979		04 10				        .byte 4, UF
>c97b		85 c9 ff a6 17 a7		        .word nt_editor_l, xt_editor_line, z_editor_line
>c981		6c 69 6e 65			        .text "line"
.c985						nt_editor_l:
>c985		01 00				        .byte 1, 0
>c987		8e c9 85 a6 fe a6		        .word nt_editor_el, xt_editor_l, z_editor_l
>c98d		6c				        .text "l"
.c98e						nt_editor_el:
>c98e		02 00				        .byte 2, 0
>c990		98 c9 73 a6 84 a6		        .word nt_editor_erase_screen, xt_editor_el, z_editor_el
>c996		65 6c				        .text "el"
.c998						nt_editor_erase_screen:
>c998		0c 00				        .byte 12, 0
>c99a		ac c9 61 a6 72 a6		        .word nt_editor_enter_screen, xt_editor_erase_screen, z_editor_erase_screen
>c9a0		65 72 61 73 65 2d 73 63		        .text "erase-screen"
>c9a8		72 65 65 6e
.c9ac						nt_editor_enter_screen:
>c9ac		0c 00				        .byte 12, 0
>c9ae		00 00 45 a6 60 a6		        .word 0000, xt_editor_enter_screen, z_editor_enter_screen
>c9b4		65 6e 74 65 72 2d 73 63		        .text "enter-screen"
>c9bc		72 65 65 6e
.c9c0						assembler_dictionary_start:
.c9c0						nt_asm_adc_h:
>c9c0		05 0c						.byte 5, IM+NN
>c9c2		cd c9				                .word nt_asm_adc_x
>c9c4		b2 a7 b7 a7					.word xt_asm_adc_h, z_asm_adc_h
>c9c8		61 64 63 2e 23					.text "adc.#"
.c9cd						nt_asm_adc_x:
>c9cd		05 0c						.byte 5, IM+NN
>c9cf		da c9				                .word nt_asm_adc_y
>c9d1		b7 a7 bc a7					.word xt_asm_adc_x, z_asm_adc_x
>c9d5		61 64 63 2e 78					.text "adc.x"
.c9da						nt_asm_adc_y:
>c9da		05 0c						.byte 5, IM+NN
>c9dc		e7 c9				                .word nt_asm_adc_z
>c9de		bc a7 c1 a7					.word xt_asm_adc_y, z_asm_adc_y
>c9e2		61 64 63 2e 79					.text "adc.y"
.c9e7						nt_asm_adc_z:
>c9e7		05 0c						.byte 5, IM+NN
>c9e9		f4 c9				                .word nt_asm_adc_zi
>c9eb		c1 a7 c6 a7					.word xt_asm_adc_z, z_asm_adc_z
>c9ef		61 64 63 2e 7a					.text "adc.z"
.c9f4						nt_asm_adc_zi:
>c9f4		06 0c						.byte 6, IM+NN
>c9f6		02 ca				                .word nt_asm_adc_ziy
>c9f8		c6 a7 cb a7					.word xt_asm_adc_zi, z_asm_adc_zi
>c9fc		61 64 63 2e 7a 69				.text "adc.zi"
.ca02						nt_asm_adc_ziy:
>ca02		07 0c						.byte 7, IM+NN
>ca04		11 ca				                .word nt_asm_adc_zx
>ca06		cb a7 d0 a7					.word xt_asm_adc_ziy, z_asm_adc_ziy
>ca0a		61 64 63 2e 7a 69 79				.text "adc.ziy"
.ca11						nt_asm_adc_zx:
>ca11		06 0c						.byte 6, IM+NN
>ca13		1f ca				                .word nt_asm_adc_zxi
>ca15		d0 a7 d5 a7					.word xt_asm_adc_zx, z_asm_adc_zx
>ca19		61 64 63 2e 7a 78				.text "adc.zx"
.ca1f						nt_asm_adc_zxi:
>ca1f		07 0c						.byte 7, IM+NN
>ca21		2e ca				                .word nt_asm_and
>ca23		d5 a7 da a7					.word xt_asm_adc_zxi, z_asm_adc_zxi
>ca27		61 64 63 2e 7a 78 69				.text "adc.zxi"
.ca2e						nt_asm_and:
>ca2e		04 0c						.byte 4, IM+NN
>ca30		3a ca				                .word nt_asm_and_h
>ca32		da a7 df a7					.word xt_asm_and, z_asm_and
>ca36		61 6e 64 2e					.text "and."
.ca3a						nt_asm_and_h:
>ca3a		05 0c						.byte 5, IM+NN
>ca3c		47 ca				                .word nt_asm_and_x
>ca3e		df a7 e4 a7					.word xt_asm_and_h, z_asm_and_h
>ca42		61 6e 64 2e 23					.text "and.#"
.ca47						nt_asm_and_x:
>ca47		05 0c						.byte 5, IM+NN
>ca49		54 ca				                .word nt_asm_and_y
>ca4b		e4 a7 e9 a7					.word xt_asm_and_x, z_asm_and_x
>ca4f		61 6e 64 2e 78					.text "and.x"
.ca54						nt_asm_and_y:
>ca54		05 0c						.byte 5, IM+NN
>ca56		61 ca				                .word nt_asm_and_z
>ca58		e9 a7 ee a7					.word xt_asm_and_y, z_asm_and_y
>ca5c		61 6e 64 2e 79					.text "and.y"
.ca61						nt_asm_and_z:
>ca61		05 0c						.byte 5, IM+NN
>ca63		6e ca				                .word nt_asm_and_zi
>ca65		ee a7 f3 a7					.word xt_asm_and_z, z_asm_and_z
>ca69		61 6e 64 2e 7a					.text "and.z"
.ca6e						nt_asm_and_zi:
>ca6e		06 0c						.byte 6, IM+NN
>ca70		7c ca				                .word nt_asm_and_ziy
>ca72		f3 a7 f8 a7					.word xt_asm_and_zi, z_asm_and_zi
>ca76		61 6e 64 2e 7a 69				.text "and.zi"
.ca7c						nt_asm_and_ziy:
>ca7c		07 0c						.byte 7, IM+NN
>ca7e		8b ca				                .word nt_asm_and_zx
>ca80		f8 a7 fd a7					.word xt_asm_and_ziy, z_asm_and_ziy
>ca84		61 6e 64 2e 7a 69 79				.text "and.ziy"
.ca8b						nt_asm_and_zx:
>ca8b		06 0c						.byte 6, IM+NN
>ca8d		99 ca				                .word nt_asm_and_zxi
>ca8f		fd a7 02 a8					.word xt_asm_and_zx, z_asm_and_zx
>ca93		61 6e 64 2e 7a 78				.text "and.zx"
.ca99						nt_asm_and_zxi:
>ca99		07 0c						.byte 7, IM+NN
>ca9b		a8 ca				                .word nt_asm_asl
>ca9d		02 a8 07 a8					.word xt_asm_and_zxi, z_asm_and_zxi
>caa1		61 6e 64 2e 7a 78 69				.text "and.zxi"
.caa8						nt_asm_asl:
>caa8		03 0c						.byte 3, IM+NN
>caaa		b3 ca				                .word nt_asm_asl_a
>caac		07 a8 0c a8					.word xt_asm_asl, z_asm_asl
>cab0		61 73 6c					.text "asl"
.cab3						nt_asm_asl_a:
>cab3		05 0c						.byte 5, IM+NN
>cab5		c0 ca				                .word nt_asm_asl_x
>cab7		0c a8 11 a8					.word xt_asm_asl_a, z_asm_asl_a
>cabb		61 73 6c 2e 61					.text "asl.a"
.cac0						nt_asm_asl_x:
>cac0		05 0c						.byte 5, IM+NN
>cac2		cd ca				                .word nt_asm_asl_z
>cac4		11 a8 16 a8					.word xt_asm_asl_x, z_asm_asl_x
>cac8		61 73 6c 2e 78					.text "asl.x"
.cacd						nt_asm_asl_z:
>cacd		05 0c						.byte 5, IM+NN
>cacf		da ca				                .word nt_asm_asl_zx
>cad1		16 a8 1b a8					.word xt_asm_asl_z, z_asm_asl_z
>cad5		61 73 6c 2e 7a					.text "asl.z"
.cada						nt_asm_asl_zx:
>cada		06 0c						.byte 6, IM+NN
>cadc		e8 ca				                .word nt_asm_bcc
>cade		1b a8 20 a8					.word xt_asm_asl_zx, z_asm_asl_zx
>cae2		61 73 6c 2e 7a 78				.text "asl.zx"
.cae8						nt_asm_bcc:
>cae8		03 0c						.byte 3, IM+NN
>caea		f3 ca				                .word nt_asm_bcs
>caec		20 a8 25 a8					.word xt_asm_bcc, z_asm_bcc
>caf0		62 63 63					.text "bcc"
.caf3						nt_asm_bcs:
>caf3		03 0c						.byte 3, IM+NN
>caf5		fe ca				                .word nt_asm_beq
>caf7		25 a8 2c a8					.word xt_asm_bcs, z_asm_bcs
>cafb		62 63 73					.text "bcs"
.cafe						nt_asm_beq:
>cafe		03 0c						.byte 3, IM+NN
>cb00		09 cb				                .word nt_asm_bit
>cb02		2c a8 31 a8					.word xt_asm_beq, z_asm_beq
>cb06		62 65 71					.text "beq"
.cb09						nt_asm_bit:
>cb09		03 0c						.byte 3, IM+NN
>cb0b		14 cb				                .word nt_asm_bit_h
>cb0d		31 a8 36 a8					.word xt_asm_bit, z_asm_bit
>cb11		62 69 74					.text "bit"
.cb14						nt_asm_bit_h:
>cb14		05 0c						.byte 5, IM+NN
>cb16		21 cb				                .word nt_asm_bit_x
>cb18		36 a8 3b a8					.word xt_asm_bit_h, z_asm_bit_h
>cb1c		62 69 74 2e 23					.text "bit.#"
.cb21						nt_asm_bit_x:
>cb21		05 0c						.byte 5, IM+NN
>cb23		2e cb				                .word nt_asm_bit_z
>cb25		3b a8 40 a8					.word xt_asm_bit_x, z_asm_bit_x
>cb29		62 69 74 2e 78					.text "bit.x"
.cb2e						nt_asm_bit_z:
>cb2e		05 0c						.byte 5, IM+NN
>cb30		3b cb				                .word nt_asm_bit_zx
>cb32		40 a8 45 a8					.word xt_asm_bit_z, z_asm_bit_z
>cb36		62 69 74 2e 7a					.text "bit.z"
.cb3b						nt_asm_bit_zx:
>cb3b		06 0c						.byte 6, IM+NN
>cb3d		49 cb				                .word nt_asm_bmi
>cb3f		45 a8 4a a8					.word xt_asm_bit_zx, z_asm_bit_zx
>cb43		62 69 74 2e 7a 78				.text "bit.zx"
.cb49						nt_asm_bmi:
>cb49		03 0c						.byte 3, IM+NN
>cb4b		54 cb				                .word nt_asm_bne
>cb4d		4a a8 4f a8					.word xt_asm_bmi, z_asm_bmi
>cb51		62 6d 69					.text "bmi"
.cb54						nt_asm_bne:
>cb54		03 0c						.byte 3, IM+NN
>cb56		5f cb				                .word nt_asm_bpl
>cb58		4f a8 54 a8					.word xt_asm_bne, z_asm_bne
>cb5c		62 6e 65					.text "bne"
.cb5f						nt_asm_bpl:
>cb5f		03 0c						.byte 3, IM+NN
>cb61		6a cb				                .word nt_asm_bra
>cb63		54 a8 59 a8					.word xt_asm_bpl, z_asm_bpl
>cb67		62 70 6c					.text "bpl"
.cb6a						nt_asm_bra:
>cb6a		03 0c						.byte 3, IM+NN
>cb6c		75 cb				                .word nt_asm_brk
>cb6e		59 a8 5e a8					.word xt_asm_bra, z_asm_bra
>cb72		62 72 61					.text "bra"
.cb75						nt_asm_brk:
>cb75		03 0c						.byte 3, IM+NN
>cb77		80 cb				                .word nt_asm_bvc
>cb79		5e a8 63 a8					.word xt_asm_brk, z_asm_brk
>cb7d		62 72 6b					.text "brk"
.cb80						nt_asm_bvc:
>cb80		03 0c						.byte 3, IM+NN
>cb82		8b cb				                .word nt_asm_bvs
>cb84		63 a8 68 a8					.word xt_asm_bvc, z_asm_bvc
>cb88		62 76 63					.text "bvc"
.cb8b						nt_asm_bvs:
>cb8b		03 0c						.byte 3, IM+NN
>cb8d		96 cb				                .word nt_asm_clc
>cb8f		68 a8 6d a8					.word xt_asm_bvs, z_asm_bvs
>cb93		62 76 73					.text "bvs"
.cb96						nt_asm_clc:
>cb96		03 0c						.byte 3, IM+NN
>cb98		a1 cb				                .word nt_asm_cld
>cb9a		6d a8 72 a8					.word xt_asm_clc, z_asm_clc
>cb9e		63 6c 63					.text "clc"
.cba1						nt_asm_cld:
>cba1		03 0c						.byte 3, IM+NN
>cba3		ac cb				                .word nt_asm_cli
>cba5		72 a8 77 a8					.word xt_asm_cld, z_asm_cld
>cba9		63 6c 64					.text "cld"
.cbac						nt_asm_cli:
>cbac		03 0c						.byte 3, IM+NN
>cbae		b7 cb				                .word nt_asm_clv
>cbb0		77 a8 7c a8					.word xt_asm_cli, z_asm_cli
>cbb4		63 6c 69					.text "cli"
.cbb7						nt_asm_clv:
>cbb7		03 0c						.byte 3, IM+NN
>cbb9		c2 cb				                .word nt_asm_cmp
>cbbb		7c a8 81 a8					.word xt_asm_clv, z_asm_clv
>cbbf		63 6c 76					.text "clv"
.cbc2						nt_asm_cmp:
>cbc2		03 0c						.byte 3, IM+NN
>cbc4		cd cb				                .word nt_asm_cmp_h
>cbc6		81 a8 86 a8					.word xt_asm_cmp, z_asm_cmp
>cbca		63 6d 70					.text "cmp"
.cbcd						nt_asm_cmp_h:
>cbcd		05 0c						.byte 5, IM+NN
>cbcf		da cb				                .word nt_asm_cmp_x
>cbd1		86 a8 8b a8					.word xt_asm_cmp_h, z_asm_cmp_h
>cbd5		63 6d 70 2e 23					.text "cmp.#"
.cbda						nt_asm_cmp_x:
>cbda		05 0c						.byte 5, IM+NN
>cbdc		e7 cb				                .word nt_asm_cmp_y
>cbde		8b a8 90 a8					.word xt_asm_cmp_x, z_asm_cmp_x
>cbe2		63 6d 70 2e 78					.text "cmp.x"
.cbe7						nt_asm_cmp_y:
>cbe7		05 0c						.byte 5, IM+NN
>cbe9		f4 cb				                .word nt_asm_cmp_z
>cbeb		90 a8 95 a8					.word xt_asm_cmp_y, z_asm_cmp_y
>cbef		63 6d 70 2e 79					.text "cmp.y"
.cbf4						nt_asm_cmp_z:
>cbf4		05 0c						.byte 5, IM+NN
>cbf6		01 cc				                .word nt_asm_cmp_zi
>cbf8		95 a8 9a a8					.word xt_asm_cmp_z, z_asm_cmp_z
>cbfc		63 6d 70 2e 7a					.text "cmp.z"
.cc01						nt_asm_cmp_zi:
>cc01		06 0c						.byte 6, IM+NN
>cc03		0f cc				                .word nt_asm_cmp_ziy
>cc05		9a a8 9f a8					.word xt_asm_cmp_zi, z_asm_cmp_zi
>cc09		63 6d 70 2e 7a 69				.text "cmp.zi"
.cc0f						nt_asm_cmp_ziy:
>cc0f		07 0c						.byte 7, IM+NN
>cc11		1e cc				                .word nt_asm_cmp_zx
>cc13		9f a8 a4 a8					.word xt_asm_cmp_ziy, z_asm_cmp_ziy
>cc17		63 6d 70 2e 7a 69 79				.text "cmp.ziy"
.cc1e						nt_asm_cmp_zx:
>cc1e		06 0c						.byte 6, IM+NN
>cc20		2c cc				                .word nt_asm_cmp_zxi
>cc22		a4 a8 a9 a8					.word xt_asm_cmp_zx, z_asm_cmp_zx
>cc26		63 6d 70 2e 7a 78				.text "cmp.zx"
.cc2c						nt_asm_cmp_zxi:
>cc2c		07 0c						.byte 7, IM+NN
>cc2e		3b cc				                .word nt_asm_cpx
>cc30		a9 a8 ae a8					.word xt_asm_cmp_zxi, z_asm_cmp_zxi
>cc34		63 6d 70 2e 7a 78 69				.text "cmp.zxi"
.cc3b						nt_asm_cpx:
>cc3b		03 0c						.byte 3, IM+NN
>cc3d		46 cc				                .word nt_asm_cpx_h
>cc3f		ae a8 b3 a8					.word xt_asm_cpx, z_asm_cpx
>cc43		63 70 78					.text "cpx"
.cc46						nt_asm_cpx_h:
>cc46		05 0c						.byte 5, IM+NN
>cc48		53 cc				                .word nt_asm_cpx_z
>cc4a		b3 a8 b8 a8					.word xt_asm_cpx_h, z_asm_cpx_h
>cc4e		63 70 78 2e 23					.text "cpx.#"
.cc53						nt_asm_cpx_z:
>cc53		05 0c						.byte 5, IM+NN
>cc55		60 cc				                .word nt_asm_cpy
>cc57		b8 a8 bd a8					.word xt_asm_cpx_z, z_asm_cpx_z
>cc5b		63 70 78 2e 7a					.text "cpx.z"
.cc60						nt_asm_cpy:
>cc60		03 0c						.byte 3, IM+NN
>cc62		6b cc				                .word nt_asm_cpy_h
>cc64		bd a8 c4 a8					.word xt_asm_cpy, z_asm_cpy
>cc68		63 70 79					.text "cpy"
.cc6b						nt_asm_cpy_h:
>cc6b		05 0c						.byte 5, IM+NN
>cc6d		78 cc				                .word nt_asm_cpy_z
>cc6f		c4 a8 c9 a8					.word xt_asm_cpy_h, z_asm_cpy_h
>cc73		63 70 79 2e 23					.text "cpy.#"
.cc78						nt_asm_cpy_z:
>cc78		05 0c						.byte 5, IM+NN
>cc7a		85 cc				                .word nt_asm_dec
>cc7c		c9 a8 ce a8					.word xt_asm_cpy_z, z_asm_cpy_z
>cc80		63 70 79 2e 7a					.text "cpy.z"
.cc85						nt_asm_dec:
>cc85		03 0c						.byte 3, IM+NN
>cc87		90 cc				                .word nt_asm_dec_a
>cc89		ce a8 d3 a8					.word xt_asm_dec, z_asm_dec
>cc8d		64 65 63					.text "dec"
.cc90						nt_asm_dec_a:
>cc90		05 0c						.byte 5, IM+NN
>cc92		9d cc				                .word nt_asm_dec_x
>cc94		d3 a8 d8 a8					.word xt_asm_dec_a, z_asm_dec_a
>cc98		64 65 63 2e 61					.text "dec.a"
.cc9d						nt_asm_dec_x:
>cc9d		05 0c						.byte 5, IM+NN
>cc9f		aa cc				                .word nt_asm_dec_z
>cca1		d8 a8 dd a8					.word xt_asm_dec_x, z_asm_dec_x
>cca5		64 65 63 2e 78					.text "dec.x"
.ccaa						nt_asm_dec_z:
>ccaa		05 0c						.byte 5, IM+NN
>ccac		b7 cc				                .word nt_asm_dec_zx
>ccae		dd a8 e2 a8					.word xt_asm_dec_z, z_asm_dec_z
>ccb2		64 65 63 2e 7a					.text "dec.z"
.ccb7						nt_asm_dec_zx:
>ccb7		06 0c						.byte 6, IM+NN
>ccb9		c5 cc				                .word nt_asm_dex
>ccbb		e2 a8 e7 a8					.word xt_asm_dec_zx, z_asm_dec_zx
>ccbf		64 65 63 2e 7a 78				.text "dec.zx"
.ccc5						nt_asm_dex:
>ccc5		03 0c						.byte 3, IM+NN
>ccc7		d0 cc				                .word nt_asm_dey
>ccc9		e7 a8 ec a8					.word xt_asm_dex, z_asm_dex
>cccd		64 65 78					.text "dex"
.ccd0						nt_asm_dey:
>ccd0		03 0c						.byte 3, IM+NN
>ccd2		db cc				                .word nt_asm_eor
>ccd4		ec a8 f1 a8					.word xt_asm_dey, z_asm_dey
>ccd8		64 65 79					.text "dey"
.ccdb						nt_asm_eor:
>ccdb		03 0c						.byte 3, IM+NN
>ccdd		e6 cc				                .word nt_asm_eor_h
>ccdf		f1 a8 f6 a8					.word xt_asm_eor, z_asm_eor
>cce3		65 6f 72					.text "eor"
.cce6						nt_asm_eor_h:
>cce6		05 0c						.byte 5, IM+NN
>cce8		f3 cc				                .word nt_asm_eor_x
>ccea		f6 a8 fb a8					.word xt_asm_eor_h, z_asm_eor_h
>ccee		65 6f 72 2e 23					.text "eor.#"
.ccf3						nt_asm_eor_x:
>ccf3		05 0c						.byte 5, IM+NN
>ccf5		00 cd				                .word nt_asm_eor_y
>ccf7		fb a8 00 a9					.word xt_asm_eor_x, z_asm_eor_x
>ccfb		65 6f 72 2e 78					.text "eor.x"
.cd00						nt_asm_eor_y:
>cd00		05 0c						.byte 5, IM+NN
>cd02		0d cd				                .word nt_asm_eor_z
>cd04		00 a9 05 a9					.word xt_asm_eor_y, z_asm_eor_y
>cd08		65 6f 72 2e 79					.text "eor.y"
.cd0d						nt_asm_eor_z:
>cd0d		05 0c						.byte 5, IM+NN
>cd0f		1a cd				                .word nt_asm_eor_zi
>cd11		05 a9 0a a9					.word xt_asm_eor_z, z_asm_eor_z
>cd15		65 6f 72 2e 7a					.text "eor.z"
.cd1a						nt_asm_eor_zi:
>cd1a		06 0c						.byte 6, IM+NN
>cd1c		28 cd				                .word nt_asm_eor_ziy
>cd1e		0a a9 0f a9					.word xt_asm_eor_zi, z_asm_eor_zi
>cd22		65 6f 72 2e 7a 69				.text "eor.zi"
.cd28						nt_asm_eor_ziy:
>cd28		07 0c						.byte 7, IM+NN
>cd2a		37 cd				                .word nt_asm_eor_zx
>cd2c		0f a9 14 a9					.word xt_asm_eor_ziy, z_asm_eor_ziy
>cd30		65 6f 72 2e 7a 69 79				.text "eor.ziy"
.cd37						nt_asm_eor_zx:
>cd37		06 0c						.byte 6, IM+NN
>cd39		45 cd				                .word nt_asm_eor_zxi
>cd3b		14 a9 19 a9					.word xt_asm_eor_zx, z_asm_eor_zx
>cd3f		65 6f 72 2e 7a 78				.text "eor.zx"
.cd45						nt_asm_eor_zxi:
>cd45		07 0c						.byte 7, IM+NN
>cd47		54 cd				                .word nt_asm_inc
>cd49		19 a9 1e a9					.word xt_asm_eor_zxi, z_asm_eor_zxi
>cd4d		65 6f 72 2e 7a 78 69				.text "eor.zxi"
.cd54						nt_asm_inc:
>cd54		03 0c						.byte 3, IM+NN
>cd56		5f cd				                .word nt_asm_inc_a
>cd58		1e a9 23 a9					.word xt_asm_inc, z_asm_inc
>cd5c		69 6e 63					.text "inc"
.cd5f						nt_asm_inc_a:
>cd5f		05 0c						.byte 5, IM+NN
>cd61		6c cd				                .word nt_asm_inc_x
>cd63		23 a9 28 a9					.word xt_asm_inc_a, z_asm_inc_a
>cd67		69 6e 63 2e 61					.text "inc.a"
.cd6c						nt_asm_inc_x:
>cd6c		05 0c						.byte 5, IM+NN
>cd6e		79 cd				                .word nt_asm_inc_z
>cd70		28 a9 2d a9					.word xt_asm_inc_x, z_asm_inc_x
>cd74		69 6e 63 2e 78					.text "inc.x"
.cd79						nt_asm_inc_z:
>cd79		05 0c						.byte 5, IM+NN
>cd7b		86 cd				                .word nt_asm_inc_zx
>cd7d		2d a9 32 a9					.word xt_asm_inc_z, z_asm_inc_z
>cd81		69 6e 63 2e 7a					.text "inc.z"
.cd86						nt_asm_inc_zx:
>cd86		06 0c						.byte 6, IM+NN
>cd88		94 cd				                .word nt_asm_inx
>cd8a		32 a9 37 a9					.word xt_asm_inc_zx, z_asm_inc_zx
>cd8e		69 6e 63 2e 7a 78				.text "inc.zx"
.cd94						nt_asm_inx:
>cd94		03 0c						.byte 3, IM+NN
>cd96		9f cd				                .word nt_asm_iny
>cd98		37 a9 3c a9					.word xt_asm_inx, z_asm_inx
>cd9c		69 6e 78					.text "inx"
.cd9f						nt_asm_iny:
>cd9f		03 0c						.byte 3, IM+NN
>cda1		aa cd				                .word nt_asm_jmp
>cda3		3c a9 41 a9					.word xt_asm_iny, z_asm_iny
>cda7		69 6e 79					.text "iny"
.cdaa						nt_asm_jmp:
>cdaa		03 0c						.byte 3, IM+NN
>cdac		b5 cd				                .word nt_asm_jmp_i
>cdae		41 a9 46 a9					.word xt_asm_jmp, z_asm_jmp
>cdb2		6a 6d 70					.text "jmp"
.cdb5						nt_asm_jmp_i:
>cdb5		05 0c						.byte 5, IM+NN
>cdb7		c2 cd				                .word nt_asm_jmp_xi
>cdb9		46 a9 4b a9					.word xt_asm_jmp_i, z_asm_jmp_i
>cdbd		6a 6d 70 2e 69					.text "jmp.i"
.cdc2						nt_asm_jmp_xi:
>cdc2		06 0c						.byte 6, IM+NN
>cdc4		d0 cd				                .word nt_asm_jsr
>cdc6		4b a9 50 a9					.word xt_asm_jmp_xi, z_asm_jmp_xi
>cdca		6a 6d 70 2e 78 69				.text "jmp.xi"
.cdd0						nt_asm_jsr:
>cdd0		03 0c						.byte 3, IM+NN
>cdd2		db cd				                .word nt_asm_lda
>cdd4		50 a9 55 a9					.word xt_asm_jsr, z_asm_jsr
>cdd8		6a 73 72					.text "jsr"
.cddb						nt_asm_lda:
>cddb		03 0c						.byte 3, IM+NN
>cddd		e6 cd				                .word nt_asm_lda_h
>cddf		55 a9 5a a9					.word xt_asm_lda, z_asm_lda
>cde3		6c 64 61					.text "lda"
.cde6						nt_asm_lda_h:
>cde6		05 0c						.byte 5, IM+NN
>cde8		f3 cd				                .word nt_asm_lda_x
>cdea		5a a9 5f a9					.word xt_asm_lda_h, z_asm_lda_h
>cdee		6c 64 61 2e 23					.text "lda.#"
.cdf3						nt_asm_lda_x:
>cdf3		05 0c						.byte 5, IM+NN
>cdf5		00 ce				                .word nt_asm_lda_y
>cdf7		5f a9 64 a9					.word xt_asm_lda_x, z_asm_lda_x
>cdfb		6c 64 61 2e 78					.text "lda.x"
.ce00						nt_asm_lda_y:
>ce00		05 0c						.byte 5, IM+NN
>ce02		0d ce				                .word nt_asm_lda_z
>ce04		64 a9 69 a9					.word xt_asm_lda_y, z_asm_lda_y
>ce08		6c 64 61 2e 79					.text "lda.y"
.ce0d						nt_asm_lda_z:
>ce0d		05 0c						.byte 5, IM+NN
>ce0f		1a ce				                .word nt_asm_lda_zi
>ce11		69 a9 6e a9					.word xt_asm_lda_z, z_asm_lda_z
>ce15		6c 64 61 2e 7a					.text "lda.z"
.ce1a						nt_asm_lda_zi:
>ce1a		06 0c						.byte 6, IM+NN
>ce1c		28 ce				                .word nt_asm_lda_ziy
>ce1e		6e a9 73 a9					.word xt_asm_lda_zi, z_asm_lda_zi
>ce22		6c 64 61 2e 7a 69				.text "lda.zi"
.ce28						nt_asm_lda_ziy:
>ce28		07 0c						.byte 7, IM+NN
>ce2a		37 ce				                .word nt_asm_lda_zx
>ce2c		73 a9 78 a9					.word xt_asm_lda_ziy, z_asm_lda_ziy
>ce30		6c 64 61 2e 7a 69 79				.text "lda.ziy"
.ce37						nt_asm_lda_zx:
>ce37		06 0c						.byte 6, IM+NN
>ce39		45 ce				                .word nt_asm_lda_zxi
>ce3b		78 a9 7d a9					.word xt_asm_lda_zx, z_asm_lda_zx
>ce3f		6c 64 61 2e 7a 78				.text "lda.zx"
.ce45						nt_asm_lda_zxi:
>ce45		07 0c						.byte 7, IM+NN
>ce47		54 ce				                .word nt_asm_ldx
>ce49		7d a9 82 a9					.word xt_asm_lda_zxi, z_asm_lda_zxi
>ce4d		6c 64 61 2e 7a 78 69				.text "lda.zxi"
.ce54						nt_asm_ldx:
>ce54		03 0c						.byte 3, IM+NN
>ce56		5f ce				                .word nt_asm_ldx_h
>ce58		82 a9 87 a9					.word xt_asm_ldx, z_asm_ldx
>ce5c		6c 64 78					.text "ldx"
.ce5f						nt_asm_ldx_h:
>ce5f		05 0c						.byte 5, IM+NN
>ce61		6c ce				                .word nt_asm_ldx_y
>ce63		87 a9 8c a9					.word xt_asm_ldx_h, z_asm_ldx_h
>ce67		6c 64 78 2e 23					.text "ldx.#"
.ce6c						nt_asm_ldx_y:
>ce6c		05 0c						.byte 5, IM+NN
>ce6e		79 ce				                .word nt_asm_ldx_z
>ce70		8c a9 91 a9					.word xt_asm_ldx_y, z_asm_ldx_y
>ce74		6c 64 78 2e 79					.text "ldx.y"
.ce79						nt_asm_ldx_z:
>ce79		05 0c						.byte 5, IM+NN
>ce7b		86 ce				                .word nt_asm_ldx_zy
>ce7d		91 a9 96 a9					.word xt_asm_ldx_z, z_asm_ldx_z
>ce81		6c 64 78 2e 7a					.text "ldx.z"
.ce86						nt_asm_ldx_zy:
>ce86		06 0c						.byte 6, IM+NN
>ce88		94 ce				                .word nt_asm_ldy
>ce8a		96 a9 9b a9					.word xt_asm_ldx_zy, z_asm_ldx_zy
>ce8e		6c 64 78 2e 7a 79				.text "ldx.zy"
.ce94						nt_asm_ldy:
>ce94		03 0c						.byte 3, IM+NN
>ce96		9f ce				                .word nt_asm_ldy_h
>ce98		9b a9 a0 a9					.word xt_asm_ldy, z_asm_ldy
>ce9c		6c 64 79					.text "ldy"
.ce9f						nt_asm_ldy_h:
>ce9f		05 0c						.byte 5, IM+NN
>cea1		ac ce				                .word nt_asm_ldy_x
>cea3		a0 a9 a5 a9					.word xt_asm_ldy_h, z_asm_ldy_h
>cea7		6c 64 79 2e 23					.text "ldy.#"
.ceac						nt_asm_ldy_x:
>ceac		05 0c						.byte 5, IM+NN
>ceae		b9 ce				                .word nt_asm_ldy_z
>ceb0		a5 a9 aa a9					.word xt_asm_ldy_x, z_asm_ldy_x
>ceb4		6c 64 79 2e 78					.text "ldy.x"
.ceb9						nt_asm_ldy_z:
>ceb9		05 0c						.byte 5, IM+NN
>cebb		c6 ce				                .word nt_asm_ldy_zx
>cebd		aa a9 af a9					.word xt_asm_ldy_z, z_asm_ldy_z
>cec1		6c 64 79 2e 7a					.text "ldy.z"
.cec6						nt_asm_ldy_zx:
>cec6		06 0c						.byte 6, IM+NN
>cec8		d4 ce				                .word nt_asm_lsr
>ceca		af a9 b4 a9					.word xt_asm_ldy_zx, z_asm_ldy_zx
>cece		6c 64 79 2e 7a 78				.text "ldy.zx"
.ced4						nt_asm_lsr:
>ced4		03 0c						.byte 3, IM+NN
>ced6		df ce				                .word nt_asm_lsr_a
>ced8		b4 a9 b9 a9					.word xt_asm_lsr, z_asm_lsr
>cedc		6c 73 72					.text "lsr"
.cedf						nt_asm_lsr_a:
>cedf		05 0c						.byte 5, IM+NN
>cee1		ec ce				                .word nt_asm_lsr_x
>cee3		b9 a9 be a9					.word xt_asm_lsr_a, z_asm_lsr_a
>cee7		6c 73 72 2e 61					.text "lsr.a"
.ceec						nt_asm_lsr_x:
>ceec		05 0c						.byte 5, IM+NN
>ceee		f9 ce				                .word nt_asm_lsr_z
>cef0		be a9 c3 a9					.word xt_asm_lsr_x, z_asm_lsr_x
>cef4		6c 73 72 2e 78					.text "lsr.x"
.cef9						nt_asm_lsr_z:
>cef9		05 0c						.byte 5, IM+NN
>cefb		06 cf				                .word nt_asm_lsr_zx
>cefd		c3 a9 c8 a9					.word xt_asm_lsr_z, z_asm_lsr_z
>cf01		6c 73 72 2e 7a					.text "lsr.z"
.cf06						nt_asm_lsr_zx:
>cf06		06 0c						.byte 6, IM+NN
>cf08		14 cf				                .word nt_asm_nop
>cf0a		c8 a9 cd a9					.word xt_asm_lsr_zx, z_asm_lsr_zx
>cf0e		6c 73 72 2e 7a 78				.text "lsr.zx"
.cf14						nt_asm_nop:
>cf14		03 0c						.byte 3, IM+NN
>cf16		1f cf				                .word nt_asm_ora
>cf18		cd a9 d2 a9					.word xt_asm_nop, z_asm_nop
>cf1c		6e 6f 70					.text "nop"
.cf1f						nt_asm_ora:
>cf1f		03 0c						.byte 3, IM+NN
>cf21		2a cf				                .word nt_asm_ora_h
>cf23		d2 a9 d7 a9					.word xt_asm_ora, z_asm_ora
>cf27		6f 72 61					.text "ora"
.cf2a						nt_asm_ora_h:
>cf2a		05 0c						.byte 5, IM+NN
>cf2c		37 cf				                .word nt_asm_ora_x
>cf2e		d7 a9 dc a9					.word xt_asm_ora_h, z_asm_ora_h
>cf32		6f 72 61 2e 23					.text "ora.#"
.cf37						nt_asm_ora_x:
>cf37		05 0c						.byte 5, IM+NN
>cf39		44 cf				                .word nt_asm_ora_y
>cf3b		dc a9 e1 a9					.word xt_asm_ora_x, z_asm_ora_x
>cf3f		6f 72 61 2e 78					.text "ora.x"
.cf44						nt_asm_ora_y:
>cf44		05 0c						.byte 5, IM+NN
>cf46		51 cf				                .word nt_asm_ora_z
>cf48		e1 a9 e6 a9					.word xt_asm_ora_y, z_asm_ora_y
>cf4c		6f 72 61 2e 79					.text "ora.y"
.cf51						nt_asm_ora_z:
>cf51		05 0c						.byte 5, IM+NN
>cf53		5e cf				                .word nt_asm_ora_zi
>cf55		e6 a9 eb a9					.word xt_asm_ora_z, z_asm_ora_z
>cf59		6f 72 61 2e 7a					.text "ora.z"
.cf5e						nt_asm_ora_zi:
>cf5e		06 0c						.byte 6, IM+NN
>cf60		6c cf				                .word nt_asm_ora_ziy
>cf62		eb a9 f2 a9					.word xt_asm_ora_zi, z_asm_ora_zi
>cf66		6f 72 61 2e 7a 69				.text "ora.zi"
.cf6c						nt_asm_ora_ziy:
>cf6c		07 0c						.byte 7, IM+NN
>cf6e		7b cf				                .word nt_asm_ora_zx
>cf70		f2 a9 f7 a9					.word xt_asm_ora_ziy, z_asm_ora_ziy
>cf74		6f 72 61 2e 7a 69 79				.text "ora.ziy"
.cf7b						nt_asm_ora_zx:
>cf7b		06 0c						.byte 6, IM+NN
>cf7d		89 cf				                .word nt_asm_ora_zxi
>cf7f		f7 a9 fc a9					.word xt_asm_ora_zx, z_asm_ora_zx
>cf83		6f 72 61 2e 7a 78				.text "ora.zx"
.cf89						nt_asm_ora_zxi:
>cf89		07 0c						.byte 7, IM+NN
>cf8b		98 cf				                .word nt_asm_pha
>cf8d		fc a9 01 aa					.word xt_asm_ora_zxi, z_asm_ora_zxi
>cf91		6f 72 61 2e 7a 78 69				.text "ora.zxi"
.cf98						nt_asm_pha:
>cf98		03 0c						.byte 3, IM+NN
>cf9a		a3 cf				                .word nt_asm_php
>cf9c		01 aa 06 aa					.word xt_asm_pha, z_asm_pha
>cfa0		70 68 61					.text "pha"
.cfa3						nt_asm_php:
>cfa3		03 0c						.byte 3, IM+NN
>cfa5		ae cf				                .word nt_asm_phx
>cfa7		06 aa 0b aa					.word xt_asm_php, z_asm_php
>cfab		70 68 70					.text "php"
.cfae						nt_asm_phx:
>cfae		03 0c						.byte 3, IM+NN
>cfb0		b9 cf				                .word nt_asm_phy
>cfb2		0b aa 10 aa					.word xt_asm_phx, z_asm_phx
>cfb6		70 68 78					.text "phx"
.cfb9						nt_asm_phy:
>cfb9		03 0c						.byte 3, IM+NN
>cfbb		c4 cf				                .word nt_asm_pla
>cfbd		10 aa 15 aa					.word xt_asm_phy, z_asm_phy
>cfc1		70 68 79					.text "phy"
.cfc4						nt_asm_pla:
>cfc4		03 0c						.byte 3, IM+NN
>cfc6		cf cf				                .word nt_asm_plp
>cfc8		15 aa 1a aa					.word xt_asm_pla, z_asm_pla
>cfcc		70 6c 61					.text "pla"
.cfcf						nt_asm_plp:
>cfcf		03 0c						.byte 3, IM+NN
>cfd1		da cf				                .word nt_asm_plx
>cfd3		1a aa 1f aa					.word xt_asm_plp, z_asm_plp
>cfd7		70 6c 70					.text "plp"
.cfda						nt_asm_plx:
>cfda		03 0c						.byte 3, IM+NN
>cfdc		e5 cf				                .word nt_asm_ply
>cfde		1f aa 24 aa					.word xt_asm_plx, z_asm_plx
>cfe2		70 6c 78					.text "plx"
.cfe5						nt_asm_ply:
>cfe5		03 0c						.byte 3, IM+NN
>cfe7		f0 cf				                .word nt_asm_rol
>cfe9		24 aa 29 aa					.word xt_asm_ply, z_asm_ply
>cfed		70 6c 79					.text "ply"
.cff0						nt_asm_rol:
>cff0		03 0c						.byte 3, IM+NN
>cff2		fb cf				                .word nt_asm_rol_a
>cff4		29 aa 2e aa					.word xt_asm_rol, z_asm_rol
>cff8		72 6f 6c					.text "rol"
.cffb						nt_asm_rol_a:
>cffb		05 0c						.byte 5, IM+NN
>cffd		08 d0				                .word nt_asm_rol_x
>cfff		2e aa 33 aa					.word xt_asm_rol_a, z_asm_rol_a
>d003		72 6f 6c 2e 61					.text "rol.a"
.d008						nt_asm_rol_x:
>d008		05 0c						.byte 5, IM+NN
>d00a		15 d0				                .word nt_asm_rol_z
>d00c		33 aa 38 aa					.word xt_asm_rol_x, z_asm_rol_x
>d010		72 6f 6c 2e 78					.text "rol.x"
.d015						nt_asm_rol_z:
>d015		05 0c						.byte 5, IM+NN
>d017		22 d0				                .word nt_asm_rol_zx
>d019		38 aa 3d aa					.word xt_asm_rol_z, z_asm_rol_z
>d01d		72 6f 6c 2e 7a					.text "rol.z"
.d022						nt_asm_rol_zx:
>d022		06 0c						.byte 6, IM+NN
>d024		30 d0				                .word nt_asm_ror
>d026		3d aa 42 aa					.word xt_asm_rol_zx, z_asm_rol_zx
>d02a		72 6f 6c 2e 7a 78				.text "rol.zx"
.d030						nt_asm_ror:
>d030		03 0c						.byte 3, IM+NN
>d032		3b d0				                .word nt_asm_ror_a
>d034		42 aa 47 aa					.word xt_asm_ror, z_asm_ror
>d038		72 6f 72					.text "ror"
.d03b						nt_asm_ror_a:
>d03b		05 0c						.byte 5, IM+NN
>d03d		48 d0				                .word nt_asm_ror_x
>d03f		47 aa 4c aa					.word xt_asm_ror_a, z_asm_ror_a
>d043		72 6f 72 2e 61					.text "ror.a"
.d048						nt_asm_ror_x:
>d048		05 0c						.byte 5, IM+NN
>d04a		55 d0				                .word nt_asm_ror_z
>d04c		4c aa 51 aa					.word xt_asm_ror_x, z_asm_ror_x
>d050		72 6f 72 2e 78					.text "ror.x"
.d055						nt_asm_ror_z:
>d055		05 0c						.byte 5, IM+NN
>d057		62 d0				                .word nt_asm_ror_zx
>d059		51 aa 56 aa					.word xt_asm_ror_z, z_asm_ror_z
>d05d		72 6f 72 2e 7a					.text "ror.z"
.d062						nt_asm_ror_zx:
>d062		06 0c						.byte 6, IM+NN
>d064		70 d0				                .word nt_asm_rti
>d066		56 aa 5b aa					.word xt_asm_ror_zx, z_asm_ror_zx
>d06a		72 6f 72 2e 7a 78				.text "ror.zx"
.d070						nt_asm_rti:
>d070		03 0c						.byte 3, IM+NN
>d072		7b d0				                .word nt_asm_rts
>d074		5b aa 60 aa					.word xt_asm_rti, z_asm_rti
>d078		72 74 69					.text "rti"
.d07b						nt_asm_rts:
>d07b		03 0c						.byte 3, IM+NN
>d07d		86 d0				                .word nt_asm_sbc
>d07f		60 aa 65 aa					.word xt_asm_rts, z_asm_rts
>d083		72 74 73					.text "rts"
.d086						nt_asm_sbc:
>d086		03 0c						.byte 3, IM+NN
>d088		91 d0				                .word nt_asm_sbc_h
>d08a		65 aa 6a aa					.word xt_asm_sbc, z_asm_sbc
>d08e		73 62 63					.text "sbc"
.d091						nt_asm_sbc_h:
>d091		05 0c						.byte 5, IM+NN
>d093		9e d0				                .word nt_asm_sbc_x
>d095		6a aa 6f aa					.word xt_asm_sbc_h, z_asm_sbc_h
>d099		73 62 63 2e 23					.text "sbc.#"
.d09e						nt_asm_sbc_x:
>d09e		05 0c						.byte 5, IM+NN
>d0a0		ab d0				                .word nt_asm_sbc_y
>d0a2		6f aa 74 aa					.word xt_asm_sbc_x, z_asm_sbc_x
>d0a6		73 62 63 2e 78					.text "sbc.x"
.d0ab						nt_asm_sbc_y:
>d0ab		05 0c						.byte 5, IM+NN
>d0ad		b8 d0				                .word nt_asm_sbc_z
>d0af		74 aa 79 aa					.word xt_asm_sbc_y, z_asm_sbc_y
>d0b3		73 62 63 2e 79					.text "sbc.y"
.d0b8						nt_asm_sbc_z:
>d0b8		05 0c						.byte 5, IM+NN
>d0ba		c5 d0				                .word nt_asm_sbc_zi
>d0bc		79 aa 7e aa					.word xt_asm_sbc_z, z_asm_sbc_z
>d0c0		73 62 63 2e 7a					.text "sbc.z"
.d0c5						nt_asm_sbc_zi:
>d0c5		06 0c						.byte 6, IM+NN
>d0c7		d3 d0				                .word nt_asm_sbc_ziy
>d0c9		7e aa 83 aa					.word xt_asm_sbc_zi, z_asm_sbc_zi
>d0cd		73 62 63 2e 7a 69				.text "sbc.zi"
.d0d3						nt_asm_sbc_ziy:
>d0d3		07 0c						.byte 7, IM+NN
>d0d5		e2 d0				                .word nt_asm_sbc_zx
>d0d7		83 aa 88 aa					.word xt_asm_sbc_ziy, z_asm_sbc_ziy
>d0db		73 62 63 2e 7a 69 79				.text "sbc.ziy"
.d0e2						nt_asm_sbc_zx:
>d0e2		06 0c						.byte 6, IM+NN
>d0e4		f0 d0				                .word nt_asm_sbc_zxi
>d0e6		88 aa 8d aa					.word xt_asm_sbc_zx, z_asm_sbc_zx
>d0ea		73 62 63 2e 7a 78				.text "sbc.zx"
.d0f0						nt_asm_sbc_zxi:
>d0f0		07 0c						.byte 7, IM+NN
>d0f2		ff d0				                .word nt_asm_sec
>d0f4		8d aa 91 aa					.word xt_asm_sbc_zxi, z_asm_sbc_zxi
>d0f8		73 62 63 2e 7a 78 69				.text "sbc.zxi"
.d0ff						nt_asm_sec:
>d0ff		03 0c						.byte 3, IM+NN
>d101		0a d1				                .word nt_asm_sed
>d103		91 aa 95 aa					.word xt_asm_sec, z_asm_sec
>d107		73 65 63					.text "sec"
.d10a						nt_asm_sed:
>d10a		03 0c						.byte 3, IM+NN
>d10c		15 d1				                .word nt_asm_sei
>d10e		95 aa 99 aa					.word xt_asm_sed, z_asm_sed
>d112		73 65 64					.text "sed"
.d115						nt_asm_sei:
>d115		03 0c						.byte 3, IM+NN
>d117		20 d1				                .word nt_asm_sta
>d119		99 aa 9d aa					.word xt_asm_sei, z_asm_sei
>d11d		73 65 69					.text "sei"
.d120						nt_asm_sta:
>d120		03 0c						.byte 3, IM+NN
>d122		2b d1				                .word nt_asm_sta_x
>d124		9d aa a1 aa					.word xt_asm_sta, z_asm_sta
>d128		73 74 61					.text "sta"
.d12b						nt_asm_sta_x:
>d12b		05 0c						.byte 5, IM+NN
>d12d		38 d1				                .word nt_asm_sta_y
>d12f		a1 aa a5 aa					.word xt_asm_sta_x, z_asm_sta_x
>d133		73 74 61 2e 78					.text "sta.x"
.d138						nt_asm_sta_y:
>d138		05 0c						.byte 5, IM+NN
>d13a		45 d1				                .word nt_asm_sta_z
>d13c		a5 aa a9 aa					.word xt_asm_sta_y, z_asm_sta_y
>d140		73 74 61 2e 79					.text "sta.y"
.d145						nt_asm_sta_z:
>d145		05 0c						.byte 5, IM+NN
>d147		52 d1				                .word nt_asm_sta_zi
>d149		a9 aa ad aa					.word xt_asm_sta_z, z_asm_sta_z
>d14d		73 74 61 2e 7a					.text "sta.z"
.d152						nt_asm_sta_zi:
>d152		06 0c						.byte 6, IM+NN
>d154		60 d1				                .word nt_asm_sta_ziy
>d156		ad aa b1 aa					.word xt_asm_sta_zi, z_asm_sta_zi
>d15a		73 74 61 2e 7a 69				.text "sta.zi"
.d160						nt_asm_sta_ziy:
>d160		07 0c						.byte 7, IM+NN
>d162		6f d1				                .word nt_asm_sta_zx
>d164		b1 aa b5 aa					.word xt_asm_sta_ziy, z_asm_sta_ziy
>d168		73 74 61 2e 7a 69 79				.text "sta.ziy"
.d16f						nt_asm_sta_zx:
>d16f		06 0c						.byte 6, IM+NN
>d171		7d d1				                .word nt_asm_sta_zxi
>d173		b5 aa b9 aa					.word xt_asm_sta_zx, z_asm_sta_zx
>d177		73 74 61 2e 7a 78				.text "sta.zx"
.d17d						nt_asm_sta_zxi:
>d17d		07 0c						.byte 7, IM+NN
>d17f		8c d1				                .word nt_asm_stx
>d181		b9 aa bd aa					.word xt_asm_sta_zxi, z_asm_sta_zxi
>d185		73 74 61 2e 7a 78 69				.text "sta.zxi"
.d18c						nt_asm_stx:
>d18c		03 0c						.byte 3, IM+NN
>d18e		97 d1				                .word nt_asm_stx_z
>d190		bd aa c1 aa					.word xt_asm_stx, z_asm_stx
>d194		73 74 78					.text "stx"
.d197						nt_asm_stx_z:
>d197		05 0c						.byte 5, IM+NN
>d199		a4 d1				                .word nt_asm_stx_zy
>d19b		c1 aa c5 aa					.word xt_asm_stx_z, z_asm_stx_z
>d19f		73 74 78 2e 7a					.text "stx.z"
.d1a4						nt_asm_stx_zy:
>d1a4		06 0c						.byte 6, IM+NN
>d1a6		b2 d1				                .word nt_asm_sty
>d1a8		c5 aa c9 aa					.word xt_asm_stx_zy, z_asm_stx_zy
>d1ac		73 74 78 2e 7a 79				.text "stx.zy"
.d1b2						nt_asm_sty:
>d1b2		03 0c						.byte 3, IM+NN
>d1b4		bd d1				                .word nt_asm_sty_z
>d1b6		c9 aa cd aa					.word xt_asm_sty, z_asm_sty
>d1ba		73 74 79					.text "sty"
.d1bd						nt_asm_sty_z:
>d1bd		05 0c						.byte 5, IM+NN
>d1bf		ca d1				                .word nt_asm_sty_zx
>d1c1		cd aa d1 aa					.word xt_asm_sty_z, z_asm_sty_z
>d1c5		73 74 79 2e 7a					.text "sty.z"
.d1ca						nt_asm_sty_zx:
>d1ca		06 0c						.byte 6, IM+NN
>d1cc		d8 d1				                .word nt_asm_stz
>d1ce		d1 aa d5 aa					.word xt_asm_sty_zx, z_asm_sty_zx
>d1d2		73 74 79 2e 7a 78				.text "sty.zx"
.d1d8						nt_asm_stz:
>d1d8		03 0c						.byte 3, IM+NN
>d1da		e3 d1				                .word nt_asm_stz_x
>d1dc		d5 aa d9 aa					.word xt_asm_stz, z_asm_stz
>d1e0		73 74 7a					.text "stz"
.d1e3						nt_asm_stz_x:
>d1e3		05 0c						.byte 5, IM+NN
>d1e5		f0 d1				                .word nt_asm_stz_z
>d1e7		d9 aa dd aa					.word xt_asm_stz_x, z_asm_stz_x
>d1eb		73 74 7a 2e 78					.text "stz.x"
.d1f0						nt_asm_stz_z:
>d1f0		05 0c						.byte 5, IM+NN
>d1f2		fd d1				                .word nt_asm_stz_zx
>d1f4		dd aa e1 aa					.word xt_asm_stz_z, z_asm_stz_z
>d1f8		73 74 7a 2e 7a					.text "stz.z"
.d1fd						nt_asm_stz_zx:
>d1fd		06 0c						.byte 6, IM+NN
>d1ff		0b d2				                .word nt_asm_tax
>d201		e1 aa e5 aa					.word xt_asm_stz_zx, z_asm_stz_zx
>d205		73 74 7a 2e 7a 78				.text "stz.zx"
.d20b						nt_asm_tax:
>d20b		03 0c						.byte 3, IM+NN
>d20d		16 d2				                .word nt_asm_tay
>d20f		e5 aa e9 aa					.word xt_asm_tax, z_asm_tax
>d213		74 61 78					.text "tax"
.d216						nt_asm_tay:
>d216		03 0c						.byte 3, IM+NN
>d218		21 d2				                .word nt_asm_trb
>d21a		e9 aa ed aa					.word xt_asm_tay, z_asm_tay
>d21e		74 61 79					.text "tay"
.d221						nt_asm_trb:
>d221		03 0c						.byte 3, IM+NN
>d223		2c d2				                .word nt_asm_trb_z
>d225		ed aa f1 aa					.word xt_asm_trb, z_asm_trb
>d229		74 72 62					.text "trb"
.d22c						nt_asm_trb_z:
>d22c		05 0c						.byte 5, IM+NN
>d22e		39 d2				                .word nt_asm_tsb
>d230		f1 aa f5 aa					.word xt_asm_trb_z, z_asm_trb_z
>d234		74 72 62 2e 7a					.text "trb.z"
.d239						nt_asm_tsb:
>d239		03 0c						.byte 3, IM+NN
>d23b		44 d2				                .word nt_asm_tsb_z
>d23d		f5 aa f9 aa					.word xt_asm_tsb, z_asm_tsb
>d241		74 73 62					.text "tsb"
.d244						nt_asm_tsb_z:
>d244		05 0c						.byte 5, IM+NN
>d246		51 d2				                .word nt_asm_tsx
>d248		f9 aa fd aa					.word xt_asm_tsb_z, z_asm_tsb_z
>d24c		74 73 62 2e 7a					.text "tsb.z"
.d251						nt_asm_tsx:
>d251		03 0c						.byte 3, IM+NN
>d253		5c d2				                .word nt_asm_txa
>d255		fd aa 01 ab					.word xt_asm_tsx, z_asm_tsx
>d259		74 73 78					.text "tsx"
.d25c						nt_asm_txa:
>d25c		03 0c						.byte 3, IM+NN
>d25e		67 d2				                .word nt_asm_txs
>d260		01 ab 05 ab					.word xt_asm_txa, z_asm_txa
>d264		74 78 61					.text "txa"
.d267						nt_asm_txs:
>d267		03 0c						.byte 3, IM+NN
>d269		72 d2				                .word nt_asm_tya
>d26b		05 ab 09 ab					.word xt_asm_txs, z_asm_txs
>d26f		74 78 73					.text "txs"
.d272						nt_asm_tya:
>d272		03 0c						.byte 3, IM+NN
>d274		7d d2				                .word nt_asm_arrow
>d276		09 ab 0d ab					.word xt_asm_tya, z_asm_tya
>d27a		74 79 61					.text "tya"
.d27d						nt_asm_arrow:
>d27d		03 04				                .byte 3, IM
>d27f		88 d2				                .word nt_asm_back_jump
>d281		8f 90 99 90			                .word xt_asm_arrow, z_asm_arrow
>d285		2d 2d 3e			                .text "-->"
.d288						nt_asm_back_jump:
>d288		02 04				                .byte 2, IM
>d28a		92 d2				                .word nt_asm_back_branch
>d28c		5e ab 5e ab			                .word xt_asm_back_jump, z_asm_back_jump
>d290		3c 6a				                .text "<j"
.d292						nt_asm_back_branch:
>d292		02 04				                .byte 2, IM
>d294		9c d2				                .word nt_asm_push_a
>d296		5f ab 67 ab			                .word xt_asm_back_branch, z_asm_back_branch
>d29a		3c 62				                .text "<b"
.d29c						nt_asm_push_a:
>d29c		06 0c				                .byte 6, IM+NN
>d29e		00 00				                .word 0000
>d2a0		47 ab 56 ab			                .word xt_asm_push_a, z_asm_push_a
>d2a4		70 75 73 68 2d 61		                .text "push-a"

;******  Return to file: platform/../taliforth.asm


;******  Processing file: platform/../strings.asm

=0						ix := 0
=0						str_ok             = ix
=1						ix += 1
=1						str_compile        = ix
=2						ix += 1
=2						str_redefined      = ix
=3						ix += 1
=3						str_abc_upper      = ix
=4						ix += 1
=4						str_wid_forth      = ix
=5						ix += 1
=5						str_wid_editor     = ix
=6						ix += 1
=6						str_wid_assembler  = ix
=7						ix += 1
=7						str_wid_root       = ix
=8						ix += 1
=8						str_see_flags      = ix
=9						ix += 1
=9						str_see_nt         = ix
=10						ix += 1
=10						str_see_xt         = ix
=11						ix += 1
=11						str_see_size       = ix
=12						ix += 1
=12						str_disasm_lit     = ix
=13						ix += 1
=13						str_disasm_sdc     = ix
=14						ix += 1
=14						str_disasm_bra     = ix
=15						ix += 1
=15						str_disasm_0test   = ix
=16						ix += 1
.d2aa						string_table:
>d2aa		ca d2 ce d2 d8 d2 e3 d2		        .word s_ok, s_compiled, s_redefined, s_abc_upper              ; 0-3
>d2b2		1a d3 12 d3 07 d3 21 d3		        .word s_wid_forth, s_wid_editor, s_wid_asm, s_wid_root        ; 4-7
>d2ba		27 d3 43 d3 48 d3 4d d3		        .word s_see_flags, s_see_nt, s_see_xt, s_see_size             ; 8-11
>d2c2		5e d3 67 d3 79 d3 81 d3		        .word s_disasm_lit, s_disasm_sdc, s_disasm_bra, s_disasm_0test ; 12-15
>d2ca		20 6f 6b 00			s_ok:         .text " ok", 0         ; note space at beginning
>d2ce		20 63 6f 6d 70 69 6c 65		s_compiled:   .text " compiled", 0   ; note space at beginning
>d2d6		64 00
>d2d8		72 65 64 65 66 69 6e 65		s_redefined:  .text "redefined ", 0  ; note space at end
>d2e0		64 20 00
>d2e3		30 31 32 33 34 35 36 37		s_abc_upper:  .text "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
>d2eb		38 39 41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e
>d2fb		4f 50 51 52 53 54 55 56 57 58 59 5a
>d307		41 73 73 65 6d 62 6c 65		s_wid_asm:    .text "Assembler ", 0  ; Wordlist ID 2, note space at end
>d30f		72 20 00
>d312		45 64 69 74 6f 72 20 00		s_wid_editor: .text "Editor ", 0     ; Wordlist ID 1, note space at end
>d31a		46 6f 72 74 68 20 00		s_wid_forth:  .text "Forth ", 0      ; Wordlist ID 0, note space at end
>d321		52 6f 6f 74 20 00		s_wid_root:   .text "Root ", 0       ; Wordlist ID 3, note space at end
>d327		66 6c 61 67 73 20 28 43		s_see_flags:  .text "flags (CO AN IM NN UF HC): ", 0
>d32f		4f 20 41 4e 20 49 4d 20 4e 4e 20 55 46 20 48 43
>d33f		29 3a 20 00
>d343		6e 74 3a 20 00			s_see_nt:     .text "nt: ", 0
>d348		78 74 3a 20 00			s_see_xt:     .text "xt: ", 0
>d34d		73 69 7a 65 20 28 64 65		s_see_size:   .text "size (decimal): ", 0
>d355		63 69 6d 61 6c 29 3a 20 00
>d35e		4c 49 54 45 52 41 4c 20		s_disasm_lit: .text "LITERAL ", 0
>d366		00
>d367		53 54 41 43 4b 20 44 45		s_disasm_sdc: .text "STACK DEPTH CHECK", 0
>d36f		50 54 48 20 43 48 45 43 4b 00
>d379		42 52 41 4e 43 48 20 00		s_disasm_bra: .text "BRANCH ",0
>d381		30 54 45 53 54 00		s_disasm_0test: .text "0TEST",0
=0						err_allot        = 0
=1						err_badsource    = 1
=2						err_compileonly  = 2
=3						err_defer        = 3
=4						err_divzero      = 4
=5						err_noname       = 5
=6						err_refill       = 6
=7						err_state        = 7
=8						err_syntax       = 8
=9						err_underflow    = 9
=10						err_negallot     = 10
=11						err_wordlist     = 11
=12						err_blockwords   = 12
=13						err_returnstack  = 13
.d387						error_table:
>d387		a3 d3 c4 d3 e4 d3 05 d4		        .word es_allot, es_badsource, es_compileonly, es_defer  ;  0-3
>d38f		22 d4 33 d4 43 d4 71 d4		        .word es_divzero, es_noname, es_refill, es_state        ;  4-7
>d397		89 d4 aa d4 bf d4 db d4		        .word es_syntax, es_underflow, es_negallot, es_wordlist ;  8-11
>d39f		f2 d4 31 d5			        .word es_blockwords, es_returnstack                     ; 12-13
>d3a3		41 4c 4c 4f 54 20 75 73		es_allot:       .text "ALLOT using all available memory", 0
>d3ab		69 6e 67 20 61 6c 6c 20 61 76 61 69 6c 61 62 6c
>d3bb		65 20 6d 65 6d 6f 72 79 00
>d3c4		49 6c 6c 65 67 61 6c 20		es_badsource:   .text "Illegal SOURCE-ID during REFILL", 0
>d3cc		53 4f 55 52 43 45 2d 49 44 20 64 75 72 69 6e 67
>d3dc		20 52 45 46 49 4c 4c 00
>d3e4		49 6e 74 65 72 70 72 65		es_compileonly: .text "Interpreting a compile-only word", 0
>d3ec		74 69 6e 67 20 61 20 63 6f 6d 70 69 6c 65 2d 6f
>d3fc		6e 6c 79 20 77 6f 72 64 00
>d405		44 45 46 45 52 65 64 20		es_defer:       .text "DEFERed word not defined yet", 0
>d40d		77 6f 72 64 20 6e 6f 74 20 64 65 66 69 6e 65 64
>d41d		20 79 65 74 00
>d422		44 69 76 69 73 69 6f 6e		es_divzero:     .text "Division by zero", 0
>d42a		20 62 79 20 7a 65 72 6f 00
>d433		50 61 72 73 69 6e 67 20		es_noname:      .text "Parsing failure", 0
>d43b		66 61 69 6c 75 72 65 00
>d443		51 55 49 54 20 63 6f 75		es_refill:      .text "QUIT could not get input (REFILL returned -1)", 0
>d44b		6c 64 20 6e 6f 74 20 67 65 74 20 69 6e 70 75 74
>d45b		20 28 52 45 46 49 4c 4c 20 72 65 74 75 72 6e 65
>d46b		64 20 2d 31 29 00
>d471		41 6c 72 65 61 64 79 20		es_state:       .text "Already in compile mode", 0
>d479		69 6e 20 63 6f 6d 70 69 6c 65 20 6d 6f 64 65 00
>d489		55 6e 64 65 66 69 6e 65		es_syntax:      .text "Undefined word or invalid number", 0
>d491		64 20 77 6f 72 64 20 6f 72 20 69 6e 76 61 6c 69
>d4a1		64 20 6e 75 6d 62 65 72 00
>d4aa		44 61 74 61 20 73 74 61		es_underflow:   .text "Data stack underflow", 0
>d4b2		63 6b 20 75 6e 64 65 72 66 6c 6f 77 00
>d4bf		4d 61 78 20 6d 65 6d 6f		es_negallot:    .text "Max memory freed with ALLOT", 0
>d4c7		72 79 20 66 72 65 65 64 20 77 69 74 68 20 41 4c
>d4d7		4c 4f 54 00
>d4db		4e 6f 20 77 6f 72 64 6c		es_wordlist:    .text "No wordlists available", 0
>d4e3		69 73 74 73 20 61 76 61 69 6c 61 62 6c 65 00
>d4f2		50 6c 65 61 73 65 20 61		es_blockwords:  .text "Please assign vectors BLOCK-READ-VECTOR and BLOCK-WRITE-VECTOR",0
>d4fa		73 73 69 67 6e 20 76 65 63 74 6f 72 73 20 42 4c
>d50a		4f 43 4b 2d 52 45 41 44 2d 56 45 43 54 4f 52 20
>d51a		61 6e 64 20 42 4c 4f 43 4b 2d 57 52 49 54 45 2d
>d52a		56 45 43 54 4f 52 00
>d531		52 65 74 75 72 6e 20 73		es_returnstack: .text "Return stack:", 0
>d539		74 61 63 6b 3a 00
>d53f		0f 2f 43 4f 55 4e 54 45		envs_cs:        .text 15, "/COUNTED-STRING"
>d547		44 2d 53 54 52 49 4e 47
>d54f		05 2f 48 4f 4c 44		envs_hold:      .text 5, "/HOLD"
>d555		04 2f 50 41 44			envs_pad:       .text 4, "/PAD"
>d55a		11 41 44 44 52 45 53 53		envs_aub:       .text 17, "ADDRESS-UNIT-BITS"
>d562		2d 55 4e 49 54 2d 42 49 54 53
>d56c		07 46 4c 4f 4f 52 45 44		envs_floored:   .text 7, "FLOORED"
>d574		08 4d 41 58 2d 43 48 41		envs_max_char:  .text 8, "MAX-CHAR"
>d57c		52
>d57d		05 4d 41 58 2d 4e		envs_max_n:     .text 5, "MAX-N"
>d583		05 4d 41 58 2d 55		envs_max_u:     .text 5, "MAX-U"
>d589		12 52 45 54 55 52 4e 2d		envs_rsc:       .text 18, "RETURN-STACK-CELLS"
>d591		53 54 41 43 4b 2d 43 45 4c 4c 53
>d59c		0b 53 54 41 43 4b 2d 43		envs_sc:        .text 11, "STACK-CELLS"
>d5a4		45 4c 4c 53
>d5a8		09 57 4f 52 44 4c 49 53		envs_wl:        .text 9, "WORDLISTS"
>d5b0		54 53
>d5b2		05 4d 41 58 2d 44		envs_max_d:     .text 5, "MAX-D"
>d5b8		06 4d 41 58 2d 55 44		envs_max_ud:    .text 6, "MAX-UD"

;******  Return to file: platform/../taliforth.asm

.d5bf						cmpl_subroutine:
.d5bf		48		pha		                pha             ; save LSB of address
.d5c0		a9 20		lda #$20	                lda #OpJSR      ; load opcode for JSR
.d5c2		80 03		bra $d5c7	                bra +
.d5c4						cmpl_jump:
.d5c4		48		pha		                pha             ; save LSB of address
.d5c5		a9 4c		lda #$4c	                lda #OpJMP      ; load opcode for JMP, fall thru
.d5c7						+
.d5c7		20 cf d5	jsr $d5cf	                jsr cmpl_a      ; compile opcode
.d5ca		68		pla		                pla             ; retrieve address LSB; fall thru to cmpl_word
.d5cb						cmpl_word:
.d5cb		20 cf d5	jsr $d5cf	                jsr cmpl_a      ; compile LSB of address
.d5ce		98		tya		                tya             ; fall thru for MSB
.d5cf						cmpl_a:
.d5cf		92 00		sta ($00)	                sta (cp)
.d5d1		e6 00		inc $00		                inc cp
.d5d3		d0 02		bne $d5d7	                bne _done
.d5d5		e6 01		inc $01		                inc cp+1
.d5d7						_done:
.d5d7		60		rts		                rts
.d5d8						doconst:
.d5d8		ca		dex		                dex             ; make room for constant
.d5d9		ca		dex		                dex
.d5da		68		pla		                pla             ; LSB of return address
.d5db		85 25		sta $25		                sta tmp1
.d5dd		68		pla		                pla             ; MSB of return address
.d5de		85 26		sta $26		                sta tmp1+1
.d5e0		a0 01		ldy #$01	                ldy #1
.d5e2		b1 25		lda ($25),y	                lda (tmp1),y
.d5e4		95 00		sta $00,x	                sta 0,x
.d5e6		c8		iny		                iny
.d5e7		b1 25		lda ($25),y	                lda (tmp1),y
.d5e9		95 01		sta $01,x	                sta 1,x
.d5eb		60		rts		                rts
.d5ec						dodefer:
.d5ec		68		pla		                pla             ; LSB
.d5ed		85 25		sta $25		                sta tmp1
.d5ef		68		pla		                pla             ; MSB
.d5f0		85 26		sta $26		                sta tmp1+1
.d5f2		a0 01		ldy #$01	                ldy #1
.d5f4		b1 25		lda ($25),y	                lda (tmp1),y
.d5f6		85 27		sta $27		                sta tmp2
.d5f8		c8		iny		                iny
.d5f9		b1 25		lda ($25),y	                lda (tmp1),y
.d5fb		85 28		sta $28		                sta tmp2+1
.d5fd		6c 27 00	jmp ($0027)	                jmp (tmp2)      ; This is actually a jump to the new target
.d600						defer_error:
.d600		a9 03		lda #$03	                lda #err_defer
.d602		4c 98 d7	jmp $d798	                jmp error
.d605						dodoes:
.d605		7a		ply		                ply             ; LSB
.d606		68		pla		                pla             ; MSB
.d607		c8		iny		                iny
.d608		d0 01		bne $d60b	                bne +
.d60a		1a		inc a		                ina
.d60b						+
.d60b		84 27		sty $27		                sty tmp2
.d60d		85 28		sta $28		                sta tmp2+1
.d60f		ca		dex		                dex
.d610		ca		dex		                dex
.d611		7a		ply		                ply
.d612		68		pla		                pla
.d613		c8		iny		                iny
.d614		d0 01		bne $d617	                bne +
.d616		1a		inc a		                ina
.d617						+
.d617		94 00		sty $00,x	                sty 0,x         ; LSB
.d619		95 01		sta $01,x	                sta 1,x         ; MSB
.d61b		6c 27 00	jmp ($0027)	                jmp (tmp2)
.d61e						dovar:
.d61e		7a		ply		                ply             ; LSB
.d61f		68		pla		                pla             ; MSB
.d620		c8		iny		                iny
.d621		d0 01		bne $d624	                bne +
.d623		1a		inc a		                ina
.d624						+
.d624		ca		dex		                dex
.d625		ca		dex		                dex
.d626		95 01		sta $01,x	                sta 1,x
.d628		98		tya		                tya
.d629		95 00		sta $00,x	                sta 0,x
.d62b		60		rts		                rts
.d62c						push_upvar_tos:
.d62c		ca		dex		                dex
.d62d		ca		dex		                dex
.d62e		18		clc		                clc
.d62f		65 08		adc $08		                adc up
.d631		95 00		sta $00,x	                sta 0,x
.d633		a5 09		lda $09		                lda up+1
.d635		90 01		bcc $d638	                bcc +
.d637		1a		inc a		                ina
.d638						+
.d638		95 01		sta $01,x	                sta 1,x
.d63a		60		rts		                rts
.d63b						byte_to_ascii:
.d63b		48		pha		                pha
.d63c		4a		lsr a		                lsr             ; convert high nibble first
.d63d		4a		lsr a		                lsr
.d63e		4a		lsr a		                lsr
.d63f		4a		lsr a		                lsr
.d640		20 44 d6	jsr $d644	                jsr _nibble_to_ascii
.d643		68		pla		                pla
.d644						_nibble_to_ascii:
.d644		29 0f		and #$0f	                and #$F
.d646		09 30		ora #$30	                ora #'0'
.d648		c9 3a		cmp #$3a	                cmp #'9'+1
.d64a		90 02		bcc $d64e	                bcc +
.d64c		69 06		adc #$06	                adc #6
.d64e		4c 7b 8d	jmp $8d7b	+               jmp emit_a
.d651		60		rts		                rts
.d652						find_header_name:
.d652		b5 02		lda $02,x	                lda 2,x                 ; Copy mystery string to tmp2
.d654		85 27		sta $27		                sta tmp2
.d656		b5 03		lda $03,x	                lda 3,x
.d658		85 28		sta $28		                sta tmp2+1
.d65a						_loop:
.d65a		b2 25		lda ($25)	                lda (tmp1)
.d65c		d5 00		cmp $00,x	                cmp 0,x
.d65e		d0 3a		bne $d69a	                bne _next_entry
.d660		b2 27		lda ($27)	                lda (tmp2)      ; first character of mystery string
.d662		a0 08		ldy #$08	                ldy #8
.d664		51 25		eor ($25),y	                eor (tmp1),y    ; flag any mismatched bits
.d666		29 df		and #$df	                and #%11011111  ; but ignore upper/lower case bit
.d668		d0 30		bne $d69a	                bne _next_entry ; definitely not equal if any bits differ
.d66a		a5 25		lda $25		                lda tmp1
.d66c		48		pha		                pha             ; Save original address on the stack
.d66d		18		clc		                clc
.d66e		69 08		adc #$08	                adc #8
.d670		85 25		sta $25		                sta tmp1
.d672		a5 26		lda $26		                lda tmp1+1
.d674		48		pha		                pha
.d675		90 03		bcc $d67a	                bcc +
.d677		1a		inc a		                ina
.d678		85 26		sta $26		                sta tmp1+1
.d67a						+
.d67a		b4 00		ldy $00,x	                ldy 0,x         ; index is length of string minus 1
.d67c		88		dey		                dey
.d67d						_next_char:
.d67d		b1 27		lda ($27),y	                lda (tmp2),y    ; last char of mystery string
.d67f		c9 5b		cmp #$5b	                cmp #'Z'+1
.d681		b0 06		bcs $d689	                bcs _check_char
.d683		c9 41		cmp #$41	                cmp #'A'
.d685		90 02		bcc $d689	                bcc _check_char
.d687		09 20		ora #$20	                ora #$20
.d689						_check_char:
.d689		d1 25		cmp ($25),y	                cmp (tmp1),y    ; last char of word we're testing against
.d68b		d0 03		bne $d690	                bne _reset_tmp1
.d68d		88		dey		                dey
.d68e		10 ed		bpl $d67d	                bpl _next_char
.d690						_reset_tmp1:
.d690		68		pla		                pla
.d691		85 26		sta $26		                sta tmp1+1
.d693		68		pla		                pla
.d694		85 25		sta $25		                sta tmp1
.d696		98		tya		                tya             ; leave A = $FF on success
.d697		c8		iny		                iny             ; if Y was $FF, we succeeded
.d698		f0 11		beq $d6ab	                beq _done
.d69a						_next_entry:
.d69a		a0 02		ldy #$02	                ldy #2
.d69c		b1 25		lda ($25),y	                lda (tmp1),y
.d69e		48		pha		                pha
.d69f		c8		iny		                iny
.d6a0		b1 25		lda ($25),y	                lda (tmp1),y
.d6a2		85 26		sta $26		                sta tmp1+1
.d6a4		68		pla		                pla
.d6a5		85 25		sta $25		                sta tmp1
.d6a7		05 26		ora $26		                ora tmp1+1
.d6a9		d0 af		bne $d65a	                bne _loop
.d6ab		c9 00		cmp #$00	_done:          cmp #0      ; A is 0 on failure and $FF on success
.d6ad		60		rts		                rts         ; so cmp #0 sets Z on failure and clears on success
.d6ae						compare_16bit:
.d6ae		b5 00		lda $00,x	                lda 0,x                 ; LSB of TOS
.d6b0		d5 02		cmp $02,x	                cmp 2,x                 ; LSB of NOS
.d6b2		f0 0a		beq $d6be	                beq _equal
.d6b4		b5 01		lda $01,x	                lda 1,x                 ; MSB of TOS
.d6b6		f5 03		sbc $03,x	                sbc 3,x                 ; MSB of NOS
.d6b8		09 01		ora #$01	                ora #1                  ; Make zero flag 0 because not equal
.d6ba		70 08		bvs $d6c4	                bvs _overflow
.d6bc		80 08		bra $d6c6	                bra _not_equal
.d6be						_equal:
.d6be		b5 01		lda $01,x	                lda 1,x                 ; MSB of TOS
.d6c0		f5 03		sbc $03,x	                sbc 3,x                 ; MSB of NOS
.d6c2		50 04		bvc $d6c8	                bvc _done
.d6c4						_overflow:
.d6c4		49 80		eor #$80	                eor #$80                ; complement negative flag
.d6c6						_not_equal:
.d6c6		09 01		ora #$01	                ora #1                  ; if overflow, we can't be equal
.d6c8						_done:
.d6c8		60		rts		                rts
.d6c9						current_to_dp:
.d6c9		a0 08		ldy #$08	                ldy #current_offset
.d6cb		b1 08		lda ($08),y	                lda (up),y      ; current is a byte variable
.d6cd		0a		asl a		                asl             ; turn it into an offset (in cells)
.d6ce		18		clc		                clc
.d6cf		69 0a		adc #$0a	                adc #wordlists_offset   ; add offset to wordlists base.
.d6d1		a8		tay		                tay
.d6d2		b1 08		lda ($08),y	                lda (up),y              ; get the dp for that wordlist.
.d6d4		85 02		sta $02		                sta dp
.d6d6		c8		iny		                iny
.d6d7		b1 08		lda ($08),y	                lda (up),y
.d6d9		85 03		sta $03		                sta dp+1
.d6db		60		rts		                rts
.d6dc						dp_to_current:
.d6dc		a0 08		ldy #$08	                ldy #current_offset
.d6de		b1 08		lda ($08),y	                lda (up),y      ; current is a byte variable
.d6e0		0a		asl a		                asl             ; turn it into an offset (in cells)
.d6e1		18		clc		                clc
.d6e2		69 0a		adc #$0a	                adc #wordlists_offset   ; add offset to wordlists base.
.d6e4		a8		tay		                tay
.d6e5		a5 02		lda $02		                lda dp
.d6e7		91 08		sta ($08),y	                sta (up),y              ; get the dp for that wordlist.
.d6e9		c8		iny		                iny
.d6ea		a5 03		lda $03		                lda dp+1
.d6ec		91 08		sta ($08),y	                sta (up),y
.d6ee		60		rts		                rts
.d6ef						interpret:
.d6ef						_loop:
.d6ef		20 09 98	jsr $9809	                jsr xt_parse_name       ; ( "string" -- addr u )
.d6f2		b5 00		lda $00,x	                lda 0,x
.d6f4		15 01		ora $01,x	                ora 1,x
.d6f6		f0 6b		beq $d763	                beq _line_done
.d6f8		20 ea a1	jsr $a1ea	                jsr xt_two_dup          ; ( addr u -- addr u addr u )
.d6fb		20 60 8f	jsr $8f60	                jsr xt_find_name        ; ( addr u addr u -- addr u nt|0 )
.d6fe		b5 00		lda $00,x	                lda 0,x
.d700		15 01		ora $01,x	                ora 1,x
.d702		d0 28		bne $d72c	                bne _got_name_token
.d704		e8		inx		                inx                     ; ( addr u 0 -- addr u )
.d705		e8		inx		                inx
.d706		20 b7 95	jsr $95b7	                jsr xt_number           ; ( addr u -- u|d )
.d709		a5 1a		lda $1a		                lda state
.d70b		f0 e2		beq $d6ef	                beq _loop
.d70d		a9 20		lda #$20	                lda #%00100000
.d70f		24 1c		bit $1c		                bit status
.d711		f0 0d		beq $d720	                beq _single_number
.d713		20 0c a0	jsr $a00c	                jsr xt_swap
.d716		a0 92		ldy #$92	                ldy #>literal_runtime
.d718		a9 bd		lda #$bd	                lda #<literal_runtime
.d71a		20 bf d5	jsr $d5bf	                jsr cmpl_subroutine
.d71d		20 de 86	jsr $86de	                jsr xt_comma
.d720						_single_number:
.d720		a0 92		ldy #$92	                ldy #>literal_runtime
.d722		a9 bd		lda #$bd	                lda #<literal_runtime
.d724		20 bf d5	jsr $d5bf	                jsr cmpl_subroutine
.d727		20 de 86	jsr $86de	                jsr xt_comma
.d72a		80 c3		bra $d6ef	                bra _loop
.d72c						_got_name_token:
.d72c		b5 00		lda $00,x	                lda 0,x
.d72e		95 04		sta $04,x	                sta 4,x
.d730		b5 01		lda $01,x	                lda 1,x
.d732		95 05		sta $05,x	                sta 5,x
.d734		e8		inx		                inx
.d735		e8		inx		                inx
.d736		e8		inx		                inx
.d737		e8		inx		                inx                     ; ( nt )
.d738		20 47 97	jsr $9747	                jsr xt_one_plus
.d73b		a1 00		lda ($00,x)	                lda (0,x)
.d73d		48		pha		                pha
.d73e		20 3b 97	jsr $973b	                jsr xt_one_minus
.d741		20 17 95	jsr $9517	                jsr xt_name_to_int      ; ( nt - xt )
.d744		a5 1a		lda $1a		                lda state
.d746		d0 10		bne $d758	                bne _compile
.d748		68		pla		                pla
.d749		29 01		and #$01	                and #CO                 ; mask everything but Compile Only bit
.d74b		f0 05		beq $d752	                beq _interpret
.d74d		a9 02		lda #$02	                lda #err_compileonly
.d74f		4c 98 d7	jmp $d798	                jmp error
.d752						_interpret:
.d752		20 c2 8e	jsr $8ec2	                jsr xt_execute
.d755		4c ef d6	jmp $d6ef	                jmp _loop
.d758						_compile:
.d758		68		pla		                pla
.d759		29 04		and #$04	                and #IM                 ; Mask all but IM bit
.d75b		d0 f5		bne $d752	                bne _interpret          ; IMMEDIATE word, execute right now
.d75d		20 5d 87	jsr $875d	                jsr xt_compile_comma
.d760		4c ef d6	jmp $d6ef	                jmp _loop
.d763						_line_done:
.d763		e8		inx		                inx
.d764		e8		inx		                inx
.d765		e8		inx		                inx
.d766		e8		inx		                inx
.d767		60		rts		                rts
.d768						is_printable:
.d768		c9 20		cmp #$20	                cmp #AscSP              ; $20
.d76a		90 08		bcc $d774	                bcc _done
.d76c		c9 80		cmp #$80	                cmp #$7F + 1             ; '~'
.d76e		b0 03		bcs $d773	                bcs _failed
.d770		38		sec		                sec
.d771		80 01		bra $d774	                bra _done
.d773						_failed:
.d773		18		clc		                clc
.d774						_done:
.d774		60		rts		                rts
.d775						is_whitespace:
.d775		c9 00		cmp #$00	                cmp #00         ; explicit comparison to leave Y untouched
.d777		90 08		bcc $d781	                bcc _done
.d779		c9 21		cmp #$21	                cmp #AscSP+1
.d77b		b0 03		bcs $d780	                bcs _failed
.d77d		38		sec		                sec
.d77e		80 01		bra $d781	                bra _done
.d780						_failed:
.d780		18		clc		                clc
.d781						_done:
.d781		60		rts		                rts
.d782						underflow_1:
.d782		e0 77		cpx #$77	                cpx #dsp0-1
.d784		10 10		bpl $d796	                bpl underflow_error
.d786		60		rts		                rts
.d787						underflow_2:
.d787		e0 75		cpx #$75	                cpx #dsp0-3
.d789		10 0b		bpl $d796	                bpl underflow_error
.d78b		60		rts		                rts
.d78c						underflow_3:
.d78c		e0 73		cpx #$73	                cpx #dsp0-5
.d78e		10 06		bpl $d796	                bpl underflow_error
.d790		60		rts		                rts
.d791						underflow_4:
.d791		e0 71		cpx #$71	                cpx #dsp0-7
.d793		10 01		bpl $d796	                bpl underflow_error
.d795		60		rts		                rts
.d796						underflow_error:
.d796		a9 09		lda #$09	                lda #err_underflow      ; fall through to error
.d798						error:
.d798		48		pha		                pha                     ; save error
.d799		20 d8 d7	jsr $d7d8	                jsr print_error
.d79c		20 d5 88	jsr $88d5	                jsr xt_cr
.d79f		68		pla		                pla
.d7a0		c9 09		cmp #$09	                cmp #err_underflow      ; should we display return stack?
.d7a2		d0 17		bne $d7bb	                bne _no_underflow
.d7a4		a9 0d		lda #$0d	                lda #err_returnstack
.d7a6		20 d8 d7	jsr $d7d8	                jsr print_error
.d7a9		ba		tsx		                tsx
.d7aa						-
.d7aa		e8		inx		                inx
.d7ab		f0 0b		beq $d7b8	                beq +
.d7ad		20 82 9f	jsr $9f82	                jsr xt_space
.d7b0		bd 00 01	lda $0100,x	                lda $100,x
.d7b3		20 3b d6	jsr $d63b	                jsr byte_to_ascii
.d7b6		80 f2		bra $d7aa	                bra -
.d7b8						+
.d7b8		20 d5 88	jsr $88d5	                jsr xt_cr
.d7bb						_no_underflow:
.d7bb		4c 60 80	jmp $8060	                jmp xt_abort            ; no jsr, as we clobber return stack
.d7be						print_string_no_lf:
.d7be		0a		asl a		                asl
.d7bf		a8		tay		                tay
.d7c0		b9 aa d2	lda $d2aa,y	                lda string_table,y
.d7c3		85 29		sta $29		                sta tmp3                ; LSB
.d7c5		c8		iny		                iny
.d7c6		b9 aa d2	lda $d2aa,y	                lda string_table,y
.d7c9		85 2a		sta $2a		                sta tmp3+1              ; MSB
.d7cb						print_common:
.d7cb		a0 00		ldy #$00	                ldy #0
.d7cd						_loop:
.d7cd		b1 29		lda ($29),y	                lda (tmp3),y
.d7cf		f0 06		beq $d7d7	                beq _done               ; strings are zero-terminated
.d7d1		20 7b 8d	jsr $8d7b	                jsr emit_a              ; allows vectoring via output
.d7d4		c8		iny		                iny
.d7d5		80 f6		bra $d7cd	                bra _loop
.d7d7						_done:
.d7d7		60		rts		                rts
.d7d8						print_error:
.d7d8		0a		asl a		                asl
.d7d9		a8		tay		                tay
.d7da		b9 87 d3	lda $d387,y	                lda error_table,y
.d7dd		85 29		sta $29		                sta tmp3                ; LSB
.d7df		c8		iny		                iny
.d7e0		b9 87 d3	lda $d387,y	                lda error_table,y
.d7e3		85 2a		sta $2a		                sta tmp3+1              ; MSB
.d7e5		20 cb d7	jsr $d7cb	                jsr print_common
.d7e8		60		rts		                rts
.d7e9						print_string:
.d7e9		20 be d7	jsr $d7be	                jsr print_string_no_lf
.d7ec		4c d5 88	jmp $88d5	                jmp xt_cr               ; JSR/RTS because never compiled
.d7ef						print_u:
.d7ef		20 eb a5	jsr $a5eb	                jsr xt_zero                     ; 0
.d7f2		20 7f 92	jsr $927f	                jsr xt_less_number_sign         ; <#
.d7f5		20 08 97	jsr $9708	                jsr xt_number_sign_s            ; #S
.d7f8		20 e6 96	jsr $96e6	                jsr xt_number_sign_greater      ; #>
.d7fb		4c 35 a3	jmp $a335	                jmp xt_type                     ; JSR/RTS because never compiled

;******  Return to file: platform/platform-py65mon.asm

.f010						v_nmi:
.f010						v_reset:
.f010						v_irq:
.f010						kernel_init:
.f010		78		sei		                sei             ; Disable interrupts
.f011		a2 00		ldx #$00	                ldx #0
.f013		bd 2c f0	lda $f02c,x	-               lda s_kernel_id,x
.f016		f0 06		beq $f01e	                beq _done
.f018		20 27 f0	jsr $f027	                jsr kernel_putc
.f01b		e8		inx		                inx
.f01c		80 f5		bra $f013	                bra -
.f01e						_done:
.f01e		4c 00 80	jmp $8000	                jmp forth
.f021						kernel_getc:
.f021						_loop:
.f021		ad 04 f0	lda $f004	                lda $f004
.f024		f0 fb		beq $f021	                beq _loop
.f026		60		rts		                rts
.f027						kernel_putc:
.f027		8d 01 f0	sta $f001	                sta $f001
.f02a		60		rts		                rts
.f02b						platform_bye:
.f02b		00		brk #		                brk
.f02c						s_kernel_id:
>f02c		54 61 6c 69 20 46 6f 72		        .text "Tali Forth 2 default kernel for py65mon (04. Dec 2022)", AscLF, 0
>f034		74 68 20 32 20 64 65 66 61 75 6c 74 20 6b 65 72
>f044		6e 65 6c 20 66 6f 72 20 70 79 36 35 6d 6f 6e 20
>f054		28 30 34 2e 20 44 65 63 20 32 30 32 32 29 0a 00
>fffa		10 f0				.word v_nmi
>fffc		10 f0				.word v_reset
>fffe		10 f0				.word v_irq

;******  End of listing
