
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --nostart --list=docs/py65mon-listing.txt --labels=docs/py65mon-labelmap.txt --output taliforth-py65mon.bin platform/platform-py65mon.asm
; Sat Apr 11 16:02:18 2020

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: platform/platform-py65mon.asm

=$0000					ram_start = $0000          ; start of installed 32 KiB of RAM
=32767					ram_end   = $8000-1        ; end of installed RAM
=$0000					zpage     = ram_start      ; begin of Zero Page ($0000-$00ff)
=$7f					zpage_end = $7F            ; end of Zero Page used ($0000-$007f)
=$0100					stack0    = $0100          ; begin of Return Stack ($0100-$01ff)
=31744					hist_buff = ram_end-$03ff  ; begin of history buffers
=$0000					user0     = zpage            ; user and system variables
=$ff					rsp0      = $ff              ; initial Return Stack Pointer (65c02 stack)
=$ff					bsize     = $ff              ; size of input/output buffers
=512					buffer0   = stack0+$100      ; input buffer ($0200-$027f)
=768					cp0       = buffer0+bsize+1  ; Dictionary starts after last buffer
=31744					cp_end    = hist_buff        ; Last RAM byte available for code
=$ff					padoffset = $ff              ; offset from CP to PAD (holds number strings)

;******  Processing file: platform/../taliforth.asm

.8000					code0:

;******  Processing file: platform/../definitions.asm

=0					cp        = user0+0   ; Compiler Pointer
=2					dp        = user0+2   ; Dictionary Pointer
=4					workword  = user0+4   ; nt (not xt!) of word being compiled, except in
=6					insrc     = user0+6   ; input Source for SOURCE-ID
=8					cib       = user0+8   ; address of current input buffer
=10					ciblen    = user0+10  ; length of current input buffer
=12					toin      = user0+12  ; pointer to CIB (>IN in Forth)
=14					ip        = user0+14  ; Instruction Pointer (current xt)
=16					output    = user0+16  ; vector for EMIT
=18					input     = user0+18  ; vector for KEY
=20					havekey   = user0+20  ; vector for KEY?
=22					state     = user0+22  ; STATE: -1 compile, 0 interpret
=24					base      = user0+24  ; number radix, default decimal
=26					nc_limit  = user0+26  ; limit for Native Compile size
=28					uf_strip  = user0+28  ; flag to strip underflow detection code
=30					up        = user0+30  ; User Pointer (Address of user variables)
=32					status    = user0+32  ; internal status information
=34					tmpbranch = user0+34  ; temporary storage for 0BRANCH, BRANCH only
=36					tmp1      = user0+36  ; temporary storage
=38					tmp2      = user0+38  ; temporary storage
=40					tmp3      = user0+40  ; temporary storage (especially for print)
=42					tmpdsp    = user0+42  ; temporary DSP (X) storage (two bytes)
=44					tmptos    = user0+44  ; temporary TOS storage
=46					editor1   = user0+46  ; temporary for editors
=48					editor2   = user0+48  ; temporary for editors
=50					editor3   = user0+50  ; temporary for editors
=52					tohold    = user0+52  ; pointer for formatted output
=54					scratch   = user0+54  ; 8 byte scratchpad (see UM/MOD)
=120					dsp0      = zpage_end-7    ; initial Data Stack Pointer
=0					blk_offset = 0        ; BLK : UP + 0
=2					scr_offset = 2        ; SCR : UP + 2
=4					current_offset = 4    ; CURRENT (byte) : UP + 4 (Compilation wordlist)
=5					num_wordlists_offset = 5
=6					wordlists_offset = 6  ; WORDLISTS (cells) : UP + 6 to UP + 29
=30					num_order_offset = 30 ; #ORDER (byte) : UP + 30
=31					search_order_offset = 31
=12					max_wordlists = 12    ; Maximum number of wordlists supported
=40					blkbuffer_offset    = 40   ; Address of buffer
=42					buffblocknum_offset = 42   ; Block number current in buffer
=44					buffstatus_offset   = 44   ; Status of buffer (bit 0 = used, bit 1 = dirty)
=46					blockread_offset    = 46   ; Vector to block reading routine
=48					blockwrite_offset   = 48   ; Vector to block writing routine
=$03					AscCC   = $03  ; break (CTRL-c)
=$07					AscBELL = $07  ; bell sound
=$08					AscBS   = $08  ; backspace
=$0a					AscLF   = $0a  ; line feed
=$0d					AscCR   = $0d  ; carriage return
=$1b					AscESC  = $1b  ; escape
=$20					AscSP   = $20  ; space
=$7f					AscDEL  = $7f  ; delete (CTRL-h)
=$10					AscCP   = $10  ; CTRL-p (used to recall previous input history)
=$0e					AscCN   = $0e  ; CTRL-n (used to recall next input history)
=1					CO = 1  ; Compile Only
=2					AN = 2  ; Always Native Compile
=4					IM = 4  ; Immediate Word
=8					NN = 8  ; Never Native Compile
=16					UF = 16 ; Includes Underflow Check (RESERVED)
=32					HC = 32 ; Word has Code Field Area (CFA)
=79					MAX_LINE_LENGTH  = 79      ; assumes 80 character lines

;******  Return to file: platform/../taliforth.asm

.8000					forth:

;******  Processing file: platform/../native_words.asm

.8000					xt_cold:
.8000	d8		cld		                cld
.8001	a9 27		lda #$27	                lda #<kernel_putc
.8003	85 10		sta $10		                sta output
.8005	a9 f0		lda #$f0	                lda #>kernel_putc
.8007	85 11		sta $11		                sta output+1
.8009	a2 21		ldx #$21	                ldx #cold_zp_table_end-cold_zp_table-1
.800b					_load_zp_loop:
.800b	bd c5 80	lda $80c5,x	                lda cold_zp_table,x
.800e	95 00		sta $00,x	                sta zpage,x
.8010	ca		dex		                dex
.8011	d0 f8		bne $800b	                bne _load_zp_loop
.8013	ad c5 80	lda $80c5	                lda cold_zp_table
.8016	85 00		sta $00		                sta zpage
.8018	a2 ff		ldx #$ff	                ldx #rsp0
.801a	9a		txs		                txs
.801b	a2 78		ldx #$78	                ldx #dsp0
.801d	a0 31		ldy #$31	                ldy #cold_user_table_end-cold_user_table-1
.801f	a9 00		lda #$00	                lda #0
.8021					_load_user_vars_loop:
.8021	b9 e7 80	lda $80e7,y	                lda cold_user_table,y
.8024	91 1e		sta ($1e),y	                sta (up),y
.8026	88		dey		                dey
.8027	d0 f8		bne $8021	                bne _load_user_vars_loop
.8029	ad e7 80	lda $80e7	                lda cold_user_table
.802c	92 1e		sta ($1e)	                sta (up)
.802e	20 53 89	jsr $8953	                jsr xt_cr
.8031	ca		dex		                dex
.8032	ca		dex		                dex
.8033	ca		dex		                dex
.8034	ca		dex		                dex
.8035	a9 63		lda #$63	                lda #<forth_words_start
.8037	95 02		sta $02,x	                sta 2,x
.8039	a9 b9		lda #$b9	                lda #>forth_words_start
.803b	95 03		sta $03,x	                sta 3,x
.803d	a9 27		lda #$27	                lda #<forth_words_end
.803f	38		sec		                sec
.8040	e9 63		sbc #$63	                sbc #<forth_words_start
.8042	95 00		sta $00,x	                sta 0,x
.8044	a9 ba		lda #$ba	                lda #>forth_words_end
.8046	e9 b9		sbc #$b9	                sbc #>forth_words_start
.8048	95 01		sta $01,x	                sta 1,x
.804a	20 c5 90	jsr $90c5	                jsr xt_evaluate
.804d	ca		dex		                dex
.804e	ca		dex		                dex
.804f	ca		dex		                dex
.8050	ca		dex		                dex
.8051	a9 27		lda #$27	                lda #<user_words_start
.8053	95 02		sta $02,x	                sta 2,x
.8055	a9 ba		lda #$ba	                lda #>user_words_start
.8057	95 03		sta $03,x	                sta 3,x
.8059	a9 29		lda #$29	                lda #<user_words_end
.805b	38		sec		                sec
.805c	e9 27		sbc #$27	                sbc #<user_words_start
.805e	95 00		sta $00,x	                sta 0,x
.8060	a9 ba		lda #$ba	                lda #>user_words_end
.8062	e9 ba		sbc #$ba	                sbc #>user_words_start
.8064	95 01		sta $01,x	                sta 1,x
.8066	20 c5 90	jsr $90c5	                jsr xt_evaluate
.8069	9c 00 7c	stz $7c00	                stz hist_buff
.806c	9c 80 7c	stz $7c80	                stz hist_buff+$80
.806f	9c 00 7d	stz $7d00	                stz hist_buff+$100
.8072	9c 80 7d	stz $7d80	                stz hist_buff+$180
.8075	9c 00 7e	stz $7e00	                stz hist_buff+$200
.8078	9c 80 7e	stz $7e80	                stz hist_buff+$280
.807b	9c 00 7f	stz $7f00	                stz hist_buff+$300
.807e	9c 80 7f	stz $7f80	                stz hist_buff+$380
.8081					xt_abort:
.8081	a2 78		ldx #$78	                ldx #dsp0
.8083					xt_quit:
.8083	8a		txa		                txa             ; Save the DSP that we just defined
.8084	a2 ff		ldx #$ff	                ldx #rsp0
.8086	9a		txs		                txs
.8087	aa		tax		                tax             ; Restore the DSP. Dude, seriously.
.8088	64 0e		stz $0e		                stz ip
.808a	64 0f		stz $0f		                stz ip+1
.808c	64 06		stz $06		                stz insrc
.808e	64 07		stz $07		                stz insrc+1
.8090	64 16		stz $16		                stz state
.8092	64 17		stz $17		                stz state+1
.8094					_get_line:
.8094	a9 00		lda #$00	                lda #<buffer0   ; input buffer, this is paranoid
.8096	85 08		sta $08		                sta cib
.8098	a9 02		lda #$02	                lda #>buffer0
.809a	85 09		sta $09		                sta cib+1
.809c	64 0a		stz $0a		                stz ciblen
.809e	64 0b		stz $0b		                stz ciblen+1
.80a0	20 7a 9a	jsr $9a7a	                jsr xt_refill           ; ( -- f )
.80a3	b5 00		lda $00,x	                lda 0,x
.80a5	d0 05		bne $80ac	                bne _success
.80a7	a9 06		lda #$06	                lda #err_refill
.80a9	4c 01 d6	jmp $d601	                jmp error
.80ac					_success:
.80ac	e8		inx		                inx                     ; drop
.80ad	e8		inx		                inx
.80ae	20 53 d5	jsr $d553	                jsr interpret
.80b1	e0 78		cpx #$78	                cpx #dsp0
.80b3	f0 05		beq $80ba	                beq _stack_ok
.80b5	90 03		bcc $80ba	                bcc _stack_ok           ; DSP must always be smaller than DSP0
.80b7	4c ff d5	jmp $d5ff	                jmp underflow_error
.80ba					_stack_ok:
.80ba	a5 16		lda $16		                lda state
.80bc	f0 02		beq $80c0	                beq _print
.80be	a9 01		lda #$01	                lda #1                  ; number for "compile" string
.80c0					_print:
.80c0	20 31 d6	jsr $d631	                jsr print_string
.80c3	80 cf		bra $8094	                bra _get_line
.80c5					z_cold:
.80c5					z_abort:
.80c5					z_quit:
.80c5					cold_zp_table:
>80c5	00 08				        .word cp0+256+1024      ; cp moved to make room for user vars and
>80c7	24 c8				        .word dictionary_start  ; dp
>80c9	00 00				        .word 0                 ; workword
>80cb	00 00				        .word 0                 ; insrc (SOURCE-ID is 0 for keyboard)
>80cd	00 02				        .word buffer0           ; cib
>80cf	00 00				        .word 0                 ; ciblen
>80d1	00 00				        .word 0                 ; toin
>80d3	00 00				        .word 0                 ; ip
>80d5	27 f0				        .word kernel_putc       ; output
>80d7	21 f0				        .word kernel_getc       ; input
>80d9	00 00				        .word 0                 ; havekey
>80db	00 00				        .word 0                 ; state (0 = interpret)
>80dd	0a 00				        .word 10                ; base
>80df	14 00				        .word 20                ; nc-limit
>80e1	00 00				        .word 0                 ; uf_strip (off by default)
>80e3	00 03				        .word cp0               ; up (user vars put right at beginning of
>80e5	00 00				        .word 0                 ; status
.80e7					cold_zp_table_end:
.80e7					cold_user_table:
>80e7	00 00				        .word 0                         ; BLK
>80e9	00 00				        .word 0                         ; SCR
>80eb	00				        .byte 0                         ; CURRENT = FORTH-WORDLIST
>80ec	04				        .byte 4                         ; #WORDLISTS (FORTH EDITOR ASSEMBLER ROOT)
>80ed	24 c8				        .word dictionary_start          ; FORTH-WORDLIST
>80ef	b8 c8				        .word editor_dictionary_start   ; EDITOR-WORDLIST
>80f1	c1 c8				        .word assembler_dictionary_start ; ASSEMBLER-WORDLIST
>80f3	60 c8				        .word root_dictionary_start     ; ROOT-WORDLIST
>80f5	00 00 00 00 00 00 00 00		        .word 0,0,0,0,0,0,0,0           ; User wordlists
>80fd	00 00 00 00 00 00 00 00
>8105	01				        .byte 1                         ; #ORDER
>8106	00 00 00 00 00 00 00 00		        .byte 0,0,0,0,0,0,0,0,0         ; search-order
>810e	00
>810f	00 04				        .word cp0+256                   ; Address of buffer (right after USER vars)
>8111	00 00				        .word 0                         ; block in buffer
>8113	00 00				        .word 0                         ; buffer status (not in use)
>8115	4b 85				        .word xt_block_word_error       ; block-read vector
>8117	4b 85				        .word xt_block_word_error       ; block-write vector
.8119					cold_user_table_end:
.8119					xt_abort_quote:
.8119	20 d1 9c	jsr $9cd1	                jsr xt_s_quote          ; S"
.811c	a0 81		ldy #$81	                ldy #>abort_quote_runtime
.811e	a9 24		lda #$24	                lda #<abort_quote_runtime
.8120	20 8e d4	jsr $d48e	                jsr cmpl_subroutine     ; may not be JMP as JSR/RTS
.8123	60		rts		z_abort_quote:  rts
.8124					abort_quote_runtime:
.8124	b5 04		lda $04,x	                lda 4,x
.8126	15 05		ora $05,x	                ora 5,x
.8128	f0 09		beq $8133	                beq _done       ; if FALSE, we're done
.812a	20 7f a4	jsr $a47f	                jsr xt_type
.812d	20 53 89	jsr $8953	                jsr xt_cr
.8130	4c 81 80	jmp $8081	                jmp xt_abort    ; not JSR, so never come back
.8133					_done:
.8133	8a		txa		                txa
.8134	18		clc		                clc
.8135	69 06		adc #$06	                adc #6
.8137	aa		tax		                tax
.8138	60		rts		                rts
.8139					xt_abs:
.8139	20 eb d5	jsr $d5eb	                jsr underflow_1
.813c	b5 01		lda $01,x	                lda 1,x
.813e	10 0d		bpl $814d	                bpl _done       ; positive number, easy money!
.8140	38		sec		                sec
.8141	a9 00		lda #$00	                lda #0
.8143	f5 00		sbc $00,x	                sbc 0,x         ; LSB
.8145	95 00		sta $00,x	                sta 0,x
.8147	a9 00		lda #$00	                lda #0          ; MSB
.8149	f5 01		sbc $01,x	                sbc 1,x
.814b	95 01		sta $01,x	                sta 1,x
.814d					_done:
.814d	60		rts		z_abs:          rts
.814e					xt_accept:
.814e	20 f0 d5	jsr $d5f0	                jsr underflow_2
.8151	b5 00		lda $00,x	                lda 0,x
.8153	15 01		ora $01,x	                ora 1,x
.8155	d0 09		bne $8160	                bne _not_zero
.8157	e8		inx		                inx
.8158	e8		inx		                inx
.8159	74 00		stz $00,x	                stz 0,x
.815b	74 01		stz $01,x	                stz 1,x
.815d	4c 2c 82	jmp $822c	                jmp accept_done
.8160					_not_zero:
.8160	b5 00		lda $00,x	                lda 0,x         ; number of chars to get in tmp2 ...
.8162	85 26		sta $26		                sta tmp2
.8164	64 27		stz $27		                stz tmp2+1      ; ... but we only accept max 255 chars
.8166	b5 02		lda $02,x	                lda 2,x         ; address of buffer is NOS, to tmp1
.8168	85 24		sta $24		                sta tmp1
.816a	b5 03		lda $03,x	                lda 3,x
.816c	85 25		sta $25		                sta tmp1+1
.816e	e8		inx		                inx
.816f	e8		inx		                inx
.8170	a0 00		ldy #$00	                ldy #0
.8172	a5 20		lda $20		                lda status
.8174	29 f7		and #$f7	                and #$f7
.8176	1a		inc a		               ina
.8177	09 08		ora #$08	                ora #$08
.8179	85 20		sta $20		                sta status
.817b					accept_loop:
.817b	20 28 93	jsr $9328	                jsr key_a
.817e	c9 0a		cmp #$0a	                cmp #AscLF
.8180	f0 20		beq $81a2	                beq _eol
.8182	c9 0d		cmp #$0d	                cmp #AscCR
.8184	f0 1c		beq $81a2	                beq _eol
.8186	c9 08		cmp #$08	                cmp #AscBS
.8188	f0 22		beq $81ac	                beq _backspace
.818a	c9 7f		cmp #$7f	                cmp #AscDEL     ; (CTRL-h)
.818c	f0 1e		beq $81ac	                beq _backspace
.818e	c9 10		cmp #$10	                cmp #AscCP
.8190	f0 36		beq $81c8	                beq _ctrl_p
.8192	c9 0e		cmp #$0e	                cmp #AscCN
.8194	f0 44		beq $81da	                beq _ctrl_n
.8196	91 24		sta ($24),y	                sta (tmp1),y
.8198	c8		iny		                iny
.8199	20 e6 8d	jsr $8de6	                jsr emit_a
.819c	c4 26		cpy $26		                cpy tmp2        ; reached character limit?
.819e	d0 db		bne $817b	                bne accept_loop       ; fall through if buffer limit reached
.81a0	80 03		bra $81a5	                bra _buffer_full
.81a2					_eol:
.81a2	20 a0 a0	jsr $a0a0	                jsr xt_space    ; print final space
.81a5					_buffer_full:
.81a5	94 00		sty $00,x	                sty 0,x         ; Y contains number of chars accepted already
.81a7	74 01		stz $01,x	                stz 1,x         ; we only accept 256 chars
.81a9	4c 2c 82	jmp $822c	                jmp accept_done
.81ac					_backspace:
.81ac	c0 00		cpy #$00	                cpy #0          ; buffer empty?
.81ae	d0 06		bne $81b6	                bne +
.81b0	a9 07		lda #$07	                lda #AscBELL    ; complain and don't delete beyond the start of line
.81b2	20 e6 8d	jsr $8de6	                jsr emit_a
.81b5	c8		iny		                iny
.81b6					+
.81b6	88		dey		                dey
.81b7	a9 08		lda #$08	                lda #AscBS      ; move back one
.81b9	20 e6 8d	jsr $8de6	                jsr emit_a
.81bc	a9 20		lda #$20	                lda #AscSP      ; print a space (rubout)
.81be	20 e6 8d	jsr $8de6	                jsr emit_a
.81c1	a9 08		lda #$08	                lda #AscBS      ; move back over space
.81c3	20 e6 8d	jsr $8de6	                jsr emit_a
.81c6	80 b3		bra $817b	                bra accept_loop
.81c8					_ctrl_p:
.81c8	a5 20		lda $20		                lda status
.81ca	29 07		and #$07	                and #7
.81cc	d0 08		bne $81d6	                bne _ctrl_p_dec
.81ce	a5 20		lda $20		                lda status
.81d0	09 07		ora #$07	                ora #7
.81d2	85 20		sta $20		                sta status
.81d4	80 11		bra $81e7	                bra _recall_history
.81d6					_ctrl_p_dec:
.81d6	c6 20		dec $20		                dec status
.81d8	80 0d		bra $81e7	                bra _recall_history
.81da					_ctrl_n:
.81da	a9 08		lda #$08	                lda #$8
.81dc	24 20		bit $20		                bit status
.81de	d0 07		bne $81e7	                bne _recall_history
.81e0	a5 20		lda $20		                lda status
.81e2	29 f7		and #$f7	                and #$f7
.81e4	1a		inc a		               ina
.81e5	85 20		sta $20		                sta status
.81e7					_recall_history:
.81e7	a9 08		lda #$08	                lda #%00001000
.81e9	14 20		trb $20		                trb status
.81eb	20 47 82	jsr $8247	                jsr accept_total_recall
.81ee	a9 0d		lda #$0d	                lda #AscCR
.81f0	20 e6 8d	jsr $8de6	                jsr emit_a
.81f3					input_clear:
.81f3	c0 00		cpy #$00	                cpy #0
.81f5	f0 08		beq $81ff	                beq input_cleared
.81f7	a9 20		lda #$20	                lda #AscSP
.81f9	20 e6 8d	jsr $8de6	                jsr emit_a
.81fc	88		dey		                dey
.81fd	80 f4		bra $81f3	                bra input_clear
.81ff					input_cleared:
.81ff	a9 0d		lda #$0d	                lda #AscCR
.8201	20 e6 8d	jsr $8de6	                jsr emit_a
.8204	b1 28		lda ($28),y	                lda (tmp3),y
.8206	85 21		sta $21		                sta status+1
.8208	e6 28		inc $28		                inc tmp3
.820a	d0 02		bne $820e	                bne +           ; Increment the upper byte on carry.
.820c	e6 29		inc $29		                inc tmp3+1
.820e					+
.820e	a9 0d		lda #$0d	                lda #AscCR
.8210	20 e6 8d	jsr $8de6	                jsr emit_a
.8213					_history_loop:
.8213	c4 21		cpy $21		                cpy status+1
.8215	d0 03		bne $821a	                bne +
.8217	4c 7b 81	jmp $817b	                jmp accept_loop       ; Needs a long jump
.821a					+
.821a	c4 26		cpy $26		                cpy tmp2
.821c	f0 0a		beq $8228	                beq _hist_filled_buffer
.821e	b1 28		lda ($28),y	                lda (tmp3),y
.8220	91 24		sta ($24),y	                sta (tmp1),y
.8222	20 e6 8d	jsr $8de6	                jsr emit_a
.8225	c8		iny		                iny
.8226	80 eb		bra $8213	                bra _history_loop
.8228					_hist_filled_buffer:
.8228	88		dey		                dey
.8229	4c 7b 81	jmp $817b	                jmp accept_loop
.822c					accept_done:
.822c	20 47 82	jsr $8247	                jsr accept_total_recall
.822f	85 21		sta $21		                sta status+1
.8231	a0 00		ldy #$00	                ldy #0
.8233	91 28		sta ($28),y	                sta (tmp3),y
.8235	e6 28		inc $28		                inc tmp3
.8237	d0 02		bne $823b	                bne +           ; Increment the upper byte on carry.
.8239	e6 29		inc $29		                inc tmp3+1
.823b					+
.823b					_save_history_loop:
.823b	c4 21		cpy $21		                cpy status+1
.823d	f0 07		beq $8246	                beq _save_history_done
.823f	b1 24		lda ($24),y	                lda (tmp1),y
.8241	91 28		sta ($28),y	                sta (tmp3),y
.8243	c8		iny		                iny
.8244	80 f5		bra $823b	                bra _save_history_loop
.8246					_save_history_done:
.8246					z_accept:
.8246	60		rts		                rts
.8247					accept_total_recall:
.8247	a9 00		lda #$00	                lda #<hist_buff
.8249	85 28		sta $28		                sta tmp3
.824b	a9 7c		lda #$7c	                lda #>hist_buff
.824d	85 29		sta $29		                sta tmp3+1
.824f	a5 20		lda $20		                lda status
.8251	6a		ror a		                ror
.8252	29 03		and #$03	                and #3
.8254	18		clc		                clc
.8255	65 29		adc $29		                adc tmp3+1
.8257	85 29		sta $29		                sta tmp3+1
.8259	a5 20		lda $20		                lda status
.825b	6a		ror a		                ror             ; Rotate through carry into msb.
.825c	6a		ror a		                ror
.825d	29 80		and #$80	                and #$80
.825f	18		clc		                clc
.8260	65 28		adc $28		                adc tmp3
.8262	85 28		sta $28		                sta tmp3
.8264	90 02		bcc $8268	                bcc +           ; Increment the upper byte on carry.
.8266	e6 29		inc $29		                inc tmp3+1
.8268					+
.8268	98		tya		                tya
.8269	c9 80		cmp #$80	                cmp #$80
.826b	90 02		bcc $826f	                bcc +
.826d	a9 7f		lda #$7f	                lda #$7F
.826f					+
.826f	60		rts		                rts
.8270					xt_action_of:
.8270	a5 16		lda $16		                lda state
.8272	05 17		ora $17		                ora state+1
.8274	f0 0c		beq $8282	                beq _interpreting
.8276					_compiling:
.8276	20 8e 85	jsr $858e	                jsr xt_bracket_tick
.8279	a0 8a		ldy #$8a	                ldy #>xt_defer_fetch
.827b	a9 cf		lda #$cf	                lda #<xt_defer_fetch
.827d	20 8e d4	jsr $d48e	                jsr cmpl_subroutine
.8280	80 06		bra $8288	                bra _done
.8282					_interpreting:
.8282	20 8d a1	jsr $a18d	                jsr xt_tick
.8285	20 cf 8a	jsr $8acf	                jsr xt_defer_fetch
.8288					_done:
.8288	60		rts		z_action_of:           rts
.8289					xt_again:
.8289	20 eb d5	jsr $d5eb	                jsr underflow_1
.828c	a0 00		ldy #$00	                ldy #0
.828e	a9 4c		lda #$4c	                lda #$4C        ; JMP
.8290	91 00		sta ($00),y	                sta (cp),y
.8292	c8		iny		                iny
.8293	b5 00		lda $00,x	                lda 0,x         ; LSB of address
.8295	91 00		sta ($00),y	                sta (cp),y
.8297	c8		iny		                iny
.8298	b5 01		lda $01,x	                lda 1,x         ; MSB of address
.829a	91 00		sta ($00),y	                sta (cp),y
.829c	c8		iny		                iny
.829d	98		tya		                tya
.829e	18		clc		                clc
.829f	65 00		adc $00		                adc cp
.82a1	85 00		sta $00		                sta cp
.82a3	90 02		bcc $82a7	                bcc _done
.82a5	e6 01		inc $01		                inc cp+1
.82a7					_done:
.82a7	e8		inx		                inx
.82a8	e8		inx		                inx
.82a9	60		rts		z_again:        rts
.82aa					xt_align:
.82aa					xt_aligned:
.82aa					z_align:
.82aa	60		rts		z_aligned:      rts             ; stripped out during native compile
.82ab					xt_allot:
.82ab	20 eb d5	jsr $d5eb	                jsr underflow_1
.82ae	b5 01		lda $01,x	                lda 1,x
.82b0	30 22		bmi $82d4	                bmi _release
.82b2	18		clc		                clc
.82b3	a5 00		lda $00		                lda cp
.82b5	75 00		adc $00,x	                adc 0,x
.82b7	85 00		sta $00		                sta cp
.82b9	a5 01		lda $01		                lda cp+1
.82bb	75 01		adc $01,x	                adc 1,x
.82bd	85 01		sta $01		                sta cp+1
.82bf	a0 00		ldy #$00	                ldy #<cp_end
.82c1	c4 00		cpy $00		                cpy cp
.82c3	a9 7c		lda #$7c	                lda #>cp_end
.82c5	e5 01		sbc $01		                sbc cp+1
.82c7	b0 48		bcs $8311	                bcs _done               ; we're fine.
.82c9	84 00		sty $00		                sty cp                  ; still #<cp_end
.82cb	a9 7c		lda #$7c	                lda #>cp_end
.82cd	85 01		sta $01		                sta cp+1
.82cf	a9 00		lda #$00	                lda #err_allot
.82d1	4c 01 d6	jmp $d601	                jmp error
.82d4					_release:
.82d4	ca		dex		                dex
.82d5	ca		dex		                dex
.82d6	a5 00		lda $00		                lda cp
.82d8	95 00		sta $00,x	                sta 0,x
.82da	a5 01		lda $01		                lda cp+1
.82dc	95 01		sta $01,x	                sta 1,x
.82de	20 65 99	jsr $9965	                jsr xt_plus                     ; new CP is now TOS
.82e1	ca		dex		                dex
.82e2	ca		dex		                dex                             ; new CP now NOS
.82e3	a9 00		lda #$00	                lda #<cp0
.82e5	95 00		sta $00,x	                sta 0,x
.82e7	a9 03		lda #$03	                lda #>cp0
.82e9	95 01		sta $01,x	                sta 1,x                         ; CP0 is TOS
.82eb	20 12 d5	jsr $d512	                jsr compare_16bit               ; still ( CP CP0 )
.82ee	f0 17		beq $8307	                beq _nega_done
.82f0	30 15		bmi $8307	                bmi _nega_done
.82f2	a9 00		lda #$00	                lda #<cp0
.82f4	85 00		sta $00		                sta cp
.82f6	a9 03		lda #$03	                lda #>cp0
.82f8	85 01		sta $01		                sta cp+1
.82fa	a9 24		lda #$24	                lda #<dictionary_start
.82fc	85 02		sta $02		                sta dp
.82fe	a9 c8		lda #$c8	                lda #>dictionary_start
.8300	85 03		sta $03		                sta dp+1
.8302	a9 0a		lda #$0a	                lda #err_negallot
.8304	4c 01 d6	jmp $d601	                jmp error
.8307					_nega_done:
.8307	b5 02		lda $02,x	                lda 2,x
.8309	85 00		sta $00		                sta cp
.830b	b5 03		lda $03,x	                lda 3,x
.830d	85 01		sta $01		                sta cp+1
.830f	e8		inx		                inx
.8310	e8		inx		                inx                     ; drop through to _done
.8311					_done:
.8311	e8		inx		                inx
.8312	e8		inx		                inx
.8313					z_allot:
.8313	60		rts		                rts
.8314					xt_allow_native:
.8314	20 2d d5	jsr $d52d	                jsr current_to_dp
.8317	a0 01		ldy #$01	                ldy #1          ; offset for status byte
.8319	b1 02		lda ($02),y	                lda (dp),y
.831b	29 f5		and #$f5	                and #$ff-NN-AN  ; AN and NN flag is clear.
.831d	91 02		sta ($02),y	                sta (dp),y
.831f					z_allow_native:
.831f	60		rts		                rts
.8320					xt_also:
.8320	20 24 91	jsr $9124	                jsr xt_get_order
.8323	20 15 98	jsr $9815	                jsr xt_over
.8326	20 2a a1	jsr $a12a	                jsr xt_swap
.8329	20 9f 97	jsr $979f	                jsr xt_one_plus
.832c	20 9d 9c	jsr $9c9d	                jsr xt_set_order
.832f	60		rts		z_also:         rts
.8330					xt_always_native:
.8330	20 2d d5	jsr $d52d	                jsr current_to_dp
.8333	a0 01		ldy #$01	                ldy #1          ; offset for status byte
.8335	b1 02		lda ($02),y	                lda (dp),y
.8337	09 02		ora #$02	                ora #AN         ; Make sure AN flag is set
.8339	29 f7		and #$f7	                and #$ff-NN     ; and NN flag is clear.
.833b	91 02		sta ($02),y	                sta (dp),y
.833d					z_always_native:
.833d	60		rts		                rts
.833e					xt_and:
.833e	20 f0 d5	jsr $d5f0	                jsr underflow_2
.8341	b5 00		lda $00,x	                lda 0,x
.8343	35 02		and $02,x	                and 2,x
.8345	95 02		sta $02,x	                sta 2,x
.8347	b5 01		lda $01,x	                lda 1,x
.8349	35 03		and $03,x	                and 3,x
.834b	95 03		sta $03,x	                sta 3,x
.834d	e8		inx		                inx
.834e	e8		inx		                inx
.834f	60		rts		z_and:          rts
.8350					xt_at_xy:
.8350	20 f0 d5	jsr $d5f0	                jsr underflow_2
.8353	a9 1b		lda #$1b	                lda #AscESC
.8355	20 e6 8d	jsr $8de6	                jsr emit_a
.8358	a9 5b		lda #$5b	                lda #$5B        ; ASCII for "["
.835a	20 e6 8d	jsr $8de6	                jsr emit_a
.835d	20 37 d6	jsr $d637	                jsr print_u
.8360	a9 3b		lda #$3b	                lda #$3B        ; ASCII for ";"
.8362	20 e6 8d	jsr $8de6	                jsr emit_a
.8365	20 37 d6	jsr $d637	                jsr print_u
.8368	a9 48		lda #$48	                lda #'H'
.836a	20 e6 8d	jsr $8de6	                jsr emit_a
.836d	60		rts		z_at_xy:        rts
.836e					xt_backslash:
.836e	a5 0a		lda $0a		                lda ciblen
.8370	85 0c		sta $0c		                sta toin
.8372	a5 0b		lda $0b		                lda ciblen+1
.8374	85 0d		sta $0d		                sta toin+1
.8376	60		rts		z_backslash:    rts
.8377					xt_base:
.8377	ca		dex		                dex
.8378	ca		dex		                dex
.8379	a9 18		lda #$18	                lda #<base
.837b	95 00		sta $00,x	                sta 0,x         ; LSB
.837d	74 01		stz $01,x	                stz 1,x         ; MSB is always 0
.837f	60		rts		z_base:         rts
.8380					xt_begin:
.8380	20 62 91	jsr $9162	                jsr xt_here
.8383	60		rts		z_begin:        rts
.8384					xt_bell:
.8384	a9 07		lda #$07	                lda #7          ; ASCII value for BELl
.8386	20 e6 8d	jsr $8de6	                jsr emit_a
.8389	60		rts		z_bell:         rts
.838a					xt_bl:
.838a	ca		dex		                dex
.838b	ca		dex		                dex
.838c	a9 20		lda #$20	                lda #AscSP
.838e	95 00		sta $00,x	                sta 0,x
.8390	74 01		stz $01,x	                stz 1,x
.8392	60		rts		z_bl:           rts
.8393					xt_blk:
.8393	ca		dex		                dex
.8394	ca		dex		                dex
.8395	18		clc		                clc
.8396	a5 1e		lda $1e		                lda up
.8398	69 00		adc #$00	                adc #blk_offset ; Add offset
.839a	95 00		sta $00,x	                sta 0,x
.839c	a5 1f		lda $1f		                lda up+1
.839e	69 00		adc #$00	                adc #0          ; Adding carry
.83a0	95 01		sta $01,x	                sta 1,x
.83a2	60		rts		z_blk:          rts
.83a3					xt_blkbuffer:
.83a3	ca		dex		                dex
.83a4	ca		dex		                dex
.83a5	a0 28		ldy #$28	                ldy #blkbuffer_offset
.83a7	b1 1e		lda ($1e),y	                lda (up),y
.83a9	95 00		sta $00,x	                sta 0,x
.83ab	c8		iny		                iny             ; Move along to the next byte
.83ac	b1 1e		lda ($1e),y	                lda (up),y
.83ae	95 01		sta $01,x	                sta 1,x
.83b0	60		rts		z_blkbuffer:    rts
.83b1					xt_block:
.83b1	a0 2a		ldy #$2a	                ldy #buffblocknum_offset
.83b3	b1 1e		lda ($1e),y	                lda (up),y
.83b5	d5 00		cmp $00,x	                cmp 0,x
.83b7	d0 0f		bne $83c8	                bne _not_in_buffer
.83b9	c8		iny		                iny
.83ba	b1 1e		lda ($1e),y	                lda (up),y
.83bc	d5 01		cmp $01,x	                cmp 1,x
.83be	d0 08		bne $83c8	                bne _not_in_buffer
.83c0	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.83c2	b1 1e		lda ($1e),y	                lda (up),y
.83c4	29 01		and #$01	                and #1          ; Check the in-use flag (bit 0)
.83c6	d0 30		bne $83f8	                bne _done       ; It's already in the buffer and in use.
.83c8					_not_in_buffer:
.83c8	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.83ca	b1 1e		lda ($1e),y	                lda (up),y      ; Only bits 0 and 1 are used, so only
.83cc	c9 03		cmp #$03	                cmp #3          ; LSB is needed.
.83ce	d0 0c		bne $83dc	                bne _buffer_available ; Unused or not dirty = available
.83d0	20 a3 83	jsr $83a3	                jsr xt_blkbuffer
.83d3	20 95 85	jsr $8595	                jsr xt_buffblocknum
.83d6	20 70 8f	jsr $8f70	                jsr xt_fetch
.83d9	20 50 85	jsr $8550	                jsr xt_block_write
.83dc					_buffer_available:
.83dc	a0 2a		ldy #$2a	                ldy #buffblocknum_offset
.83de	b5 00		lda $00,x	                lda 0,x
.83e0	91 1e		sta ($1e),y	                sta (up),y
.83e2	c8		iny		                iny
.83e3	b5 01		lda $01,x	                lda 1,x
.83e5	91 1e		sta ($1e),y	                sta (up),y
.83e7	20 a3 83	jsr $83a3	                jsr xt_blkbuffer
.83ea	20 2a a1	jsr $a12a	                jsr xt_swap
.83ed	20 2d 85	jsr $852d	                jsr xt_block_read
.83f0	a9 01		lda #$01	                lda #1
.83f2	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.83f4	91 1e		sta ($1e),y	                sta (up),y
.83f6	ca		dex		                dex
.83f7	ca		dex		                dex
.83f8					_done:
.83f8	a0 28		ldy #$28	                ldy #blkbuffer_offset
.83fa	b1 1e		lda ($1e),y	                lda (up),y
.83fc	95 00		sta $00,x	                sta 0,x
.83fe	c8		iny		                iny
.83ff	b1 1e		lda ($1e),y	                lda (up),y
.8401	95 01		sta $01,x	                sta 1,x
.8403	60		rts		z_block:        rts
.8404					xt_block_ramdrive_init:
.8404	20 eb d5	jsr $d5eb	                jsr underflow_1
.8407	4c 22 85	jmp $8522	                jmp _after_ramdrive_code
.840a					_ramdrive_code:
>840a	62 61 73 65 20 40 20 73		        .text "base @ swap decimal"
>8412	77 61 70 20 64 65 63 69 6d 61 6c
>841d	20 31 30 32 34 20 2a		        .text " 1024 *" ; ( Calculate how many bytes are needed for numblocks blocks )
>8424	20 64 75 70			        .text " dup"    ; ( Save a copy for formatting it at the end )
>8428	20 62 75 66 66 65 72 3a		        .text " buffer: ramdrive" ; ( Create ramdrive )
>8430	20 72 61 6d 64 72 69 76 65
>8439	20 3a 20 62 6c 6f 63 6b		        .text " : block-read-ramdrive"  ; ( addr u -- )
>8441	2d 72 65 61 64 2d 72 61 6d 64 72 69 76 65
>844f	20 72 61 6d 64 72 69 76		        .text " ramdrive swap 1024 * + swap 1024 move ;"
>8457	65 20 73 77 61 70 20 31 30 32 34 20 2a 20 2b 20
>8467	73 77 61 70 20 31 30 32 34 20 6d 6f 76 65 20 3b
>8477	20 3a 20 62 6c 6f 63 6b		        .text " : block-write-ramdrive" ; ( addr u -- )
>847f	2d 77 72 69 74 65 2d 72 61 6d 64 72 69 76 65
>848e	20 72 61 6d 64 72 69 76		        .text " ramdrive swap 1024 * + 1024 move ;"
>8496	65 20 73 77 61 70 20 31 30 32 34 20 2a 20 2b 20
>84a6	31 30 32 34 20 6d 6f 76 65 20 3b
>84b1	20 27 20 62 6c 6f 63 6b		        .text " ' block-read-ramdrive block-read-vector !" ; ( Replace I/O vectors )
>84b9	2d 72 65 61 64 2d 72 61 6d 64 72 69 76 65 20 62
>84c9	6c 6f 63 6b 2d 72 65 61 64 2d 76 65 63 74 6f 72
>84d9	20 21
>84db	20 27 20 62 6c 6f 63 6b		        .text " ' block-write-ramdrive block-write-vector !"
>84e3	2d 77 72 69 74 65 2d 72 61 6d 64 72 69 76 65 20
>84f3	62 6c 6f 63 6b 2d 77 72 69 74 65 2d 76 65 63 74
>8503	6f 72 20 21
>8507	20 72 61 6d 64 72 69 76		        .text " ramdrive swap blank base !"
>850f	65 20 73 77 61 70 20 62 6c 61 6e 6b 20 62 61 73
>851f	65 20 21
.8522					_after_ramdrive_code:
.8522	20 2b a0	jsr $a02b	                jsr sliteral_runtime
>8525	0a 84 18 01			.word _ramdrive_code, _after_ramdrive_code-_ramdrive_code
.8529	20 c5 90	jsr $90c5	                jsr xt_evaluate
.852c					z_block_ramdrive_init:
.852c	60		rts		                rts
.852d					xt_block_read:
.852d	a0 2e		ldy #$2e	                ldy #blockread_offset
.852f	b1 1e		lda ($1e),y	                lda (up),y
.8531	85 24		sta $24		                sta tmp1
.8533	c8		iny		                iny
.8534	b1 1e		lda ($1e),y	                lda (up),y
.8536	85 25		sta $25		                sta tmp1+1
.8538	6c 24 00	jmp ($0024)	                jmp (tmp1)
.853b					z_block_read:
.853b					xt_block_read_vector:
.853b	ca		dex		                dex
.853c	ca		dex		                dex
.853d	18		clc		                clc
.853e	a5 1e		lda $1e		                lda up
.8540	69 2e		adc #$2e	                adc #blockread_offset
.8542	95 00		sta $00,x	                sta 0,x
.8544	a5 1f		lda $1f		                lda up+1
.8546	69 00		adc #$00	                adc #0          ; Add carry
.8548	95 01		sta $01,x	                sta 1,x
.854a					z_block_read_vector:
.854a	60		rts		                rts
.854b					xt_block_word_error:
.854b	a9 0c		lda #$0c	                lda #err_blockwords
.854d	4c 01 d6	jmp $d601	                jmp error       ; no RTS needed
.8550					z_block_word_error:
.8550					xt_block_write:
.8550	a0 30		ldy #$30	                ldy #blockwrite_offset
.8552	b1 1e		lda ($1e),y	                lda (up),y
.8554	85 24		sta $24		                sta tmp1
.8556	c8		iny		                iny
.8557	b1 1e		lda ($1e),y	                lda (up),y
.8559	85 25		sta $25		                sta tmp1+1
.855b	6c 24 00	jmp ($0024)	                jmp (tmp1)
.855e					z_block_write:
.855e					xt_block_write_vector:
.855e	ca		dex		                dex
.855f	ca		dex		                dex
.8560	18		clc		                clc
.8561	a5 1e		lda $1e		                lda up
.8563	69 30		adc #$30	                adc #blockwrite_offset
.8565	95 00		sta $00,x	                sta 0,x
.8567	a5 1f		lda $1f		                lda up+1
.8569	69 00		adc #$00	                adc #0          ; Add carry
.856b	95 01		sta $01,x	                sta 1,x
.856d					z_block_write_vector:
.856d	60		rts		                rts
.856e					xt_bounds:
.856e	20 f0 d5	jsr $d5f0	                jsr underflow_2
.8571	18		clc		                clc
.8572	b5 00		lda $00,x	                lda 0,x                 ; LSB u
.8574	b4 02		ldy $02,x	                ldy 2,x                 ; LSB addr
.8576	75 02		adc $02,x	                adc 2,x
.8578	95 02		sta $02,x	                sta 2,x                 ; LSB addr+u
.857a	94 00		sty $00,x	                sty 0,x
.857c	b5 01		lda $01,x	                lda 1,x                 ; MSB u
.857e	b4 03		ldy $03,x	                ldy 3,x                 ; MSB addr
.8580	75 03		adc $03,x	                adc 3,x
.8582	95 03		sta $03,x	                sta 3,x                 ; MSB addr+u
.8584	94 01		sty $01,x	                sty 1,x
.8586	60		rts		z_bounds:       rts
.8587					xt_bracket_char:
.8587	20 21 86	jsr $8621	                jsr xt_char
.858a	20 7a 93	jsr $937a	                jsr xt_literal
.858d	60		rts		z_bracket_char: rts
.858e					xt_bracket_tick:
.858e	20 8d a1	jsr $a18d	                jsr xt_tick
.8591	20 7a 93	jsr $937a	                jsr xt_literal
.8594	60		rts		z_bracket_tick: rts
.8595					xt_buffblocknum:
.8595	ca		dex		                dex
.8596	ca		dex		                dex
.8597	18		clc		                clc
.8598	a5 1e		lda $1e		                lda up
.859a	69 2a		adc #$2a	                adc #buffblocknum_offset        ; Add offset
.859c	95 00		sta $00,x	                sta 0,x
.859e	a5 1f		lda $1f		                lda up+1
.85a0	69 00		adc #$00	                adc #0                          ; Adding carry
.85a2	95 01		sta $01,x	                sta 1,x
.85a4	60		rts		z_buffblocknum: rts
.85a5					xt_buffer:
.85a5	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.85a7	b1 1e		lda ($1e),y	                lda (up),y      ; Only bits 0 and 1 are used, so only
.85a9	c9 03		cmp #$03	                cmp #3          ; LSB is needed.
.85ab	d0 0c		bne $85b9	                bne _buffer_available ; Unused or not dirty = available
.85ad	20 a3 83	jsr $83a3	                jsr xt_blkbuffer
.85b0	20 95 85	jsr $8595	                jsr xt_buffblocknum
.85b3	20 70 8f	jsr $8f70	                jsr xt_fetch
.85b6	20 50 85	jsr $8550	                jsr xt_block_write
.85b9					_buffer_available:
.85b9	a0 2a		ldy #$2a	                ldy #buffblocknum_offset
.85bb	b5 00		lda $00,x	                lda 0,x
.85bd	91 1e		sta ($1e),y	                sta (up),y
.85bf	c8		iny		                iny
.85c0	b5 01		lda $01,x	                lda 1,x
.85c2	91 1e		sta ($1e),y	                sta (up),y
.85c4	a9 01		lda #$01	                lda #1
.85c6	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.85c8	91 1e		sta ($1e),y	                sta (up),y
.85ca					_done:
.85ca	a0 28		ldy #$28	                ldy #blkbuffer_offset
.85cc	b1 1e		lda ($1e),y	                lda (up),y
.85ce	95 00		sta $00,x	                sta 0,x
.85d0	c8		iny		                iny
.85d1	b1 1e		lda ($1e),y	                lda (up),y
.85d3	95 01		sta $01,x	                sta 1,x
.85d5	60		rts		z_buffer:       rts
.85d6					xt_buffer_colon:
.85d6	20 59 89	jsr $8959	                jsr xt_create
.85d9	20 ab 82	jsr $82ab	                jsr xt_allot
.85dc	60		rts		z_buffer_colon: rts
.85dd					xt_buffstatus:
.85dd	ca		dex		                dex
.85de	ca		dex		                dex
.85df	18		clc		                clc
.85e0	a5 1e		lda $1e		                lda up
.85e2	69 2c		adc #$2c	                adc #buffstatus_offset  ; Add offset
.85e4	95 00		sta $00,x	                sta 0,x
.85e6	a5 1f		lda $1f		                lda up+1
.85e8	69 00		adc #$00	                adc #0                  ; Adding carry
.85ea	95 01		sta $01,x	                sta 1,x
.85ec	60		rts		z_buffstatus:   rts
.85ed					xt_bye:
.85ed	4c 2b f0	jmp $f02b	                jmp platform_bye
.85f0					z_bye:
.85f0					xt_c_comma:
.85f0	20 eb d5	jsr $d5eb	                jsr underflow_1
.85f3	b5 00		lda $00,x	                lda 0,x
.85f5	20 9e d4	jsr $d49e	                jsr cmpl_a
.85f8	e8		inx		                inx
.85f9	e8		inx		                inx
.85fa	60		rts		z_c_comma:      rts
.85fb					xt_c_fetch:
.85fb	20 eb d5	jsr $d5eb	                jsr underflow_1
.85fe	a1 00		lda ($00,x)	                lda (0,x)
.8600	95 00		sta $00,x	                sta 0,x
.8602	74 01		stz $01,x	                stz 1,x         ; Ignore LSB
.8604	60		rts		z_c_fetch:      rts
.8605					xt_c_store:
.8605	20 f0 d5	jsr $d5f0	                jsr underflow_2
.8608	b5 02		lda $02,x	                lda 2,x
.860a	81 00		sta ($00,x)	                sta (0,x)
.860c	e8		inx		                inx
.860d	e8		inx		                inx
.860e	e8		inx		                inx
.860f	e8		inx		                inx
.8610	60		rts		z_c_store:      rts
.8611					xt_cell_plus:
.8611	20 eb d5	jsr $d5eb	                jsr underflow_1
.8614	f6 00		inc $00,x	                inc 0,x
.8616	d0 02		bne $861a	                bne +
.8618	f6 01		inc $01,x	                inc 1,x
.861a					+
.861a	f6 00		inc $00,x	                inc 0,x
.861c	d0 02		bne $8620	                bne _done
.861e	f6 01		inc $01,x	                inc 1,x
.8620					_done:
.8620	60		rts		z_cell_plus:    rts
.8621					xt_char:
.8621	20 61 98	jsr $9861	                jsr xt_parse_name
.8624	b5 00		lda $00,x	                lda 0,x
.8626	15 01		ora $01,x	                ora 1,x
.8628	d0 05		bne $862f	                bne _not_empty
.862a	a9 05		lda #$05	                lda #err_noname
.862c	4c 01 d6	jmp $d601	                jmp error
.862f					_not_empty:
.862f	e8		inx		                inx             ; drop number of characters, leave addr
.8630	e8		inx		                inx
.8631	a1 00		lda ($00,x)	                lda (0,x)       ; get character (equivalent to C@)
.8633	95 00		sta $00,x	                sta 0,x
.8635	74 01		stz $01,x	                stz 1,x         ; MSB is always zero
.8637	60		rts		z_char:         rts
.8638					xt_chars:
.8638	20 eb d5	jsr $d5eb	                jsr underflow_1
.863b	60		rts		z_chars:        rts
.863c					xt_cleave:
.863c	20 f0 d5	jsr $d5f0	                jsr underflow_2
.863f	20 53 95	jsr $9553	                jsr xt_minus_leading    ; -LEADING ( addr u )
.8642	20 52 92	jsr $9252	                jsr xt_input_to_r       ; save old imput state
.8645	b5 00		lda $00,x	                lda 0,x         ; u is new ciblen
.8647	85 0a		sta $0a		                sta ciblen
.8649	b5 01		lda $01,x	                lda 1,x
.864b	85 0b		sta $0b		                sta ciblen+1
.864d	b5 02		lda $02,x	                lda 2,x         ; addr is new cib
.864f	85 08		sta $08		                sta cib
.8651	b5 03		lda $03,x	                lda 3,x
.8653	85 09		sta $09		                sta cib+1
.8655	64 0c		stz $0c		                stz toin        ; >IN pointer is zero
.8657	64 0d		stz $0d		                stz toin+1
.8659	20 61 98	jsr $9861	                jsr xt_parse_name       ; ( addr u addr-s u-s )
.865c	b5 00		lda $00,x	                lda 0,x
.865e	15 01		ora $01,x	                ora 1,x
.8660	f0 23		beq $8685	                beq _done
.8662	b5 04		lda $04,x	                lda 4,x         ; LSB of original u
.8664	38		sec		                sec
.8665	f5 00		sbc $00,x	                sbc 0,x
.8667	95 04		sta $04,x	                sta 4,x
.8669	b5 05		lda $05,x	                lda 5,x         ; MSB of original u
.866b	f5 01		sbc $01,x	                sbc 1,x
.866d	95 05		sta $05,x	                sta 5,x
.866f	b5 06		lda $06,x	                lda 6,x         ; LSB of original addr
.8671	18		clc		                clc
.8672	75 00		adc $00,x	                adc 0,x
.8674	95 06		sta $06,x	                sta 6,x
.8676	b5 07		lda $07,x	                lda 7,x         ; MSB of original addr
.8678	75 01		adc $01,x	                adc 1,x
.867a	95 07		sta $07,x	                sta 7,x
.867c	20 fa a3	jsr $a3fa	                jsr xt_two_swap         ; ( addr-s u-s addr u )
.867f	20 53 95	jsr $9553	                jsr xt_minus_leading
.8682	20 fa a3	jsr $a3fa	                jsr xt_two_swap         ; ( addr u addr-s u-s )
.8685					_done:
.8685	20 25 9a	jsr $9a25	                jsr xt_r_to_input
.8688	60		rts		z_cleave:       rts
.8689					xt_cmove:
.8689	20 f5 d5	jsr $d5f5	                jsr underflow_3
.868c	b5 02		lda $02,x	                lda 2,x
.868e	85 26		sta $26		                sta tmp2        ; use tmp2 because easier to remember
.8690	b5 03		lda $03,x	                lda 3,x
.8692	85 27		sta $27		                sta tmp2+1
.8694	b5 04		lda $04,x	                lda 4,x
.8696	85 24		sta $24		                sta tmp1        ; use tmp1 because easier to remember
.8698	b5 05		lda $05,x	                lda 5,x
.869a	85 25		sta $25		                sta tmp1+1
.869c	a0 00		ldy #$00	                ldy #0
.869e	b5 01		lda $01,x	                lda 1,x         ; number of whole pages to move
.86a0	f0 0f		beq $86b1	                beq _dopartial
.86a2					_page:
.86a2	b1 24		lda ($24),y	                lda (tmp1),y
.86a4	91 26		sta ($26),y	                sta (tmp2),y
.86a6	c8		iny		                iny
.86a7	d0 f9		bne $86a2	                bne _page
.86a9	e6 25		inc $25		                inc tmp1+1
.86ab	e6 27		inc $27		                inc tmp2+1
.86ad	d6 01		dec $01,x	                dec 1,x
.86af	d0 f1		bne $86a2	                bne _page
.86b1					_dopartial:
.86b1	b5 00		lda $00,x	                lda 0,x         ; length of last page
.86b3	f0 09		beq $86be	                beq _done
.86b5					_partial:
.86b5	b1 24		lda ($24),y	                lda (tmp1),y
.86b7	91 26		sta ($26),y	                sta (tmp2),y
.86b9	c8		iny		                iny
.86ba	d6 00		dec $00,x	                dec 0,x
.86bc	d0 f7		bne $86b5	                bne _partial
.86be					_done:
.86be	8a		txa		                txa
.86bf	18		clc		                clc
.86c0	69 06		adc #$06	                adc #6
.86c2	aa		tax		                tax
.86c3	60		rts		z_cmove:        rts
.86c4					xt_cmove_up:
.86c4	20 f5 d5	jsr $d5f5	                jsr underflow_3
.86c7	b5 02		lda $02,x	                lda 2,x
.86c9	85 26		sta $26		                sta tmp2        ; use tmp2 because easier to remember
.86cb	b5 03		lda $03,x	                lda 3,x
.86cd	18		clc		                clc
.86ce	75 01		adc $01,x	                adc 1,x
.86d0	85 27		sta $27		                sta tmp2+1      ; point to last page of destination
.86d2	b5 04		lda $04,x	                lda 4,x
.86d4	85 24		sta $24		                sta tmp1        ; use tmp1 because easier to remember
.86d6	b5 05		lda $05,x	                lda 5,x
.86d8	18		clc		                clc
.86d9	75 01		adc $01,x	                adc 1,x
.86db	85 25		sta $25		                sta tmp1+1      ; point to last page of source
.86dd	f6 01		inc $01,x	                inc 1,x         ; allows us to use bne with dec 1,x below
.86df	b4 00		ldy $00,x	                ldy 0,x         ; length of last page
.86e1	f0 0e		beq $86f1	                beq _nopartial
.86e3					_outerloop:
.86e3	88		dey		                dey
.86e4	f0 07		beq $86ed	                beq _finishpage
.86e6					_innerloop:
.86e6	b1 24		lda ($24),y	                lda (tmp1),y
.86e8	91 26		sta ($26),y	                sta (tmp2),y
.86ea	88		dey		                dey
.86eb	d0 f9		bne $86e6	                bne _innerloop
.86ed					_finishpage:
.86ed	b2 24		lda ($24)	                lda (tmp1)      ; handle y = 0 separately
.86ef	92 26		sta ($26)	                sta (tmp2)
.86f1					_nopartial:
.86f1	c6 25		dec $25		                dec tmp1+1      ; back up to previous pages
.86f3	c6 27		dec $27		                dec tmp2+1
.86f5	d6 01		dec $01,x	                dec 1,x
.86f7	d0 ea		bne $86e3	                bne _outerloop
.86f9					_done:
.86f9	8a		txa		                txa
.86fa	18		clc		                clc
.86fb	69 06		adc #$06	                adc #6
.86fd	aa		tax		                tax
.86fe	60		rts		z_cmove_up:     rts
.86ff					xt_colon:
.86ff	a5 16		lda $16		                lda state
.8701	05 17		ora $17		                ora state+1
.8703	f0 05		beq $870a	                beq +
.8705	a9 07		lda #$07	                lda #err_state
.8707	4c 01 d6	jmp $d601	                jmp error
.870a					+
.870a	c6 16		dec $16		                dec state
.870c	c6 17		dec $17		                dec state+1
.870e	a9 40		lda #$40	                lda #%01000000
.8710	04 20		tsb $20		                tsb status
.8712	20 2d d5	jsr $d52d	                jsr current_to_dp
.8715	a5 03		lda $03		                lda dp+1            ; CREATE uses a lot of variables
.8717	48		pha		                pha
.8718	a5 02		lda $02		                lda dp
.871a	48		pha		                pha
.871b	a9 80		lda #$80	                lda #%10000000
.871d	04 20		tsb $20		                tsb status
.871f	20 59 89	jsr $8959	                jsr xt_create
.8722	20 2d d5	jsr $d52d	                jsr current_to_dp   ; This might be able to be omitted
.8725	a5 02		lda $02		                lda dp
.8727	85 04		sta $04		                sta workword
.8729	a5 03		lda $03		                lda dp+1
.872b	85 05		sta $05		                sta workword+1
.872d	68		pla		                pla
.872e	85 02		sta $02		                sta dp
.8730	68		pla		                pla
.8731	85 03		sta $03		                sta dp+1
.8733	20 40 d5	jsr $d540	                jsr dp_to_current
.8736	a5 00		lda $00		                lda cp
.8738	38		sec		                sec
.8739	e9 03		sbc #$03	                sbc #3
.873b	85 00		sta $00		                sta cp
.873d	b0 02		bcs $8741	                bcs _done
.873f	c6 01		dec $01		                dec cp+1
.8741					_done:
.8741	60		rts		z_colon:        rts
.8742					xt_colon_noname:
.8742	a5 16		lda $16		                lda state
.8744	05 17		ora $17		                ora state+1
.8746	f0 05		beq $874d	                beq +
.8748	a9 07		lda #$07	                lda #err_state
.874a	4c 01 d6	jmp $d601	                jmp error
.874d					+
.874d	c6 16		dec $16		                dec state
.874f	c6 17		dec $17		                dec state+1
.8751	a9 40		lda #$40	                lda #%01000000
.8753	14 20		trb $20		                trb status
.8755	a5 00		lda $00		                lda cp
.8757	85 04		sta $04		                sta workword
.8759	a5 01		lda $01		                lda cp+1
.875b	85 05		sta $05		                sta workword+1
.875d					_done:
.875d	60		rts		z_colon_noname:        rts
.875e					xt_comma:
.875e	20 eb d5	jsr $d5eb	                jsr underflow_1
.8761	b5 00		lda $00,x	                lda 0,x
.8763	92 00		sta ($00)	                sta (cp)
.8765	e6 00		inc $00		                inc cp
.8767	d0 02		bne $876b	                bne +
.8769	e6 01		inc $01		                inc cp+1
.876b					+
.876b	b5 01		lda $01,x	                lda 1,x
.876d	92 00		sta ($00)	                sta (cp)
.876f	e6 00		inc $00		                inc cp
.8771	d0 02		bne $8775	                bne _done
.8773	e6 01		inc $01		                inc cp+1
.8775					_done:
.8775	e8		inx		                inx
.8776	e8		inx		                inx
.8777	60		rts		z_comma:        rts
.8778					xt_compare:
.8778	20 fa d5	jsr $d5fa	                jsr underflow_4
.877b	b5 02		lda $02,x	                lda 2,x
.877d	85 26		sta $26		                sta tmp2
.877f	b5 03		lda $03,x	                lda 3,x
.8781	85 27		sta $27		                sta tmp2+1
.8783	b5 06		lda $06,x	                lda 6,x
.8785	85 24		sta $24		                sta tmp1
.8787	b5 07		lda $07,x	                lda 7,x
.8789	85 25		sta $25		                sta tmp1+1
.878b					_compare_loop:
.878b	b5 04		lda $04,x	                lda 4,x
.878d	15 05		ora $05,x	                ora 5,x
.878f	f0 2c		beq $87bd	                beq _str1_done
.8791	b5 00		lda $00,x	                lda 0,x
.8793	15 01		ora $01,x	                ora 1,x
.8795	f0 3a		beq $87d1	                beq _greater    ; Str2 empty first
.8797					_check_letter:
.8797	b2 24		lda ($24)	                lda (tmp1)
.8799	d2 26		cmp ($26)	                cmp (tmp2)
.879b	90 26		bcc $87c3	                bcc _less
.879d	d0 32		bne $87d1	                bne _greater
.879f					_next_letter:
.879f	e6 24		inc $24		                inc tmp1
.87a1	d0 02		bne $87a5	                bne +
.87a3	e6 25		inc $25		                inc tmp1+1
.87a5					+
.87a5	e6 26		inc $26		                inc tmp2
.87a7	d0 02		bne $87ab	                bne +
.87a9	e6 27		inc $27		                inc tmp2+1
.87ab					+
.87ab	b5 04		lda $04,x	                lda 4,x
.87ad	d0 02		bne $87b1	                bne +
.87af	d6 05		dec $05,x	                dec 5,x
.87b1					+
.87b1	d6 04		dec $04,x	                dec 4,x
.87b3	b5 00		lda $00,x	                lda 0,x
.87b5	d0 02		bne $87b9	                bne +
.87b7	d6 01		dec $01,x	                dec 1,x
.87b9					+
.87b9	d6 00		dec $00,x	                dec 0,x
.87bb	80 ce		bra $878b	                bra _compare_loop
.87bd					_str1_done:
.87bd	b5 00		lda $00,x	                lda 0,x
.87bf	15 01		ora $01,x	                ora 1,x
.87c1	f0 08		beq $87cb	                beq _equal      ; Both out of letters
.87c3					_less:
.87c3	a9 ff		lda #$ff	                lda #$FF
.87c5	95 06		sta $06,x	                sta 6,x
.87c7	95 07		sta $07,x	                sta 7,x
.87c9	80 0c		bra $87d7	                bra _done
.87cb					_equal:
.87cb	74 06		stz $06,x	                stz 6,x
.87cd	74 07		stz $07,x	                stz 7,x
.87cf	80 06		bra $87d7	                bra _done
.87d1					_greater:
.87d1	a9 01		lda #$01	                lda #1
.87d3	95 06		sta $06,x	                sta 6,x
.87d5	74 07		stz $07,x	                stz 7,x
.87d7					_done:
.87d7	8a		txa		                txa
.87d8	18		clc		                clc
.87d9	69 06		adc #$06	                adc #6
.87db	aa		tax		                tax
.87dc	60		rts		z_compare:      rts
.87dd					xt_compile_comma:
.87dd	20 eb d5	jsr $d5eb	                jsr underflow_1
.87e0	b5 01		lda $01,x	                lda 1,x                 ; MSB
.87e2	48		pha		                pha
.87e3	b5 00		lda $00,x	                lda 0,x
.87e5	48		pha		                pha                     ; LSB
.87e6	20 68 92	jsr $9268	                jsr xt_int_to_name      ; ( xt -- nt )
.87e9	b5 00		lda $00,x	                lda 0,x
.87eb	15 01		ora $01,x	                ora 1,x
.87ed	d0 03		bne $87f2	                bne _check_nt
.87ef	4c da 88	jmp $88da	                jmp _compile_as_jump
.87f2					_check_nt:
.87f2	b5 00		lda $00,x	                lda 0,x
.87f4	85 2c		sta $2c		                sta tmptos
.87f6	b5 01		lda $01,x	                lda 1,x
.87f8	85 2d		sta $2d		                sta tmptos+1
.87fa	f6 00		inc $00,x	                inc 0,x
.87fc	d0 02		bne $8800	                bne +
.87fe	f6 01		inc $01,x	                inc 1,x                 ; ( nt -- nt+1 )
.8800					+
.8800	a1 00		lda ($00,x)	                lda (0,x)
.8802	85 28		sta $28		                sta tmp3                ; keep copy of status byte for NN
.8804	29 02		and #$02	                and #AN                 ; mask all but Always Native (AN) bit
.8806	f0 0d		beq $8815	                beq _compile_check
.8808	a5 2c		lda $2c		                lda tmptos
.880a	95 00		sta $00,x	                sta 0,x
.880c	a5 2d		lda $2d		                lda tmptos+1
.880e	95 01		sta $01,x	                sta 1,x
.8810	20 f0 a6	jsr $a6f0	                jsr xt_wordsize         ; ( nt -- u )
.8813	80 27		bra $883c	                bra _compile_as_code
.8815					_compile_check:
.8815	a5 28		lda $28		                lda tmp3
.8817	29 08		and #$08	                and #NN
.8819	f0 03		beq $881e	                beq _check_size_limit
.881b	4c da 88	jmp $88da	                jmp _compile_as_jump    ; too far for BRA
.881e					_check_size_limit:
.881e	a5 2c		lda $2c		                lda tmptos
.8820	95 00		sta $00,x	                sta 0,x
.8822	a5 2d		lda $2d		                lda tmptos+1
.8824	95 01		sta $01,x	                sta 1,x
.8826	20 f0 a6	jsr $a6f0	                jsr xt_wordsize         ; ( nt -- u )
.8829	b5 01		lda $01,x	                lda 1,x
.882b	c5 1b		cmp $1b		                cmp nc_limit+1
.882d	90 0d		bcc $883c	                bcc _compile_as_code    ; user-defined limit MSB
.882f	d0 08		bne $8839	                bne _jumpto_compile_as_jump
.8831	b5 00		lda $00,x	                lda 0,x
.8833	c5 1a		cmp $1a		                cmp nc_limit            ; user-defined limit LSB
.8835	90 05		bcc $883c	                bcc _compile_as_code    ; Allow native compiling for less
.8837	f0 03		beq $883c	                beq _compile_as_code    ; than or equal to the limit.
.8839					_jumpto_compile_as_jump:
.8839	4c da 88	jmp $88da	                jmp _compile_as_jump    ; too far for BRA
.883c					_compile_as_code:
.883c	ca		dex		                dex
.883d	ca		dex		                dex                     ; ( -- u ? )
.883e	ca		dex		                dex
.883f	ca		dex		                dex                     ; ( -- u ? ? )
.8840	b5 04		lda $04,x	                lda 4,x
.8842	95 00		sta $00,x	                sta 0,x                 ; LSB of u
.8844	b5 05		lda $05,x	                lda 5,x
.8846	95 01		sta $01,x	                sta 1,x                 ; ( -- u ? u )
.8848	68		pla		                pla
.8849	95 04		sta $04,x	                sta 4,x                 ; LSB of xt
.884b	68		pla		                pla
.884c	95 05		sta $05,x	                sta 5,x                 ; ( -- xt ? u )
.884e	a5 00		lda $00		                lda cp                  ; LSB of cp
.8850	95 02		sta $02,x	                sta 2,x
.8852	a5 01		lda $01		                lda cp+1
.8854	95 03		sta $03,x	                sta 3,x                 ; ( -- xt cp u )
.8856	a0 00		ldy #$00	                ldy #0
.8858					_strip_loop:
.8858	b9 c8 88	lda $88c8,y	                lda _strip_table,y      ; LSB of first word
.885b	d5 04		cmp $04,x	                cmp 4,x                 ; LSB of xt
.885d	d0 07		bne $8866	                bne _next_entry
.885f	b9 c9 88	lda $88c9,y	                lda _strip_table+1,y
.8862	d5 05		cmp $05,x	                cmp 5,x
.8864	f0 0c		beq $8872	                beq _found_entry
.8866					_next_entry:
.8866	b9 c8 88	lda $88c8,y	                lda _strip_table,y      ; pointing to LSB
.8869	19 c9 88	ora $88c9,y	                ora _strip_table+1,y    ; get MSB
.886c	f0 22		beq $8890	                beq _underflow_strip    ; table done, let's get out of here
.886e	c8		iny		                iny
.886f	c8		iny		                iny
.8870	80 e6		bra $8858	                bra _strip_loop
.8872					_found_entry:
.8872	98		tya		                tya
.8873	4a		lsr a		                lsr
.8874	a8		tay		                tay
.8875	b9 d4 88	lda $88d4,y	                lda _strip_size,y
.8878	85 2c		sta $2c		                sta tmptos              ; save a copy
.887a	18		clc		                clc
.887b	75 04		adc $04,x	                adc 4,x
.887d	95 04		sta $04,x	                sta 4,x
.887f	90 02		bcc $8883	                bcc+
.8881	f6 05		inc $05,x	                inc 5,x                 ; we just care about the carry
.8883					+
.8883	06 2c		asl $2c		                asl tmptos
.8885	38		sec		                sec
.8886	b5 00		lda $00,x	                lda 0,x
.8888	e5 2c		sbc $2c		                sbc tmptos
.888a	95 00		sta $00,x	                sta 0,x
.888c	b0 02		bcs $8890	                bcs +
.888e	d6 01		dec $01,x	                dec 1,x                 ; we just care about the borrow
.8890					+
.8890					_underflow_strip:
.8890	a5 1c		lda $1c		                lda uf_strip
.8892	05 1d		ora $1d		                ora uf_strip+1
.8894	f0 1c		beq $88b2	                beq _specials_done
.8896	a5 28		lda $28		                lda tmp3
.8898	29 10		and #$10	                and #UF
.889a	f0 16		beq $88b2	                beq _specials_done
.889c	18		clc		                clc
.889d	b5 04		lda $04,x	                lda 4,x
.889f	69 03		adc #$03	                adc #3
.88a1	95 04		sta $04,x	                sta 4,x
.88a3	90 02		bcc $88a7	                bcc +
.88a5	f6 05		inc $05,x	                inc 5,x                  ; we just care about the carry
.88a7					+
.88a7	38		sec		                sec
.88a8	b5 00		lda $00,x	                lda 0,x
.88aa	e9 03		sbc #$03	                sbc #3
.88ac	95 00		sta $00,x	                sta 0,x
.88ae	b0 02		bcs $88b2	                bcs +
.88b0	d6 01		dec $01,x	                dec 1,x                  ; we just care about the borrow
.88b2					+
.88b2					_specials_done:
.88b2	b5 01		lda $01,x	                lda 1,x                 ; MSB
.88b4	48		pha		                pha
.88b5	b5 00		lda $00,x	                lda 0,x                 ; LSB
.88b7	48		pha		                pha
.88b8	20 b2 95	jsr $95b2	                jsr xt_move
.88bb	18		clc		                clc
.88bc	68		pla		                pla                     ; LSB
.88bd	65 00		adc $00		                adc cp
.88bf	85 00		sta $00		                sta cp
.88c1	68		pla		                pla                     ; MSB
.88c2	65 01		adc $01		                adc cp+1
.88c4	85 01		sta $01		                sta cp+1
.88c6	80 2c		bra $88f4	                bra _done
.88c8					_strip_table:
>88c8	14 9a ff 99 ec a2		                .word xt_r_from, xt_r_fetch, xt_to_r    ; R>, R@, >R
>88ce	1e a4 a4 a3 00 00		                .word xt_two_to_r, xt_two_r_from, 0000  ; 2>R, 2R>, EOL
.88d4					_strip_size:
>88d4	04 04 04 06 06 00		                .byte 4, 4, 4, 6, 6, 0          ; R>, R@, >R, 2>R, 2R>, EOL
.88da					_compile_as_jump:
.88da	a9 20		lda #$20	                lda #$20
.88dc	92 00		sta ($00)	                sta (cp)
.88de	a0 01		ldy #$01	                ldy #1
.88e0	68		pla		                pla             ; LSB
.88e1	91 00		sta ($00),y	                sta (cp),y
.88e3	c8		iny		                iny
.88e4	68		pla		                pla             ; MSB
.88e5	91 00		sta ($00),y	                sta (cp),y
.88e7	a9 03		lda #$03	                lda #3
.88e9	18		clc		                clc
.88ea	65 00		adc $00		                adc cp
.88ec	85 00		sta $00		                sta cp
.88ee	90 02		bcc $88f2	                bcc +
.88f0	e6 01		inc $01		                inc cp+1
.88f2					+
.88f2	e8		inx		                inx             ; drop xt
.88f3	e8		inx		                inx
.88f4					_done:
.88f4					z_compile_comma:
.88f4	60		rts		                rts
.88f5					xt_compile_only:
.88f5	20 2d d5	jsr $d52d	                jsr current_to_dp
.88f8	a0 01		ldy #$01	                ldy #1          ; offset for status byte
.88fa	b1 02		lda ($02),y	                lda (dp),y
.88fc	09 01		ora #$01	                ora #CO        ; make sure bit 7 is set
.88fe	91 02		sta ($02),y	                sta (dp),y
.8900	60		rts		z_compile_only: rts
.8901					xt_value:
.8901					xt_constant:
.8901	20 eb d5	jsr $d5eb	                jsr underflow_1
.8904	20 59 89	jsr $8959	                jsr xt_create
.8907	38		sec		                sec
.8908	a5 00		lda $00		                lda cp
.890a	e9 02		sbc #$02	                sbc #2
.890c	85 24		sta $24		                sta tmp1
.890e	a5 01		lda $01		                lda cp+1
.8910	e9 00		sbc #$00	                sbc #0
.8912	85 25		sta $25		                sta tmp1+1
.8914	a9 a7		lda #$a7	                lda #<doconst           ; LSB of DOCONST
.8916	92 24		sta ($24)	                sta (tmp1)
.8918	a0 01		ldy #$01	                ldy #1
.891a	a9 d4		lda #$d4	                lda #>doconst           ; MSB of DOCONST
.891c	91 24		sta ($24),y	                sta (tmp1),y
.891e	20 5e 87	jsr $875e	                jsr xt_comma            ; drop through to adjust_z
.8921					adjust_z:
.8921	20 2b 93	jsr $932b	                jsr xt_latestnt         ; gives us ( -- nt )
.8924	b5 00		lda $00,x	                lda 0,x
.8926	85 24		sta $24		                sta tmp1
.8928	b5 01		lda $01,x	                lda 1,x
.892a	85 25		sta $25		                sta tmp1+1
.892c	a0 06		ldy #$06	                ldy #6
.892e	b1 24		lda ($24),y	                lda (tmp1),y
.8930	18		clc		                clc
.8931	69 02		adc #$02	                adc #2
.8933	91 24		sta ($24),y	                sta (tmp1),y
.8935	c8		iny		                iny
.8936	b1 24		lda ($24),y	                lda (tmp1),y
.8938	69 00		adc #$00	                adc #0                  ; only need carry
.893a	91 24		sta ($24),y	                sta (tmp1),y
.893c	e8		inx		                inx
.893d	e8		inx		                inx
.893e					z_value:
.893e	60		rts		z_constant:     rts
.893f					xt_count:
.893f	20 eb d5	jsr $d5eb	                jsr underflow_1
.8942	a1 00		lda ($00,x)	                lda (0,x)       ; Get number of characters (255 max)
.8944	a8		tay		                tay
.8945	f6 00		inc $00,x	                inc 0,x         ; LSB
.8947	d0 02		bne $894b	                bne +
.8949	f6 01		inc $01,x	                inc 1,x         ; MSB
.894b	98		tya		+               tya
.894c	ca		dex		                dex
.894d	ca		dex		                dex
.894e	95 00		sta $00,x	                sta 0,x         ; LSB
.8950	74 01		stz $01,x	                stz 1,x         ; MSB, always zero
.8952	60		rts		z_count:        rts
.8953					xt_cr:
.8953	a9 0a		lda #$0a	                lda #AscLF
.8955	20 e6 8d	jsr $8de6	                jsr emit_a
.8958	60		rts		z_cr:           rts
.8959					xt_create:
.8959	20 61 98	jsr $9861	                jsr xt_parse_name       ; ( addr u )
.895c	b5 00		lda $00,x	                lda 0,x
.895e	15 01		ora $01,x	                ora 1,x
.8960	d0 05		bne $8967	                bne _got_name
.8962	a9 05		lda #$05	                lda #err_noname
.8964	4c 01 d6	jmp $d601	                jmp error
.8967					_got_name:
.8967	74 01		stz $01,x	                stz 1,x
.8969	20 34 a3	jsr $a334	                jsr xt_two_dup          ; ( addr u addr u )
.896c	20 cb 8f	jsr $8fcb	                jsr xt_find_name        ; ( addr u flag ) (non-zero nt as flag)
.896f	b5 00		lda $00,x	                lda 0,x
.8971	15 01		ora $01,x	                ora 1,x
.8973	f0 1e		beq $8993	                beq _new_name           ; We haven't seen this one before.
.8975	e8		inx		                inx                     ; Drop flag (nt) from find-name.
.8976	e8		inx		                inx
.8977	24 20		bit $20		                bit status
.8979	10 08		bpl $8983	                bpl _redefined_name     ; Bit 7 is zero, so print the message.
.897b	a9 80		lda #$80	                lda #$80                ; Set bit 7 to indicate dup
.897d	05 20		ora $20		                ora status
.897f	85 20		sta $20		                sta status
.8981	80 18		bra $899b	                bra _process_name
.8983					_redefined_name:
.8983	a9 02		lda #$02	                lda #str_redefined
.8985	20 17 d6	jsr $d617	                jsr print_string_no_lf
.8988	20 34 a3	jsr $a334	                jsr xt_two_dup           ; ( addr u addr u )
.898b	20 7f a4	jsr $a47f	                jsr xt_type
.898e	20 a0 a0	jsr $a0a0	                jsr xt_space
.8991	80 08		bra $899b	                bra _process_name
.8993					_new_name:
.8993	e8		inx		                inx                     ; Drop flag (0) from find-name.
.8994	e8		inx		                inx
.8995	a9 7f		lda #$7f	                lda #$7F                ; Clear bit 0 of status to indicate new word.
.8997	25 20		and $20		                and status
.8999	85 20		sta $20		                sta status
.899b					_process_name:
.899b	b5 00		lda $00,x	                lda 0,x
.899d	85 26		sta $26		                sta tmp2                ; store length of string in tmp2
.899f	a5 00		lda $00		                lda cp
.89a1	85 24		sta $24		                sta tmp1
.89a3	a5 01		lda $01		                lda cp+1
.89a5	85 25		sta $25		                sta tmp1+1
.89a7	b5 00		lda $00,x	                lda 0,x
.89a9	18		clc		                clc
.89aa	69 08		adc #$08	                adc #8
.89ac	85 28		sta $28		                sta tmp3                ; total header length
.89ae	18		clc		                clc
.89af	69 03		adc #$03	                adc #3
.89b1	95 00		sta $00,x	                sta 0,x
.89b3	74 01		stz $01,x	                stz 1,x         ; max header size is 255 chars
.89b5	20 ab 82	jsr $82ab	                jsr xt_allot    ; ( addr )
.89b8	20 2d d5	jsr $d52d	                jsr current_to_dp
.89bb	a0 00		ldy #$00	                ldy #0
.89bd	a5 26		lda $26		                lda tmp2
.89bf	91 24		sta ($24),y	                sta (tmp1),y
.89c1	a9 08		lda #$08	                lda #NN
.89c3	09 20		ora #$20	                ora #HC
.89c5	c8		iny		                iny
.89c6	91 24		sta ($24),y	                sta (tmp1),y
.89c8	c8		iny		                iny
.89c9	a5 02		lda $02		                lda dp
.89cb	91 24		sta ($24),y	                sta (tmp1),y
.89cd	c8		iny		                iny
.89ce	a5 03		lda $03		                lda dp+1
.89d0	91 24		sta ($24),y	                sta (tmp1),y
.89d2	c8		iny		                iny
.89d3	a5 25		lda $25		                lda tmp1+1
.89d5	85 03		sta $03		                sta dp+1
.89d7	a5 24		lda $24		                lda tmp1
.89d9	85 02		sta $02		                sta dp
.89db	18		clc		                clc
.89dc	65 28		adc $28		                adc tmp3        ; add total header length
.89de	91 24		sta ($24),y	                sta (tmp1),y
.89e0	48		pha		                pha             ; we need this in the next step
.89e1	c8		iny		                iny
.89e2	a5 25		lda $25		                lda tmp1+1
.89e4	69 00		adc #$00	                adc #0          ; only need the carry
.89e6	91 24		sta ($24),y	                sta (tmp1),y
.89e8	c8		iny		                iny
.89e9	68		pla		                pla             ; LSB of "z_" address
.89ea	18		clc		                clc
.89eb	69 03		adc #$03	                adc #3
.89ed	91 24		sta ($24),y	                sta (tmp1),y
.89ef	88		dey		                dey             ; get the MSB of xt back
.89f0	b1 24		lda ($24),y	                lda (tmp1),y
.89f2	69 00		adc #$00	                adc #0          ; only need the carry
.89f4	c8		iny		                iny
.89f5	c8		iny		                iny
.89f6	91 24		sta ($24),y	                sta (tmp1),y
.89f8	c8		iny		                iny
.89f9	b5 00		lda $00,x	                lda 0,x
.89fb	38		sec		                sec
.89fc	e9 08		sbc #$08	                sbc #8
.89fe	85 2c		sta $2c		                sta tmptos
.8a00	b5 01		lda $01,x	                lda 1,x
.8a02	e9 00		sbc #$00	                sbc #0          ; only need carry
.8a04	85 2d		sta $2d		                sta tmptos+1
.8a06					_name_loop:
.8a06	b1 2c		lda ($2c),y	                lda (tmptos),y
.8a08	c9 5b		cmp #$5b	                cmp #$5B         ; ASCII '[' (one past Z)
.8a0a	b0 07		bcs $8a13	                bcs _store_name
.8a0c	c9 41		cmp #$41	                cmp #$41        ; ASCII 'A'
.8a0e	90 03		bcc $8a13	                bcc _store_name
.8a10	18		clc		                clc
.8a11	69 20		adc #$20	                adc #$20
.8a13					_store_name:
.8a13	91 24		sta ($24),y	                sta (tmp1),y
.8a15	c8		iny		                iny
.8a16	c6 26		dec $26		                dec tmp2
.8a18	d0 ec		bne $8a06	                bne _name_loop
.8a1a	a9 20		lda #$20	                lda #$20        ; opcode of JSR
.8a1c	91 24		sta ($24),y	                sta (tmp1),y
.8a1e	c8		iny		                iny
.8a1f	a9 ed		lda #$ed	                lda #<dovar
.8a21	91 24		sta ($24),y	                sta (tmp1),y
.8a23	c8		iny		                iny
.8a24	a9 d4		lda #$d4	                lda #>dovar
.8a26	91 24		sta ($24),y	                sta (tmp1),y
.8a28	20 40 d5	jsr $d540	                jsr dp_to_current
.8a2b	e8		inx		                inx
.8a2c	e8		inx		                inx
.8a2d	60		rts		z_create:       rts
.8a2e					xt_d_minus:
.8a2e	20 fa d5	jsr $d5fa	                jsr underflow_4 ; two double numbers
.8a31	38		sec		                sec
.8a32	b5 06		lda $06,x	                lda 6,x         ; LSB of lower word
.8a34	f5 02		sbc $02,x	                sbc 2,x
.8a36	95 06		sta $06,x	                sta 6,x
.8a38	b5 07		lda $07,x	                lda 7,x         ; MSB of lower word
.8a3a	f5 03		sbc $03,x	                sbc 3,x
.8a3c	95 07		sta $07,x	                sta 7,x
.8a3e	b5 04		lda $04,x	                lda 4,x         ; LSB of upper word
.8a40	f5 00		sbc $00,x	                sbc 0,x
.8a42	95 04		sta $04,x	                sta 4,x
.8a44	b5 05		lda $05,x	                lda 5,x         ; MSB of upper word
.8a46	f5 01		sbc $01,x	                sbc 1,x
.8a48	95 05		sta $05,x	                sta 5,x
.8a4a	e8		inx		                inx
.8a4b	e8		inx		                inx
.8a4c	e8		inx		                inx
.8a4d	e8		inx		                inx
.8a4e	60		rts		z_d_minus:      rts
.8a4f					xt_d_plus:
.8a4f	20 fa d5	jsr $d5fa	                jsr underflow_4 ; two double numbers
.8a52	18		clc		                clc
.8a53	b5 02		lda $02,x	                lda 2,x         ; LSB of lower word
.8a55	75 06		adc $06,x	                adc 6,x
.8a57	95 06		sta $06,x	                sta 6,x
.8a59	b5 03		lda $03,x	                lda 3,x         ; MSB of lower word
.8a5b	75 07		adc $07,x	                adc 7,x
.8a5d	95 07		sta $07,x	                sta 7,x
.8a5f	b5 00		lda $00,x	                lda 0,x         ; LSB of upper word
.8a61	75 04		adc $04,x	                adc 4,x
.8a63	95 04		sta $04,x	                sta 4,x
.8a65	b5 01		lda $01,x	                lda 1,x         ; MSB of upper word
.8a67	75 05		adc $05,x	                adc 5,x
.8a69	95 05		sta $05,x	                sta 5,x
.8a6b	e8		inx		                inx
.8a6c	e8		inx		                inx
.8a6d	e8		inx		                inx
.8a6e	e8		inx		                inx
.8a6f	60		rts		z_d_plus:       rts
.8a70					xt_d_to_s:
.8a70	20 f0 d5	jsr $d5f0	                jsr underflow_2
.8a73	e8		inx		                inx
.8a74	e8		inx		                inx
.8a75	60		rts		z_d_to_s:       rts
.8a76					xt_dabs:
.8a76	20 f0 d5	jsr $d5f0	                jsr underflow_2 ; double number
.8a79	b5 01		lda $01,x	                lda 1,x         ; MSB of high cell
.8a7b	10 17		bpl $8a94	                bpl _done       ; positive, we get off light
.8a7d	a0 00		ldy #$00	                ldy #0
.8a7f	38		sec		                sec
.8a80	98		tya		                tya
.8a81	f5 02		sbc $02,x	                sbc 2,x         ; LSB of low cell
.8a83	95 02		sta $02,x	                sta 2,x
.8a85	98		tya		                tya
.8a86	f5 03		sbc $03,x	                sbc 3,x         ; MSB of low cell
.8a88	95 03		sta $03,x	                sta 3,x
.8a8a	98		tya		                tya
.8a8b	f5 00		sbc $00,x	                sbc 0,x         ; LSB of high cell
.8a8d	95 00		sta $00,x	                sta 0,x
.8a8f	98		tya		                tya
.8a90	f5 01		sbc $01,x	                sbc 1,x         ; MSB of high cell
.8a92	95 01		sta $01,x	                sta 1,x
.8a94					_done:
.8a94	60		rts		z_dabs:         rts
.8a95					xt_decimal:
.8a95	a9 0a		lda #$0a	                lda #10
.8a97	85 18		sta $18		                sta base
.8a99	64 19		stz $19		                stz base+1              ; paranoid
.8a9b	60		rts		z_decimal:      rts
.8a9c					xt_defer:
.8a9c	20 59 89	jsr $8959	                jsr xt_create
.8a9f	a5 00		lda $00		                lda cp          ; LSB
.8aa1	38		sec		                sec
.8aa2	e9 02		sbc #$02	                sbc #2
.8aa4	85 24		sta $24		                sta tmp1
.8aa6	a5 01		lda $01		                lda cp+1        ; MSB
.8aa8	e9 00		sbc #$00	                sbc #0          ; we only care about the borrow
.8aaa	85 25		sta $25		                sta tmp1+1
.8aac	a0 00		ldy #$00	                ldy #0
.8aae	a9 bb		lda #$bb	                lda #<dodefer   ; LSB
.8ab0	91 24		sta ($24),y	                sta (tmp1),y
.8ab2	c8		iny		                iny
.8ab3	a9 d4		lda #$d4	                lda #>dodefer   ; MSB
.8ab5	91 24		sta ($24),y	                sta (tmp1),y
.8ab7	a9 cf		lda #$cf	                lda #<defer_error
.8ab9	92 00		sta ($00)	                sta (cp)
.8abb	e6 00		inc $00		                inc cp
.8abd	d0 02		bne $8ac1	                bne +
.8abf	e6 01		inc $01		                inc cp+1
.8ac1					+
.8ac1	a9 d4		lda #$d4	                lda #>defer_error
.8ac3	92 00		sta ($00)	                sta (cp)
.8ac5	e6 00		inc $00		                inc cp
.8ac7	d0 02		bne $8acb	                bne +
.8ac9	e6 01		inc $01		                inc cp+1
.8acb					+
.8acb	20 21 89	jsr $8921	                jsr adjust_z    ; adjust header to correct length
.8ace	60		rts		z_defer:        rts
.8acf					xt_defer_fetch:
.8acf	20 09 a2	jsr $a209	                jsr xt_to_body
.8ad2	20 70 8f	jsr $8f70	                jsr xt_fetch
.8ad5	60		rts		z_defer_fetch:  rts
.8ad6					xt_defer_store:
.8ad6	20 09 a2	jsr $a209	                jsr xt_to_body
.8ad9	20 09 a1	jsr $a109	                jsr xt_store
.8adc	60		rts		z_defer_store:  rts
.8add					xt_definitions:
.8add	a0 1f		ldy #$1f	                ldy #search_order_offset    ; Transfer byte variable
.8adf	b1 1e		lda ($1e),y	                lda (up),y                  ; SEARCH_ORDER[0] to
.8ae1	a0 04		ldy #$04	                ldy #current_offset         ; byte variable CURRENT.
.8ae3	91 1e		sta ($1e),y	                sta (up),y
.8ae5	60		rts		z_definitions:  rts
.8ae6					xt_depth:
.8ae6	a9 78		lda #$78	                lda #dsp0
.8ae8	86 2a		stx $2a		                stx tmpdsp
.8aea	38		sec		                sec
.8aeb	e5 2a		sbc $2a		                sbc tmpdsp
.8aed	4a		lsr a		                lsr
.8aee	ca		dex		                dex
.8aef	ca		dex		                dex
.8af0	95 00		sta $00,x	                sta 0,x
.8af2	74 01		stz $01,x	                stz 1,x
.8af4	60		rts		z_depth:        rts
.8af5					xt_digit_question:
.8af5	20 eb d5	jsr $d5eb	                jsr underflow_1
.8af8	ca		dex		                dex
.8af9	ca		dex		                dex
.8afa	74 00		stz $00,x	                stz 0,x                 ; default flag is failure
.8afc	74 01		stz $01,x	                stz 1,x
.8afe	74 03		stz $03,x	                stz 3,x                 ; paranoid
.8b00	b5 02		lda $02,x	                lda 2,x
.8b02	c9 30		cmp #$30	                cmp #'0'
.8b04	90 23		bcc $8b29	                bcc _done               ; failure flag already set
.8b06	c9 3a		cmp #$3a	                cmp #'9'+1               ; this is actually ":"
.8b08	90 12		bcc $8b1c	                bcc _checkbase
.8b0a	c9 41		cmp #$41	                cmp #'A'
.8b0c	90 1b		bcc $8b29	                bcc _done               ; failure flag is already set
.8b0e	c9 61		cmp #$61	                cmp #'a'
.8b10	90 07		bcc $8b19	                bcc _case_done          ; not lower case, too low
.8b12	c9 7b		cmp #$7b	                cmp #'z'+1
.8b14	b0 03		bcs $8b19	                bcs _case_done          ; not lower case, too high
.8b16	18		clc		                clc                     ; just right
.8b17	69 e0		adc #$e0	                adc #$e0                ; offset to upper case (wraps)
.8b19					_case_done:
.8b19	38		sec		                sec
.8b1a	e9 07		sbc #$07	                sbc #7                  ; fall through to _checkbase
.8b1c					_checkbase:
.8b1c	38		sec		                sec
.8b1d	e9 30		sbc #$30	                sbc #'0'                 ; this is also the conversion step
.8b1f	c5 18		cmp $18		                cmp base
.8b21	b0 06		bcs $8b29	                bcs _done               ; already have false flag
.8b23	95 02		sta $02,x	                sta 2,x                 ; put number in NOS
.8b25	d6 00		dec $00,x	                dec 0,x                 ; set success flag
.8b27	d6 01		dec $01,x	                dec 1,x
.8b29					_done:
.8b29					z_digit_question:
.8b29	60		rts		                rts
.8b2a					xt_disasm:
.8b2a	20 f0 d5	jsr $d5f0	                jsr underflow_2
.8b2d	20 52 ac	jsr $ac52	                jsr disassembler
.8b30	60		rts		z_disasm:       rts
.8b31					xt_dnegate:
.8b31	20 f0 d5	jsr $d5f0	                jsr underflow_2 ; double number
.8b34	a0 00		ldy #$00	     		ldy #0
.8b36	38		sec		                sec
.8b37	98		tya		                tya
.8b38	f5 02		sbc $02,x	                sbc 2,x         ; LSB of low cell
.8b3a	95 02		sta $02,x	                sta 2,x
.8b3c	98		tya		                tya
.8b3d	f5 03		sbc $03,x	                sbc 3,x         ; MSB of low cell
.8b3f	95 03		sta $03,x	                sta 3,x
.8b41	98		tya		                tya
.8b42	f5 00		sbc $00,x	                sbc 0,x         ; LSB of high cell
.8b44	95 00		sta $00,x	                sta 0,x
.8b46	98		tya		                tya
.8b47	f5 01		sbc $01,x	                sbc 1,x         ; MSB of high cell
.8b49	95 01		sta $01,x	                sta 1,x
.8b4b	60		rts		z_dnegate:      rts
.8b4c					xt_question_do:
.8b4c	a9 ff		lda #$ff	                lda #$ff                ; -1 is ?DO, jump to common code
.8b4e	85 24		sta $24		                sta tmp1
.8b50	80 02		bra $8b54	                bra do_common           ; skip flag for DO
.8b52					xt_do:
.8b52	64 24		stz $24		                stz tmp1                ; 0 is DO, drop through to DO_COMMON
.8b54					do_common:
.8b54	ca		dex		                dex
.8b55	ca		dex		                dex
.8b56	a5 00		lda $00		                lda cp
.8b58	95 00		sta $00,x	                sta 0,x                 ; LSB
.8b5a	a5 01		lda $01		                lda cp+1
.8b5c	95 01		sta $01,x	                sta 1,x                 ; MSB   ( limit start here )
.8b5e	a9 05		lda #$05	                lda #5                  ; we don't really care about the value,
.8b60	a8		tay		                tay                     ; so we use 5 to be tricky
.8b61					_loop:
.8b61	91 00		sta ($00),y	                sta (CP),y
.8b63	88		dey		                dey
.8b64	10 fb		bpl $8b61	                bpl _loop
.8b66	1a		inc a		                ina             ; we used 5 as a dummy value, this is why
.8b67	18		clc		                clc
.8b68	65 00		adc $00		                adc CP
.8b6a	85 00		sta $00		                sta CP
.8b6c	90 02		bcc $8b70	                bcc +
.8b6e	e6 01		inc $01		                inc CP+1
.8b70					+
.8b70	a5 24		lda $24		                lda tmp1
.8b72	f0 17		beq $8b8b	                beq _compile_do
.8b74	a0 14		ldy #$14	                ldy #question_do_runtime_end-question_do_runtime
.8b76	5a		phy		                phy             ; save counter to calculate new CP
.8b77					-
.8b77	b9 d1 8b	lda $8bd1,y	                lda question_do_runtime,y
.8b7a	91 00		sta ($00),y	                sta (cp),y
.8b7c	88		dey		                dey
.8b7d	10 f8		bpl $8b77	                bpl -
.8b7f	68		pla		                pla             ; retrieve counter
.8b80	18		clc		                clc
.8b81	65 00		adc $00		                adc cp
.8b83	85 00		sta $00		                sta cp
.8b85	a5 01		lda $01		                lda cp+1
.8b87	69 00		adc #$00	                adc #0          ; only care about carry
.8b89	85 01		sta $01		                sta cp+1        ; fall through to _compile_do
.8b8b					_compile_do:
.8b8b	a0 24		ldy #$24	                ldy #do_runtime_end-do_runtime  ; counter
.8b8d	5a		phy		                phy             ; save counter to calculate new CP
.8b8e					-
.8b8e	b9 ad 8b	lda $8bad,y	                lda do_runtime,y
.8b91	91 00		sta ($00),y	                sta (cp),y
.8b93	88		dey		                dey
.8b94	10 f8		bpl $8b8e	                bpl -
.8b96	68		pla		                pla             ; retrieve counter
.8b97	18		clc		                clc
.8b98	65 00		adc $00		                adc cp
.8b9a	85 00		sta $00		                sta cp
.8b9c	a5 01		lda $01		                lda cp+1
.8b9e	69 00		adc #$00	                adc #0          ; only care about carry
.8ba0	85 01		sta $01		                sta cp+1
.8ba2	ca		dex		                dex
.8ba3	ca		dex		                dex
.8ba4	a5 00		lda $00		                lda CP          ; LSB
.8ba6	95 00		sta $00,x	                sta 0,x
.8ba8	a5 01		lda $01		                lda CP+1        ; MSB
.8baa	95 01		sta $01,x	                sta 1,x
.8bac					z_question_do:
.8bac	60		rts		z_do:           rts
.8bad					do_runtime:
.8bad	38		sec		                sec
.8bae	a9 00		lda #$00	                lda #0
.8bb0	f5 02		sbc $02,x	                sbc 2,x         ; LSB of limit
.8bb2	95 02		sta $02,x	                sta 2,x         ; save FUFA for later use
.8bb4	a9 80		lda #$80	                lda #$80
.8bb6	f5 03		sbc $03,x	                sbc 3,x         ; MSB of limit
.8bb8	95 03		sta $03,x	                sta 3,x         ; save FUFA for later use
.8bba	48		pha		                pha             ; FUFA replaces limit on R stack
.8bbb	b5 02		lda $02,x	                lda 2,x         ; LSB of limit
.8bbd	48		pha		                pha
.8bbe	18		clc		                clc
.8bbf	b5 00		lda $00,x	                lda 0,x         ; LSB of original index
.8bc1	75 02		adc $02,x	                adc 2,x         ; add LSB of FUFA
.8bc3	95 00		sta $00,x	                sta 0,x
.8bc5	b5 01		lda $01,x	                lda 1,x         ; MSB of orginal index
.8bc7	75 03		adc $03,x	                adc 3,x         ; add MSB of FUFA
.8bc9	48		pha		                pha
.8bca	b5 00		lda $00,x	                lda 0,x         ; LSB of index
.8bcc	48		pha		                pha
.8bcd	e8		inx		                inx
.8bce	e8		inx		                inx
.8bcf	e8		inx		                inx
.8bd0	e8		inx		                inx             ; no RTS because this is copied into code
.8bd1					do_runtime_end:
.8bd1					question_do_runtime:
.8bd1	20 34 a3	jsr $a334	                jsr xt_two_dup          ; ( n1 n2 n1 n2 )
.8bd4	20 be 8e	jsr $8ebe	                jsr xt_equal            ; ( -- n1 n2 f )
.8bd7	b5 00		lda $00,x	                lda 0,x
.8bd9	15 01		ora $01,x	                ora 1,x
.8bdb	f0 06		beq $8be3	                beq _do_do
.8bdd	8a		txa		                txa
.8bde	18		clc		                clc
.8bdf	69 06		adc #$06	                adc #6
.8be1	aa		tax		                tax
.8be2	60		rts		                rts
.8be3					_do_do:
.8be3	e8		inx		                inx             ; clear flag from EQUAL off stack
.8be4	e8		inx		                inx             ; no RTS because this is copied into code
.8be5					question_do_runtime_end:
.8be5					xt_does:
.8be5	a0 8b		ldy #$8b	                ldy #>does_runtime
.8be7	a9 f4		lda #$f4	                lda #<does_runtime
.8be9	20 8e d4	jsr $d48e	                jsr cmpl_subroutine
.8bec	a0 d4		ldy #$d4	                ldy #>dodoes
.8bee	a9 d4		lda #$d4	                lda #<dodoes
.8bf0	20 8e d4	jsr $d48e	                jsr cmpl_subroutine
.8bf3	60		rts		z_does:         rts
.8bf4					does_runtime:
.8bf4	7a		ply		                ply             ; LSB
.8bf5	68		pla		                pla             ; MSB
.8bf6	c8		iny		                iny
.8bf7	d0 01		bne $8bfa	                bne +
.8bf9	1a		inc a		                ina
.8bfa					+
.8bfa	84 24		sty $24		                sty tmp1
.8bfc	85 25		sta $25		                sta tmp1+1
.8bfe	20 2d d5	jsr $d52d	                jsr current_to_dp   ; Grab the DP from the CURRENT wordlist.
.8c01	a5 02		lda $02		                lda dp
.8c03	18		clc		                clc
.8c04	69 04		adc #$04	                adc #4
.8c06	85 26		sta $26		                sta tmp2
.8c08	a5 03		lda $03		                lda dp+1
.8c0a	69 00		adc #$00	                adc #0          ; we only care about the carry
.8c0c	85 27		sta $27		                sta tmp2+1
.8c0e	b2 26		lda ($26)	                lda (tmp2)
.8c10	18		clc		                clc
.8c11	69 01		adc #$01	                adc #1
.8c13	85 28		sta $28		                sta tmp3
.8c15	a0 01		ldy #$01	                ldy #1
.8c17	b1 26		lda ($26),y	                lda (tmp2),y
.8c19	69 00		adc #$00	                adc #0          ; we only care about the carry
.8c1b	85 29		sta $29		                sta tmp3+1
.8c1d	a5 24		lda $24		                lda tmp1        ; LSB
.8c1f	92 28		sta ($28)	                sta (tmp3)
.8c21	a5 25		lda $25		                lda tmp1+1
.8c23	91 28		sta ($28),y	                sta (tmp3),y    ; Y is still 1
.8c25	60		rts		                rts
.8c26					xt_dot:
.8c26	20 eb d5	jsr $d5eb	                jsr underflow_1
.8c29	20 9f 8d	jsr $8d9f	                jsr xt_dup                      ; ( n n )
.8c2c	20 39 81	jsr $8139	                jsr xt_abs                      ; ( n u )
.8c2f	20 23 a7	jsr $a723	                jsr xt_zero                     ; ( n u 0 )
.8c32	20 4a 93	jsr $934a	                jsr xt_less_number_sign         ; ( n u 0 )
.8c35	20 60 97	jsr $9760	                jsr xt_number_sign_s            ; ( n ud )
.8c38	20 d9 9a	jsr $9ad9	                jsr xt_rot                      ; ( ud n )
.8c3b	20 69 9f	jsr $9f69	                jsr xt_sign                     ; ( ud )
.8c3e	20 3e 97	jsr $973e	                jsr xt_number_sign_greater      ; ( addr u )
.8c41	20 7f a4	jsr $a47f	                jsr xt_type
.8c44	20 a0 a0	jsr $a0a0	                jsr xt_space
.8c47	60		rts		z_dot:          rts
.8c48					xt_dot_paren:
.8c48	ca		dex		                dex
.8c49	ca		dex		                dex
.8c4a	a9 29		lda #$29	                lda #41     ; Right parenthesis
.8c4c	95 00		sta $00,x	                sta 0,x
.8c4e	74 01		stz $01,x	                stz 1,x
.8c50	20 bc 98	jsr $98bc	                jsr xt_parse
.8c53	20 7f a4	jsr $a47f	                jsr xt_type
.8c56	60		rts		z_dot_paren:    rts
.8c57					xt_dot_quote:
.8c57	20 d1 9c	jsr $9cd1	                jsr xt_s_quote
.8c5a	a0 a4		ldy #$a4	                ldy #>xt_type
.8c5c	a9 7f		lda #$7f	                lda #<xt_type
.8c5e	20 8e d4	jsr $d48e	                jsr cmpl_subroutine
.8c61	60		rts		z_dot_quote:    rts
.8c62					xt_dot_r:
.8c62	20 f0 d5	jsr $d5f0	                jsr underflow_2
.8c65	20 ec a2	jsr $a2ec	                jsr xt_to_r
.8c68	20 9f 8d	jsr $8d9f	                jsr xt_dup
.8c6b	20 39 81	jsr $8139	                jsr xt_abs
.8c6e	20 23 a7	jsr $a723	                jsr xt_zero
.8c71	20 4a 93	jsr $934a	                jsr xt_less_number_sign
.8c74	20 60 97	jsr $9760	                jsr xt_number_sign_s
.8c77	20 d9 9a	jsr $9ad9	                jsr xt_rot
.8c7a	20 69 9f	jsr $9f69	                jsr xt_sign
.8c7d	20 3e 97	jsr $973e	                jsr xt_number_sign_greater
.8c80	20 14 9a	jsr $9a14	                jsr xt_r_from
.8c83	20 15 98	jsr $9815	                jsr xt_over
.8c86	20 40 95	jsr $9540	                jsr xt_minus
.8c89	20 a6 a0	jsr $a0a6	                jsr xt_spaces
.8c8c	20 7f a4	jsr $a47f	                jsr xt_type
.8c8f	60		rts		z_dot_r:        rts
.8c90					xt_dot_s:
.8c90	20 e6 8a	jsr $8ae6	                jsr xt_depth    ; ( -- u )
.8c93	a9 3c		lda #$3c	                lda #$3c        ; ASCII for "<"
.8c95	20 e6 8d	jsr $8de6	                jsr emit_a
.8c98	b5 00		lda $00,x	                lda 0,x
.8c9a	48		pha		                pha
.8c9b	ca		dex		                dex             ; DUP
.8c9c	ca		dex		                dex
.8c9d	95 00		sta $00,x	                sta 0,x
.8c9f	74 01		stz $01,x	                stz 1,x
.8ca1	20 37 d6	jsr $d637	                jsr print_u
.8ca4	a9 3e		lda #$3e	                lda #$3e        ; ASCII for ">"
.8ca6	20 e6 8d	jsr $8de6	                jsr emit_a
.8ca9	a9 20		lda #$20	                lda #AscSP      ; ASCII for SPACE
.8cab	20 e6 8d	jsr $8de6	                jsr emit_a
.8cae	e8		inx		                inx
.8caf	e8		inx		                inx
.8cb0	e0 78		cpx #$78	                cpx #dsp0
.8cb2	f0 1e		beq $8cd2	                beq _done
.8cb4					_have_stack:
.8cb4	7a		ply		                ply
.8cb5	a9 77		lda #$77	                lda #dsp0-1     ; go up one to avoid garbage
.8cb7	85 28		sta $28		                sta tmp3
.8cb9	64 29		stz $29		                stz tmp3+1      ; must be zero page on the 65c02
.8cbb					_loop:
.8cbb	ca		dex		                dex
.8cbc	ca		dex		                dex
.8cbd	b2 28		lda ($28)	                lda (tmp3)
.8cbf	95 01		sta $01,x	                sta 1,x
.8cc1	c6 28		dec $28		                dec tmp3
.8cc3	b2 28		lda ($28)	                lda (tmp3)
.8cc5	95 00		sta $00,x	                sta 0,x
.8cc7	c6 28		dec $28		                dec tmp3
.8cc9	5a		phy		                phy
.8cca	20 26 8c	jsr $8c26	                jsr xt_dot
.8ccd	7a		ply		                ply
.8cce	88		dey		                dey
.8ccf	d0 ea		bne $8cbb	                bne _loop
.8cd1	48		pha		                pha             ; dummy to balance stack
.8cd2					_done:
.8cd2	68		pla		                pla
.8cd3	60		rts		z_dot_s:        rts
.8cd4					xt_d_dot:
.8cd4	20 f0 d5	jsr $d5f0	                jsr underflow_2
.8cd7	20 09 a3	jsr $a309	                jsr xt_tuck
.8cda	20 76 8a	jsr $8a76	                jsr xt_dabs
.8cdd	20 4a 93	jsr $934a	                jsr xt_less_number_sign
.8ce0	20 60 97	jsr $9760	                jsr xt_number_sign_s
.8ce3	20 d9 9a	jsr $9ad9	                jsr xt_rot
.8ce6	20 69 9f	jsr $9f69	                jsr xt_sign
.8ce9	20 3e 97	jsr $973e	                jsr xt_number_sign_greater
.8cec	20 7f a4	jsr $a47f	                jsr xt_type
.8cef	20 a0 a0	jsr $a0a0	                jsr xt_space
.8cf2	60		rts		z_d_dot:        rts
.8cf3					xt_d_dot_r:
.8cf3	20 f5 d5	jsr $d5f5	                jsr underflow_3
.8cf6	20 ec a2	jsr $a2ec	                jsr xt_to_r
.8cf9	20 09 a3	jsr $a309	                jsr xt_tuck
.8cfc	20 76 8a	jsr $8a76	                jsr xt_dabs
.8cff	20 4a 93	jsr $934a	                jsr xt_less_number_sign
.8d02	20 60 97	jsr $9760	                jsr xt_number_sign_s
.8d05	20 d9 9a	jsr $9ad9	                jsr xt_rot
.8d08	20 69 9f	jsr $9f69	                jsr xt_sign
.8d0b	20 3e 97	jsr $973e	                jsr xt_number_sign_greater
.8d0e	20 14 9a	jsr $9a14	                jsr xt_r_from
.8d11	20 15 98	jsr $9815	                jsr xt_over
.8d14	20 40 95	jsr $9540	                jsr xt_minus
.8d17	20 a6 a0	jsr $a0a6	                jsr xt_spaces
.8d1a	20 7f a4	jsr $a47f	                jsr xt_type
.8d1d	60		rts		z_d_dot_r:      rts
.8d1e					xt_drop:
.8d1e	20 eb d5	jsr $d5eb	                jsr underflow_1
.8d21	e8		inx		                inx
.8d22	e8		inx		                inx
.8d23	60		rts		z_drop:         rts
.8d24					xt_dump:
.8d24	20 f0 d5	jsr $d5f0	                jsr underflow_2
.8d27					_row:
.8d27	a0 10		ldy #$10	                ldy #16
.8d29	64 26		stz $26		                stz tmp2
.8d2b	20 53 89	jsr $8953	                jsr xt_cr
.8d2e	b5 03		lda $03,x	                lda 3,x
.8d30	20 fb d4	jsr $d4fb	                jsr byte_to_ascii
.8d33	b5 02		lda $02,x	                lda 2,x
.8d35	20 fb d4	jsr $d4fb	                jsr byte_to_ascii
.8d38	20 a0 a0	jsr $a0a0	                jsr xt_space
.8d3b	20 a0 a0	jsr $a0a0	                jsr xt_space
.8d3e					_loop:
.8d3e	b5 00		lda $00,x	                lda 0,x
.8d40	15 01		ora $01,x	                ora 1,x
.8d42	f0 39		beq $8d7d	                beq _all_printed
.8d44	a1 02		lda ($02,x)	                lda (2,x)
.8d46	48		pha		                pha                     ; byte_to_ascii destroys A
.8d47	20 fb d4	jsr $d4fb	                jsr byte_to_ascii
.8d4a	20 a0 a0	jsr $a0a0	                jsr xt_space
.8d4d	68		pla		                pla
.8d4e	20 d1 d5	jsr $d5d1	                jsr is_printable
.8d51	b0 02		bcs $8d55	                bcs _printable
.8d53	a9 2e		lda #$2e	                lda #'.'                 ; Print dot if not printable
.8d55					_printable:
.8d55	5a		phy		                phy                     ; save counter
.8d56	a4 26		ldy $26		                ldy tmp2
.8d58	91 00		sta ($00),y	                sta (cp),y
.8d5a	e6 26		inc $26		                inc tmp2
.8d5c	7a		ply		                ply
.8d5d	c0 09		cpy #$09	                cpy #9
.8d5f	d0 03		bne $8d64	                bne _next_char
.8d61	20 a0 a0	jsr $a0a0	                jsr xt_space
.8d64					_next_char:
.8d64	f6 02		inc $02,x	                inc 2,x
.8d66	d0 02		bne $8d6a	                bne _counter
.8d68	f6 03		inc $03,x	                inc 3,x
.8d6a					_counter:
.8d6a	b5 00		lda $00,x	                lda 0,x
.8d6c	d0 02		bne $8d70	                bne +
.8d6e	d6 01		dec $01,x	                dec 1,x
.8d70					+
.8d70	d6 00		dec $00,x	                dec 0,x
.8d72	88		dey		                dey
.8d73	d0 c9		bne $8d3e	                bne _loop               ; next byte
.8d75	20 a0 a0	jsr $a0a0	                jsr xt_space
.8d78	20 8b 8d	jsr $8d8b	                jsr dump_print_ascii
.8d7b	80 aa		bra $8d27	                bra _row                ; new row
.8d7d					_all_printed:
.8d7d	a5 26		lda $26		                lda tmp2
.8d7f	f0 06		beq $8d87	                beq _done
.8d81	20 a0 a0	jsr $a0a0	                jsr xt_space
.8d84	20 8b 8d	jsr $8d8b	                jsr dump_print_ascii
.8d87					_done:
.8d87	20 2c a3	jsr $a32c	                jsr xt_two_drop         ; one byte less than 4x INX
.8d8a	60		rts		z_dump:         rts
.8d8b					dump_print_ascii:
.8d8b	a0 00		ldy #$00	                ldy #0
.8d8d					_ascii_loop:
.8d8d	b1 00		lda ($00),y	                lda (cp),y
.8d8f	20 e6 8d	jsr $8de6	                jsr emit_a
.8d92	c8		iny		                iny
.8d93	c0 08		cpy #$08	                cpy #8
.8d95	d0 03		bne $8d9a	                bne +
.8d97	20 a0 a0	jsr $a0a0	                jsr xt_space
.8d9a					+
.8d9a	c6 26		dec $26		                dec tmp2
.8d9c	d0 ef		bne $8d8d	                bne _ascii_loop
.8d9e	60		rts		                rts
.8d9f					xt_dup:
.8d9f	20 eb d5	jsr $d5eb	                jsr underflow_1
.8da2	ca		dex		                dex
.8da3	ca		dex		                dex
.8da4	b5 02		lda $02,x	                lda 2,x         ; LSB
.8da6	95 00		sta $00,x	                sta 0,x
.8da8	b5 03		lda $03,x	                lda 3,x         ; MSB
.8daa	95 01		sta $01,x	                sta 1,x
.8dac	60		rts		z_dup:          rts
.8dad					xt_ed:
.8dad	20 90 b3	jsr $b390	                jsr ed6502      ; kept in separate file
.8db0	60		rts		z_ed:           rts
.8db1					xt_else:
.8db1					xt_endof:
.8db1	a0 8d		ldy #$8d	                ldy #>branch_runtime
.8db3	a9 cb		lda #$cb	                lda #<branch_runtime
.8db5	20 8e d4	jsr $d48e	                jsr cmpl_subroutine
.8db8	20 62 91	jsr $9162	                jsr xt_here
.8dbb	20 23 a7	jsr $a723	                jsr xt_zero
.8dbe	20 5e 87	jsr $875e	                jsr xt_comma
.8dc1	20 62 91	jsr $9162	                jsr xt_here
.8dc4	20 d9 9a	jsr $9ad9	                jsr xt_rot
.8dc7	20 09 a1	jsr $a109	                jsr xt_store
.8dca					z_else:
.8dca					z_endof:
.8dca	60		rts		                rts
.8dcb					branch_runtime:
.8dcb	68		pla		                pla
.8dcc	85 22		sta $22		                sta tmpbranch
.8dce	68		pla		                pla
.8dcf	85 23		sta $23		                sta tmpbranch+1
.8dd1	a0 01		ldy #$01	                ldy #1
.8dd3	b1 22		lda ($22),y	                lda (tmpbranch),y  ; LSB
.8dd5	85 24		sta $24		                sta tmp1
.8dd7	c8		iny		                iny
.8dd8	b1 22		lda ($22),y	                lda (tmpbranch),y  ; MSB
.8dda	85 25		sta $25		                sta tmp1+1
.8ddc	6c 24 00	jmp ($0024)	                jmp (tmp1)
.8ddf					xt_emit:
.8ddf	20 eb d5	jsr $d5eb	                jsr underflow_1
.8de2	b5 00		lda $00,x	                lda 0,x
.8de4	e8		inx		                inx
.8de5	e8		inx		                inx
.8de6					emit_a:
.8de6	6c 10 00	jmp ($0010)	                jmp (output)            ; JSR/RTS
.8de9					z_emit:
.8de9					xt_empty_buffers:
.8de9	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.8deb	a9 00		lda #$00	                lda #0
.8ded	91 1e		sta ($1e),y	                sta (up),y      ; Only LSB is used.
.8def					z_empty_buffers:
.8def	60		rts		                rts
.8df0					xt_endcase:
.8df0	a0 8d		ldy #$8d	                ldy #>xt_drop
.8df2	a9 1e		lda #$1e	                lda #<xt_drop
.8df4	20 8e d4	jsr $d48e	                jsr cmpl_subroutine
.8df7					_endcase_loop:
.8df7	b5 00		lda $00,x	                lda 0,x
.8df9	15 01		ora $01,x	                ora 1,x
.8dfb	f0 05		beq $8e02	                beq _done
.8dfd	20 3e a1	jsr $a13e	                jsr xt_then
.8e00	80 f5		bra $8df7	                bra _endcase_loop
.8e02					_done:
.8e02	e8		inx		                inx
.8e03	e8		inx		                inx
.8e04	60		rts		z_endcase:      rts
.8e05					xt_environment_q:
.8e05	20 eb d5	jsr $d5eb	                jsr underflow_1
.8e08	a0 00		ldy #$00	                ldy #00                 ; counter for table
.8e0a	5a		phy		                phy
.8e0b					_table_loop:
.8e0b	20 34 a3	jsr $a334	                jsr xt_two_dup          ; ( addr u addr u ) 2DUP does not use Y
.8e0e	ca		dex		                dex
.8e0f	ca		dex		                dex                     ; ( addr u addr u ? )
.8e10	b9 82 8e	lda $8e82,y	                lda env_table_single,y
.8e13	95 00		sta $00,x	                sta 0,x
.8e15	c8		iny		                iny
.8e16	b9 82 8e	lda $8e82,y	                lda env_table_single,y
.8e19	95 01		sta $01,x	                sta 1,x                 ; ( addr u addr u addr-t )
.8e1b	c8		iny		                iny
.8e1c	15 00		ora $00,x	                ora 0,x
.8e1e	f0 4d		beq $8e6d	                beq _table_done
.8e20	5a		phy		                phy                     ; save Y, which is used by COUNT
.8e21	20 3f 89	jsr $893f	                jsr xt_count            ; ( addr u addr u addr-s u-s )
.8e24	20 78 87	jsr $8778	                jsr xt_compare          ; ( addr u f )
.8e27	7a		ply		                ply
.8e28	b5 00		lda $00,x	                lda 0,x
.8e2a	15 01		ora $01,x	                ora 1,x
.8e2c	f0 04		beq $8e32	                beq _got_result
.8e2e	e8		inx		                inx                     ; DROP, now ( addr u )
.8e2f	e8		inx		                inx
.8e30	80 d9		bra $8e0b	                bra _table_loop
.8e32					_got_result:
.8e32	e8		inx		                inx                     ; drop flag, now ( addr u )
.8e33	e8		inx		                inx
.8e34	88		dey		                dey                     ; go back to index we had
.8e35	88		dey		                dey
.8e36	68		pla		                pla
.8e37	d0 0d		bne $8e46	                bne _double_result
.8e39	b9 a0 8e	lda $8ea0,y	                lda env_results_single,y
.8e3c	95 02		sta $02,x	                sta 2,x
.8e3e	c8		iny		                iny
.8e3f	b9 a0 8e	lda $8ea0,y	                lda env_results_single,y
.8e42	95 03		sta $03,x	                sta 3,x                 ; ( res u )
.8e44	80 1f		bra $8e65	                bra _set_flag
.8e46					_double_result:
.8e46	ca		dex		                dex                     ; ( addr u ? )
.8e47	ca		dex		                dex
.8e48	98		tya		                tya
.8e49	38		sec		                sec
.8e4a	e9 18		sbc #$18	                sbc #24
.8e4c	0a		asl a		                asl
.8e4d	a8		tay		                tay
.8e4e	b9 b6 8e	lda $8eb6,y	                lda env_results_double,y
.8e51	95 02		sta $02,x	                sta 2,x
.8e53	c8		iny		                iny
.8e54	b9 b6 8e	lda $8eb6,y	                lda env_results_double,y
.8e57	95 03		sta $03,x	                sta 3,x                 ; ( res u ? )
.8e59	c8		iny		                iny
.8e5a	b9 b6 8e	lda $8eb6,y	                lda env_results_double,y
.8e5d	95 04		sta $04,x	                sta 4,x
.8e5f	c8		iny		                iny
.8e60	b9 b6 8e	lda $8eb6,y	                lda env_results_double,y
.8e63	95 05		sta $05,x	                sta 5,x                 ; ( res res ? )
.8e65					_set_flag:
.8e65	a9 ff		lda #$ff	                lda #$ff
.8e67	95 00		sta $00,x	                sta 0,x
.8e69	95 01		sta $01,x	                sta 1,x                 ; ( res f )
.8e6b	80 14		bra $8e81	                bra _done
.8e6d					_table_done:
.8e6d	68		pla		                pla
.8e6e	d0 09		bne $8e79	                bne _no_match
.8e70	1a		inc a		                ina
.8e71	48		pha		                pha
.8e72	8a		txa		                txa
.8e73	18		clc		                clc
.8e74	69 06		adc #$06	                adc #6                  ; skip six bytes
.8e76	aa		tax		                tax                     ; ( addr u )
.8e77	80 92		bra $8e0b	                bra _table_loop
.8e79					_no_match:
.8e79	8a		txa		                txa
.8e7a	18		clc		                clc
.8e7b	69 0a		adc #$0a	                adc #10
.8e7d	aa		tax		                tax                     ; ( addr ) - not ( 0 ) !
.8e7e	20 69 8f	jsr $8f69	                jsr xt_false
.8e81					_done:
.8e81					z_environment_q:
.8e81	60		rts		                rts
.8e82					env_table_single:
>8e82	0e d4 1e d4 24 d4 29 d4		        .word envs_cs, envs_hold, envs_pad, envs_aub, envs_floored
>8e8a	3b d4
>8e8c	43 d4 4c d4 52 d4 58 d4		        .word envs_max_char, envs_max_n, envs_max_u, envs_rsc
>8e94	6b d4 77 d4 00 00		        .word envs_sc, envs_wl, 0000
.8e9a					env_table_double:
>8e9a	81 d4 87 d4 00 00		        .word envs_max_d, envs_max_ud, 0000
.8ea0					env_results_single:
>8ea0	ff 7f				        .word $7FFF     ; /COUNTED-STRING
>8ea2	ff 00				        .word $00FF     ; /HOLD
>8ea4	54 00				        .word $0054     ; /PAD (this is 84 decimal)
>8ea6	08 00				        .word $0008     ; ADDRESS-UNIT-BITS (keep "$" to avoid octal!)
>8ea8	00 00				        .word 0000      ; FLOORED ("FALSE", we have symmetric)
>8eaa	ff 00				        .word $00FF     ; MAX-CHAR
>8eac	ff 7f				        .word $7FFF     ; MAX-N
>8eae	ff ff				        .word $FFFF     ; MAX-U
>8eb0	80 00				        .word $0080     ; RETURN-STACK-CELLS
>8eb2	20 00				        .word $0020     ; STACK-CELLS (from definitions.asm)
>8eb4	09 00				        .word $0009     ; WORDLISTS
.8eb6					env_results_double:
>8eb6	ff 7f ff ff			        .word $7FFF, $FFFF      ; MAX-D
>8eba	ff ff ff ff			        .word $FFFF, $FFFF      ; MAX-UD
.8ebe					xt_equal:
.8ebe	20 f0 d5	jsr $d5f0	                jsr underflow_2
.8ec1	b5 00		lda $00,x	                lda 0,x                 ; LSB
.8ec3	d5 02		cmp $02,x	                cmp 2,x
.8ec5	d0 0a		bne $8ed1	                bne _false
.8ec7	b5 01		lda $01,x	                lda 1,x                 ; MSB
.8ec9	d5 03		cmp $03,x	                cmp 3,x
.8ecb	d0 04		bne $8ed1	                bne _false
.8ecd	a9 ff		lda #$ff	                lda #$ff
.8ecf	80 02		bra $8ed3	                bra _done
.8ed1	a9 00		lda #$00	_false:         lda #0                  ; drop thru to done
.8ed3	95 02		sta $02,x	_done:          sta 2,x
.8ed5	95 03		sta $03,x	                sta 3,x
.8ed7	e8		inx		                inx
.8ed8	e8		inx		                inx
.8ed9	60		rts		z_equal:        rts
.8eda					xt_blank:
.8eda	ca		dex		                dex
.8edb	ca		dex		                dex
.8edc	a9 20		lda #$20	                lda #AscSP
.8ede	95 00		sta $00,x	                sta 0,x
.8ee0	74 01		stz $01,x	                stz 1,x
.8ee2	80 06		bra $8eea	                bra xt_fill     ; skip over code for ERASE
.8ee4					xt_erase:
.8ee4	ca		dex		                dex
.8ee5	ca		dex		                dex
.8ee6	74 00		stz $00,x	                stz 0,x
.8ee8	74 01		stz $01,x	                stz 1,x
.8eea					xt_fill:
.8eea	20 f5 d5	jsr $d5f5	                jsr underflow_3
.8eed	b5 04		lda $04,x	                lda 4,x         ; LSB
.8eef	85 24		sta $24		                sta tmp1
.8ef1	b5 05		lda $05,x	                lda 5,x
.8ef3	85 25		sta $25		                sta tmp1+1
.8ef5	b5 02		lda $02,x	                lda 2,x
.8ef7	85 26		sta $26		                sta tmp2
.8ef9	b5 03		lda $03,x	                lda 3,x
.8efb	85 27		sta $27		                sta tmp2+1
.8efd	b5 00		lda $00,x	                lda 0,x
.8eff	a8		tay		                tay
.8f00					_loop:
.8f00	a9 7f		lda #$7f	                lda #>ram_end           ; MSB
.8f02	c5 25		cmp $25		                cmp tmp1+1
.8f04	90 21		bcc $8f27	                bcc _done               ; RAM_END < TMP1, so leave
.8f06	d0 06		bne $8f0e	                bne _check_counter      ; RAM_END is not smaller and not equal
.8f08	a9 ff		lda #$ff	                lda #<ram_end           ; LSB, because MSBs were equal
.8f0a	c5 24		cmp $24		                cmp tmp1
.8f0c	90 19		bcc $8f27	                bcc _done               ; RAM_END < TMP1, so leave
.8f0e					_check_counter:
.8f0e	a5 26		lda $26		                lda tmp2
.8f10	05 27		ora $27		                ora tmp2+1
.8f12	f0 13		beq $8f27	                beq _done
.8f14	98		tya		                tya
.8f15	92 24		sta ($24)	                sta (tmp1)
.8f17	a5 26		lda $26		                lda tmp2
.8f19	d0 02		bne $8f1d	                bne +
.8f1b	c6 27		dec $27		                dec tmp2+1
.8f1d	c6 26		dec $26		+               dec tmp2
.8f1f	e6 24		inc $24		                inc tmp1
.8f21	d0 dd		bne $8f00	                bne _loop
.8f23	e6 25		inc $25		                inc tmp1+1
.8f25	80 d9		bra $8f00	                bra _loop
.8f27					_done:
.8f27	8a		txa		                txa
.8f28	18		clc		                clc
.8f29	69 06		adc #$06	                adc #6
.8f2b	aa		tax		                tax
.8f2c					z_blank:
.8f2c					z_erase:
.8f2c	60		rts		z_fill:         rts
.8f2d					xt_execute:
.8f2d	20 eb d5	jsr $d5eb	                jsr underflow_1
.8f30	20 34 8f	jsr $8f34	                jsr doexecute   ; do not combine to JMP (native coding)
.8f33	60		rts		z_execute:      rts
.8f34					doexecute:
.8f34	b5 00		lda $00,x	                lda 0,x
.8f36	85 0e		sta $0e		                sta ip
.8f38	b5 01		lda $01,x	                lda 1,x
.8f3a	85 0f		sta $0f		                sta ip+1
.8f3c	e8		inx		                inx
.8f3d	e8		inx		                inx
.8f3e	6c 0e 00	jmp ($000e)	                jmp (ip)
.8f41					xt_execute_parsing:
.8f41	20 f5 d5	jsr $d5f5	                jsr underflow_3
.8f44	20 52 92	jsr $9252	                jsr xt_input_to_r       ; save normal input for later
.8f47	20 5e 96	jsr $965e	                jsr xt_not_rote         ; -ROT ( xt addr u )
.8f4a	b5 00		lda $00,x	                lda 0,x                 ; TOS is new ciblen
.8f4c	85 0a		sta $0a		                sta ciblen
.8f4e	b5 01		lda $01,x	                lda 1,x
.8f50	85 0b		sta $0b		                sta ciblen+1
.8f52	b5 02		lda $02,x	                lda 2,x                 ; NOS is new cib
.8f54	85 08		sta $08		                sta cib
.8f56	b5 03		lda $03,x	                lda 3,x
.8f58	85 09		sta $09		                sta cib+1
.8f5a	64 0c		stz $0c		                stz toin                ; Set >IN to zero
.8f5c	64 0d		stz $0d		                stz toin+1
.8f5e	20 2c a3	jsr $a32c	                jsr xt_two_drop         ; 2DROP ( xt )
.8f61	20 2d 8f	jsr $8f2d	                jsr xt_execute
.8f64	20 25 9a	jsr $9a25	                jsr xt_r_to_input
.8f67					z_execute_parsing:
.8f67	60		rts		                rts
.8f68					xt_exit:
.8f68	60		rts		                rts             ; keep before z_exit
.8f69					z_exit:
.8f69					xt_false:
.8f69	ca		dex		                dex
.8f6a	ca		dex		                dex
.8f6b	74 00		stz $00,x	                stz 0,x
.8f6d	74 01		stz $01,x	                stz 1,x
.8f6f	60		rts		z_false:        rts
.8f70					xt_fetch:
.8f70	20 eb d5	jsr $d5eb	                jsr underflow_1
.8f73	a1 00		lda ($00,x)	                lda (0,x)               ; LSB
.8f75	a8		tay		                tay
.8f76	f6 00		inc $00,x	                inc 0,x
.8f78	d0 02		bne $8f7c	                bne +
.8f7a	f6 01		inc $01,x	                inc 1,x
.8f7c					+
.8f7c	a1 00		lda ($00,x)	                lda (0,x)               ; MSB
.8f7e	95 01		sta $01,x	                sta 1,x
.8f80	94 00		sty $00,x	                sty 0,x
.8f82	60		rts		z_fetch:        rts
.8f83					xt_find:
.8f83	20 eb d5	jsr $d5eb	                jsr underflow_1
.8f86	b5 01		lda $01,x	                lda 1,x                 ; MSB
.8f88	48		pha		                pha
.8f89	b5 00		lda $00,x	                lda 0,x                 ; LSB
.8f8b	48		pha		                pha
.8f8c	20 3f 89	jsr $893f	                jsr xt_count            ; ( caddr -- addr u )
.8f8f	20 cb 8f	jsr $8fcb	                jsr xt_find_name        ; ( addr u -- nt | 0 )
.8f92	b5 00		lda $00,x	                lda 0,x
.8f94	15 01		ora $01,x	                ora 1,x
.8f96	d0 0b		bne $8fa3	                bne _found_word
.8f98	20 69 8f	jsr $8f69	                jsr xt_false            ; ( 0 0 )
.8f9b	68		pla		                pla                     ; LSB of address
.8f9c	95 02		sta $02,x	                sta 2,x
.8f9e	68		pla		                pla
.8f9f	95 03		sta $03,x	                sta 3,x                 ; MSB of address
.8fa1	80 27		bra $8fca	                bra _done               ; ( addr 0 )
.8fa3					_found_word:
.8fa3	68		pla		                pla
.8fa4	68		pla		                pla
.8fa5	20 9f 8d	jsr $8d9f	                jsr xt_dup              ; ( nt nt )
.8fa8	20 d1 95	jsr $95d1	                jsr xt_name_to_int      ; ( nt xt )
.8fab	20 2a a1	jsr $a12a	                jsr xt_swap             ; ( xt nt )
.8fae	a0 00		ldy #$00	                ldy #0                  ; Prepare flag
.8fb0	f6 00		inc $00,x	                inc 0,x
.8fb2	d0 02		bne $8fb6	                bne +
.8fb4	f6 01		inc $01,x	                inc 1,x                 ; ( xt nt+1 )
.8fb6					+
.8fb6	a1 00		lda ($00,x)	                lda (0,x)               ; ( xt char )
.8fb8	29 04		and #$04	                and #IM
.8fba	d0 08		bne $8fc4	                bne _immediate          ; bit set, we're immediate
.8fbc	a9 ff		lda #$ff	                lda #$FF                ; We're not immediate, return -1
.8fbe	95 00		sta $00,x	                sta 0,x
.8fc0	95 01		sta $01,x	                sta 1,x
.8fc2	80 06		bra $8fca	                bra _done
.8fc4					_immediate:
.8fc4	a9 01		lda #$01	                lda #1                  ; We're immediate, return 1
.8fc6	95 00		sta $00,x	                sta 0,x
.8fc8	74 01		stz $01,x	                stz 1,x
.8fca					_done:
.8fca	60		rts		z_find:         rts
.8fcb					xt_find_name:
.8fcb	20 f0 d5	jsr $d5f0	                jsr underflow_2
.8fce	b5 00		lda $00,x	                lda 0,x
.8fd0	15 01		ora $01,x	                ora 1,x
.8fd2	d0 03		bne $8fd7	                bne _nonempty
.8fd4	4c 70 90	jmp $9070	                jmp _fail_done
.8fd7					_nonempty:
.8fd7	64 28		stz $28		                stz tmp3                ; Start at the beginning
.8fd9					_wordlist_loop:
.8fd9	a0 1e		ldy #$1e	                ldy #num_order_offset   ; Compare to byte variable #ORDER
.8fdb	a5 28		lda $28		                lda tmp3
.8fdd	d1 1e		cmp ($1e),y	                cmp (up),y              ; Check to see if we are done
.8fdf	d0 03		bne $8fe4	                bne _have_string
.8fe1	4c 70 90	jmp $9070	                jmp _fail_done
.8fe4					_have_string:
.8fe4	18		clc		                clc             ; SEARCH-ORDER is array of bytes.
.8fe5	69 1f		adc #$1f	                adc #search_order_offset
.8fe7	a8		tay		                tay
.8fe8	b1 1e		lda ($1e),y	                lda (up),y      ; Get the id byte, which is the offset
.8fea	0a		asl a		                asl                     ; Turn offset into cells offset.
.8feb	18		clc		                clc
.8fec	69 06		adc #$06	                adc #wordlists_offset
.8fee	a8		tay		                tay
.8fef	b1 1e		lda ($1e),y	                lda (up),y
.8ff1	85 24		sta $24		                sta tmp1
.8ff3	c8		iny		                iny
.8ff4	b1 1e		lda ($1e),y	                lda (up),y
.8ff6	85 25		sta $25		                sta tmp1+1
.8ff8	b5 02		lda $02,x	                lda 2,x                 ; Address of mystery string
.8ffa	85 26		sta $26		                sta tmp2
.8ffc	b5 03		lda $03,x	                lda 3,x
.8ffe	85 27		sta $27		                sta tmp2+1
.9000					_loop:
.9000	b2 24		lda ($24)	                lda (tmp1)
.9002	d5 00		cmp $00,x	                cmp 0,x
.9004	d0 54		bne $905a	                bne _next_entry
.9006					_compare_string:
.9006	b2 26		lda ($26)	                lda (tmp2)      ; first character of mystery string
.9008	c9 5b		cmp #$5b	                cmp #$5B        ; ASCII '[' (one past Z)
.900a	b0 07		bcs $9013	                bcs _compare_first
.900c	c9 41		cmp #$41	                cmp #$41        ; ASCII 'A'
.900e	90 03		bcc $9013	                bcc _compare_first
.9010	18		clc		                clc
.9011	69 20		adc #$20	                adc #$20
.9013					_compare_first:
.9013	a0 08		ldy #$08	                ldy #8          ; Offset in nt to name
.9015	d1 24		cmp ($24),y	                cmp (tmp1),y    ; first character of current word
.9017	d0 41		bne $905a	                bne _next_entry
.9019	b5 00		lda $00,x	                lda 0,x
.901b	3a		dec a		                dea
.901c	f0 2c		beq $904a	                beq _success
.901e	a5 24		lda $24		                lda tmp1
.9020	48		pha		                pha             ; Preserve tmp1 on the return stack.
.9021	18		clc		                clc
.9022	69 08		adc #$08	                adc #8
.9024	85 24		sta $24		                sta tmp1        ; Reusing tmp1 temporarily for string check.
.9026	a5 25		lda $25		                lda tmp1+1
.9028	48		pha		                pha             ; Preserve tmp1+1 on the return stack.
.9029	69 00		adc #$00	                adc #0          ; we only need the carry
.902b	85 25		sta $25		                sta tmp1+1
.902d	b4 00		ldy $00,x	                ldy 0,x         ; index is length of string minus 1
.902f	88		dey		                dey
.9030					_string_loop:
.9030	b1 26		lda ($26),y	                lda (tmp2),y    ; last char of mystery string
.9032	c9 5b		cmp #$5b	                cmp #$5B         ; ASCII '[' (one past Z)
.9034	b0 07		bcs $903d	                bcs _check_char
.9036	c9 41		cmp #$41	                cmp #$41        ; ASCII 'A'
.9038	90 03		bcc $903d	                bcc _check_char
.903a	18		clc		                clc
.903b	69 20		adc #$20	                adc #$20
.903d					_check_char:
.903d	d1 24		cmp ($24),y	                cmp (tmp1),y    ; last char of word we're testing against
.903f	d0 13		bne $9054	                bne _next_entry_tmp1
.9041	88		dey		                dey
.9042	d0 ec		bne $9030	                bne _string_loop
.9044					_success_tmp1:
.9044	68		pla		                pla             ; Restore tmp1 from the return stack.
.9045	85 25		sta $25		                sta tmp1+1
.9047	68		pla		                pla
.9048	85 24		sta $24		                sta tmp1
.904a					_success:
.904a	a5 24		lda $24		                lda tmp1
.904c	95 02		sta $02,x	                sta 2,x
.904e	a5 25		lda $25		                lda tmp1+1
.9050	95 03		sta $03,x	                sta 3,x
.9052	80 20		bra $9074	                bra _done
.9054					_next_entry_tmp1:
.9054	68		pla		                pla             ; Restore tmp1 from the return stack.
.9055	85 25		sta $25		                sta tmp1+1
.9057	68		pla		                pla
.9058	85 24		sta $24		                sta tmp1
.905a					_next_entry:
.905a	a0 02		ldy #$02	                ldy #2
.905c	b1 24		lda ($24),y	                lda (tmp1),y
.905e	48		pha		                pha
.905f	c8		iny		                iny
.9060	b1 24		lda ($24),y	                lda (tmp1),y
.9062	85 25		sta $25		                sta tmp1+1
.9064	68		pla		                pla
.9065	85 24		sta $24		                sta tmp1
.9067	05 25		ora $25		                ora tmp1+1
.9069	d0 95		bne $9000	                bne _loop
.906b	e6 28		inc $28		                inc tmp3
.906d	4c d9 8f	jmp $8fd9	                jmp _wordlist_loop
.9070					_fail_done:
.9070	74 02		stz $02,x	                stz 2,x         ; failure flag
.9072	74 03		stz $03,x	                stz 3,x
.9074					_done:
.9074	e8		inx		                inx
.9075	e8		inx		                inx
.9076	60		rts		z_find_name:    rts
.9077					xt_flush:
.9077	20 40 9e	jsr $9e40	                jsr xt_save_buffers
.907a	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.907c	a9 00		lda #$00	                lda #0
.907e	91 1e		sta ($1e),y	                sta (up),y      ; Only LSB is used.
.9080					z_flush:
.9080	60		rts		                rts
.9081					xt_fm_slash_mod:
.9081	20 f5 d5	jsr $d5f5	                jsr underflow_3
.9084	64 26		stz $26		                stz tmp2        ; default: n is positive
.9086	b5 01		lda $01,x	                lda 1,x         ; MSB of n1
.9088	10 0e		bpl $9098	                bpl _check_d
.908a	e6 26		inc $26		                inc tmp2        ; set flag to negative for n1
.908c	20 13 96	jsr $9613	                jsr xt_negate   ; NEGATE
.908f	20 ec a2	jsr $a2ec	                jsr xt_to_r     ; >R
.9092	20 31 8b	jsr $8b31	                jsr xt_dnegate  ; DNEGATE
.9095	20 14 9a	jsr $9a14	                jsr xt_r_from   ; R>
.9098					_check_d:
.9098	b5 03		lda $03,x	                lda 3,x         ; MSB of high word of d
.909a	10 0d		bpl $90a9	                bpl _multiply
.909c	18		clc		                clc
.909d	b5 00		lda $00,x	                lda 0,x         ; LSB of n1
.909f	75 02		adc $02,x	                adc 2,x         ; LSB of dh
.90a1	95 02		sta $02,x	                sta 2,x
.90a3	b5 01		lda $01,x	                lda 1,x         ; MSB of n1
.90a5	75 03		adc $03,x	                adc 3,x         ; MSB of dh
.90a7	95 03		sta $03,x	                sta 3,x
.90a9					_multiply:
.90a9	20 36 a5	jsr $a536	                jsr xt_um_slash_mod     ; ( d n1 -- rem n2 )
.90ac	a5 26		lda $26		                lda tmp2
.90ae	f0 07		beq $90b7	                beq _done
.90b0	e8		inx		                inx             ; pretend that we SWAP
.90b1	e8		inx		                inx
.90b2	20 13 96	jsr $9613	                jsr xt_negate
.90b5	ca		dex		                dex
.90b6	ca		dex		                dex
.90b7					_done:
.90b7	60		rts		z_fm_slash_mod: rts
.90b8					xt_forth:
.90b8	a0 1f		ldy #$1f	                ldy #search_order_offset
.90ba	a9 00		lda #$00	                lda #0          ; The WID for Forth is 0.
.90bc	91 1e		sta ($1e),y	                sta (up),y
.90be					z_forth:
.90be	60		rts		                rts
.90bf					load_evaluate:
.90bf	a9 ff		lda #$ff	                lda #$FF
.90c1	85 24		sta $24		                sta tmp1
.90c3	80 11		bra $90d6	                bra load_evaluate_start
.90c5					xt_evaluate:
.90c5	20 f0 d5	jsr $d5f0	                jsr underflow_2
.90c8	64 24		stz $24		                stz tmp1
.90ca	b5 00		lda $00,x	                lda 0,x
.90cc	15 01		ora $01,x	                ora 1,x
.90ce	d0 06		bne $90d6	                bne evaluate_got_work
.90d0	e8		inx		                inx
.90d1	e8		inx		                inx
.90d2	e8		inx		                inx
.90d3	e8		inx		                inx
.90d4	80 42		bra $9118	                bra evaluate_done
.90d6					load_evaluate_start:
.90d6					evaluate_got_work:
.90d6	a0 01		ldy #$01	                ldy #blk_offset+1
.90d8	b1 1e		lda ($1e),y	                lda (up),y
.90da	48		pha		                pha
.90db	88		dey		                dey
.90dc	b1 1e		lda ($1e),y	                lda (up),y
.90de	48		pha		                pha
.90df	a5 24		lda $24		                lda tmp1
.90e1	d0 05		bne $90e8	                bne _nozero
.90e3	91 1e		sta ($1e),y	                sta (up),y
.90e5	c8		iny		                iny
.90e6	91 1e		sta ($1e),y	                sta (up),y
.90e8					_nozero:
.90e8	20 52 92	jsr $9252	                jsr xt_input_to_r
.90eb	a9 ff		lda #$ff	                lda #$ff
.90ed	85 06		sta $06		                sta insrc
.90ef	85 07		sta $07		                sta insrc+1
.90f1	64 0c		stz $0c		                stz toin
.90f3	64 0d		stz $0d		                stz toin+1
.90f5	b5 00		lda $00,x	                lda 0,x
.90f7	85 0a		sta $0a		                sta ciblen
.90f9	b5 01		lda $01,x	                lda 1,x
.90fb	85 0b		sta $0b		                sta ciblen+1
.90fd	b5 02		lda $02,x	                lda 2,x
.90ff	85 08		sta $08		                sta cib
.9101	b5 03		lda $03,x	                lda 3,x
.9103	85 09		sta $09		                sta cib+1
.9105	e8		inx		                inx             ; A clean stack is a clean mind
.9106	e8		inx		                inx
.9107	e8		inx		                inx
.9108	e8		inx		                inx
.9109	20 53 d5	jsr $d553	                jsr interpret   ; ( -- )
.910c	20 25 9a	jsr $9a25	                jsr xt_r_to_input
.910f	a0 00		ldy #$00	                ldy #blk_offset
.9111	68		pla		                pla
.9112	91 1e		sta ($1e),y	                sta (up),y
.9114	c8		iny		                iny
.9115	68		pla		                pla
.9116	91 1e		sta ($1e),y	                sta (up),y
.9118					evaluate_done:
.9118	60		rts		z_evaluate:     rts
.9119					xt_get_current:
.9119	ca		dex		                dex
.911a	ca		dex		                dex
.911b	a0 04		ldy #$04	                ldy #current_offset
.911d	b1 1e		lda ($1e),y	                lda (up),y
.911f	95 00		sta $00,x	                sta 0,x         ; CURRENT is a byte variable
.9121	74 01		stz $01,x	                stz 1,x         ; so the MSB is zero.
.9123	60		rts		z_get_current:  rts
.9124					xt_get_order:
.9124	a0 1e		ldy #$1e	                ldy #num_order_offset
.9126	b1 1e		lda ($1e),y	                lda (up),y
.9128	85 24		sta $24		                sta tmp1
.912a	f0 16		beq $9142	                beq _done       ; If zero, there are no wordlists.
.912c					_loop:
.912c	c6 24		dec $24		                dec tmp1        ; Count down by bytes.
.912e	a9 1f		lda #$1f	                lda #search_order_offset
.9130	18		clc		                clc
.9131	65 24		adc $24		                adc tmp1
.9133	a8		tay		                tay
.9134	ca		dex		                dex
.9135	ca		dex		                dex
.9136	b1 1e		lda ($1e),y	                lda (up),y
.9138	95 00		sta $00,x	                sta 0,x         ; Search order array is bytes, so
.913a	74 01		stz $01,x	                stz 1,x         ; put a zero in the high byte.
.913c	a9 00		lda #$00	                lda #0
.913e	c5 24		cmp $24		                cmp tmp1
.9140	d0 ea		bne $912c	                bne _loop
.9142					_done:
.9142	ca		dex		                dex
.9143	ca		dex		                dex
.9144	a0 1e		ldy #$1e	                ldy #num_order_offset
.9146	b1 1e		lda ($1e),y	                lda (up),y
.9148	95 00		sta $00,x	                sta 0,x
.914a	74 01		stz $01,x	                stz 1,x         ; We only support 8 wordlists.
.914c	60		rts		z_get_order:    rts
.914d					xt_greater_than:
.914d	20 f0 d5	jsr $d5f0	                jsr underflow_2
.9150	a0 00		ldy #$00	                ldy #0          ; default false
.9152	20 12 d5	jsr $d512	                jsr compare_16bit
.9155	f0 03		beq $915a	                beq _false
.9157	10 01		bpl $915a	                bpl _false
.9159	88		dey		                dey
.915a					_false:
.915a	98		tya		                tya
.915b	e8		inx		                inx
.915c	e8		inx		                inx
.915d	95 00		sta $00,x	                sta 0,x
.915f	95 01		sta $01,x	                sta 1,x
.9161	60		rts		z_greater_than: rts
.9162					xt_here:
.9162					xt_asm_arrow:
.9162	ca		dex		                dex
.9163	ca		dex		                dex
.9164	a5 00		lda $00		                lda cp
.9166	95 00		sta $00,x	                sta 0,x
.9168	a5 01		lda $01		                lda cp+1
.916a	95 01		sta $01,x	                sta 1,x
.916c					z_asm_arrow:
.916c	60		rts		z_here:         rts
.916d					xt_hex:
.916d	a9 10		lda #$10	                lda #16
.916f	85 18		sta $18		                sta base
.9171	64 19		stz $19		                stz base+1              ; paranoid
.9173	60		rts		z_hex:          rts
.9174					xt_hexstore:
.9174	20 f5 d5	jsr $d5f5	                jsr underflow_3
.9177	20 9f 8d	jsr $8d9f	                jsr xt_dup              ; Save copy of original address
.917a	20 1e a4	jsr $a41e	                jsr xt_two_to_r         ; ( addr1 u1 ) ( R: addr2 addr2 )
.917d					_loop:
.917d	b5 00		lda $00,x	                lda 0,x
.917f	15 01		ora $01,x	                ora 1,x
.9181	f0 36		beq $91b9	                beq _done
.9183	20 3c 86	jsr $863c	                jsr xt_cleave           ; ( addr1 u1 addr3 u3 ) ( R: addr2 addr2 )
.9186	20 1e a4	jsr $a41e	                jsr xt_two_to_r
.9189	20 23 a7	jsr $a723	                jsr xt_zero
.918c	20 23 a7	jsr $a723	                jsr xt_zero
.918f	20 a4 a3	jsr $a3a4	                jsr xt_two_r_from       ; ( addr1 u1 0 0 addr3 u3 ) ( R: addr2 addr2 )
.9192	20 39 a2	jsr $a239	                jsr xt_to_number        ; ( addr1 u1 n n addr4 u4 ) ( R: addr2 addr2 )
.9195	b5 00		lda $00,x	                lda 0,x
.9197	15 01		ora $01,x	                ora 1,x
.9199	d0 17		bne $91b2	                bne _have_chars_left
.919b	20 2c a3	jsr $a32c	                jsr xt_two_drop         ; ( addr1 u1 n n ) ( R: addr2 addr2 )
.919e	20 70 8a	jsr $8a70	                jsr xt_d_to_s           ; ( addr1 u1 n ) ( R: addr2 addr2 )
.91a1	20 ff 99	jsr $99ff	                jsr xt_r_fetch          ; ( addr1 u1 n addr2 ) ( R: addr2 addr2 )
.91a4	20 05 86	jsr $8605	                jsr xt_c_store          ; ( addr1 u1 ) ( R: addr2 addr2 )
.91a7	20 14 9a	jsr $9a14	                jsr xt_r_from           ; R>
.91aa	20 9f 97	jsr $979f	                jsr xt_one_plus         ; 1+
.91ad	20 ec a2	jsr $a2ec	                jsr xt_to_r             ; >R ( addr1 u1 ) ( R: addr2+1 addr2 )
.91b0	80 cb		bra $917d	                bra _loop
.91b2					_have_chars_left:
.91b2	8a		txa		                txa
.91b3	18		clc		                clc
.91b4	69 08		adc #$08	                adc #8
.91b6	aa		tax		                tax
.91b7	80 c4		bra $917d	                bra _loop
.91b9					_done:
.91b9	e8		inx		                inx
.91ba	e8		inx		                inx
.91bb	e8		inx		                inx
.91bc	e8		inx		                inx                     ; 2DROP
.91bd	20 a4 a3	jsr $a3a4	                jsr xt_two_r_from       ; ( addr2+n addr2 )
.91c0	20 2a a1	jsr $a12a	                jsr xt_swap
.91c3	20 40 95	jsr $9540	                jsr xt_minus            ; ( n )
.91c6	60		rts		z_hexstore:     rts
.91c7					xt_hold:
.91c7	20 eb d5	jsr $d5eb	                jsr underflow_1
.91ca	a5 34		lda $34		                lda tohold
.91cc	d0 02		bne $91d0	                bne +
.91ce	c6 35		dec $35		                dec tohold+1
.91d0					+
.91d0	c6 34		dec $34		                dec tohold
.91d2	b5 00		lda $00,x	                lda 0,x
.91d4	92 34		sta ($34)	                sta (tohold)
.91d6	e8		inx		                inx
.91d7	e8		inx		                inx
.91d8	60		rts		z_hold:         rts
.91d9					xt_i:
.91d9	ca		dex		                dex
.91da	ca		dex		                dex
.91db	86 2a		stx $2a		                stx tmpdsp
.91dd	ba		tsx		                tsx
.91de	38		sec		                sec
.91df	bd 01 01	lda $0101,x	                lda $0101,x     ; LSB
.91e2	fd 03 01	sbc $0103,x	                sbc $0103,x
.91e5	a8		tay		                tay
.91e6	bd 02 01	lda $0102,x	                lda $0102,x     ; MSB
.91e9	fd 04 01	sbc $0104,x	                sbc $0104,x
.91ec	a6 2a		ldx $2a		                ldx tmpdsp
.91ee	95 01		sta $01,x	                sta 1,x         ; MSB of de-fudged index
.91f0	94 00		sty $00,x	                sty 0,x         ; LSB of de-fudged index
.91f2	60		rts		z_i:            rts
.91f3					xt_if:
.91f3	a0 92		ldy #$92	                ldy #>zero_branch_runtime
.91f5	a9 04		lda #$04	                lda #<zero_branch_runtime
.91f7	20 8e d4	jsr $d48e	                jsr cmpl_subroutine
.91fa	20 62 91	jsr $9162	                jsr xt_here
.91fd	20 23 a7	jsr $a723	                jsr xt_zero
.9200	20 5e 87	jsr $875e	                jsr xt_comma
.9203	60		rts		z_if:           rts
.9204					zero_branch_runtime:
.9204	68		pla		                pla
.9205	85 22		sta $22		                sta tmpbranch
.9207	68		pla		                pla
.9208	85 23		sta $23		                sta tmpbranch+1
.920a	b5 00		lda $00,x	                lda 0,x
.920c	15 01		ora $01,x	                ora 1,x
.920e	f0 0f		beq $921f	                beq _zero
.9210	a5 22		lda $22		                lda tmpbranch   ; LSB
.9212	18		clc		                clc
.9213	69 02		adc #$02	                adc #2
.9215	85 24		sta $24		                sta tmp1
.9217	a5 23		lda $23		                lda tmpbranch+1 ; MSB
.9219	69 00		adc #$00	                adc #0          ; For carry
.921b	85 25		sta $25		                sta tmp1+1
.921d	80 13		bra $9232	                bra _done
.921f					_zero:
.921f	a0 01		ldy #$01	                ldy #1
.9221	b1 22		lda ($22),y	                lda (tmpbranch),y
.9223	85 24		sta $24		                sta tmp1
.9225	c8		iny		                iny
.9226	b1 22		lda ($22),y	                lda (tmpbranch),y
.9228	85 25		sta $25		                sta tmp1+1
.922a	a5 24		lda $24		                lda tmp1
.922c	d0 02		bne $9230	                bne +
.922e	c6 25		dec $25		                dec tmp1+1
.9230					+
.9230	c6 24		dec $24		                dec tmp1
.9232					_done:
.9232	a5 25		lda $25		                lda tmp1+1
.9234	48		pha		                pha             ; MSB first
.9235	a5 24		lda $24		                lda tmp1
.9237	48		pha		                pha
.9238	e8		inx		                inx
.9239	e8		inx		                inx
.923a	60		rts		                rts
.923b					xt_immediate:
.923b	20 2d d5	jsr $d52d	                jsr current_to_dp
.923e	a0 01		ldy #$01	                ldy #1          ; offset for status byte
.9240	b1 02		lda ($02),y	                lda (dp),y
.9242	09 04		ora #$04	                ora #IM        ; make sure bit 7 is set
.9244	91 02		sta ($02),y	                sta (dp),y
.9246	60		rts		z_immediate:    rts
.9247					xt_input:
.9247	ca		dex		                dex
.9248	ca		dex		                dex
.9249	a9 12		lda #$12	                lda #<input
.924b	95 00		sta $00,x	                sta 0,x
.924d	a9 00		lda #$00	                lda #>input
.924f	95 01		sta $01,x	                sta 1,x
.9251	60		rts		z_input:        rts
.9252					xt_input_to_r:
.9252	68		pla		                pla
.9253	85 24		sta $24		                sta tmp1
.9255	68		pla		                pla
.9256	85 25		sta $25		                sta tmp1+1
.9258	a0 07		ldy #$07	                ldy #7
.925a					_loop:
.925a	b9 06 00	lda $0006,y	                lda insrc,y     ; insrc+7 is toin+1
.925d	48		pha		                pha
.925e	88		dey		                dey
.925f	10 f9		bpl $925a	                bpl _loop
.9261	a5 25		lda $25		                lda tmp1+1
.9263	48		pha		                pha
.9264	a5 24		lda $24		                lda tmp1
.9266	48		pha		                pha
.9267	60		rts		z_input_to_r: 	rts
.9268					xt_int_to_name:
.9268	20 eb d5	jsr $d5eb	                jsr underflow_1
.926b	ca		dex		                dex
.926c	ca		dex		                dex
.926d	74 00		stz $00,x	                stz 0,x
.926f	74 01		stz $01,x	                stz 1,x
.9271					_wordlist_loop:
.9271	b5 00		lda $00,x	                lda 0,x                 ; Get the current wordlist.
.9273	0a		asl a		                asl                     ; Turn offset into cells offset.
.9274	18		clc		                clc
.9275	69 06		adc #$06	                adc #wordlists_offset
.9277	a8		tay		                tay
.9278	b1 1e		lda ($1e),y	                lda (up),y              ; Save the DP for this wordlist
.927a	85 26		sta $26		                sta tmp2                ; into tmp2
.927c	c8		iny		                iny
.927d	b1 1e		lda ($1e),y	                lda (up),y
.927f	85 27		sta $27		                sta tmp2+1
.9281	a5 26		lda $26		                lda tmp2
.9283	05 27		ora $27		                ora tmp2+1
.9285	f0 38		beq $92bf	                beq _next_wordlist
.9287	b5 02		lda $02,x	                lda 2,x         ; Target xt is now behind wordlist id.
.9289	85 28		sta $28		                sta tmp3        ; Save target xt in tmp3
.928b	b5 03		lda $03,x	                lda 3,x
.928d	85 29		sta $29		                sta tmp3+1
.928f					_loop:
.928f	a0 04		ldy #$04	                ldy #4          ; xt is four bytes down
.9291	b1 26		lda ($26),y	                lda (tmp2),y    ; LSB of xt of current nt
.9293	c5 28		cmp $28		                cmp tmp3
.9295	d0 07		bne $929e	                bne _no_match
.9297	c8		iny		                iny
.9298	b1 26		lda ($26),y	                lda (tmp2),y    ; MSB of xt of current nt
.929a	c5 29		cmp $29		                cmp tmp3+1
.929c	f0 32		beq $92d0	                beq _match
.929e					_no_match:
.929e	18		clc		                clc
.929f	a5 26		lda $26		                lda tmp2
.92a1	69 02		adc #$02	                adc #2
.92a3	85 26		sta $26		                sta tmp2
.92a5	a5 27		lda $27		                lda tmp2+1
.92a7	69 00		adc #$00	                adc #0          ; only care about carry
.92a9	85 27		sta $27		                sta tmp2+1
.92ab	a0 00		ldy #$00	                ldy #0
.92ad	b1 26		lda ($26),y	                lda (tmp2),y
.92af	48		pha		                pha
.92b0	c8		iny		                iny
.92b1	11 26		ora ($26),y	                ora (tmp2),y
.92b3	f0 09		beq $92be	                beq _zero
.92b5	b1 26		lda ($26),y	                lda (tmp2),y
.92b7	85 27		sta $27		                sta tmp2+1
.92b9	68		pla		                pla
.92ba	85 26		sta $26		                sta tmp2
.92bc	80 d1		bra $928f	                bra _loop
.92be					_zero:
.92be	68		pla		                pla             ; Leftover from above loop
.92bf					_next_wordlist:
.92bf	b5 00		lda $00,x	                lda 0,x
.92c1	1a		inc a		                ina
.92c2	95 00		sta $00,x	                sta 0,x
.92c4	c9 0c		cmp #$0c	                cmp #max_wordlists
.92c6	d0 a9		bne $9271	                bne _wordlist_loop
.92c8	e8		inx		                inx
.92c9	e8		inx		                inx
.92ca	74 00		stz $00,x	                stz 0,x
.92cc	74 01		stz $01,x	                stz 1,x
.92ce	80 0a		bra $92da	                bra z_int_to_name
.92d0					_match:
.92d0	e8		inx		                inx
.92d1	e8		inx		                inx
.92d2	a5 26		lda $26		                lda tmp2
.92d4	95 00		sta $00,x	                sta 0,x
.92d6	a5 27		lda $27		                lda tmp2+1
.92d8	95 01		sta $01,x	                sta 1,x
.92da	60		rts		z_int_to_name:  rts
.92db					xt_invert:
.92db	20 eb d5	jsr $d5eb	                jsr underflow_1
.92de	a9 ff		lda #$ff	                lda #$FF
.92e0	55 00		eor $00,x	                eor 0,x         ; LSB
.92e2	95 00		sta $00,x	                sta 0,x
.92e4	a9 ff		lda #$ff	                lda #$FF
.92e6	55 01		eor $01,x	                eor 1,x         ; MSB
.92e8	95 01		sta $01,x	                sta 1,x
.92ea	60		rts		z_invert:       rts
.92eb					xt_is:
.92eb	a5 16		lda $16		                lda state
.92ed	05 17		ora $17		                ora state+1
.92ef	f0 0c		beq $92fd	                beq _interpreting
.92f1					_compiling:
.92f1	20 8e 85	jsr $858e	                jsr xt_bracket_tick
.92f4	a0 8a		ldy #$8a	                ldy #>xt_defer_store
.92f6	a9 d6		lda #$d6	                lda #<xt_defer_store
.92f8	20 8e d4	jsr $d48e	                jsr cmpl_subroutine
.92fb	80 06		bra $9303	                bra _done
.92fd					_interpreting:
.92fd	20 8d a1	jsr $a18d	                jsr xt_tick
.9300	20 d6 8a	jsr $8ad6	                jsr xt_defer_store
.9303					_done:
.9303	60		rts		z_is:           rts
.9304					xt_j:
.9304	ca		dex		                dex
.9305	ca		dex		                dex
.9306	86 2a		stx $2a		                stx tmpdsp
.9308	ba		tsx		                tsx
.9309	38		sec		                sec
.930a	bd 07 01	lda $0107,x	                lda $0107,x     ; LSB
.930d	fd 09 01	sbc $0109,x	                sbc $0109,x
.9310	a8		tay		                tay
.9311	bd 08 01	lda $0108,x	                lda $0108,x     ; MSB
.9314	fd 0a 01	sbc $010a,x	                sbc $010A,x
.9317	a6 2a		ldx $2a		                ldx tmpdsp
.9319	95 01		sta $01,x	                sta 1,x         ; MSB of de-fudged index
.931b	94 00		sty $00,x	                sty 0,x         ; LSB of de-fudged index
.931d	60		rts		z_j:            rts
.931e					xt_key:
.931e	20 28 93	jsr $9328	                jsr key_a               ; returns char in A
.9321	ca		dex		                dex
.9322	ca		dex		                dex
.9323	95 00		sta $00,x	                sta 0,x
.9325	74 01		stz $01,x	                stz 1,x
.9327	60		rts		z_key:          rts
.9328					key_a:
.9328	6c 12 00	jmp ($0012)	                jmp (input)             ; JSR/RTS
.932b					xt_latestnt:
.932b	ca		dex		                dex
.932c	ca		dex		                dex
.932d	20 2d d5	jsr $d52d	                jsr current_to_dp
.9330	a5 02		lda $02		                lda dp
.9332	95 00		sta $00,x	                sta 0,x
.9334	a5 03		lda $03		                lda dp+1
.9336	95 01		sta $01,x	                sta 1,x
.9338	60		rts		z_latestnt:     rts
.9339					xt_latestxt:
.9339	20 2b 93	jsr $932b	                jsr xt_latestnt         ; ( nt )
.933c	20 d1 95	jsr $95d1	                jsr xt_name_to_int      ; ( xt )
.933f	60		rts		z_latestxt:     rts
.9340					xt_leave:
.9340	68		pla		                pla
.9341	68		pla		                pla
.9342	68		pla		                pla
.9343	68		pla		                pla
.9344	60		rts		                rts             ; this must be compiled, so keep before z_leave
.9345					z_leave:
.9345					xt_left_bracket:
.9345	64 16		stz $16		                stz state
.9347	64 17		stz $17		                stz state+1
.9349	60		rts		z_left_bracket: rts
.934a					xt_less_number_sign:
.934a	20 23 98	jsr $9823	                jsr xt_pad      ; ( addr )
.934d	b5 00		lda $00,x	                lda 0,x
.934f	85 34		sta $34		                sta tohold
.9351	b5 01		lda $01,x	                lda 1,x
.9353	85 35		sta $35		                sta tohold+1
.9355	e8		inx		                inx
.9356	e8		inx		                inx
.9357					z_less_number_sign:
.9357	60		rts		                rts
.9358					xt_less_than:
.9358	20 f0 d5	jsr $d5f0	                jsr underflow_2
.935b	a0 00		ldy #$00	                ldy #0          ; default false
.935d	20 12 d5	jsr $d512	                jsr compare_16bit
.9360	f0 03		beq $9365	                beq _false
.9362	30 01		bmi $9365	                bmi _false
.9364	88		dey		                dey
.9365					_false:
.9365	98		tya		                tya
.9366	e8		inx		                inx
.9367	e8		inx		                inx
.9368	95 00		sta $00,x	                sta 0,x
.936a	95 01		sta $01,x	                sta 1,x
.936c	60		rts		z_less_than:    rts
.936d					xt_list:
.936d	20 eb d5	jsr $d5eb	                jsr underflow_1
.9370	20 5b 9e	jsr $9e5b	                jsr xt_scr
.9373	20 09 a1	jsr $a109	                jsr xt_store
.9376	20 c1 a7	jsr $a7c1	                jsr xt_editor_l
.9379	60		rts		z_list:         rts
.937a					xt_literal:
.937a	20 eb d5	jsr $d5eb	                jsr underflow_1
.937d	a0 93		ldy #$93	                ldy #>literal_runtime
.937f	a9 88		lda #$88	                lda #<literal_runtime
.9381	20 8e d4	jsr $d48e	                jsr cmpl_subroutine
.9384	20 5e 87	jsr $875e	                jsr xt_comma
.9387	60		rts		z_literal:      rts
.9388					literal_runtime:
.9388	ca		dex		                dex
.9389	ca		dex		                dex
.938a	68		pla		                pla             ; LSB
.938b	85 24		sta $24		                sta tmp1
.938d	68		pla		                pla             ; MSB
.938e	85 25		sta $25		                sta tmp1+1
.9390	a0 01		ldy #$01	                ldy #1
.9392	b1 24		lda ($24),y	                lda (tmp1),y    ; LSB
.9394	95 00		sta $00,x	                sta 0,x
.9396	c8		iny		                iny
.9397	b1 24		lda ($24),y	                lda (tmp1),y    ; MSB
.9399	95 01		sta $01,x	                sta 1,x
.939b	98		tya		                tya
.939c	18		clc		                clc
.939d	65 24		adc $24		                adc tmp1
.939f	a8		tay		                tay
.93a0	a5 25		lda $25		                lda tmp1+1
.93a2	69 00		adc #$00	                adc #0
.93a4	48		pha		                pha
.93a5	5a		phy		                phy
.93a6	60		rts		                rts
.93a7					xt_load:
.93a7	20 eb d5	jsr $d5eb	                jsr underflow_1
.93aa	a0 01		ldy #$01	                ldy #blk_offset+1
.93ac	b1 1e		lda ($1e),y	                lda (up),y
.93ae	48		pha		                pha
.93af	88		dey		                dey
.93b0	b1 1e		lda ($1e),y	                lda (up),y
.93b2	48		pha		                pha
.93b3	b5 00		lda $00,x	                lda 0,x
.93b5	91 1e		sta ($1e),y	                sta (up),y
.93b7	c8		iny		                iny
.93b8	b5 01		lda $01,x	                lda 1,x
.93ba	91 1e		sta ($1e),y	                sta (up),y
.93bc	20 b1 83	jsr $83b1	                jsr xt_block
.93bf	ca		dex		                dex
.93c0	ca		dex		                dex
.93c1	a9 04		lda #$04	                lda #4
.93c3	95 01		sta $01,x	                sta 1,x
.93c5	74 00		stz $00,x	                stz 0,x
.93c7	20 bf 90	jsr $90bf	                jsr load_evaluate
.93ca	a0 00		ldy #$00	                ldy #blk_offset
.93cc	68		pla		                pla
.93cd	91 1e		sta ($1e),y	                sta (up),y
.93cf	c8		iny		                iny
.93d0	68		pla		                pla
.93d1	91 1e		sta ($1e),y	                sta (up),y
.93d3	88		dey		                dey
.93d4	11 1e		ora ($1e),y	                ora (up),y
.93d6	f0 12		beq $93ea	                beq _done
.93d8	ca		dex		                dex
.93d9	ca		dex		                dex
.93da	a0 00		ldy #$00	                ldy #blk_offset
.93dc	b1 1e		lda ($1e),y	                lda (up),y
.93de	95 00		sta $00,x	                sta 0,x
.93e0	c8		iny		                iny
.93e1	b1 1e		lda ($1e),y	                lda (up),y
.93e3	95 01		sta $01,x	                sta 1,x
.93e5	20 b1 83	jsr $83b1	                jsr xt_block
.93e8	e8		inx		                inx
.93e9	e8		inx		                inx
.93ea					_done:
.93ea	60		rts		z_load:         rts
.93eb					xt_loop:
.93eb	a0 97		ldy #$97	                ldy #>xt_one
.93ed	a9 8a		lda #$8a	                lda #<xt_one
.93ef	20 8e d4	jsr $d48e	                jsr cmpl_subroutine     ; drop through to +LOOP
.93f2					xt_plus_loop:
.93f2	a0 11		ldy #$11	                ldy #plus_loop_runtime_end-plus_loop_runtime
.93f4	5a		phy		                phy             ; save counter to adjust CP
.93f5					-
.93f5	b9 59 94	lda $9459,y	                lda plus_loop_runtime,y
.93f8	91 00		sta ($00),y	                sta (cp),y
.93fa	88		dey		                dey
.93fb	10 f8		bpl $93f5	                bpl -
.93fd	68		pla		                pla
.93fe	18		clc		                clc
.93ff	65 00		adc $00		                adc cp
.9401	85 00		sta $00		                sta cp
.9403	a5 01		lda $01		                lda cp+1
.9405	69 00		adc #$00	                adc #0          ; only need carry
.9407	85 01		sta $01		                sta cp+1
.9409	20 5e 87	jsr $875e	                jsr xt_comma
.940c	a9 68		lda #$68	                lda #$68                ; opcode for PLA
.940e	a0 06		ldy #$06	                ldy #6
.9410					-
.9410	91 00		sta ($00),y	                sta (cp),y
.9412	88		dey		                dey
.9413	10 fb		bpl $9410	                bpl -
.9415	a9 06		lda #$06	                lda #6
.9417	18		clc		                clc
.9418	65 00		adc $00		                adc cp
.941a	85 00		sta $00		                sta cp
.941c	a5 01		lda $01		                lda cp+1
.941e	69 00		adc #$00	                adc #0                  ; only need carry
.9420	85 01		sta $01		                sta cp+1
.9422	b5 00		lda $00,x	                lda 0,x
.9424	85 24		sta $24		                sta tmp1
.9426	b5 01		lda $01,x	                lda 1,x
.9428	85 25		sta $25		                sta tmp1+1
.942a	e8		inx		                inx
.942b	e8		inx		                inx
.942c	a5 00		lda $00		                lda cp
.942e	38		sec		                sec
.942f	e9 01		sbc #$01	                sbc #1
.9431	85 26		sta $26		                sta tmp2
.9433	a5 01		lda $01		                lda cp+1
.9435	e9 00		sbc #$00	                sbc #0
.9437	85 27		sta $27		                sta tmp2+1
.9439	a0 00		ldy #$00	                ldy #0
.943b	a9 a9		lda #$a9	                lda #$A9        ; opcode for LDA immediate
.943d	91 24		sta ($24),y	                sta (tmp1),y
.943f	c8		iny		                iny
.9440	a5 27		lda $27		                lda tmp2+1      ; MSB
.9442	91 24		sta ($24),y	                sta (tmp1),y
.9444	c8		iny		                iny
.9445	a9 48		lda #$48	                lda #$48        ; Opcode for PHA
.9447	91 24		sta ($24),y	                sta (tmp1),y
.9449	c8		iny		                iny
.944a	a9 a9		lda #$a9	                lda #$A9        ; opcode for LDA immediate
.944c	91 24		sta ($24),y	                sta (tmp1),y
.944e	c8		iny		                iny
.944f	a5 26		lda $26		                lda tmp2        ; LSB
.9451	91 24		sta ($24),y	                sta (tmp1),y
.9453	c8		iny		                iny
.9454	a9 48		lda #$48	                lda #$48        ; Opcode for PHA
.9456	91 24		sta ($24),y	                sta (tmp1),y
.9458					z_loop:
.9458	60		rts		z_plus_loop:    rts
.9459					plus_loop_runtime:
.9459	18		clc		                clc
.945a	68		pla		                pla             ; LSB of index
.945b	75 00		adc $00,x	                adc 0,x         ; LSB of step
.945d	a8		tay		                tay             ; temporary storage of LSB
.945e	b8		clv		                clv
.945f	68		pla		                pla             ; MSB of index
.9460	75 01		adc $01,x	                adc 1,x         ; MSB of step
.9462	48		pha		                pha             ; put MSB of index back on stack
.9463	98		tya		                tya             ; put LSB of index back on stack
.9464	48		pha		                pha
.9465	e8		inx		                inx             ; dump step from TOS
.9466	e8		inx		                inx
.9467	70 03		bvs $946c	                bvs _hack+3     ; skip over JMP instruction
.9469					_hack:
>9469	4c				                .byte $4C
.946a					plus_loop_runtime_end:
.946a					xt_lshift:
.946a	20 f0 d5	jsr $d5f0	                jsr underflow_2
.946d	b5 00		lda $00,x	                lda 0,x
.946f	29 0f		and #$0f	                and #%00001111
.9471	f0 08		beq $947b	                beq _done
.9473	a8		tay		                tay
.9474					_loop:
.9474	16 02		asl $02,x	                asl 2,x
.9476	36 03		rol $03,x	                rol 3,x
.9478	88		dey		                dey
.9479	d0 f9		bne $9474	                bne _loop
.947b					_done:
.947b	e8		inx		                inx
.947c	e8		inx		                inx
.947d	60		rts		z_lshift:       rts
.947e					xt_m_star:
.947e	20 f0 d5	jsr $d5f0	                jsr underflow_2
.9481	b5 01		lda $01,x	                lda 1,x         ; MSB of n1
.9483	55 03		eor $03,x	                eor 3,x         ; MSB of n2
.9485	48		pha		                pha
.9486	20 39 81	jsr $8139	                jsr xt_abs
.9489	20 2a a1	jsr $a12a	                jsr xt_swap
.948c	20 39 81	jsr $8139	                jsr xt_abs
.948f	20 78 a5	jsr $a578	                jsr xt_um_star          ; ( d )
.9492	68		pla		                pla
.9493	10 03		bpl $9498	                bpl _done
.9495	20 31 8b	jsr $8b31	                jsr xt_dnegate
.9498					_done:
.9498	60		rts		z_m_star:       rts
.9499					xt_marker:
.9499	20 2d d5	jsr $d52d	                jsr current_to_dp
.949c	a5 02		lda $02		                lda dp
.949e	48		pha		                pha
.949f	a5 03		lda $03		                lda dp+1
.94a1	48		pha		                pha
.94a2	a5 00		lda $00		                lda cp
.94a4	48		pha		                pha
.94a5	a5 01		lda $01		                lda cp+1
.94a7	48		pha		                pha
.94a8	20 59 89	jsr $8959	                jsr xt_create
.94ab	a5 00		lda $00		                lda cp          ; LSB
.94ad	38		sec		                sec
.94ae	e9 02		sbc #$02	                sbc #2
.94b0	85 00		sta $00		                sta cp
.94b2	a5 01		lda $01		                lda cp+1        ; MSB
.94b4	e9 00		sbc #$00	                sbc #0          ; we only care about the borrow
.94b6	85 01		sta $01		                sta cp+1
.94b8	a0 94		ldy #$94	                ldy #>marker_runtime
.94ba	a9 d7		lda #$d7	                lda #<marker_runtime
.94bc	20 9a d4	jsr $d49a	                jsr cmpl_word
.94bf	7a		ply		                ply                     ; MSB
.94c0	68		pla		                pla                     ; LSB
.94c1	20 9a d4	jsr $d49a	                jsr cmpl_word
.94c4	7a		ply		                ply                     ; MSB
.94c5	68		pla		                pla                     ; LSB
.94c6	20 9a d4	jsr $d49a	                jsr cmpl_word
.94c9	a0 04		ldy #$04	                ldy #4                  ; Start at CURRENT
.94cb					_marker_loop:
.94cb	b1 1e		lda ($1e),y	                lda (up),y
.94cd	20 9e d4	jsr $d49e	                jsr cmpl_a
.94d0	c8		iny		                iny
.94d1	98		tya		                tya
.94d2	c9 28		cmp #$28	                cmp #40                 ; One past the end of the search order.
.94d4	d0 f5		bne $94cb	                bne _marker_loop
.94d6	60		rts		z_marker:       rts
.94d7					marker_runtime:
.94d7	68		pla		                pla
.94d8	85 24		sta $24		                sta tmp1        ; LSB of address
.94da	68		pla		                pla
.94db	85 25		sta $25		                sta tmp1+1      ; MSB of address
.94dd	e6 24		inc $24		                inc tmp1
.94df	d0 02		bne $94e3	                bne +
.94e1	e6 25		inc $25		                inc tmp1+1
.94e3					+
.94e3	a0 00		ldy #$00	                ldy #0
.94e5	b1 24		lda ($24),y	                lda (tmp1),y
.94e7	85 00		sta $00		                sta cp
.94e9	c8		iny		                iny
.94ea	b1 24		lda ($24),y	                lda (tmp1),y
.94ec	85 01		sta $01		                sta cp+1
.94ee	c8		iny		                iny
.94ef	b1 24		lda ($24),y	                lda (tmp1),y
.94f1	85 02		sta $02		                sta dp
.94f3	c8		iny		                iny
.94f4	b1 24		lda ($24),y	                lda (tmp1),y
.94f6	85 03		sta $03		                sta dp+1
.94f8	a0 04		ldy #$04	                ldy #4
.94fa					_marker_restore_loop:
.94fa	b1 24		lda ($24),y	                lda (tmp1), y
.94fc	91 1e		sta ($1e),y	                sta (up), y
.94fe	c8		iny		                iny
.94ff	98		tya		                tya
.9500	c9 28		cmp #$28	                cmp #40                 ; One past the end of the search order.
.9502	d0 f6		bne $94fa	                bne _marker_restore_loop
.9504	20 40 d5	jsr $d540	                jsr dp_to_current       ; Move the CURRENT DP back.
.9507	60		rts		                rts
.9508					xt_max:
.9508	20 f0 d5	jsr $d5f0	                jsr underflow_2
.950b	b5 00		lda $00,x	                lda 0,x         ; LSB of TOS
.950d	d5 02		cmp $02,x	                cmp 2,x         ; LSB of NOS, this sets the carry
.950f	b5 01		lda $01,x	                lda 1,x         ; MSB of TOS
.9511	f5 03		sbc $03,x	                sbc 3,x         ; MSB of NOS
.9513	50 02		bvc $9517	                bvc _no_overflow
.9515	49 80		eor #$80	                eor #$80        ; complement negative flag
.9517					_no_overflow:
.9517	30 08		bmi $9521	                bmi _keep_nos
.9519	b5 00		lda $00,x	                lda 0,x
.951b	95 02		sta $02,x	                sta 2,x
.951d	b5 01		lda $01,x	                lda 1,x
.951f	95 03		sta $03,x	                sta 3,x
.9521					_keep_nos:
.9521	e8		inx		                inx
.9522	e8		inx		                inx
.9523	60		rts		z_max:          rts
.9524					xt_min:
.9524	20 f0 d5	jsr $d5f0	                jsr underflow_2
.9527	b5 00		lda $00,x	                lda 0,x         ; LSB of TOS
.9529	d5 02		cmp $02,x	                cmp 2,x         ; LSB of NOS, this sets carry
.952b	b5 01		lda $01,x	                lda 1,x         ; MSB of TOS
.952d	f5 03		sbc $03,x	                sbc 3,x         ; MSB of NOS
.952f	50 02		bvc $9533	                bvc _no_overflow
.9531	49 80		eor #$80	                eor #$80
.9533					_no_overflow:
.9533	10 08		bpl $953d	                bpl _keep_nos
.9535	b5 00		lda $00,x	                lda 0,x
.9537	95 02		sta $02,x	                sta 2,x
.9539	b5 01		lda $01,x	                lda 1,x
.953b	95 03		sta $03,x	                sta 3,x
.953d					_keep_nos:
.953d	e8		inx		                inx
.953e	e8		inx		                inx
.953f	60		rts		z_min:          rts
.9540					xt_minus:
.9540	20 f0 d5	jsr $d5f0	                jsr underflow_2
.9543	38		sec		                sec
.9544	b5 02		lda $02,x	                lda 2,x         ; LSB
.9546	f5 00		sbc $00,x	                sbc 0,x
.9548	95 02		sta $02,x	                sta 2,x
.954a	b5 03		lda $03,x	                lda 3,x         ; MSB
.954c	f5 01		sbc $01,x	                sbc 1,x
.954e	95 03		sta $03,x	                sta 3,x
.9550	e8		inx		                inx
.9551	e8		inx		                inx
.9552	60		rts		z_minus:        rts
.9553					xt_minus_leading:
.9553	20 f0 d5	jsr $d5f0	                jsr underflow_2
.9556					_loop:
.9556	b5 00		lda $00,x	                lda 0,x
.9558	15 01		ora $01,x	                ora 1,x
.955a	f0 0f		beq $956b	                beq _done
.955c	a1 02		lda ($02,x)	                lda (2,x)               ; get first character
.955e	20 de d5	jsr $d5de	                jsr is_whitespace
.9561	90 08		bcc $956b	                bcc _done
.9563	20 8a 97	jsr $978a	                jsr xt_one              ; ( addr u 1 )
.9566	20 9b 9f	jsr $9f9b	                jsr xt_slash_string     ; ( addr+ u-1 )
.9569	80 eb		bra $9556	                bra _loop
.956b					_done:
.956b					z_minus_leading:
.956b	60		rts		                rts
.956c					xt_minus_trailing:
.956c	20 f0 d5	jsr $d5f0	                jsr underflow_2
.956f	b5 00		lda $00,x	                lda 0,x         ; LSB of n
.9571	15 01		ora $01,x	                ora 1,x         ; MSB of n
.9573	f0 33		beq $95a8	                beq _done
.9575	18		clc		                clc
.9576	b5 02		lda $02,x	                lda 2,x         ; LSB of addr
.9578	75 00		adc $00,x	                adc 0,x
.957a	85 24		sta $24		                sta tmp1
.957c	b5 03		lda $03,x	                lda 3,x         ; MSB of addr
.957e	75 01		adc $01,x	                adc 1,x
.9580	85 25		sta $25		                sta tmp1+1
.9582	a5 24		lda $24		                lda tmp1
.9584	d0 02		bne $9588	                bne +
.9586	c6 25		dec $25		                dec tmp1+1
.9588					+
.9588	c6 24		dec $24		                dec tmp1
.958a					_loop:
.958a	b2 24		lda ($24)	                lda (tmp1)
.958c	c9 20		cmp #$20	                cmp #AscSP
.958e	d0 18		bne $95a8	                bne _done
.9590	a5 24		lda $24		                lda tmp1
.9592	d0 02		bne $9596	                bne +
.9594	c6 25		dec $25		                dec tmp1+1
.9596					+
.9596	c6 24		dec $24		                dec tmp1
.9598	b5 00		lda $00,x	                lda 0,x
.959a	d0 02		bne $959e	                bne +
.959c	d6 01		dec $01,x	                dec 1,x
.959e					+
.959e	d6 00		dec $00,x	                dec 0,x
.95a0	b5 00		lda $00,x	                lda 0,x
.95a2	15 01		ora $01,x	                ora 1,x
.95a4	f0 02		beq $95a8	                beq _done       ; Count has reached zero - we're done!
.95a6	80 e2		bra $958a	                bra _loop
.95a8					_done:
.95a8					z_minus_trailing:
.95a8	60		rts		                rts
.95a9					xt_mod:
.95a9	20 f0 d5	jsr $d5f0	                jsr underflow_2
.95ac	20 83 9f	jsr $9f83	                jsr xt_slash_mod
.95af	e8		inx		                inx             ; DROP
.95b0	e8		inx		                inx
.95b1					z_mod:
.95b1	60		rts		                rts
.95b2					xt_move:
.95b2	b5 03		lda $03,x	                lda 3,x                 ; MSB of addr2
.95b4	d5 05		cmp $05,x	                cmp 5,x                 ; MSB of addr1
.95b6	f0 05		beq $95bd	                beq _lsb                ; wasn't helpful, move to LSB
.95b8	b0 0e		bcs $95c8	                bcs _to_move_up         ; we want CMOVE>
.95ba	4c 89 86	jmp $8689	                jmp xt_cmove            ; JSR/RTS
.95bd					_lsb:
.95bd	b5 02		lda $02,x	                lda 2,x                 ; LSB of addr2
.95bf	d5 04		cmp $04,x	                cmp 4,x                 ; LSB of addr1
.95c1	f0 08		beq $95cb	                beq _equal              ; LSB is equal as well
.95c3	b0 03		bcs $95c8	                bcs _to_move_up         ; we want CMOVE>
.95c5	4c 89 86	jmp $8689	                jmp xt_cmove            ; JSR/RTS
.95c8					_to_move_up:
.95c8	4c c4 86	jmp $86c4	                jmp xt_cmove_up         ; JSR/RTS
.95cb					_equal:
.95cb	8a		txa		                txa
.95cc	18		clc		                clc
.95cd	69 06		adc #$06	                adc #6
.95cf	aa		tax		                tax
.95d0	60		rts		z_move:         rts
.95d1					xt_name_to_int:
.95d1	20 eb d5	jsr $d5eb	                jsr underflow_1
.95d4	b5 00		lda $00,x	                lda 0,x
.95d6	18		clc		                clc
.95d7	69 04		adc #$04	                adc #4
.95d9	85 28		sta $28		                sta tmp3
.95db	b5 01		lda $01,x	                lda 1,x
.95dd	90 01		bcc $95e0	                bcc _done
.95df	1a		inc a		                ina
.95e0					_done:
.95e0	85 29		sta $29		                sta tmp3+1
.95e2	a0 00		ldy #$00	                ldy #0
.95e4	b1 28		lda ($28),y	                lda (tmp3),y
.95e6	95 00		sta $00,x	                sta 0,x
.95e8	c8		iny		                iny
.95e9	b1 28		lda ($28),y	                lda (tmp3),y
.95eb	95 01		sta $01,x	                sta 1,x
.95ed	60		rts		z_name_to_int:  rts
.95ee					xt_name_to_string:
.95ee	20 eb d5	jsr $d5eb	                jsr underflow_1
.95f1	ca		dex		                dex
.95f2	ca		dex		                dex
.95f3	a1 02		lda ($02,x)	                lda (2,x)
.95f5	95 00		sta $00,x	                sta 0,x
.95f7	74 01		stz $01,x	                stz 1,x
.95f9	b5 02		lda $02,x	                lda 2,x         ; LSB
.95fb	18		clc		                clc
.95fc	69 08		adc #$08	                adc #8
.95fe	a8		tay		                tay
.95ff	b5 03		lda $03,x	                lda 3,x         ; MSB
.9601	69 00		adc #$00	                adc #0          ; just need carry
.9603	95 03		sta $03,x	                sta 3,x
.9605	94 02		sty $02,x	                sty 2,x
.9607					z_name_to_string:
.9607	60		rts		                rts
.9608					xt_nc_limit:
.9608	ca		dex		                dex
.9609	ca		dex		                dex
.960a	a9 1a		lda #$1a	                lda #<nc_limit
.960c	95 00		sta $00,x	                sta 0,x
.960e	a9 00		lda #$00	                lda #>nc_limit
.9610	95 01		sta $01,x	                sta 1,x
.9612	60		rts		z_nc_limit:     rts
.9613					xt_negate:
.9613	20 eb d5	jsr $d5eb	                jsr underflow_1
.9616	a9 00		lda #$00	        	lda #0
.9618	38		sec		                sec
.9619	f5 00		sbc $00,x	                sbc 0,x         ; LSB
.961b	95 00		sta $00,x	                sta 0,x
.961d	a9 00		lda #$00	                lda #0
.961f	f5 01		sbc $01,x	                sbc 1,x         ; MSB
.9621	95 01		sta $01,x	                sta 1,x
.9623	60		rts		z_negate:       rts
.9624					xt_never_native:
.9624	20 2d d5	jsr $d52d	                jsr current_to_dp
.9627	a0 01		ldy #$01	                ldy #1          ; offset for status byte
.9629	b1 02		lda ($02),y	                lda (dp),y
.962b	09 08		ora #$08	                ora #NN         ; Make sure NN flag is set
.962d	29 fd		and #$fd	                and #$ff-AN     ; and AN flag is clear.
.962f	91 02		sta ($02),y	                sta (dp),y
.9631					z_never_native:
.9631	60		rts		                rts
.9632					xt_nip:
.9632	20 f0 d5	jsr $d5f0	                jsr underflow_2
.9635	b5 00		lda $00,x	                lda 0,x         ; LSB
.9637	95 02		sta $02,x	                sta 2,x
.9639	b5 01		lda $01,x	                lda 1,x         ; MSB
.963b	95 03		sta $03,x	                sta 3,x
.963d	e8		inx		                inx
.963e	e8		inx		                inx
.963f	60		rts		z_nip:          rts
.9640					xt_not_equals:
.9640	20 f0 d5	jsr $d5f0	                jsr underflow_2
.9643	a0 00		ldy #$00	                ldy #0                  ; default is true
.9645	b5 00		lda $00,x	                lda 0,x                 ; LSB
.9647	d5 02		cmp $02,x	                cmp 2,x
.9649	d0 0a		bne $9655	                bne _not_equal
.964b	b5 01		lda $01,x	                lda 1,x                 ; MSB
.964d	d5 03		cmp $03,x	                cmp 3,x
.964f	d0 04		bne $9655	                bne _not_equal
.9651	a9 ff		lda #$ff	                lda #$FF
.9653	80 01		bra $9656	                bra _done
.9655					_not_equal:
.9655	88		dey		                dey                     ; drop thru to done
.9656					_done:
.9656	98		tya		                tya
.9657	e8		inx		                inx
.9658	e8		inx		                inx
.9659	95 00		sta $00,x	                sta 0,x
.965b	95 01		sta $01,x	                sta 1,x
.965d	60		rts		z_not_equals:   rts
.965e					xt_not_rote:
.965e	20 f5 d5	jsr $d5f5	                jsr underflow_3
.9661	b4 01		ldy $01,x	                ldy 1,x         ; MSB first
.9663	b5 03		lda $03,x	                lda 3,x
.9665	95 01		sta $01,x	                sta 1,x
.9667	b5 05		lda $05,x	                lda 5,x
.9669	95 03		sta $03,x	                sta 3,x
.966b	94 05		sty $05,x	                sty 5,x
.966d	b4 00		ldy $00,x	                ldy 0,x         ; LSB second
.966f	b5 02		lda $02,x	                lda 2,x
.9671	95 00		sta $00,x	                sta 0,x
.9673	b5 04		lda $04,x	                lda 4,x
.9675	95 02		sta $02,x	                sta 2,x
.9677	94 04		sty $04,x	                sty 4,x
.9679	60		rts		z_not_rote:     rts
.967a					xt_number:
.967a	20 f0 d5	jsr $d5f0	                jsr underflow_2
.967d	64 2a		stz $2a		                stz tmpdsp      ; flag for double
.967f	64 2b		stz $2b		                stz tmpdsp+1    ; flag for minus
.9681	a1 02		lda ($02,x)	                lda (2,x)
.9683	c9 2d		cmp #$2d	                cmp #$2D        ; ASCII for "-"
.9685	d0 0a		bne $9691	                bne _check_dot
.9687	c6 2b		dec $2b		                dec tmpdsp+1
.9689	f6 02		inc $02,x	                inc 2,x         ; start one character later
.968b	d0 02		bne $968f	                bne +
.968d	f6 03		inc $03,x	                inc 3,x
.968f					+
.968f	d6 00		dec $00,x	                dec 0,x         ; decrease string length by one
.9691					_check_dot:
.9691	b5 02		lda $02,x	                lda 2,x         ; LSB of address
.9693	18		clc		                clc
.9694	75 00		adc $00,x	                adc 0,x         ; length of string
.9696	85 2c		sta $2c		                sta tmptos
.9698	b5 03		lda $03,x	                lda 3,x
.969a	69 00		adc #$00	                adc #0          ; only need carry
.969c	85 2d		sta $2d		                sta tmptos+1
.969e	a5 2c		lda $2c		                lda tmptos
.96a0	d0 02		bne $96a4	                bne +
.96a2	c6 2d		dec $2d		                dec tmptos+1
.96a4					+
.96a4	c6 2c		dec $2c		                dec tmptos
.96a6	b2 2c		lda ($2c)	                lda (tmptos)
.96a8	c9 2e		cmp #$2e	                cmp #'.'
.96aa	d0 04		bne $96b0	                bne _main
.96ac	c6 2a		dec $2a		                dec tmpdsp
.96ae	d6 00		dec $00,x	                dec 0,x
.96b0					_main:
.96b0	ca		dex		                dex
.96b1	ca		dex		                dex
.96b2	ca		dex		                dex
.96b3	ca		dex		                dex
.96b4	b5 04		lda $04,x	                lda 4,x         ; LSB of length
.96b6	95 00		sta $00,x	                sta 0,x
.96b8	74 01		stz $01,x	                stz 1,x         ; MSB, max length 255 chars
.96ba	b5 06		lda $06,x	                lda 6,x         ; LSB of address
.96bc	95 02		sta $02,x	                sta 2,x
.96be	b5 07		lda $07,x	                lda 7,x         ; MSB of address
.96c0	95 03		sta $03,x	                sta 3,x
.96c2	74 04		stz $04,x	                stz 4,x         ; clear space for ud
.96c4	74 05		stz $05,x	                stz 5,x
.96c6	74 06		stz $06,x	                stz 6,x
.96c8	74 07		stz $07,x	                stz 7,x
.96ca	20 39 a2	jsr $a239	                jsr xt_to_number        ; (ud addr u -- ud addr u )
.96cd	b5 00		lda $00,x	                lda 0,x
.96cf	f0 15		beq $96e6	                beq _all_converted
.96d1	a9 3e		lda #$3e	                lda #$3E        ; ASCII for ">"
.96d3	20 e6 8d	jsr $8de6	                jsr emit_a
.96d6	20 7f a4	jsr $a47f	                jsr xt_type
.96d9	a9 3c		lda #$3c	                lda #$3C        ; ASCII for "<"
.96db	20 e6 8d	jsr $8de6	                jsr emit_a
.96de	20 a0 a0	jsr $a0a0	                jsr xt_space
.96e1	a9 08		lda #$08	                lda #err_syntax
.96e3	4c 01 d6	jmp $d601	                jmp error
.96e6					_all_converted:
.96e6	e8		inx		                inx
.96e7	e8		inx		                inx
.96e8	e8		inx		                inx
.96e9	e8		inx		                inx
.96ea	a5 2a		lda $2a		                lda tmpdsp      ; flag for double
.96ec	f0 0d		beq $96fb	                beq _single
.96ee	a9 20		lda #$20	                lda #%00100000
.96f0	04 20		tsb $20		                tsb status
.96f2	a5 2b		lda $2b		                lda tmpdsp+1
.96f4	f0 12		beq $9708	                beq _done       ; no minus, all done
.96f6	20 31 8b	jsr $8b31	                jsr xt_dnegate
.96f9	80 0d		bra $9708	                bra _done
.96fb					_single:
.96fb	e8		inx		                inx
.96fc	e8		inx		                inx
.96fd	a9 20		lda #$20	                lda #%00100000
.96ff	14 20		trb $20		                trb status
.9701	a5 2b		lda $2b		                lda tmpdsp+1
.9703	f0 03		beq $9708	                beq _done       ; no minus, all done
.9705	20 13 96	jsr $9613	                jsr xt_negate
.9708					_done:
.9708	60		rts		z_number:       rts
.9709					xt_number_sign:
.9709	20 f0 d5	jsr $d5f0	                jsr underflow_2         ; double number
.970c	20 77 83	jsr $8377	                jsr xt_base
.970f	20 70 8f	jsr $8f70	                jsr xt_fetch            ; ( ud1 base )
.9712	20 ec a2	jsr $a2ec	                jsr xt_to_r             ; >r
.9715	20 23 a7	jsr $a723	                jsr xt_zero             ; 0
.9718	20 ff 99	jsr $99ff	                jsr xt_r_fetch          ; r@
.971b	20 36 a5	jsr $a536	                jsr xt_um_slash_mod     ; um/mod
.971e	20 d9 9a	jsr $9ad9	                jsr xt_rot              ; rot
.9721	20 d9 9a	jsr $9ad9	                jsr xt_rot              ; rot
.9724	20 14 9a	jsr $9a14	                jsr xt_r_from           ; r>
.9727	20 36 a5	jsr $a536	                jsr xt_um_slash_mod     ; um/mod
.972a	20 d9 9a	jsr $9ad9	                jsr xt_rot              ; rot
.972d	20 d9 9a	jsr $9ad9	                jsr xt_rot              ; ( ud rem )
.9730	b5 00		lda $00,x	                lda 0,x
.9732	a8		tay		                tay
.9733	b9 02 d2	lda $d202,y	                lda s_abc_upper,y
.9736	95 00		sta $00,x	                sta 0,x
.9738	74 01		stz $01,x	                stz 1,x                 ; paranoid; now ( ud char )
.973a	20 c7 91	jsr $91c7	                jsr xt_hold
.973d					z_number_sign:
.973d	60		rts		                rts
.973e					xt_number_sign_greater:
.973e	20 f0 d5	jsr $d5f0	                jsr underflow_2         ; double number
.9741	a5 34		lda $34		                lda tohold
.9743	95 00		sta $00,x	                sta 0,x         ; LSB of tohold
.9745	95 02		sta $02,x	                sta 2,x
.9747	a5 35		lda $35		                lda tohold+1
.9749	95 01		sta $01,x	                sta 1,x         ; MSB of addr
.974b	95 03		sta $03,x	                sta 3,x         ; ( addr addr )
.974d	20 23 98	jsr $9823	                jsr xt_pad      ; ( addr addr pad )
.9750	38		sec		                sec
.9751	b5 00		lda $00,x	                lda 0,x         ; LSB of pad address
.9753	f5 02		sbc $02,x	                sbc 2,x
.9755	95 02		sta $02,x	                sta 2,x
.9757	b5 01		lda $01,x	                lda 1,x         ; MSB, which should always be zero
.9759	f5 03		sbc $03,x	                sbc 3,x
.975b	95 03		sta $03,x	                sta 3,x         ; ( addr u pad )
.975d	e8		inx		                inx
.975e	e8		inx		                inx
.975f					z_number_sign_greater:
.975f	60		rts		                rts
.9760					xt_number_sign_s:
.9760	20 f0 d5	jsr $d5f0	                jsr underflow_2
.9763					_loop:
.9763	20 09 97	jsr $9709	                jsr xt_number_sign
.9766	b5 00		lda $00,x	                lda 0,x
.9768	15 01		ora $01,x	                ora 1,x
.976a	15 02		ora $02,x	                ora 2,x
.976c	15 03		ora $03,x	                ora 3,x
.976e	d0 f3		bne $9763	                bne _loop
.9770					z_number_sign_s:
.9770	60		rts		                rts
.9771					xt_of:
.9771	a0 98		ldy #$98	                ldy #>xt_over
.9773	a9 15		lda #$15	                lda #<xt_over
.9775	20 8e d4	jsr $d48e	                jsr cmpl_subroutine
.9778	a0 8e		ldy #$8e	                ldy #>xt_equal
.977a	a9 be		lda #$be	                lda #<xt_equal
.977c	20 8e d4	jsr $d48e	                jsr cmpl_subroutine
.977f	20 f3 91	jsr $91f3	                jsr xt_if
.9782	a0 8d		ldy #$8d	                ldy #>xt_drop
.9784	a9 1e		lda #$1e	                lda #<xt_drop
.9786	20 8e d4	jsr $d48e	                jsr cmpl_subroutine
.9789	60		rts		z_of:           rts
.978a					xt_editor_wordlist:
.978a					xt_one:
.978a	ca		dex		                dex
.978b	ca		dex		                dex
.978c	a9 01		lda #$01	                lda #1
.978e	95 00		sta $00,x	                sta 0,x
.9790	74 01		stz $01,x	                stz 1,x
.9792					z_editor_wordlist:
.9792					z_one:
.9792	60		rts		                rts
.9793					xt_one_minus:
.9793	20 eb d5	jsr $d5eb	                jsr underflow_1
.9796	b5 00		lda $00,x	                lda 0,x
.9798	d0 02		bne $979c	                bne +
.979a	d6 01		dec $01,x	                dec 1,x
.979c					+
.979c	d6 00		dec $00,x	                dec 0,x
.979e	60		rts		z_one_minus:    rts
.979f					xt_char_plus:
.979f					xt_one_plus:
.979f	20 eb d5	jsr $d5eb	                jsr underflow_1
.97a2	f6 00		inc $00,x	                inc 0,x
.97a4	d0 02		bne $97a8	                bne _done
.97a6	f6 01		inc $01,x	                inc 1,x
.97a8					_done:
.97a8					z_char_plus:
.97a8	60		rts		z_one_plus:     rts
.97a9					xt_only:
.97a9	ca		dex		                dex
.97aa	ca		dex		                dex
.97ab	a9 ff		lda #$ff	                lda #$FF
.97ad	95 00		sta $00,x	                sta 0,x
.97af	95 01		sta $01,x	                sta 1,x
.97b1	20 9d 9c	jsr $9c9d	                jsr xt_set_order
.97b4	60		rts		z_only:         rts
.97b5					xt_or:
.97b5	20 f0 d5	jsr $d5f0	                jsr underflow_2
.97b8	b5 00		lda $00,x	                lda 0,x
.97ba	15 02		ora $02,x	                ora 2,x
.97bc	95 02		sta $02,x	                sta 2,x
.97be	b5 01		lda $01,x	                lda 1,x
.97c0	15 03		ora $03,x	                ora 3,x
.97c2	95 03		sta $03,x	                sta 3,x
.97c4	e8		inx		                inx
.97c5	e8		inx		                inx
.97c6	60		rts		z_or:           rts
.97c7					xt_order:
.97c7	20 53 89	jsr $8953	                jsr xt_cr
.97ca	20 24 91	jsr $9124	                jsr xt_get_order        ; ( wid_n ... wid_1 n )
.97cd	b5 00		lda $00,x	                lda 0,x                 ; assumes no more than 255 wordlists
.97cf	f0 1e		beq $97ef	                beq _drop_done
.97d1					_have_wordlists:
.97d1	a8		tay		                tay
.97d2					_loop:
.97d2	e8		inx		                inx
.97d3	e8		inx		                inx                     ; DROP, now ( wid_n ... wid_1 )
.97d4	b5 00		lda $00,x	                lda 0,x
.97d6	5a		phy		                phy
.97d7	20 f2 97	jsr $97f2	                jsr order_print_wid_string   ; internal helper function
.97da	7a		ply		                ply
.97db	88		dey		                dey
.97dc	d0 f4		bne $97d2	                bne _loop
.97de	20 a0 a0	jsr $a0a0	                jsr xt_space
.97e1	20 a0 a0	jsr $a0a0	                jsr xt_space
.97e4	20 19 91	jsr $9119	                jsr xt_get_current      ; ( wid )
.97e7	b5 00		lda $00,x	                lda 0,x
.97e9	20 f2 97	jsr $97f2	                jsr order_print_wid_string
.97ec	20 53 89	jsr $8953	                jsr xt_cr
.97ef					_drop_done:
.97ef	e8		inx		                inx
.97f0	e8		inx		                inx
.97f1					z_order:
.97f1	60		rts		                rts
.97f2					order_print_wid_string:
.97f2	c9 04		cmp #$04	                cmp #4
.97f4	90 09		bcc $97ff	                bcc _output_string      ; less than 4, print a real string
.97f6	ca		dex		                dex
.97f7	ca		dex		                dex
.97f8	95 00		sta $00,x	                sta 0,x
.97fa	74 01		stz $01,x	                stz 1,x
.97fc	4c aa a4	jmp $a4aa	                jmp xt_u_dot            ; JSR/RTS as this routine is not compiled
.97ff					_output_string:
.97ff	a8		tay		                tay
.9800	b9 06 98	lda $9806,y	                lda _wid_data,y
.9803	4c 17 d6	jmp $d617	                jmp print_string_no_lf  ; JSR/RTS as this routine is not compiled
.9806					_wid_data:
>9806	03				        .byte str_wid_forth            ; WID 0: "Forth"
>9807	06				        .byte str_wid_editor           ; WID 1: "Editor"
>9808	07				        .byte str_wid_assembler        ; WID 2: "Assembler"
>9809	08				        .byte str_wid_root             ; WID 3: "Root"
.980a					xt_output:
.980a	ca		dex		                dex
.980b	ca		dex		                dex
.980c	a9 10		lda #$10	                lda #<output
.980e	95 00		sta $00,x	                sta 0,x
.9810	a9 00		lda #$00	                lda #>output
.9812	95 01		sta $01,x	                sta 1,x
.9814	60		rts		z_output:       rts
.9815					xt_over:
.9815	20 f0 d5	jsr $d5f0	                jsr underflow_2
.9818	ca		dex		                dex
.9819	ca		dex		                dex
.981a	b5 04		lda $04,x	                lda 4,x         ; LSB
.981c	95 00		sta $00,x	                sta 0,x
.981e	b5 05		lda $05,x	                lda 5,x         ; MSB
.9820	95 01		sta $01,x	                sta 1,x
.9822	60		rts		z_over:         rts
.9823					xt_pad:
.9823	ca		dex		                dex
.9824	ca		dex		                dex
.9825	a5 00		lda $00		                lda cp
.9827	18		clc		                clc
.9828	69 ff		adc #$ff	                adc #padoffset  ; assumes padoffset one byte in size
.982a	95 00		sta $00,x	                sta 0,x
.982c	a5 01		lda $01		                lda cp+1
.982e	69 00		adc #$00	                adc #0          ; only need carry
.9830	95 01		sta $01,x	                sta 1,x
.9832	60		rts		z_pad:          rts
.9833					xt_page:
.9833	a9 1b		lda #$1b	                lda #AscESC
.9835	20 e6 8d	jsr $8de6	                jsr emit_a
.9838	a9 5b		lda #$5b	                lda #$5B        ; ASCII for "["
.983a	20 e6 8d	jsr $8de6	                jsr emit_a
.983d	a9 32		lda #$32	                lda #'2'
.983f	20 e6 8d	jsr $8de6	                jsr emit_a
.9842	a9 4a		lda #$4a	                lda #'J'
.9844	20 e6 8d	jsr $8de6	                jsr emit_a
.9847	20 23 a7	jsr $a723	                jsr xt_zero
.984a	20 23 a7	jsr $a723	                jsr xt_zero
.984d	20 50 83	jsr $8350	                jsr xt_at_xy
.9850	60		rts		z_page:         rts
.9851					xt_paren:
.9851	ca		dex		                dex
.9852	ca		dex		                dex
.9853	a9 29		lda #$29	                lda #41     ; Right parenthesis
.9855	95 00		sta $00,x	                sta 0,x
.9857	74 01		stz $01,x	                stz 1,x
.9859	20 bc 98	jsr $98bc	                jsr xt_parse
.985c	e8		inx		                inx
.985d	e8		inx		                inx
.985e	e8		inx		                inx
.985f	e8		inx		                inx
.9860	60		rts		z_paren:        rts
.9861					xt_parse_name:
.9861	a5 0a		lda $0a		                lda ciblen              ; LSB of counter
.9863	38		sec		                sec
.9864	e5 0c		sbc $0c		                sbc toin
.9866	85 24		sta $24		                sta tmp1
.9868	a5 0b		lda $0b		                lda ciblen+1            ; MSB
.986a	e5 0d		sbc $0d		                sbc toin+1
.986c	85 25		sta $25		                sta tmp1+1
.986e	a5 24		lda $24		                lda tmp1
.9870	05 25		ora $25		                ora tmp1+1
.9872	f0 28		beq $989c	                beq _empty_line
.9874	a5 08		lda $08		                lda cib
.9876	18		clc		                clc
.9877	65 0c		adc $0c		                adc toin
.9879	85 26		sta $26		                sta tmp2                ; LSB of first character
.987b	a5 09		lda $09		                lda cib+1
.987d	65 0d		adc $0d		                adc toin+1
.987f	85 27		sta $27		                sta tmp2+1              ; MSB
.9881					_skip_loop:
.9881	b2 26		lda ($26)	                lda (tmp2)              ; work copy of cib
.9883	20 de d5	jsr $d5de	                jsr is_whitespace
.9886	90 1f		bcc $98a7	                bcc _char_found
.9888	e6 26		inc $26		                inc tmp2
.988a	d0 02		bne $988e	                bne +
.988c	e6 27		inc $27		                inc tmp2+1
.988e					+
.988e	a5 24		lda $24		                lda tmp1
.9890	d0 02		bne $9894	                bne +
.9892	c6 25		dec $25		                dec tmp1+1
.9894	c6 24		dec $24		+               dec tmp1
.9896	a5 24		lda $24		                lda tmp1
.9898	05 25		ora $25		                ora tmp1+1
.989a	d0 e5		bne $9881	                bne _skip_loop          ; fall through if empty line
.989c					_empty_line:
.989c	ca		dex		                dex
.989d	ca		dex		                dex
.989e	ca		dex		                dex
.989f	ca		dex		                dex
.98a0	74 00		stz $00,x	                stz 0,x                 ; TOS is zero
.98a2	74 01		stz $01,x	                stz 1,x
.98a4	4c 53 99	jmp $9953	                jmp z_parse_name        ; skip over PARSE
.98a7					_char_found:
.98a7	a5 26		lda $26		                lda tmp2
.98a9	38		sec		                sec
.98aa	e5 08		sbc $08		                sbc cib
.98ac	85 0c		sta $0c		                sta toin
.98ae	a5 27		lda $27		                lda tmp2+1
.98b0	e5 09		sbc $09		                sbc cib+1
.98b2	85 0d		sta $0d		                sta toin+1
.98b4	ca		dex		                dex
.98b5	ca		dex		                dex
.98b6	a9 20		lda #$20	                lda #AscSP
.98b8	95 00		sta $00,x	                sta 0,x
.98ba	74 01		stz $01,x	                stz 1,x                 ; paranoid, now ( "name" c )
.98bc					xt_parse:
.98bc	20 eb d5	jsr $d5eb	                jsr underflow_1
.98bf	a5 0a		lda $0a		                lda ciblen
.98c1	05 0b		ora $0b		                ora ciblen+1
.98c3	f0 0c		beq $98d1	                beq _abort_parse
.98c5	a5 0d		lda $0d		                lda toin+1              ; MSB
.98c7	c5 0b		cmp $0b		                cmp ciblen+1
.98c9	90 0e		bcc $98d9	                bcc _go_parse           ; unsigned comparison
.98cb	a5 0c		lda $0c		                lda toin                ; LSB
.98cd	c5 0a		cmp $0a		                cmp ciblen
.98cf	90 08		bcc $98d9	                bcc _go_parse
.98d1					_abort_parse:
.98d1	ca		dex		                dex
.98d2	ca		dex		                dex
.98d3	74 00		stz $00,x	                stz 0,x
.98d5	74 01		stz $01,x	                stz 1,x
.98d7	80 7a		bra $9953	                bra _done
.98d9					_go_parse:
.98d9	b5 00		lda $00,x	                lda 0,x
.98db	85 2c		sta $2c		                sta tmptos
.98dd	ca		dex		                dex
.98de	ca		dex		                dex
.98df	a5 08		lda $08		                lda cib
.98e1	18		clc		                clc
.98e2	65 0c		adc $0c		                adc toin        ; LSB
.98e4	85 24		sta $24		                sta tmp1
.98e6	85 26		sta $26		                sta tmp2
.98e8	95 02		sta $02,x	                sta 2,x
.98ea	a5 09		lda $09		                lda cib+1
.98ec	65 0d		adc $0d		                adc toin+1      ; MSB
.98ee	85 25		sta $25		                sta tmp1+1
.98f0	85 27		sta $27		                sta tmp2+1
.98f2	95 03		sta $03,x	                sta 3,x
.98f4	a5 08		lda $08		                lda cib
.98f6	18		clc		                clc
.98f7	65 0a		adc $0a		                adc ciblen
.98f9	85 28		sta $28		                sta tmp3
.98fb	a5 09		lda $09		                lda cib+1
.98fd	65 0b		adc $0b		                adc ciblen+1
.98ff	85 29		sta $29		                sta tmp3+1
.9901	64 2d		stz $2d		                stz tmptos+1
.9903					_loop:
.9903	a5 26		lda $26		                lda tmp2
.9905	c5 28		cmp $28		                cmp tmp3
.9907	d0 06		bne $990f	                bne _not_empty
.9909	a5 27		lda $27		                lda tmp2+1
.990b	c5 29		cmp $29		                cmp tmp3+1
.990d	f0 1d		beq $992c	                beq _eol
.990f					_not_empty:
.990f	b2 26		lda ($26)	                lda (tmp2)
.9911	a4 2c		ldy $2c		                ldy tmptos
.9913	c0 20		cpy #$20	                cpy #AscSP
.9915	d0 07		bne $991e	                bne _not_whitespace
.9917	20 de d5	jsr $d5de	                jsr is_whitespace
.991a	90 02		bcc $991e	                bcc _not_whitespace
.991c	80 0c		bra $992a	                bra _found_delimiter
.991e					_not_whitespace:
.991e	c5 2c		cmp $2c		                cmp tmptos
.9920	f0 08		beq $992a	                beq _found_delimiter
.9922	e6 26		inc $26		                inc tmp2
.9924	d0 dd		bne $9903	                bne _loop
.9926	e6 27		inc $27		                inc tmp2+1
.9928	80 d9		bra $9903	                bra _loop
.992a					_found_delimiter:
.992a	e6 2d		inc $2d		                inc tmptos+1
.992c					_eol:
.992c	a5 26		lda $26		                lda tmp2
.992e	38		sec		                sec
.992f	e5 24		sbc $24		                sbc tmp1
.9931	95 00		sta $00,x	                sta 0,x
.9933	a5 27		lda $27		                lda tmp2+1
.9935	e5 25		sbc $25		                sbc tmp1+1
.9937	95 01		sta $01,x	                sta 1,x
.9939	a5 26		lda $26		                lda tmp2
.993b	38		sec		                sec
.993c	e5 08		sbc $08		                sbc cib
.993e	85 0c		sta $0c		                sta toin
.9940	a5 27		lda $27		                lda tmp2+1
.9942	e5 09		sbc $09		                sbc cib+1
.9944	85 0d		sta $0d		                sta toin+1
.9946	a5 0c		lda $0c		                lda toin
.9948	18		clc		                clc
.9949	65 2d		adc $2d		                adc tmptos+1
.994b	85 0c		sta $0c		                sta toin
.994d	a5 0d		lda $0d		                lda toin+1
.994f	69 00		adc #$00	                adc #0          ; we only need the carry
.9951	85 0d		sta $0d		                sta toin+1
.9953					_done:
.9953					z_parse_name:
.9953	60		rts		z_parse:        rts
.9954					xt_pick:
.9954	16 00		asl $00,x	                asl 0,x         ; we assume u < 128 (stack is small)
.9956	8a		txa		                txa
.9957	75 00		adc $00,x	                adc 0,x
.9959	a8		tay		                tay
.995a	b9 02 00	lda $0002,y	                lda 0002,y
.995d	95 00		sta $00,x	                sta 0,x
.995f	b9 03 00	lda $0003,y	                lda 0003,y
.9962	95 01		sta $01,x	                sta 1,x
.9964	60		rts		z_pick:         rts
.9965					xt_plus:
.9965	20 f0 d5	jsr $d5f0	                jsr underflow_2
.9968	18		clc		                clc
.9969	b5 00		lda $00,x	                lda 0,x         ; LSB
.996b	75 02		adc $02,x	                adc 2,x
.996d	95 02		sta $02,x	                sta 2,x
.996f	b5 01		lda $01,x	                lda 1,x         ; MSB. No CLC, conserve carry bit
.9971	75 03		adc $03,x	                adc 3,x
.9973	95 03		sta $03,x	                sta 3,x
.9975	e8		inx		                inx
.9976	e8		inx		                inx
.9977	60		rts		z_plus:         rts
.9978					xt_plus_store:
.9978	20 f0 d5	jsr $d5f0	                jsr underflow_2
.997b	b5 00		lda $00,x	                lda 0,x
.997d	85 24		sta $24		                sta tmp1
.997f	b5 01		lda $01,x	                lda 1,x
.9981	85 25		sta $25		                sta tmp1+1
.9983	a0 00		ldy #$00	                ldy #0          ; LSB
.9985	b1 24		lda ($24),y	                lda (tmp1),y
.9987	18		clc		                clc
.9988	75 02		adc $02,x	                adc 2,x
.998a	91 24		sta ($24),y	                sta (tmp1),y
.998c	c8		iny		                iny             ; MSB
.998d	b1 24		lda ($24),y	                lda (tmp1),y
.998f	75 03		adc $03,x	                adc 3,x
.9991	91 24		sta ($24),y	                sta (tmp1),y
.9993	e8		inx		                inx
.9994	e8		inx		                inx
.9995	e8		inx		                inx
.9996	e8		inx		                inx
.9997	60		rts		z_plus_store:   rts
.9998					xt_postpone:
.9998	20 61 98	jsr $9861	                jsr xt_parse_name               ; ( -- addr n )
.999b	b5 00		lda $00,x	                lda 0,x
.999d	15 01		ora $01,x	                ora 1,x
.999f	d0 05		bne $99a6	                bne +
.99a1	a9 05		lda #$05	                lda #err_noname
.99a3	4c 01 d6	jmp $d601	                jmp error
.99a6					+
.99a6	20 cb 8f	jsr $8fcb	                jsr xt_find_name                ; ( -- nt | 0 )
.99a9	d0 05		bne $99b0	                bne +
.99ab	a9 05		lda #$05	                lda #err_noname
.99ad	4c 01 d6	jmp $d601	                jmp error
.99b0					+
.99b0	b5 00		lda $00,x	                lda 0,x
.99b2	85 24		sta $24		                sta tmp1
.99b4	b5 01		lda $01,x	                lda 1,x
.99b6	85 25		sta $25		                sta tmp1+1
.99b8	20 d1 95	jsr $95d1	                jsr xt_name_to_int              ; ( nt -- xt )
.99bb	e6 24		inc $24		                inc tmp1
.99bd	d0 02		bne $99c1	                bne +
.99bf	e6 25		inc $25		                inc tmp1+1
.99c1					+
.99c1	b2 24		lda ($24)	                lda (tmp1)
.99c3	29 04		and #$04	                and #IM         ; mask all but Intermediate flag
.99c5	f0 05		beq $99cc	                beq _not_immediate
.99c7	20 dd 87	jsr $87dd	                jsr xt_compile_comma
.99ca	80 0a		bra $99d6	                bra _done
.99cc					_not_immediate:
.99cc	20 7a 93	jsr $937a	                jsr xt_literal
.99cf	a0 87		ldy #$87	                ldy #>xt_compile_comma
.99d1	a9 dd		lda #$dd	                lda #<xt_compile_comma
.99d3	20 8e d4	jsr $d48e	                jsr cmpl_subroutine
.99d6					_done:
.99d6	60		rts		z_postpone:     rts
.99d7					xt_previous:
.99d7	20 24 91	jsr $9124	                jsr xt_get_order
.99da	20 32 96	jsr $9632	                jsr xt_nip
.99dd	20 93 97	jsr $9793	                jsr xt_one_minus
.99e0	20 9d 9c	jsr $9c9d	                jsr xt_set_order
.99e3	60		rts		z_previous:     rts
.99e4					xt_question:
.99e4	20 70 8f	jsr $8f70	                jsr xt_fetch
.99e7	20 26 8c	jsr $8c26	                jsr xt_dot
.99ea	60		rts		z_question:     rts
.99eb					xt_question_dup:
.99eb	20 eb d5	jsr $d5eb	                jsr underflow_1
.99ee	b5 00		lda $00,x	                lda 0,x
.99f0	15 01		ora $01,x	                ora 1,x
.99f2	f0 0a		beq $99fe	                beq _done
.99f4	ca		dex		                dex
.99f5	ca		dex		                dex
.99f6	b5 02		lda $02,x	                lda 2,x
.99f8	95 00		sta $00,x	                sta 0,x
.99fa	b5 03		lda $03,x	                lda 3,x
.99fc	95 01		sta $01,x	                sta 1,x
.99fe					_done:
.99fe	60		rts		z_question_dup: rts
.99ff					xt_r_fetch:
.99ff	7a		ply		                ply             ; LSB
.9a00	84 24		sty $24		                sty tmp1
.9a02	7a		ply		                ply             ; MSB
.9a03	ca		dex		                dex
.9a04	ca		dex		                dex
.9a05	68		pla		                pla             ; LSB
.9a06	95 00		sta $00,x	                sta 0,x
.9a08	68		pla		                pla             ; MSB
.9a09	95 01		sta $01,x	                sta 1,x
.9a0b	48		pha		                pha
.9a0c	b5 00		lda $00,x	                lda 0,x
.9a0e	48		pha		                pha
.9a0f	5a		phy		                phy             ; MSB
.9a10	a4 24		ldy $24		                ldy tmp1
.9a12	5a		phy		                phy             ; LSB
.9a13	60		rts		z_r_fetch:      rts
.9a14					xt_r_from:
.9a14	68		pla		                pla             ; LSB
.9a15	85 2c		sta $2c		                sta tmptos
.9a17	7a		ply		                ply             ; MSB
.9a18	ca		dex		                dex
.9a19	ca		dex		                dex
.9a1a	68		pla		                pla             ; LSB
.9a1b	95 00		sta $00,x	                sta 0,x
.9a1d	68		pla		                pla             ; MSB
.9a1e	95 01		sta $01,x	                sta 1,x
.9a20	5a		phy		                phy             ; MSB
.9a21	a5 2c		lda $2c		                lda tmptos
.9a23	48		pha		                pha             ; LSB
.9a24	60		rts		z_r_from:       rts
.9a25					xt_r_to_input:
.9a25	68		pla		                pla
.9a26	85 24		sta $24		                sta tmp1
.9a28	68		pla		                pla
.9a29	85 25		sta $25		                sta tmp1+1
.9a2b	a0 00		ldy #$00	                ldy #0
.9a2d					_loop:
.9a2d	68		pla		                pla
.9a2e	99 06 00	sta $0006,y	                sta insrc,y
.9a31	c8		iny		                iny
.9a32	c0 08		cpy #$08	                cpy #8
.9a34	d0 f7		bne $9a2d	                bne _loop
.9a36	a5 25		lda $25		                lda tmp1+1
.9a38	48		pha		                pha
.9a39	a5 24		lda $24		                lda tmp1
.9a3b	48		pha		                pha
.9a3c	60		rts		z_r_to_input: 	rts
.9a3d					xt_recurse:
.9a3d	a0 00		ldy #$00	                ldy #0
.9a3f	a9 20		lda #$20	                lda #$20        ; opcode for JSR
.9a41	91 00		sta ($00),y	                sta (cp),y
.9a43	c8		iny		                iny
.9a44	24 20		bit $20		                bit status
.9a46	70 0c		bvs $9a54	                bvs _nt_in_workword
.9a48	a5 04		lda $04		                lda workword
.9a4a	91 00		sta ($00),y	                sta (cp),y
.9a4c	c8		iny		                iny
.9a4d	a5 05		lda $05		                lda workword+1
.9a4f	91 00		sta ($00),y	                sta (cp),y
.9a51	c8		iny		                iny
.9a52	80 1b		bra $9a6f	                bra _update_cp
.9a54					_nt_in_workword:
.9a54	a5 04		lda $04		                lda workword            ; LSB
.9a56	18		clc		                clc
.9a57	69 04		adc #$04	                adc #4
.9a59	85 24		sta $24		                sta tmp1
.9a5b	a5 05		lda $05		                lda workword+1          ; MSB
.9a5d	69 00		adc #$00	                adc #0
.9a5f	85 25		sta $25		                sta tmp1+1
.9a61	b2 24		lda ($24)	                lda (tmp1)
.9a63	91 00		sta ($00),y	                sta (cp),y
.9a65	5a		phy		                phy
.9a66	a0 01		ldy #$01	                ldy #1
.9a68	b1 24		lda ($24),y	                lda (tmp1),y
.9a6a	7a		ply		                ply
.9a6b	c8		iny		                iny
.9a6c	91 00		sta ($00),y	                sta (cp),y
.9a6e	c8		iny		                iny
.9a6f					_update_cp:
.9a6f	98		tya		                tya
.9a70	18		clc		                clc
.9a71	65 00		adc $00		                adc cp
.9a73	85 00		sta $00		                sta cp
.9a75	90 02		bcc $9a79	                bcc _done
.9a77	e6 01		inc $01		                inc cp+1
.9a79					_done:
.9a79	60		rts		z_recurse:      rts
.9a7a					xt_refill:
.9a7a	a5 06		lda $06		                lda insrc               ; cheat: We only check LSB
.9a7c	d0 2d		bne $9aab	                bne _src_not_kbd
.9a7e	ca		dex		                dex
.9a7f	ca		dex		                dex
.9a80	ca		dex		                dex
.9a81	ca		dex		                dex
.9a82	a5 08		lda $08		                lda cib                 ; address of CIB is NOS
.9a84	95 02		sta $02,x	                sta 2,x
.9a86	a5 09		lda $09		                lda cib+1
.9a88	95 03		sta $03,x	                sta 3,x
.9a8a	64 0a		stz $0a		                stz ciblen              ; go in with empty buffer
.9a8c	64 0b		stz $0b		                stz ciblen+1
.9a8e	a9 ff		lda #$ff	                lda #bsize              ; max number of chars is TOS
.9a90	95 00		sta $00,x	                sta 0,x
.9a92	74 01		stz $01,x	                stz 1,x                 ; cheat: We only accept max 255
.9a94	20 4e 81	jsr $814e	                jsr xt_accept           ; ( addr n1 -- n2)
.9a97	b5 00		lda $00,x	                lda 0,x
.9a99	85 0a		sta $0a		                sta ciblen
.9a9b	b5 01		lda $01,x	                lda 1,x
.9a9d	85 0b		sta $0b		                sta ciblen+1            ; though we only accept 255 chars
.9a9f	64 0c		stz $0c		                stz toin
.9aa1	64 0d		stz $0d		                stz toin+1
.9aa3	a9 ff		lda #$ff	                lda #$FF                ; overwrite with TRUE flag
.9aa5	95 00		sta $00,x	                sta 0,x
.9aa7	95 01		sta $01,x	                sta 1,x
.9aa9	80 10		bra $9abb	                bra _done
.9aab					_src_not_kbd:
.9aab	1a		inc a		                ina
.9aac	d0 08		bne $9ab6	                bne _src_not_string
.9aae	ca		dex		                dex
.9aaf	ca		dex		                dex
.9ab0	74 00		stz $00,x	                stz 0,x
.9ab2	74 01		stz $01,x	                stz 1,x
.9ab4	80 05		bra $9abb	                bra z_refill
.9ab6					_src_not_string:
.9ab6	a9 01		lda #$01	                lda #err_badsource
.9ab8	4c 01 d6	jmp $d601	                jmp error
.9abb					_done:
.9abb	60		rts		z_refill:       rts
.9abc					xt_repeat:
.9abc	20 89 82	jsr $8289	                jsr xt_again
.9abf	20 62 91	jsr $9162	                jsr xt_here
.9ac2	20 2a a1	jsr $a12a	                jsr xt_swap
.9ac5	20 09 a1	jsr $a109	                jsr xt_store
.9ac8	60		rts		z_repeat:       rts
.9ac9					xt_right_bracket:
.9ac9	a9 ff		lda #$ff	                lda #$FF
.9acb	85 16		sta $16		                sta state
.9acd	85 17		sta $17		                sta state+1
.9acf					z_right_bracket:
.9acf	60		rts		                rts
.9ad0					xt_root_wordlist:
.9ad0	ca		dex		                dex             ; The WID for the Root wordlist is 3.
.9ad1	ca		dex		                dex
.9ad2	a9 03		lda #$03	                lda #3
.9ad4	95 00		sta $00,x	                sta 0,x
.9ad6	74 01		stz $01,x	                stz 1,x
.9ad8					z_root_wordlist:
.9ad8	60		rts		                rts
.9ad9					xt_rot:
.9ad9	20 f5 d5	jsr $d5f5	                jsr underflow_3
.9adc	b4 05		ldy $05,x	                ldy 5,x         ; MSB first
.9ade	b5 03		lda $03,x	                lda 3,x
.9ae0	95 05		sta $05,x	                sta 5,x
.9ae2	b5 01		lda $01,x	                lda 1,x
.9ae4	95 03		sta $03,x	                sta 3,x
.9ae6	94 01		sty $01,x	                sty 1,x
.9ae8	b4 04		ldy $04,x	                ldy 4,x         ; LSB next
.9aea	b5 02		lda $02,x	                lda 2,x
.9aec	95 04		sta $04,x	                sta 4,x
.9aee	b5 00		lda $00,x	                lda 0,x
.9af0	95 02		sta $02,x	                sta 2,x
.9af2	94 00		sty $00,x	                sty 0,x
.9af4	60		rts		z_rot:          rts
.9af5					xt_rshift:
.9af5	20 f0 d5	jsr $d5f0	                jsr underflow_2
.9af8	b5 00		lda $00,x	                lda 0,x
.9afa	29 0f		and #$0f	                and #%00001111
.9afc	f0 08		beq $9b06	                beq _done               ; if 0 shifts, quit
.9afe	a8		tay		                tay
.9aff					_loop:
.9aff	56 03		lsr $03,x	                lsr 3,x
.9b01	76 02		ror $02,x	                ror 2,x
.9b03	88		dey		                dey
.9b04	d0 f9		bne $9aff	                bne _loop
.9b06					_done:
.9b06	e8		inx		                inx
.9b07	e8		inx		                inx
.9b08	60		rts		z_rshift:       rts
.9b09					xt_s_backslash_quote:
.9b09	a9 ff		lda #$ff	                lda #$FF
.9b0b	85 26		sta $26		                sta tmp2
.9b0d	64 27		stz $27		                stz tmp2+1
.9b0f	20 d5 9c	jsr $9cd5	                jsr s_quote_start
.9b12					_done:
.9b12					z_s_backslash_quote:
.9b12	60		rts		                rts
.9b13					convert_hex_value:
.9b13	c9 41		cmp #$41	        cmp #'A'
.9b15	90 07		bcc $9b1e	        bcc _digit
.9b17	29 df		and #$df	        and #$DF                ; Make it uppercase.
.9b19	38		sec		        sec
.9b1a	e9 37		sbc #$37	        sbc #'7'                 ; gives value 10 for 'A'
.9b1c	80 03		bra $9b21	        bra _done
.9b1e					_digit:
.9b1e	38		sec		        sec
.9b1f	e9 30		sbc #$30	        sbc #'0'
.9b21					_done:
.9b21	60		rts		        rts
.9b22					xt_search_wordlist:
.9b22	20 f5 d5	jsr $d5f5	                jsr underflow_3
.9b25	a5 1e		lda $1e		                lda up
.9b27	18		clc		                clc
.9b28	69 06		adc #$06	                adc #wordlists_offset
.9b2a	85 26		sta $26		                sta tmp2
.9b2c	a5 1f		lda $1f		                lda up+1
.9b2e	69 00		adc #$00	                adc #0          ; Adding carry
.9b30	85 27		sta $27		                sta tmp2+1
.9b32	b5 00		lda $00,x	                lda 0,x
.9b34	0a		asl a		                asl             ; Convert wid to offset in cells (x2)
.9b35	65 26		adc $26		                adc tmp2
.9b37	85 26		sta $26		                sta tmp2
.9b39	90 02		bcc $9b3d	                bcc +
.9b3b	e6 27		inc $27		                inc tmp2+1      ; Propagate carry if needed.
.9b3d					+
.9b3d	e8		inx		                inx
.9b3e	e8		inx		                inx
.9b3f	b5 00		lda $00,x	                lda 0,x
.9b41	15 01		ora $01,x	                ora 1,x
.9b43	d0 03		bne $9b48	                bne _check_wordlist
.9b45	4c 00 9c	jmp $9c00	                jmp _done
.9b48					_check_wordlist:
.9b48	a5 26		lda $26		                lda tmp2
.9b4a	05 27		ora $27		                ora tmp2+1
.9b4c	d0 03		bne $9b51	                bne _have_string
.9b4e	4c 00 9c	jmp $9c00	                jmp _done
.9b51					_have_string:
.9b51	b2 26		lda ($26)	                lda (tmp2)              ; nt of first word in Dictionary
.9b53	85 24		sta $24		                sta tmp1
.9b55	e6 26		inc $26		                inc tmp2                ; Move to the upper byte
.9b57	d0 02		bne $9b5b	                bne +
.9b59	e6 27		inc $27		                inc tmp2+1
.9b5b					+
.9b5b	b2 26		lda ($26)	                lda (tmp2)
.9b5d	85 25		sta $25		                sta tmp1+1
.9b5f	b5 02		lda $02,x	                lda 2,x                 ; Address of mystery string
.9b61	85 26		sta $26		                sta tmp2
.9b63	b5 03		lda $03,x	                lda 3,x
.9b65	85 27		sta $27		                sta tmp2+1
.9b67					_loop:
.9b67	b2 24		lda ($24)	                lda (tmp1)
.9b69	d5 00		cmp $00,x	                cmp 0,x
.9b6b	d0 7b		bne $9be8	                bne _next_entry
.9b6d					_compare_string:
.9b6d	b2 26		lda ($26)	                lda (tmp2)      ; first character of mystery string
.9b6f	c9 5b		cmp #$5b	                cmp #$5B        ; ASCII '[' (one past Z)
.9b71	b0 07		bcs $9b7a	                bcs _compare_first
.9b73	c9 41		cmp #$41	                cmp #$41        ; ASCII 'A'
.9b75	90 03		bcc $9b7a	                bcc _compare_first
.9b77	18		clc		                clc
.9b78	69 20		adc #$20	                adc #$20
.9b7a					_compare_first:
.9b7a	a0 08		ldy #$08	                ldy #8          ; Offset in nt to name
.9b7c	d1 24		cmp ($24),y	                cmp (tmp1),y    ; first character of current word
.9b7e	d0 68		bne $9be8	                bne _next_entry
.9b80	b5 00		lda $00,x	                lda 0,x
.9b82	3a		dec a		                dea
.9b83	f0 2c		beq $9bb1	                beq _success
.9b85	a5 24		lda $24		                lda tmp1
.9b87	48		pha		                pha             ; Preserve tmp1 on the return stack.
.9b88	18		clc		                clc
.9b89	69 08		adc #$08	                adc #8
.9b8b	85 24		sta $24		                sta tmp1        ; Reusing tmp1 temporarily for string check.
.9b8d	a5 25		lda $25		                lda tmp1+1
.9b8f	48		pha		                pha             ; Preserve tmp1+1 on the return stack.
.9b90	69 00		adc #$00	                adc #0          ; we only need the carry
.9b92	85 25		sta $25		                sta tmp1+1
.9b94	b4 00		ldy $00,x	                ldy 0,x         ; index is length of string minus 1
.9b96	88		dey		                dey
.9b97					_string_loop:
.9b97	b1 26		lda ($26),y	                lda (tmp2),y    ; last char of mystery string
.9b99	c9 5b		cmp #$5b	                cmp #$5B         ; ASCII '[' (one past Z)
.9b9b	b0 07		bcs $9ba4	                bcs _check_char
.9b9d	c9 41		cmp #$41	                cmp #$41        ; ASCII 'A'
.9b9f	90 03		bcc $9ba4	                bcc _check_char
.9ba1	18		clc		                clc
.9ba2	69 20		adc #$20	                adc #$20
.9ba4					_check_char:
.9ba4	d1 24		cmp ($24),y	                cmp (tmp1),y    ; last char of word we're testing against
.9ba6	d0 3a		bne $9be2	                bne _next_entry_tmp1
.9ba8	88		dey		                dey
.9ba9	d0 ec		bne $9b97	                bne _string_loop
.9bab					_success_tmp1:
.9bab	68		pla		                pla             ; Restore tmp1 from the return stack.
.9bac	85 25		sta $25		                sta tmp1+1
.9bae	68		pla		                pla
.9baf	85 24		sta $24		                sta tmp1
.9bb1					_success:
.9bb1	e8		inx		                inx
.9bb2	e8		inx		                inx
.9bb3	a5 24		lda $24		                lda tmp1
.9bb5	95 00		sta $00,x	                sta 0,x
.9bb7	a5 25		lda $25		                lda tmp1+1
.9bb9	95 01		sta $01,x	                sta 1,x
.9bbb	20 9f 8d	jsr $8d9f	                jsr xt_dup              ; ( nt nt )
.9bbe	20 d1 95	jsr $95d1	                jsr xt_name_to_int      ; ( nt xt )
.9bc1	20 2a a1	jsr $a12a	                jsr xt_swap             ; ( xt nt )
.9bc4	a0 00		ldy #$00	                ldy #0                  ; Prepare flag
.9bc6	f6 00		inc $00,x	                inc 0,x
.9bc8	d0 02		bne $9bcc	                bne +
.9bca	f6 01		inc $01,x	                inc 1,x                 ; ( xt nt+1 )
.9bcc					+
.9bcc	a1 00		lda ($00,x)	                lda (0,x)               ; ( xt char )
.9bce	29 04		and #$04	                and #IM
.9bd0	d0 08		bne $9bda	                bne _immediate          ; bit set, we're immediate
.9bd2	a9 ff		lda #$ff	                lda #$FF                ; We're not immediate, return -1
.9bd4	95 00		sta $00,x	                sta 0,x
.9bd6	95 01		sta $01,x	                sta 1,x
.9bd8	80 28		bra $9c02	                bra _done_nodrop
.9bda					_immediate:
.9bda	a9 01		lda #$01	                lda #1                  ; We're immediate, return 1
.9bdc	95 00		sta $00,x	                sta 0,x
.9bde	74 01		stz $01,x	                stz 1,x
.9be0	80 20		bra $9c02	                bra _done_nodrop
.9be2					_next_entry_tmp1:
.9be2	68		pla		                pla             ; Restore tmp1 from the return stack.
.9be3	85 25		sta $25		                sta tmp1+1
.9be5	68		pla		                pla
.9be6	85 24		sta $24		                sta tmp1
.9be8					_next_entry:
.9be8	a0 02		ldy #$02	                ldy #2
.9bea	b1 24		lda ($24),y	                lda (tmp1),y
.9bec	48		pha		                pha
.9bed	c8		iny		                iny
.9bee	b1 24		lda ($24),y	                lda (tmp1),y
.9bf0	85 25		sta $25		                sta tmp1+1
.9bf2	68		pla		                pla
.9bf3	85 24		sta $24		                sta tmp1
.9bf5	05 25		ora $25		                ora tmp1+1
.9bf7	f0 03		beq $9bfc	                beq _fail_done
.9bf9	4c 67 9b	jmp $9b67	                jmp _loop
.9bfc					_fail_done:
.9bfc	74 02		stz $02,x	                stz 2,x         ; failure flag
.9bfe	74 03		stz $03,x	                stz 3,x
.9c00					_done:
.9c00	e8		inx		                inx
.9c01	e8		inx		                inx
.9c02					_done_nodrop:
.9c02					z_search_wordlist:
.9c02	60		rts		                rts
.9c03					xt_see:
.9c03	20 61 98	jsr $9861	                jsr xt_parse_name       ; ( addr u )
.9c06	20 cb 8f	jsr $8fcb	                jsr xt_find_name        ; ( nt | 0 )
.9c09	b5 00		lda $00,x	                lda 0,x
.9c0b	15 01		ora $01,x	                ora 1,x
.9c0d	d0 05		bne $9c14	                bne +
.9c0f	a9 05		lda #$05	                lda #err_noname
.9c11	4c 01 d6	jmp $d601	                jmp error
.9c14					+
.9c14	20 53 89	jsr $8953	                jsr xt_cr
.9c17	a5 18		lda $18		                lda base
.9c19	48		pha		                pha
.9c1a	20 6d 91	jsr $916d	                jsr xt_hex
.9c1d	a9 0a		lda #$0a	                lda #str_see_nt
.9c1f	20 17 d6	jsr $d617	                jsr print_string_no_lf
.9c22	20 9f 8d	jsr $8d9f	                jsr xt_dup              ; ( nt nt )
.9c25	20 aa a4	jsr $a4aa	                jsr xt_u_dot
.9c28	20 a0 a0	jsr $a0a0	                jsr xt_space            ; ( nt )
.9c2b	20 9f 8d	jsr $8d9f	                jsr xt_dup              ; ( nt nt )
.9c2e	20 d1 95	jsr $95d1	                jsr xt_name_to_int      ; ( nt xt )
.9c31	a9 0b		lda #$0b	                lda #str_see_xt
.9c33	20 17 d6	jsr $d617	                jsr print_string_no_lf
.9c36	20 9f 8d	jsr $8d9f	                jsr xt_dup              ; ( nt xt xt )
.9c39	20 aa a4	jsr $a4aa	                jsr xt_u_dot
.9c3c	20 53 89	jsr $8953	                jsr xt_cr               ; ( nt xt )
.9c3f	a9 09		lda #$09	                lda #str_see_flags
.9c41	20 17 d6	jsr $d617	                jsr print_string_no_lf
.9c44	20 15 98	jsr $9815	                jsr xt_over             ; ( nt xt nt )
.9c47	20 9f 97	jsr $979f	                jsr xt_one_plus         ; ( nt xt nt+1 )
.9c4a	20 70 8f	jsr $8f70	                jsr xt_fetch            ; ( nt xt flags )
.9c4d	b5 00		lda $00,x	                lda 0,x
.9c4f	a0 06		ldy #$06	                ldy #6                  ; Not all bits are used
.9c51					_flag_loop:
.9c51	48		pha		                pha
.9c52	29 01		and #$01	                and #%00000001
.9c54	18		clc		                clc
.9c55	69 30		adc #$30	                adc #$30                ; ASCII "0"
.9c57	20 e6 8d	jsr $8de6	                jsr emit_a
.9c5a	20 a0 a0	jsr $a0a0	                jsr xt_space
.9c5d	68		pla		                pla
.9c5e	6a		ror a		                ror                     ; Next flag
.9c5f	88		dey		                dey
.9c60	d0 ef		bne $9c51	                bne _flag_loop
.9c62	20 53 89	jsr $8953	                jsr xt_cr
.9c65	e8		inx		                inx
.9c66	e8		inx		                inx                     ; ( nt xt )
.9c67	a9 0c		lda #$0c	                lda #str_see_size
.9c69	20 17 d6	jsr $d617	                jsr print_string_no_lf
.9c6c	20 2a a1	jsr $a12a	                jsr xt_swap             ; ( xt nt )
.9c6f	20 f0 a6	jsr $a6f0	                jsr xt_wordsize         ; ( xt u )
.9c72	20 9f 8d	jsr $8d9f	                jsr xt_dup              ; ( xt u u ) for DUMP and DISASM
.9c75	20 95 8a	jsr $8a95	                jsr xt_decimal
.9c78	20 aa a4	jsr $a4aa	                jsr xt_u_dot            ; ( xt u )
.9c7b	20 6d 91	jsr $916d	                jsr xt_hex
.9c7e	20 53 89	jsr $8953	                jsr xt_cr
.9c81	20 34 a3	jsr $a334	                jsr xt_two_dup          ; ( xt u xt u )
.9c84	20 24 8d	jsr $8d24	                jsr xt_dump
.9c87	20 53 89	jsr $8953	                jsr xt_cr
.9c8a	20 2a 8b	jsr $8b2a	                jsr xt_disasm
.9c8d	68		pla		                pla
.9c8e	85 18		sta $18		                sta base
.9c90	60		rts		z_see:          rts
.9c91					xt_set_current:
.9c91	20 eb d5	jsr $d5eb	                jsr underflow_1
.9c94	a0 04		ldy #$04	                ldy #current_offset
.9c96	b5 00		lda $00,x	                lda 0,x         ; CURRENT is byte variable
.9c98	91 1e		sta ($1e),y	                sta (up),y      ; so only the LSB is used.
.9c9a	e8		inx		                inx
.9c9b	e8		inx		                inx
.9c9c	60		rts		z_set_current:  rts
.9c9d					xt_set_order:
.9c9d	a9 ff		lda #$ff	                lda #$FF
.9c9f	d5 01		cmp $01,x	                cmp 1,x
.9ca1	d0 12		bne $9cb5	                bne _start
.9ca3	d5 00		cmp $00,x	                cmp 0,x
.9ca5	d0 0e		bne $9cb5	                bne _start
.9ca7	ca		dex		                dex             ; Make room for the count.
.9ca8	ca		dex		                dex
.9ca9	74 03		stz $03,x	                stz 3,x         ; ROOT-WORDLIST is 3
.9cab	a9 03		lda #$03	                lda #3
.9cad	95 02		sta $02,x	                sta 2,x
.9caf	74 01		stz $01,x	                stz 1,x         ; Count is 1.
.9cb1	a9 01		lda #$01	                lda #1
.9cb3	95 00		sta $00,x	                sta 0,x
.9cb5					_start:
.9cb5	a0 1e		ldy #$1e	                ldy #num_order_offset
.9cb7	b5 00		lda $00,x	                lda 0,x
.9cb9	91 1e		sta ($1e),y	                sta (up),y      ; #ORDER is a byte variable.
.9cbb	85 24		sta $24		                sta tmp1        ; Save a copy for zero check and looping.
.9cbd	e8		inx		                inx             ; Drop the count off the data stack.
.9cbe	e8		inx		                inx
.9cbf	a5 24		lda $24		                lda tmp1
.9cc1	f0 0d		beq $9cd0	                beq _done       ; If zero, there are no wordlists.
.9cc3	a0 1f		ldy #$1f	                ldy #search_order_offset
.9cc5					_loop:
.9cc5	b5 00		lda $00,x	                lda 0,x         ; The search order is a byte array
.9cc7	91 1e		sta ($1e),y	                sta (up),y      ; so only save the LSB
.9cc9	c8		iny		                iny
.9cca	e8		inx		                inx
.9ccb	e8		inx		                inx
.9ccc	c6 24		dec $24		                dec tmp1
.9cce	d0 f5		bne $9cc5	                bne _loop
.9cd0					_done:
.9cd0	60		rts		z_set_order:    rts
.9cd1					xt_s_quote:
.9cd1	64 26		stz $26		                stz tmp2
.9cd3	64 27		stz $27		                stz tmp2+1
.9cd5					s_quote_start:
.9cd5	ca		dex		                dex
.9cd6	ca		dex		                dex
.9cd7	ca		dex		                dex
.9cd8	ca		dex		                dex
.9cd9	a9 4c		lda #$4c	                lda #$4C
.9cdb	20 9e d4	jsr $d49e	                jsr cmpl_a
.9cde	20 9e d4	jsr $d49e	                jsr cmpl_a
.9ce1	20 9e d4	jsr $d49e	                jsr cmpl_a
.9ce4	a5 00		lda $00		                lda cp
.9ce6	95 02		sta $02,x	                sta 2,x
.9ce8	a5 01		lda $01		                lda cp+1
.9cea	95 03		sta $03,x	                sta 3,x
.9cec					_savechars_loop:
.9cec	a5 0d		lda $0d		                lda toin+1              ; MSB
.9cee	c5 0b		cmp $0b		                cmp ciblen+1
.9cf0	90 2a		bcc $9d1c	                bcc _input_fine         ; unsigned comparison
.9cf2	a5 0c		lda $0c		                lda toin                ; LSB
.9cf4	c5 0a		cmp $0a		                cmp ciblen
.9cf6	90 24		bcc $9d1c	                bcc _input_fine
.9cf8	a5 26		lda $26		                lda tmp2
.9cfa	48		pha		                pha
.9cfb	a5 27		lda $27		                lda tmp2+1
.9cfd	48		pha		                pha
.9cfe	a5 28		lda $28		                lda tmp3    ; Only tmp3 used, so don't bother with tmp3+1
.9d00	48		pha		                pha
.9d01	20 7a 9a	jsr $9a7a	                jsr xt_refill           ; ( -- f )
.9d04	68		pla		                pla
.9d05	85 28		sta $28		                sta tmp3
.9d07	68		pla		                pla
.9d08	85 27		sta $27		                sta tmp2+1
.9d0a	68		pla		                pla
.9d0b	85 26		sta $26		                sta tmp2
.9d0d	b5 00		lda $00,x	                lda 0,x
.9d0f	15 01		ora $01,x	                ora 1,x
.9d11	d0 05		bne $9d18	                bne _refill_ok
.9d13	a9 06		lda #$06	                lda #err_refill
.9d15	4c 01 d6	jmp $d601	                jmp error
.9d18					_refill_ok:
.9d18	e8		inx		                inx
.9d19	e8		inx		                inx
.9d1a	80 d0		bra $9cec	                bra _savechars_loop
.9d1c					_input_fine:
.9d1c	a5 08		lda $08		                lda cib
.9d1e	18		clc		                clc
.9d1f	65 0c		adc $0c		                adc toin        ; LSB
.9d21	85 24		sta $24		                sta tmp1
.9d23	a5 09		lda $09		                lda cib+1
.9d25	65 0d		adc $0d		                adc toin+1      ; MSB
.9d27	85 25		sta $25		                sta tmp1+1
.9d29	b2 24		lda ($24)	                lda (tmp1)
.9d2b	24 26		bit $26		                bit tmp2
.9d2d	30 03		bmi $9d32	                bmi _handle_escapes    ; Only checking bit 7
.9d2f	4c ea 9d	jmp $9dea	                jmp _regular_char
.9d32					_handle_escapes:
.9d32	24 27		bit $27		                bit tmp2+1
.9d34	30 03		bmi $9d39	                bmi _escaped
.9d36	4c e0 9d	jmp $9de0	                jmp _not_escaped
.9d39					_escaped:
.9d39	70 22		bvs $9d5d	                bvs _check_esc_chars
.9d3b	a9 01		lda #$01	                lda #1
.9d3d	24 27		bit $27		                bit tmp2+1
.9d3f	d0 10		bne $9d51	                bne _esc_x_second_digit
.9d41	e6 27		inc $27		                inc tmp2+1  ; Adjust flag for second digit next time.
.9d43	b2 24		lda ($24)	                lda (tmp1)  ; Get the char again.
.9d45	20 13 9b	jsr $9b13	                jsr convert_hex_value
.9d48	0a		asl a		                asl
.9d49	0a		asl a		                asl
.9d4a	0a		asl a		                asl
.9d4b	0a		asl a		                asl
.9d4c	85 28		sta $28		                sta tmp3    ; Save it for later.
.9d4e	4c f1 9d	jmp $9df1	                jmp _next_character
.9d51					_esc_x_second_digit:
.9d51	64 27		stz $27		                stz tmp2+1
.9d53	b2 24		lda ($24)	                lda (tmp1)
.9d55	20 13 9b	jsr $9b13	                jsr convert_hex_value
.9d58	05 28		ora $28		                ora tmp3
.9d5a	4c ee 9d	jmp $9dee	                jmp _save_character
.9d5d					_check_esc_chars:
.9d5d	64 27		stz $27		                stz tmp2+1
.9d5f					_check_esc_a:
.9d5f	c9 61		cmp #$61	                cmp #'a'
.9d61	d0 05		bne $9d68	                bne _check_esc_b
.9d63	a9 07		lda #$07	                lda #7
.9d65	4c ee 9d	jmp $9dee	                jmp _save_character
.9d68					_check_esc_b:
.9d68	c9 62		cmp #$62	                cmp #'b'
.9d6a	d0 05		bne $9d71	                bne _check_esc_e
.9d6c	a9 08		lda #$08	                lda #8
.9d6e	4c ee 9d	jmp $9dee	                jmp _save_character
.9d71					_check_esc_e:
.9d71	c9 65		cmp #$65	                cmp #'e'
.9d73	d0 04		bne $9d79	                bne _check_esc_f
.9d75	a9 1b		lda #$1b	                lda #27
.9d77	80 75		bra $9dee	                bra _save_character
.9d79					_check_esc_f:
.9d79	c9 66		cmp #$66	                cmp #'f'
.9d7b	d0 04		bne $9d81	                bne _check_esc_l
.9d7d	a9 0c		lda #$0c	                lda #12
.9d7f	80 6d		bra $9dee	                bra _save_character
.9d81					_check_esc_l:
.9d81	c9 6c		cmp #$6c	                cmp #'l'
.9d83	d0 04		bne $9d89	                bne _check_esc_m
.9d85	a9 0a		lda #$0a	                lda #10
.9d87	80 65		bra $9dee	                bra _save_character
.9d89					_check_esc_m:
.9d89	c9 6d		cmp #$6d	                cmp #'m'
.9d8b	d0 09		bne $9d96	                bne _check_esc_n
.9d8d	a9 0d		lda #$0d	                lda #13
.9d8f	20 9e d4	jsr $d49e	                jsr cmpl_a
.9d92	a9 0a		lda #$0a	                lda #10
.9d94	80 58		bra $9dee	                bra _save_character
.9d96					_check_esc_n:
.9d96	c9 6e		cmp #$6e	                cmp #'n'
.9d98	d0 04		bne $9d9e	                bne _check_esc_q
.9d9a	a9 0a		lda #$0a	                lda #10
.9d9c	80 50		bra $9dee	                bra _save_character
.9d9e					_check_esc_q:
.9d9e	c9 71		cmp #$71	                cmp #'q'
.9da0	d0 04		bne $9da6	                bne _check_esc_r
.9da2	a9 22		lda #$22	                lda #34
.9da4	80 48		bra $9dee	                bra _save_character
.9da6					_check_esc_r:
.9da6	c9 72		cmp #$72	                cmp #'r'
.9da8	d0 04		bne $9dae	                bne _check_esc_t
.9daa	a9 0d		lda #$0d	                lda #13
.9dac	80 40		bra $9dee	                bra _save_character
.9dae					_check_esc_t:
.9dae	c9 74		cmp #$74	                cmp #'t'
.9db0	d0 04		bne $9db6	                bne _check_esc_v
.9db2	a9 09		lda #$09	                lda #9
.9db4	80 38		bra $9dee	                bra _save_character
.9db6					_check_esc_v:
.9db6	c9 76		cmp #$76	                cmp #'v'
.9db8	d0 04		bne $9dbe	                bne _check_esc_z
.9dba	a9 0b		lda #$0b	                lda #11
.9dbc	80 30		bra $9dee	                bra _save_character
.9dbe					_check_esc_z:
.9dbe	c9 7a		cmp #$7a	                cmp #'z'
.9dc0	d0 04		bne $9dc6	                bne _check_esc_quote
.9dc2	a9 00		lda #$00	                lda #0
.9dc4	80 28		bra $9dee	                bra _save_character
.9dc6					_check_esc_quote:
.9dc6	c9 22		cmp #$22	                cmp #$22
.9dc8	d0 04		bne $9dce	                bne _check_esc_x
.9dca	a9 22		lda #$22	                lda #34
.9dcc	80 20		bra $9dee	                bra _save_character
.9dce					_check_esc_x:
.9dce	c9 78		cmp #$78	                cmp #'x'
.9dd0	d0 06		bne $9dd8	                bne _check_esc_backslash
.9dd2	a9 be		lda #$be	                lda #$BE        ; Clear bits 6 and 0
.9dd4	85 27		sta $27		                sta tmp2+1
.9dd6	80 19		bra $9df1	                bra _next_character
.9dd8					_check_esc_backslash:
.9dd8	c9 5c		cmp #$5c	                cmp #$5C
.9dda	d0 04		bne $9de0	                bne _not_escaped
.9ddc	a9 5c		lda #$5c	                lda #92
.9dde	80 0e		bra $9dee	                bra _save_character
.9de0					_not_escaped:
.9de0	c9 5c		cmp #$5c	                cmp #$5C        ; The backslash char
.9de2	d0 06		bne $9dea	                bne _regular_char
.9de4	a9 ff		lda #$ff	                lda #$FF
.9de6	85 27		sta $27		                sta tmp2+1
.9de8	80 07		bra $9df1	                bra _next_character
.9dea					_regular_char:
.9dea	c9 22		cmp #$22	                cmp #$22        ; ASCII for "
.9dec	f0 0c		beq $9dfa	                beq _found_string_end
.9dee					_save_character:
.9dee	20 9e d4	jsr $d49e	                jsr cmpl_a
.9df1					_next_character:
.9df1	e6 0c		inc $0c		                inc toin
.9df3	d0 02		bne $9df7	                bne _savechars_loop_longjump
.9df5	e6 0d		inc $0d		                inc toin+1
.9df7					_savechars_loop_longjump:
.9df7	4c ec 9c	jmp $9cec	                jmp _savechars_loop
.9dfa					_found_string_end:
.9dfa	e6 0c		inc $0c		                inc toin
.9dfc	d0 02		bne $9e00	                bne +
.9dfe	e6 0d		inc $0d		                inc toin+1
.9e00					+
.9e00	a5 00		lda $00		                lda cp
.9e02	38		sec		                sec
.9e03	f5 02		sbc $02,x	                sbc 2,x
.9e05	95 00		sta $00,x	                sta 0,x         ; LSB
.9e07	a5 01		lda $01		                lda cp+1
.9e09	f5 03		sbc $03,x	                sbc 3,x
.9e0b	95 01		sta $01,x	                sta 1,x         ; MSB
.9e0d	b5 02		lda $02,x	                lda 2,x
.9e0f	38		sec		                sec
.9e10	e9 02		sbc #$02	                sbc #2
.9e12	85 24		sta $24		                sta tmp1
.9e14	b5 03		lda $03,x	                lda 3,x
.9e16	e9 00		sbc #$00	                sbc #0          ; Propagate borrow
.9e18	85 25		sta $25		                sta tmp1+1
.9e1a	a5 00		lda $00		                lda cp
.9e1c	92 24		sta ($24)	                sta (tmp1)
.9e1e	a0 01		ldy #$01	                ldy #1
.9e20	a5 01		lda $01		                lda cp+1
.9e22	91 24		sta ($24),y	                sta (tmp1),y
.9e24	a5 16		lda $16		                lda state
.9e26	05 17		ora $17		                ora state+1             ; paranoid
.9e28	f0 03		beq $9e2d	                beq _done
.9e2a	20 11 a0	jsr $a011	                jsr sliteral_const_str         ; ( addr u -- )
.9e2d					_done:
.9e2d	60		rts		z_s_quote:      rts
.9e2e					xt_s_to_d:
.9e2e	20 eb d5	jsr $d5eb	                jsr underflow_1
.9e31	ca		dex		                dex
.9e32	ca		dex		                dex
.9e33	74 00		stz $00,x	                stz 0,x
.9e35	74 01		stz $01,x	                stz 1,x
.9e37	b5 03		lda $03,x	                lda 3,x
.9e39	10 04		bpl $9e3f	                bpl _done
.9e3b	d6 00		dec $00,x	                dec 0,x
.9e3d	d6 01		dec $01,x	                dec 1,x
.9e3f					_done:
.9e3f	60		rts		z_s_to_d:       rts
.9e40					xt_save_buffers:
.9e40	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.9e42	b1 1e		lda ($1e),y	                lda (up),y      ; Only bits 0 and 1 are used, so only
.9e44	c9 03		cmp #$03	                cmp #3          ; LSB is needed.
.9e46	d0 12		bne $9e5a	                bne _done       ; Either not used or not dirty = done!
.9e48	20 a3 83	jsr $83a3	                jsr xt_blkbuffer
.9e4b	20 95 85	jsr $8595	                jsr xt_buffblocknum
.9e4e	20 70 8f	jsr $8f70	                jsr xt_fetch
.9e51	20 50 85	jsr $8550	                jsr xt_block_write
.9e54	a9 01		lda #$01	                lda #1
.9e56	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.9e58	91 1e		sta ($1e),y	                sta (up),y
.9e5a					_done:
.9e5a	60		rts		z_save_buffers: rts
.9e5b					xt_scr:
.9e5b	ca		dex		                dex
.9e5c	ca		dex		                dex
.9e5d	18		clc		                clc
.9e5e	a5 1e		lda $1e		                lda up
.9e60	69 02		adc #$02	                adc #scr_offset ; Add offset
.9e62	95 00		sta $00,x	                sta 0,x
.9e64	a5 1f		lda $1f		                lda up+1
.9e66	69 00		adc #$00	                adc #0          ; Adding carry
.9e68	95 01		sta $01,x	                sta 1,x
.9e6a	60		rts		z_scr:          rts
.9e6b					xt_search:
.9e6b	20 fa d5	jsr $d5fa	                jsr underflow_4
.9e6e	b5 00		lda $00,x	                lda 0,x
.9e70	15 01		ora $01,x	                ora 1,x
.9e72	d0 0b		bne $9e7f	                bne _start_search
.9e74	e8		inx		                inx             ; Remove u2
.9e75	e8		inx		                inx
.9e76	a9 ff		lda #$ff	                lda #$FF        ; Turn addr2 into a true flag
.9e78	95 00		sta $00,x	                sta 0,x
.9e7a	95 01		sta $01,x	                sta 1,x
.9e7c	4c 09 9f	jmp $9f09	                jmp z_search
.9e7f					_start_search:
.9e7f	20 23 a7	jsr $a723	                jsr xt_zero
.9e82					_search_loop:
.9e82	18		clc		                clc
.9e83	b5 00		lda $00,x	                lda 0,x
.9e85	75 02		adc $02,x	                adc 2,x
.9e87	85 24		sta $24		                sta tmp1
.9e89	b5 01		lda $01,x	                lda 1,x
.9e8b	75 03		adc $03,x	                adc 3,x
.9e8d	d5 07		cmp $07,x	                cmp 7,x
.9e8f	90 12		bcc $9ea3	                bcc _init_comparison ; Obviously less
.9e91	d0 06		bne $9e99	                bne _not_found
.9e93	b5 06		lda $06,x	                lda 6,x
.9e95	c5 24		cmp $24		                cmp tmp1
.9e97	b0 0a		bcs $9ea3	                bcs _init_comparison
.9e99					_not_found:
.9e99	e8		inx		                inx             ; Remove offset
.9e9a	e8		inx		                inx
.9e9b	e8		inx		                inx             ; Remove u2
.9e9c	e8		inx		                inx
.9e9d	74 00		stz $00,x	                stz 0,x         ; Turn addr2 into a false flag
.9e9f	74 01		stz $01,x	                stz 1,x
.9ea1	80 66		bra $9f09	                bra z_search
.9ea3					_init_comparison:
.9ea3	18		clc		                clc
.9ea4	b5 08		lda $08,x	                lda 8,x
.9ea6	75 00		adc $00,x	                adc 0,x
.9ea8	85 24		sta $24		                sta tmp1
.9eaa	b5 09		lda $09,x	                lda 9,x
.9eac	75 01		adc $01,x	                adc 1,x
.9eae	85 25		sta $25		                sta tmp1+1
.9eb0	b5 04		lda $04,x	                lda 4,x
.9eb2	85 26		sta $26		                sta tmp2
.9eb4	b5 05		lda $05,x	                lda 5,x
.9eb6	85 27		sta $27		                sta tmp2+1
.9eb8	b5 02		lda $02,x	                lda 2,x
.9eba	85 28		sta $28		                sta tmp3
.9ebc	b5 03		lda $03,x	                lda 3,x
.9ebe	85 29		sta $29		                sta tmp3+1
.9ec0					_comparison_loop:
.9ec0	b2 24		lda ($24)	                lda (tmp1)
.9ec2	d2 26		cmp ($26)	                cmp (tmp2)
.9ec4	f0 05		beq $9ecb	                beq _letters_match
.9ec6	20 9f 97	jsr $979f	                jsr xt_one_plus
.9ec9	80 b7		bra $9e82	                bra _search_loop
.9ecb					_letters_match:
.9ecb	e6 24		inc $24		                inc tmp1
.9ecd	d0 02		bne $9ed1	                bne +
.9ecf	e6 25		inc $25		                inc tmp1+1
.9ed1					+
.9ed1	e6 26		inc $26		                inc tmp2
.9ed3	d0 02		bne $9ed7	                bne +
.9ed5	e6 27		inc $27		                inc tmp2+1
.9ed7					+
.9ed7	a5 28		lda $28		                lda tmp3
.9ed9	d0 02		bne $9edd	                bne +
.9edb	c6 29		dec $29		                dec tmp3+1
.9edd					+
.9edd	c6 28		dec $28		                dec tmp3
.9edf	a5 28		lda $28		                lda tmp3
.9ee1	05 29		ora $29		                ora tmp3+1
.9ee3	d0 db		bne $9ec0	                bne _comparison_loop ; Check the next letter
.9ee5	18		clc		                clc
.9ee6	b5 00		lda $00,x	                lda 0,x
.9ee8	75 08		adc $08,x	                adc 8,x
.9eea	95 08		sta $08,x	                sta 8,x
.9eec	b5 01		lda $01,x	                lda 1,x
.9eee	75 09		adc $09,x	                adc 9,x
.9ef0	95 09		sta $09,x	                sta 9,x
.9ef2	38		sec		                sec
.9ef3	b5 06		lda $06,x	                lda 6,x
.9ef5	f5 00		sbc $00,x	                sbc 0,x
.9ef7	95 06		sta $06,x	                sta 6,x
.9ef9	b5 07		lda $07,x	                lda 7,x
.9efb	f5 01		sbc $01,x	                sbc 1,x
.9efd	95 07		sta $07,x	                sta 7,x
.9eff	e8		inx		                inx             ; drop offset
.9f00	e8		inx		                inx
.9f01	e8		inx		                inx             ; drop u2
.9f02	e8		inx		                inx
.9f03	a9 ff		lda #$ff	                lda #$FF
.9f05	95 00		sta $00,x	                sta 0,x         ; Turn addr2 into a true flag.
.9f07	95 01		sta $01,x	                sta 1,x
.9f09	60		rts		z_search:       rts
.9f0a					xt_semicolon:
.9f0a	24 20		bit $20		                bit status
.9f0c	70 11		bvs $9f1f	                bvs _colonword
.9f0e	a9 60		lda #$60	                lda #$60                ; opcode for RTS
.9f10	20 9e d4	jsr $d49e	                jsr cmpl_a
.9f13	ca		dex		                dex
.9f14	ca		dex		                dex
.9f15	a5 04		lda $04		                lda workword
.9f17	95 00		sta $00,x	                sta 0,x
.9f19	a5 05		lda $05		                lda workword+1
.9f1b	95 01		sta $01,x	                sta 1,x
.9f1d	80 45		bra $9f64	                bra _semicolon_done
.9f1f					_colonword:
.9f1f	a0 06		ldy #$06	                ldy #6
.9f21	a5 00		lda $00		                lda cp
.9f23	91 04		sta ($04),y	                sta (workword),y
.9f25	c8		iny		                iny
.9f26	a5 01		lda $01		                lda cp+1
.9f28	91 04		sta ($04),y	                sta (workword),y
.9f2a	a9 60		lda #$60	                lda #$60                ; opcode for RTS
.9f2c	20 9e d4	jsr $d49e	                jsr cmpl_a
.9f2f	24 20		bit $20		                bit status
.9f31	10 26		bpl $9f59	                bpl _new_word   ; Bit 7 is clear = new word
.9f33	ca		dex		                dex
.9f34	ca		dex		                dex
.9f35	ca		dex		                dex
.9f36	ca		dex		                dex
.9f37	b2 04		lda ($04)	                lda (workword)
.9f39	95 00		sta $00,x	                sta 0,x
.9f3b	74 01		stz $01,x	                stz 1,x
.9f3d	a5 04		lda $04		                lda workword
.9f3f	18		clc		                clc
.9f40	69 08		adc #$08	                adc #8
.9f42	95 02		sta $02,x	                sta 2,x
.9f44	a5 05		lda $05		                lda workword+1
.9f46	69 00		adc #$00	                adc #0                  ; only want carry
.9f48	95 03		sta $03,x	                sta 3,x
.9f4a	a9 02		lda #$02	                lda #str_redefined       ; address of string "redefined"
.9f4c	20 17 d6	jsr $d617	                jsr print_string_no_lf
.9f4f	20 7f a4	jsr $a47f	                jsr xt_type
.9f52	20 a0 a0	jsr $a0a0	                jsr xt_space
.9f55	a9 80		lda #$80	                lda #%10000000
.9f57	14 20		trb $20		                trb status
.9f59					_new_word:
.9f59	a5 04		lda $04		                lda workword
.9f5b	85 02		sta $02		                sta dp
.9f5d	a5 05		lda $05		                lda workword+1
.9f5f	85 03		sta $03		                sta dp+1
.9f61	20 40 d5	jsr $d540	                jsr dp_to_current       ; Save the updated DP to the
.9f64					_semicolon_done:
.9f64	64 16		stz $16		                stz state
.9f66	64 17		stz $17		                stz state+1
.9f68	60		rts		z_semicolon:    rts
.9f69					xt_sign:
.9f69	20 eb d5	jsr $d5eb	                jsr underflow_1
.9f6c	b5 01		lda $01,x	                lda 1,x         ; check MSB of TOS
.9f6e	30 04		bmi $9f74	                bmi _minus
.9f70	e8		inx		                inx
.9f71	e8		inx		                inx
.9f72	80 09		bra $9f7d	                bra _done
.9f74					_minus:
.9f74	a9 2d		lda #$2d	                lda #$2D        ; ASCII for "-"
.9f76	95 00		sta $00,x	                sta 0,x         ; overwrite TOS
.9f78	74 01		stz $01,x	                stz 1,x         ; paranoid
.9f7a	20 c7 91	jsr $91c7	                jsr xt_hold
.9f7d					_done:
.9f7d	60		rts		z_sign:         rts
.9f7e					xt_slash:
.9f7e	a9 00		lda #$00	                lda #0
.9f80	48		pha		                pha
.9f81	80 03		bra $9f86	                bra slashmod_common
.9f83					xt_slash_mod:
.9f83	a9 ff		lda #$ff	                lda #$FF
.9f85	48		pha		                pha             ; falls through to _common
.9f86					slashmod_common:
.9f86	20 ec a2	jsr $a2ec	                jsr xt_to_r             ; >R
.9f89	20 2e 9e	jsr $9e2e	                jsr xt_s_to_d           ; S>D
.9f8c	20 14 9a	jsr $9a14	                jsr xt_r_from           ; R>
.9f8f	20 57 a0	jsr $a057	                jsr xt_sm_slash_rem     ; SM/REM
.9f92	68		pla		                pla
.9f93	d0 05		bne $9f9a	                bne _done
.9f95	20 2a a1	jsr $a12a	                jsr xt_swap
.9f98	e8		inx		                inx             ; DROP
.9f99	e8		inx		                inx
.9f9a					_done:
.9f9a					z_slash_mod:
.9f9a	60		rts		z_slash:        rts
.9f9b					xt_slash_string:
.9f9b	20 f5 d5	jsr $d5f5	                jsr underflow_3
.9f9e	18		clc		                clc             ; 3OS+TOS
.9f9f	b5 00		lda $00,x	                lda 0,x
.9fa1	75 04		adc $04,x	                adc 4,x
.9fa3	95 04		sta $04,x	                sta 4,x
.9fa5	b5 01		lda $01,x	                lda 1,x
.9fa7	75 05		adc $05,x	                adc 5,x
.9fa9	95 05		sta $05,x	                sta 5,x
.9fab	38		sec		                sec             ; NOS-TOS
.9fac	b5 02		lda $02,x	                lda 2,x
.9fae	f5 00		sbc $00,x	                sbc 0,x
.9fb0	95 02		sta $02,x	                sta 2,x
.9fb2	b5 03		lda $03,x	                lda 3,x
.9fb4	f5 01		sbc $01,x	                sbc 1,x
.9fb6	95 03		sta $03,x	                sta 3,x
.9fb8	e8		inx		                inx
.9fb9	e8		inx		                inx
.9fba	60		rts		z_slash_string: rts
.9fbb					xt_sliteral:
.9fbb	20 f0 d5	jsr $d5f0	                jsr underflow_2
.9fbe	a9 4c		lda #$4c	                lda #$4C
.9fc0	20 9e d4	jsr $d49e	                jsr cmpl_a
.9fc3	20 9e d4	jsr $d49e	                jsr cmpl_a
.9fc6	20 9e d4	jsr $d49e	                jsr cmpl_a
.9fc9	8a		txa		                txa
.9fca	38		sec		                sec
.9fcb	e9 06		sbc #$06	                sbc #6
.9fcd	aa		tax		                tax
.9fce	b5 08		lda $08,x	                lda 8,x
.9fd0	95 04		sta $04,x	                sta 4,x
.9fd2	b5 09		lda $09,x	                lda 9,x
.9fd4	95 05		sta $05,x	                sta 5,x
.9fd6	b5 06		lda $06,x	                lda 6,x
.9fd8	95 00		sta $00,x	                sta 0,x
.9fda	b5 07		lda $07,x	                lda 7,x
.9fdc	95 01		sta $01,x	                sta 1,x
.9fde	a5 00		lda $00		                lda cp
.9fe0	95 08		sta $08,x	                sta 8,x
.9fe2	95 02		sta $02,x	                sta 2,x
.9fe4	a5 01		lda $01		                lda cp+1
.9fe6	95 09		sta $09,x	                sta 9,x
.9fe8	95 03		sta $03,x	                sta 3,x
.9fea	20 b2 95	jsr $95b2	                jsr xt_move
.9fed	18		clc		                clc
.9fee	a5 00		lda $00		                lda cp
.9ff0	75 00		adc $00,x	                adc 0,x
.9ff2	85 00		sta $00		                sta cp
.9ff4	a5 01		lda $01		                lda cp+1
.9ff6	75 01		adc $01,x	                adc 1,x
.9ff8	85 01		sta $01		                sta cp+1
.9ffa	b5 02		lda $02,x	                lda 2,x
.9ffc	38		sec		                sec
.9ffd	e9 02		sbc #$02	                sbc #2
.9fff	85 24		sta $24		                sta tmp1
.a001	b5 03		lda $03,x	                lda 3,x
.a003	e9 00		sbc #$00	                sbc #0          ; Propagate borrow
.a005	85 25		sta $25		                sta tmp1+1
.a007	a5 00		lda $00		                lda cp
.a009	92 24		sta ($24)	                sta (tmp1)
.a00b	a0 01		ldy #$01	                ldy #1
.a00d	a5 01		lda $01		                lda cp+1
.a00f	91 24		sta ($24),y	                sta (tmp1),y
.a011					sliteral_const_str:
.a011	a0 a0		ldy #$a0	                ldy #>sliteral_runtime
.a013	a9 2b		lda #$2b	                lda #<sliteral_runtime
.a015	20 8e d4	jsr $d48e	                jsr cmpl_subroutine
.a018	b4 03		ldy $03,x	                ldy 3,x                ; address MSB
.a01a	b5 02		lda $02,x	                lda 2,x                ; address LSB
.a01c	20 9a d4	jsr $d49a	                jsr cmpl_word
.a01f	b4 01		ldy $01,x	                ldy 1,x                ; length MSB
.a021	b5 00		lda $00,x	                lda 0,x                ; length LSB
.a023	20 9a d4	jsr $d49a	                jsr cmpl_word
.a026	e8		inx		                inx
.a027	e8		inx		                inx
.a028	e8		inx		                inx
.a029	e8		inx		                inx
.a02a	60		rts		z_sliteral:     rts
.a02b					sliteral_runtime:
.a02b	ca		dex		                dex
.a02c	ca		dex		                dex
.a02d	ca		dex		                dex
.a02e	ca		dex		                dex
.a02f	68		pla		                pla
.a030	85 24		sta $24		                sta tmp1        ; LSB of address
.a032	68		pla		                pla
.a033	85 25		sta $25		                sta tmp1+1      ; MSB of address
.a035	a0 01		ldy #$01	                ldy #1          ; adjust for JSR/RTS mechanics on 65c02
.a037	b1 24		lda ($24),y	                lda (tmp1),y
.a039	95 02		sta $02,x	                sta 2,x         ; LSB of address
.a03b	c8		iny		                iny
.a03c	b1 24		lda ($24),y	                lda (tmp1),y
.a03e	95 03		sta $03,x	                sta 3,x         ; MSB of address
.a040	c8		iny		                iny
.a041	b1 24		lda ($24),y	                lda (tmp1),y
.a043	95 00		sta $00,x	                sta 0,x         ; LSB of length
.a045	c8		iny		                iny
.a046	b1 24		lda ($24),y	                lda (tmp1),y
.a048	95 01		sta $01,x	                sta 1,x         ; MSB of length
.a04a	18		clc		                clc
.a04b	a5 24		lda $24		                lda tmp1
.a04d	69 04		adc #$04	                adc #4
.a04f	a8		tay		                tay             ; LSB
.a050	a5 25		lda $25		                lda tmp1+1
.a052	69 00		adc #$00	                adc #0          ; we only need carry
.a054	48		pha		                pha             ; MSB
.a055	5a		phy		                phy
.a056	60		rts		                rts
.a057					xt_sm_slash_rem:
.a057	20 f5 d5	jsr $d5f5	                jsr underflow_3 ; contains double number
.a05a	b5 03		lda $03,x	                lda 3,x
.a05c	48		pha		                pha
.a05d	b5 01		lda $01,x	                lda 1,x
.a05f	55 03		eor $03,x	                eor 3,x
.a061	48		pha		                pha
.a062	20 39 81	jsr $8139	                jsr xt_abs
.a065	e8		inx		                inx             ; pretend we pushed n1 to R
.a066	e8		inx		                inx
.a067	20 76 8a	jsr $8a76	                jsr xt_dabs
.a06a	ca		dex		                dex
.a06b	ca		dex		                dex
.a06c	20 36 a5	jsr $a536	                jsr xt_um_slash_mod     ; UM/MOD
.a06f	68		pla		                pla
.a070	10 03		bpl $a075	                bpl +
.a072	20 13 96	jsr $9613	                jsr xt_negate
.a075					+
.a075	68		pla		                pla
.a076	10 07		bpl $a07f	                bpl _done
.a078	e8		inx		                inx             ; pretend we pushed quotient to R
.a079	e8		inx		                inx
.a07a	20 13 96	jsr $9613	                jsr xt_negate
.a07d	ca		dex		                dex
.a07e	ca		dex		                dex
.a07f					_done:
.a07f	60		rts		z_sm_slash_rem: rts
.a080					xt_source:
.a080	ca		dex		                dex
.a081	ca		dex		                dex
.a082	a5 08		lda $08		                lda cib
.a084	95 00		sta $00,x	                sta 0,x
.a086	a5 09		lda $09		                lda cib+1
.a088	95 01		sta $01,x	                sta 1,x
.a08a	ca		dex		                dex
.a08b	ca		dex		                dex
.a08c	a5 0a		lda $0a		                lda ciblen
.a08e	95 00		sta $00,x	                sta 0,x
.a090	a5 0b		lda $0b		                lda ciblen+1
.a092	95 01		sta $01,x	                sta 1,x
.a094	60		rts		z_source:       rts
.a095					xt_source_id:
.a095	ca		dex		                dex
.a096	ca		dex		                dex
.a097	a5 06		lda $06		                lda insrc
.a099	95 00		sta $00,x	                sta 0,x
.a09b	a5 07		lda $07		                lda insrc+1
.a09d	95 01		sta $01,x	                sta 1,x
.a09f	60		rts		z_source_id:    rts
.a0a0					xt_space:
.a0a0	a9 20		lda #$20	                lda #AscSP
.a0a2	20 e6 8d	jsr $8de6	                jsr emit_a
.a0a5	60		rts		z_space:        rts
.a0a6					xt_spaces:
.a0a6	20 eb d5	jsr $d5eb	                jsr underflow_1
.a0a9	b5 00		lda $00,x	                lda 0,x
.a0ab	15 01		ora $01,x	                ora 1,x
.a0ad	f0 2a		beq $a0d9	                beq _done
.a0af	b4 01		ldy $01,x	                ldy 1,x
.a0b1	d0 0c		bne $a0bf	                bne _lots_of_spaces
.a0b3	b4 00		ldy $00,x	                ldy 0,x
.a0b5					_quick_loop:
.a0b5	a9 20		lda #$20	                lda #AscSP
.a0b7	20 e6 8d	jsr $8de6	                jsr emit_a
.a0ba	88		dey		                dey
.a0bb	f0 1c		beq $a0d9	                beq _done
.a0bd	80 f6		bra $a0b5	                bra _quick_loop
.a0bf					_lots_of_spaces:
.a0bf	b4 00		ldy $00,x	                ldy 0,x
.a0c1					_first_slow_loop:
.a0c1	f0 08		beq $a0cb	                beq _slow_outer_loop
.a0c3	a9 20		lda #$20	                lda #AscSP
.a0c5	20 e6 8d	jsr $8de6	                jsr emit_a
.a0c8	88		dey		                dey
.a0c9	80 f6		bra $a0c1	                bra _first_slow_loop
.a0cb					_slow_outer_loop:
.a0cb	a0 00		ldy #$00	                ldy #00
.a0cd					_slow_inner_loop:
.a0cd	a9 20		lda #$20	                lda #AscSP
.a0cf	20 e6 8d	jsr $8de6	                jsr emit_a
.a0d2	88		dey		                dey
.a0d3	d0 f8		bne $a0cd	                bne _slow_inner_loop
.a0d5	d6 01		dec $01,x	                dec 1,x
.a0d7	d0 f2		bne $a0cb	                bne _slow_outer_loop
.a0d9					_done:
.a0d9	e8		inx		                inx             ; drop
.a0da	e8		inx		                inx
.a0db	60		rts		z_spaces:       rts
.a0dc					xt_star:
.a0dc	20 f0 d5	jsr $d5f0	                jsr underflow_2
.a0df	20 78 a5	jsr $a578	                jsr xt_um_star
.a0e2	e8		inx		                inx
.a0e3	e8		inx		                inx
.a0e4	60		rts		z_star:         rts
.a0e5					xt_star_slash:
.a0e5	20 ee a0	jsr $a0ee	                jsr xt_star_slash_mod
.a0e8	20 2a a1	jsr $a12a	                jsr xt_swap
.a0eb	e8		inx		                inx
.a0ec	e8		inx		                inx
.a0ed					z_star_slash:
.a0ed	60		rts		                rts
.a0ee					xt_star_slash_mod:
.a0ee	20 f5 d5	jsr $d5f5	                jsr underflow_3
.a0f1	20 ec a2	jsr $a2ec	                jsr xt_to_r
.a0f4	20 7e 94	jsr $947e	                jsr xt_m_star
.a0f7	20 14 9a	jsr $9a14	                jsr xt_r_from
.a0fa	20 57 a0	jsr $a057	                jsr xt_sm_slash_rem
.a0fd					z_star_slash_mod:
.a0fd	60		rts		                rts
.a0fe					xt_state:
.a0fe	ca		dex		                dex
.a0ff	ca		dex		                dex
.a100	a9 16		lda #$16	                lda #<state
.a102	95 00		sta $00,x	                sta 0,x
.a104	a9 00		lda #$00	                lda #>state
.a106	95 01		sta $01,x	                sta 1,x
.a108	60		rts		z_state:        rts
.a109					xt_store:
.a109	20 f0 d5	jsr $d5f0	                jsr underflow_2
.a10c	b5 02		lda $02,x	                lda 2,x         ; LSB
.a10e	81 00		sta ($00,x)	                sta (0,x)
.a110	f6 00		inc $00,x	                inc 0,x
.a112	d0 02		bne $a116	                bne +
.a114	f6 01		inc $01,x	                inc 1,x
.a116					+
.a116	b5 03		lda $03,x	                lda 3,x         ; MSB
.a118	81 00		sta ($00,x)	                sta (0,x)
.a11a	e8		inx		                inx             ; 2DROP
.a11b	e8		inx		                inx
.a11c	e8		inx		                inx
.a11d	e8		inx		                inx
.a11e	60		rts		z_store:        rts
.a11f					xt_strip_underflow:
.a11f	ca		dex		                dex
.a120	ca		dex		                dex
.a121	a9 1c		lda #$1c	                lda #<uf_strip
.a123	95 00		sta $00,x	                sta 0,x
.a125	a9 00		lda #$00	                lda #>uf_strip
.a127	95 01		sta $01,x	                sta 1,x
.a129					z_strip_underflow:
.a129	60		rts		                rts
.a12a					xt_swap:
.a12a	20 f0 d5	jsr $d5f0	                jsr underflow_2
.a12d	b5 00		lda $00,x	                lda 0,x         ; LSB
.a12f	b4 02		ldy $02,x	                ldy 2,x
.a131	95 02		sta $02,x	                sta 2,x
.a133	94 00		sty $00,x	                sty 0,x
.a135	b5 01		lda $01,x	                lda 1,x         ; MSB
.a137	b4 03		ldy $03,x	                ldy 3,x
.a139	95 03		sta $03,x	                sta 3,x
.a13b	94 01		sty $01,x	                sty 1,x
.a13d	60		rts		z_swap:         rts
.a13e					xt_then:
.a13e	20 62 91	jsr $9162	                jsr xt_here
.a141	20 2a a1	jsr $a12a	                jsr xt_swap
.a144	20 09 a1	jsr $a109	                jsr xt_store
.a147	60		rts		z_then:         rts
.a148					xt_thru:
.a148	20 f0 d5	jsr $d5f0	                jsr underflow_2
.a14b	b5 01		lda $01,x	                lda 1,x
.a14d	48		pha		                pha
.a14e	b5 00		lda $00,x	                lda 0,x
.a150	48		pha		                pha
.a151	e8		inx		                inx
.a152	e8		inx		                inx
.a153					_thru_loop:
.a153	b5 01		lda $01,x	                lda 1,x
.a155	48		pha		                pha
.a156	b5 00		lda $00,x	                lda 0,x
.a158	48		pha		                pha
.a159	20 a7 93	jsr $93a7	                jsr xt_load
.a15c	68		pla		                pla
.a15d	85 24		sta $24		                sta tmp1
.a15f	68		pla		                pla
.a160	85 25		sta $25		                sta tmp1+1
.a162	68		pla		                pla
.a163	85 26		sta $26		                sta tmp2
.a165	68		pla		                pla
.a166	85 27		sta $27		                sta tmp2+1
.a168	c5 25		cmp $25		                cmp tmp1+1
.a16a	d0 08		bne $a174	                bne _next_screen
.a16c	a5 26		lda $26		                lda tmp2        ; Compare the LSB
.a16e	c5 24		cmp $24		                cmp tmp1
.a170	d0 02		bne $a174	                bne _next_screen
.a172	80 18		bra $a18c	                bra _done       ; We just did the last screen.
.a174					_next_screen:
.a174	a5 27		lda $27		                lda tmp2+1
.a176	48		pha		                pha
.a177	a5 26		lda $26		                lda tmp2
.a179	48		pha		                pha
.a17a	e6 24		inc $24		                inc tmp1
.a17c	d0 02		bne $a180	                bne +
.a17e	e6 25		inc $25		                inc tmp1+1
.a180					+
.a180	ca		dex		                dex
.a181	ca		dex		                dex
.a182	a5 24		lda $24		                lda tmp1
.a184	95 00		sta $00,x	                sta 0,x
.a186	a5 25		lda $25		                lda tmp1+1
.a188	95 01		sta $01,x	                sta 1,x
.a18a	80 c7		bra $a153	                bra _thru_loop
.a18c					_done:
.a18c	60		rts		z_thru:         rts
.a18d					xt_tick:
.a18d	20 61 98	jsr $9861	                jsr xt_parse_name       ; ( -- addr u )
.a190	b5 00		lda $00,x	                lda 0,x
.a192	15 01		ora $01,x	                ora 1,x
.a194	d0 05		bne $a19b	                bne +
.a196	a9 05		lda #$05	                lda #err_noname
.a198	4c 01 d6	jmp $d601	                jmp error
.a19b					+
.a19b	20 cb 8f	jsr $8fcb	                jsr xt_find_name        ; ( addr u -- nt )
.a19e	b5 00		lda $00,x	                lda 0,x
.a1a0	15 01		ora $01,x	                ora 1,x
.a1a2	d0 05		bne $a1a9	                bne +
.a1a4	a9 08		lda #$08	                lda #err_syntax
.a1a6	4c 01 d6	jmp $d601	                jmp error
.a1a9					+
.a1a9	20 d1 95	jsr $95d1	                jsr xt_name_to_int      ; ( nt -- xt )
.a1ac	60		rts		z_tick:         rts
.a1ad					xt_to:
.a1ad	20 8d a1	jsr $a18d	                jsr xt_tick             ; ( [n] xt )
.a1b0	b5 00		lda $00,x	                lda 0,x                 ; LSB
.a1b2	18		clc		                clc
.a1b3	69 03		adc #$03	                adc #3
.a1b5	85 24		sta $24		                sta tmp1
.a1b7	b5 01		lda $01,x	                lda 1,x                 ; MSB
.a1b9	69 00		adc #$00	                adc #0                  ; we just want the carry
.a1bb	85 25		sta $25		                sta tmp1+1
.a1bd	e8		inx		                inx
.a1be	e8		inx		                inx                     ; ( [n] )
.a1bf	a5 16		lda $16		                lda state
.a1c1	05 17		ora $17		                ora state+1
.a1c3	f0 34		beq $a1f9	                beq _interpret
.a1c5	a0 00		ldy #$00	                ldy #$00                ; Code for LDA 0,X
.a1c7	a9 b5		lda #$b5	                lda #$B5
.a1c9	20 9a d4	jsr $d49a	                jsr cmpl_word
.a1cc	a9 8d		lda #$8d	                lda #$8D                ; Code for STA abs
.a1ce	20 9e d4	jsr $d49e	                jsr cmpl_a
.a1d1	a4 25		ldy $25		                ldy tmp1+1              ; MSB goes in Y
.a1d3	a5 24		lda $24		                lda tmp1
.a1d5	20 9a d4	jsr $d49a	                jsr cmpl_word
.a1d8	a0 01		ldy #$01	                ldy #$01                ; Code for LDA 1,X
.a1da	a9 b5		lda #$b5	                lda #$B5
.a1dc	20 9a d4	jsr $d49a	                jsr cmpl_word
.a1df	a9 8d		lda #$8d	                lda #$8D                ; Code for STA abs
.a1e1	20 9e d4	jsr $d49e	                jsr cmpl_a
.a1e4	e6 24		inc $24		                inc tmp1                ; Calculate MSB
.a1e6	d0 02		bne $a1ea	                bne +
.a1e8	e6 25		inc $25		                inc tmp1+1
.a1ea					+
.a1ea	a4 25		ldy $25		                ldy tmp1+1              ; MSB goes in Y
.a1ec	a5 24		lda $24		                lda tmp1
.a1ee	20 9a d4	jsr $d49a	                jsr cmpl_word
.a1f1	a0 e8		ldy #$e8	                ldy #$E8                ; Code for INX
.a1f3	98		tya		                tya
.a1f4	20 9a d4	jsr $d49a	                jsr cmpl_word
.a1f7	80 0f		bra $a208	                bra _done
.a1f9					_interpret:
.a1f9	20 eb d5	jsr $d5eb	                jsr underflow_1
.a1fc	b5 00		lda $00,x	                lda 0,x
.a1fe	92 24		sta ($24)	                sta (tmp1)              ; LSB
.a200	a0 01		ldy #$01	                ldy #1
.a202	b5 01		lda $01,x	                lda 1,x                 ; MSB
.a204	91 24		sta ($24),y	                sta (tmp1),y            ; fall through to common
.a206	e8		inx		                inx                     ; DROP
.a207	e8		inx		                inx
.a208					_done:
.a208	60		rts		z_to:           rts
.a209					xt_to_body:
.a209	20 eb d5	jsr $d5eb	                jsr underflow_1
.a20c	20 9f 8d	jsr $8d9f	                jsr xt_dup              ; ( xt xt )
.a20f	20 68 92	jsr $9268	                jsr xt_int_to_name      ; ( xt nt )
.a212	f6 00		inc $00,x	                inc 0,x
.a214	d0 02		bne $a218	                bne +
.a216	f6 01		inc $01,x	                inc 1,x
.a218					+
.a218	a1 00		lda ($00,x)	                lda (0,x)               ; get status byte
.a21a	29 20		and #$20	                and #HC
.a21c	f0 0d		beq $a22b	                beq _no_cfa
.a21e	18		clc		                clc
.a21f	b5 02		lda $02,x	                lda 2,x         ; LSB
.a221	69 03		adc #$03	                adc #3
.a223	95 02		sta $02,x	                sta 2,x
.a225	b5 03		lda $03,x	                lda 3,x         ; MSB
.a227	69 00		adc #$00	                adc #0          ; we conly care about the carry
.a229	95 03		sta $03,x	                sta 3,x         ; Fall through to _no_cfa
.a22b					_no_cfa:
.a22b	e8		inx		                inx             ; get rid of the nt
.a22c	e8		inx		                inx
.a22d					_done:
.a22d	60		rts		z_to_body:      rts
.a22e					xt_to_in:
.a22e	ca		dex		                dex
.a22f	ca		dex		                dex
.a230	a9 0c		lda #$0c	                lda #<toin
.a232	95 00		sta $00,x	                sta 0,x
.a234	a9 00		lda #$00	                lda #>toin      ; paranoid, should be zero
.a236	95 01		sta $01,x	                sta 1,x
.a238	60		rts		z_to_in:        rts
.a239					xt_to_number:
.a239	20 fa d5	jsr $d5fa	                jsr underflow_4
.a23c	b5 06		lda $06,x	                lda 6,x         ; ud-lo LSB
.a23e	85 36		sta $36		                sta scratch
.a240	b5 07		lda $07,x	                lda 7,x         ; ud-lo MSB
.a242	85 37		sta $37		                sta scratch+1
.a244	b5 04		lda $04,x	                lda 4,x         ; ud-hi LSB
.a246	85 38		sta $38		                sta scratch+2
.a248	b5 05		lda $05,x	                lda 5,x         ; ud-hi MSB
.a24a	85 39		sta $39		                sta scratch+3
.a24c	ca		dex		                dex
.a24d	ca		dex		                dex
.a24e					_loop:
.a24e	a1 04		lda ($04,x)	                lda (4,x)
.a250	95 00		sta $00,x	                sta 0,x                 ; ( ud-lo ud-hi addr u char )
.a252	74 01		stz $01,x	                stz 1,x                 ; paranoid
.a254	20 f5 8a	jsr $8af5	                jsr xt_digit_question   ; ( char -- n -1 | char 0 )
.a257	b5 00		lda $00,x	                lda 0,x
.a259	d0 04		bne $a25f	                bne _digit_ok
.a25b	e8		inx		                inx
.a25c	e8		inx		                inx
.a25d	80 67		bra $a2c6	                bra _done       ; ( ud-lo ud-hi addr u char )
.a25f					_digit_ok:
.a25f	b5 02		lda $02,x	                lda 2,x
.a261	85 3a		sta $3a		                sta scratch+4
.a263	b5 03		lda $03,x	                lda 3,x
.a265	85 3b		sta $3b		                sta scratch+5
.a267	a5 38		lda $38		                lda scratch+2
.a269	95 02		sta $02,x	                sta 2,x         ; NOS
.a26b	a5 39		lda $39		                lda scratch+3
.a26d	95 03		sta $03,x	                sta 3,x
.a26f	a5 18		lda $18		                lda base
.a271	95 00		sta $00,x	                sta 0,x         ; TOS
.a273	74 01		stz $01,x	                stz 1,x         ; now ( ud-lo ud-hi addr u ud-hi base)
.a275	20 78 a5	jsr $a578	                jsr xt_um_star  ; ( ud-lo ud-hi addr u ud-hi-lo ud-hi-hi )
.a278	b5 02		lda $02,x	                lda 2,x         ; ud-hi-lo
.a27a	85 3c		sta $3c		                sta scratch+6
.a27c	b5 03		lda $03,x	                lda 3,x
.a27e	85 3d		sta $3d		                sta scratch+7
.a280	a5 36		lda $36		                lda scratch
.a282	95 02		sta $02,x	                sta 2,x
.a284	a5 37		lda $37		                lda scratch+1
.a286	95 03		sta $03,x	                sta 3,x         ; ( ud-lo ud-hi addr u ud-lo ud-hi-hi )
.a288	a5 18		lda $18		                lda base
.a28a	95 00		sta $00,x	                sta 0,x
.a28c	74 01		stz $01,x	                stz 1,x         ; ( ud-lo ud-hi addr u ud-lo base )
.a28e	20 78 a5	jsr $a578	                jsr xt_um_star  ; ( ud-lo ud-hi addr u ud-lo-lo ud-lo-hi )
.a291	b5 00		lda $00,x	                lda 0,x
.a293	85 38		sta $38		                sta scratch+2
.a295	b5 01		lda $01,x	                lda 1,x
.a297	85 39		sta $39		                sta scratch+3
.a299	b5 02		lda $02,x	                lda 2,x
.a29b	85 36		sta $36		                sta scratch
.a29d	b5 03		lda $03,x	                lda 3,x
.a29f	85 37		sta $37		                sta scratch+1
.a2a1	18		clc		                clc
.a2a2	a5 36		lda $36		                lda scratch     ; ud-lo LSB
.a2a4	65 3a		adc $3a		                adc scratch+4   ; n LSB
.a2a6	85 36		sta $36		                sta scratch     ; this is the new ud-lo
.a2a8	a5 37		lda $37		                lda scratch+1   ; ud-lo MSB
.a2aa	65 3b		adc $3b		                adc scratch+5   ; n MSB
.a2ac	85 37		sta $37		                sta scratch+1
.a2ae	a5 38		lda $38		                lda scratch+2   ; LSB
.a2b0	65 3c		adc $3c		                adc scratch+6
.a2b2	85 38		sta $38		                sta scratch+2   ; this is the new ud-hi
.a2b4	a5 39		lda $39		                lda scratch+3   ; MSB
.a2b6	65 3d		adc $3d		                adc scratch+7
.a2b8	85 39		sta $39		                sta scratch+3
.a2ba	e8		inx		                inx
.a2bb	e8		inx		                inx             ; ( ud-lo ud-hi addr u ud-lo-lo )
.a2bc	f6 04		inc $04,x	                inc 4,x
.a2be	d0 02		bne $a2c2	                bne +
.a2c0	f6 05		inc $05,x	                inc 5,x
.a2c2					+
.a2c2	d6 02		dec $02,x	                dec 2,x
.a2c4	d0 88		bne $a24e	                bne _loop
.a2c6					_done:
.a2c6	e8		inx		                inx
.a2c7	e8		inx		                inx             ; ( ud-lo ud-hi addr u )
.a2c8	a5 36		lda $36		                lda scratch     ; new ud-lo
.a2ca	95 06		sta $06,x	                sta 6,x
.a2cc	a5 37		lda $37		                lda scratch+1
.a2ce	95 07		sta $07,x	                sta 7,x
.a2d0	a5 38		lda $38		                lda scratch+2
.a2d2	95 04		sta $04,x	                sta 4,x
.a2d4	a5 39		lda $39		                lda scratch+3
.a2d6	95 05		sta $05,x	                sta 5,x
.a2d8	60		rts		z_to_number:    rts
.a2d9					xt_to_order:
.a2d9	20 ec a2	jsr $a2ec	                jsr xt_to_r
.a2dc	20 24 91	jsr $9124	                jsr xt_get_order
.a2df	20 14 9a	jsr $9a14	                jsr xt_r_from
.a2e2	20 2a a1	jsr $a12a	                jsr xt_swap
.a2e5	20 9f 97	jsr $979f	                jsr xt_one_plus
.a2e8	20 9d 9c	jsr $9c9d	                jsr xt_set_order
.a2eb	60		rts		z_to_order:     rts
.a2ec					xt_to_r:
.a2ec	68		pla		                pla             ; LSB
.a2ed	85 2c		sta $2c		                sta tmptos
.a2ef	7a		ply		                ply             ; MSB
.a2f0	20 eb d5	jsr $d5eb	                jsr underflow_1
.a2f3	b5 01		lda $01,x	                lda 1,x         ; MSB
.a2f5	48		pha		                pha
.a2f6	b5 00		lda $00,x	                lda 0,x         ; LSB
.a2f8	48		pha		                pha
.a2f9	e8		inx		                inx
.a2fa	e8		inx		                inx
.a2fb	5a		phy		                phy             ; MSB
.a2fc	a5 2c		lda $2c		                lda tmptos
.a2fe	48		pha		                pha             ; LSB
.a2ff	60		rts		z_to_r:         rts
.a300					xt_true:
.a300	ca		dex		                dex
.a301	ca		dex		                dex
.a302	a9 ff		lda #$ff	                lda #$FF
.a304	95 00		sta $00,x	                sta 0,x
.a306	95 01		sta $01,x	                sta 1,x
.a308	60		rts		z_true:         rts
.a309					xt_tuck:
.a309	20 f0 d5	jsr $d5f0	                jsr underflow_2
.a30c	ca		dex		                dex
.a30d	ca		dex		                dex
.a30e	b4 04		ldy $04,x	                ldy 4,x         ; LSB
.a310	b5 02		lda $02,x	                lda 2,x
.a312	95 04		sta $04,x	                sta 4,x
.a314	94 02		sty $02,x	                sty 2,x
.a316	95 00		sta $00,x	                sta 0,x
.a318	b4 05		ldy $05,x	                ldy 5,x         ; MSB
.a31a	b5 03		lda $03,x	                lda 3,x
.a31c	95 05		sta $05,x	                sta 5,x
.a31e	94 03		sty $03,x	                sty 3,x         ; bba
.a320	95 01		sta $01,x	                sta 1,x         ; baa
.a322	60		rts		z_tuck:         rts
.a323					xt_assembler_wordlist:
.a323					xt_two:
.a323	ca		dex		                dex
.a324	ca		dex		                dex
.a325	a9 02		lda #$02	                lda #2
.a327	95 00		sta $00,x	                sta 0,x
.a329	74 01		stz $01,x	                stz 1,x
.a32b					z_assembler_wordlist:
.a32b	60		rts		z_two:          rts
.a32c					xt_two_drop:
.a32c	20 f0 d5	jsr $d5f0	                jsr underflow_2
.a32f	e8		inx		                inx
.a330	e8		inx		                inx
.a331	e8		inx		                inx
.a332	e8		inx		                inx
.a333	60		rts		z_two_drop:     rts
.a334					xt_two_dup:
.a334	20 f0 d5	jsr $d5f0	                jsr underflow_2
.a337	ca		dex		                dex
.a338	ca		dex		                dex
.a339	ca		dex		                dex
.a33a	ca		dex		                dex
.a33b	b5 04		lda $04,x	                lda 4,x         ; TOS
.a33d	95 00		sta $00,x	                sta 0,x
.a33f	b5 05		lda $05,x	                lda 5,x
.a341	95 01		sta $01,x	                sta 1,x
.a343	b5 06		lda $06,x	                lda 6,x         ; NOS
.a345	95 02		sta $02,x	                sta 2,x
.a347	b5 07		lda $07,x	                lda 7,x
.a349	95 03		sta $03,x	                sta 3,x
.a34b	60		rts		z_two_dup:      rts
.a34c					xt_two_fetch:
.a34c	20 eb d5	jsr $d5eb	                jsr underflow_1
.a34f	b5 00		lda $00,x	                lda 0,x
.a351	85 24		sta $24		                sta tmp1
.a353	b4 01		ldy $01,x	                ldy 1,x
.a355	84 25		sty $25		                sty tmp1+1
.a357	ca		dex		                dex             ; reuse one stack element
.a358	ca		dex		                dex
.a359	b2 24		lda ($24)	                lda (tmp1)      ; copy LSB
.a35b	95 00		sta $00,x	                sta 0,x
.a35d	a0 01		ldy #$01	                ldy #1          ; copy next
.a35f	b1 24		lda ($24),y	                lda (tmp1),y
.a361	95 01		sta $01,x	                sta 1,x
.a363	c8		iny		                iny             ; copy next
.a364	b1 24		lda ($24),y	                lda (tmp1),y
.a366	95 02		sta $02,x	                sta 2,x
.a368	c8		iny		                iny             ; copy next
.a369	b1 24		lda ($24),y	                lda (tmp1),y
.a36b	95 03		sta $03,x	                sta 3,x
.a36d	60		rts		z_two_fetch:    rts
.a36e					xt_two_over:
.a36e	20 fa d5	jsr $d5fa	                jsr underflow_4
.a371	ca		dex		                dex
.a372	ca		dex		                dex
.a373	ca		dex		                dex
.a374	ca		dex		                dex
.a375	b5 08		lda $08,x	                lda 8,x
.a377	95 00		sta $00,x	                sta 0,x
.a379	b5 09		lda $09,x	                lda 9,x
.a37b	95 01		sta $01,x	                sta 1,x
.a37d	b5 0a		lda $0a,x	                lda 10,x
.a37f	95 02		sta $02,x	                sta 2,x
.a381	b5 0b		lda $0b,x	                lda 11,x
.a383	95 03		sta $03,x	                sta 3,x
.a385	60		rts		z_two_over:     rts
.a386					xt_two_r_fetch:
.a386	ca		dex		                dex
.a387	ca		dex		                dex
.a388	ca		dex		                dex
.a389	ca		dex		                dex
.a38a	8a		txa		                txa
.a38b	ba		tsx		                tsx
.a38c	da		phx		                phx             ; 65c02 has no TXY, so do it the hard way
.a38d	7a		ply		                ply
.a38e	aa		tax		                tax
.a38f	b9 03 01	lda $0103,y	                lda $0103,y     ; LSB of top entry
.a392	95 00		sta $00,x	                sta 0,x
.a394	b9 04 01	lda $0104,y	                lda $0104,y     ; MSB of top entry
.a397	95 01		sta $01,x	                sta 1,x
.a399	b9 05 01	lda $0105,y	                lda $0105,y     ; LSB of bottom entry
.a39c	95 02		sta $02,x	                sta 2,x
.a39e	b9 06 01	lda $0106,y	                lda $0106,y     ; MSB of top entry
.a3a1	95 03		sta $03,x	                sta 3,x
.a3a3	60		rts		z_two_r_fetch:  rts
.a3a4					xt_two_r_from:
.a3a4	68		pla		                pla                     ; LSB
.a3a5	85 24		sta $24		                sta tmp1
.a3a7	68		pla		                pla                     ; MSB
.a3a8	85 25		sta $25		                sta tmp1+1
.a3aa	ca		dex		                dex
.a3ab	ca		dex		                dex
.a3ac	ca		dex		                dex
.a3ad	ca		dex		                dex
.a3ae	68		pla		                pla                     ; LSB
.a3af	95 00		sta $00,x	                sta 0,x
.a3b1	68		pla		                pla                     ; MSB
.a3b2	95 01		sta $01,x	                sta 1,x
.a3b4	68		pla		                pla                     ; LSB
.a3b5	95 02		sta $02,x	                sta 2,x
.a3b7	68		pla		                pla                     ; MSB
.a3b8	95 03		sta $03,x	                sta 3,x
.a3ba	a5 25		lda $25		                lda tmp1+1              ; MSB
.a3bc	48		pha		                pha
.a3bd	a5 24		lda $24		                lda tmp1                ; LSB
.a3bf	48		pha		                pha
.a3c0	60		rts		z_two_r_from:   rts
.a3c1					xt_two_slash:
.a3c1	20 eb d5	jsr $d5eb	                jsr underflow_1
.a3c4	b5 01		lda $01,x	                lda 1,x
.a3c6	0a		asl a		                asl                     ; save the sign
.a3c7	76 01		ror $01,x	                ror 1,x
.a3c9	76 00		ror $00,x	                ror 0,x
.a3cb	60		rts		z_two_slash:    rts
.a3cc					xt_two_star:
.a3cc					xt_cells:
.a3cc	20 eb d5	jsr $d5eb	                jsr underflow_1
.a3cf	16 00		asl $00,x	                asl 0,x
.a3d1	36 01		rol $01,x	                rol 1,x
.a3d3					z_cells:
.a3d3	60		rts		z_two_star:     rts
.a3d4					xt_two_store:
.a3d4	20 f5 d5	jsr $d5f5	                jsr underflow_3
.a3d7	b5 00		lda $00,x	                lda 0,x
.a3d9	85 24		sta $24		                sta tmp1
.a3db	b4 01		ldy $01,x	                ldy 1,x
.a3dd	84 25		sty $25		                sty tmp1+1
.a3df	e8		inx		                inx
.a3e0	e8		inx		                inx
.a3e1	b5 00		lda $00,x	                lda 0,x         ; copy MSB
.a3e3	92 24		sta ($24)	                sta (tmp1)
.a3e5	b5 01		lda $01,x	                lda 1,x         ; copy next
.a3e7	a0 01		ldy #$01	                ldy #1
.a3e9	91 24		sta ($24),y	                sta (tmp1),y
.a3eb	b5 02		lda $02,x	                lda 2,x         ; copy next
.a3ed	c8		iny		                iny
.a3ee	91 24		sta ($24),y	                sta (tmp1),y
.a3f0	b5 03		lda $03,x	                lda 3,x         ; copy MSB
.a3f2	c8		iny		                iny
.a3f3	91 24		sta ($24),y	                sta (tmp1),y
.a3f5	e8		inx		                inx             ; 2DROP
.a3f6	e8		inx		                inx
.a3f7	e8		inx		                inx
.a3f8	e8		inx		                inx
.a3f9	60		rts		z_two_store:    rts
.a3fa					xt_two_swap:
.a3fa	20 fa d5	jsr $d5fa	                jsr underflow_4
.a3fd	b5 00		lda $00,x	                lda 0,x
.a3ff	b4 04		ldy $04,x	                ldy 4,x
.a401	95 04		sta $04,x	                sta 4,x
.a403	94 00		sty $00,x	                sty 0,x
.a405	b5 01		lda $01,x	                lda 1,x
.a407	b4 05		ldy $05,x	                ldy 5,x
.a409	95 05		sta $05,x	                sta 5,x
.a40b	94 01		sty $01,x	                sty 1,x
.a40d	b5 02		lda $02,x	                lda 2,x
.a40f	b4 06		ldy $06,x	                ldy 6,x
.a411	95 06		sta $06,x	                sta 6,x
.a413	94 02		sty $02,x	                sty 2,x
.a415	b5 03		lda $03,x	                lda 3,x
.a417	b4 07		ldy $07,x	                ldy 7,x
.a419	95 07		sta $07,x	                sta 7,x
.a41b	94 03		sty $03,x	                sty 3,x
.a41d	60		rts		z_two_swap:     rts
.a41e					xt_two_to_r:
.a41e	68		pla		                pla             ; LSB
.a41f	85 24		sta $24		                sta tmp1
.a421	68		pla		                pla             ; MSB
.a422	85 25		sta $25		                sta tmp1+1
.a424	20 f0 d5	jsr $d5f0	                jsr underflow_2
.a427	b5 03		lda $03,x	                lda 3,x         ; MSB
.a429	48		pha		                pha
.a42a	b5 02		lda $02,x	                lda 2,x         ; LSB
.a42c	48		pha		                pha
.a42d	b5 01		lda $01,x	                lda 1,x         ; MSB
.a42f	48		pha		                pha
.a430	b5 00		lda $00,x	                lda 0,x         ; LSB
.a432	48		pha		                pha
.a433	e8		inx		                inx
.a434	e8		inx		                inx
.a435	e8		inx		                inx
.a436	e8		inx		                inx
.a437	a5 25		lda $25		                lda tmp1+1      ; MSB
.a439	48		pha		                pha
.a43a	a5 24		lda $24		                lda tmp1        ; LSB
.a43c	48		pha		                pha
.a43d	60		rts		z_two_to_r:     rts
.a43e					xt_two_constant:
.a43e	20 f0 d5	jsr $d5f0	                jsr underflow_2
.a441	20 59 89	jsr $8959	                jsr xt_create
.a444	20 2a a1	jsr $a12a	                jsr xt_swap
.a447	20 5e 87	jsr $875e	                jsr xt_comma
.a44a	20 5e 87	jsr $875e	                jsr xt_comma
.a44d	20 f4 8b	jsr $8bf4	                jsr does_runtime    ; does> turns into these two routines.
.a450	20 d4 d4	jsr $d4d4	                jsr dodoes
.a453	20 9f 8d	jsr $8d9f	                jsr xt_dup
.a456	20 70 8f	jsr $8f70	                jsr xt_fetch
.a459	20 2a a1	jsr $a12a	                jsr xt_swap
.a45c	20 11 86	jsr $8611	                jsr xt_cell_plus
.a45f	20 70 8f	jsr $8f70	                jsr xt_fetch
.a462	60		rts		z_two_constant: rts
.a463					xt_two_literal:
.a463	20 f0 d5	jsr $d5f0	                jsr underflow_2 ; double number
.a466	20 2a a1	jsr $a12a	                jsr xt_swap
.a469	20 7a 93	jsr $937a	                jsr xt_literal
.a46c	20 7a 93	jsr $937a	                jsr xt_literal
.a46f	60		rts		z_two_literal:  rts
.a470					xt_two_variable:
.a470	20 59 89	jsr $8959	                jsr xt_create
.a473	ca		dex		                dex
.a474	ca		dex		                dex
.a475	a9 04		lda #$04	                lda #4
.a477	95 00		sta $00,x	                sta 0,x
.a479	74 01		stz $01,x	                stz 1,x
.a47b	20 ab 82	jsr $82ab	                jsr xt_allot
.a47e	60		rts		z_two_variable: rts
.a47f					xt_type:
.a47f	20 f0 d5	jsr $d5f0	                jsr underflow_2
.a482	b5 02		lda $02,x	                lda 2,x
.a484	85 24		sta $24		                sta tmp1
.a486	b5 03		lda $03,x	                lda 3,x
.a488	85 25		sta $25		                sta tmp1+1
.a48a					_loop:
.a48a	b5 00		lda $00,x	                lda 0,x
.a48c	15 01		ora $01,x	                ora 1,x
.a48e	f0 15		beq $a4a5	                beq _done
.a490	b2 24		lda ($24)	                lda (tmp1)
.a492	20 e6 8d	jsr $8de6	                jsr emit_a      ; avoids stack foolery
.a495	e6 24		inc $24		                inc tmp1
.a497	d0 02		bne $a49b	                bne +
.a499	e6 25		inc $25		                inc tmp1+1
.a49b					+
.a49b	b5 00		lda $00,x	                lda 0,x
.a49d	d0 02		bne $a4a1	                bne +
.a49f	d6 01		dec $01,x	                dec 1,x
.a4a1					+
.a4a1	d6 00		dec $00,x	                dec 0,x
.a4a3	80 e5		bra $a48a	                bra _loop
.a4a5					_done:
.a4a5	e8		inx		                inx
.a4a6	e8		inx		                inx
.a4a7	e8		inx		                inx
.a4a8	e8		inx		                inx
.a4a9	60		rts		z_type:         rts
.a4aa					xt_u_dot:
.a4aa	20 eb d5	jsr $d5eb	                jsr underflow_1
.a4ad	20 37 d6	jsr $d637	                jsr print_u
.a4b0	a9 20		lda #$20	                lda #AscSP
.a4b2	20 e6 8d	jsr $8de6	                jsr emit_a
.a4b5	60		rts		z_u_dot:        rts
.a4b6					xt_u_dot_r:
.a4b6	20 f0 d5	jsr $d5f0	                jsr underflow_2
.a4b9	20 ec a2	jsr $a2ec	                jsr xt_to_r
.a4bc	20 23 a7	jsr $a723	                jsr xt_zero
.a4bf	20 4a 93	jsr $934a	                jsr xt_less_number_sign
.a4c2	20 60 97	jsr $9760	                jsr xt_number_sign_s
.a4c5	20 3e 97	jsr $973e	                jsr xt_number_sign_greater
.a4c8	20 14 9a	jsr $9a14	                jsr xt_r_from
.a4cb	20 15 98	jsr $9815	                jsr xt_over
.a4ce	20 40 95	jsr $9540	                jsr xt_minus
.a4d1	20 a6 a0	jsr $a0a6	                jsr xt_spaces
.a4d4	20 7f a4	jsr $a47f	                jsr xt_type
.a4d7	60		rts		z_u_dot_r:      rts
.a4d8					xt_u_greater_than:
.a4d8	20 f0 d5	jsr $d5f0	                jsr underflow_2
.a4db	b5 00		lda $00,x	                lda 0,x
.a4dd	d5 02		cmp $02,x	                cmp 2,x
.a4df	b5 01		lda $01,x	                lda 1,x
.a4e1	f5 03		sbc $03,x	                sbc 3,x
.a4e3	e8		inx		                inx
.a4e4	e8		inx		                inx
.a4e5	a9 00		lda #$00	                lda #0
.a4e7	69 ff		adc #$ff	                adc #$ff
.a4e9	95 00		sta $00,x	                sta 0,x         ; store flag
.a4eb	95 01		sta $01,x	                sta 1,x
.a4ed	60		rts		z_u_greater_than:    rts
.a4ee					xt_u_less_than:
.a4ee	20 f0 d5	jsr $d5f0	                jsr underflow_2
.a4f1	b5 02		lda $02,x	                lda 2,x
.a4f3	d5 00		cmp $00,x	                cmp 0,x
.a4f5	b5 03		lda $03,x	                lda 3,x
.a4f7	f5 01		sbc $01,x	                sbc 1,x
.a4f9	e8		inx		                inx
.a4fa	e8		inx		                inx
.a4fb	a9 00		lda #$00	                lda #0
.a4fd	69 ff		adc #$ff	                adc #$ff
.a4ff	95 00		sta $00,x	                sta 0,x         ; store flag
.a501	95 01		sta $01,x	                sta 1,x
.a503	60		rts		z_u_less_than:    rts
.a504					xt_ud_dot:
.a504	20 f0 d5	jsr $d5f0	                jsr underflow_2 ; double number
.a507	20 4a 93	jsr $934a	                jsr xt_less_number_sign
.a50a	20 60 97	jsr $9760	                jsr xt_number_sign_s
.a50d	20 3e 97	jsr $973e	                jsr xt_number_sign_greater
.a510	20 7f a4	jsr $a47f	                jsr xt_type
.a513	20 a0 a0	jsr $a0a0	                jsr xt_space
.a516	60		rts		z_ud_dot:        rts
.a517					xt_ud_dot_r:
.a517	20 f5 d5	jsr $d5f5	                jsr underflow_3
.a51a	20 ec a2	jsr $a2ec	                jsr xt_to_r
.a51d	20 4a 93	jsr $934a	                jsr xt_less_number_sign
.a520	20 60 97	jsr $9760	                jsr xt_number_sign_s
.a523	20 3e 97	jsr $973e	                jsr xt_number_sign_greater
.a526	20 14 9a	jsr $9a14	                jsr xt_r_from
.a529	20 15 98	jsr $9815	                jsr xt_over
.a52c	20 40 95	jsr $9540	                jsr xt_minus
.a52f	20 a6 a0	jsr $a0a6	                jsr xt_spaces
.a532	20 7f a4	jsr $a47f	                jsr xt_type
.a535	60		rts		z_ud_dot_r:      rts
.a536					xt_um_slash_mod:
.a536	20 f5 d5	jsr $d5f5	                jsr underflow_3
.a539	b5 00		lda $00,x	                lda 0,x
.a53b	15 01		ora $01,x	                ora 1,x
.a53d	d0 05		bne $a544	                bne _not_zero
.a53f	a9 04		lda #$04	                lda #err_divzero
.a541	4c 01 d6	jmp $d601	                jmp error
.a544					_not_zero:
.a544	a9 11		lda #$11	                lda #17
.a546	85 2c		sta $2c		                sta tmptos
.a548					_loop:
.a548	36 04		rol $04,x	                rol 4,x
.a54a	36 05		rol $05,x	                rol 5,x
.a54c	c6 2c		dec $2c		                dec tmptos
.a54e	f0 22		beq $a572	                beq _done
.a550	36 02		rol $02,x	                rol 2,x
.a552	36 03		rol $03,x	                rol 3,x
.a554	64 24		stz $24		                stz tmp1        ; store the bit we got from hi cell (MSB)
.a556	26 24		rol $24		                rol tmp1
.a558	38		sec		                sec
.a559	b5 02		lda $02,x	                lda 2,x
.a55b	f5 00		sbc $00,x	                sbc 0,x
.a55d	85 25		sta $25		                sta tmp1+1
.a55f	b5 03		lda $03,x	                lda 3,x
.a561	f5 01		sbc $01,x	                sbc 1,x
.a563	a8		tay		                tay
.a564	a5 24		lda $24		                lda tmp1
.a566	e9 00		sbc #$00	                sbc #0
.a568	90 de		bcc $a548	                bcc _loop
.a56a	a5 25		lda $25		                lda tmp1+1
.a56c	95 02		sta $02,x	                sta 2,x
.a56e	94 03		sty $03,x	                sty 3,x         ; used as temp storage
.a570	80 d6		bra $a548	                bra _loop
.a572					_done:
.a572	e8		inx		                inx
.a573	e8		inx		                inx
.a574	20 2a a1	jsr $a12a	                jsr xt_swap
.a577	60		rts		z_um_slash_mod: rts
.a578					xt_um_star:
.a578	20 f0 d5	jsr $d5f0	                jsr underflow_2
.a57b	18		clc		                clc
.a57c	b5 00		lda $00,x	                lda 0,x         ; copy TOS to tmp2
.a57e	e9 00		sbc #$00	                sbc #0
.a580	85 26		sta $26		                sta tmp2
.a582	b5 01		lda $01,x	                lda 1,x
.a584	e9 00		sbc #$00	                sbc #0
.a586	90 31		bcc $a5b9	                bcc _zero       ; is TOS zero?
.a588	85 27		sta $27		                sta tmp2+1
.a58a	a9 00		lda #$00	                lda #0
.a58c	85 24		sta $24		                sta tmp1
.a58e	86 28		stx $28		                stx tmp3        ; tested for exit from outer loop
.a590	ca		dex		                dex
.a591	ca		dex		                dex
.a592					_outer_loop:
.a592	a0 08		ldy #$08	                ldy #8          ; counter inner loop
.a594	56 04		lsr $04,x	                lsr 4,x         ; think "2,x" then later "3,x"
.a596					_inner_loop:
.a596	90 0c		bcc $a5a4	                bcc _no_add
.a598	85 25		sta $25		                sta tmp1+1      ; save time, don't CLC
.a59a	a5 24		lda $24		                lda tmp1
.a59c	65 26		adc $26		                adc tmp2
.a59e	85 24		sta $24		                sta tmp1
.a5a0	a5 25		lda $25		                lda tmp1+1
.a5a2	65 27		adc $27		                adc tmp2+1
.a5a4					_no_add:
.a5a4	6a		ror a		                ror
.a5a5	66 24		ror $24		                ror tmp1
.a5a7	76 04		ror $04,x	                ror 4,x         ; think "2,x" then later "3,x"
.a5a9	88		dey		                dey
.a5aa	d0 ea		bne $a596	                bne _inner_loop ; go back for one more shift?
.a5ac	e8		inx		                inx
.a5ad	e4 28		cpx $28		                cpx tmp3
.a5af	d0 e1		bne $a592	                bne _outer_loop ; go back for eight more shifts?
.a5b1	95 01		sta $01,x	                sta 1,x
.a5b3	a5 24		lda $24		                lda tmp1
.a5b5	95 00		sta $00,x	                sta 0,x
.a5b7	80 04		bra $a5bd	                bra _done
.a5b9					_zero:
.a5b9	74 02		stz $02,x	                stz 2,x
.a5bb	74 03		stz $03,x	                stz 3,x
.a5bd					_done:
.a5bd	60		rts		z_um_star:      rts
.a5be					xt_unloop:
.a5be	68		pla		                pla
.a5bf	68		pla		                pla
.a5c0	68		pla		                pla
.a5c1	68		pla		                pla
.a5c2	68		pla		                pla
.a5c3	68		pla		                pla
.a5c4	60		rts		z_unloop:       rts
.a5c5					xt_until:
.a5c5	a0 92		ldy #$92	                ldy #>zero_branch_runtime
.a5c7	a9 04		lda #$04	                lda #<zero_branch_runtime
.a5c9	20 8e d4	jsr $d48e	                jsr cmpl_subroutine
.a5cc	20 5e 87	jsr $875e	                jsr xt_comma
.a5cf	60		rts		z_until:        rts
.a5d0					xt_unused:
.a5d0	ca		dex		                dex
.a5d1	ca		dex		                dex
.a5d2	a9 00		lda #$00	                lda #<cp_end
.a5d4	38		sec		                sec
.a5d5	e5 00		sbc $00		                sbc cp
.a5d7	95 00		sta $00,x	                sta 0,x
.a5d9	a9 7c		lda #$7c	                lda #>cp_end
.a5db	e5 01		sbc $01		                sbc cp+1
.a5dd	95 01		sta $01,x	                sta 1,x
.a5df	60		rts		z_unused:       rts
.a5e0					xt_update:
.a5e0	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.a5e2	b1 1e		lda ($1e),y	                lda (up),y
.a5e4	09 02		ora #$02	                ora #2          ; Turn on dirty flag (bit 2)
.a5e6	91 1e		sta ($1e),y	                sta (up),y
.a5e8	60		rts		z_update:       rts
.a5e9					xt_useraddr:
.a5e9	ca		dex		                dex
.a5ea	ca		dex		                dex
.a5eb	a9 1e		lda #$1e	                lda #<up
.a5ed	95 00		sta $00,x	                sta 0,x
.a5ef	a9 00		lda #$00	                lda #>up
.a5f1	95 01		sta $01,x	                sta 1,x
.a5f3	60		rts		z_useraddr:     rts
.a5f4					xt_variable:
.a5f4	20 59 89	jsr $8959	                jsr xt_create
.a5f7	a9 00		lda #$00	                lda #0
.a5f9	92 00		sta ($00)	                sta (cp)
.a5fb	e6 00		inc $00		                inc cp
.a5fd	d0 02		bne $a601	                bne +
.a5ff	e6 01		inc $01		                inc cp+1
.a601					+
.a601	92 00		sta ($00)	                sta (cp)
.a603	e6 00		inc $00		                inc cp
.a605	d0 02		bne $a609	                bne +
.a607	e6 01		inc $01		                inc cp+1
.a609					+
.a609	20 21 89	jsr $8921	                jsr adjust_z
.a60c	60		rts		z_variable:     rts
.a60d					xt_while:
.a60d	a0 92		ldy #$92	                ldy #>zero_branch_runtime
.a60f	a9 04		lda #$04	                lda #<zero_branch_runtime
.a611	20 8e d4	jsr $d48e	                jsr cmpl_subroutine
.a614	20 62 91	jsr $9162	                jsr xt_here
.a617	20 23 a7	jsr $a723	                jsr xt_zero
.a61a	20 5e 87	jsr $875e	                jsr xt_comma
.a61d	20 2a a1	jsr $a12a	                jsr xt_swap
.a620	60		rts		z_while:        rts
.a621					xt_within:
.a621	20 f5 d5	jsr $d5f5	                jsr underflow_3
.a624	20 15 98	jsr $9815	                jsr xt_over
.a627	20 40 95	jsr $9540	                jsr xt_minus
.a62a	20 ec a2	jsr $a2ec	                jsr xt_to_r
.a62d	20 40 95	jsr $9540	                jsr xt_minus
.a630	20 14 9a	jsr $9a14	                jsr xt_r_from
.a633	20 ee a4	jsr $a4ee	                jsr xt_u_less_than
.a636	60		rts		z_within:       rts
.a637					xt_word:
.a637	20 eb d5	jsr $d5eb	                jsr underflow_1
.a63a	a4 0c		ldy $0c		                ldy toin                ; >IN
.a63c					_loop:
.a63c	c4 0a		cpy $0a		                cpy ciblen              ; quit if end of input
.a63e	f0 09		beq $a649	                beq _found_char
.a640	b1 08		lda ($08),y	                lda (cib),y
.a642	d5 00		cmp $00,x	                cmp 0,x                 ; ASCII of delimiter
.a644	d0 03		bne $a649	                bne _found_char
.a646	c8		iny		                iny
.a647	80 f3		bra $a63c	                bra _loop
.a649					_found_char:
.a649	84 0c		sty $0c		                sty toin
.a64b	20 bc 98	jsr $98bc	                jsr xt_parse            ; Returns ( addr u )
.a64e	b5 00		lda $00,x	                lda 0,x
.a650	92 00		sta ($00)	                sta (cp)                ; Save length of string
.a652	48		pha		                pha                     ; Keep copy of length for later
.a653	20 9f 8d	jsr $8d9f	                jsr xt_dup              ; ( addr u u )
.a656	a5 00		lda $00		                lda cp
.a658	18		clc		                clc
.a659	69 01		adc #$01	                adc #1
.a65b	95 02		sta $02,x	                sta 2,x                 ; LSB of CP
.a65d	a5 01		lda $01		                lda cp+1
.a65f	69 00		adc #$00	                adc #0
.a661	95 03		sta $03,x	                sta 3,x                 ; ( addr cp+1 u )
.a663	20 b2 95	jsr $95b2	                jsr xt_move
.a666	ca		dex		                dex
.a667	ca		dex		                dex
.a668	a5 00		lda $00		                lda cp
.a66a	95 00		sta $00,x	                sta 0,x
.a66c	a5 01		lda $01		                lda cp+1
.a66e	95 01		sta $01,x	                sta 1,x
.a670	68		pla		                pla                     ; length of string
.a671	18		clc		                clc
.a672	65 00		adc $00		                adc cp
.a674	85 00		sta $00		                sta cp
.a676	a5 01		lda $01		                lda cp+1
.a678	69 00		adc #$00	                adc #0                  ; we only need the carry
.a67a	85 01		sta $01		                sta cp+1
.a67c	60		rts		z_word:         rts
.a67d					xt_wordlist:
.a67d	a0 05		ldy #$05	                ldy #num_wordlists_offset
.a67f	b1 1e		lda ($1e),y	                lda (up),y      ; This is a byte variable, so only
.a681	c9 0c		cmp #$0c	                cmp #max_wordlists
.a683	d0 05		bne $a68a	                bne _ok
.a685	a9 0b		lda #$0b	                lda #err_wordlist
.a687	4c 01 d6	jmp $d601	                jmp error
.a68a					_ok:
.a68a	1a		inc a		                ina             ; Increment the wordlist#
.a68b	91 1e		sta ($1e),y	                sta (up),y      ; Save it into byte variable #wordlists
.a68d	ca		dex		                dex             ; and put it on the stack.
.a68e	ca		dex		                dex
.a68f	95 00		sta $00,x	                sta 0,x
.a691	74 01		stz $01,x	                stz 1,x         ; 12 is the max, so upper byte is always zero.
.a693	60		rts		z_wordlist:     rts
.a694					xt_words:
.a694	20 53 89	jsr $8953	                jsr xt_cr
.a697	a9 00		lda #$00	                lda #0
.a699	48		pha		                pha
.a69a	ca		dex		                dex                     ; Make room on the stack for
.a69b	ca		dex		                dex                     ; a dictionary pointer.
.a69c	64 28		stz $28		                stz tmp3                ; Start at the beginning of
.a69e					_wordlist_loop:
.a69e	a0 1e		ldy #$1e	                ldy #num_order_offset   ; Check against byte variable #ORDER.
.a6a0	a5 28		lda $28		                lda tmp3
.a6a2	d1 1e		cmp ($1e),y	                cmp (up),y              ; See if we are done.
.a6a4	d0 02		bne $a6a8	                bne _have_wordlist
.a6a6	80 44		bra $a6ec	                bra _words_done
.a6a8					_have_wordlist:
.a6a8	18		clc		                clc                     ; Index into byte array SEARCH-ORDER.
.a6a9	69 1f		adc #$1f	                adc #search_order_offset
.a6ab	a8		tay		                tay
.a6ac	b1 1e		lda ($1e),y	                lda (up),y              ; Get the index into array WORDLISTS
.a6ae	0a		asl a		                asl                     ; Turn offset into cells offset.
.a6af	18		clc		                clc
.a6b0	69 06		adc #$06	                adc #wordlists_offset
.a6b2	a8		tay		                tay
.a6b3	b1 1e		lda ($1e),y	                lda (up),y              ; Save the DP for this wordlist
.a6b5	95 00		sta $00,x	                sta 0,x                 ; on the stack. ( nt )
.a6b7	c8		iny		                iny
.a6b8	b1 1e		lda ($1e),y	                lda (up),y
.a6ba	95 01		sta $01,x	                sta 1,x
.a6bc					_loop:
.a6bc	20 9f 8d	jsr $8d9f	                jsr xt_dup              ; ( nt nt )
.a6bf	20 ee 95	jsr $95ee	                jsr xt_name_to_string   ; ( nt addr u )
.a6c2	68		pla		                pla
.a6c3	18		clc		                clc
.a6c4	75 00		adc $00,x	                adc 0,x
.a6c6	1a		inc a		                ina                     ; don't forget the space between words
.a6c7	c9 4f		cmp #$4f	                cmp #MAX_LINE_LENGTH    ; usually 79
.a6c9	90 05		bcc $a6d0	                bcc +
.a6cb	20 53 89	jsr $8953	                jsr xt_cr
.a6ce	a9 00		lda #$00	                lda #0
.a6d0					+
.a6d0	48		pha		                pha
.a6d1	20 7f a4	jsr $a47f	                jsr xt_type             ; ( nt )
.a6d4	a9 20		lda #$20	                lda #AscSP
.a6d6	20 e6 8d	jsr $8de6	                jsr emit_a
.a6d9	20 9f 97	jsr $979f	                jsr xt_one_plus         ; 1+
.a6dc	20 9f 97	jsr $979f	                jsr xt_one_plus         ; 1+
.a6df	20 70 8f	jsr $8f70	                jsr xt_fetch            ; @ ( nt+1 )
.a6e2	b5 00		lda $00,x	                lda 0,x
.a6e4	15 01		ora $01,x	                ora 1,x
.a6e6	d0 d4		bne $a6bc	                bne _loop
.a6e8	e6 28		inc $28		                inc tmp3
.a6ea	80 b2		bra $a69e	                bra _wordlist_loop
.a6ec					_words_done:
.a6ec	68		pla		                pla                     ; dump counter
.a6ed	e8		inx		                inx
.a6ee	e8		inx		                inx
.a6ef	60		rts		z_words:        rts
.a6f0					xt_wordsize:
.a6f0	20 eb d5	jsr $d5eb	                jsr underflow_1
.a6f3	b5 00		lda $00,x	                lda 0,x
.a6f5	85 24		sta $24		                sta tmp1
.a6f7	b5 01		lda $01,x	                lda 1,x
.a6f9	85 25		sta $25		                sta tmp1+1
.a6fb	a0 06		ldy #$06	                ldy #6
.a6fd	b1 24		lda ($24),y	                lda (tmp1),y    ; LSB of z
.a6ff	88		dey		                dey
.a700	88		dey		                dey
.a701	38		sec		                sec
.a702	f1 24		sbc ($24),y	                sbc (tmp1),y    ; LSB of xt
.a704	95 00		sta $00,x	                sta 0,x
.a706	a0 07		ldy #$07	                ldy #7
.a708	b1 24		lda ($24),y	                lda (tmp1),y    ; MSB of z
.a70a	88		dey		                dey
.a70b	88		dey		                dey
.a70c	f1 24		sbc ($24),y	                sbc (tmp1),y    ; MSB of xt
.a70e	95 01		sta $01,x	                sta 1,x
.a710	60		rts		z_wordsize:     rts
.a711					xt_xor:
.a711	20 f0 d5	jsr $d5f0	                jsr underflow_2
.a714	b5 00		lda $00,x	                lda 0,x
.a716	55 02		eor $02,x	                eor 2,x
.a718	95 02		sta $02,x	                sta 2,x
.a71a	b5 01		lda $01,x	                lda 1,x
.a71c	55 03		eor $03,x	                eor 3,x
.a71e	95 03		sta $03,x	                sta 3,x
.a720	e8		inx		                inx
.a721	e8		inx		                inx
.a722	60		rts		z_xor:          rts
.a723					xt_case:
.a723					xt_forth_wordlist:
.a723					xt_zero:
.a723	ca		dex		                dex             ; push
.a724	ca		dex		                dex
.a725	74 00		stz $00,x	                stz 0,x
.a727	74 01		stz $01,x	                stz 1,x
.a729					z_case:
.a729					z_forth_wordlist:
.a729					z_zero:
.a729	60		rts		                rts
.a72a					xt_zero_equal:
.a72a	20 eb d5	jsr $d5eb	                jsr underflow_1
.a72d	b5 00		lda $00,x	                lda 0,x
.a72f	15 01		ora $01,x	                ora 1,x
.a731	f0 04		beq $a737	                beq _zero
.a733	a9 00		lda #$00	                lda #0
.a735	80 02		bra $a739	                bra _store
.a737					_zero:
.a737	a9 ff		lda #$ff	                lda #$ff
.a739					_store:
.a739	95 00		sta $00,x	                sta 0,x
.a73b	95 01		sta $01,x	                sta 1,x
.a73d	60		rts		z_zero_equal:   rts
.a73e					xt_zero_greater:
.a73e	20 eb d5	jsr $d5eb	                jsr underflow_1
.a741	a0 00		ldy #$00	                ldy #0          ; Default is FALSE (TOS is negative)
.a743	b5 01		lda $01,x	                lda 1,x         ; MSB
.a745	30 05		bmi $a74c	                bmi _done       ; TOS is negative, keep FLASE
.a747	15 00		ora $00,x	                ora 0,x
.a749	f0 01		beq $a74c	                beq _done       ; TOS is zero, keep FALSE
.a74b	88		dey		                dey             ; TOS is postive, make true
.a74c					_done:
.a74c	98		tya		                tya
.a74d	95 00		sta $00,x	                sta 0,x
.a74f	95 01		sta $01,x	                sta 1,x
.a751	60		rts		z_zero_greater: rts
.a752					xt_zero_less:
.a752	20 eb d5	jsr $d5eb	                jsr underflow_1
.a755	a0 00		ldy #$00	                ldy #0          ; Default is FALSE (TOS positive)
.a757	b5 01		lda $01,x	                lda 1,x         ; MSB
.a759	10 01		bpl $a75c	                bpl _done       ; TOS is positive, so keep FALSE
.a75b	88		dey		                dey             ; TOS is negative, make TRUE
.a75c					_done:
.a75c	98		tya		                tya
.a75d	95 00		sta $00,x	                sta 0,x
.a75f	95 01		sta $01,x	                sta 1,x
.a761	60		rts		z_zero_less:    rts
.a762					xt_zero_unequal:
.a762	20 eb d5	jsr $d5eb	                jsr underflow_1
.a765	a0 00		ldy #$00	                ldy #0          ; default false
.a767	b5 00		lda $00,x	                lda 0,x
.a769	15 01		ora $01,x	                ora 1,x
.a76b	f0 01		beq $a76e	                beq _got_zero
.a76d	88		dey		                dey
.a76e					_got_zero:
.a76e	98		tya		                tya
.a76f	95 00		sta $00,x	                sta 0,x
.a771	95 01		sta $01,x	                sta 1,x
.a773	60		rts		z_zero_unequal: rts
.a774					xt_editor_screen_helper:
.a774	20 9f 8d	jsr $8d9f	                jsr xt_dup
.a777	20 5b 9e	jsr $9e5b	                jsr xt_scr
.a77a	20 09 a1	jsr $a109	                jsr xt_store
.a77d	20 a5 85	jsr $85a5	                jsr xt_buffer
.a780					z_editor_screen_helper:
.a780	60		rts		                rts
.a781					xt_editor_enter_screen:
.a781	20 74 a7	jsr $a774	                jsr xt_editor_screen_helper
.a784	20 1e 8d	jsr $8d1e	                jsr xt_drop
.a787	64 2e		stz $2e		                stz editor1
.a789					_prompt_loop:
.a789	ca		dex		                dex
.a78a	ca		dex		                dex
.a78b	a5 2e		lda $2e		                lda editor1
.a78d	95 00		sta $00,x	                sta 0,x
.a78f	74 01		stz $01,x	                stz 1,x
.a791	20 56 a8	jsr $a856	                jsr xt_editor_o
.a794	e6 2e		inc $2e		                inc editor1
.a796	a9 10		lda #$10	                lda #16
.a798	c5 2e		cmp $2e		                cmp editor1
.a79a	d0 ed		bne $a789	                bne _prompt_loop
.a79c					z_editor_enter_screen:
.a79c	60		rts		                rts
.a79d					xt_editor_erase_screen:
.a79d	20 74 a7	jsr $a774	                jsr xt_editor_screen_helper
.a7a0	ca		dex		                dex
.a7a1	ca		dex		                dex
.a7a2	74 00		stz $00,x	                stz 0,x
.a7a4	a9 04		lda #$04	                lda #4          ; 4 in MSB makes 1024 ($400).
.a7a6	95 01		sta $01,x	                sta 1,x
.a7a8	20 da 8e	jsr $8eda	                jsr xt_blank
.a7ab	20 e0 a5	jsr $a5e0	                jsr xt_update
.a7ae					z_editor_erase_screen:
.a7ae	60		rts		                rts
.a7af					xt_editor_el:
.a7af	20 3d a8	jsr $a83d	                jsr xt_editor_line
.a7b2	ca		dex		                dex
.a7b3	ca		dex		                dex
.a7b4	a9 40		lda #$40	                lda #64
.a7b6	95 00		sta $00,x	                sta 0,x
.a7b8	74 01		stz $01,x	                stz 1,x
.a7ba	20 da 8e	jsr $8eda	                jsr xt_blank
.a7bd	20 e0 a5	jsr $a5e0	                jsr xt_update
.a7c0	60		rts		z_editor_el:    rts
.a7c1					xt_editor_l:
.a7c1	ca		dex		                dex             ; Put SCR on the stack.
.a7c2	ca		dex		                dex
.a7c3	a0 02		ldy #$02	                ldy #scr_offset
.a7c5	b1 1e		lda ($1e),y	                lda (up),y
.a7c7	95 00		sta $00,x	                sta 0,x
.a7c9	c8		iny		                iny
.a7ca	b1 1e		lda ($1e),y	                lda (up),y
.a7cc	95 01		sta $01,x	                sta 1,x
.a7ce	20 b1 83	jsr $83b1	                jsr xt_block    ; Get the current screen.
.a7d1	20 53 89	jsr $8953	                jsr xt_cr
.a7d4	80 08		bra $a7de	                bra _after_screen_msg
.a7d6					_screen_msg:
>a7d6	53 63 72 65 65 6e 20 23		                .text "Screen #"
.a7de					_after_screen_msg:
.a7de	20 2b a0	jsr $a02b	                jsr sliteral_runtime
>a7e1	d6 a7 08 00			                .word _screen_msg, _after_screen_msg-_screen_msg
.a7e5	20 7f a4	jsr $a47f	                jsr xt_type
.a7e8	20 5b 9e	jsr $9e5b	                jsr xt_scr
.a7eb	20 70 8f	jsr $8f70	                jsr xt_fetch
.a7ee	ca		dex		                dex
.a7ef	ca		dex		                dex
.a7f0	a9 04		lda #$04	                lda #4          ; four spaces
.a7f2	95 00		sta $00,x	                sta 0,x
.a7f4	74 01		stz $01,x	                stz 1,x
.a7f6	20 b6 a4	jsr $a4b6	                jsr xt_u_dot_r
.a7f9	64 28		stz $28		                stz tmp3
.a7fb					_line_loop:
.a7fb	20 53 89	jsr $8953	                jsr xt_cr
.a7fe	ca		dex		                dex
.a7ff	ca		dex		                dex
.a800	ca		dex		                dex
.a801	ca		dex		                dex
.a802	74 03		stz $03,x	                stz 3,x
.a804	a5 28		lda $28		                lda tmp3
.a806	95 02		sta $02,x	                sta 2,x
.a808	74 01		stz $01,x	                stz 1,x
.a80a	a9 02		lda #$02	                lda #2
.a80c	95 00		sta $00,x	                sta 0,x
.a80e	20 b6 a4	jsr $a4b6	                jsr xt_u_dot_r
.a811	20 a0 a0	jsr $a0a0	                jsr xt_space
.a814	20 9f 8d	jsr $8d9f	                jsr xt_dup
.a817	ca		dex		                dex
.a818	ca		dex		                dex
.a819	a9 40		lda #$40	                lda #64
.a81b	95 00		sta $00,x	                sta 0,x
.a81d	74 01		stz $01,x	                stz 1,x
.a81f	20 7f a4	jsr $a47f	                jsr xt_type
.a822	18		clc		                clc
.a823	a9 40		lda #$40	                lda #64
.a825	75 00		adc $00,x	                adc 0,x
.a827	95 00		sta $00,x	                sta 0,x
.a829	b5 01		lda $01,x	                lda 1,x
.a82b	69 00		adc #$00	                adc #0      ; Add carry
.a82d	95 01		sta $01,x	                sta 1,x
.a82f	e6 28		inc $28		                inc tmp3
.a831	a5 28		lda $28		                lda tmp3
.a833	c9 10		cmp #$10	                cmp #16
.a835	d0 c4		bne $a7fb	                bne _line_loop
.a837	20 53 89	jsr $8953	                jsr xt_cr
.a83a	e8		inx		                inx
.a83b	e8		inx		                inx
.a83c	60		rts		z_editor_l:            rts
.a83d					xt_editor_line:
.a83d	20 eb d5	jsr $d5eb	                jsr underflow_1
.a840	a0 06		ldy #$06	                ldy #6          ; *64 is same as left shift 6 times.
.a842					_shift_tos_left:
.a842	16 00		asl $00,x	                asl 0,x         ; Shift TOS to the left
.a844	36 01		rol $01,x	                rol 1,x         ; ROL brings MSb from lower byte.
.a846	88		dey		                dey
.a847	d0 f9		bne $a842	                bne _shift_tos_left
.a849	20 5b 9e	jsr $9e5b	                jsr xt_scr
.a84c	20 70 8f	jsr $8f70	                jsr xt_fetch
.a84f	20 b1 83	jsr $83b1	                jsr xt_block
.a852	20 65 99	jsr $9965	                jsr xt_plus
.a855	60		rts		z_editor_line:  rts
.a856					xt_editor_o:
.a856	20 53 89	jsr $8953	                jsr xt_cr
.a859	20 9f 8d	jsr $8d9f	                jsr xt_dup
.a85c	20 23 a3	jsr $a323	                jsr xt_two
.a85f	20 b6 a4	jsr $a4b6	                jsr xt_u_dot_r
.a862	20 a0 a0	jsr $a0a0	                jsr xt_space
.a865	a9 2a		lda #$2a	                lda #42         ; ASCII for *
.a867	20 e6 8d	jsr $8de6	                jsr emit_a
.a86a	20 a0 a0	jsr $a0a0	                jsr xt_space
.a86d	20 3d a8	jsr $a83d	                jsr xt_editor_line
.a870	20 9f 8d	jsr $8d9f	                jsr xt_dup      ; Save a copy of the line address for later.
.a873	ca		dex		                dex
.a874	ca		dex		                dex
.a875	a9 40		lda #$40	                lda #64         ; chars/line
.a877	95 00		sta $00,x	                sta 0,x
.a879	74 01		stz $01,x	                stz 1,x
.a87b	20 4e 81	jsr $814e	                jsr xt_accept
.a87e	20 9f 8d	jsr $8d9f	                jsr xt_dup
.a881	20 5e 96	jsr $965e	                jsr xt_not_rote ; -rot
.a884	20 65 99	jsr $9965	                jsr xt_plus
.a887	ca		dex		                dex
.a888	ca		dex		                dex
.a889	a9 40		lda #$40	                lda #64         ; chars/line
.a88b	95 00		sta $00,x	                sta 0,x
.a88d	74 01		stz $01,x	                stz 1,x
.a88f	20 d9 9a	jsr $9ad9	                jsr xt_rot
.a892	20 40 95	jsr $9540	                jsr xt_minus
.a895	20 da 8e	jsr $8eda	                jsr xt_blank
.a898	20 e0 a5	jsr $a5e0	                jsr xt_update
.a89b	60		rts		z_editor_o:     rts

;******  Return to file: platform/../taliforth.asm


;******  Processing file: platform/../assembler.asm

.a89c					assembler:
.a89c					xt_asm_adc_h:
.a89c	a9 69		lda #$69	                lda #$69
.a89e	4c f7 ab	jmp $abf7	                jmp asm_common
.a8a1					z_asm_adc_h:
.a8a1					xt_asm_adc_x:
.a8a1	a9 7d		lda #$7d	                lda #$7D
.a8a3	4c f7 ab	jmp $abf7	                jmp asm_common
.a8a6					z_asm_adc_x:
.a8a6					xt_asm_adc_y:
.a8a6	a9 79		lda #$79	                lda #$79
.a8a8	4c f7 ab	jmp $abf7	                jmp asm_common
.a8ab					z_asm_adc_y:
.a8ab					xt_asm_adc_z:
.a8ab	a9 65		lda #$65	                lda #$65
.a8ad	4c f7 ab	jmp $abf7	                jmp asm_common
.a8b0					z_asm_adc_z:
.a8b0					xt_asm_adc_zi:
.a8b0	a9 72		lda #$72	                lda #$72
.a8b2	4c f7 ab	jmp $abf7	                jmp asm_common
.a8b5					z_asm_adc_zi:
.a8b5					xt_asm_adc_ziy:
.a8b5	a9 71		lda #$71	                lda #$71
.a8b7	4c f7 ab	jmp $abf7	                jmp asm_common
.a8ba					z_asm_adc_ziy:
.a8ba					xt_asm_adc_zx:
.a8ba	a9 75		lda #$75	                lda #$75
.a8bc	4c f7 ab	jmp $abf7	                jmp asm_common
.a8bf					z_asm_adc_zx:
.a8bf					xt_asm_adc_zxi:
.a8bf	a9 61		lda #$61	                lda #$61
.a8c1	4c f7 ab	jmp $abf7	                jmp asm_common
.a8c4					z_asm_adc_zxi:
.a8c4					xt_asm_and:
.a8c4	a9 2d		lda #$2d	                lda #$2D
.a8c6	4c f7 ab	jmp $abf7	                jmp asm_common
.a8c9					z_asm_and:
.a8c9					xt_asm_and_h:
.a8c9	a9 29		lda #$29	                lda #$29
.a8cb	4c f7 ab	jmp $abf7	                jmp asm_common
.a8ce					z_asm_and_h:
.a8ce					xt_asm_and_x:
.a8ce	a9 3d		lda #$3d	                lda #$3D
.a8d0	4c f7 ab	jmp $abf7	                jmp asm_common
.a8d3					z_asm_and_x:
.a8d3					xt_asm_and_y:
.a8d3	a9 39		lda #$39	                lda #$39
.a8d5	4c f7 ab	jmp $abf7	                jmp asm_common
.a8d8					z_asm_and_y:
.a8d8					xt_asm_and_z:
.a8d8	a9 25		lda #$25	                lda #$25
.a8da	4c f7 ab	jmp $abf7	                jmp asm_common
.a8dd					z_asm_and_z:
.a8dd					xt_asm_and_zi:
.a8dd	a9 32		lda #$32	                lda #$32
.a8df	4c f7 ab	jmp $abf7	                jmp asm_common
.a8e2					z_asm_and_zi:
.a8e2					xt_asm_and_ziy:
.a8e2	a9 31		lda #$31	                lda #$31
.a8e4	4c f7 ab	jmp $abf7	                jmp asm_common
.a8e7					z_asm_and_ziy:
.a8e7					xt_asm_and_zx:
.a8e7	a9 35		lda #$35	                lda #$35
.a8e9	4c f7 ab	jmp $abf7	                jmp asm_common
.a8ec					z_asm_and_zx:
.a8ec					xt_asm_and_zxi:
.a8ec	a9 21		lda #$21	                lda #$21
.a8ee	4c f7 ab	jmp $abf7	                jmp asm_common
.a8f1					z_asm_and_zxi:
.a8f1					xt_asm_asl:
.a8f1	a9 0e		lda #$0e	                lda #$0E
.a8f3	4c f7 ab	jmp $abf7	                jmp asm_common
.a8f6					z_asm_asl:
.a8f6					xt_asm_asl_a:
.a8f6	a9 0a		lda #$0a	                lda #$0A
.a8f8	4c f7 ab	jmp $abf7	                jmp asm_common
.a8fb					z_asm_asl_a:
.a8fb					xt_asm_asl_x:
.a8fb	a9 1e		lda #$1e	                lda #$1E
.a8fd	4c f7 ab	jmp $abf7	                jmp asm_common
.a900					z_asm_asl_x:
.a900					xt_asm_asl_z:
.a900	a9 06		lda #$06	                lda #$06
.a902	4c f7 ab	jmp $abf7	                jmp asm_common
.a905					z_asm_asl_z:
.a905					xt_asm_asl_zx:
.a905	a9 16		lda #$16	                lda #$16
.a907	4c f7 ab	jmp $abf7	                jmp asm_common
.a90a					z_asm_asl_zx:
.a90a					xt_asm_bcc:
.a90a	a9 90		lda #$90	                lda #$90
.a90c	4c f7 ab	jmp $abf7	                jmp asm_common
.a90f					z_asm_bcc:
.a90f					xt_asm_bcs:
.a90f	a9 b0		lda #$b0	                lda #$B0
.a911	a0 02		ldy #$02	                ldy #2
.a913	4c f7 ab	jmp $abf7	                jmp asm_common
.a916					z_asm_bcs:
.a916					xt_asm_beq:
.a916	a9 f0		lda #$f0	                lda #$F0
.a918	4c f7 ab	jmp $abf7	                jmp asm_common
.a91b					z_asm_beq:
.a91b					xt_asm_bit:
.a91b	a9 2c		lda #$2c	                lda #$2C
.a91d	4c f7 ab	jmp $abf7	                jmp asm_common
.a920					z_asm_bit:
.a920					xt_asm_bit_h:
.a920	a9 89		lda #$89	                lda #$89
.a922	4c f7 ab	jmp $abf7	                jmp asm_common
.a925					z_asm_bit_h:
.a925					xt_asm_bit_x:
.a925	a9 3c		lda #$3c	                lda #$3C
.a927	4c f7 ab	jmp $abf7	                jmp asm_common
.a92a					z_asm_bit_x:
.a92a					xt_asm_bit_z:
.a92a	a9 24		lda #$24	                lda #$24
.a92c	4c f7 ab	jmp $abf7	                jmp asm_common
.a92f					z_asm_bit_z:
.a92f					xt_asm_bit_zx:
.a92f	a9 34		lda #$34	                lda #$34
.a931	4c f7 ab	jmp $abf7	                jmp asm_common
.a934					z_asm_bit_zx:
.a934					xt_asm_bmi:
.a934	a9 30		lda #$30	                lda #$30
.a936	4c f7 ab	jmp $abf7	                jmp asm_common
.a939					z_asm_bmi:
.a939					xt_asm_bne:
.a939	a9 d0		lda #$d0	                lda #$D0
.a93b	4c f7 ab	jmp $abf7	                jmp asm_common
.a93e					z_asm_bne:
.a93e					xt_asm_bpl:
.a93e	a9 10		lda #$10	                lda #$10
.a940	4c f7 ab	jmp $abf7	                jmp asm_common
.a943					z_asm_bpl:
.a943					xt_asm_bra:
.a943	a9 80		lda #$80	                lda #$80
.a945	4c f7 ab	jmp $abf7	                jmp asm_common
.a948					z_asm_bra:
.a948					xt_asm_brk:
.a948	a9 00		lda #$00	                lda #$00
.a94a	4c f7 ab	jmp $abf7	                jmp asm_common
.a94d					z_asm_brk:
.a94d					xt_asm_bvc:
.a94d	a9 50		lda #$50	                lda #$50
.a94f	4c f7 ab	jmp $abf7	                jmp asm_common
.a952					z_asm_bvc:
.a952					xt_asm_bvs:
.a952	a9 70		lda #$70	                lda #$70
.a954	4c f7 ab	jmp $abf7	                jmp asm_common
.a957					z_asm_bvs:
.a957					xt_asm_clc:
.a957	a9 18		lda #$18	                lda #$18
.a959	4c f7 ab	jmp $abf7	                jmp asm_common
.a95c					z_asm_clc:
.a95c					xt_asm_cld:
.a95c	a9 d8		lda #$d8	                lda #$D8
.a95e	4c f7 ab	jmp $abf7	                jmp asm_common
.a961					z_asm_cld:
.a961					xt_asm_cli:
.a961	a9 58		lda #$58	                lda #$58
.a963	4c f7 ab	jmp $abf7	                jmp asm_common
.a966					z_asm_cli:
.a966					xt_asm_clv:
.a966	a9 b8		lda #$b8	                lda #$B8
.a968	4c f7 ab	jmp $abf7	                jmp asm_common
.a96b					z_asm_clv:
.a96b					xt_asm_cmp:
.a96b	a9 cd		lda #$cd	                lda #$CD
.a96d	4c f7 ab	jmp $abf7	                jmp asm_common
.a970					z_asm_cmp:
.a970					xt_asm_cmp_h:
.a970	a9 c9		lda #$c9	                lda #$C9
.a972	4c f7 ab	jmp $abf7	                jmp asm_common
.a975					z_asm_cmp_h:
.a975					xt_asm_cmp_x:
.a975	a9 dd		lda #$dd	                lda #$DD
.a977	4c f7 ab	jmp $abf7	                jmp asm_common
.a97a					z_asm_cmp_x:
.a97a					xt_asm_cmp_y:
.a97a	a9 d9		lda #$d9	                lda #$D9
.a97c	4c f7 ab	jmp $abf7	                jmp asm_common
.a97f					z_asm_cmp_y:
.a97f					xt_asm_cmp_z:
.a97f	a9 c5		lda #$c5	                lda #$C5
.a981	4c f7 ab	jmp $abf7	                jmp asm_common
.a984					z_asm_cmp_z:
.a984					xt_asm_cmp_zi:
.a984	a9 d2		lda #$d2	                lda #$D2
.a986	4c f7 ab	jmp $abf7	                jmp asm_common
.a989					z_asm_cmp_zi:
.a989					xt_asm_cmp_ziy:
.a989	a9 d1		lda #$d1	                lda #$D1
.a98b	4c f7 ab	jmp $abf7	                jmp asm_common
.a98e					z_asm_cmp_ziy:
.a98e					xt_asm_cmp_zx:
.a98e	a9 d5		lda #$d5	                lda #$D5
.a990	4c f7 ab	jmp $abf7	                jmp asm_common
.a993					z_asm_cmp_zx:
.a993					xt_asm_cmp_zxi:
.a993	a9 c1		lda #$c1	                lda #$C1
.a995	4c f7 ab	jmp $abf7	                jmp asm_common
.a998					z_asm_cmp_zxi:
.a998					xt_asm_cpx:
.a998	a9 ec		lda #$ec	                lda #$EC
.a99a	4c f7 ab	jmp $abf7	                jmp asm_common
.a99d					z_asm_cpx:
.a99d					xt_asm_cpx_h:
.a99d	a9 e0		lda #$e0	                lda #$E0
.a99f	4c f7 ab	jmp $abf7	                jmp asm_common
.a9a2					z_asm_cpx_h:
.a9a2					xt_asm_cpx_z:
.a9a2	a9 e4		lda #$e4	                lda #$E4
.a9a4	4c f7 ab	jmp $abf7	                jmp asm_common
.a9a7					z_asm_cpx_z:
.a9a7					xt_asm_cpy:
.a9a7	a9 cc		lda #$cc	                lda #$CC
.a9a9	a0 03		ldy #$03	                ldy #3
.a9ab	4c f7 ab	jmp $abf7	                jmp asm_common
.a9ae					z_asm_cpy:
.a9ae					xt_asm_cpy_h:
.a9ae	a9 c0		lda #$c0	                lda #$C0
.a9b0	4c f7 ab	jmp $abf7	                jmp asm_common
.a9b3					z_asm_cpy_h:
.a9b3					xt_asm_cpy_z:
.a9b3	a9 c4		lda #$c4	                lda #$C4
.a9b5	4c f7 ab	jmp $abf7	                jmp asm_common
.a9b8					z_asm_cpy_z:
.a9b8					xt_asm_dec:
.a9b8	a9 ce		lda #$ce	                lda #$CE
.a9ba	4c f7 ab	jmp $abf7	                jmp asm_common
.a9bd					z_asm_dec:
.a9bd					xt_asm_dec_a:
.a9bd	a9 3a		lda #$3a	                lda #$3A
.a9bf	4c f7 ab	jmp $abf7	                jmp asm_common
.a9c2					z_asm_dec_a:
.a9c2					xt_asm_dec_x:
.a9c2	a9 de		lda #$de	                lda #$DE
.a9c4	4c f7 ab	jmp $abf7	                jmp asm_common
.a9c7					z_asm_dec_x:
.a9c7					xt_asm_dec_z:
.a9c7	a9 c6		lda #$c6	                lda #$C6
.a9c9	4c f7 ab	jmp $abf7	                jmp asm_common
.a9cc					z_asm_dec_z:
.a9cc					xt_asm_dec_zx:
.a9cc	a9 d6		lda #$d6	                lda #$D6
.a9ce	4c f7 ab	jmp $abf7	                jmp asm_common
.a9d1					z_asm_dec_zx:
.a9d1					xt_asm_dex:
.a9d1	a9 ca		lda #$ca	                lda #$CA
.a9d3	4c f7 ab	jmp $abf7	                jmp asm_common
.a9d6					z_asm_dex:
.a9d6					xt_asm_dey:
.a9d6	a9 88		lda #$88	                lda #$88
.a9d8	4c f7 ab	jmp $abf7	                jmp asm_common
.a9db					z_asm_dey:
.a9db					xt_asm_eor:
.a9db	a9 4d		lda #$4d	                lda #$4D
.a9dd	4c f7 ab	jmp $abf7	                jmp asm_common
.a9e0					z_asm_eor:
.a9e0					xt_asm_eor_h:
.a9e0	a9 49		lda #$49	                lda #$49
.a9e2	4c f7 ab	jmp $abf7	                jmp asm_common
.a9e5					z_asm_eor_h:
.a9e5					xt_asm_eor_x:
.a9e5	a9 5d		lda #$5d	                lda #$5D
.a9e7	4c f7 ab	jmp $abf7	                jmp asm_common
.a9ea					z_asm_eor_x:
.a9ea					xt_asm_eor_y:
.a9ea	a9 59		lda #$59	                lda #$59
.a9ec	4c f7 ab	jmp $abf7	                jmp asm_common
.a9ef					z_asm_eor_y:
.a9ef					xt_asm_eor_z:
.a9ef	a9 45		lda #$45	                lda #$45
.a9f1	4c f7 ab	jmp $abf7	                jmp asm_common
.a9f4					z_asm_eor_z:
.a9f4					xt_asm_eor_zi:
.a9f4	a9 52		lda #$52	                lda #$52
.a9f6	4c f7 ab	jmp $abf7	                jmp asm_common
.a9f9					z_asm_eor_zi:
.a9f9					xt_asm_eor_ziy:
.a9f9	a9 51		lda #$51	                lda #$51
.a9fb	4c f7 ab	jmp $abf7	                jmp asm_common
.a9fe					z_asm_eor_ziy:
.a9fe					xt_asm_eor_zx:
.a9fe	a9 55		lda #$55	                lda #$55
.aa00	4c f7 ab	jmp $abf7	                jmp asm_common
.aa03					z_asm_eor_zx:
.aa03					xt_asm_eor_zxi:
.aa03	a9 41		lda #$41	                lda #$41
.aa05	4c f7 ab	jmp $abf7	                jmp asm_common
.aa08					z_asm_eor_zxi:
.aa08					xt_asm_inc:
.aa08	a9 ee		lda #$ee	                lda #$EE
.aa0a	4c f7 ab	jmp $abf7	                jmp asm_common
.aa0d					z_asm_inc:
.aa0d					xt_asm_inc_a:
.aa0d	a9 1a		lda #$1a	                lda #$1A
.aa0f	4c f7 ab	jmp $abf7	                jmp asm_common
.aa12					z_asm_inc_a:
.aa12					xt_asm_inc_x:
.aa12	a9 fe		lda #$fe	                lda #$FE
.aa14	4c f7 ab	jmp $abf7	                jmp asm_common
.aa17					z_asm_inc_x:
.aa17					xt_asm_inc_z:
.aa17	a9 e6		lda #$e6	                lda #$E6
.aa19	4c f7 ab	jmp $abf7	                jmp asm_common
.aa1c					z_asm_inc_z:
.aa1c					xt_asm_inc_zx:
.aa1c	a9 f6		lda #$f6	                lda #$F6
.aa1e	4c f7 ab	jmp $abf7	                jmp asm_common
.aa21					z_asm_inc_zx:
.aa21					xt_asm_inx:
.aa21	a9 e8		lda #$e8	                lda #$E8
.aa23	4c f7 ab	jmp $abf7	                jmp asm_common
.aa26					z_asm_inx:
.aa26					xt_asm_iny:
.aa26	a9 c8		lda #$c8	                lda #$C8
.aa28	4c f7 ab	jmp $abf7	                jmp asm_common
.aa2b					z_asm_iny:
.aa2b					xt_asm_jmp:
.aa2b	a9 4c		lda #$4c	                lda #$4C
.aa2d	4c f7 ab	jmp $abf7	                jmp asm_common
.aa30					z_asm_jmp:
.aa30					xt_asm_jmp_i:
.aa30	a9 6c		lda #$6c	                lda #$6C
.aa32	4c f7 ab	jmp $abf7	                jmp asm_common
.aa35					z_asm_jmp_i:
.aa35					xt_asm_jmp_xi:
.aa35	a9 7c		lda #$7c	                lda #$7C
.aa37	4c f7 ab	jmp $abf7	                jmp asm_common
.aa3a					z_asm_jmp_xi:
.aa3a					xt_asm_jsr:
.aa3a	a9 20		lda #$20	                lda #$20
.aa3c	4c f7 ab	jmp $abf7	                jmp asm_common
.aa3f					z_asm_jsr:
.aa3f					xt_asm_lda:
.aa3f	a9 ad		lda #$ad	                lda #$AD
.aa41	4c f7 ab	jmp $abf7	                jmp asm_common
.aa44					z_asm_lda:
.aa44					xt_asm_lda_h:
.aa44	a9 a9		lda #$a9	                lda #$A9
.aa46	4c f7 ab	jmp $abf7	                jmp asm_common
.aa49					z_asm_lda_h:
.aa49					xt_asm_lda_x:
.aa49	a9 bd		lda #$bd	                lda #$BD
.aa4b	4c f7 ab	jmp $abf7	                jmp asm_common
.aa4e					z_asm_lda_x:
.aa4e					xt_asm_lda_y:
.aa4e	a9 b9		lda #$b9	                lda #$B9
.aa50	4c f7 ab	jmp $abf7	                jmp asm_common
.aa53					z_asm_lda_y:
.aa53					xt_asm_lda_z:
.aa53	a9 a5		lda #$a5	                lda #$A5
.aa55	4c f7 ab	jmp $abf7	                jmp asm_common
.aa58					z_asm_lda_z:
.aa58					xt_asm_lda_zi:
.aa58	a9 b2		lda #$b2	                lda #$B2
.aa5a	4c f7 ab	jmp $abf7	                jmp asm_common
.aa5d					z_asm_lda_zi:
.aa5d					xt_asm_lda_ziy:
.aa5d	a9 b1		lda #$b1	                lda #$B1
.aa5f	4c f7 ab	jmp $abf7	                jmp asm_common
.aa62					z_asm_lda_ziy:
.aa62					xt_asm_lda_zx:
.aa62	a9 b5		lda #$b5	                lda #$B5
.aa64	4c f7 ab	jmp $abf7	                jmp asm_common
.aa67					z_asm_lda_zx:
.aa67					xt_asm_lda_zxi:
.aa67	a9 a1		lda #$a1	                lda #$A1
.aa69	4c f7 ab	jmp $abf7	                jmp asm_common
.aa6c					z_asm_lda_zxi:
.aa6c					xt_asm_ldx:
.aa6c	a9 ae		lda #$ae	                lda #$AE
.aa6e	4c f7 ab	jmp $abf7	                jmp asm_common
.aa71					z_asm_ldx:
.aa71					xt_asm_ldx_h:
.aa71	a9 a2		lda #$a2	                lda #$A2
.aa73	4c f7 ab	jmp $abf7	                jmp asm_common
.aa76					z_asm_ldx_h:
.aa76					xt_asm_ldx_y:
.aa76	a9 be		lda #$be	                lda #$BE
.aa78	4c f7 ab	jmp $abf7	                jmp asm_common
.aa7b					z_asm_ldx_y:
.aa7b					xt_asm_ldx_z:
.aa7b	a9 a6		lda #$a6	                lda #$A6
.aa7d	4c f7 ab	jmp $abf7	                jmp asm_common
.aa80					z_asm_ldx_z:
.aa80					xt_asm_ldx_zy:
.aa80	a9 b6		lda #$b6	                lda #$B6
.aa82	4c f7 ab	jmp $abf7	                jmp asm_common
.aa85					z_asm_ldx_zy:
.aa85					xt_asm_ldy:
.aa85	a9 ac		lda #$ac	                lda #$AC
.aa87	4c f7 ab	jmp $abf7	                jmp asm_common
.aa8a					z_asm_ldy:
.aa8a					xt_asm_ldy_h:
.aa8a	a9 a0		lda #$a0	                lda #$A0
.aa8c	4c f7 ab	jmp $abf7	                jmp asm_common
.aa8f					z_asm_ldy_h:
.aa8f					xt_asm_ldy_x:
.aa8f	a9 bc		lda #$bc	                lda #$BC
.aa91	4c f7 ab	jmp $abf7	                jmp asm_common
.aa94					z_asm_ldy_x:
.aa94					xt_asm_ldy_z:
.aa94	a9 a4		lda #$a4	                lda #$A4
.aa96	4c f7 ab	jmp $abf7	                jmp asm_common
.aa99					z_asm_ldy_z:
.aa99					xt_asm_ldy_zx:
.aa99	a9 b4		lda #$b4	                lda #$B4
.aa9b	4c f7 ab	jmp $abf7	                jmp asm_common
.aa9e					z_asm_ldy_zx:
.aa9e					xt_asm_lsr:
.aa9e	a9 4e		lda #$4e	                lda #$4E
.aaa0	4c f7 ab	jmp $abf7	                jmp asm_common
.aaa3					z_asm_lsr:
.aaa3					xt_asm_lsr_a:
.aaa3	a9 4a		lda #$4a	                lda #$4A
.aaa5	4c f7 ab	jmp $abf7	                jmp asm_common
.aaa8					z_asm_lsr_a:
.aaa8					xt_asm_lsr_x:
.aaa8	a9 5e		lda #$5e	                lda #$5E
.aaaa	4c f7 ab	jmp $abf7	                jmp asm_common
.aaad					z_asm_lsr_x:
.aaad					xt_asm_lsr_z:
.aaad	a9 46		lda #$46	                lda #$46
.aaaf	4c f7 ab	jmp $abf7	                jmp asm_common
.aab2					z_asm_lsr_z:
.aab2					xt_asm_lsr_zx:
.aab2	a9 56		lda #$56	                lda #$56
.aab4	4c f7 ab	jmp $abf7	                jmp asm_common
.aab7					z_asm_lsr_zx:
.aab7					xt_asm_nop:
.aab7	a9 ea		lda #$ea	                lda #$EA
.aab9	4c f7 ab	jmp $abf7	                jmp asm_common
.aabc					z_asm_nop:
.aabc					xt_asm_ora:
.aabc	a9 0d		lda #$0d	                lda #$0D
.aabe	4c f7 ab	jmp $abf7	                jmp asm_common
.aac1					z_asm_ora:
.aac1					xt_asm_ora_h:
.aac1	a9 09		lda #$09	                lda #$09
.aac3	4c f7 ab	jmp $abf7	                jmp asm_common
.aac6					z_asm_ora_h:
.aac6					xt_asm_ora_x:
.aac6	a9 1d		lda #$1d	                lda #$1D
.aac8	4c f7 ab	jmp $abf7	                jmp asm_common
.aacb					z_asm_ora_x:
.aacb					xt_asm_ora_y:
.aacb	a9 19		lda #$19	                lda #$19
.aacd	4c f7 ab	jmp $abf7	                jmp asm_common
.aad0					z_asm_ora_y:
.aad0					xt_asm_ora_z:
.aad0	a9 05		lda #$05	                lda #$05
.aad2	4c f7 ab	jmp $abf7	                jmp asm_common
.aad5					z_asm_ora_z:
.aad5					xt_asm_ora_zi:
.aad5	a9 12		lda #$12	                lda #$12
.aad7	a0 02		ldy #$02	                ldy #2
.aad9	4c f7 ab	jmp $abf7	                jmp asm_common
.aadc					z_asm_ora_zi:
.aadc					xt_asm_ora_ziy:
.aadc	a9 11		lda #$11	                lda #$11
.aade	4c f7 ab	jmp $abf7	                jmp asm_common
.aae1					z_asm_ora_ziy:
.aae1					xt_asm_ora_zx:
.aae1	a9 15		lda #$15	                lda #$15
.aae3	4c f7 ab	jmp $abf7	                jmp asm_common
.aae6					z_asm_ora_zx:
.aae6					xt_asm_ora_zxi:
.aae6	a9 01		lda #$01	                lda #$01
.aae8	4c f7 ab	jmp $abf7	                jmp asm_common
.aaeb					z_asm_ora_zxi:
.aaeb					xt_asm_pha:
.aaeb	a9 48		lda #$48	                lda #$48
.aaed	4c f7 ab	jmp $abf7	                jmp asm_common
.aaf0					z_asm_pha:
.aaf0					xt_asm_php:
.aaf0	a9 08		lda #$08	                lda #$08
.aaf2	4c f7 ab	jmp $abf7	                jmp asm_common
.aaf5					z_asm_php:
.aaf5					xt_asm_phx:
.aaf5	a9 da		lda #$da	                lda #$DA
.aaf7	4c f7 ab	jmp $abf7	                jmp asm_common
.aafa					z_asm_phx:
.aafa					xt_asm_phy:
.aafa	a9 5a		lda #$5a	                lda #$5A
.aafc	4c f7 ab	jmp $abf7	                jmp asm_common
.aaff					z_asm_phy:
.aaff					xt_asm_pla:
.aaff	a9 68		lda #$68	                lda #$68
.ab01	4c f7 ab	jmp $abf7	                jmp asm_common
.ab04					z_asm_pla:
.ab04					xt_asm_plp:
.ab04	a9 28		lda #$28	                lda #$28
.ab06	4c f7 ab	jmp $abf7	                jmp asm_common
.ab09					z_asm_plp:
.ab09					xt_asm_plx:
.ab09	a9 fa		lda #$fa	                lda #$FA
.ab0b	4c f7 ab	jmp $abf7	                jmp asm_common
.ab0e					z_asm_plx:
.ab0e					xt_asm_ply:
.ab0e	a9 7a		lda #$7a	                lda #$7A
.ab10	4c f7 ab	jmp $abf7	                jmp asm_common
.ab13					z_asm_ply:
.ab13					xt_asm_rol:
.ab13	a9 2e		lda #$2e	                lda #$2E
.ab15	4c f7 ab	jmp $abf7	                jmp asm_common
.ab18					z_asm_rol:
.ab18					xt_asm_rol_a:
.ab18	a9 2a		lda #$2a	                lda #$2A
.ab1a	4c f7 ab	jmp $abf7	                jmp asm_common
.ab1d					z_asm_rol_a:
.ab1d					xt_asm_rol_x:
.ab1d	a9 3e		lda #$3e	                lda #$3E
.ab1f	4c f7 ab	jmp $abf7	                jmp asm_common
.ab22					z_asm_rol_x:
.ab22					xt_asm_rol_z:
.ab22	a9 26		lda #$26	                lda #$26
.ab24	4c f7 ab	jmp $abf7	                jmp asm_common
.ab27					z_asm_rol_z:
.ab27					xt_asm_rol_zx:
.ab27	a9 36		lda #$36	                lda #$36
.ab29	4c f7 ab	jmp $abf7	                jmp asm_common
.ab2c					z_asm_rol_zx:
.ab2c					xt_asm_ror:
.ab2c	a9 6e		lda #$6e	                lda #$6E
.ab2e	4c f7 ab	jmp $abf7	                jmp asm_common
.ab31					z_asm_ror:
.ab31					xt_asm_ror_a:
.ab31	a9 6a		lda #$6a	                lda #$6A
.ab33	4c f7 ab	jmp $abf7	                jmp asm_common
.ab36					z_asm_ror_a:
.ab36					xt_asm_ror_x:
.ab36	a9 7e		lda #$7e	                lda #$7E
.ab38	4c f7 ab	jmp $abf7	                jmp asm_common
.ab3b					z_asm_ror_x:
.ab3b					xt_asm_ror_z:
.ab3b	a9 66		lda #$66	                lda #$66
.ab3d	4c f7 ab	jmp $abf7	                jmp asm_common
.ab40					z_asm_ror_z:
.ab40					xt_asm_ror_zx:
.ab40	a9 76		lda #$76	                lda #$76
.ab42	4c f7 ab	jmp $abf7	                jmp asm_common
.ab45					z_asm_ror_zx:
.ab45					xt_asm_rti:
.ab45	a9 40		lda #$40	                lda #$40
.ab47	4c f7 ab	jmp $abf7	                jmp asm_common
.ab4a					z_asm_rti:
.ab4a					xt_asm_rts:
.ab4a	a9 60		lda #$60	                lda #$60
.ab4c	4c f7 ab	jmp $abf7	                jmp asm_common
.ab4f					z_asm_rts:
.ab4f					xt_asm_sbc:
.ab4f	a9 ed		lda #$ed	                lda #$ED
.ab51	4c f7 ab	jmp $abf7	                jmp asm_common
.ab54					z_asm_sbc:
.ab54					xt_asm_sbc_h:
.ab54	a9 e9		lda #$e9	                lda #$E9
.ab56	4c f7 ab	jmp $abf7	                jmp asm_common
.ab59					z_asm_sbc_h:
.ab59					xt_asm_sbc_x:
.ab59	a9 fd		lda #$fd	                lda #$FD
.ab5b	4c f7 ab	jmp $abf7	                jmp asm_common
.ab5e					z_asm_sbc_x:
.ab5e					xt_asm_sbc_y:
.ab5e	a9 f9		lda #$f9	                lda #$F9
.ab60	4c f7 ab	jmp $abf7	                jmp asm_common
.ab63					z_asm_sbc_y:
.ab63					xt_asm_sbc_z:
.ab63	a9 e5		lda #$e5	                lda #$E5
.ab65	4c f7 ab	jmp $abf7	                jmp asm_common
.ab68					z_asm_sbc_z:
.ab68					xt_asm_sbc_zi:
.ab68	a9 f2		lda #$f2	                lda #$F2
.ab6a	4c f7 ab	jmp $abf7	                jmp asm_common
.ab6d					z_asm_sbc_zi:
.ab6d					xt_asm_sbc_ziy:
.ab6d	a9 f1		lda #$f1	                lda #$F1
.ab6f	4c f7 ab	jmp $abf7	                jmp asm_common
.ab72					z_asm_sbc_ziy:
.ab72					xt_asm_sbc_zx:
.ab72	a9 f5		lda #$f5	                lda #$F5
.ab74	4c f7 ab	jmp $abf7	                jmp asm_common
.ab77					z_asm_sbc_zx:
.ab77					xt_asm_sbc_zxi:
.ab77	a9 e1		lda #$e1	                lda #$E1
.ab79	80 7c		bra $abf7	                bra asm_common  ; <-- limit for BRA instead of JMP
.ab7b					z_asm_sbc_zxi:
.ab7b					xt_asm_sec:
.ab7b	a9 38		lda #$38	                lda #$38
.ab7d	80 78		bra $abf7	                bra asm_common
.ab7f					z_asm_sec:
.ab7f					xt_asm_sed:
.ab7f	a9 f8		lda #$f8	                lda #$F8
.ab81	80 74		bra $abf7	                bra asm_common
.ab83					z_asm_sed:
.ab83					xt_asm_sei:
.ab83	a9 78		lda #$78	                lda #$78
.ab85	80 70		bra $abf7	                bra asm_common
.ab87					z_asm_sei:
.ab87					xt_asm_sta:
.ab87	a9 8d		lda #$8d	                lda #$8D
.ab89	80 6c		bra $abf7	                bra asm_common
.ab8b					z_asm_sta:
.ab8b					xt_asm_sta_x:
.ab8b	a9 9d		lda #$9d	                lda #$9D
.ab8d	80 68		bra $abf7	                bra asm_common
.ab8f					z_asm_sta_x:
.ab8f					xt_asm_sta_y:
.ab8f	a9 99		lda #$99	                lda #$99
.ab91	80 64		bra $abf7	                bra asm_common
.ab93					z_asm_sta_y:
.ab93					xt_asm_sta_z:
.ab93	a9 85		lda #$85	                lda #$85
.ab95	80 60		bra $abf7	                bra asm_common
.ab97					z_asm_sta_z:
.ab97					xt_asm_sta_zi:
.ab97	a9 92		lda #$92	                lda #$92
.ab99	80 5c		bra $abf7	                bra asm_common
.ab9b					z_asm_sta_zi:
.ab9b					xt_asm_sta_ziy:
.ab9b	a9 91		lda #$91	                lda #$91
.ab9d	80 58		bra $abf7	                bra asm_common
.ab9f					z_asm_sta_ziy:
.ab9f					xt_asm_sta_zx:
.ab9f	a9 95		lda #$95	                lda #$95
.aba1	80 54		bra $abf7	                bra asm_common
.aba3					z_asm_sta_zx:
.aba3					xt_asm_sta_zxi:
.aba3	a9 81		lda #$81	                lda #$81
.aba5	80 50		bra $abf7	                bra asm_common
.aba7					z_asm_sta_zxi:
.aba7					xt_asm_stx:
.aba7	a9 8e		lda #$8e	                lda #$8E
.aba9	80 4c		bra $abf7	                bra asm_common
.abab					z_asm_stx:
.abab					xt_asm_stx_z:
.abab	a9 86		lda #$86	                lda #$86
.abad	80 48		bra $abf7	                bra asm_common
.abaf					z_asm_stx_z:
.abaf					xt_asm_stx_zy:
.abaf	a9 96		lda #$96	                lda #$96
.abb1	80 44		bra $abf7	                bra asm_common
.abb3					z_asm_stx_zy:
.abb3					xt_asm_sty:
.abb3	a9 8c		lda #$8c	                lda #$8C
.abb5	80 40		bra $abf7	                bra asm_common
.abb7					z_asm_sty:
.abb7					xt_asm_sty_z:
.abb7	a9 84		lda #$84	                lda #$84
.abb9	80 3c		bra $abf7	                bra asm_common
.abbb					z_asm_sty_z:
.abbb					xt_asm_sty_zx:
.abbb	a9 94		lda #$94	                lda #$94
.abbd	80 38		bra $abf7	                bra asm_common
.abbf					z_asm_sty_zx:
.abbf					xt_asm_stz:
.abbf	a9 9c		lda #$9c	                lda #$9C
.abc1	80 34		bra $abf7	                bra asm_common
.abc3					z_asm_stz:
.abc3					xt_asm_stz_x:
.abc3	a9 9e		lda #$9e	                lda #$9E
.abc5	80 30		bra $abf7	                bra asm_common
.abc7					z_asm_stz_x:
.abc7					xt_asm_stz_z:
.abc7	a9 64		lda #$64	                lda #$64
.abc9	80 2c		bra $abf7	                bra asm_common
.abcb					z_asm_stz_z:
.abcb					xt_asm_stz_zx:
.abcb	a9 74		lda #$74	                lda #$74
.abcd	80 28		bra $abf7	                bra asm_common
.abcf					z_asm_stz_zx:
.abcf					xt_asm_tax:
.abcf	a9 aa		lda #$aa	                lda #$AA
.abd1	80 24		bra $abf7	                bra asm_common
.abd3					z_asm_tax:
.abd3					xt_asm_tay:
.abd3	a9 a8		lda #$a8	                lda #$A8
.abd5	80 20		bra $abf7	                bra asm_common
.abd7					z_asm_tay:
.abd7					xt_asm_trb:
.abd7	a9 1c		lda #$1c	                lda #$1C
.abd9	80 1c		bra $abf7	                bra asm_common
.abdb					z_asm_trb:
.abdb					xt_asm_trb_z:
.abdb	a9 14		lda #$14	                lda #$14
.abdd	80 18		bra $abf7	                bra asm_common
.abdf					z_asm_trb_z:
.abdf					xt_asm_tsb:
.abdf	a9 0c		lda #$0c	                lda #$0C
.abe1	80 14		bra $abf7	                bra asm_common
.abe3					z_asm_tsb:
.abe3					xt_asm_tsb_z:
.abe3	a9 04		lda #$04	                lda #$04
.abe5	80 10		bra $abf7	                bra asm_common
.abe7					z_asm_tsb_z:
.abe7					xt_asm_tsx:
.abe7	a9 ba		lda #$ba	                lda #$BA
.abe9	80 0c		bra $abf7	                bra asm_common
.abeb					z_asm_tsx:
.abeb					xt_asm_txa:
.abeb	a9 8a		lda #$8a	                lda #$8A
.abed	80 08		bra $abf7	                bra asm_common
.abef					z_asm_txa:
.abef					xt_asm_txs:
.abef	a9 9a		lda #$9a	                lda #$9A
.abf1	80 04		bra $abf7	                bra asm_common
.abf3					z_asm_txs:
.abf3					xt_asm_tya:
.abf3	a9 98		lda #$98	                lda #$98
.abf5	80 00		bra $abf7	                bra asm_common
.abf7					z_asm_tya:
.abf7					asm_common:
.abf7	a8		tay		                tay
.abf8	20 9e d4	jsr $d49e	                jsr cmpl_a
.abfb	a9 f6		lda #$f6	                lda #<oc_index_table
.abfd	85 26		sta $26		                sta tmp2
.abff	a9 ac		lda #$ac	                lda #>oc_index_table
.ac01	85 27		sta $27		                sta tmp2+1
.ac03	98		tya		                tya             ; retrieve opcode
.ac04	0a		asl a		                asl             ; times two for offset
.ac05	90 02		bcc $ac09	                bcc +
.ac07	e6 27		inc $27		                inc tmp2+1
.ac09					+
.ac09	a8		tay		                tay             ; use Y as the index
.ac0a	b1 26		lda ($26),y	                lda (tmp2),y    ; LSB
.ac0c	85 28		sta $28		                sta tmp3
.ac0e	c8		iny		                iny
.ac0f	b1 26		lda ($26),y	                lda (tmp2),y    ; MSB
.ac11	85 29		sta $29		                sta tmp3+1
.ac13	b2 28		lda ($28)	                lda (tmp3)      ; get "lengths byte"
.ac15	2a		rol a		                rol
.ac16	2a		rol a		                rol
.ac17	2a		rol a		                rol             ; Three times because we go through Carry
.ac18	29 03		and #$03	                and #%00000011
.ac1a	a8		tay		                tay
.ac1b	88		dey		                dey
.ac1c	f0 12		beq $ac30	                beq _done
.ac1e	20 eb d5	jsr $d5eb	                jsr underflow_1
.ac21	b5 00		lda $00,x	                lda 0,x
.ac23	20 9e d4	jsr $d49e	                jsr cmpl_a      ; does not use Y
.ac26	88		dey		                dey
.ac27	f0 05		beq $ac2e	                beq _done_drop
.ac29	b5 01		lda $01,x	                lda 1,x
.ac2b	20 9e d4	jsr $d49e	                jsr cmpl_a      ; Fall through to _done_drop
.ac2e					_done_drop:
.ac2e	e8		inx		                inx
.ac2f	e8		inx		                inx             ; Fall through to _done
.ac30					_done:
.ac30	60		rts		                rts             ; Returns to original caller
.ac31					xt_asm_push_a:
.ac31	a0 00		ldy #$00	                ldy #0
.ac33					_loop:
.ac33	b9 41 ac	lda $ac41,y	                lda asm_push_a_data,y
.ac36	c9 ff		cmp #$ff	                cmp #$FF
.ac38	f0 06		beq $ac40	                beq _done
.ac3a	20 9e d4	jsr $d49e	                jsr cmpl_a      ; does not change Y
.ac3d	c8		iny		                iny
.ac3e	80 f3		bra $ac33	                bra _loop
.ac40					_done:
.ac40					z_asm_push_a:
.ac40	60		rts		                rts
.ac41					asm_push_a_data:
>ac41	ca ca 95 00 74 01		        .byte $CA, $CA, $95, 00, $74, $01
>ac47	ff				        .byte $FF               ; terminator
.ac48					xt_asm_back_jump:
.ac48					z_asm_back_jump:
.ac48	60		rts		                rts
.ac49					xt_asm_back_branch:
.ac49	20 62 91	jsr $9162	                jsr xt_here             ; ( addr-l addr-h )
.ac4c	20 40 95	jsr $9540	                jsr xt_minus            ; ( offset )
.ac4f	3a		dec a		                dea
.ac50	3a		dec a		                dea
.ac51					z_asm_back_branch:
.ac51	60		rts		                rts
.ac52					assembler_end:

;******  Return to file: platform/../taliforth.asm


;******  Processing file: platform/../disassembler.asm

.ac52					disassembler:
.ac52	20 53 89	jsr $8953	                jsr xt_cr       ; ( addr u )
.ac55					_byte_loop:
.ac55	20 15 98	jsr $9815	                jsr xt_over     ; ( addr u addr )
.ac58	20 aa a4	jsr $a4aa	                jsr xt_u_dot    ; ( addr u )
.ac5b	20 a0 a0	jsr $a0a0	                jsr xt_space
.ac5e	a9 f6		lda #$f6	                lda #<oc_index_table
.ac60	85 26		sta $26		                sta tmp2
.ac62	a9 ac		lda #$ac	                lda #>oc_index_table
.ac64	85 27		sta $27		                sta tmp2+1
.ac66	a1 02		lda ($02,x)	                lda (2,x)       ; get opcode that addr points to
.ac68	0a		asl a		                asl             ; multiply by two for offset
.ac69	90 02		bcc $ac6d	                bcc +
.ac6b	e6 27		inc $27		                inc tmp2+1      ; we're on second page
.ac6d					+
.ac6d	a8		tay		                tay             ; use Y as the index
.ac6e	b1 26		lda ($26),y	                lda (tmp2),y    ; LSB
.ac70	85 28		sta $28		                sta tmp3
.ac72	48		pha		                pha
.ac73	c8		iny		                iny
.ac74	b1 26		lda ($26),y	                lda (tmp2),y    ; MSB
.ac76	85 29		sta $29		                sta tmp3+1
.ac78	48		pha		                pha
.ac79	b2 28		lda ($28)	                lda (tmp3)
.ac7b	a8		tay		                tay                     ; save copy of lengths byte
.ac7c	10 38		bpl $acb6	                bpl _no_operand         ; bit 7 clear, single-byte instruction
.ac7e	20 23 a7	jsr $a723	                jsr xt_zero             ; ( addr u 0 ) ZERO does not use Y
.ac81	f6 04		inc $04,x	                inc 4,x
.ac83	d0 02		bne $ac87	                bne +
.ac85	f6 05		inc $05,x	                inc 5,x                 ; ( addr+1 u 0 )
.ac87					+
.ac87	b5 02		lda $02,x	                lda 2,x
.ac89	d0 02		bne $ac8d	                bne +
.ac8b	d6 03		dec $03,x	                dec 3,x
.ac8d					+
.ac8d	d6 02		dec $02,x	                dec 2,x                 ; ( addr+1 u-1 0 )
.ac8f	a1 04		lda ($04,x)	                lda (4,x)
.ac91	95 00		sta $00,x	                sta 0,x                 ; LSB of operand ( addr+1 u-1 LSB )
.ac93	98		tya		                tya                     ; retrieve copy of lengths byte
.ac94	2a		rol a		                rol                     ; shift bit 6 to bit 7
.ac95	10 12		bpl $aca9	                bpl _print_operand
.ac97	f6 04		inc $04,x	                inc 4,x
.ac99	d0 02		bne $ac9d	                bne +
.ac9b	f6 05		inc $05,x	                inc 5,x                 ; ( addr+2 u-1 LSB )
.ac9d					+
.ac9d	b5 02		lda $02,x	                lda 2,x
.ac9f	d0 02		bne $aca3	                bne +
.aca1	d6 03		dec $03,x	                dec 3,x
.aca3					+
.aca3	d6 02		dec $02,x	                dec 2,x                 ; ( addr+2 u-2 LSB )
.aca5	a1 04		lda ($04,x)	                lda (4,x)
.aca7	95 01		sta $01,x	                sta 1,x                 ; MSB of operand ( addr+2 u-2 opr )
.aca9					_print_operand:
.aca9	ca		dex		                dex
.acaa	ca		dex		                dex
.acab	a9 05		lda #$05	                lda #5
.acad	95 00		sta $00,x	                sta 0,x
.acaf	74 01		stz $01,x	                stz 1,x                 ; ( addr+n u-n opr 5 )
.acb1	20 b6 a4	jsr $a4b6	                jsr xt_u_dot_r          ; U.R ( addr+n u-n )
.acb4	80 0b		bra $acc1	                bra _print_mnemonic
.acb6					_no_operand:
.acb6	ca		dex		                dex
.acb7	ca		dex		                dex
.acb8	a9 05		lda #$05	                lda #5
.acba	95 00		sta $00,x	                sta 0,x
.acbc	74 01		stz $01,x	                stz 1,x                 ; ( addr u 5 )
.acbe	20 a6 a0	jsr $a0a6	                jsr xt_spaces           ; ( addr u )
.acc1					_print_mnemonic:
.acc1	20 a0 a0	jsr $a0a0	                jsr xt_space
.acc4	ca		dex		                dex
.acc5	ca		dex		                dex                     ; ( addr u ? )
.acc6	68		pla		                pla                     ; MSB
.acc7	95 01		sta $01,x	                sta 1,x                 ; ( addr u MSB )
.acc9	68		pla		                pla                     ; LSB
.acca	95 00		sta $00,x	                sta 0,x                 ; ( addr u addr-o )
.accc	20 3f 89	jsr $893f	                jsr xt_count            ; ( addr u addr-o u-o )
.accf	74 01		stz $01,x	                stz 1,x                 ; paranoid
.acd1	b5 00		lda $00,x	                lda 0,x
.acd3	29 07		and #$07	                and #%00000111          ; ( addr u addr-o u-o )
.acd5	95 00		sta $00,x	                sta 0,x
.acd7	20 7f a4	jsr $a47f	                jsr xt_type             ; ( addr u )
.acda	20 53 89	jsr $8953	                jsr xt_cr
.acdd	f6 02		inc $02,x	                inc 2,x
.acdf	d0 02		bne $ace3	                bne +
.ace1	f6 03		inc $03,x	                inc 3,x                 ; ( addr+1 u )
.ace3					+
.ace3	20 93 97	jsr $9793	                jsr xt_one_minus        ; ( addr+1 u-1 )
.ace6	b5 00		lda $00,x	                lda 0,x                 ; All done?
.ace8	15 01		ora $01,x	                ora 1,x
.acea	f0 07		beq $acf3	                beq _done
.acec	b5 01		lda $01,x	                lda 1,x                 ; Catch mid-instruction ranges
.acee	30 03		bmi $acf3	                bmi _done
.acf0	4c 55 ac	jmp $ac55	                jmp _byte_loop          ; out of range for BRA
.acf3					_done:
.acf3	4c 2c a3	jmp $a32c	                jmp xt_two_drop         ; JSR/RTS
.acf6					oc_index_table:
>acf6	f6 ae fa ae 8e b3 8e b3		        .word oc00, oc01, oc__, oc__, oc04, oc05, oc06, oc__
>acfe	02 af 08 af 0e af 8e b3
>ad06	14 af 18 af 1e af 8e b3		        .word oc08, oc09, oc0a, oc__, oc0c, oc0d, oc0e, oc0f
>ad0e	24 af 28 af 2c af 30 af
>ad16	35 af 39 af 41 af 8e b3		        .word oc10, oc11, oc12, oc__, oc14, oc15, oc16, oc17
>ad1e	48 af 4e af 55 af 5c af
>ad26	63 af 67 af 6d af 8e b3		        .word oc18, oc19, oc1a, oc__, oc1c, oc1d, oc__, oc1f
>ad2e	73 af 77 af 8e b3 7d af
>ad36	83 af 87 af 8e b3 8e b3		        .word oc20, oc21, oc__, oc__, oc24, oc25, oc26, oc27
>ad3e	8f af 95 af 9b af a1 af
>ad46	a8 af ac af b2 af 8e b3		        .word oc28, oc29, oc2a, oc__, oc2c, oc2d, oc2e, oc2f
>ad4e	b8 af bc af c1 af c5 af
>ad56	ca af ce af d6 af 8e b3		        .word oc30, oc31, oc32, oc__, oc34, oc35, oc36, oc37
>ad5e	dd af e5 af ec af f3 af
>ad66	fa af fe af 04 b0 8e b3		        .word oc38, oc39, oc3a, oc__, oc3c, oc3d, oc3e, oc0f
>ad6e	0a b0 10 b0 16 b0 30 af
>ad76	21 b0 25 b0 8e b3 8e b3		        .word oc40, oc41, oc__, oc__, oc__, oc45, oc46, oc47
>ad7e	8e b3 2d b0 33 b0 39 b0
>ad86	40 b0 44 b0 4a b0 8e b3		        .word oc48, oc49, oc4a, oc__, oc4c, oc4d, oc4e, oc4f
>ad8e	50 b0 54 b0 58 b0 5c b0
>ad96	61 b0 65 b0 6d b0 8e b3		        .word oc50, oc51, oc52, oc__, oc__, oc55, oc56, oc57
>ad9e	8e b3 74 b0 7b b0 82 b0
>ada6	89 b0 8d b0 93 b0 8e b3		        .word oc58, oc59, oc5a, oc__, oc__, oc__, oc5e, oc5f
>adae	8e b3 8e b3 9d b0 a3 b0
>adb6	a8 b0 ac b0 8e b3 8e b3		        .word oc60, oc61, oc__, oc__, oc64, oc65, oc66, oc67
>adbe	b4 b0 ba b0 c0 b0 c6 b0
>adc6	cd b0 d1 b0 d7 b0 8e b3		        .word oc68, oc69, oc6a, oc__, oc6c, oc6d, oc6e, oc6f
>adce	dd b0 e3 b0 e7 b0 eb b0
>add6	f0 b0 f4 b0 fc b0 8e b3		        .word oc70, oc71, oc72, oc__, oc74, oc75, oc76, oc77
>adde	03 b1 0a b1 11 b1 18 b1
>ade6	1f b1 23 b1 29 b1 8e b3		        .word oc78, oc79, oc7a, oc__, oc7c, oc7d, oc7e, oc7f
>adee	2d b1 34 b1 3a b1 40 b1
>adf6	45 b1 49 b1 8e b3 8e b3		        .word oc80, oc81, oc__, oc__, oc84, oc85, oc86, oc__
>adfe	51 b1 57 b1 5d b1 8e b3
>ae06	63 b1 67 b1 6d b1 8e b3		        .word oc88, oc89, oc8a, oc__, oc8c, oc8d, oc8e, oc8f
>ae0e	71 b1 75 b1 79 b1 7d b1
>ae16	82 b1 86 b1 8e b1 8e b3		        .word oc90, oc91, oc92, oc__, oc94, oc95, oc96, oc97
>ae1e	95 b1 9c b1 a3 b1 aa b1
>ae26	b1 b1 b5 b1 bb b1 8e b3		        .word oc98, oc99, oc9a, oc__, oc9c, oc9d, oc9e, oc9f
>ae2e	bf b1 c3 b1 c9 b1 cf b1
>ae36	d4 b1 da b1 e2 b1 8e b3		        .word oca0, oca1, oca2, oc__, oca4, oca5, oca6, oca7
>ae3e	e8 b1 ee b1 f4 b1 fa b1
>ae46	01 b2 05 b2 0b b2 8e b3		        .word oca8, oca9, ocaa, oc__, ocac, ocad, ocae, ocaf
>ae4e	0f b2 13 b2 17 b2 1b b2
>ae56	20 b2 24 b2 2c b2 8e b3		        .word ocb0, ocb1, ocb2, oc__, ocb4, ocb5, ocb6, ocb7
>ae5e	33 b2 3a b2 41 b2 48 b2
>ae66	4f b2 53 b2 59 b2 8e b3		        .word ocb8, ocb9, ocba, oc__, ocbc, ocbd, ocbe, ocbf
>ae6e	5d b2 63 b2 69 b2 6f b2
>ae76	74 b2 7a b2 8e b3 8e b3		        .word occ0, occ1, oc__, oc__, occ4, occ5, occ6, occ7
>ae7e	82 b2 88 b2 8e b2 94 b2
>ae86	9b b2 9f b2 a5 b2 8e b3		        .word occ8, occ9, occa, oc__, occc, occd, occe, occf
>ae8e	a9 b2 ad b2 b1 b2 b5 b2
>ae96	ba b2 be b2 c6 b2 8e b3		        .word ocd0, ocd1, ocd2, oc__, oc__, ocd5, ocd6, ocd7
>ae9e	8e b3 cd b2 d4 b2 db b2
>aea6	e2 b2 e6 b2 ec b2 8e b3		        .word ocd8, ocd9, ocda, oc__, oc__, ocdd, ocde, ocdf
>aeae	8e b3 f0 b2 f6 b2 fc b2
>aeb6	01 b3 07 b3 8e b3 8e b3		        .word oce0, oce1, oc__, oc__, oce4, oce5, oce6, oce7
>aebe	0f b3 15 b3 1b b3 21 b3
>aec6	28 b3 2c b3 32 b3 8e b3		        .word oce8, oce9, ocea, oc__, ocec, oced, ocee, ocef
>aece	36 b3 3a b3 3e b3 42 b3
>aed6	47 b3 4b b3 53 b3 8e b3		        .word ocf0, ocf1, ocf2, oc__, oc__, ocf5, ocf6, ocf7
>aede	8e b3 5a b3 61 b3 68 b3
>aee6	6f b3 73 b3 79 b3 8e b3		        .word ocf8, ocf9, ocfa, oc__, oc__, ocfd, ocfe, ocff
>aeee	8e b3 7d b3 83 b3 89 b3
.aef6					oc_table:
>aef6	83 62 72 6b				oc00:	.text 2*64+3, "brk"              ; enforce the signature byte
>aefa	87 6f 72 61 2e 7a 78 69			oc01:	.text 2*64+7, "ora.zxi"
>af02	85 74 73 62 2e 7a		        oc04:   .text 2*64+5, "tsb.z"
>af08	85 6f 72 64 2e 7a			oc05:	.text 2*64+5, "ord.z"
>af0e	85 61 73 6c 2e 7a			oc06:	.text 2*64+5, "asl.z"
>af14	43 70 68 70				oc08:	.text 1*64+3, "php"
>af18	85 6f 72 61 2e 23			oc09:	.text 2*64+5, "ora.#"
>af1e	45 61 73 6c 2e 61			oc0a:	.text 1*64+5, "asl.a"
>af24	c3 74 73 62				oc0c:	.text 3*64+3, "tsb"
>af28	c3 6f 72 61				oc0d:	.text 3*64+3, "ora"
>af2c	c3 61 73 6c				oc0e:	.text 3*64+3, "asl"
>af30	c4 62 62 72 30				oc0f:	.text 3*64+4, "bbr0"
>af35	83 62 70 6c				oc10:	.text 2*64+3, "bpl"
>af39	87 6f 72 61 2e 7a 69 79			oc11:	.text 2*64+7, "ora.ziy"
>af41	86 6f 72 61 2e 7a 69			oc12:	.text 2*64+6, "ora.zi"
>af48	85 74 72 62 2e 7a			oc14:	.text 2*64+5, "trb.z"
>af4e	86 6f 72 61 2e 7a 78			oc15:	.text 2*64+6, "ora.zx"
>af55	86 61 73 6c 2e 7a 78			oc16:	.text 2*64+6, "asl.zx"
>af5c	86 72 6d 62 31 2e 7a			oc17:	.text 2*64+6, "rmb1.z"
>af63	43 63 6c 63				oc18:	.text 1*64+3, "clc"
>af67	c5 6f 72 61 2e 79			oc19:	.text 3*64+5, "ora.y"
>af6d	45 69 6e 63 2e 61			oc1a:	.text 1*64+5, "inc.a"
>af73	c3 74 72 62				oc1c:	.text 3*64+3, "trb"
>af77	c5 6f 72 61 2e 78			oc1d:	.text 3*64+5, "ora.x"
>af7d	c5 61 73 6c 2e 78			oc1f:	.text 3*64+5, "asl.x"
>af83	c3 6a 73 72				oc20:	.text 3*64+3, "jsr"
>af87	87 61 6e 64 2e 7a 78 69			oc21:	.text 2*64+7, "and.zxi"
>af8f	85 62 69 74 2e 7a			oc24:	.text 2*64+5, "bit.z"
>af95	85 61 6e 64 2e 7a			oc25:	.text 2*64+5, "and.z"
>af9b	85 72 6f 6c 2e 7a			oc26:	.text 2*64+5, "rol.z"
>afa1	86 72 6d 62 32 2e 7a			oc27:	.text 2*64+6, "rmb2.z"
>afa8	43 70 6c 70				oc28:	.text 1*64+3, "plp"
>afac	85 61 6e 64 2e 23			oc29:	.text 2*64+5, "and.#"
>afb2	45 72 6f 6c 2e 61			oc2a:	.text 1*64+5, "rol.a"
>afb8	c3 62 69 74				oc2c:	.text 3*64+3, "bit"
>afbc	c4 61 6e 64 2e				oc2d:	.text 3*64+4, "and."
>afc1	c3 72 6f 6c				oc2e:	.text 3*64+3, "rol"
>afc5	c4 62 62 72 32				oc2f:	.text 3*64+4, "bbr2"
>afca	83 62 6d 69				oc30:	.text 2*64+3, "bmi"
>afce	87 61 6e 64 2e 7a 69 79			oc31:	.text 2*64+7, "and.ziy"
>afd6	86 61 6e 64 2e 7a 69			oc32:	.text 2*64+6, "and.zi"
>afdd	87 62 69 74 2e 7a 78 69			oc34:	.text 2*64+7, "bit.zxi"
>afe5	86 61 6e 64 2e 7a 78			oc35:	.text 2*64+6, "and.zx"
>afec	86 72 6f 6c 2e 7a 78			oc36:	.text 2*64+6, "rol.zx"
>aff3	86 72 6d 62 33 2e 7a			oc37:	.text 2*64+6, "rmb3.z"
>affa	43 73 65 63				oc38:	.text 1*64+3, "sec"
>affe	c5 61 6e 64 2e 79			oc39:	.text 3*64+5, "and.y"
>b004	45 64 65 63 2e 61			oc3a:	.text 1*64+5, "dec.a"
>b00a	c5 62 69 74 2e 78			oc3c:	.text 3*64+5, "bit.x"
>b010	c5 61 6e 64 2e 78			oc3d:	.text 3*64+5, "and.x"
>b016	c5 72 6f 6c 2e 78			oc3e:	.text 3*64+5, "rol.x"
>b01c	c4 62 62 72 33				oc3f:	.text 3*64+4, "bbr3"
>b021	43 72 74 69				oc40:	.text 1*64+3, "rti"
>b025	87 65 6f 72 2e 7a 78 69			oc41:	.text 2*64+7, "eor.zxi"
>b02d	85 65 6f 72 2e 7a			oc45:	.text 2*64+5, "eor.z"
>b033	85 6c 73 72 2e 7a			oc46:	.text 2*64+5, "lsr.z"
>b039	86 72 62 6d 34 2e 7a			oc47:	.text 2*64+6, "rbm4.z"
>b040	43 70 68 61				oc48:	.text 1*64+3, "pha"
>b044	85 65 6f 72 2e 23			oc49:	.text 2*64+5, "eor.#"
>b04a	45 6c 73 72 2e 61			oc4a:	.text 1*64+5, "lsr.a"
>b050	c3 6a 6d 70				oc4c:	.text 3*64+3, "jmp"
>b054	c3 65 6f 72				oc4d:	.text 3*64+3, "eor"
>b058	c3 6c 73 72				oc4e:	.text 3*64+3, "lsr"
>b05c	c4 62 62 72 34				oc4f:	.text 3*64+4, "bbr4"
>b061	83 62 76 63				oc50:	.text 2*64+3, "bvc"
>b065	87 65 6f 72 2e 7a 69 79			oc51:	.text 2*64+7, "eor.ziy"
>b06d	86 65 6f 72 2e 7a 69			oc52:	.text 2*64+6, "eor.zi"
>b074	86 65 6f 72 2e 7a 78			oc55:	.text 2*64+6, "eor.zx"
>b07b	86 6c 73 72 2e 7a 78			oc56:	.text 2*64+6, "lsr.zx"
>b082	86 72 62 6d 35 2e 7a			oc57:	.text 2*64+6, "rbm5.z"
>b089	43 63 6c 69				oc58:	.text 1*64+3, "cli"
>b08d	c5 65 6f 72 2e 79			oc59:	.text 3*64+5, "eor.y"
>b093	43 70 68 79				oc5a:	.text 1*64+3, "phy"
>b097	c5 65 6f 72 2e 78			oc5d:	.text 3*64+5, "eor.x"
>b09d	c5 6c 73 72 2e 78			oc5e:	.text 3*64+5, "lsr.x"
>b0a3	c4 62 62 72 35				oc5f:	.text 3*64+4, "bbr5"
>b0a8	43 72 74 73				oc60:	.text 1*64+3, "rts"
>b0ac	87 61 64 63 2e 7a 78 69			oc61:	.text 2*64+7, "adc.zxi"
>b0b4	85 73 74 7a 2e 7a			oc64:	.text 2*64+5, "stz.z"
>b0ba	85 61 64 63 2e 7a			oc65:	.text 2*64+5, "adc.z"
>b0c0	85 72 6f 72 2e 7a			oc66:	.text 2*64+5, "ror.z"
>b0c6	86 72 6d 62 36 2e 7a			oc67:	.text 2*64+6, "rmb6.z"
>b0cd	43 70 6c 61				oc68:	.text 1*64+3, "pla"
>b0d1	85 61 64 63 2e 23			oc69:	.text 2*64+5, "adc.#"
>b0d7	45 72 6f 72 2e 61			oc6a:	.text 1*64+5, "ror.a"
>b0dd	c5 6a 6d 70 2e 69			oc6c:	.text 3*64+5, "jmp.i"
>b0e3	c3 61 64 63				oc6d:	.text 3*64+3, "adc"
>b0e7	c3 72 6f 72				oc6e:	.text 3*64+3, "ror"
>b0eb	c4 62 62 72 36				oc6f:	.text 3*64+4, "bbr6"
>b0f0	83 62 76 73				oc70:	.text 2*64+3, "bvs"
>b0f4	87 61 64 63 2e 7a 69 79			oc71:	.text 2*64+7, "adc.ziy"
>b0fc	86 61 64 63 2e 7a 69			oc72:	.text 2*64+6, "adc.zi"
>b103	86 73 74 7a 2e 7a 78			oc74:	.text 2*64+6, "stz.zx"
>b10a	86 61 64 63 2e 7a 78			oc75:	.text 2*64+6, "adc.zx"
>b111	86 72 6f 72 2e 7a 78			oc76:	.text 2*64+6, "ror.zx"
>b118	86 72 6d 62 37 2e 7a			oc77:	.text 2*64+6, "rmb7.z"
>b11f	43 73 65 69				oc78:	.text 1*64+3, "sei"
>b123	c5 61 64 63 2e 79			oc79:	.text 3*64+5, "adc.y"
>b129	43 70 6c 79				oc7a:	.text 1*64+3, "ply"
>b12d	c6 6a 6d 70 2e 78 69			oc7c:	.text 3*64+6, "jmp.xi"
>b134	c5 61 64 63 2e 78			oc7d:	.text 3*64+5, "adc.x"
>b13a	c5 72 6f 72 2e 78			oc7e:	.text 3*64+5, "ror.x"
>b140	c4 62 62 72 37				oc7f:	.text 3*64+4, "bbr7"
>b145	83 62 72 61				oc80:	.text 2*64+3, "bra"
>b149	87 73 74 61 2e 7a 78 69			oc81:	.text 2*64+7, "sta.zxi"
>b151	85 73 74 79 2e 7a			oc84:	.text 2*64+5, "sty.z"
>b157	85 73 74 61 2e 7a			oc85:	.text 2*64+5, "sta.z"
>b15d	85 73 74 78 2e 7a			oc86:	.text 2*64+5, "stx.z"
>b163	43 64 65 79				oc88:	.text 1*64+3, "dey"
>b167	85 62 69 74 2e 23			oc89:	.text 2*64+5, "bit.#"
>b16d	43 74 78 61				oc8a:	.text 1*64+3, "txa"
>b171	c3 73 74 79				oc8c:	.text 3*64+3, "sty"
>b175	c3 73 74 61				oc8d:	.text 3*64+3, "sta"
>b179	c3 73 74 78				oc8e:	.text 3*64+3, "stx"
>b17d	c4 62 62 73 30				oc8f:	.text 3*64+4, "bbs0"
>b182	83 62 63 63				oc90:	.text 2*64+3, "bcc"
>b186	87 73 74 61 2e 7a 69 79			oc91:	.text 2*64+7, "sta.ziy"
>b18e	86 73 74 61 2e 7a 69			oc92:	.text 2*64+6, "sta.zi"
>b195	86 73 74 79 2e 7a 78			oc94:	.text 2*64+6, "sty.zx"
>b19c	86 73 74 61 2e 7a 78			oc95:	.text 2*64+6, "sta.zx"
>b1a3	86 73 74 78 2e 7a 79			oc96:	.text 2*64+6, "stx.zy"
>b1aa	86 73 6d 62 31 2e 7a			oc97:	.text 2*64+6, "smb1.z"
>b1b1	43 74 79 61				oc98:	.text 1*64+3, "tya"
>b1b5	c5 73 74 61 2e 79			oc99:	.text 3*64+5, "sta.y"
>b1bb	43 74 78 73				oc9a:	.text 1*64+3, "txs"
>b1bf	c3 73 74 7a				oc9c:	.text 3*64+3, "stz"
>b1c3	c5 73 74 61 2e 78			oc9d:	.text 3*64+5, "sta.x"
>b1c9	c5 73 74 7a 2e 78			oc9e:	.text 3*64+5, "stz.x"
>b1cf	c4 62 62 73 31				oc9f:	.text 3*64+4, "bbs1"
>b1d4	85 6c 64 79 2e 23			oca0:	.text 2*64+5, "ldy.#"
>b1da	87 6c 64 61 2e 7a 78 69			oca1:	.text 2*64+7, "lda.zxi"
>b1e2	85 6c 64 78 2e 23			oca2:	.text 2*64+5, "ldx.#"
>b1e8	85 6c 64 79 2e 7a			oca4:	.text 2*64+5, "ldy.z"
>b1ee	85 6c 64 61 2e 7a			oca5:	.text 2*64+5, "lda.z"
>b1f4	85 6c 64 78 2e 7a			oca6:	.text 2*64+5, "ldx.z"
>b1fa	86 73 6d 62 32 2e 7a			oca7:	.text 2*64+6, "smb2.z"
>b201	43 74 61 79				oca8:	.text 1*64+3, "tay"
>b205	85 6c 64 61 2e 23			oca9:	.text 2*64+5, "lda.#"
>b20b	43 74 61 78				ocaa:	.text 1*64+3, "tax"
>b20f	c3 6c 64 79				ocac:	.text 3*64+3, "ldy"
>b213	c3 6c 64 61				ocad:	.text 3*64+3, "lda"
>b217	c3 6c 64 78				ocae:	.text 3*64+3, "ldx"
>b21b	c4 62 62 73 32				ocaf:	.text 3*64+4, "bbs2"
>b220	83 62 63 73				ocb0:	.text 2*64+3, "bcs"
>b224	87 6c 64 61 2e 7a 69 79			ocb1:	.text 2*64+7, "lda.ziy"
>b22c	86 6c 64 61 2e 7a 69			ocb2:	.text 2*64+6, "lda.zi"
>b233	86 6c 64 79 2e 7a 78			ocb4:	.text 2*64+6, "ldy.zx"
>b23a	86 6c 64 61 2e 7a 78			ocb5:	.text 2*64+6, "lda.zx"
>b241	86 6c 64 78 2e 7a 79			ocb6:	.text 2*64+6, "ldx.zy"
>b248	86 73 6d 62 33 2e 7a			ocb7:	.text 2*64+6, "smb3.z"
>b24f	43 63 6c 76				ocb8:	.text 1*64+3, "clv"
>b253	c5 6c 64 61 2e 79			ocb9:	.text 3*64+5, "lda.y"
>b259	43 74 73 78				ocba:	.text 1*64+3, "tsx"
>b25d	c5 6c 64 79 2e 78			ocbc:	.text 3*64+5, "ldy.x"
>b263	c5 6c 64 61 2e 78			ocbd:	.text 3*64+5, "lda.x"
>b269	c5 6c 64 78 2e 79			ocbe:	.text 3*64+5, "ldx.y"
>b26f	c4 62 62 73 34				ocbf:	.text 3*64+4, "bbs4"
>b274	85 63 70 79 2e 23			occ0:	.text 2*64+5, "cpy.#"
>b27a	87 63 6d 70 2e 7a 78 69			occ1:	.text 2*64+7, "cmp.zxi"
>b282	85 63 70 79 2e 7a			occ4:	.text 2*64+5, "cpy.z"
>b288	85 63 6d 70 2e 7a			occ5:	.text 2*64+5, "cmp.z"
>b28e	85 64 65 63 2e 7a			occ6:	.text 2*64+5, "dec.z"
>b294	86 73 6d 62 34 2e 7a			occ7:	.text 2*64+6, "smb4.z"
>b29b	43 69 6e 79				occ8:	.text 1*64+3, "iny"
>b29f	85 63 6d 70 2e 23			occ9:	.text 2*64+5, "cmp.#"
>b2a5	43 64 65 78				occa:	.text 1*64+3, "dex"
>b2a9	c3 63 70 79				occc:	.text 3*64+3, "cpy"
>b2ad	c3 63 6d 70				occd:	.text 3*64+3, "cmp"
>b2b1	c3 64 65 63				occe:	.text 3*64+3, "dec"
>b2b5	c4 62 62 73 34				occf:	.text 3*64+4, "bbs4"
>b2ba	83 62 6e 65				ocd0:	.text 2*64+3, "bne"
>b2be	87 63 6d 70 2e 7a 69 79			ocd1:	.text 2*64+7, "cmp.ziy"
>b2c6	86 63 6d 70 2e 7a 69			ocd2:	.text 2*64+6, "cmp.zi"
>b2cd	86 63 6d 70 2e 7a 78			ocd5:	.text 2*64+6, "cmp.zx"
>b2d4	86 64 65 63 2e 7a 78			ocd6:	.text 2*64+6, "dec.zx"
>b2db	86 73 6d 62 35 2e 7a			ocd7:	.text 2*64+6, "smb5.z"
>b2e2	43 63 6c 64				ocd8:	.text 1*64+3, "cld"
>b2e6	c5 63 6d 70 2e 79			ocd9:	.text 3*64+5, "cmp.y"
>b2ec	43 70 68 78				ocda:	.text 1*64+3, "phx"
>b2f0	c5 63 6d 70 2e 78			ocdd:	.text 3*64+5, "cmp.x"
>b2f6	c5 64 65 63 2e 78			ocde:	.text 3*64+5, "dec.x"
>b2fc	c4 62 62 73 35				ocdf:	.text 3*64+4, "bbs5"
>b301	85 63 70 78 2e 23			oce0:	.text 2*64+5, "cpx.#"
>b307	87 73 62 63 2e 7a 78 69			oce1:	.text 2*64+7, "sbc.zxi"
>b30f	85 63 70 78 2e 7a			oce4:	.text 2*64+5, "cpx.z"
>b315	85 73 62 63 2e 7a			oce5:	.text 2*64+5, "sbc.z"
>b31b	85 69 6e 63 2e 7a			oce6:	.text 2*64+5, "inc.z"
>b321	86 73 6d 62 36 2e 7a			oce7:	.text 2*64+6, "smb6.z"
>b328	43 69 6e 78				oce8:	.text 1*64+3, "inx"
>b32c	85 73 62 63 2e 23			oce9:	.text 2*64+5, "sbc.#"
>b332	43 6e 6f 70				ocea:	.text 1*64+3, "nop"
>b336	c3 63 70 78				ocec:	.text 3*64+3, "cpx"
>b33a	c3 73 62 63				oced:	.text 3*64+3, "sbc"
>b33e	c3 69 6e 63				ocee:	.text 3*64+3, "inc"
>b342	c4 62 62 73 36				ocef:	.text 3*64+4, "bbs6"
>b347	83 62 65 71				ocf0:	.text 2*64+3, "beq"
>b34b	87 73 62 63 2e 7a 69 79			ocf1:	.text 2*64+7, "sbc.ziy"
>b353	86 73 62 63 2e 7a 69			ocf2:	.text 2*64+6, "sbc.zi"
>b35a	86 73 62 63 2e 7a 78			ocf5:	.text 2*64+6, "sbc.zx"
>b361	86 69 6e 63 2e 7a 78			ocf6:	.text 2*64+6, "inc.zx"
>b368	86 73 6d 62 37 2e 7a			ocf7:	.text 2*64+6, "smb7.z"
>b36f	43 73 65 64				ocf8:	.text 1*64+3, "sed"
>b373	c5 73 62 63 2e 79			ocf9:	.text 3*64+5, "sbc.y"
>b379	43 70 6c 78				ocfa:	.text 1*64+3, "plx"
>b37d	c5 73 62 63 2e 78			ocfd:	.text 3*64+5, "sbc.x"
>b383	c5 69 6e 63 2e 78			ocfe:	.text 3*64+5, "inc.x"
>b389	c4 62 62 73 37				ocff:	.text 3*64+4, "bbs7"
>b38e	01 3f					oc__:	.text 1, "?"
.b390					disassembler_end:

;******  Return to file: platform/../taliforth.asm


;******  Processing file: platform/../ed.asm

=46					ed_head  = editor1  ; pointer to first list element (addr) (2 bytes)
=48					ed_cur   = editor2  ; current line number (1 is first line) (2 bytes)
=50					ed_flags = editor3  ; Flags used by ed, where
.b390					ed6502:
.b390	64 2e		stz $2e		                stz ed_head
.b392	64 2f		stz $2f		                stz ed_head+1
.b394	64 30		stz $30		                stz ed_cur
.b396	64 31		stz $31		                stz ed_cur+1
.b398	64 32		stz $32		                stz ed_flags
.b39a	20 23 a7	jsr $a723	                jsr xt_zero
.b39d	20 23 a7	jsr $a723	                jsr xt_zero             ; ( addr-t u-t )
.b3a0	20 53 89	jsr $8953	                jsr xt_cr
.b3a3					ed_input_loop:
.b3a3	a9 81		lda #$81	                lda #%10000001
.b3a5	14 32		trb $32		                trb ed_flags
.b3a7	20 6e b8	jsr $b86e	                jsr ed_get_input
.b3aa	a5 0a		lda $0a		                lda ciblen
.b3ac	d0 1f		bne $b3cd	                bne _command_mode
.b3ae	ca		dex		                dex
.b3af	ca		dex		                dex                     ; ( addr-t u-t ? )
.b3b0	a5 30		lda $30		                lda ed_cur
.b3b2	95 00		sta $00,x	                sta 0,x
.b3b4	a5 31		lda $31		                lda ed_cur+1
.b3b6	95 01		sta $01,x	                sta 1,x                 ; ( addr-t u-t u )
.b3b8	a9 80		lda #$80	                lda #%10000000
.b3ba	04 32		tsb $32		                tsb ed_flags
.b3bc	20 9f 97	jsr $979f	                jsr xt_one_plus         ; ( addr-t u-t u+1 )
.b3bf	20 8a b8	jsr $b88a	                jsr ed_is_valid_line
.b3c2	b0 03		bcs $b3c7	                bcs +
.b3c4	4c 5e b8	jmp $b85e	                jmp ed_error_1drop
.b3c7					+
.b3c7	20 23 a7	jsr $a723	                jsr xt_zero             ; ( addr-t u-t u+1 0 )
.b3ca	4c 98 b4	jmp $b498	                jmp _line_number_only_from_external
.b3cd					_command_mode:
.b3cd	20 23 a7	jsr $a723	                jsr xt_zero             ; parameter 1 is NOS ( addr-t u-t 0 )
.b3d0	20 23 a7	jsr $a723	                jsr xt_zero             ; parameter 2 is TOS ( addr-t u-t 0 0 )
.b3d3					_prefix_dot:
.b3d3	b2 08		lda ($08)	                lda (cib)
.b3d5	c9 2e		cmp #$2e	                cmp #$2e                ; ASCII '.'
.b3d7	d0 3a		bne $b413	                bne _prefix_dollar
.b3d9	20 7f b8	jsr $b87f	                jsr ed_have_text
.b3dc	a5 30		lda $30		                lda ed_cur
.b3de	95 02		sta $02,x	                sta 2,x
.b3e0	a5 31		lda $31		                lda ed_cur+1
.b3e2	95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t cur 0 )
.b3e4	a9 80		lda #$80	                lda #%10000000
.b3e6	04 32		tsb $32		                tsb ed_flags
.b3e8	a5 0a		lda $0a		                lda ciblen
.b3ea	3a		dec a		                dea                     ; sets Z if A was 1
.b3eb	d0 03		bne $b3f0	                bne +
.b3ed	4c 98 b4	jmp $b498	                jmp _line_number_only_from_external
.b3f0					+
.b3f0	ca		dex		                dex
.b3f1	ca		dex		                dex
.b3f2	ca		dex		                dex
.b3f3	ca		dex		                dex
.b3f4	a5 08		lda $08		                lda cib
.b3f6	95 02		sta $02,x	                sta 2,x
.b3f8	a5 09		lda $09		                lda cib+1
.b3fa	95 03		sta $03,x	                sta 3,x
.b3fc	a5 0a		lda $0a		                lda ciblen
.b3fe	95 00		sta $00,x	                sta 0,x
.b400	a5 0b		lda $0b		                lda ciblen+1
.b402	95 01		sta $01,x	                sta 1,x
.b404	20 93 97	jsr $9793	                jsr xt_one_minus        ; ( addr-t u-t para1 0 addr u-1 )
.b407	20 2a a1	jsr $a12a	                jsr xt_swap             ; ( addr-t u-t para1 0 u-1 addr )
.b40a	20 9f 97	jsr $979f	                jsr xt_one_plus         ; ( addr-t u-t para1 0 u-1 addr+1 )
.b40d	20 2a a1	jsr $a12a	                jsr xt_swap             ; ( addr-t u-t para1 0 addr+1 u-1 )
.b410	4c f0 b4	jmp $b4f0	                jmp _check_for_para2
.b413					_prefix_dollar:
.b413	b2 08		lda ($08)	                lda (cib)
.b415	c9 24		cmp #$24	                cmp #'$'
.b417	d0 1c		bne $b435	                bne _prefix_percent
.b419	20 7f b8	jsr $b87f	                jsr ed_have_text
.b41c	e8		inx		                inx
.b41d	e8		inx		                inx                     ; ( addr-t u-t 0 )
.b41e	20 ac b8	jsr $b8ac	                jsr ed_last_line          ; ( addr-t u-t 0 para1 )
.b421	20 2a a1	jsr $a12a	                jsr xt_swap             ; SWAP ( addr-t u-t para1 0 )
.b424	a9 80		lda #$80	                lda #%10000000
.b426	04 32		tsb $32		                tsb ed_flags
.b428	a5 0a		lda $0a		                lda ciblen
.b42a	3a		dec a		                dea                     ; sets Z if A was 1
.b42b	d0 03		bne $b430	                bne +
.b42d	4c 98 b4	jmp $b498	                jmp _line_number_only_from_external
.b430					+
.b430	a0 01		ldy #$01	                ldy #01
.b432	4c 6c b5	jmp $b56c	                jmp _check_command
.b435					_prefix_percent:
.b435	b2 08		lda ($08)	                lda (cib)
.b437	c9 25		cmp #$25	                cmp #$25                ; ASCII '%'
.b439	f0 04		beq $b43f	                beq _whole_text
.b43b	c9 2c		cmp #$2c	                cmp #$2c                ; ASCII ','
.b43d	d0 17		bne $b456	                bne _prefix_semicolon
.b43f					_whole_text:
.b43f	20 7f b8	jsr $b87f	                jsr ed_have_text
.b442	a9 01		lda #$01	                lda #01
.b444	95 02		sta $02,x	                sta 2,x                 ; LSB of NOS is para 1
.b446	74 03		stz $03,x	                stz 3,x                 ; ( addr-t u-t para1 0 )
.b448					_semicolon_entry:
.b448	e8		inx		                inx
.b449	e8		inx		                inx                     ; DROP ( addr-t u-t para1 )
.b44a	20 ac b8	jsr $b8ac	                jsr ed_last_line          ; ( addr-t u-t para1 para2 )
.b44d	a9 80		lda #$80	                lda #%10000000
.b44f	04 32		tsb $32		                tsb ed_flags
.b451	a0 01		ldy #$01	                ldy #01
.b453	4c 6c b5	jmp $b56c	                jmp _check_command
.b456					_prefix_semicolon:
.b456	b2 08		lda ($08)	                lda (cib)
.b458	c9 3b		cmp #$3b	                cmp #$3b                ; ASCII ';'
.b45a	d0 0d		bne $b469	                bne _prefix_number
.b45c	20 7f b8	jsr $b87f	                jsr ed_have_text
.b45f	a5 30		lda $30		                lda ed_cur
.b461	95 02		sta $02,x	                sta 2,x
.b463	a5 31		lda $31		                lda ed_cur+1
.b465	95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t cur 0 )
.b467	80 df		bra $b448	                bra _semicolon_entry
.b469					_prefix_number:
.b469	20 23 a7	jsr $a723	                jsr xt_zero
.b46c	20 23 a7	jsr $a723	                jsr xt_zero             ; ( addr-t u-t 0 0 0 0 )
.b46f	ca		dex		                dex
.b470	ca		dex		                dex
.b471	ca		dex		                dex
.b472	ca		dex		                dex                     ; ( addr-t u-t 0 0 0 0 ? ? )
.b473	a5 08		lda $08		                lda cib
.b475	95 02		sta $02,x	                sta 2,x
.b477	a5 09		lda $09		                lda cib+1
.b479	95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t 0 0 0 0 cib ? )
.b47b	a5 0a		lda $0a		                lda ciblen
.b47d	95 00		sta $00,x	                sta 0,x
.b47f	a5 0b		lda $0b		                lda ciblen+1
.b481	95 01		sta $01,x	                sta 1,x                 ; ( addr-t u-t 0 0 0 0 cib ciblen )
.b483	20 39 a2	jsr $a239	                jsr xt_to_number        ; ( addr-t u-t 0 0 ud addr2 u2 )
.b486	b5 00		lda $00,x	                lda 0,x
.b488	15 01		ora $01,x	                ora 1,x
.b48a	d0 24		bne $b4b0	                bne _have_unconverted_chars
.b48c	e8		inx		                inx
.b48d	e8		inx		                inx
.b48e	e8		inx		                inx
.b48f	e8		inx		                inx                     ; 2DROP ( addr-t u-t 0 0 ud )
.b490	20 70 8a	jsr $8a70	                jsr xt_d_to_s           ; D>S ( addr-t u-t 0 0 u )
.b493	20 5e 96	jsr $965e	                jsr xt_not_rote         ; -ROT ( addr-t u-t u 0 0 )
.b496	e8		inx		                inx
.b497	e8		inx		                inx                     ; ( addr-t u-t u 0 ) drop through
.b498					_line_number_only_from_external:
.b498	20 2a a1	jsr $a12a	                jsr xt_swap             ; ( addr-t u-t 0 u )
.b49b	20 8a b8	jsr $b88a	                jsr ed_is_valid_line
.b49e	b0 03		bcs $b4a3	                bcs +
.b4a0	4c 5c b8	jmp $b85c	                jmp ed_error_2drop
.b4a3					+
.b4a3	20 2a a1	jsr $a12a	                jsr xt_swap             ; ( addr-t u-t u 0 )
.b4a6	20 19 b9	jsr $b919	                jsr ed_para1_to_cur
.b4a9	a9 80		lda #$80	                lda #%10000000
.b4ab	04 32		tsb $32		                tsb ed_flags
.b4ad	4c 47 b7	jmp $b747	                jmp ed_cmd_p_from_external
.b4b0					_have_unconverted_chars:
.b4b0	20 9f 8d	jsr $8d9f	                jsr xt_dup              ; ( addr-t u-t 0 0 ud addr2 u2 u2 )
.b4b3	ca		dex		                dex
.b4b4	ca		dex		                dex                     ; ( addr-t u-t 0 0 ud addr2 u2 u2 ? )
.b4b5	a5 0a		lda $0a		                lda ciblen
.b4b7	95 00		sta $00,x	                sta 0,x
.b4b9	a5 0b		lda $0b		                lda ciblen+1
.b4bb	95 01		sta $01,x	                sta 1,x                 ; ( addr-t u-t 0 0 ud addr2 u2 u2 ciblen )
.b4bd	20 be 8e	jsr $8ebe	                jsr xt_equal            ; ( addr-t u-t 0 0 ud addr2 u2 f )
.b4c0	b5 00		lda $00,x	                lda 0,x
.b4c2	15 01		ora $01,x	                ora 1,x
.b4c4	f0 0e		beq $b4d4	                beq _no_command_yet
.b4c6	8a		txa		                txa
.b4c7	18		clc		                clc
.b4c8	69 0a		adc #$0a	                adc #10
.b4ca	aa		tax		                tax                     ; ( addr-t u-t 0 0 )
.b4cb	a9 80		lda #$80	                lda #%10000000
.b4cd	14 32		trb $32		                trb ed_flags
.b4cf	a0 00		ldy #$00	                ldy #00
.b4d1	4c 6c b5	jmp $b56c	                jmp _check_command
.b4d4					_no_command_yet:
.b4d4	e8		inx		                inx
.b4d5	e8		inx		                inx                     ; ( ... 0 0 ud addr2 u2 )
.b4d6	20 ec a2	jsr $a2ec	                jsr xt_to_r             ; >R ( ... 0 0 ud addr2 ) (R: u2)
.b4d9	20 5e 96	jsr $965e	                jsr xt_not_rote         ; -ROT ( ... 0 0 addr2 ud ) (R: u2)
.b4dc	20 70 8a	jsr $8a70	                jsr xt_d_to_s           ; D>S  ( ... 0 0 addr2 para1 ) (R: u2)
.b4df	b5 00		lda $00,x	                lda 0,x                 ; LSB
.b4e1	95 06		sta $06,x	                sta 6,x
.b4e3	b5 01		lda $01,x	                lda 1,x                 ; MSB
.b4e5	95 07		sta $07,x	                sta 7,x                 ; ( ... para1 0 addr2 para1 ) (R: u2)
.b4e7	e8		inx		                inx
.b4e8	e8		inx		                inx                     ; ( addr-t u-t para1 0 addr2 ) (R: u2)
.b4e9	20 14 9a	jsr $9a14	                jsr xt_r_from           ; R> ( addr-t u-t para1 0 addr2 u2 ) fall through
.b4ec	a9 80		lda #$80	                lda #%10000000
.b4ee	04 32		tsb $32		                tsb ed_flags
.b4f0					_check_for_para2:
.b4f0	a1 02		lda ($02,x)	                lda (2,x)
.b4f2	c9 2c		cmp #$2c	                cmp #$2c                ; ASCII code for ',' (comma)
.b4f4	f0 0d		beq $b503	                beq _got_comma
.b4f6	38		sec		                sec
.b4f7	a5 0a		lda $0a		                lda ciblen
.b4f9	f5 00		sbc $00,x	                sbc 0,x
.b4fb	a8		tay		                tay
.b4fc	e8		inx		                inx
.b4fd	e8		inx		                inx
.b4fe	e8		inx		                inx
.b4ff	e8		inx		                inx                     ; 2DROP ( addr-t u-t para1 0 )
.b500	4c 6c b5	jmp $b56c	                jmp _check_command
.b503					_got_comma:
.b503	f6 02		inc $02,x	                inc 2,x
.b505	d0 02		bne $b509	                bne +
.b507	f6 03		inc $03,x	                inc 3,x                 ; ( addr-t u-t para1 0 addr2+1 u2 )
.b509					+
.b509	b5 01		lda $01,x	                lda 1,x
.b50b	f0 02		beq $b50f	                beq +
.b50d	d6 01		dec $01,x	                dec 1,x
.b50f					+
.b50f	d6 00		dec $00,x	                dec 0,x                 ; ( addr-t u-t para1 0 addr2+1 u2-1 )
.b511	a1 02		lda ($02,x)	                lda (2,x)
.b513	c9 24		cmp #$24	                cmp #$24                ; ASCII for '$'
.b515	d0 14		bne $b52b	                bne _para2_not_dollar
.b517	38		sec		                sec
.b518	a5 0a		lda $0a		                lda ciblen
.b51a	f5 02		sbc $02,x	                sbc 2,x
.b51c	a8		tay		                tay
.b51d	c8		iny		                iny
.b51e	5a		phy		                phy
.b51f	8a		txa		                txa
.b520	18		clc		                clc
.b521	69 06		adc #$06	                adc #06
.b523	aa		tax		                tax                     ; ( addr-t u-t para1 )
.b524	20 ac b8	jsr $b8ac	                jsr ed_last_line          ; ( addr-t u-t para1 para2 )
.b527	7a		ply		                ply
.b528	4c 6c b5	jmp $b56c	                jmp _check_command
.b52b					_para2_not_dollar:
.b52b	20 ec a2	jsr $a2ec	                jsr xt_to_r             ; >R ( ... para1 0 addr2+1 ) (R: u2-1)
.b52e	20 23 a7	jsr $a723	                jsr xt_zero             ; 0 ( ... para1 0 addr2+1 0 ) (R: u2-1)
.b531	20 23 a7	jsr $a723	                jsr xt_zero             ; 0 ( ... para1 0 addr2+1 0 0 ) (R: u2-1)
.b534	20 d9 9a	jsr $9ad9	                jsr xt_rot              ; ROT ( ... para1 0 0 0 addr2+1 ) (R: u2-1)
.b537	20 14 9a	jsr $9a14	                jsr xt_r_from           ; R> ( ... para1 0 0 0 addr2+1 u2-1)
.b53a	20 9f 8d	jsr $8d9f	                jsr xt_dup              ; DUP ( ... para1 0 0 0 addr2+1 u2-1 u2-1)
.b53d	20 ec a2	jsr $a2ec	                jsr xt_to_r             ; >R ( ... para1 0 0 0 addr2+1 u2-1 ) (R: u2-1)
.b540	20 39 a2	jsr $a239	                jsr xt_to_number        ; >NUMBER ( ... para1 0 ud addr3 u3 ) (R: u2-1)
.b543	20 9f 8d	jsr $8d9f	                jsr xt_dup              ; DUP ( ... para1 0 ud addr3 u3 u3 ) (R: u2-1)
.b546	20 14 9a	jsr $9a14	                jsr xt_r_from           ; R> ( ... para1 0 ud addr3 u3 u3 u2-1 )
.b549	20 be 8e	jsr $8ebe	                jsr xt_equal            ; = ( ... para1 0 ud addr3 u3 f )
.b54c	b5 00		lda $00,x	                lda 0,x
.b54e	15 01		ora $01,x	                ora 1,x
.b550	f0 08		beq $b55a	                beq _second_number
.b552	8a		txa		                txa
.b553	18		clc		                clc
.b554	69 0c		adc #$0c	                adc #12
.b556	aa		tax		                tax                     ; back to ( addr-t u-t )
.b557	4c 60 b8	jmp $b860	                jmp ed_error
.b55a					_second_number:
.b55a	e8		inx		                inx
.b55b	e8		inx		                inx                     ; ( addr-t u-t para1 0 ud addr3 u3 )
.b55c	38		sec		                sec
.b55d	a5 0a		lda $0a		                lda ciblen
.b55f	f5 00		sbc $00,x	                sbc 0,x
.b561	48		pha		                pha
.b562	20 2c a3	jsr $a32c	                jsr xt_two_drop         ; 2DROP ( addr-t u-t para1 0 ud )
.b565	20 70 8a	jsr $8a70	                jsr xt_d_to_s           ; D>S  ( addr-t u-t para1 0 para2 )
.b568	20 32 96	jsr $9632	                jsr xt_nip              ; NIP ( addr-t u-t para1 para2 )
.b56b	7a		ply		                ply
.b56c					_check_command:
.b56c	b1 08		lda ($08),y	                lda (cib),y             ; get mystery char from input
.b56e	85 24		sta $24		                sta tmp1
.b570	da		phx		                phx
.b571	a2 00		ldx #$00	                ldx #00
.b573					_cmd_loop:
.b573	bd 44 b9	lda $b944,x	                lda ed_cmd_list,x
.b576	f0 07		beq $b57f	                beq _illegal_command    ; zero marks end of list
.b578	c5 24		cmp $24		                cmp tmp1
.b57a	f0 07		beq $b583	                beq _found_cmd
.b57c	e8		inx		                inx
.b57d	80 f4		bra $b573	                bra _cmd_loop
.b57f					_illegal_command:
.b57f	fa		plx		                plx
.b580	4c 5c b8	jmp $b85c	                jmp ed_error_2drop
.b583					_found_cmd:
.b583	8a		txa		                txa
.b584	0a		asl a		                asl
.b585	aa		tax		                tax                     ; X * 2 for table
.b586	7c 4f b9	jmp ($b94f,x)	                jmp (ed_cmd_table,x)
.b589					ed_next_command:
.b589	e8		inx		                inx
.b58a	e8		inx		                inx
.b58b	e8		inx		                inx
.b58c	e8		inx		                inx                     ; ( addr-t u-t ) Fall through
.b58d					_next_command_empty:
.b58d	4c a3 b3	jmp $b3a3	                jmp ed_input_loop
.b590					ed_all_done:
.b590	64 0a		stz $0a		                stz ciblen
.b592	64 0b		stz $0b		                stz ciblen+1
.b594	20 2c a3	jsr $a32c	                jsr xt_two_drop                 ; 2DROP ( addr-t u-t )
.b597	60		rts		                rts
.b598					ed_cmd_a:
.b598	fa		plx		                plx
.b599	e8		inx		                inx
.b59a	e8		inx		                inx                     ;  DROP ( addr-t u-t para1 )
.b59b	24 32		bit $32		                bit ed_flags
.b59d	30 08		bmi $b5a7	                bmi ed_cmd_a_have_para
.b59f	a5 30		lda $30		                lda ed_cur
.b5a1	95 00		sta $00,x	                sta 0,x
.b5a3	a5 31		lda $31		                lda ed_cur+1
.b5a5	95 01		sta $01,x	                sta 1,x                 ;  ( addr-t u-t cur ) drop through
.b5a7					ed_entry_cmd_i:
.b5a7					ed_cmd_a_have_para:
.b5a7	20 e2 b8	jsr $b8e2	                jsr ed_num_to_addr        ;  ( addr-t u-t addr1 )
.b5aa	20 53 89	jsr $8953	                jsr xt_cr
.b5ad					_next_string_loop:
.b5ad	20 6e b8	jsr $b86e	                jsr ed_get_input
.b5b0	b2 08		lda ($08)	                lda (cib)
.b5b2	c9 2e		cmp #$2e	                cmp #$2e                ; ASCII for '.'
.b5b4	d0 16		bne $b5cc	                bne _add_line
.b5b6	a4 0a		ldy $0a		                ldy ciblen
.b5b8	c0 01		cpy #$01	                cpy #01
.b5ba	d0 10		bne $b5cc	                bne _add_line
.b5bc	a4 0b		ldy $0b		                ldy ciblen+1
.b5be	d0 0c		bne $b5cc	                bne _add_line
.b5c0	e8		inx		                inx
.b5c1	e8		inx		                inx
.b5c2	a9 40		lda #$40	                lda #%01000000
.b5c4	04 32		tsb $32		                tsb ed_flags
.b5c6	20 53 89	jsr $8953	                jsr xt_cr
.b5c9	4c a3 b3	jmp $b3a3	                jmp ed_input_loop
.b5cc					_add_line:
.b5cc	20 9f 8d	jsr $8d9f	                jsr xt_dup              ; DUP ( addr-t u-t addr1 addr1 )
.b5cf	20 62 91	jsr $9162	                jsr xt_here             ; HERE ( addr-t u-t addr1 addr1 here )
.b5d2	20 2a a1	jsr $a12a	                jsr xt_swap             ; SWAP ( addr-t u-t addr1 here addr1 )
.b5d5	20 70 8f	jsr $8f70	                jsr xt_fetch            ; @  ( addr-t u-t addr1 here addr2 )
.b5d8	20 5e 87	jsr $875e	                jsr xt_comma            ; ,  ( addr-t u-t addr1 here )
.b5db	20 09 a3	jsr $a309	                jsr xt_tuck             ; TUCK ( addr-t u-t here addr1 here )
.b5de	20 2a a1	jsr $a12a	                jsr xt_swap             ; SWAP ( addr-t u-t here here addr1 )
.b5e1	20 09 a1	jsr $a109	                jsr xt_store            ; ! ( addr-t u-t here )
.b5e4	20 62 91	jsr $9162	                jsr xt_here             ; HERE ( addr-t u-t here here2)
.b5e7	a5 00		lda $00		                lda cp
.b5e9	18		clc		                clc
.b5ea	69 04		adc #$04	                adc #04
.b5ec	85 00		sta $00		                sta cp
.b5ee	90 02		bcc $b5f2	                bcc +
.b5f0	e6 01		inc $01		                inc cp+1
.b5f2					+
.b5f2	e6 30		inc $30		                inc ed_cur
.b5f4	d0 02		bne $b5f8	                bne +
.b5f6	e6 31		inc $31		                inc ed_cur+1
.b5f8					+
.b5f8	20 62 91	jsr $9162	                jsr xt_here     ; HERE ( addr-t u-t here here2 here3 )
.b5fb	20 9f 8d	jsr $8d9f	                jsr xt_dup      ; DUP ( addr-t u-t here here2 here3 here3 )
.b5fe	ca		dex		                dex
.b5ff	ca		dex		                dex             ; ( addr-t u-t here here2 here3 here3 ? )
.b600	a5 08		lda $08		                lda cib
.b602	95 00		sta $00,x	                sta 0,x
.b604	a5 09		lda $09		                lda cib+1
.b606	95 01		sta $01,x	                sta 1,x         ; ( addr-t u-t here here2 here3 here3 cib )
.b608	20 2a a1	jsr $a12a	                jsr xt_swap     ; SWAP ( addr-t u-t here here2 here3 cib here3 )
.b60b	ca		dex		                dex
.b60c	ca		dex		                dex             ; ( addr-t u-t here here2 here3 cib here3 ? )
.b60d	a5 0a		lda $0a		                lda ciblen
.b60f	95 00		sta $00,x	                sta 0,x
.b611	a5 0b		lda $0b		                lda ciblen+1
.b613	95 01		sta $01,x	                sta 1,x         ; ( addr-t u-t here here2 here3 cib here3 ciblen )
.b615	20 b2 95	jsr $95b2	                jsr xt_move     ; ( addr-t u-t here here2 here3 )
.b618	18		clc		                clc
.b619	a5 00		lda $00		                lda cp
.b61b	65 0a		adc $0a		                adc ciblen
.b61d	85 00		sta $00		                sta cp
.b61f	90 06		bcc $b627	                bcc +
.b621	a5 01		lda $01		                lda cp+1
.b623	65 0b		adc $0b		                adc ciblen+1
.b625	85 01		sta $01		                sta cp+1
.b627					+
.b627	20 15 98	jsr $9815	                jsr xt_over             ; OVER ( addr-t u-t here here2 here3 here2 )
.b62a	20 09 a1	jsr $a109	                jsr xt_store            ; ! ( addr-t u-t here here2 )
.b62d	20 9f 97	jsr $979f	                jsr xt_one_plus         ; 1+
.b630	20 9f 97	jsr $979f	                jsr xt_one_plus         ; 1+ ( addr-t u-t here here2+2 )
.b633	20 9f 8d	jsr $8d9f	                jsr xt_dup              ; DUP ( addr-t u-t here here2+2 here2+2 )
.b636	a5 0a		lda $0a		                lda ciblen
.b638	95 02		sta $02,x	                sta 2,x
.b63a	a5 0b		lda $0b		                lda ciblen+1
.b63c	95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t here ciblen here2+2 )
.b63e	20 09 a1	jsr $a109	                jsr xt_store            ; ! ( addr-t u-t here )
.b641	20 53 89	jsr $8953	                jsr xt_cr
.b644	4c ad b5	jmp $b5ad	                jmp _next_string_loop
.b647					ed_cmd_d:
.b647	fa		plx		                plx
.b648	20 7f b8	jsr $b87f	                jsr ed_have_text
.b64b	20 d4 b8	jsr $b8d4	                jsr ed_no_line_zero
.b64e	b5 00		lda $00,x	                lda 0,x
.b650	15 01		ora $01,x	                ora 1,x
.b652	d0 08		bne $b65c	                bne +
.b654	20 15 98	jsr $9815	                jsr xt_over             ; ( addr-t u-t para1 0 para1 )
.b657	20 99 b6	jsr $b699	                jsr _cmd_d_common       ; ( addr-t u-t para1 0 )
.b65a	80 33		bra $b68f	                bra _cmd_d_done
.b65c					+
.b65c	20 8a b8	jsr $b88a	                jsr ed_is_valid_line      ; result is in C flag
.b65f	b0 03		bcs $b664	                bcs _cmd_d_loop
.b661	4c 5c b8	jmp $b85c	                jmp ed_error_2drop
.b664					_cmd_d_loop:
.b664	20 34 a3	jsr $a334	                jsr xt_two_dup          ; 2DUP ( addr-t u-t para1 para2 para1 para2 )
.b667	20 4d 91	jsr $914d	                jsr xt_greater_than     ; > ( addr-t u-t para1 para2 f )
.b66a	b5 00		lda $00,x	                lda 0,x
.b66c	15 01		ora $01,x	                ora 1,x
.b66e	d0 0d		bne $b67d	                bne _cmd_d_done_with_flag
.b670	e8		inx		                inx
.b671	e8		inx		                inx                     ; Get rid of the flag from >
.b672	20 9f 8d	jsr $8d9f	                jsr xt_dup              ; DUP ( addr-t u-t para1 para2 para2 )
.b675	20 99 b6	jsr $b699	                jsr _cmd_d_common       ; ( addr-t u-t para1 para2 )
.b678	20 93 97	jsr $9793	                jsr xt_one_minus        ; 1- ( addr-t u-t para1 para2-1 )
.b67b	80 e7		bra $b664	                bra _cmd_d_loop
.b67d					_cmd_d_done_with_flag:
.b67d	e8		inx		                inx                     ; ( addr-t u-t para1 para2 )
.b67e	e8		inx		                inx
.b67f	b5 02		lda $02,x	                lda 2,x
.b681	d0 02		bne $b685	                bne +
.b683	d6 03		dec $03,x	                dec 3,x
.b685					+
.b685	d6 02		dec $02,x	                dec 2,x
.b687	b5 02		lda $02,x	                lda 2,x
.b689	85 30		sta $30		                sta ed_cur
.b68b	b5 03		lda $03,x	                lda 3,x
.b68d	85 31		sta $31		                sta ed_cur+1            ; drop through to _cmd_d_done
.b68f					_cmd_d_done:
.b68f	a9 40		lda #$40	                lda #%01000000
.b691	04 32		tsb $32		                tsb ed_flags
.b693	20 53 89	jsr $8953	                jsr xt_cr
.b696	4c 89 b5	jmp $b589	                jmp ed_next_command
.b699					_cmd_d_common:
.b699	20 9f 8d	jsr $8d9f	                jsr xt_dup              ; DUP ( addr-t u-t u u )
.b69c	20 e2 b8	jsr $b8e2	                jsr ed_num_to_addr        ; ( addr-t u-t u addr )
.b69f	20 70 8f	jsr $8f70	                jsr xt_fetch            ; @ ( addr-t u-t u addr1 )
.b6a2	20 2a a1	jsr $a12a	                jsr xt_swap             ; SWAP ( addr-t u-t addr1 u )
.b6a5	20 93 97	jsr $9793	                jsr xt_one_minus        ; 1- ( addr-t u-t addr1 u-1 )
.b6a8	20 e2 b8	jsr $b8e2	                jsr ed_num_to_addr        ; ( addr-t u-t addr1 addr-1 )
.b6ab	20 09 a1	jsr $a109	                jsr xt_store            ; ! ( addr-t u-t )
.b6ae	60		rts		                rts
.b6af					ed_cmd_equ:
.b6af	fa		plx		                plx
.b6b0	a5 2e		lda $2e		                lda ed_head
.b6b2	05 2f		ora $2f		                ora ed_head+1
.b6b4	d0 08		bne $b6be	                bne _cmd_equ_have_text
.b6b6	ca		dex		                dex
.b6b7	ca		dex		                dex
.b6b8	74 00		stz $00,x	                stz 0,x
.b6ba	74 01		stz $01,x	                stz 1,x                 ; ( addr-t u-t para1 para2 0 )
.b6bc	80 21		bra $b6df	                bra _cmd_equ_done
.b6be					_cmd_equ_have_text:
.b6be	20 d4 b8	jsr $b8d4	                jsr ed_no_line_zero
.b6c1	24 32		bit $32		                bit ed_flags
.b6c3	30 0c		bmi $b6d1	                bmi _cmd_equ_have_para
.b6c5	ca		dex		                dex
.b6c6	ca		dex		                dex                     ; ( addr-t u-t para1 para2 ? )
.b6c7	a5 30		lda $30		                lda ed_cur
.b6c9	95 00		sta $00,x	                sta 0,x
.b6cb	a5 31		lda $31		                lda ed_cur+1
.b6cd	95 01		sta $01,x	                sta 1,x
.b6cf	80 0e		bra $b6df	                bra _cmd_equ_done       ; ( addr-t u-t para1 para2 cur )
.b6d1					_cmd_equ_have_para:
.b6d1	b5 00		lda $00,x	                lda 0,x
.b6d3	15 01		ora $01,x	                ora 1,x
.b6d5	d0 05		bne $b6dc	                bne _cmd_equ_two_paras
.b6d7	20 15 98	jsr $9815	                jsr xt_over             ; ( addr-t u-t para1 para2 para1)
.b6da	80 03		bra $b6df	                bra _cmd_equ_done
.b6dc					_cmd_equ_two_paras:
.b6dc	20 9f 8d	jsr $8d9f	                jsr xt_dup              ; ( addr-t u-t para1 para2 para2) drop through
.b6df					_cmd_equ_done:
.b6df	20 53 89	jsr $8953	                jsr xt_cr               ; number goes on new line
.b6e2	20 aa a4	jsr $a4aa	                jsr xt_u_dot            ; ( addr-t u-t para1 para2 )
.b6e5	20 53 89	jsr $8953	                jsr xt_cr
.b6e8	4c 89 b5	jmp $b589	                jmp ed_next_command
.b6eb					ed_cmd_f:
.b6eb	fa		plx		                plx
.b6ec	24 32		bit $32		                bit ed_flags
.b6ee	30 17		bmi $b707	                bmi _cmd_f_have_para
.b6f0	20 53 89	jsr $8953	                jsr xt_cr
.b6f3	20 ec a2	jsr $a2ec	                jsr xt_to_r             ; >R   ( addr-t u-t 0 ) ( R: 0 )
.b6f6	20 d9 9a	jsr $9ad9	                jsr xt_rot              ; ROT  ( u-t 0 addr-t ) ( R: 0 )
.b6f9	20 9f 8d	jsr $8d9f	                jsr xt_dup              ; DUP  ( u-t 0 addr-t addr-t ) ( R: 0 )
.b6fc	20 aa a4	jsr $a4aa	                jsr xt_u_dot            ; U.   ( u-t 0 addr-t ) ( R: 0 )
.b6ff	20 5e 96	jsr $965e	                jsr xt_not_rote         ; -ROT ( addr-t u-t 0 ) ( R: 0 )
.b702	20 14 9a	jsr $9a14	                jsr xt_r_from           ; R>   ( addr-t u-t 0 0 )
.b705	80 11		bra $b718	                bra _cmd_f_done
.b707					_cmd_f_have_para:
.b707	20 15 98	jsr $9815	                jsr xt_over
.b70a	20 53 89	jsr $8953	                jsr xt_cr
.b70d	20 aa a4	jsr $a4aa	                jsr xt_u_dot
.b710	b5 02		lda $02,x	                lda 2,x
.b712	95 06		sta $06,x	                sta 6,x
.b714	b5 03		lda $03,x	                lda 3,x
.b716	95 07		sta $07,x	                sta 7,x                 ; fall through to _cmd_f_done
.b718					_cmd_f_done:
.b718	20 53 89	jsr $8953	                jsr xt_cr
.b71b	4c 89 b5	jmp $b589	                jmp ed_next_command
.b71e					ed_cmd_i:
.b71e	fa		plx		                plx
.b71f	e8		inx		                inx
.b720	e8		inx		                inx                     ;  DROP ( addr-t u-t para1 )
.b721	24 32		bit $32		                bit ed_flags
.b723	30 08		bmi $b72d	                bmi _cmd_i_have_para
.b725	a5 30		lda $30		                lda ed_cur
.b727	95 00		sta $00,x	                sta 0,x
.b729	a5 31		lda $31		                lda ed_cur+1
.b72b	95 01		sta $01,x	                sta 1,x                 ;  ( addr-t u-t cur ) drop through
.b72d					_cmd_i_have_para:
.b72d	b5 00		lda $00,x	                lda 0,x
.b72f	15 01		ora $01,x	                ora 1,x
.b731	f0 09		beq $b73c	                beq _cmd_i_done
.b733	20 93 97	jsr $9793	                jsr xt_one_minus        ; 1-  ( addr-t u-t para1-1 )
.b736	20 23 a7	jsr $a723	                jsr xt_zero             ; 0   ( addr-t u-t para1-1 0 )
.b739	20 08 95	jsr $9508	                jsr xt_max              ; MAX ( addr-t u-t para1-1 | 0 )
.b73c					_cmd_i_done:
.b73c	4c a7 b5	jmp $b5a7	                jmp ed_entry_cmd_i
.b73f					ed_cmd_n:
.b73f	fa		plx		                plx
.b740	a9 01		lda #$01	                lda #%00000001
.b742	04 32		tsb $32		                tsb ed_flags
.b744	80 05		bra $b74b	                bra ed_cmd_p_entry_for_cmd_n
.b746					ed_cmd_p:
.b746	fa		plx		                plx
.b747					ed_cmd_p_from_external:
.b747	a9 01		lda #$01	                lda #%00000001
.b749	14 32		trb $32		                trb ed_flags
.b74b					ed_cmd_p_entry_for_cmd_n:
.b74b	20 7f b8	jsr $b87f	                jsr ed_have_text
.b74e	20 d4 b8	jsr $b8d4	                jsr ed_no_line_zero
.b751	20 53 89	jsr $8953	                jsr xt_cr
.b754	b5 00		lda $00,x	                lda 0,x
.b756	15 01		ora $01,x	                ora 1,x
.b758	d0 08		bne $b762	                bne _cmd_p_loop
.b75a	20 15 98	jsr $9815	                jsr xt_over             ; OVER ( addr-t u-t para1 para2 para1 )
.b75d	20 83 b7	jsr $b783	                jsr _cmd_p_common       ; ( addr-t u-t para1 para2 )
.b760	80 1e		bra $b780	                bra _cmd_p_all_done
.b762					_cmd_p_loop:
.b762	20 34 a3	jsr $a334	                jsr xt_two_dup          ; 2DUP ( addr-t u-t para1 para2 para1 para2 )
.b765	20 4d 91	jsr $914d	                jsr xt_greater_than     ; > ( addr-t u-t para1 para2 f )
.b768	b5 00		lda $00,x	                lda 0,x
.b76a	15 01		ora $01,x	                ora 1,x
.b76c	d0 10		bne $b77e	                bne _cmd_p_done
.b76e	e8		inx		                inx
.b76f	e8		inx		                inx                     ; Get rid of the flag from >
.b770	20 15 98	jsr $9815	                jsr xt_over             ; ( addr-t u-t para1 para2 para1 )
.b773	20 83 b7	jsr $b783	                jsr _cmd_p_common       ; ( addr-t u-t para1 para2 )
.b776	f6 02		inc $02,x	                inc 2,x
.b778	d0 02		bne $b77c	                bne +
.b77a	f6 03		inc $03,x	                inc 3,x
.b77c					+
.b77c	80 e4		bra $b762	                bra _cmd_p_loop
.b77e					_cmd_p_done:
.b77e	e8		inx		                inx
.b77f	e8		inx		                inx                     ; fall through to _cmp_p_all_done
.b780					_cmd_p_all_done:
.b780	4c 89 b5	jmp $b589	                jmp ed_next_command
.b783					_cmd_p_common:
.b783	a5 32		lda $32		                lda ed_flags
.b785	4a		lsr a		                lsr                     ; bit 0 now in carry
.b786	90 0b		bcc $b793	                bcc _cmd_p_common_no_num
.b788	20 9f 8d	jsr $8d9f	                jsr xt_dup              ; DUP ( addr-t u-t para1 para1 )
.b78b	20 aa a4	jsr $a4aa	                jsr xt_u_dot            ; U. ( addr-t u-t para1 )
.b78e	a9 09		lda #$09	                lda #$09                 ; ASCII for Tab
.b790	20 e6 8d	jsr $8de6	                jsr emit_a
.b793					_cmd_p_common_no_num:
.b793	20 e2 b8	jsr $b8e2	                jsr ed_num_to_addr        ; ( addr-t u-t addr )
.b796	20 22 b9	jsr $b922	                jsr ed_print_addr
.b799	60		rts		                rts
.b79a					ed_cmd_q:
.b79a	fa		plx		                plx
.b79b	24 32		bit $32		                bit ed_flags            ; bit 6 is change flag
.b79d	50 03		bvc $b7a2	                bvc +
.b79f	4c 5c b8	jmp $b85c	                jmp ed_error_2drop
.b7a2					+
.b7a2	4c 90 b5	jmp $b590	                jmp ed_all_done            ; can't fall thru because of PLX
.b7a5					ed_cmd_qq:
.b7a5	fa		plx		                plx
.b7a6	4c 90 b5	jmp $b590	                jmp ed_all_done
.b7a9					ed_cmd_w:
.b7a9	fa		plx		                plx
.b7aa	20 7f b8	jsr $b87f	                jsr ed_have_text
.b7ad	24 32		bit $32		                bit ed_flags
.b7af	30 13		bmi $b7c4	                bmi _cmd_w_have_para
.b7b1	b5 06		lda $06,x	                lda 6,x
.b7b3	15 07		ora $07,x	                ora 7,x
.b7b5	d0 03		bne $b7ba	                bne +
.b7b7	4c 5c b8	jmp $b85c	                jmp ed_error_2drop
.b7ba					+
.b7ba	b5 06		lda $06,x	                lda 6,x
.b7bc	95 02		sta $02,x	                sta 2,x
.b7be	b5 07		lda $07,x	                lda 7,x
.b7c0	95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t addr-t ? )
.b7c2	80 08		bra $b7cc	                bra _cmd_w_para_ready
.b7c4					_cmd_w_have_para:
.b7c4	b5 02		lda $02,x	                lda 2,x
.b7c6	95 06		sta $06,x	                sta 6,x
.b7c8	b5 03		lda $03,x	                lda 3,x
.b7ca	95 07		sta $07,x	                sta 7,x                 ; drop through to _cmd_w_para_ready
.b7cc					_cmd_w_para_ready:
.b7cc	a9 2e		lda #$2e	                lda #<ed_head
.b7ce	95 00		sta $00,x	                sta 0,x
.b7d0	a9 00		lda #$00	                lda #>ed_head
.b7d2	95 01		sta $01,x	                sta 1,x                 ; ( addr-t u-t addr-t addr-h )
.b7d4	20 15 98	jsr $9815	                jsr xt_over             ; OVER ( addr-t u-t addr-t addr-h addr-t )
.b7d7	20 ec a2	jsr $a2ec	                jsr xt_to_r             ; >R ( addr-t u-t addr-t addr-h ) ( R: addr-t )
.b7da					_cmd_w_loop:
.b7da	20 70 8f	jsr $8f70	                jsr xt_fetch            ; @ ( addr-t u-t addr-t addr1 ) ( R: addr-t )
.b7dd	b5 00		lda $00,x	                lda 0,x
.b7df	15 01		ora $01,x	                ora 1,x
.b7e1	f0 55		beq $b838	                beq _cmd_w_eol
.b7e3	20 34 a3	jsr $a334	                jsr xt_two_dup          ; 2DUP ( addr-t addr-1 addr-t addr-1 ) ( R: addr-t addr-1 addr-t )
.b7e6	20 1e a4	jsr $a41e	                jsr xt_two_to_r         ; 2>R  ( addr-t addr-1 ) (R: ... )
.b7e9	20 9f 97	jsr $979f	                jsr xt_one_plus         ; 1+ ( addr-t addr1+1 ) (R: ... )
.b7ec	20 9f 97	jsr $979f	                jsr xt_one_plus         ; 1+ ( addr-t addr1+2 ) (R: ... )
.b7ef	20 9f 8d	jsr $8d9f	                jsr xt_dup              ; DUP ( addr-t addr1+2 addr1+2 ) ( R: ... )
.b7f2	20 70 8f	jsr $8f70	                jsr xt_fetch            ; @ ( addr-t addr1+2 addr-s ) ( R: ... )
.b7f5	20 2a a1	jsr $a12a	                jsr xt_swap             ; SWAP ( addr-t addr-s addr1+2 ) ( R: ... )
.b7f8	20 9f 97	jsr $979f	                jsr xt_one_plus         ; 1+ ( addr-t addr-s addr1+1 ) (R: ... )
.b7fb	20 9f 97	jsr $979f	                jsr xt_one_plus         ; 1+ ( addr-t addr-s addr1+2 ) (R: ... )
.b7fe	20 70 8f	jsr $8f70	                jsr xt_fetch            ; @ ( addr-t addr-s u-s ) ( R: ... )
.b801	20 5e 96	jsr $965e	                jsr xt_not_rote         ; -ROT ( u-s addr-t addr-s ) ( R: ... )
.b804	20 2a a1	jsr $a12a	                jsr xt_swap             ; SWAP ( u-s addr-s addr-t ) ( R: ... )
.b807	20 d9 9a	jsr $9ad9	                jsr xt_rot              ; ROT (addr-s addr-t u-s ) ( R: ... )
.b80a	20 9f 8d	jsr $8d9f	                jsr xt_dup              ; DUP (addr-s addr-t u-s u-s ) ( R: ... )
.b80d	20 ec a2	jsr $a2ec	                jsr xt_to_r             ; >R (addr-s addr-t u-s ) ( R: ... u-s )
.b810	20 b2 95	jsr $95b2	                jsr xt_move             ; MOVE ( )( R: addr-t addr-1 addr-t )
.b813	20 14 9a	jsr $9a14	                jsr xt_r_from           ; R> ( u-s )  ( R: addr-t addr-h addr-t )
.b816	20 a4 a3	jsr $a3a4	                jsr xt_two_r_from       ; 2R> ( u-s addr-t addr-h ) ( R: addr-t )
.b819	20 5e 96	jsr $965e	                jsr xt_not_rote         ; -ROT ( addr-h u-s addr-t ) ( R: addr-t )
.b81c	20 65 99	jsr $9965	                jsr xt_plus             ; + ( addr-h addr-t1 ) ( R: addr-t )
.b81f	20 9f 8d	jsr $8d9f	                jsr xt_dup              ; DUP ( addr-h addr-t1 addr-t1 ) ( R: addr-t )
.b822	ca		dex		                dex
.b823	ca		dex		                dex                     ; ( addr-h addr-t1 addr-t1 ? ) ( R: addr-t )
.b824	a9 0a		lda #$0a	                lda #AscLF              ; ASCII for LF
.b826	95 00		sta $00,x	                sta 0,x
.b828	74 01		stz $01,x	                stz 1,x                 ; ( addr-h addr-t1 addr-t1 c ) ( R: addr-t )
.b82a	20 2a a1	jsr $a12a	                jsr xt_swap             ; SWAP ( addr-h addr-t1 c addr-t1 ) ( R: addr-t )
.b82d	20 09 a1	jsr $a109	                jsr xt_store            ; ! ( addr-h addr-t1 ) ( R: addr-t )
.b830	20 9f 97	jsr $979f	                jsr xt_one_plus         ; 1+ ( addr-h addr-t1+1 ) ( R: addr-t )
.b833	20 2a a1	jsr $a12a	                jsr xt_swap             ; SWAP ( addr-t1+1 addr-h ) ( R: addr-t )
.b836	80 a2		bra $b7da	                bra _cmd_w_loop
.b838					_cmd_w_eol:
.b838	20 2a a1	jsr $a12a	                jsr xt_swap             ; SWAP ( addr-t u-t addr-n addr-tn ) ( R: addr-t )
.b83b	20 14 9a	jsr $9a14	                jsr xt_r_from           ; R> ( addr-t u-t addr-n addr-tn addr-t )
.b83e	20 40 95	jsr $9540	                jsr xt_minus            ; - ( addr-t u-t addr-n u )
.b841	b5 00		lda $00,x	                lda 0,x
.b843	95 04		sta $04,x	                sta 4,x
.b845	b5 01		lda $01,x	                lda 1,x
.b847	95 05		sta $05,x	                sta 5,x                 ; ( addr-t u addr-n u )
.b849	20 53 89	jsr $8953	                jsr xt_cr
.b84c	20 9f 8d	jsr $8d9f	                jsr xt_dup              ; DUP ( addr-t u addr-n u u )
.b84f	20 aa a4	jsr $a4aa	                jsr xt_u_dot            ; U. ( addr-t u addr-n u )
.b852	20 53 89	jsr $8953	                jsr xt_cr
.b855	a9 40		lda #$40	                lda #%01000000
.b857	14 32		trb $32		                trb ed_flags
.b859	4c 89 b5	jmp $b589	                jmp ed_next_command
.b85c					ed_error_2drop:
.b85c	e8		inx		                inx
.b85d	e8		inx		                inx                     ; drop through to _error_1drop
.b85e					ed_error_1drop:
.b85e	e8		inx		                inx
.b85f	e8		inx		                inx                     ; drop through to _error
.b860					ed_error:
.b860	20 53 89	jsr $8953	                jsr xt_cr
.b863	a9 3f		lda #$3f	                lda #'?'
.b865	20 e6 8d	jsr $8de6	                jsr emit_a
.b868	20 53 89	jsr $8953	                jsr xt_cr
.b86b	4c a3 b3	jmp $b3a3	                jmp ed_input_loop
.b86e					ed_get_input:
.b86e	20 7a 9a	jsr $9a7a	                jsr xt_refill           ;  ( addr-t u-t f )
.b871	b5 00		lda $00,x	                lda 0,x
.b873	15 01		ora $01,x	                ora 1,x
.b875	d0 05		bne $b87c	                bne +
.b877	7a		ply		                ply
.b878	7a		ply		                ply
.b879	4c 5e b8	jmp $b85e	                jmp ed_error_1drop
.b87c					+
.b87c	e8		inx		                inx
.b87d	e8		inx		                inx
.b87e	60		rts		                rts
.b87f					ed_have_text:
.b87f	a5 2e		lda $2e		                lda ed_head
.b881	05 2f		ora $2f		                ora ed_head+1
.b883	d0 04		bne $b889	                bne +
.b885	7a		ply		                ply
.b886	7a		ply		                ply
.b887	80 d7		bra $b860	                bra ed_error
.b889					+
.b889	60		rts		                rts
.b88a					ed_is_valid_line:
.b88a	38		sec		                sec                             ; default is legal line number
.b88b	b5 00		lda $00,x	                lda 0,x
.b88d	15 01		ora $01,x	                ora 1,x
.b88f	f0 19		beq $b8aa	                beq _is_valid_line_nope_zero    ; ( n )
.b891	20 9f 8d	jsr $8d9f	                jsr xt_dup                      ; DUP ( n n )
.b894	20 ac b8	jsr $b8ac	                jsr ed_last_line                  ; ( n n last )
.b897	20 2a a1	jsr $a12a	                jsr xt_swap                     ; SWAP ( n last n )
.b89a	20 58 93	jsr $9358	                jsr xt_less_than                ; < ( n f )
.b89d	b5 00		lda $00,x	                lda 0,x                         ; 0 flag is good
.b89f	15 01		ora $01,x	                ora 1,x
.b8a1	d0 05		bne $b8a8	                bne _is_valid_line_too_small
.b8a3	e8		inx		                inx
.b8a4	e8		inx		                inx                     ; DROP flag ( n )
.b8a5	38		sec		                sec                     ; Who knows what's happened to C by now
.b8a6	80 03		bra $b8ab	                bra _is_valid_line_done ; only one exit from this routine
.b8a8					_is_valid_line_too_small:
.b8a8	e8		inx		                inx
.b8a9	e8		inx		                inx                     ; drop through to _is_valid_line_zero
.b8aa					_is_valid_line_nope_zero:
.b8aa	18		clc		                clc                     ; drop through to _is_valid_line_done
.b8ab					_is_valid_line_done:
.b8ab	60		rts		                rts
.b8ac					ed_last_line:
.b8ac	64 24		stz $24		                stz tmp1
.b8ae	64 25		stz $25		                stz tmp1+1
.b8b0	ca		dex		                dex
.b8b1	ca		dex		                dex                     ; ( ? )
.b8b2	a9 2e		lda #$2e	                lda #<ed_head
.b8b4	95 00		sta $00,x	                sta 0,x
.b8b6	a9 00		lda #$00	                lda #>ed_head
.b8b8	95 01		sta $01,x	                sta 1,x                 ; ( addr )
.b8ba					_last_line_loop:
.b8ba	20 70 8f	jsr $8f70	                jsr xt_fetch            ; ( addr | 0 )
.b8bd	b5 00		lda $00,x	                lda 0,x
.b8bf	15 01		ora $01,x	                ora 1,x
.b8c1	f0 08		beq $b8cb	                beq _last_line_done
.b8c3	e6 24		inc $24		                inc tmp1
.b8c5	d0 02		bne $b8c9	                bne +
.b8c7	e6 25		inc $25		                inc tmp1+1
.b8c9					+
.b8c9	80 ef		bra $b8ba	                bra _last_line_loop
.b8cb					_last_line_done:
.b8cb	a5 24		lda $24		                lda tmp1
.b8cd	95 00		sta $00,x	                sta 0,x
.b8cf	a5 25		lda $25		                lda tmp1+1
.b8d1	95 01		sta $01,x	                sta 1,x                 ; ( u )
.b8d3	60		rts		                rts
.b8d4					ed_no_line_zero:
.b8d4	b5 02		lda $02,x	                lda 2,x
.b8d6	15 03		ora $03,x	                ora 3,x
.b8d8	d0 07		bne $b8e1	                bne _no_line_zero_done
.b8da	24 32		bit $32		                bit ed_flags
.b8dc	10 03		bpl $b8e1	                bpl _no_line_zero_done
.b8de	4c 5c b8	jmp $b85c	                jmp ed_error_2drop
.b8e1					_no_line_zero_done:
.b8e1	60		rts		                rts
.b8e2					ed_num_to_addr:
.b8e2	ca		dex		                dex
.b8e3	ca		dex		                dex                     ; ( u ? )
.b8e4	a9 2e		lda #$2e	                lda #<ed_head
.b8e6	95 00		sta $00,x	                sta 0,x
.b8e8	a9 00		lda #$00	                lda #>ed_head
.b8ea	95 01		sta $01,x	                sta 1,x                 ; ( u addr-h )
.b8ec	b5 02		lda $02,x	                lda 2,x
.b8ee	15 03		ora $03,x	                ora 3,x
.b8f0	d0 05		bne $b8f7	                bne _num_to_addr_loop
.b8f2	20 32 96	jsr $9632	                jsr xt_nip              ; ( addr-h )
.b8f5	80 21		bra $b918	                bra _num_to_addr_done
.b8f7					_num_to_addr_loop:
.b8f7	20 70 8f	jsr $8f70	                jsr xt_fetch            ; @ ( u addr1 )
.b8fa	b5 00		lda $00,x	                lda 0,x
.b8fc	15 01		ora $01,x	                ora 1,x
.b8fe	d0 05		bne $b905	                bne +
.b900	20 32 96	jsr $9632	                jsr xt_nip              ; NIP ( addr1 )
.b903	80 13		bra $b918	                bra _num_to_addr_done
.b905					+
.b905	20 2a a1	jsr $a12a	                jsr xt_swap             ; SWAP ( addr1 u )
.b908	20 93 97	jsr $9793	                jsr xt_one_minus        ; 1- ( addr1 u-1 )
.b90b	b5 00		lda $00,x	                lda 0,x
.b90d	15 01		ora $01,x	                ora 1,x
.b90f	f0 05		beq $b916	                beq _num_to_addr_finished
.b911	20 2a a1	jsr $a12a	                jsr xt_swap             ; SWAP ( u-1 addr1 )
.b914	80 e1		bra $b8f7	                bra _num_to_addr_loop
.b916					_num_to_addr_finished:
.b916	e8		inx		                inx
.b917	e8		inx		                inx                     ; ( addr )
.b918					_num_to_addr_done:
.b918	60		rts		                rts
.b919					ed_para1_to_cur:
.b919	b5 02		lda $02,x	                lda 2,x
.b91b	85 30		sta $30		                sta ed_cur
.b91d	b5 03		lda $03,x	                lda 3,x
.b91f	85 31		sta $31		                sta ed_cur+1
.b921	60		rts		                rts
.b922					ed_print_addr:
.b922	20 9f 97	jsr $979f	                jsr xt_one_plus
.b925	20 9f 97	jsr $979f	                jsr xt_one_plus         ; ( addr+2 )
.b928	20 9f 8d	jsr $8d9f	                jsr xt_dup              ; ( addr+2 addr+2 )
.b92b	20 9f 97	jsr $979f	                jsr xt_one_plus
.b92e	20 9f 97	jsr $979f	                jsr xt_one_plus         ; ( addr+2 addr+4 )
.b931	20 70 8f	jsr $8f70	                jsr xt_fetch            ; ( addr+2 u-s )
.b934	20 2a a1	jsr $a12a	                jsr xt_swap             ; ( u-s addr+2 )
.b937	20 70 8f	jsr $8f70	                jsr xt_fetch            ; ( u-s addr-s )
.b93a	20 2a a1	jsr $a12a	                jsr xt_swap             ; ( addr-s u-s )
.b93d	20 7f a4	jsr $a47f	                jsr xt_type
.b940	20 53 89	jsr $8953	                jsr xt_cr
.b943	60		rts		                rts
>b944	61 66 69 64 70 6e 3d 77		ed_cmd_list:    .text "afidpn=wqQ", 0
>b94c	71 51 00
.b94f					ed_cmd_table:
>b94f	98 b5 eb b6 1e b7 47 b6		                .word ed_cmd_a, ed_cmd_f, ed_cmd_i, ed_cmd_d, ed_cmd_p, ed_cmd_n
>b957	46 b7 3f b7
>b95b	af b6 a9 b7 9a b7 a5 b7		                .word ed_cmd_equ, ed_cmd_w, ed_cmd_q, ed_cmd_qq
.b963					ed6502_end:

;******  Return to file: platform/../taliforth.asm

.b963					forth_words_start:
>b963	20 63 72 20 2e 28 20 54		.binary "forth_words.asc"
>b96b	61 6c 69 20 46 6f 72 74 68 20 32 20 66 6f 72 20
>b97b	74 68 65 20 36 35 63 30 32 29 20 63 72 20 2e 28
>b98b	20 56 65 72 73 69 6f 6e 20 31 2e 30 20 32 34 2e
>b99b	20 4a 61 6e 20 32 30 32 30 20 29 20 63 72 20 2e
>b9ab	28 20 43 6f 70 79 72 69 67 68 74 20 32 30 31 34
>b9bb	2d 32 30 32 30 20 53 63 6f 74 20 57 2e 20 53 74
>b9cb	65 76 65 6e 73 6f 6e 29 20 63 72 20 2e 28 20 54
>b9db	61 6c 69 20 46 6f 72 74 68 20 32 20 63 6f 6d 65
>b9eb	73 20 77 69 74 68 20 61 62 73 6f 6c 75 74 65 6c
>b9fb	79 20 4e 4f 20 57 41 52 52 41 4e 54 59 29 20 63
>ba0b	72 20 2e 28 20 54 79 70 65 20 27 62 79 65 27 20
>ba1b	74 6f 20 65 78 69 74 29 20 63 72 20
.ba27					forth_words_end:
.ba27					user_words_start:
>ba27	20 20				.binary "user_words.asc"
.ba29					user_words_end:

;******  Processing file: platform/../headers.asm

.ba29					nt_bye:
>ba29	03				        .byte 3         ; length of word strings
>ba2a	00				        .byte 0         ; status byte
>ba2b	00 00				        .word 0000      ; next word in Dictionary, 0000 signals end
>ba2d	ed 85				        .word xt_bye    ; start of code block (xt of this word)
>ba2f	f0 85				        .word z_bye     ; end of code (RTS)
>ba31	62 79 65			        .text "bye"     ; word name, always lower case, not zero-terminated
.ba34					nt_cold:
>ba34	04 00				        .byte 4, 0
>ba36	29 ba 00 80 c5 80		        .word nt_bye, xt_cold, z_cold
>ba3c	63 6f 6c 64			        .text "cold"
.ba40					nt_ed:
>ba40	02 08				        .byte 2, NN
>ba42	34 ba ad 8d b0 8d		        .word nt_cold, xt_ed, z_ed
>ba48	65 64				        .text "ed"
>ba4a	03 08				nt_see: .byte 3, NN
>ba4c	40 ba 03 9c 90 9c		        .word nt_ed, xt_see, z_see
>ba52	73 65 65			        .text "see"
.ba55					nt_forth:
>ba55	05 00				        .byte 5, 0
>ba57	4a ba b8 90 be 90		        .word nt_see, xt_forth, z_forth
>ba5d	66 6f 72 74 68			        .text "forth"
.ba62					nt_order:
>ba62	05 00				        .byte 5, 0
>ba64	55 ba c7 97 f1 97		        .word nt_forth, xt_order, z_order
>ba6a	6f 72 64 65 72			        .text "order"
.ba6f					nt_to_order:
>ba6f	06 00				        .byte 6, 0
>ba71	62 ba d9 a2 eb a2		        .word nt_order, xt_to_order, z_to_order
>ba77	3e 6f 72 64 65 72		        .text ">order"
.ba7d					nt_previous:
>ba7d	08 00				        .byte 8, 0
>ba7f	6f ba d7 99 e3 99		        .word nt_to_order, xt_previous, z_previous
>ba85	70 72 65 76 69 6f 75 73		        .text "previous"
.ba8d					nt_also:
>ba8d	04 00				        .byte 4, 0
>ba8f	7d ba 20 83 2f 83		        .word nt_previous, xt_also, z_also
>ba95	61 6c 73 6f			        .text "also"
.ba99					nt_only:
>ba99	04 00				        .byte 4, 0
>ba9b	8d ba a9 97 b4 97		        .word nt_also, xt_only, z_only
>baa1	6f 6e 6c 79			        .text "only"
.baa5					nt_forth_wordlist:
>baa5	0e 00				        .byte 14, 0
>baa7	99 ba 23 a7 29 a7		        .word nt_only, xt_forth_wordlist, z_forth_wordlist
>baad	66 6f 72 74 68 2d 77 6f		        .text "forth-wordlist"
>bab5	72 64 6c 69 73 74
.babb					nt_editor_wordlist:
>babb	0f 00				        .byte 15, 0
>babd	a5 ba 8a 97 92 97		        .word nt_forth_wordlist, xt_editor_wordlist, z_editor_wordlist
>bac3	65 64 69 74 6f 72 2d 77		        .text "editor-wordlist"
>bacb	6f 72 64 6c 69 73 74
.bad2					nt_assembler_wordlist:
>bad2	12 00				        .byte 18, 0
>bad4	bb ba 23 a3 2b a3		        .word nt_editor_wordlist, xt_assembler_wordlist, z_assembler_wordlist
>bada	61 73 73 65 6d 62 6c 65		        .text "assembler-wordlist"
>bae2	72 2d 77 6f 72 64 6c 69 73 74
.baec					nt_root_wordlist:
>baec	0d 00				        .byte 13, 0
>baee	d2 ba d0 9a d8 9a		        .word nt_assembler_wordlist, xt_root_wordlist, z_root_wordlist
>baf4	72 6f 6f 74 2d 77 6f 72		        .text "root-wordlist"
>bafc	64 6c 69 73 74
.bb01					nt_get_order:
>bb01	09 00				        .byte 9, 0
>bb03	ec ba 24 91 4c 91		        .word nt_root_wordlist, xt_get_order, z_get_order
>bb09	67 65 74 2d 6f 72 64 65		        .text "get-order"
>bb11	72
.bb12					nt_set_order:
>bb12	09 00				        .byte 9, 0
>bb14	01 bb 9d 9c d0 9c		        .word nt_get_order, xt_set_order, z_set_order
>bb1a	73 65 74 2d 6f 72 64 65		        .text "set-order"
>bb22	72
.bb23					nt_get_current:
>bb23	0b 00				        .byte 11, 0
>bb25	12 bb 19 91 23 91		        .word nt_set_order, xt_get_current, z_get_current
>bb2b	67 65 74 2d 63 75 72 72		        .text "get-current"
>bb33	65 6e 74
.bb36					nt_set_current:
>bb36	0b 10				        .byte 11, UF
>bb38	23 bb 91 9c 9c 9c		        .word nt_get_current, xt_set_current, z_set_current
>bb3e	73 65 74 2d 63 75 72 72		        .text "set-current"
>bb46	65 6e 74
.bb49					nt_search_wordlist:
>bb49	0f 10				        .byte 15, UF
>bb4b	36 bb 22 9b 02 9c		        .word nt_set_current, xt_search_wordlist, z_search_wordlist
>bb51	73 65 61 72 63 68 2d 77		        .text "search-wordlist"
>bb59	6f 72 64 6c 69 73 74
.bb60					nt_wordlist:
>bb60	08 00				        .byte 8, 0
>bb62	49 bb 7d a6 93 a6		        .word nt_search_wordlist, xt_wordlist, z_wordlist
>bb68	77 6f 72 64 6c 69 73 74		        .text "wordlist"
.bb70					nt_definitions:
>bb70	0b 00				        .byte 11, 0
>bb72	60 bb dd 8a e5 8a		        .word nt_wordlist, xt_definitions, z_definitions
>bb78	64 65 66 69 6e 69 74 69		        .text "definitions"
>bb80	6f 6e 73
.bb83					nt_block_ramdrive_init:
>bb83	13 10				        .byte 19, UF
>bb85	70 bb 04 84 2c 85		        .word nt_definitions, xt_block_ramdrive_init, z_block_ramdrive_init
>bb8b	62 6c 6f 63 6b 2d 72 61		        .text "block-ramdrive-init"
>bb93	6d 64 72 69 76 65 2d 69 6e 69 74
.bb9e					nt_list:
>bb9e	04 10				        .byte 4, UF
>bba0	83 bb 6d 93 79 93		        .word nt_block_ramdrive_init, xt_list, z_list
>bba6	6c 69 73 74			        .text "list"
.bbaa					nt_thru:
>bbaa	04 10				        .byte 4, UF
>bbac	9e bb 48 a1 8c a1		        .word nt_list, xt_thru, z_thru
>bbb2	74 68 72 75			        .text "thru"
.bbb6					nt_load:
>bbb6	04 10				        .byte 4, UF
>bbb8	aa bb a7 93 ea 93		        .word nt_thru, xt_load, z_load
>bbbe	6c 6f 61 64			        .text "load"
.bbc2					nt_flush:
>bbc2	05 00				        .byte 5, 0
>bbc4	b6 bb 77 90 80 90		        .word nt_load, xt_flush, z_flush
>bbca	66 6c 75 73 68			        .text "flush"
.bbcf					nt_empty_buffers:
>bbcf	0d 00				        .byte 13, 0
>bbd1	c2 bb e9 8d ef 8d		        .word nt_flush, xt_empty_buffers, z_empty_buffers
>bbd7	65 6d 70 74 79 2d 62 75		        .text "empty-buffers"
>bbdf	66 66 65 72 73
.bbe4					nt_buffer:
>bbe4	06 00				        .byte 6, 0
>bbe6	cf bb a5 85 d5 85		        .word nt_empty_buffers, xt_buffer, z_buffer
>bbec	62 75 66 66 65 72		        .text "buffer"
.bbf2					nt_update:
>bbf2	06 00				        .byte 6, 0
>bbf4	e4 bb e0 a5 e8 a5		        .word nt_buffer, xt_update, z_update
>bbfa	75 70 64 61 74 65		        .text "update"
.bc00					nt_block:
>bc00	05 00				        .byte 5, 0
>bc02	f2 bb b1 83 03 84		        .word nt_update, xt_block, z_block
>bc08	62 6c 6f 63 6b			        .text "block"
.bc0d					nt_save_buffers:
>bc0d	0c 00				        .byte 12, 0
>bc0f	00 bc 40 9e 5a 9e		        .word nt_block, xt_save_buffers, z_save_buffers
>bc15	73 61 76 65 2d 62 75 66		        .text "save-buffers"
>bc1d	66 65 72 73
.bc21					nt_block_read_vector:
>bc21	11 28				        .byte 17, HC+NN ; Deferred words need the HC (Code Field) flag.
>bc23	0d bc 3b 85 4a 85		        .word nt_save_buffers, xt_block_read_vector, z_block_read_vector
>bc29	62 6c 6f 63 6b 2d 72 65		        .text "block-read-vector"
>bc31	61 64 2d 76 65 63 74 6f 72
.bc3a					nt_block_read:
>bc3a	0a 28				        .byte 10, HC+NN ; Deferred words need the HC (Code Field) flag.
>bc3c	21 bc 2d 85 3b 85		        .word nt_block_read_vector, xt_block_read, z_block_read
>bc42	62 6c 6f 63 6b 2d 72 65		        .text "block-read"
>bc4a	61 64
.bc4c					nt_block_write_vector:
>bc4c	12 08				        .byte 18, NN ; Deferred words need the HC (Code Field) flag.
>bc4e	3a bc 5e 85 6d 85		        .word nt_block_read, xt_block_write_vector, z_block_write_vector
>bc54	62 6c 6f 63 6b 2d 77 72		        .text "block-write-vector"
>bc5c	69 74 65 2d 76 65 63 74 6f 72
.bc66					nt_block_write:
>bc66	0b 08				        .byte 11, NN ; Deferred words need the HC (Code Field) flag.
>bc68	4c bc 50 85 5e 85		        .word nt_block_write_vector, xt_block_write, z_block_write
>bc6e	62 6c 6f 63 6b 2d 77 72		        .text "block-write"
>bc76	69 74 65
.bc79					nt_blk:
>bc79	03 00				        .byte 3, 0
>bc7b	66 bc 93 83 a2 83		        .word nt_block_write, xt_blk, z_blk
>bc81	62 6c 6b			        .text "blk"
.bc84					nt_scr:
>bc84	03 00				        .byte 3, 0
>bc86	79 bc 5b 9e 6a 9e		        .word nt_blk, xt_scr, z_scr
>bc8c	73 63 72			        .text "scr"
.bc8f					nt_blkbuffer:
>bc8f	09 00				        .byte 9, 0
>bc91	84 bc a3 83 b0 83		        .word nt_scr, xt_blkbuffer, z_blkbuffer
>bc97	62 6c 6b 62 75 66 66 65		        .text "blkbuffer"
>bc9f	72
.bca0					nt_buffblocknum:
>bca0	0c 00				        .byte 12, 0
>bca2	8f bc 95 85 a4 85		        .word nt_blkbuffer, xt_buffblocknum, z_buffblocknum
>bca8	62 75 66 66 62 6c 6f 63		        .text "buffblocknum"
>bcb0	6b 6e 75 6d
.bcb4					nt_buffstatus:
>bcb4	0a 00				        .byte 10, 0
>bcb6	a0 bc dd 85 ec 85		        .word nt_buffblocknum, xt_buffstatus, z_buffstatus
>bcbc	62 75 66 66 73 74 61 74		        .text "buffstatus"
>bcc4	75 73
.bcc6					nt_buffer_colon:
>bcc6	07 00				        .byte 7, 0
>bcc8	b4 bc d6 85 dc 85		        .word nt_buffstatus, xt_buffer_colon, z_buffer_colon
>bcce	62 75 66 66 65 72 3a		        .text "buffer:"
.bcd5					nt_useraddr:
>bcd5	08 00				        .byte 8, 0
>bcd7	c6 bc e9 a5 f3 a5		        .word nt_buffer_colon, xt_useraddr, z_useraddr
>bcdd	75 73 65 72 61 64 64 72		        .text "useraddr"
.bce5					nt_action_of:
>bce5	09 04				        .byte 9, IM
>bce7	d5 bc 70 82 88 82		        .word nt_useraddr, xt_action_of, z_action_of
>bced	61 63 74 69 6f 6e 2d 6f		        .text "action-of"
>bcf5	66
.bcf6					nt_is:
>bcf6	02 04				        .byte 2, IM
>bcf8	e5 bc eb 92 03 93		        .word nt_action_of, xt_is, z_is
>bcfe	69 73				        .text "is"
.bd00					nt_defer_store:
>bd00	06 00				        .byte 6, 0
>bd02	f6 bc d6 8a dc 8a		        .word nt_is, xt_defer_store, z_defer_store
>bd08	64 65 66 65 72 21		        .text "defer!"
.bd0e					nt_defer_fetch:
>bd0e	06 00				        .byte 6, 0
>bd10	00 bd cf 8a d5 8a		        .word nt_defer_store, xt_defer_fetch, z_defer_fetch
>bd16	64 65 66 65 72 40		        .text "defer@"
.bd1c					nt_endcase:
>bd1c	07 0d				        .byte 7, IM+CO+NN
>bd1e	0e bd f0 8d 04 8e		        .word nt_defer_fetch, xt_endcase, z_endcase
>bd24	65 6e 64 63 61 73 65		        .text "endcase"
.bd2b					nt_endof:
>bd2b	05 0d				        .byte 5, IM+CO+NN
>bd2d	1c bd b1 8d ca 8d		        .word nt_endcase, xt_endof, z_endof ; shares code with ELSE
>bd33	65 6e 64 6f 66			        .text "endof"
.bd38					nt_of:
>bd38	02 0d				        .byte 2, IM+CO+NN
>bd3a	2b bd 71 97 89 97		        .word nt_endof, xt_of, z_of
>bd40	6f 66				        .text "of"
.bd42					nt_case:
>bd42	04 0d				        .byte 4, IM+CO+NN
>bd44	38 bd 23 a7 29 a7		        .word nt_of, xt_case, z_case    ; shares code with ZERO
>bd4a	63 61 73 65			        .text "case"
.bd4e					nt_while:
>bd4e	05 0d				        .byte 5, IM+CO+NN
>bd50	42 bd 0d a6 20 a6		        .word nt_case, xt_while, z_while
>bd56	77 68 69 6c 65			        .text "while"
.bd5b					nt_until:
>bd5b	05 0d				        .byte 5, IM+CO+NN
>bd5d	4e bd c5 a5 cf a5		        .word nt_while, xt_until, z_until
>bd63	75 6e 74 69 6c			        .text "until"
.bd68					nt_repeat:
>bd68	06 0d				        .byte 6, IM+CO+NN
>bd6a	5b bd bc 9a c8 9a		        .word nt_until, xt_repeat, z_repeat
>bd70	72 65 70 65 61 74		        .text "repeat"
.bd76					nt_else:
>bd76	04 0d				        .byte 4, IM+CO+NN
>bd78	68 bd b1 8d ca 8d		        .word nt_repeat, xt_else, z_else
>bd7e	65 6c 73 65			        .text "else"
.bd82					nt_then:
>bd82	04 0d				        .byte 4, IM+CO+NN
>bd84	76 bd 3e a1 47 a1		        .word nt_else, xt_then, z_then
>bd8a	74 68 65 6e			        .text "then"
.bd8e					nt_if:
>bd8e	02 0d				        .byte 2, IM+CO+NN
>bd90	82 bd f3 91 03 92		        .word nt_then, xt_if, z_if
>bd96	69 66				        .text "if"
.bd98					nt_dot_paren:
>bd98	02 04				        .byte 2, IM
>bd9a	8e bd 48 8c 56 8c		        .word nt_if, xt_dot_paren, z_dot_paren
>bda0	2e 28				        .text ".("
.bda2					nt_paren:
>bda2	01 04				        .byte 1, IM
>bda4	98 bd 51 98 60 98		        .word nt_dot_paren, xt_paren, z_paren
>bdaa	28				        .text "("
.bdab					nt_word:
>bdab	04 10				        .byte 4, UF
>bdad	a2 bd 37 a6 7c a6		        .word nt_paren, xt_word, z_word
>bdb3	77 6f 72 64			        .text "word"
.bdb7					nt_find:
>bdb7	04 10				        .byte 4, UF
>bdb9	ab bd 83 8f ca 8f		        .word nt_word, xt_find, z_find
>bdbf	66 69 6e 64			        .text "find"
.bdc3					nt_environment_q:
>bdc3	0c 10				        .byte 12, UF
>bdc5	b7 bd 05 8e 81 8e		        .word nt_find, xt_environment_q, z_environment_q
>bdcb	65 6e 76 69 72 6f 6e 6d		        .text "environment?"
>bdd3	65 6e 74 3f
.bdd7					nt_search:
>bdd7	06 18				        .byte 6, UF+NN
>bdd9	c3 bd 6b 9e 09 9f		        .word nt_environment_q, xt_search, z_search
>bddf	73 65 61 72 63 68		        .text "search"
.bde5					nt_compare:
>bde5	07 10				        .byte 7, UF
>bde7	d7 bd 78 87 dc 87		        .word nt_search, xt_compare, z_compare
>bded	63 6f 6d 70 61 72 65		        .text "compare"
.bdf4					nt_disasm:
>bdf4	06 10				        .byte 6, UF
>bdf6	e5 bd 2a 8b 30 8b		        .word nt_compare, xt_disasm, z_disasm
>bdfc	64 69 73 61 73 6d		        .text "disasm"
.be02					nt_dot_s:
>be02	02 00				        .byte 2, 0
>be04	f4 bd 90 8c d3 8c		        .word nt_disasm, xt_dot_s, z_dot_s
>be0a	2e 73				        .text ".s"
.be0c					nt_dump:
>be0c	04 10				        .byte 4, UF
>be0e	02 be 24 8d 8a 8d		        .word nt_dot_s, xt_dump, z_dump
>be14	64 75 6d 70			        .text "dump"
.be18					nt_bell:
>be18	04 00				        .byte 4, 0
>be1a	0c be 84 83 89 83		        .word nt_dump, xt_bell, z_bell
>be20	62 65 6c 6c			        .text "bell"
.be24					nt_align:
>be24	05 00				        .byte 5, 0
>be26	18 be aa 82 aa 82		        .word nt_bell, xt_align, z_align
>be2c	61 6c 69 67 6e			        .text "align"
.be31					nt_aligned:
>be31	07 00				        .byte 7, 0
>be33	24 be aa 82 aa 82		        .word nt_align, xt_align, z_align
>be39	61 6c 69 67 6e 65 64		        .text "aligned"
.be40					nt_wordsize:
>be40	08 10				        .byte 8, UF
>be42	31 be f0 a6 10 a7		        .word nt_aligned, xt_wordsize, z_wordsize
>be48	77 6f 72 64 73 69 7a 65		        .text "wordsize"
.be50					nt_words:
>be50	05 00				        .byte 5, 0
>be52	40 be 94 a6 ef a6		        .word nt_wordsize, xt_words, z_words
>be58	77 6f 72 64 73			        .text "words"
.be5d					nt_marker:
>be5d	06 04				        .byte 6, IM
>be5f	50 be 99 94 d6 94		        .word nt_words, xt_marker, z_marker
>be65	6d 61 72 6b 65 72		        .text "marker"
.be6b					nt_at_xy:
>be6b	05 10				        .byte 5, UF
>be6d	5d be 50 83 6d 83		        .word nt_marker, xt_at_xy, z_at_xy
>be73	61 74 2d 78 79			        .text "at-xy"
.be78					nt_page:
>be78	04 00				        .byte 4, 0
>be7a	6b be 33 98 50 98		        .word nt_at_xy, xt_page, z_page
>be80	70 61 67 65			        .text "page"
.be84					nt_cr:
>be84	02 00				        .byte 2, 0
>be86	78 be 53 89 58 89		        .word nt_page, xt_cr, z_cr
>be8c	63 72				        .text "cr"
.be8e					nt_input:
>be8e	05 00				        .byte 5, 0
>be90	84 be 47 92 51 92		        .word nt_cr, xt_input, z_input
>be96	69 6e 70 75 74			        .text "input"
.be9b					nt_output:
>be9b	06 00				        .byte 6, 0
>be9d	8e be 0a 98 14 98		        .word nt_input, xt_output, z_output
>bea3	6f 75 74 70 75 74		        .text "output"
.bea9					nt_sign:
>bea9	04 10				        .byte 4, UF
>beab	9b be 69 9f 7d 9f		        .word nt_output, xt_sign, z_sign
>beb1	73 69 67 6e			        .text "sign"
.beb5					nt_hold:
>beb5	04 10				        .byte 4, UF
>beb7	a9 be c7 91 d8 91		        .word nt_sign, xt_hold, z_hold
>bebd	68 6f 6c 64			        .text "hold"
.bec1					nt_number_sign_greater:
>bec1	02 10				        .byte 2, UF
>bec3	b5 be 3e 97 5f 97		        .word nt_hold, xt_number_sign_greater, z_number_sign_greater
>bec9	23 3e				        .text "#>"
.becb					nt_number_sign_s:
>becb	02 10				        .byte 2, UF
>becd	c1 be 60 97 70 97		        .word nt_number_sign_greater, xt_number_sign_s, z_number_sign_s
>bed3	23 73				        .text "#s"
.bed5					nt_number_sign:
>bed5	01 10				        .byte 1, UF
>bed7	cb be 09 97 3d 97		        .word nt_number_sign_s, xt_number_sign, z_number_sign
>bedd	23				        .text "#"
.bede					nt_less_number_sign:
>bede	02 00				        .byte 2, 0
>bee0	d5 be 4a 93 57 93		        .word nt_number_sign, xt_less_number_sign, z_less_number_sign
>bee6	3c 23				        .text "<#"
.bee8					nt_to_in:
>bee8	03 00				        .byte 3, 0
>beea	de be 2e a2 38 a2		        .word nt_less_number_sign, xt_to_in, z_to_in
>bef0	3e 69 6e			        .text ">in"
.bef3					nt_within:
>bef3	06 10				        .byte 6, UF
>bef5	e8 be 21 a6 36 a6		        .word nt_to_in, xt_within, z_within
>befb	77 69 74 68 69 6e		        .text "within"
.bf01					nt_hexstore:
>bf01	08 10				        .byte 8, UF
>bf03	f3 be 74 91 c6 91		        .word nt_within, xt_hexstore, z_hexstore
>bf09	68 65 78 73 74 6f 72 65		        .text "hexstore"
.bf11					nt_cleave:
>bf11	06 10				        .byte 6, UF
>bf13	01 bf 3c 86 88 86		        .word nt_hexstore, xt_cleave, z_cleave
>bf19	63 6c 65 61 76 65		        .text "cleave"
.bf1f					nt_pad:
>bf1f	03 00				        .byte 3, 0
>bf21	11 bf 23 98 32 98		        .word nt_cleave, xt_pad, z_pad
>bf27	70 61 64			        .text "pad"
.bf2a					nt_cmove:
>bf2a	05 10				        .byte 5, UF
>bf2c	1f bf 89 86 c3 86		        .word nt_pad, xt_cmove, z_cmove
>bf32	63 6d 6f 76 65			        .text "cmove"
.bf37					nt_cmove_up:
>bf37	06 10				        .byte 6, UF
>bf39	2a bf c4 86 fe 86		        .word nt_cmove, xt_cmove_up, z_cmove_up
>bf3f	63 6d 6f 76 65 3e		        .text "cmove>"
.bf45					nt_move:
>bf45	04 18				        .byte 4, NN+UF
>bf47	37 bf b2 95 d0 95		        .word nt_cmove_up, xt_move, z_move
>bf4d	6d 6f 76 65			        .text "move"
.bf51					nt_backslash:
>bf51	01 04				        .byte 1, IM
>bf53	45 bf 6e 83 76 83		        .word nt_move, xt_backslash, z_backslash
>bf59	5c				        .byte $5c
.bf5a					nt_star_slash:
>bf5a	02 10				        .byte 2, UF
>bf5c	51 bf e5 a0 ed a0		        .word nt_backslash, xt_star_slash, z_star_slash
>bf62	2a 2f				        .text "*/"
.bf64					nt_star_slash_mod:
>bf64	05 10				        .byte 5, UF
>bf66	5a bf ee a0 fd a0		        .word nt_star_slash, xt_star_slash_mod, z_star_slash_mod
>bf6c	2a 2f 6d 6f 64			        .text "*/mod"
.bf71					nt_mod:
>bf71	03 10				        .byte 3, UF
>bf73	64 bf a9 95 b1 95		        .word nt_star_slash_mod, xt_mod, z_mod
>bf79	6d 6f 64			        .text "mod"
.bf7c					nt_slash_mod:
>bf7c	04 10				        .byte 4, UF
>bf7e	71 bf 83 9f 9a 9f		        .word nt_mod, xt_slash_mod, z_slash_mod
>bf84	2f 6d 6f 64			        .text "/mod"
.bf88					nt_slash:
>bf88	01 10				        .byte 1, UF
>bf8a	7c bf 7e 9f 9a 9f		        .word nt_slash_mod, xt_slash, z_slash
>bf90	2f				        .text "/"
.bf91					nt_fm_slash_mod:
>bf91	06 10				        .byte 6, UF
>bf93	88 bf 81 90 b7 90		        .word nt_slash, xt_fm_slash_mod, z_fm_slash_mod
>bf99	66 6d 2f 6d 6f 64		        .text "fm/mod"
.bf9f					nt_sm_slash_rem:
>bf9f	06 10				        .byte 6, UF
>bfa1	91 bf 57 a0 7f a0		        .word nt_fm_slash_mod, xt_sm_slash_rem, z_sm_slash_rem
>bfa7	73 6d 2f 72 65 6d		        .text "sm/rem"
.bfad					nt_um_slash_mod:
>bfad	06 10				        .byte 6, UF
>bfaf	9f bf 36 a5 77 a5		        .word nt_sm_slash_rem, xt_um_slash_mod, z_um_slash_mod
>bfb5	75 6d 2f 6d 6f 64		        .text "um/mod"
.bfbb					nt_star:
>bfbb	01 10				        .byte 1, UF
>bfbd	ad bf dc a0 e4 a0		        .word nt_um_slash_mod, xt_star, z_star
>bfc3	2a				        .text "*"
.bfc4					nt_um_star:
>bfc4	03 10				        .byte 3, UF
>bfc6	bb bf 78 a5 bd a5		        .word nt_star, xt_um_star, z_um_star
>bfcc	75 6d 2a			        .text "um*"
.bfcf					nt_m_star:
>bfcf	02 10				        .byte 2, UF
>bfd1	c4 bf 7e 94 98 94		        .word nt_um_star, xt_m_star, z_m_star
>bfd7	6d 2a				        .text "m*"
.bfd9					nt_count:
>bfd9	05 10				        .byte 5, UF
>bfdb	cf bf 3f 89 52 89		        .word nt_m_star, xt_count, z_count
>bfe1	63 6f 75 6e 74			        .text "count"
.bfe6					nt_decimal:
>bfe6	07 00				        .byte 7, 0
>bfe8	d9 bf 95 8a 9b 8a		        .word nt_count, xt_decimal, z_decimal
>bfee	64 65 63 69 6d 61 6c		        .text "decimal"
.bff5					nt_hex:
>bff5	03 00				        .byte 3, 0
>bff7	e6 bf 6d 91 73 91		        .word nt_decimal, xt_hex, z_hex
>bffd	68 65 78			        .text "hex"
.c000					nt_to_number:
>c000	07 10				        .byte 7, UF
>c002	f5 bf 39 a2 d8 a2		        .word nt_hex, xt_to_number, z_to_number
>c008	3e 6e 75 6d 62 65 72		        .text ">number"
.c00f					nt_number:
>c00f	06 10				        .byte 6, UF
>c011	00 c0 7a 96 08 97		        .word nt_to_number, xt_number, z_number
>c017	6e 75 6d 62 65 72		        .text "number"
.c01d					nt_digit_question:
>c01d	06 10				        .byte 6, UF
>c01f	0f c0 f5 8a 29 8b		        .word nt_number, xt_digit_question, z_digit_question
>c025	64 69 67 69 74 3f		        .text "digit?"
.c02b					nt_base:
>c02b	04 00				        .byte 4, 0
>c02d	1d c0 77 83 7f 83		        .word nt_digit_question, xt_base, z_base
>c033	62 61 73 65			        .text "base"
.c037					nt_evaluate:
>c037	08 10				        .byte 8, UF
>c039	2b c0 c5 90 18 91		        .word nt_base, xt_evaluate, z_evaluate
>c03f	65 76 61 6c 75 61 74 65		        .text "evaluate"
.c047					nt_state:
>c047	05 00				        .byte 5, 0
>c049	37 c0 fe a0 08 a1		        .word nt_evaluate, xt_state, z_state
>c04f	73 74 61 74 65			        .text "state"
.c054					nt_again:
>c054	05 17				        .byte 5, AN+CO+IM+UF
>c056	47 c0 89 82 a9 82		        .word nt_state, xt_again, z_again
>c05c	61 67 61 69 6e			        .text "again"
.c061					nt_begin:
>c061	05 07				        .byte 5, AN+CO+IM
>c063	54 c0 80 83 83 83		        .word nt_again, xt_begin, z_begin
>c069	62 65 67 69 6e			        .text "begin"
.c06e					nt_quit:
>c06e	04 00				        .byte 4, 0
>c070	61 c0 83 80 c5 80		        .word nt_begin, xt_quit, z_quit
>c076	71 75 69 74			        .text "quit"
.c07a					nt_recurse:
>c07a	07 0d				        .byte 7, CO+IM+NN
>c07c	6e c0 3d 9a 79 9a		        .word nt_quit, xt_recurse, z_recurse
>c082	72 65 63 75 72 73 65		        .text "recurse"
.c089					nt_leave:
>c089	05 03				        .byte 5, AN+CO
>c08b	7a c0 40 93 45 93		        .word nt_recurse, xt_leave, z_leave
>c091	6c 65 61 76 65			        .text "leave"
.c096					nt_unloop:
>c096	06 03				        .byte 6, AN+CO
>c098	89 c0 be a5 c4 a5		        .word nt_leave, xt_unloop, z_unloop
>c09e	75 6e 6c 6f 6f 70		        .text "unloop"
.c0a4					nt_exit:
>c0a4	04 03				        .byte 4, AN+CO
>c0a6	96 c0 68 8f 69 8f		        .word nt_unloop, xt_exit, z_exit
>c0ac	65 78 69 74			        .text "exit"
.c0b0					nt_plus_loop:
>c0b0	05 05				        .byte 5, CO+IM
>c0b2	a4 c0 f2 93 58 94		        .word nt_exit, xt_plus_loop, z_plus_loop
>c0b8	2b 6c 6f 6f 70			        .text "+loop"
.c0bd					nt_loop:
>c0bd	04 05				        .byte 4, CO+IM
>c0bf	b0 c0 eb 93 58 94		        .word nt_plus_loop, xt_loop, z_loop
>c0c5	6c 6f 6f 70			        .text "loop"
.c0c9					nt_j:
>c0c9	01 03				        .byte 1, AN+CO
>c0cb	bd c0 04 93 1d 93		        .word nt_loop, xt_j, z_j
>c0d1	6a				        .text "j"
.c0d2					nt_i:
>c0d2	01 03				        .byte 1, AN+CO
>c0d4	c9 c0 d9 91 f2 91		        .word nt_j, xt_i, z_i
>c0da	69				        .text "i"
.c0db					nt_question_do:
>c0db	03 0d				        .byte 3, CO+IM+NN
>c0dd	d2 c0 4c 8b ac 8b		        .word nt_i, xt_question_do, z_question_do
>c0e3	3f 64 6f			        .text "?do"
.c0e6					nt_do:
>c0e6	02 0d				        .byte 2, CO+IM+NN
>c0e8	db c0 52 8b ac 8b		        .word nt_question_do, xt_do, z_do
>c0ee	64 6f				        .text "do"
.c0f0					nt_abort_quote:
>c0f0	06 0d				        .byte 6, CO+IM+NN
>c0f2	e6 c0 19 81 23 81		        .word nt_do, xt_abort_quote, z_abort_quote
>c0f8	61 62 6f 72 74 22		        .text "abort", $22
.c0fe					nt_abort:
>c0fe	05 00				        .byte 5, 0
>c100	f0 c0 81 80 c5 80		        .word nt_abort_quote, xt_abort, z_abort
>c106	61 62 6f 72 74			        .text "abort"
.c10b					nt_strip_underflow:
>c10b	0f 00				        .byte 15, 0
>c10d	fe c0 1f a1 29 a1		        .word nt_abort, xt_strip_underflow, z_strip_underflow
>c113	73 74 72 69 70 2d 75 6e		        .text "strip-underflow"
>c11b	64 65 72 66 6c 6f 77
.c122					nt_nc_limit:
>c122	08 00				        .byte 8, 0
>c124	0b c1 08 96 12 96		        .word nt_strip_underflow, xt_nc_limit, z_nc_limit
>c12a	6e 63 2d 6c 69 6d 69 74		        .text "nc-limit"
.c132					nt_allow_native:
>c132	0c 00				        .byte 12, 0
>c134	22 c1 14 83 1f 83		        .word nt_nc_limit, xt_allow_native, z_allow_native
>c13a	61 6c 6c 6f 77 2d 6e 61		        .text "allow-native"
>c142	74 69 76 65
.c146					nt_always_native:
>c146	0d 00				        .byte 13, 0
>c148	32 c1 30 83 3d 83		        .word nt_allow_native, xt_always_native, z_always_native
>c14e	61 6c 77 61 79 73 2d 6e		        .text "always-native"
>c156	61 74 69 76 65
.c15b					nt_never_native:
>c15b	0c 00				        .byte 12, 0
>c15d	46 c1 24 96 31 96		        .word nt_always_native, xt_never_native, z_never_native
>c163	6e 65 76 65 72 2d 6e 61		        .text "never-native"
>c16b	74 69 76 65
.c16f					nt_compile_only:
>c16f	0c 00				        .byte 12, 0
>c171	5b c1 f5 88 00 89		        .word nt_never_native, xt_compile_only, z_compile_only
>c177	63 6f 6d 70 69 6c 65 2d		        .text "compile-only"
>c17f	6f 6e 6c 79
.c183					nt_immediate:
>c183	09 00				        .byte 9, 0
>c185	6f c1 3b 92 46 92		        .word nt_compile_only, xt_immediate, z_immediate
>c18b	69 6d 6d 65 64 69 61 74		        .text "immediate"
>c193	65
.c194					nt_postpone:
>c194	08 05				        .byte 8, IM+CO
>c196	83 c1 98 99 d6 99		        .word nt_immediate, xt_postpone, z_postpone
>c19c	70 6f 73 74 70 6f 6e 65		        .text "postpone"
.c1a4					nt_s_backslash_quote:
>c1a4	03 04				        .byte 3, IM
>c1a6	94 c1 09 9b 12 9b		        .word nt_postpone, xt_s_backslash_quote, z_s_backslash_quote
>c1ac	73 5c 22			        .text "s", $5C, $22
.c1af					nt_s_quote:
>c1af	02 0c				        .byte 2, IM+NN
>c1b1	a4 c1 d1 9c 2d 9e		        .word nt_s_backslash_quote, xt_s_quote, z_s_quote
>c1b7	73 22				        .text "s", $22
.c1b9					nt_dot_quote:
>c1b9	02 05				        .byte 2, CO+IM
>c1bb	af c1 57 8c 61 8c		        .word nt_s_quote, xt_dot_quote, z_dot_quote
>c1c1	2e 22				        .text ".", $22
.c1c3					nt_sliteral:
>c1c3	08 15				        .byte 8, CO+IM+UF
>c1c5	b9 c1 bb 9f 2a a0		        .word nt_dot_quote, xt_sliteral, z_sliteral
>c1cb	73 6c 69 74 65 72 61 6c		        .text "sliteral"
.c1d3					nt_literal:
>c1d3	07 15				        .byte 7, IM+CO+UF
>c1d5	c3 c1 7a 93 87 93		        .word nt_sliteral, xt_literal, z_literal
>c1db	6c 69 74 65 72 61 6c		        .text "literal"
.c1e2					nt_right_bracket:
>c1e2	01 04				        .byte 1, IM
>c1e4	d3 c1 c9 9a cf 9a		        .word nt_literal, xt_right_bracket, z_right_bracket
>c1ea	5d				        .text "]"
.c1eb					nt_left_bracket:
>c1eb	01 05				        .byte 1, IM+CO
>c1ed	e2 c1 45 93 49 93		        .word nt_right_bracket, xt_left_bracket, z_left_bracket
>c1f3	5b				        .text "["
.c1f4					nt_compile_comma:
>c1f4	08 18				        .byte 8, UF+NN
>c1f6	eb c1 dd 87 f4 88		        .word nt_left_bracket, xt_compile_comma, z_compile_comma
>c1fc	63 6f 6d 70 69 6c 65 2c		        .text "compile,"
.c204					nt_colon_noname:
>c204	07 00				        .byte 7, 0
>c206	f4 c1 42 87 5d 87		        .word nt_compile_comma, xt_colon_noname, z_colon_noname
>c20c	3a 6e 6f 6e 61 6d 65		        .text ":noname"
.c213					nt_semicolon:
>c213	01 05				        .byte 1, CO+IM
>c215	04 c2 0a 9f 68 9f		        .word nt_colon_noname, xt_semicolon, z_semicolon
>c21b	3b				        .text ";"
.c21c					nt_colon:
>c21c	01 00				        .byte 1, 0
>c21e	13 c2 ff 86 41 87		        .word nt_semicolon, xt_colon, z_colon
>c224	3a				        .text ":"
.c225					nt_source_id:
>c225	09 00				        .byte 9, 0
>c227	1c c2 95 a0 9f a0		        .word nt_colon, xt_source_id, z_source_id
>c22d	73 6f 75 72 63 65 2d 69		        .text "source-id"
>c235	64
.c236					nt_source:
>c236	06 00				        .byte 6, 0
>c238	25 c2 80 a0 94 a0		        .word nt_source_id, xt_source, z_source
>c23e	73 6f 75 72 63 65		        .text "source"
.c244					nt_execute_parsing:
>c244	0f 10				        .byte 15, UF
>c246	36 c2 41 8f 67 8f		        .word nt_source, xt_execute_parsing, z_execute_parsing
>c24c	65 78 65 63 75 74 65 2d		        .text "execute-parsing"
>c254	70 61 72 73 69 6e 67
.c25b					nt_parse:
>c25b	05 10				        .byte 5, UF
>c25d	44 c2 bc 98 53 99		        .word nt_execute_parsing, xt_parse, z_parse
>c263	70 61 72 73 65			        .text "parse"
.c268					nt_parse_name:
>c268	0a 08				        .byte 10, NN
>c26a	5b c2 61 98 53 99		        .word nt_parse, xt_parse_name, z_parse_name
>c270	70 61 72 73 65 2d 6e 61		        .text "parse-name"
>c278	6d 65
.c27a					nt_latestnt:
>c27a	08 00				        .byte 8, 0
>c27c	68 c2 2b 93 38 93		        .word nt_parse_name, xt_latestnt, z_latestnt
>c282	6c 61 74 65 73 74 6e 74		        .text "latestnt"
.c28a					nt_latestxt:
>c28a	08 00				        .byte 8, 0
>c28c	7a c2 39 93 3f 93		        .word nt_latestnt, xt_latestxt, z_latestxt
>c292	6c 61 74 65 73 74 78 74		        .text "latestxt"
.c29a					nt_defer:
>c29a	05 00				        .byte 5, 0
>c29c	8a c2 9c 8a ce 8a		        .word nt_latestxt, xt_defer, z_defer
>c2a2	64 65 66 65 72			        .text "defer"
.c2a7					nt_to_body:
>c2a7	05 10				        .byte 5, UF
>c2a9	9a c2 09 a2 2d a2		        .word nt_defer, xt_to_body, z_to_body
>c2af	3e 62 6f 64 79			        .text ">body"
.c2b4					nt_name_to_string:
>c2b4	0b 10				        .byte 11, UF
>c2b6	a7 c2 ee 95 07 96		        .word nt_to_body, xt_name_to_string, z_name_to_string
>c2bc	6e 61 6d 65 3e 73 74 72		        .text "name>string"
>c2c4	69 6e 67
.c2c7					nt_int_to_name:
>c2c7	08 10				        .byte 8, UF
>c2c9	b4 c2 68 92 da 92		        .word nt_name_to_string, xt_int_to_name, z_int_to_name
>c2cf	69 6e 74 3e 6e 61 6d 65		        .text "int>name"
.c2d7					nt_name_to_int:
>c2d7	08 10				        .byte 8, UF
>c2d9	c7 c2 d1 95 ed 95		        .word nt_int_to_name, xt_name_to_int, z_name_to_int
>c2df	6e 61 6d 65 3e 69 6e 74		        .text "name>int"
.c2e7					nt_bracket_tick:
>c2e7	03 05				        .byte 3, CO+IM
>c2e9	d7 c2 8e 85 94 85		        .word nt_name_to_int, xt_bracket_tick, z_bracket_tick
>c2ef	5b 27 5d			        .text "[']"
.c2f2					nt_tick:
>c2f2	01 00				        .byte 1, 0
>c2f4	e7 c2 8d a1 ac a1		        .word nt_bracket_tick, xt_tick, z_tick
>c2fa	27				        .text "'"
.c2fb					nt_find_name:
>c2fb	09 10				        .byte 9, UF
>c2fd	f2 c2 cb 8f 76 90		        .word nt_tick, xt_find_name, z_find_name
>c303	66 69 6e 64 2d 6e 61 6d		        .text "find-name"
>c30b	65
.c30c					nt_fill:
>c30c	04 10				        .byte 4, UF
>c30e	fb c2 ea 8e 2c 8f		        .word nt_find_name, xt_fill, z_fill
>c314	66 69 6c 6c			        .text "fill"
.c318					nt_blank:
>c318	05 00				        .byte 5, 0     ; underflow checked by FILL
>c31a	0c c3 da 8e 2c 8f		        .word nt_fill, xt_blank, z_blank
>c320	62 6c 61 6e 6b			        .text "blank"
.c325					nt_erase:
>c325	05 00				        .byte 5, 0      ; underflow checked by FILL
>c327	18 c3 e4 8e 2c 8f		        .word nt_blank, xt_erase, z_erase
>c32d	65 72 61 73 65			        .text "erase"
.c332					nt_d_plus:
>c332	02 10				        .byte 2, UF
>c334	25 c3 4f 8a 6f 8a		        .word nt_erase, xt_d_plus, z_d_plus
>c33a	64 2b				        .text "d+"
.c33c					nt_d_minus:
>c33c	02 10				        .byte 2, UF
>c33e	32 c3 2e 8a 4e 8a		        .word nt_d_plus, xt_d_minus, z_d_minus
>c344	64 2d				        .text "d-"
.c346					nt_d_to_s:
>c346	03 10				        .byte 3, UF
>c348	3c c3 70 8a 75 8a		        .word nt_d_minus, xt_d_to_s, z_d_to_s
>c34e	64 3e 73			        .text "d>s"
.c351					nt_s_to_d:
>c351	03 10				        .byte 3, UF
>c353	46 c3 2e 9e 3f 9e		        .word nt_d_to_s, xt_s_to_d, z_s_to_d
>c359	73 3e 64			        .text "s>d"
.c35c					nt_to:
>c35c	02 0c				        .byte 2, NN+IM
>c35e	51 c3 ad a1 08 a2		        .word nt_s_to_d, xt_to, z_to
>c364	74 6f				        .text "to"
.c366					nt_value:
>c366	05 10				        .byte 5, UF
>c368	5c c3 01 89 3e 89		        .word nt_to, xt_constant, z_constant
>c36e	76 61 6c 75 65			        .text "value"
.c373					nt_constant:
>c373	08 10				        .byte 8, UF
>c375	66 c3 01 89 3e 89		        .word nt_value, xt_constant, z_constant
>c37b	63 6f 6e 73 74 61 6e 74		        .text "constant"
.c383					nt_variable:
>c383	08 00				        .byte 8, 0
>c385	73 c3 f4 a5 0c a6		        .word nt_constant, xt_variable, z_variable
>c38b	76 61 72 69 61 62 6c 65		        .text "variable"
.c393					nt_does:
>c393	05 05				        .byte 5, CO+IM
>c395	83 c3 e5 8b f3 8b		        .word nt_variable, xt_does, z_does
>c39b	64 6f 65 73 3e			        .text "does>"
.c3a0					nt_create:
>c3a0	06 00				        .byte 6, 0
>c3a2	93 c3 59 89 2d 8a		        .word nt_does, xt_create, z_create
>c3a8	63 72 65 61 74 65		        .text "create"
.c3ae					nt_allot:
>c3ae	05 10				        .byte 5, UF
>c3b0	a0 c3 ab 82 13 83		        .word nt_create, xt_allot, z_allot
>c3b6	61 6c 6c 6f 74			        .text "allot"
.c3bb					nt_key:
>c3bb	03 00				        .byte 3, 0
>c3bd	ae c3 1e 93 27 93		        .word nt_allot, xt_key, z_key
>c3c3	6b 65 79			        .text "key"
.c3c6					nt_depth:
>c3c6	05 00				        .byte 5, 0
>c3c8	bb c3 e6 8a f4 8a		        .word nt_key, xt_depth, z_depth
>c3ce	64 65 70 74 68			        .text "depth"
.c3d3					nt_unused:
>c3d3	06 00				        .byte 6, 0
>c3d5	c6 c3 d0 a5 df a5		        .word nt_depth, xt_unused, z_unused
>c3db	75 6e 75 73 65 64		        .text "unused"
.c3e1					nt_r_to_input:
>c3e1	07 08				        .byte 7, NN
>c3e3	d3 c3 25 9a 3c 9a		        .word nt_unused, xt_r_to_input, z_r_to_input
>c3e9	72 3e 69 6e 70 75 74		        .text "r>input"
.c3f0					nt_input_to_r:
>c3f0	07 08				        .byte 7, NN
>c3f2	e1 c3 52 92 67 92		        .word nt_r_to_input, xt_input_to_r, z_input_to_r
>c3f8	69 6e 70 75 74 3e 72		        .text "input>r"
.c3ff					nt_accept:
>c3ff	06 18				        .byte 6, UF+NN
>c401	f0 c3 4e 81 46 82		        .word nt_input_to_r, xt_accept, z_accept
>c407	61 63 63 65 70 74		        .text "accept"
.c40d					nt_refill:
>c40d	06 00				        .byte 6, 0
>c40f	ff c3 7a 9a bb 9a		        .word nt_accept, xt_refill, z_refill
>c415	72 65 66 69 6c 6c		        .text "refill"
.c41b					nt_slash_string:
>c41b	07 10				        .byte 7, UF
>c41d	0d c4 9b 9f ba 9f		        .word nt_refill, xt_slash_string, z_slash_string
>c423	2f 73 74 72 69 6e 67		        .text "/string"
.c42a					nt_minus_leading:
>c42a	08 10				        .byte 8, UF
>c42c	1b c4 53 95 6b 95		        .word nt_slash_string, xt_minus_leading, z_minus_leading
>c432	2d 6c 65 61 64 69 6e 67		        .text "-leading"
.c43a					nt_minus_trailing:
>c43a	09 10				        .byte 9, UF
>c43c	2a c4 6c 95 a8 95		        .word nt_minus_leading, xt_minus_trailing, z_minus_trailing
>c442	2d 74 72 61 69 6c 69 6e		        .text "-trailing"
>c44a	67
.c44b					nt_bl:
>c44b	02 00				        .byte 2, 0
>c44d	3a c4 8a 83 92 83		        .word nt_minus_trailing, xt_bl, z_bl
>c453	62 6c				        .text "bl"
.c455					nt_spaces:
>c455	06 10				        .byte 6, UF
>c457	4b c4 a6 a0 db a0		        .word nt_bl, xt_spaces, z_spaces
>c45d	73 70 61 63 65 73		        .text "spaces"
.c463					nt_bounds:
>c463	06 10				        .byte 6, UF
>c465	55 c4 6e 85 86 85		        .word nt_spaces, xt_bounds, z_bounds
>c46b	62 6f 75 6e 64 73		        .text "bounds"
.c471					nt_c_comma:
>c471	02 10				        .byte 2, UF
>c473	63 c4 f0 85 fa 85		        .word nt_bounds, xt_c_comma, z_c_comma
>c479	63 2c				        .text "c,"
.c47b					nt_dnegate:
>c47b	07 10				        .byte 7, UF
>c47d	71 c4 31 8b 4b 8b		        .word nt_c_comma, xt_dnegate, z_dnegate
>c483	64 6e 65 67 61 74 65		        .text "dnegate"
.c48a					nt_negate:
>c48a	06 10				        .byte 6, UF
>c48c	7b c4 13 96 23 96		        .word nt_dnegate, xt_negate, z_negate
>c492	6e 65 67 61 74 65		        .text "negate"
.c498					nt_invert:
>c498	06 10				        .byte 6, UF
>c49a	8a c4 db 92 ea 92		        .word nt_negate, xt_invert, z_invert
>c4a0	69 6e 76 65 72 74		        .text "invert"
.c4a6					nt_two_to_r:
>c4a6	03 11				        .byte 3, CO+UF          ; native is special case
>c4a8	98 c4 1e a4 3d a4		        .word nt_invert, xt_two_to_r, z_two_to_r
>c4ae	32 3e 72			        .text "2>r"
.c4b1					nt_two_r_from:
>c4b1	03 01				        .byte 3, CO             ; native is special case
>c4b3	a6 c4 a4 a3 c0 a3		        .word nt_two_to_r, xt_two_r_from, z_two_r_from
>c4b9	32 72 3e			        .text "2r>"
.c4bc					nt_two_r_fetch:
>c4bc	03 09				        .byte 3, CO+NN          ; native is special case, leave NN for now
>c4be	b1 c4 86 a3 a3 a3		        .word nt_two_r_from, xt_two_r_fetch, z_two_r_fetch
>c4c4	32 72 40			        .text "2r@"
.c4c7					nt_two_literal:
>c4c7	08 14				        .byte 8, UF+IM
>c4c9	bc c4 63 a4 6f a4		        .word nt_two_r_fetch, xt_two_literal, z_two_literal
>c4cf	32 6c 69 74 65 72 61 6c		        .text "2literal"
.c4d7					nt_two_constant:
>c4d7	09 10				        .byte 9, UF
>c4d9	c7 c4 3e a4 62 a4		        .word nt_two_literal, xt_two_constant, z_two_constant
>c4df	32 63 6f 6e 73 74 61 6e		        .text "2constant"
>c4e7	74
.c4e8					nt_two_variable:
>c4e8	09 00				        .byte 9, 0
>c4ea	d7 c4 70 a4 7e a4		        .word nt_two_constant, xt_two_variable, z_two_variable
>c4f0	32 76 61 72 69 61 62 6c		        .text "2variable"
>c4f8	65
.c4f9					nt_two_fetch:
>c4f9	02 10				        .byte 2, UF
>c4fb	e8 c4 4c a3 6d a3		        .word nt_two_variable, xt_two_fetch, z_two_fetch
>c501	32 40				        .text "2@"
.c503					nt_two_store:
>c503	02 10				        .byte 2, UF
>c505	f9 c4 d4 a3 f9 a3		        .word nt_two_fetch, xt_two_store, z_two_store
>c50b	32 21				        .text "2!"
.c50d					nt_two_over:
>c50d	05 10				        .byte 5, UF
>c50f	03 c5 6e a3 85 a3		        .word nt_two_store, xt_two_over, z_two_over
>c515	32 6f 76 65 72			        .text "2over"
.c51a					nt_two_swap:
>c51a	05 10				        .byte 5, UF
>c51c	0d c5 fa a3 1d a4		        .word nt_two_over, xt_two_swap, z_two_swap
>c522	32 73 77 61 70			        .text "2swap"
.c527					nt_two_drop:
>c527	05 10				        .byte 5, UF
>c529	1a c5 2c a3 33 a3		        .word nt_two_swap, xt_two_drop, z_two_drop
>c52f	32 64 72 6f 70			        .text "2drop"
.c534					nt_max:
>c534	03 10				        .byte 3, UF
>c536	27 c5 08 95 23 95		        .word nt_two_drop, xt_max, z_max
>c53c	6d 61 78			        .text "max"
.c53f					nt_min:
>c53f	03 10				        .byte 3, UF
>c541	34 c5 24 95 3f 95		        .word nt_max, xt_min, z_min
>c547	6d 69 6e			        .text "min"
.c54a					nt_zero_less:
>c54a	02 10				        .byte 2, UF
>c54c	3f c5 52 a7 61 a7		        .word nt_min, xt_zero_less, z_zero_less
>c552	30 3c				        .text "0<"
.c554					nt_zero_greater:
>c554	02 10				        .byte 2, UF
>c556	4a c5 3e a7 51 a7		        .word nt_zero_less, xt_zero_greater, z_zero_greater
>c55c	30 3e				        .text "0>"
.c55e					nt_zero_unequal:
>c55e	03 10				        .byte 3, UF
>c560	54 c5 62 a7 73 a7		        .word nt_zero_greater, xt_zero_unequal, z_zero_unequal
>c566	30 3c 3e			        .text "0<>"
.c569					nt_zero_equal:
>c569	02 10				        .byte 2, UF
>c56b	5e c5 2a a7 3d a7		        .word nt_zero_unequal, xt_zero_equal, z_zero_equal
>c571	30 3d				        .text "0="
.c573					nt_greater_than:
>c573	01 10				        .byte 1, UF
>c575	69 c5 4d 91 61 91		        .word nt_zero_equal, xt_greater_than, z_greater_than
>c57b	3e				        .text ">"
.c57c					nt_u_greater_than:
>c57c	02 10				        .byte 2, UF
>c57e	73 c5 d8 a4 ed a4		        .word nt_greater_than, xt_u_greater_than, z_u_greater_than
>c584	75 3e				        .text "u>"
.c586					nt_u_less_than:
>c586	02 10				        .byte 2, UF
>c588	7c c5 ee a4 03 a5		        .word nt_u_greater_than, xt_u_less_than, z_u_less_than
>c58e	75 3c				        .text "u<"
.c590					nt_less_than:
>c590	01 10				        .byte 1, UF
>c592	86 c5 58 93 6c 93		        .word nt_u_less_than, xt_less_than, z_less_than
>c598	3c				        .text "<"
.c599					nt_not_equals:
>c599	02 10				        .byte 2, UF
>c59b	90 c5 40 96 5d 96		        .word nt_less_than, xt_not_equals, z_not_equals
>c5a1	3c 3e				        .text "<>"
.c5a3					nt_equal:
>c5a3	01 10				        .byte 1, UF
>c5a5	99 c5 be 8e d9 8e		        .word nt_not_equals, xt_equal, z_equal
>c5ab	3d				        .text "="
.c5ac					nt_two_slash:
>c5ac	02 10				        .byte 2, UF
>c5ae	a3 c5 c1 a3 cb a3		        .word nt_equal, xt_two_slash, z_two_slash
>c5b4	32 2f				        .text "2/"
.c5b6					nt_two_star:
>c5b6	02 10				        .byte 2, UF
>c5b8	ac c5 cc a3 d3 a3		        .word nt_two_slash, xt_two_star, z_two_star
>c5be	32 2a				        .text "2*"
.c5c0					nt_one_plus:
>c5c0	02 10				        .byte 2, UF
>c5c2	b6 c5 9f 97 a8 97		        .word nt_two_star, xt_one_plus, z_one_plus
>c5c8	31 2b				        .text "1+"
.c5ca					nt_one_minus:
>c5ca	02 10				        .byte 2, UF
>c5cc	c0 c5 93 97 9e 97		        .word nt_one_plus, xt_one_minus, z_one_minus
>c5d2	31 2d				        .text "1-"
.c5d4					nt_here:
>c5d4	04 00				        .byte 4, 0
>c5d6	ca c5 62 91 6c 91		        .word nt_one_minus, xt_here, z_here
>c5dc	68 65 72 65			        .text "here"
.c5e0					nt_cell_plus:
>c5e0	05 10				        .byte 5, UF
>c5e2	d4 c5 11 86 20 86		        .word nt_here, xt_cell_plus, z_cell_plus
>c5e8	63 65 6c 6c 2b			        .text "cell+"
.c5ed					nt_cells:
>c5ed	05 00				        .byte 5, 0
>c5ef	e0 c5 cc a3 d3 a3		        .word nt_cell_plus, xt_two_star, z_two_star  ; same as 2*
>c5f5	63 65 6c 6c 73			        .text "cells"
.c5fa					nt_chars:
>c5fa	05 12				        .byte 5, AN+UF   ; deleted during compile
>c5fc	ed c5 38 86 3b 86		        .word nt_cells, xt_chars, z_chars
>c602	63 68 61 72 73			        .text "chars"
.c607					nt_char_plus:
>c607	05 00				        .byte 5, 0
>c609	fa c5 9f 97 a8 97		        .word nt_chars, xt_one_plus, z_one_plus ; same as 1+
>c60f	63 68 61 72 2b			        .text "char+"
.c614					nt_bracket_char:
>c614	06 05				        .byte 6, CO+IM
>c616	07 c6 87 85 8d 85		        .word nt_char_plus, xt_bracket_char, z_bracket_char
>c61c	5b 63 68 61 72 5d		        .text "[char]"
.c622					nt_char:
>c622	04 00				        .byte 4, 0
>c624	14 c6 21 86 37 86		        .word nt_bracket_char, xt_char, z_char
>c62a	63 68 61 72			        .text "char"
.c62e					nt_pick:
>c62e	04 00				        .byte 4, 0    ; underflow check is complicated, leave off here
>c630	22 c6 54 99 64 99		        .word nt_char, xt_pick, z_pick
>c636	70 69 63 6b			        .text "pick"
.c63a					nt_lshift:
>c63a	06 10				        .byte 6, UF
>c63c	2e c6 6a 94 7d 94		        .word nt_pick, xt_lshift, z_lshift
>c642	6c 73 68 69 66 74		        .text "lshift"
.c648					nt_rshift:
>c648	06 10				        .byte 6, UF
>c64a	3a c6 f5 9a 08 9b		        .word nt_lshift, xt_rshift, z_rshift
>c650	72 73 68 69 66 74		        .text "rshift"
.c656					nt_xor:
>c656	03 10				        .byte 3, UF
>c658	48 c6 11 a7 22 a7		        .word nt_rshift, xt_xor, z_xor
>c65e	78 6f 72			        .text "xor"
.c661					nt_or:
>c661	02 10				        .byte 2, UF
>c663	56 c6 b5 97 c6 97		        .word nt_xor, xt_or, z_or
>c669	6f 72				        .text "or"
.c66b					nt_and:
>c66b	03 10				        .byte 3, UF
>c66d	61 c6 3e 83 4f 83		        .word nt_or, xt_and, z_and
>c673	61 6e 64			        .text "and"
.c676					nt_dabs:
>c676	04 10				        .byte 4, UF
>c678	6b c6 76 8a 94 8a		        .word nt_and, xt_dabs, z_dabs
>c67e	64 61 62 73			        .text "dabs"
.c682					nt_abs:
>c682	03 10				        .byte 3, UF
>c684	76 c6 39 81 4d 81		        .word nt_dabs, xt_abs, z_abs
>c68a	61 62 73			        .text "abs"
.c68d					nt_minus:
>c68d	01 10				        .byte 1, UF
>c68f	82 c6 40 95 52 95		        .word nt_abs, xt_minus, z_minus
>c695	2d				        .text "-"
.c696					nt_plus:
>c696	01 10				        .byte 1, UF
>c698	8d c6 65 99 77 99		        .word nt_minus, xt_plus, z_plus
>c69e	2b				        .text "+"
.c69f					nt_question_dup:
>c69f	04 10				        .byte 4, UF
>c6a1	96 c6 eb 99 fe 99		        .word nt_plus, xt_question_dup, z_question_dup
>c6a7	3f 64 75 70			        .text "?dup"
.c6ab					nt_two_dup:
>c6ab	04 10				        .byte 4, UF
>c6ad	9f c6 34 a3 4b a3		        .word nt_question_dup, xt_two_dup, z_two_dup
>c6b3	32 64 75 70			        .text "2dup"
.c6b7					nt_two:
>c6b7	01 00				        .byte 1, 0
>c6b9	ab c6 23 a3 2b a3		        .word nt_two_dup, xt_two, z_two
>c6bf	32				        .text "2"
.c6c0					nt_one:
>c6c0	01 00				        .byte 1, 0
>c6c2	b7 c6 8a 97 92 97		        .word nt_two, xt_one, z_one
>c6c8	31				        .text "1"
.c6c9					nt_zero:
>c6c9	01 00				        .byte 1, 0
>c6cb	c0 c6 23 a7 29 a7		        .word nt_one, xt_zero, z_zero
>c6d1	30				        .text "0"
.c6d2					nt_space:
>c6d2	05 00				        .byte 5, 0
>c6d4	c9 c6 a0 a0 a5 a0		        .word nt_zero, xt_space, z_space
>c6da	73 70 61 63 65			        .text "space"
.c6df					nt_true:
>c6df	04 00				        .byte 4, 0
>c6e1	d2 c6 00 a3 08 a3		        .word nt_space, xt_true, z_true
>c6e7	74 72 75 65			        .text "true"
.c6eb					nt_false:
>c6eb	05 00				        .byte 5, 0
>c6ed	df c6 69 8f 6f 8f		        .word nt_true, xt_false, z_false
>c6f3	66 61 6c 73 65			        .text "false"
.c6f8					nt_question:
>c6f8	01 00				        .byte 1, 0
>c6fa	eb c6 e4 99 ea 99		        .word nt_false, xt_question, z_question
>c700	3f				        .text "?"
.c701					nt_ud_dot_r:
>c701	04 10				        .byte 4, UF
>c703	f8 c6 17 a5 35 a5		        .word nt_question, xt_ud_dot_r, z_ud_dot_r
>c709	75 64 2e 72			        .text "ud.r"
.c70d					nt_ud_dot:
>c70d	03 10				        .byte 3, UF
>c70f	01 c7 04 a5 16 a5		        .word nt_ud_dot_r, xt_ud_dot, z_ud_dot
>c715	75 64 2e			        .text "ud."
.c718					nt_d_dot_r:
>c718	03 10				        .byte 3, UF
>c71a	0d c7 f3 8c 1d 8d		        .word nt_ud_dot, xt_d_dot_r, z_d_dot_r
>c720	64 2e 72			        .text "d.r"
.c723					nt_d_dot:
>c723	02 10				        .byte 2, UF
>c725	18 c7 d4 8c f2 8c		        .word nt_d_dot_r, xt_d_dot, z_d_dot
>c72b	64 2e				        .text "d."
.c72d					nt_dot_r:
>c72d	02 10				        .byte 2, UF
>c72f	23 c7 62 8c 8f 8c		        .word nt_d_dot, xt_dot_r, z_dot_r
>c735	2e 72				        .text ".r"
.c737					nt_u_dot_r:
>c737	03 10				        .byte 3, UF
>c739	2d c7 b6 a4 d7 a4		        .word nt_dot_r, xt_u_dot_r, z_u_dot_r
>c73f	75 2e 72			        .text "u.r"
.c742					nt_u_dot:
>c742	02 10				        .byte 2, UF
>c744	37 c7 aa a4 b5 a4		        .word nt_u_dot_r, xt_u_dot, z_u_dot
>c74a	75 2e				        .text "u."
.c74c					nt_dot:
>c74c	01 10				        .byte 1, UF
>c74e	42 c7 26 8c 47 8c		        .word nt_u_dot, xt_dot, z_dot
>c754	2e				        .text "."
.c755					nt_type:
>c755	04 10				        .byte 4, UF
>c757	4c c7 7f a4 a9 a4		        .word nt_dot, xt_type, z_type
>c75d	74 79 70 65			        .text "type"
.c761					nt_emit:
>c761	04 18				        .byte 4, NN+UF
>c763	55 c7 df 8d e9 8d		        .word nt_type, xt_emit, z_emit
>c769	65 6d 69 74			        .text "emit"
.c76d					nt_execute:
>c76d	07 10				        .byte 7, UF
>c76f	61 c7 2d 8f 33 8f		        .word nt_emit, xt_execute, z_execute
>c775	65 78 65 63 75 74 65		        .text "execute"
.c77c					nt_plus_store:
>c77c	02 10				        .byte 2, UF
>c77e	6d c7 78 99 97 99		        .word nt_execute, xt_plus_store, z_plus_store
>c784	2b 21				        .text "+!"
.c786					nt_c_store:
>c786	02 10				        .byte 2, UF
>c788	7c c7 05 86 10 86		        .word nt_plus_store, xt_c_store, z_c_store
>c78e	63 21				        .text "c!"
.c790					nt_c_fetch:
>c790	02 10				        .byte 2, UF
>c792	86 c7 fb 85 04 86		        .word nt_c_store, xt_c_fetch, z_c_fetch
>c798	63 40				        .text "c@"
.c79a					nt_comma:
>c79a	01 10				        .byte 1, UF
>c79c	90 c7 5e 87 77 87		        .word nt_c_fetch, xt_comma, z_comma
>c7a2	2c				        .text ","
.c7a3					nt_tuck:
>c7a3	04 10				        .byte 4, UF
>c7a5	9a c7 09 a3 22 a3		        .word nt_comma, xt_tuck, z_tuck
>c7ab	74 75 63 6b			        .text "tuck"
.c7af					nt_not_rote:
>c7af	04 10				        .byte 4, UF
>c7b1	a3 c7 5e 96 79 96		        .word nt_tuck, xt_not_rote, z_not_rote
>c7b7	2d 72 6f 74			        .text "-rot"
.c7bb					nt_rot:
>c7bb	03 10				        .byte 3, UF
>c7bd	af c7 d9 9a f4 9a		        .word nt_not_rote, xt_rot, z_rot
>c7c3	72 6f 74			        .text "rot"
.c7c6					nt_nip:
>c7c6	03 10				        .byte 3, UF
>c7c8	bb c7 32 96 3f 96		        .word nt_rot, xt_nip, z_nip
>c7ce	6e 69 70			        .text "nip"
.c7d1					nt_r_fetch:
>c7d1	02 01				        .byte 2, CO    ; native is special case
>c7d3	c6 c7 ff 99 13 9a		        .word nt_nip, xt_r_fetch, z_r_fetch
>c7d9	72 40				        .text "r@"
.c7db					nt_r_from:
>c7db	02 01				        .byte 2, CO    ; native is special case
>c7dd	d1 c7 14 9a 24 9a		        .word nt_r_fetch, xt_r_from, z_r_from
>c7e3	72 3e				        .text "r>"
.c7e5					nt_to_r:
>c7e5	02 11				        .byte 2, CO+UF ; native is special case
>c7e7	db c7 ec a2 ff a2		        .word nt_r_from, xt_to_r, z_to_r
>c7ed	3e 72				        .text ">r"
.c7ef					nt_over:
>c7ef	04 10				        .byte 4, UF
>c7f1	e5 c7 15 98 22 98		        .word nt_to_r, xt_over, z_over
>c7f7	6f 76 65 72			        .text "over"
.c7fb					nt_fetch:
>c7fb	01 10				        .byte 1, UF
>c7fd	ef c7 70 8f 82 8f		        .word nt_over, xt_fetch, z_fetch
>c803	40				        .text "@"
.c804					nt_store:
>c804	01 10				        .byte 1, UF
>c806	fb c7 09 a1 1e a1		        .word nt_fetch, xt_store, z_store
>c80c	21				        .text "!"
.c80d					nt_swap:
>c80d	04 10				        .byte 4, UF
>c80f	04 c8 2a a1 3d a1		        .word nt_store, xt_swap, z_swap
>c815	73 77 61 70			        .text "swap"
.c819					nt_dup:
>c819	03 10				        .byte 3, UF
>c81b	0d c8 9f 8d ac 8d		        .word nt_swap, xt_dup, z_dup
>c821	64 75 70			        .text "dup"
.c824					dictionary_start:
.c824					nt_drop:
>c824	04 10				        .byte 4, UF
>c826	19 c8 1e 8d 23 8d		        .word nt_dup, xt_drop, z_drop
>c82c	64 72 6f 70			        .text "drop"
.c830					nt_root_words:
>c830	05 00				        .byte 5, 0
>c832	00 00 94 a6 ef a6		        .word 0000, xt_words, z_words
>c838	77 6f 72 64 73			        .text "words"
.c83d					nt_root_forth_wordlist:
>c83d	0e 00				        .byte 14, 0
>c83f	30 c8 23 a7 29 a7		        .word nt_root_words, xt_forth_wordlist, z_forth_wordlist
>c845	66 6f 72 74 68 2d 77 6f		        .text "forth-wordlist"
>c84d	72 64 6c 69 73 74
.c853					nt_root_forth:
>c853	05 00				        .byte 5, 0
>c855	3d c8 b8 90 be 90		        .word nt_root_forth_wordlist, xt_forth, z_forth
>c85b	66 6f 72 74 68			        .text "forth"
.c860					root_dictionary_start:
.c860					nt_root_set_order:
>c860	09 00				        .byte 9, 0
>c862	53 c8 9d 9c d0 9c		        .word nt_root_forth, xt_set_order, z_set_order
>c868	73 65 74 2d 6f 72 64 65		        .text "set-order"
>c870	72
.c871					nt_editor_enter_screen:
>c871	0c 00				        .byte 12, 0
>c873	00 00 81 a7 9c a7		        .word 0000, xt_editor_enter_screen, z_editor_enter_screen
>c879	65 6e 74 65 72 2d 73 63		        .text "enter-screen"
>c881	72 65 65 6e
.c885					nt_editor_erase_screen:
>c885	0c 00				        .byte 12, 0
>c887	71 c8 9d a7 ae a7		        .word nt_editor_enter_screen, xt_editor_erase_screen, z_editor_erase_screen
>c88d	65 72 61 73 65 2d 73 63		        .text "erase-screen"
>c895	72 65 65 6e
.c899					nt_editor_el:
>c899	02 00				        .byte 2, 0
>c89b	85 c8 af a7 c0 a7		        .word nt_editor_erase_screen, xt_editor_el, z_editor_el
>c8a1	65 6c				        .text "el"
.c8a3					nt_editor_l:
>c8a3	01 00				        .byte 1, 0
>c8a5	99 c8 c1 a7 3c a8		        .word nt_editor_el, xt_editor_l, z_editor_l
>c8ab	6c				        .text "l"
.c8ac					nt_editor_line:
>c8ac	04 10				        .byte 4, UF
>c8ae	a3 c8 3d a8 55 a8		        .word nt_editor_l, xt_editor_line, z_editor_line
>c8b4	6c 69 6e 65			        .text "line"
.c8b8					editor_dictionary_start:
.c8b8					nt_editor_o:
>c8b8	01 00				        .byte 1, 0
>c8ba	ac c8 56 a8 9b a8		        .word nt_editor_line, xt_editor_o, z_editor_o
>c8c0	6f				        .text "o"
.c8c1					assembler_dictionary_start:
.c8c1					nt_asm_adc_h:
>c8c1	05 04						.byte 5, IM
>c8c3	ce c8				                .word nt_asm_adc_x
>c8c5	9c a8 a1 a8					.word xt_asm_adc_h, z_asm_adc_h
>c8c9	61 64 63 2e 23					.text "adc.#"
.c8ce					nt_asm_adc_x:
>c8ce	05 04						.byte 5, IM
>c8d0	db c8				                .word nt_asm_adc_y
>c8d2	a1 a8 a6 a8					.word xt_asm_adc_x, z_asm_adc_x
>c8d6	61 64 63 2e 78					.text "adc.x"
.c8db					nt_asm_adc_y:
>c8db	05 04						.byte 5, IM
>c8dd	e8 c8				                .word nt_asm_adc_z
>c8df	a6 a8 ab a8					.word xt_asm_adc_y, z_asm_adc_y
>c8e3	61 64 63 2e 79					.text "adc.y"
.c8e8					nt_asm_adc_z:
>c8e8	05 04						.byte 5, IM
>c8ea	f5 c8				                .word nt_asm_adc_zi
>c8ec	ab a8 b0 a8					.word xt_asm_adc_z, z_asm_adc_z
>c8f0	61 64 63 2e 7a					.text "adc.z"
.c8f5					nt_asm_adc_zi:
>c8f5	06 04						.byte 6, IM
>c8f7	03 c9				                .word nt_asm_adc_ziy
>c8f9	b0 a8 b5 a8					.word xt_asm_adc_zi, z_asm_adc_zi
>c8fd	61 64 63 2e 7a 69				.text "adc.zi"
.c903					nt_asm_adc_ziy:
>c903	07 04						.byte 7, IM
>c905	12 c9				                .word nt_asm_adc_zx
>c907	b5 a8 ba a8					.word xt_asm_adc_ziy, z_asm_adc_ziy
>c90b	61 64 63 2e 7a 69 79				.text "adc.ziy"
.c912					nt_asm_adc_zx:
>c912	06 04						.byte 6, IM
>c914	20 c9				                .word nt_asm_adc_zxi
>c916	ba a8 bf a8					.word xt_asm_adc_zx, z_asm_adc_zx
>c91a	61 64 63 2e 7a 78				.text "adc.zx"
.c920					nt_asm_adc_zxi:
>c920	07 04						.byte 7, IM
>c922	2f c9				                .word nt_asm_and
>c924	bf a8 c4 a8					.word xt_asm_adc_zxi, z_asm_adc_zxi
>c928	61 64 63 2e 7a 78 69				.text "adc.zxi"
.c92f					nt_asm_and:
>c92f	04 04						.byte 4, IM
>c931	3b c9				                .word nt_asm_and_h
>c933	c4 a8 c9 a8					.word xt_asm_and, z_asm_and
>c937	61 6e 64 2e					.text "and."
.c93b					nt_asm_and_h:
>c93b	05 04						.byte 5, IM
>c93d	48 c9				                .word nt_asm_and_x
>c93f	c9 a8 ce a8					.word xt_asm_and_h, z_asm_and_h
>c943	61 6e 64 2e 23					.text "and.#"
.c948					nt_asm_and_x:
>c948	05 04						.byte 5, IM
>c94a	55 c9				                .word nt_asm_and_y
>c94c	ce a8 d3 a8					.word xt_asm_and_x, z_asm_and_x
>c950	61 6e 64 2e 78					.text "and.x"
.c955					nt_asm_and_y:
>c955	05 04						.byte 5, IM
>c957	62 c9				                .word nt_asm_and_z
>c959	d3 a8 d8 a8					.word xt_asm_and_y, z_asm_and_y
>c95d	61 6e 64 2e 79					.text "and.y"
.c962					nt_asm_and_z:
>c962	05 04						.byte 5, IM
>c964	6f c9				                .word nt_asm_and_zi
>c966	d8 a8 dd a8					.word xt_asm_and_z, z_asm_and_z
>c96a	61 6e 64 2e 7a					.text "and.z"
.c96f					nt_asm_and_zi:
>c96f	06 04						.byte 6, IM
>c971	7d c9				                .word nt_asm_and_ziy
>c973	dd a8 e2 a8					.word xt_asm_and_zi, z_asm_and_zi
>c977	61 6e 64 2e 7a 69				.text "and.zi"
.c97d					nt_asm_and_ziy:
>c97d	07 04						.byte 7, IM
>c97f	8c c9				                .word nt_asm_and_zx
>c981	e2 a8 e7 a8					.word xt_asm_and_ziy, z_asm_and_ziy
>c985	61 6e 64 2e 7a 69 79				.text "and.ziy"
.c98c					nt_asm_and_zx:
>c98c	06 04						.byte 6, IM
>c98e	9a c9				                .word nt_asm_and_zxi
>c990	e7 a8 ec a8					.word xt_asm_and_zx, z_asm_and_zx
>c994	61 6e 64 2e 7a 78				.text "and.zx"
.c99a					nt_asm_and_zxi:
>c99a	07 04						.byte 7, IM
>c99c	a9 c9				                .word nt_asm_asl
>c99e	ec a8 f1 a8					.word xt_asm_and_zxi, z_asm_and_zxi
>c9a2	61 6e 64 2e 7a 78 69				.text "and.zxi"
.c9a9					nt_asm_asl:
>c9a9	03 04						.byte 3, IM
>c9ab	b4 c9				                .word nt_asm_asl_a
>c9ad	f1 a8 f6 a8					.word xt_asm_asl, z_asm_asl
>c9b1	61 73 6c					.text "asl"
.c9b4					nt_asm_asl_a:
>c9b4	05 04						.byte 5, IM
>c9b6	c1 c9				                .word nt_asm_asl_x
>c9b8	f6 a8 fb a8					.word xt_asm_asl_a, z_asm_asl_a
>c9bc	61 73 6c 2e 61					.text "asl.a"
.c9c1					nt_asm_asl_x:
>c9c1	05 04						.byte 5, IM
>c9c3	ce c9				                .word nt_asm_asl_z
>c9c5	fb a8 00 a9					.word xt_asm_asl_x, z_asm_asl_x
>c9c9	61 73 6c 2e 78					.text "asl.x"
.c9ce					nt_asm_asl_z:
>c9ce	05 04						.byte 5, IM
>c9d0	db c9				                .word nt_asm_asl_zx
>c9d2	00 a9 05 a9					.word xt_asm_asl_z, z_asm_asl_z
>c9d6	61 73 6c 2e 7a					.text "asl.z"
.c9db					nt_asm_asl_zx:
>c9db	06 04						.byte 6, IM
>c9dd	e9 c9				                .word nt_asm_bcc
>c9df	05 a9 0a a9					.word xt_asm_asl_zx, z_asm_asl_zx
>c9e3	61 73 6c 2e 7a 78				.text "asl.zx"
.c9e9					nt_asm_bcc:
>c9e9	03 04						.byte 3, IM
>c9eb	f4 c9				                .word nt_asm_bcs
>c9ed	0a a9 0f a9					.word xt_asm_bcc, z_asm_bcc
>c9f1	62 63 63					.text "bcc"
.c9f4					nt_asm_bcs:
>c9f4	03 04						.byte 3, IM
>c9f6	ff c9				                .word nt_asm_beq
>c9f8	0f a9 16 a9					.word xt_asm_bcs, z_asm_bcs
>c9fc	62 63 73					.text "bcs"
.c9ff					nt_asm_beq:
>c9ff	03 04						.byte 3, IM
>ca01	0a ca				                .word nt_asm_bit
>ca03	16 a9 1b a9					.word xt_asm_beq, z_asm_beq
>ca07	62 65 71					.text "beq"
.ca0a					nt_asm_bit:
>ca0a	03 04						.byte 3, IM
>ca0c	15 ca				                .word nt_asm_bit_h
>ca0e	1b a9 20 a9					.word xt_asm_bit, z_asm_bit
>ca12	62 69 74					.text "bit"
.ca15					nt_asm_bit_h:
>ca15	05 04						.byte 5, IM
>ca17	22 ca				                .word nt_asm_bit_x
>ca19	20 a9 25 a9					.word xt_asm_bit_h, z_asm_bit_h
>ca1d	62 69 74 2e 23					.text "bit.#"
.ca22					nt_asm_bit_x:
>ca22	05 04						.byte 5, IM
>ca24	2f ca				                .word nt_asm_bit_z
>ca26	25 a9 2a a9					.word xt_asm_bit_x, z_asm_bit_x
>ca2a	62 69 74 2e 78					.text "bit.x"
.ca2f					nt_asm_bit_z:
>ca2f	05 04						.byte 5, IM
>ca31	3c ca				                .word nt_asm_bit_zx
>ca33	2a a9 2f a9					.word xt_asm_bit_z, z_asm_bit_z
>ca37	62 69 74 2e 7a					.text "bit.z"
.ca3c					nt_asm_bit_zx:
>ca3c	06 04						.byte 6, IM
>ca3e	4a ca				                .word nt_asm_bmi
>ca40	2f a9 34 a9					.word xt_asm_bit_zx, z_asm_bit_zx
>ca44	62 69 74 2e 7a 78				.text "bit.zx"
.ca4a					nt_asm_bmi:
>ca4a	03 04						.byte 3, IM
>ca4c	55 ca				                .word nt_asm_bne
>ca4e	34 a9 39 a9					.word xt_asm_bmi, z_asm_bmi
>ca52	62 6d 69					.text "bmi"
.ca55					nt_asm_bne:
>ca55	03 04						.byte 3, IM
>ca57	60 ca				                .word nt_asm_bpl
>ca59	39 a9 3e a9					.word xt_asm_bne, z_asm_bne
>ca5d	62 6e 65					.text "bne"
.ca60					nt_asm_bpl:
>ca60	03 04						.byte 3, IM
>ca62	6b ca				                .word nt_asm_bra
>ca64	3e a9 43 a9					.word xt_asm_bpl, z_asm_bpl
>ca68	62 70 6c					.text "bpl"
.ca6b					nt_asm_bra:
>ca6b	03 04						.byte 3, IM
>ca6d	76 ca				                .word nt_asm_brk
>ca6f	43 a9 48 a9					.word xt_asm_bra, z_asm_bra
>ca73	62 72 61					.text "bra"
.ca76					nt_asm_brk:
>ca76	03 04						.byte 3, IM
>ca78	81 ca				                .word nt_asm_bvc
>ca7a	48 a9 4d a9					.word xt_asm_brk, z_asm_brk
>ca7e	62 72 6b					.text "brk"
.ca81					nt_asm_bvc:
>ca81	03 04						.byte 3, IM
>ca83	8c ca				                .word nt_asm_bvs
>ca85	4d a9 52 a9					.word xt_asm_bvc, z_asm_bvc
>ca89	62 76 63					.text "bvc"
.ca8c					nt_asm_bvs:
>ca8c	03 04						.byte 3, IM
>ca8e	97 ca				                .word nt_asm_clc
>ca90	52 a9 57 a9					.word xt_asm_bvs, z_asm_bvs
>ca94	62 76 73					.text "bvs"
.ca97					nt_asm_clc:
>ca97	03 04						.byte 3, IM
>ca99	a2 ca				                .word nt_asm_cld
>ca9b	57 a9 5c a9					.word xt_asm_clc, z_asm_clc
>ca9f	63 6c 63					.text "clc"
.caa2					nt_asm_cld:
>caa2	03 04						.byte 3, IM
>caa4	ad ca				                .word nt_asm_cli
>caa6	5c a9 61 a9					.word xt_asm_cld, z_asm_cld
>caaa	63 6c 64					.text "cld"
.caad					nt_asm_cli:
>caad	03 04						.byte 3, IM
>caaf	b8 ca				                .word nt_asm_clv
>cab1	61 a9 66 a9					.word xt_asm_cli, z_asm_cli
>cab5	63 6c 69					.text "cli"
.cab8					nt_asm_clv:
>cab8	03 04						.byte 3, IM
>caba	c3 ca				                .word nt_asm_cmp
>cabc	66 a9 6b a9					.word xt_asm_clv, z_asm_clv
>cac0	63 6c 76					.text "clv"
.cac3					nt_asm_cmp:
>cac3	03 04						.byte 3, IM
>cac5	ce ca				                .word nt_asm_cmp_h
>cac7	6b a9 70 a9					.word xt_asm_cmp, z_asm_cmp
>cacb	63 6d 70					.text "cmp"
.cace					nt_asm_cmp_h:
>cace	05 04						.byte 5, IM
>cad0	db ca				                .word nt_asm_cmp_x
>cad2	70 a9 75 a9					.word xt_asm_cmp_h, z_asm_cmp_h
>cad6	63 6d 70 2e 23					.text "cmp.#"
.cadb					nt_asm_cmp_x:
>cadb	05 04						.byte 5, IM
>cadd	e8 ca				                .word nt_asm_cmp_y
>cadf	75 a9 7a a9					.word xt_asm_cmp_x, z_asm_cmp_x
>cae3	63 6d 70 2e 78					.text "cmp.x"
.cae8					nt_asm_cmp_y:
>cae8	05 04						.byte 5, IM
>caea	f5 ca				                .word nt_asm_cmp_z
>caec	7a a9 7f a9					.word xt_asm_cmp_y, z_asm_cmp_y
>caf0	63 6d 70 2e 79					.text "cmp.y"
.caf5					nt_asm_cmp_z:
>caf5	05 04						.byte 5, IM
>caf7	02 cb				                .word nt_asm_cmp_zi
>caf9	7f a9 84 a9					.word xt_asm_cmp_z, z_asm_cmp_z
>cafd	63 6d 70 2e 7a					.text "cmp.z"
.cb02					nt_asm_cmp_zi:
>cb02	06 04						.byte 6, IM
>cb04	10 cb				                .word nt_asm_cmp_ziy
>cb06	84 a9 89 a9					.word xt_asm_cmp_zi, z_asm_cmp_zi
>cb0a	63 6d 70 2e 7a 69				.text "cmp.zi"
.cb10					nt_asm_cmp_ziy:
>cb10	07 04						.byte 7, IM
>cb12	1f cb				                .word nt_asm_cmp_zx
>cb14	89 a9 8e a9					.word xt_asm_cmp_ziy, z_asm_cmp_ziy
>cb18	63 6d 70 2e 7a 69 79				.text "cmp.ziy"
.cb1f					nt_asm_cmp_zx:
>cb1f	06 04						.byte 6, IM
>cb21	2d cb				                .word nt_asm_cmp_zxi
>cb23	8e a9 93 a9					.word xt_asm_cmp_zx, z_asm_cmp_zx
>cb27	63 6d 70 2e 7a 78				.text "cmp.zx"
.cb2d					nt_asm_cmp_zxi:
>cb2d	07 04						.byte 7, IM
>cb2f	3c cb				                .word nt_asm_cpx
>cb31	93 a9 98 a9					.word xt_asm_cmp_zxi, z_asm_cmp_zxi
>cb35	63 6d 70 2e 7a 78 69				.text "cmp.zxi"
.cb3c					nt_asm_cpx:
>cb3c	03 04						.byte 3, IM
>cb3e	47 cb				                .word nt_asm_cpx_h
>cb40	98 a9 9d a9					.word xt_asm_cpx, z_asm_cpx
>cb44	63 70 78					.text "cpx"
.cb47					nt_asm_cpx_h:
>cb47	05 04						.byte 5, IM
>cb49	54 cb				                .word nt_asm_cpx_z
>cb4b	9d a9 a2 a9					.word xt_asm_cpx_h, z_asm_cpx_h
>cb4f	63 70 78 2e 23					.text "cpx.#"
.cb54					nt_asm_cpx_z:
>cb54	05 04						.byte 5, IM
>cb56	61 cb				                .word nt_asm_cpy
>cb58	a2 a9 a7 a9					.word xt_asm_cpx_z, z_asm_cpx_z
>cb5c	63 70 78 2e 7a					.text "cpx.z"
.cb61					nt_asm_cpy:
>cb61	03 04						.byte 3, IM
>cb63	6c cb				                .word nt_asm_cpy_h
>cb65	a7 a9 ae a9					.word xt_asm_cpy, z_asm_cpy
>cb69	63 70 79					.text "cpy"
.cb6c					nt_asm_cpy_h:
>cb6c	05 04						.byte 5, IM
>cb6e	79 cb				                .word nt_asm_cpy_z
>cb70	ae a9 b3 a9					.word xt_asm_cpy_h, z_asm_cpy_h
>cb74	63 70 79 2e 23					.text "cpy.#"
.cb79					nt_asm_cpy_z:
>cb79	05 04						.byte 5, IM
>cb7b	86 cb				                .word nt_asm_dec
>cb7d	b3 a9 b8 a9					.word xt_asm_cpy_z, z_asm_cpy_z
>cb81	63 70 79 2e 7a					.text "cpy.z"
.cb86					nt_asm_dec:
>cb86	03 04						.byte 3, IM
>cb88	91 cb				                .word nt_asm_dec_a
>cb8a	b8 a9 bd a9					.word xt_asm_dec, z_asm_dec
>cb8e	64 65 63					.text "dec"
.cb91					nt_asm_dec_a:
>cb91	05 04						.byte 5, IM
>cb93	9e cb				                .word nt_asm_dec_x
>cb95	bd a9 c2 a9					.word xt_asm_dec_a, z_asm_dec_a
>cb99	64 65 63 2e 61					.text "dec.a"
.cb9e					nt_asm_dec_x:
>cb9e	05 04						.byte 5, IM
>cba0	ab cb				                .word nt_asm_dec_z
>cba2	c2 a9 c7 a9					.word xt_asm_dec_x, z_asm_dec_x
>cba6	64 65 63 2e 78					.text "dec.x"
.cbab					nt_asm_dec_z:
>cbab	05 04						.byte 5, IM
>cbad	b8 cb				                .word nt_asm_dec_zx
>cbaf	c7 a9 cc a9					.word xt_asm_dec_z, z_asm_dec_z
>cbb3	64 65 63 2e 7a					.text "dec.z"
.cbb8					nt_asm_dec_zx:
>cbb8	06 04						.byte 6, IM
>cbba	c6 cb				                .word nt_asm_dex
>cbbc	cc a9 d1 a9					.word xt_asm_dec_zx, z_asm_dec_zx
>cbc0	64 65 63 2e 7a 78				.text "dec.zx"
.cbc6					nt_asm_dex:
>cbc6	03 04						.byte 3, IM
>cbc8	d1 cb				                .word nt_asm_dey
>cbca	d1 a9 d6 a9					.word xt_asm_dex, z_asm_dex
>cbce	64 65 78					.text "dex"
.cbd1					nt_asm_dey:
>cbd1	03 04						.byte 3, IM
>cbd3	dc cb				                .word nt_asm_eor
>cbd5	d6 a9 db a9					.word xt_asm_dey, z_asm_dey
>cbd9	64 65 79					.text "dey"
.cbdc					nt_asm_eor:
>cbdc	03 04						.byte 3, IM
>cbde	e7 cb				                .word nt_asm_eor_h
>cbe0	db a9 e0 a9					.word xt_asm_eor, z_asm_eor
>cbe4	65 6f 72					.text "eor"
.cbe7					nt_asm_eor_h:
>cbe7	05 04						.byte 5, IM
>cbe9	f4 cb				                .word nt_asm_eor_x
>cbeb	e0 a9 e5 a9					.word xt_asm_eor_h, z_asm_eor_h
>cbef	65 6f 72 2e 23					.text "eor.#"
.cbf4					nt_asm_eor_x:
>cbf4	05 04						.byte 5, IM
>cbf6	01 cc				                .word nt_asm_eor_y
>cbf8	e5 a9 ea a9					.word xt_asm_eor_x, z_asm_eor_x
>cbfc	65 6f 72 2e 78					.text "eor.x"
.cc01					nt_asm_eor_y:
>cc01	05 04						.byte 5, IM
>cc03	0e cc				                .word nt_asm_eor_z
>cc05	ea a9 ef a9					.word xt_asm_eor_y, z_asm_eor_y
>cc09	65 6f 72 2e 79					.text "eor.y"
.cc0e					nt_asm_eor_z:
>cc0e	05 04						.byte 5, IM
>cc10	1b cc				                .word nt_asm_eor_zi
>cc12	ef a9 f4 a9					.word xt_asm_eor_z, z_asm_eor_z
>cc16	65 6f 72 2e 7a					.text "eor.z"
.cc1b					nt_asm_eor_zi:
>cc1b	06 04						.byte 6, IM
>cc1d	29 cc				                .word nt_asm_eor_ziy
>cc1f	f4 a9 f9 a9					.word xt_asm_eor_zi, z_asm_eor_zi
>cc23	65 6f 72 2e 7a 69				.text "eor.zi"
.cc29					nt_asm_eor_ziy:
>cc29	07 04						.byte 7, IM
>cc2b	38 cc				                .word nt_asm_eor_zx
>cc2d	f9 a9 fe a9					.word xt_asm_eor_ziy, z_asm_eor_ziy
>cc31	65 6f 72 2e 7a 69 79				.text "eor.ziy"
.cc38					nt_asm_eor_zx:
>cc38	06 04						.byte 6, IM
>cc3a	46 cc				                .word nt_asm_eor_zxi
>cc3c	fe a9 03 aa					.word xt_asm_eor_zx, z_asm_eor_zx
>cc40	65 6f 72 2e 7a 78				.text "eor.zx"
.cc46					nt_asm_eor_zxi:
>cc46	07 04						.byte 7, IM
>cc48	55 cc				                .word nt_asm_inc
>cc4a	03 aa 08 aa					.word xt_asm_eor_zxi, z_asm_eor_zxi
>cc4e	65 6f 72 2e 7a 78 69				.text "eor.zxi"
.cc55					nt_asm_inc:
>cc55	03 04						.byte 3, IM
>cc57	60 cc				                .word nt_asm_inc_a
>cc59	08 aa 0d aa					.word xt_asm_inc, z_asm_inc
>cc5d	69 6e 63					.text "inc"
.cc60					nt_asm_inc_a:
>cc60	05 04						.byte 5, IM
>cc62	6d cc				                .word nt_asm_inc_x
>cc64	0d aa 12 aa					.word xt_asm_inc_a, z_asm_inc_a
>cc68	69 6e 63 2e 61					.text "inc.a"
.cc6d					nt_asm_inc_x:
>cc6d	05 04						.byte 5, IM
>cc6f	7a cc				                .word nt_asm_inc_z
>cc71	12 aa 17 aa					.word xt_asm_inc_x, z_asm_inc_x
>cc75	69 6e 63 2e 78					.text "inc.x"
.cc7a					nt_asm_inc_z:
>cc7a	05 04						.byte 5, IM
>cc7c	87 cc				                .word nt_asm_inc_zx
>cc7e	17 aa 1c aa					.word xt_asm_inc_z, z_asm_inc_z
>cc82	69 6e 63 2e 7a					.text "inc.z"
.cc87					nt_asm_inc_zx:
>cc87	06 04						.byte 6, IM
>cc89	95 cc				                .word nt_asm_inx
>cc8b	1c aa 21 aa					.word xt_asm_inc_zx, z_asm_inc_zx
>cc8f	69 6e 63 2e 7a 78				.text "inc.zx"
.cc95					nt_asm_inx:
>cc95	03 04						.byte 3, IM
>cc97	a0 cc				                .word nt_asm_iny
>cc99	21 aa 26 aa					.word xt_asm_inx, z_asm_inx
>cc9d	69 6e 78					.text "inx"
.cca0					nt_asm_iny:
>cca0	03 04						.byte 3, IM
>cca2	ab cc				                .word nt_asm_jmp
>cca4	26 aa 2b aa					.word xt_asm_iny, z_asm_iny
>cca8	69 6e 79					.text "iny"
.ccab					nt_asm_jmp:
>ccab	03 04						.byte 3, IM
>ccad	b6 cc				                .word nt_asm_jmp_i
>ccaf	2b aa 30 aa					.word xt_asm_jmp, z_asm_jmp
>ccb3	6a 6d 70					.text "jmp"
.ccb6					nt_asm_jmp_i:
>ccb6	05 04						.byte 5, IM
>ccb8	c3 cc				                .word nt_asm_jmp_xi
>ccba	30 aa 35 aa					.word xt_asm_jmp_i, z_asm_jmp_i
>ccbe	6a 6d 70 2e 69					.text "jmp.i"
.ccc3					nt_asm_jmp_xi:
>ccc3	06 04						.byte 6, IM
>ccc5	d1 cc				                .word nt_asm_jsr
>ccc7	35 aa 3a aa					.word xt_asm_jmp_xi, z_asm_jmp_xi
>cccb	6a 6d 70 2e 78 69				.text "jmp.xi"
.ccd1					nt_asm_jsr:
>ccd1	03 04						.byte 3, IM
>ccd3	dc cc				                .word nt_asm_lda
>ccd5	3a aa 3f aa					.word xt_asm_jsr, z_asm_jsr
>ccd9	6a 73 72					.text "jsr"
.ccdc					nt_asm_lda:
>ccdc	03 04						.byte 3, IM
>ccde	e7 cc				                .word nt_asm_lda_h
>cce0	3f aa 44 aa					.word xt_asm_lda, z_asm_lda
>cce4	6c 64 61					.text "lda"
.cce7					nt_asm_lda_h:
>cce7	05 04						.byte 5, IM
>cce9	f4 cc				                .word nt_asm_lda_x
>cceb	44 aa 49 aa					.word xt_asm_lda_h, z_asm_lda_h
>ccef	6c 64 61 2e 23					.text "lda.#"
.ccf4					nt_asm_lda_x:
>ccf4	05 04						.byte 5, IM
>ccf6	01 cd				                .word nt_asm_lda_y
>ccf8	49 aa 4e aa					.word xt_asm_lda_x, z_asm_lda_x
>ccfc	6c 64 61 2e 78					.text "lda.x"
.cd01					nt_asm_lda_y:
>cd01	05 04						.byte 5, IM
>cd03	0e cd				                .word nt_asm_lda_z
>cd05	4e aa 53 aa					.word xt_asm_lda_y, z_asm_lda_y
>cd09	6c 64 61 2e 79					.text "lda.y"
.cd0e					nt_asm_lda_z:
>cd0e	05 04						.byte 5, IM
>cd10	1b cd				                .word nt_asm_lda_zi
>cd12	53 aa 58 aa					.word xt_asm_lda_z, z_asm_lda_z
>cd16	6c 64 61 2e 7a					.text "lda.z"
.cd1b					nt_asm_lda_zi:
>cd1b	06 04						.byte 6, IM
>cd1d	29 cd				                .word nt_asm_lda_ziy
>cd1f	58 aa 5d aa					.word xt_asm_lda_zi, z_asm_lda_zi
>cd23	6c 64 61 2e 7a 69				.text "lda.zi"
.cd29					nt_asm_lda_ziy:
>cd29	07 04						.byte 7, IM
>cd2b	38 cd				                .word nt_asm_lda_zx
>cd2d	5d aa 62 aa					.word xt_asm_lda_ziy, z_asm_lda_ziy
>cd31	6c 64 61 2e 7a 69 79				.text "lda.ziy"
.cd38					nt_asm_lda_zx:
>cd38	06 04						.byte 6, IM
>cd3a	46 cd				                .word nt_asm_lda_zxi
>cd3c	62 aa 67 aa					.word xt_asm_lda_zx, z_asm_lda_zx
>cd40	6c 64 61 2e 7a 78				.text "lda.zx"
.cd46					nt_asm_lda_zxi:
>cd46	07 04						.byte 7, IM
>cd48	55 cd				                .word nt_asm_ldx
>cd4a	67 aa 6c aa					.word xt_asm_lda_zxi, z_asm_lda_zxi
>cd4e	6c 64 61 2e 7a 78 69				.text "lda.zxi"
.cd55					nt_asm_ldx:
>cd55	03 04						.byte 3, IM
>cd57	60 cd				                .word nt_asm_ldx_h
>cd59	6c aa 71 aa					.word xt_asm_ldx, z_asm_ldx
>cd5d	6c 64 78					.text "ldx"
.cd60					nt_asm_ldx_h:
>cd60	05 04						.byte 5, IM
>cd62	6d cd				                .word nt_asm_ldx_y
>cd64	71 aa 76 aa					.word xt_asm_ldx_h, z_asm_ldx_h
>cd68	6c 64 78 2e 23					.text "ldx.#"
.cd6d					nt_asm_ldx_y:
>cd6d	05 04						.byte 5, IM
>cd6f	7a cd				                .word nt_asm_ldx_z
>cd71	76 aa 7b aa					.word xt_asm_ldx_y, z_asm_ldx_y
>cd75	6c 64 78 2e 79					.text "ldx.y"
.cd7a					nt_asm_ldx_z:
>cd7a	05 04						.byte 5, IM
>cd7c	87 cd				                .word nt_asm_ldx_zy
>cd7e	7b aa 80 aa					.word xt_asm_ldx_z, z_asm_ldx_z
>cd82	6c 64 78 2e 7a					.text "ldx.z"
.cd87					nt_asm_ldx_zy:
>cd87	06 04						.byte 6, IM
>cd89	95 cd				                .word nt_asm_ldy
>cd8b	80 aa 85 aa					.word xt_asm_ldx_zy, z_asm_ldx_zy
>cd8f	6c 64 78 2e 7a 79				.text "ldx.zy"
.cd95					nt_asm_ldy:
>cd95	03 04						.byte 3, IM
>cd97	a0 cd				                .word nt_asm_ldy_h
>cd99	85 aa 8a aa					.word xt_asm_ldy, z_asm_ldy
>cd9d	6c 64 79					.text "ldy"
.cda0					nt_asm_ldy_h:
>cda0	05 04						.byte 5, IM
>cda2	ad cd				                .word nt_asm_ldy_x
>cda4	8a aa 8f aa					.word xt_asm_ldy_h, z_asm_ldy_h
>cda8	6c 64 79 2e 23					.text "ldy.#"
.cdad					nt_asm_ldy_x:
>cdad	05 04						.byte 5, IM
>cdaf	ba cd				                .word nt_asm_ldy_z
>cdb1	8f aa 94 aa					.word xt_asm_ldy_x, z_asm_ldy_x
>cdb5	6c 64 79 2e 78					.text "ldy.x"
.cdba					nt_asm_ldy_z:
>cdba	05 04						.byte 5, IM
>cdbc	c7 cd				                .word nt_asm_ldy_zx
>cdbe	94 aa 99 aa					.word xt_asm_ldy_z, z_asm_ldy_z
>cdc2	6c 64 79 2e 7a					.text "ldy.z"
.cdc7					nt_asm_ldy_zx:
>cdc7	06 04						.byte 6, IM
>cdc9	d5 cd				                .word nt_asm_lsr
>cdcb	99 aa 9e aa					.word xt_asm_ldy_zx, z_asm_ldy_zx
>cdcf	6c 64 79 2e 7a 78				.text "ldy.zx"
.cdd5					nt_asm_lsr:
>cdd5	03 04						.byte 3, IM
>cdd7	e0 cd				                .word nt_asm_lsr_a
>cdd9	9e aa a3 aa					.word xt_asm_lsr, z_asm_lsr
>cddd	6c 73 72					.text "lsr"
.cde0					nt_asm_lsr_a:
>cde0	05 04						.byte 5, IM
>cde2	ed cd				                .word nt_asm_lsr_x
>cde4	a3 aa a8 aa					.word xt_asm_lsr_a, z_asm_lsr_a
>cde8	6c 73 72 2e 61					.text "lsr.a"
.cded					nt_asm_lsr_x:
>cded	05 04						.byte 5, IM
>cdef	fa cd				                .word nt_asm_lsr_z
>cdf1	a8 aa ad aa					.word xt_asm_lsr_x, z_asm_lsr_x
>cdf5	6c 73 72 2e 78					.text "lsr.x"
.cdfa					nt_asm_lsr_z:
>cdfa	05 04						.byte 5, IM
>cdfc	07 ce				                .word nt_asm_lsr_zx
>cdfe	ad aa b2 aa					.word xt_asm_lsr_z, z_asm_lsr_z
>ce02	6c 73 72 2e 7a					.text "lsr.z"
.ce07					nt_asm_lsr_zx:
>ce07	06 04						.byte 6, IM
>ce09	15 ce				                .word nt_asm_nop
>ce0b	b2 aa b7 aa					.word xt_asm_lsr_zx, z_asm_lsr_zx
>ce0f	6c 73 72 2e 7a 78				.text "lsr.zx"
.ce15					nt_asm_nop:
>ce15	03 04						.byte 3, IM
>ce17	20 ce				                .word nt_asm_ora
>ce19	b7 aa bc aa					.word xt_asm_nop, z_asm_nop
>ce1d	6e 6f 70					.text "nop"
.ce20					nt_asm_ora:
>ce20	03 04						.byte 3, IM
>ce22	2b ce				                .word nt_asm_ora_h
>ce24	bc aa c1 aa					.word xt_asm_ora, z_asm_ora
>ce28	6f 72 61					.text "ora"
.ce2b					nt_asm_ora_h:
>ce2b	05 04						.byte 5, IM
>ce2d	38 ce				                .word nt_asm_ora_x
>ce2f	c1 aa c6 aa					.word xt_asm_ora_h, z_asm_ora_h
>ce33	6f 72 61 2e 23					.text "ora.#"
.ce38					nt_asm_ora_x:
>ce38	05 04						.byte 5, IM
>ce3a	45 ce				                .word nt_asm_ora_y
>ce3c	c6 aa cb aa					.word xt_asm_ora_x, z_asm_ora_x
>ce40	6f 72 61 2e 78					.text "ora.x"
.ce45					nt_asm_ora_y:
>ce45	05 04						.byte 5, IM
>ce47	52 ce				                .word nt_asm_ora_z
>ce49	cb aa d0 aa					.word xt_asm_ora_y, z_asm_ora_y
>ce4d	6f 72 61 2e 79					.text "ora.y"
.ce52					nt_asm_ora_z:
>ce52	05 04						.byte 5, IM
>ce54	5f ce				                .word nt_asm_ora_zi
>ce56	d0 aa d5 aa					.word xt_asm_ora_z, z_asm_ora_z
>ce5a	6f 72 61 2e 7a					.text "ora.z"
.ce5f					nt_asm_ora_zi:
>ce5f	06 04						.byte 6, IM
>ce61	6d ce				                .word nt_asm_ora_ziy
>ce63	d5 aa dc aa					.word xt_asm_ora_zi, z_asm_ora_zi
>ce67	6f 72 61 2e 7a 69				.text "ora.zi"
.ce6d					nt_asm_ora_ziy:
>ce6d	07 04						.byte 7, IM
>ce6f	7c ce				                .word nt_asm_ora_zx
>ce71	dc aa e1 aa					.word xt_asm_ora_ziy, z_asm_ora_ziy
>ce75	6f 72 61 2e 7a 69 79				.text "ora.ziy"
.ce7c					nt_asm_ora_zx:
>ce7c	06 04						.byte 6, IM
>ce7e	8a ce				                .word nt_asm_ora_zxi
>ce80	e1 aa e6 aa					.word xt_asm_ora_zx, z_asm_ora_zx
>ce84	6f 72 61 2e 7a 78				.text "ora.zx"
.ce8a					nt_asm_ora_zxi:
>ce8a	07 04						.byte 7, IM
>ce8c	99 ce				                .word nt_asm_pha
>ce8e	e6 aa eb aa					.word xt_asm_ora_zxi, z_asm_ora_zxi
>ce92	6f 72 61 2e 7a 78 69				.text "ora.zxi"
.ce99					nt_asm_pha:
>ce99	03 04						.byte 3, IM
>ce9b	a4 ce				                .word nt_asm_php
>ce9d	eb aa f0 aa					.word xt_asm_pha, z_asm_pha
>cea1	70 68 61					.text "pha"
.cea4					nt_asm_php:
>cea4	03 04						.byte 3, IM
>cea6	af ce				                .word nt_asm_phx
>cea8	f0 aa f5 aa					.word xt_asm_php, z_asm_php
>ceac	70 68 70					.text "php"
.ceaf					nt_asm_phx:
>ceaf	03 04						.byte 3, IM
>ceb1	ba ce				                .word nt_asm_phy
>ceb3	f5 aa fa aa					.word xt_asm_phx, z_asm_phx
>ceb7	70 68 78					.text "phx"
.ceba					nt_asm_phy:
>ceba	03 04						.byte 3, IM
>cebc	c5 ce				                .word nt_asm_pla
>cebe	fa aa ff aa					.word xt_asm_phy, z_asm_phy
>cec2	70 68 79					.text "phy"
.cec5					nt_asm_pla:
>cec5	03 04						.byte 3, IM
>cec7	d0 ce				                .word nt_asm_plp
>cec9	ff aa 04 ab					.word xt_asm_pla, z_asm_pla
>cecd	70 6c 61					.text "pla"
.ced0					nt_asm_plp:
>ced0	03 04						.byte 3, IM
>ced2	db ce				                .word nt_asm_plx
>ced4	04 ab 09 ab					.word xt_asm_plp, z_asm_plp
>ced8	70 6c 70					.text "plp"
.cedb					nt_asm_plx:
>cedb	03 04						.byte 3, IM
>cedd	e6 ce				                .word nt_asm_ply
>cedf	09 ab 0e ab					.word xt_asm_plx, z_asm_plx
>cee3	70 6c 78					.text "plx"
.cee6					nt_asm_ply:
>cee6	03 04						.byte 3, IM
>cee8	f1 ce				                .word nt_asm_rol
>ceea	0e ab 13 ab					.word xt_asm_ply, z_asm_ply
>ceee	70 6c 79					.text "ply"
.cef1					nt_asm_rol:
>cef1	03 04						.byte 3, IM
>cef3	fc ce				                .word nt_asm_rol_a
>cef5	13 ab 18 ab					.word xt_asm_rol, z_asm_rol
>cef9	72 6f 6c					.text "rol"
.cefc					nt_asm_rol_a:
>cefc	05 04						.byte 5, IM
>cefe	09 cf				                .word nt_asm_rol_x
>cf00	18 ab 1d ab					.word xt_asm_rol_a, z_asm_rol_a
>cf04	72 6f 6c 2e 61					.text "rol.a"
.cf09					nt_asm_rol_x:
>cf09	05 04						.byte 5, IM
>cf0b	16 cf				                .word nt_asm_rol_z
>cf0d	1d ab 22 ab					.word xt_asm_rol_x, z_asm_rol_x
>cf11	72 6f 6c 2e 78					.text "rol.x"
.cf16					nt_asm_rol_z:
>cf16	05 04						.byte 5, IM
>cf18	23 cf				                .word nt_asm_rol_zx
>cf1a	22 ab 27 ab					.word xt_asm_rol_z, z_asm_rol_z
>cf1e	72 6f 6c 2e 7a					.text "rol.z"
.cf23					nt_asm_rol_zx:
>cf23	06 04						.byte 6, IM
>cf25	31 cf				                .word nt_asm_ror
>cf27	27 ab 2c ab					.word xt_asm_rol_zx, z_asm_rol_zx
>cf2b	72 6f 6c 2e 7a 78				.text "rol.zx"
.cf31					nt_asm_ror:
>cf31	03 04						.byte 3, IM
>cf33	3c cf				                .word nt_asm_ror_a
>cf35	2c ab 31 ab					.word xt_asm_ror, z_asm_ror
>cf39	72 6f 72					.text "ror"
.cf3c					nt_asm_ror_a:
>cf3c	05 04						.byte 5, IM
>cf3e	49 cf				                .word nt_asm_ror_x
>cf40	31 ab 36 ab					.word xt_asm_ror_a, z_asm_ror_a
>cf44	72 6f 72 2e 61					.text "ror.a"
.cf49					nt_asm_ror_x:
>cf49	05 04						.byte 5, IM
>cf4b	56 cf				                .word nt_asm_ror_z
>cf4d	36 ab 3b ab					.word xt_asm_ror_x, z_asm_ror_x
>cf51	72 6f 72 2e 78					.text "ror.x"
.cf56					nt_asm_ror_z:
>cf56	05 04						.byte 5, IM
>cf58	63 cf				                .word nt_asm_ror_zx
>cf5a	3b ab 40 ab					.word xt_asm_ror_z, z_asm_ror_z
>cf5e	72 6f 72 2e 7a					.text "ror.z"
.cf63					nt_asm_ror_zx:
>cf63	06 04						.byte 6, IM
>cf65	71 cf				                .word nt_asm_rti
>cf67	40 ab 45 ab					.word xt_asm_ror_zx, z_asm_ror_zx
>cf6b	72 6f 72 2e 7a 78				.text "ror.zx"
.cf71					nt_asm_rti:
>cf71	03 04						.byte 3, IM
>cf73	7c cf				                .word nt_asm_rts
>cf75	45 ab 4a ab					.word xt_asm_rti, z_asm_rti
>cf79	72 74 69					.text "rti"
.cf7c					nt_asm_rts:
>cf7c	03 04						.byte 3, IM
>cf7e	87 cf				                .word nt_asm_sbc
>cf80	4a ab 4f ab					.word xt_asm_rts, z_asm_rts
>cf84	72 74 73					.text "rts"
.cf87					nt_asm_sbc:
>cf87	03 04						.byte 3, IM
>cf89	92 cf				                .word nt_asm_sbc_h
>cf8b	4f ab 54 ab					.word xt_asm_sbc, z_asm_sbc
>cf8f	73 62 63					.text "sbc"
.cf92					nt_asm_sbc_h:
>cf92	05 04						.byte 5, IM
>cf94	9f cf				                .word nt_asm_sbc_x
>cf96	54 ab 59 ab					.word xt_asm_sbc_h, z_asm_sbc_h
>cf9a	73 62 63 2e 23					.text "sbc.#"
.cf9f					nt_asm_sbc_x:
>cf9f	05 04						.byte 5, IM
>cfa1	ac cf				                .word nt_asm_sbc_y
>cfa3	59 ab 5e ab					.word xt_asm_sbc_x, z_asm_sbc_x
>cfa7	73 62 63 2e 78					.text "sbc.x"
.cfac					nt_asm_sbc_y:
>cfac	05 04						.byte 5, IM
>cfae	b9 cf				                .word nt_asm_sbc_z
>cfb0	5e ab 63 ab					.word xt_asm_sbc_y, z_asm_sbc_y
>cfb4	73 62 63 2e 79					.text "sbc.y"
.cfb9					nt_asm_sbc_z:
>cfb9	05 04						.byte 5, IM
>cfbb	c6 cf				                .word nt_asm_sbc_zi
>cfbd	63 ab 68 ab					.word xt_asm_sbc_z, z_asm_sbc_z
>cfc1	73 62 63 2e 7a					.text "sbc.z"
.cfc6					nt_asm_sbc_zi:
>cfc6	06 04						.byte 6, IM
>cfc8	d4 cf				                .word nt_asm_sbc_ziy
>cfca	68 ab 6d ab					.word xt_asm_sbc_zi, z_asm_sbc_zi
>cfce	73 62 63 2e 7a 69				.text "sbc.zi"
.cfd4					nt_asm_sbc_ziy:
>cfd4	07 04						.byte 7, IM
>cfd6	e3 cf				                .word nt_asm_sbc_zx
>cfd8	6d ab 72 ab					.word xt_asm_sbc_ziy, z_asm_sbc_ziy
>cfdc	73 62 63 2e 7a 69 79				.text "sbc.ziy"
.cfe3					nt_asm_sbc_zx:
>cfe3	06 04						.byte 6, IM
>cfe5	f1 cf				                .word nt_asm_sbc_zxi
>cfe7	72 ab 77 ab					.word xt_asm_sbc_zx, z_asm_sbc_zx
>cfeb	73 62 63 2e 7a 78				.text "sbc.zx"
.cff1					nt_asm_sbc_zxi:
>cff1	07 04						.byte 7, IM
>cff3	00 d0				                .word nt_asm_sec
>cff5	77 ab 7b ab					.word xt_asm_sbc_zxi, z_asm_sbc_zxi
>cff9	73 62 63 2e 7a 78 69				.text "sbc.zxi"
.d000					nt_asm_sec:
>d000	03 04						.byte 3, IM
>d002	0b d0				                .word nt_asm_sed
>d004	7b ab 7f ab					.word xt_asm_sec, z_asm_sec
>d008	73 65 63					.text "sec"
.d00b					nt_asm_sed:
>d00b	03 04						.byte 3, IM
>d00d	16 d0				                .word nt_asm_sei
>d00f	7f ab 83 ab					.word xt_asm_sed, z_asm_sed
>d013	73 65 64					.text "sed"
.d016					nt_asm_sei:
>d016	03 04						.byte 3, IM
>d018	21 d0				                .word nt_asm_sta
>d01a	83 ab 87 ab					.word xt_asm_sei, z_asm_sei
>d01e	73 65 69					.text "sei"
.d021					nt_asm_sta:
>d021	03 04						.byte 3, IM
>d023	2c d0				                .word nt_asm_sta_x
>d025	87 ab 8b ab					.word xt_asm_sta, z_asm_sta
>d029	73 74 61					.text "sta"
.d02c					nt_asm_sta_x:
>d02c	05 04						.byte 5, IM
>d02e	39 d0				                .word nt_asm_sta_y
>d030	8b ab 8f ab					.word xt_asm_sta_x, z_asm_sta_x
>d034	73 74 61 2e 78					.text "sta.x"
.d039					nt_asm_sta_y:
>d039	05 04						.byte 5, IM
>d03b	46 d0				                .word nt_asm_sta_z
>d03d	8f ab 93 ab					.word xt_asm_sta_y, z_asm_sta_y
>d041	73 74 61 2e 79					.text "sta.y"
.d046					nt_asm_sta_z:
>d046	05 04						.byte 5, IM
>d048	53 d0				                .word nt_asm_sta_zi
>d04a	93 ab 97 ab					.word xt_asm_sta_z, z_asm_sta_z
>d04e	73 74 61 2e 7a					.text "sta.z"
.d053					nt_asm_sta_zi:
>d053	06 04						.byte 6, IM
>d055	61 d0				                .word nt_asm_sta_ziy
>d057	97 ab 9b ab					.word xt_asm_sta_zi, z_asm_sta_zi
>d05b	73 74 61 2e 7a 69				.text "sta.zi"
.d061					nt_asm_sta_ziy:
>d061	07 04						.byte 7, IM
>d063	70 d0				                .word nt_asm_sta_zx
>d065	9b ab 9f ab					.word xt_asm_sta_ziy, z_asm_sta_ziy
>d069	73 74 61 2e 7a 69 79				.text "sta.ziy"
.d070					nt_asm_sta_zx:
>d070	06 04						.byte 6, IM
>d072	7e d0				                .word nt_asm_sta_zxi
>d074	9f ab a3 ab					.word xt_asm_sta_zx, z_asm_sta_zx
>d078	73 74 61 2e 7a 78				.text "sta.zx"
.d07e					nt_asm_sta_zxi:
>d07e	07 04						.byte 7, IM
>d080	8d d0				                .word nt_asm_stx
>d082	a3 ab a7 ab					.word xt_asm_sta_zxi, z_asm_sta_zxi
>d086	73 74 61 2e 7a 78 69				.text "sta.zxi"
.d08d					nt_asm_stx:
>d08d	03 04						.byte 3, IM
>d08f	98 d0				                .word nt_asm_stx_z
>d091	a7 ab ab ab					.word xt_asm_stx, z_asm_stx
>d095	73 74 78					.text "stx"
.d098					nt_asm_stx_z:
>d098	05 04						.byte 5, IM
>d09a	a5 d0				                .word nt_asm_stx_zy
>d09c	ab ab af ab					.word xt_asm_stx_z, z_asm_stx_z
>d0a0	73 74 78 2e 7a					.text "stx.z"
.d0a5					nt_asm_stx_zy:
>d0a5	06 04						.byte 6, IM
>d0a7	b3 d0				                .word nt_asm_sty
>d0a9	af ab b3 ab					.word xt_asm_stx_zy, z_asm_stx_zy
>d0ad	73 74 78 2e 7a 79				.text "stx.zy"
.d0b3					nt_asm_sty:
>d0b3	03 04						.byte 3, IM
>d0b5	be d0				                .word nt_asm_sty_z
>d0b7	b3 ab b7 ab					.word xt_asm_sty, z_asm_sty
>d0bb	73 74 79					.text "sty"
.d0be					nt_asm_sty_z:
>d0be	05 04						.byte 5, IM
>d0c0	cb d0				                .word nt_asm_sty_zx
>d0c2	b7 ab bb ab					.word xt_asm_sty_z, z_asm_sty_z
>d0c6	73 74 79 2e 7a					.text "sty.z"
.d0cb					nt_asm_sty_zx:
>d0cb	06 04						.byte 6, IM
>d0cd	d9 d0				                .word nt_asm_stz
>d0cf	bb ab bf ab					.word xt_asm_sty_zx, z_asm_sty_zx
>d0d3	73 74 79 2e 7a 78				.text "sty.zx"
.d0d9					nt_asm_stz:
>d0d9	03 04						.byte 3, IM
>d0db	e4 d0				                .word nt_asm_stz_x
>d0dd	bf ab c3 ab					.word xt_asm_stz, z_asm_stz
>d0e1	73 74 7a					.text "stz"
.d0e4					nt_asm_stz_x:
>d0e4	05 04						.byte 5, IM
>d0e6	f1 d0				                .word nt_asm_stz_z
>d0e8	c3 ab c7 ab					.word xt_asm_stz_x, z_asm_stz_x
>d0ec	73 74 7a 2e 78					.text "stz.x"
.d0f1					nt_asm_stz_z:
>d0f1	05 04						.byte 5, IM
>d0f3	fe d0				                .word nt_asm_stz_zx
>d0f5	c7 ab cb ab					.word xt_asm_stz_z, z_asm_stz_z
>d0f9	73 74 7a 2e 7a					.text "stz.z"
.d0fe					nt_asm_stz_zx:
>d0fe	06 04						.byte 6, IM
>d100	0c d1				                .word nt_asm_tax
>d102	cb ab cf ab					.word xt_asm_stz_zx, z_asm_stz_zx
>d106	73 74 7a 2e 7a 78				.text "stz.zx"
.d10c					nt_asm_tax:
>d10c	03 04						.byte 3, IM
>d10e	17 d1				                .word nt_asm_tay
>d110	cf ab d3 ab					.word xt_asm_tax, z_asm_tax
>d114	74 61 78					.text "tax"
.d117					nt_asm_tay:
>d117	03 04						.byte 3, IM
>d119	22 d1				                .word nt_asm_trb
>d11b	d3 ab d7 ab					.word xt_asm_tay, z_asm_tay
>d11f	74 61 79					.text "tay"
.d122					nt_asm_trb:
>d122	03 04						.byte 3, IM
>d124	2d d1				                .word nt_asm_trb_z
>d126	d7 ab db ab					.word xt_asm_trb, z_asm_trb
>d12a	74 72 62					.text "trb"
.d12d					nt_asm_trb_z:
>d12d	05 04						.byte 5, IM
>d12f	3a d1				                .word nt_asm_tsb
>d131	db ab df ab					.word xt_asm_trb_z, z_asm_trb_z
>d135	74 72 62 2e 7a					.text "trb.z"
.d13a					nt_asm_tsb:
>d13a	03 04						.byte 3, IM
>d13c	45 d1				                .word nt_asm_tsb_z
>d13e	df ab e3 ab					.word xt_asm_tsb, z_asm_tsb
>d142	74 73 62					.text "tsb"
.d145					nt_asm_tsb_z:
>d145	05 04						.byte 5, IM
>d147	52 d1				                .word nt_asm_tsx
>d149	e3 ab e7 ab					.word xt_asm_tsb_z, z_asm_tsb_z
>d14d	74 73 62 2e 7a					.text "tsb.z"
.d152					nt_asm_tsx:
>d152	03 04						.byte 3, IM
>d154	5d d1				                .word nt_asm_txa
>d156	e7 ab eb ab					.word xt_asm_tsx, z_asm_tsx
>d15a	74 73 78					.text "tsx"
.d15d					nt_asm_txa:
>d15d	03 04						.byte 3, IM
>d15f	68 d1				                .word nt_asm_txs
>d161	eb ab ef ab					.word xt_asm_txa, z_asm_txa
>d165	74 78 61					.text "txa"
.d168					nt_asm_txs:
>d168	03 04						.byte 3, IM
>d16a	73 d1				                .word nt_asm_tya
>d16c	ef ab f3 ab					.word xt_asm_txs, z_asm_txs
>d170	74 78 73					.text "txs"
.d173					nt_asm_tya:
>d173	03 04						.byte 3, IM
>d175	7e d1				                .word nt_asm_arrow
>d177	f3 ab f7 ab					.word xt_asm_tya, z_asm_tya
>d17b	74 79 61					.text "tya"
.d17e					nt_asm_arrow:
>d17e	03 04				                .byte 3, IM
>d180	89 d1				                .word nt_asm_back_jump
>d182	62 91 6c 91			                .word xt_asm_arrow, z_asm_arrow
>d186	2d 2d 3e			                .text "-->"
.d189					nt_asm_back_jump:
>d189	02 04				                .byte 2, IM
>d18b	93 d1				                .word nt_asm_back_branch
>d18d	48 ac 48 ac			                .word xt_asm_back_jump, z_asm_back_jump
>d191	3c 6a				                .text "<j"
.d193					nt_asm_back_branch:
>d193	02 04				                .byte 2, IM
>d195	9d d1				                .word nt_asm_push_a
>d197	49 ac 51 ac			                .word xt_asm_back_branch, z_asm_back_branch
>d19b	3c 62				                .text "<b"
.d19d					nt_asm_push_a:
>d19d	06 04				                .byte 6, IM
>d19f	00 00				                .word 0000
>d1a1	31 ac 40 ac			                .word xt_asm_push_a, z_asm_push_a
>d1a5	70 75 73 68 2d 61		                .text "push-a"

;******  Return to file: platform/../taliforth.asm


;******  Processing file: platform/../strings.asm

=0					str_ok             =  0
=1					str_compile        =  1
=2					str_redefined      =  2
=3					str_wid_forth      =  3
=4					str_abc_lower      =  4
=5					str_abc_upper      =  5
=6					str_wid_editor     =  6
=7					str_wid_assembler  =  7
=8					str_wid_root       =  8
=9					str_see_flags      =  9
=10					str_see_nt         = 10
=11					str_see_xt         = 11
=12					str_see_size       = 12
.d1ab					string_table:
>d1ab	c5 d1 c9 d1 d3 d1 39 d2		        .word s_ok, s_compiled, s_redefined, s_wid_forth, s_abc_lower ; 0-4
>d1b3	de d1
>d1b5	02 d2 31 d2 26 d2 40 d2		        .word s_abc_upper, s_wid_editor, s_wid_asm, s_wid_root        ; 5-8
>d1bd	46 d2 62 d2 67 d2 6c d2		        .word s_see_flags, s_see_nt, s_see_xt, s_see_size             ; 9-12
>d1c5	20 6f 6b 00			s_ok:         .text " ok", 0         ; note space at beginning
>d1c9	20 63 6f 6d 70 69 6c 65		s_compiled:   .text " compiled", 0   ; note space at beginning
>d1d1	64 00
>d1d3	72 65 64 65 66 69 6e 65		s_redefined:  .text "redefined ", 0  ; note space at end
>d1db	64 20 00
>d1de	30 31 32 33 34 35 36 37		s_abc_lower:  .text "0123456789abcdefghijklmnopqrstuvwxyz"
>d1e6	38 39 61 62 63 64 65 66 67 68 69 6a 6b 6c 6d 6e
>d1f6	6f 70 71 72 73 74 75 76 77 78 79 7a
>d202	30 31 32 33 34 35 36 37		s_abc_upper:  .text "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
>d20a	38 39 41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e
>d21a	4f 50 51 52 53 54 55 56 57 58 59 5a
>d226	41 73 73 65 6d 62 6c 65		s_wid_asm:    .text "Assembler ", 0  ; Wordlist ID 2, note space at end
>d22e	72 20 00
>d231	45 64 69 74 6f 72 20 00		s_wid_editor: .text "Editor ", 0     ; Wordlist ID 1, note space at end
>d239	46 6f 72 74 68 20 00		s_wid_forth:  .text "Forth ", 0      ; Wordlist ID 0, note space at end
>d240	52 6f 6f 74 20 00		s_wid_root:   .text "Root ", 0       ; Wordlist ID 3, note space at end
>d246	66 6c 61 67 73 20 28 43		s_see_flags:  .text "flags (CO AN IM NN UF HC): ", 0
>d24e	4f 20 41 4e 20 49 4d 20 4e 4e 20 55 46 20 48 43
>d25e	29 3a 20 00
>d262	6e 74 3a 20 00			s_see_nt:     .text "nt: ", 0
>d267	78 74 3a 20 00			s_see_xt:     .text "xt: ", 0
>d26c	73 69 7a 65 20 28 64 65		s_see_size:   .text "size (decimal): ", 0
>d274	63 69 6d 61 6c 29 3a 20 00
=0					err_allot        = 0
=1					err_badsource    = 1
=2					err_compileonly  = 2
=3					err_defer        = 3
=4					err_divzero      = 4
=5					err_noname       = 5
=6					err_refill       = 6
=7					err_state        = 7
=8					err_syntax       = 8
=9					err_underflow    = 9
=10					err_negallot     = 10
=11					err_wordlist     = 11
=12					err_blockwords   = 12
.d27d					error_table:
>d27d	97 d2 b8 d2 d8 d2 f9 d2		        .word es_allot, es_badsource, es_compileonly, es_defer  ;  0-3
>d285	16 d3 27 d3 37 d3 65 d3		        .word es_divzero, es_noname, es_refill, es_state        ;  4-7
>d28d	7d d3 8c d3 9c d3 b8 d3		        .word es_syntax, es_underflow, es_negallot, es_wordlist ;  8-11
>d295	cf d3				        .word es_blockwords                                    ; 12
>d297	41 4c 4c 4f 54 20 75 73		es_allot:       .text "ALLOT using all available memory", 0
>d29f	69 6e 67 20 61 6c 6c 20 61 76 61 69 6c 61 62 6c
>d2af	65 20 6d 65 6d 6f 72 79 00
>d2b8	49 6c 6c 65 67 61 6c 20		es_badsource:   .text "Illegal SOURCE-ID during REFILL", 0
>d2c0	53 4f 55 52 43 45 2d 49 44 20 64 75 72 69 6e 67
>d2d0	20 52 45 46 49 4c 4c 00
>d2d8	49 6e 74 65 72 70 72 65		es_compileonly: .text "Interpreting a compile-only word", 0
>d2e0	74 69 6e 67 20 61 20 63 6f 6d 70 69 6c 65 2d 6f
>d2f0	6e 6c 79 20 77 6f 72 64 00
>d2f9	44 45 46 45 52 65 64 20		es_defer:       .text "DEFERed word not defined yet", 0
>d301	77 6f 72 64 20 6e 6f 74 20 64 65 66 69 6e 65 64
>d311	20 79 65 74 00
>d316	44 69 76 69 73 69 6f 6e		es_divzero:     .text "Division by zero", 0
>d31e	20 62 79 20 7a 65 72 6f 00
>d327	50 61 72 73 69 6e 67 20		es_noname:      .text "Parsing failure", 0
>d32f	66 61 69 6c 75 72 65 00
>d337	51 55 49 54 20 63 6f 75		es_refill:      .text "QUIT could not get input (REFILL returned -1)", 0
>d33f	6c 64 20 6e 6f 74 20 67 65 74 20 69 6e 70 75 74
>d34f	20 28 52 45 46 49 4c 4c 20 72 65 74 75 72 6e 65
>d35f	64 20 2d 31 29 00
>d365	41 6c 72 65 61 64 79 20		es_state:       .text "Already in compile mode", 0
>d36d	69 6e 20 63 6f 6d 70 69 6c 65 20 6d 6f 64 65 00
>d37d	55 6e 64 65 66 69 6e 65		es_syntax:      .text "Undefined word", 0
>d385	64 20 77 6f 72 64 00
>d38c	53 74 61 63 6b 20 75 6e		es_underflow:   .text "Stack underflow", 0
>d394	64 65 72 66 6c 6f 77 00
>d39c	4d 61 78 20 6d 65 6d 6f		es_negallot:    .text "Max memory freed with ALLOT", 0
>d3a4	72 79 20 66 72 65 65 64 20 77 69 74 68 20 41 4c
>d3b4	4c 4f 54 00
>d3b8	4e 6f 20 77 6f 72 64 6c		es_wordlist:    .text "No wordlists available", 0
>d3c0	69 73 74 73 20 61 76 61 69 6c 61 62 6c 65 00
>d3cf	50 6c 65 61 73 65 20 61		es_blockwords:  .text "Please assign vectors BLOCK-READ-VECTOR and BLOCK-WRITE-VECTOR",0
>d3d7	73 73 69 67 6e 20 76 65 63 74 6f 72 73 20 42 4c
>d3e7	4f 43 4b 2d 52 45 41 44 2d 56 45 43 54 4f 52 20
>d3f7	61 6e 64 20 42 4c 4f 43 4b 2d 57 52 49 54 45 2d
>d407	56 45 43 54 4f 52 00
>d40e	0f 2f 43 4f 55 4e 54 45		envs_cs:        .text 15, "/COUNTED-STRING"
>d416	44 2d 53 54 52 49 4e 47
>d41e	05 2f 48 4f 4c 44		envs_hold:      .text 5, "/HOLD"
>d424	04 2f 50 41 44			envs_pad:       .text 4, "/PAD"
>d429	11 41 44 44 52 45 53 53		envs_aub:       .text 17, "ADDRESS-UNIT-BITS"
>d431	2d 55 4e 49 54 2d 42 49 54 53
>d43b	07 46 4c 4f 4f 52 45 44		envs_floored:   .text 7, "FLOORED"
>d443	08 4d 41 58 2d 43 48 41		envs_max_char:  .text 8, "MAX-CHAR"
>d44b	52
>d44c	05 4d 41 58 2d 4e		envs_max_n:     .text 5, "MAX-N"
>d452	05 4d 41 58 2d 55		envs_max_u:     .text 5, "MAX-U"
>d458	12 52 45 54 55 52 4e 2d		envs_rsc:       .text 18, "RETURN-STACK-CELLS"
>d460	53 54 41 43 4b 2d 43 45 4c 4c 53
>d46b	0b 53 54 41 43 4b 2d 43		envs_sc:        .text 11, "STACK-CELLS"
>d473	45 4c 4c 53
>d477	09 57 4f 52 44 4c 49 53		envs_wl:        .text 9, "WORDLISTS"
>d47f	54 53
>d481	05 4d 41 58 2d 44		envs_max_d:     .text 5, "MAX-D"
>d487	06 4d 41 58 2d 55 44		envs_max_ud:    .text 6, "MAX-UD"

;******  Return to file: platform/../taliforth.asm

.d48e					cmpl_subroutine:
.d48e	48		pha		                pha             ; save LSB of address
.d48f	a9 20		lda #$20	                lda #$20        ; load opcode for JSR
.d491	80 03		bra $d496	                bra cmpl_common
.d493					cmpl_jump:
.d493	48		pha		                pha             ; save LSB of address
.d494	a9 4c		lda #$4c	                lda #$4c        ; load opcode for JMP, fall thru to cmpl_common
.d496					cmpl_common:
.d496	20 9e d4	jsr $d49e	                jsr cmpl_a      ; compile opcode
.d499	68		pla		                pla             ; retrieve address LSB; fall thru to cmpl_word
.d49a					cmpl_word:
.d49a	20 9e d4	jsr $d49e	                jsr cmpl_a      ; compile LSB of address
.d49d	98		tya		                tya             ; fall thru for MSB
.d49e					cmpl_a:
.d49e	92 00		sta ($00)	                sta (cp)
.d4a0	e6 00		inc $00		                inc cp
.d4a2	d0 02		bne $d4a6	                bne _done
.d4a4	e6 01		inc $01		                inc cp+1
.d4a6					_done:
.d4a6	60		rts		                rts
.d4a7					doconst:
.d4a7	ca		dex		                dex             ; make room for constant
.d4a8	ca		dex		                dex
.d4a9	68		pla		                pla             ; LSB of return address
.d4aa	85 24		sta $24		                sta tmp1
.d4ac	68		pla		                pla             ; MSB of return address
.d4ad	85 25		sta $25		                sta tmp1+1
.d4af	a0 01		ldy #$01	                ldy #1
.d4b1	b1 24		lda ($24),y	                lda (tmp1),y
.d4b3	95 00		sta $00,x	                sta 0,x
.d4b5	c8		iny		                iny
.d4b6	b1 24		lda ($24),y	                lda (tmp1),y
.d4b8	95 01		sta $01,x	                sta 1,x
.d4ba	60		rts		                rts
.d4bb					dodefer:
.d4bb	68		pla		                pla             ; LSB
.d4bc	85 24		sta $24		                sta tmp1
.d4be	68		pla		                pla             ; MSB
.d4bf	85 25		sta $25		                sta tmp1+1
.d4c1	a0 01		ldy #$01	                ldy #1
.d4c3	b1 24		lda ($24),y	                lda (tmp1),y
.d4c5	85 26		sta $26		                sta tmp2
.d4c7	c8		iny		                iny
.d4c8	b1 24		lda ($24),y	                lda (tmp1),y
.d4ca	85 27		sta $27		                sta tmp2+1
.d4cc	6c 26 00	jmp ($0026)	                jmp (tmp2)      ; This is actually a jump to the new target
.d4cf					defer_error:
.d4cf	a9 03		lda #$03	                lda #err_defer
.d4d1	4c 01 d6	jmp $d601	                jmp error
.d4d4					dodoes:
.d4d4	7a		ply		                ply             ; LSB
.d4d5	68		pla		                pla             ; MSB
.d4d6	c8		iny		                iny
.d4d7	d0 01		bne $d4da	                bne +
.d4d9	1a		inc a		                ina
.d4da					+
.d4da	84 26		sty $26		                sty tmp2
.d4dc	85 27		sta $27		                sta tmp2+1
.d4de	ca		dex		                dex
.d4df	ca		dex		                dex
.d4e0	7a		ply		                ply
.d4e1	68		pla		                pla
.d4e2	c8		iny		                iny
.d4e3	d0 01		bne $d4e6	                bne +
.d4e5	1a		inc a		                ina
.d4e6					+
.d4e6	94 00		sty $00,x	                sty 0,x         ; LSB
.d4e8	95 01		sta $01,x	                sta 1,x         ; MSB
.d4ea	6c 26 00	jmp ($0026)	                jmp (tmp2)
.d4ed					dovar:
.d4ed	7a		ply		                ply             ; LSB
.d4ee	68		pla		                pla             ; MSB
.d4ef	c8		iny		                iny
.d4f0	d0 01		bne $d4f3	                bne +
.d4f2	1a		inc a		                ina
.d4f3					+
.d4f3	ca		dex		                dex
.d4f4	ca		dex		                dex
.d4f5	95 01		sta $01,x	                sta 1,x
.d4f7	98		tya		                tya
.d4f8	95 00		sta $00,x	                sta 0,x
.d4fa	60		rts		                rts
.d4fb					byte_to_ascii:
.d4fb	48		pha		                pha
.d4fc	4a		lsr a		                lsr             ; convert high nibble first
.d4fd	4a		lsr a		                lsr
.d4fe	4a		lsr a		                lsr
.d4ff	4a		lsr a		                lsr
.d500	20 04 d5	jsr $d504	                jsr _nibble_to_ascii
.d503	68		pla		                pla
.d504					_nibble_to_ascii:
.d504	29 0f		and #$0f	                and #$0F
.d506	09 30		ora #$30	                ora #'0'
.d508	c9 3a		cmp #$3a	                cmp #$3A        ; '9+1
.d50a	90 02		bcc $d50e	                bcc +
.d50c	69 06		adc #$06	                adc #$06
.d50e	4c e6 8d	jmp $8de6	+               jmp emit_a
.d511	60		rts		                rts
.d512					compare_16bit:
.d512	b5 00		lda $00,x	                lda 0,x                 ; LSB of TOS
.d514	d5 02		cmp $02,x	                cmp 2,x                 ; LSB of NOS
.d516	f0 0a		beq $d522	                beq _equal
.d518	b5 01		lda $01,x	                lda 1,x                 ; MSB of TOS
.d51a	f5 03		sbc $03,x	                sbc 3,x                 ; MSB of NOS
.d51c	09 01		ora #$01	                ora #1                  ; Make zero flag 0 because not equal
.d51e	70 08		bvs $d528	                bvs _overflow
.d520	80 08		bra $d52a	                bra _not_equal
.d522					_equal:
.d522	b5 01		lda $01,x	                lda 1,x                 ; MSB of TOS
.d524	f5 03		sbc $03,x	                sbc 3,x                 ; MSB of NOS
.d526	50 04		bvc $d52c	                bvc _done
.d528					_overflow:
.d528	49 80		eor #$80	                eor #$80                ; complement negative flag
.d52a					_not_equal:
.d52a	09 01		ora #$01	                ora #1                  ; if overflow, we can't be eqal
.d52c					_done:
.d52c	60		rts		                rts
.d52d					current_to_dp:
.d52d	a0 04		ldy #$04	                ldy #current_offset
.d52f	b1 1e		lda ($1e),y	                lda (up),y      ; current is a byte variable
.d531	0a		asl a		                asl             ; turn it into an offset (in cells)
.d532	18		clc		                clc
.d533	69 06		adc #$06	                adc #wordlists_offset   ; add offset to wordlists base.
.d535	a8		tay		                tay
.d536	b1 1e		lda ($1e),y	                lda (up),y              ; get the dp for that wordlist.
.d538	85 02		sta $02		                sta dp
.d53a	c8		iny		                iny
.d53b	b1 1e		lda ($1e),y	                lda (up),y
.d53d	85 03		sta $03		                sta dp+1
.d53f	60		rts		                rts
.d540					dp_to_current:
.d540	a0 04		ldy #$04	                ldy #current_offset
.d542	b1 1e		lda ($1e),y	                lda (up),y      ; current is a byte variable
.d544	0a		asl a		                asl             ; turn it into an offset (in cells)
.d545	18		clc		                clc
.d546	69 06		adc #$06	                adc #wordlists_offset   ; add offset to wordlists base.
.d548	a8		tay		                tay
.d549	a5 02		lda $02		                lda dp
.d54b	91 1e		sta ($1e),y	                sta (up),y              ; get the dp for that wordlist.
.d54d	c8		iny		                iny
.d54e	a5 03		lda $03		                lda dp+1
.d550	91 1e		sta ($1e),y	                sta (up),y
.d552	60		rts		                rts
.d553					interpret:
.d553					_loop:
.d553	20 61 98	jsr $9861	                jsr xt_parse_name       ; ( "string" -- addr u )
.d556	b5 00		lda $00,x	                lda 0,x
.d558	15 01		ora $01,x	                ora 1,x
.d55a	f0 70		beq $d5cc	                beq _line_done
.d55c	20 34 a3	jsr $a334	                jsr xt_two_dup          ; ( addr u -- addr u addr u )
.d55f	20 cb 8f	jsr $8fcb	                jsr xt_find_name        ; ( addr u addr u -- addr u nt|0 )
.d562	b5 00		lda $00,x	                lda 0,x
.d564	15 01		ora $01,x	                ora 1,x
.d566	d0 28		bne $d590	                bne _got_name_token
.d568	e8		inx		                inx                     ; ( addr u 0 -- addr u )
.d569	e8		inx		                inx
.d56a	20 7a 96	jsr $967a	                jsr xt_number           ; ( addr u -- u|d )
.d56d	a5 16		lda $16		                lda state
.d56f	f0 e2		beq $d553	                beq _loop
.d571	a9 20		lda #$20	                lda #$20
.d573	24 20		bit $20		                bit status
.d575	f0 0d		beq $d584	                beq _single_number
.d577	20 2a a1	jsr $a12a	                jsr xt_swap
.d57a	a0 93		ldy #$93	                ldy #>literal_runtime
.d57c	a9 88		lda #$88	                lda #<literal_runtime
.d57e	20 8e d4	jsr $d48e	                jsr cmpl_subroutine
.d581	20 5e 87	jsr $875e	                jsr xt_comma
.d584					_single_number:
.d584	a0 93		ldy #$93	                ldy #>literal_runtime
.d586	a9 88		lda #$88	                lda #<literal_runtime
.d588	20 8e d4	jsr $d48e	                jsr cmpl_subroutine
.d58b	20 5e 87	jsr $875e	                jsr xt_comma
.d58e	80 c3		bra $d553	                bra _loop
.d590					_got_name_token:
.d590	b5 00		lda $00,x	                lda 0,x
.d592	95 04		sta $04,x	                sta 4,x
.d594	b5 01		lda $01,x	                lda 1,x
.d596	95 05		sta $05,x	                sta 5,x
.d598	e8		inx		                inx
.d599	e8		inx		                inx
.d59a	e8		inx		                inx
.d59b	e8		inx		                inx                     ; ( nt )
.d59c	b5 00		lda $00,x	                lda 0,x
.d59e	85 22		sta $22		                sta tmpbranch
.d5a0	b5 01		lda $01,x	                lda 1,x
.d5a2	85 23		sta $23		                sta tmpbranch+1
.d5a4	20 d1 95	jsr $95d1	                jsr xt_name_to_int      ; ( nt - xt )
.d5a7	a5 16		lda $16		                lda state
.d5a9	d0 13		bne $d5be	                bne _compile
.d5ab	a0 01		ldy #$01	                ldy #1
.d5ad	b1 22		lda ($22),y	                lda (tmpbranch),y
.d5af	29 01		and #$01	                and #CO                 ; mask everything but Compile Only bit
.d5b1	f0 05		beq $d5b8	                beq _interpret
.d5b3	a9 02		lda #$02	                lda #err_compileonly
.d5b5	4c 01 d6	jmp $d601	                jmp error
.d5b8					_interpret:
.d5b8	20 2d 8f	jsr $8f2d	                jsr xt_execute
.d5bb	4c 53 d5	jmp $d553	                jmp _loop
.d5be					_compile:
.d5be	a0 01		ldy #$01	                ldy #1
.d5c0	b1 22		lda ($22),y	                lda (tmpbranch),y
.d5c2	29 04		and #$04	                and #IM                 ; Mask all but IM bit
.d5c4	d0 f2		bne $d5b8	                bne _interpret          ; IMMEDIATE word, execute right now
.d5c6	20 dd 87	jsr $87dd	                jsr xt_compile_comma
.d5c9	4c 53 d5	jmp $d553	                jmp _loop
.d5cc					_line_done:
.d5cc	e8		inx		                inx
.d5cd	e8		inx		                inx
.d5ce	e8		inx		                inx
.d5cf	e8		inx		                inx
.d5d0	60		rts		                rts
.d5d1					is_printable:
.d5d1	c9 20		cmp #$20	                cmp #AscSP              ; $20
.d5d3	90 08		bcc $d5dd	                bcc _done
.d5d5	c9 80		cmp #$80	                cmp #$7F + 1             ; '~'
.d5d7	b0 03		bcs $d5dc	                bcs _failed
.d5d9	38		sec		                sec
.d5da	80 01		bra $d5dd	                bra _done
.d5dc					_failed:
.d5dc	18		clc		                clc
.d5dd					_done:
.d5dd	60		rts		                rts
.d5de					is_whitespace:
.d5de	c9 00		cmp #$00	                cmp #00         ; explicit comparison to leave Y untouched
.d5e0	90 08		bcc $d5ea	                bcc _done
.d5e2	c9 21		cmp #$21	                cmp #AscSP+1
.d5e4	b0 03		bcs $d5e9	                bcs _failed
.d5e6	38		sec		                sec
.d5e7	80 01		bra $d5ea	                bra _done
.d5e9					_failed:
.d5e9	18		clc		                clc
.d5ea					_done:
.d5ea	60		rts		                rts
.d5eb					underflow_1:
.d5eb	e0 77		cpx #$77	                cpx #dsp0-1
.d5ed	10 10		bpl $d5ff	                bpl underflow_error
.d5ef	60		rts		                rts
.d5f0					underflow_2:
.d5f0	e0 75		cpx #$75	                cpx #dsp0-3
.d5f2	10 0b		bpl $d5ff	                bpl underflow_error
.d5f4	60		rts		                rts
.d5f5					underflow_3:
.d5f5	e0 73		cpx #$73	                cpx #dsp0-5
.d5f7	10 06		bpl $d5ff	                bpl underflow_error
.d5f9	60		rts		                rts
.d5fa					underflow_4:
.d5fa	e0 71		cpx #$71	                cpx #dsp0-7
.d5fc	10 01		bpl $d5ff	                bpl underflow_error
.d5fe	60		rts		                rts
.d5ff					underflow_error:
.d5ff	a9 09		lda #$09	                lda #err_underflow      ; fall through to error
.d601					error:
.d601	0a		asl a		                asl
.d602	a8		tay		                tay
.d603	b9 7d d2	lda $d27d,y	                lda error_table,y
.d606	85 28		sta $28		                sta tmp3                ; LSB
.d608	c8		iny		                iny
.d609	b9 7d d2	lda $d27d,y	                lda error_table,y
.d60c	85 29		sta $29		                sta tmp3+1              ; MSB
.d60e	20 24 d6	jsr $d624	                jsr print_common
.d611	20 53 89	jsr $8953	                jsr xt_cr
.d614	4c 81 80	jmp $8081	                jmp xt_abort            ; no jsr, as we clobber return stack
.d617					print_string_no_lf:
.d617	0a		asl a		                asl
.d618	a8		tay		                tay
.d619	b9 ab d1	lda $d1ab,y	                lda string_table,y
.d61c	85 28		sta $28		                sta tmp3                ; LSB
.d61e	c8		iny		                iny
.d61f	b9 ab d1	lda $d1ab,y	                lda string_table,y
.d622	85 29		sta $29		                sta tmp3+1              ; MSB
.d624					print_common:
.d624	a0 00		ldy #$00	                ldy #0
.d626					_loop:
.d626	b1 28		lda ($28),y	                lda (tmp3),y
.d628	f0 06		beq $d630	                beq _done               ; strings are zero-terminated
.d62a	20 e6 8d	jsr $8de6	                jsr emit_a              ; allows vectoring via output
.d62d	c8		iny		                iny
.d62e	80 f6		bra $d626	                bra _loop
.d630					_done:
.d630	60		rts		                rts
.d631					print_string:
.d631	20 17 d6	jsr $d617	                jsr print_string_no_lf
.d634	4c 53 89	jmp $8953	                jmp xt_cr               ; JSR/RTS because never compiled
.d637					print_u:
.d637	20 23 a7	jsr $a723	                jsr xt_zero                     ; 0
.d63a	20 4a 93	jsr $934a	                jsr xt_less_number_sign         ; <#
.d63d	20 60 97	jsr $9760	                jsr xt_number_sign_s            ; #S
.d640	20 3e 97	jsr $973e	                jsr xt_number_sign_greater      ; #>
.d643	4c 7f a4	jmp $a47f	                jmp xt_type                     ; JSR/RTS because never compiled

;******  Return to file: platform/platform-py65mon.asm

.f010					v_nmi:
.f010					v_reset:
.f010					v_irq:
.f010					kernel_init:
.f010	78		sei		                sei             ; Disable interrupts
.f011	a2 00		ldx #$00	                ldx #0
.f013	bd 2c f0	lda $f02c,x	-               lda s_kernel_id,x
.f016	f0 06		beq $f01e	                beq _done
.f018	20 27 f0	jsr $f027	                jsr kernel_putc
.f01b	e8		inx		                inx
.f01c	80 f5		bra $f013	                bra -
.f01e					_done:
.f01e	4c 00 80	jmp $8000	                jmp forth
.f021					kernel_getc:
.f021					_loop:
.f021	ad 04 f0	lda $f004	                lda $f004
.f024	f0 fb		beq $f021	                beq _loop
.f026	60		rts		                rts
.f027					kernel_putc:
.f027	8d 01 f0	sta $f001	                sta $f001
.f02a	60		rts		                rts
.f02b					platform_bye:
.f02b	00		brk #		                brk
.f02c					s_kernel_id:
>f02c	54 61 6c 69 20 46 6f 72		        .text "Tali Forth 2 default kernel for py65mon (18. Feb 2018)", AscLF, 0
>f034	74 68 20 32 20 64 65 66 61 75 6c 74 20 6b 65 72
>f044	6e 65 6c 20 66 6f 72 20 70 79 36 35 6d 6f 6e 20
>f054	28 31 38 2e 20 46 65 62 20 32 30 31 38 29 0a 00
>fffa	10 f0				.word v_nmi
>fffc	10 f0				.word v_reset
>fffe	10 f0				.word v_irq

;******  End of listing
