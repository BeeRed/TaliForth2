
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass --nostart --list=docs/py65mon-listing.txt --labels=docs/py65mon-labelmap.txt --output taliforth-py65mon.bin platform/platform-py65mon.asm
; Sun Mar 10 07:38:18 2024

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: platform/platform-py65mon.asm

=$0000					ram_start = $0000          ; start of installed 32 KiB of RAM
=32767					ram_end   = $8000-1        ; end of installed RAM
=$0000					zpage     = ram_start      ; begin of Zero Page ($0000-$00ff)
=$7f					zpage_end = $7F            ; end of Zero Page used ($0000-$007f)
=$0100					stack0    = $0100          ; begin of Return Stack ($0100-$01ff)
=31744					hist_buff = ram_end-$03ff  ; begin of history buffers
=$0000					user0     = zpage            ; user and system variables
=$ff					rsp0      = $ff              ; initial Return Stack Pointer (65c02 stack)
=$ff					bsize     = $ff              ; size of input/output buffers
=512					buffer0   = stack0+$100      ; input buffer ($0200-$027f)
=768					cp0       = buffer0+bsize+1  ; Dictionary starts after last buffer
=31744					cp_end    = hist_buff        ; Last RAM byte available for code
=$ff					padoffset = $ff              ; offset from CP to PAD (holds number strings)
=					TALI_OPTIONAL_WORDS := [ "ed", "editor", "ramdrive", "block", "environment?", "assembler", "wordlist" ]
=["lf"]					TALI_OPTION_CR_EOL := [ "lf" ]

;******  Processing file: platform/../taliforth.asm

.8000					code0:

;******  Processing file: platform/../definitions.asm

=0					cp        = user0+0   ; Compiler Pointer
=2					dp        = user0+2   ; Dictionary Pointer
=4					workword  = user0+4   ; nt (not xt!) of word being compiled, except in
=6					insrc     = user0+6   ; input Source for SOURCE-ID
=8					cib       = user0+8   ; address of current input buffer
=10					ciblen    = user0+10  ; length of current input buffer
=12					toin      = user0+12  ; pointer to CIB (>IN in Forth)
=14					ip        = user0+14  ; Instruction Pointer (current xt)
=16					output    = user0+16  ; vector for EMIT
=18					input     = user0+18  ; vector for KEY
=20					havekey   = user0+20  ; vector for KEY?
=22					state     = user0+22  ; STATE: -1 compile, 0 interpret
=24					base      = user0+24  ; number radix, default decimal
=26					nc_limit  = user0+26  ; limit for Native Compile size
=28					uf_strip  = user0+28  ; flag to strip underflow detection code
=30					up        = user0+30  ; User Pointer (Address of user variables)
=32					status    = user0+32  ; internal status information
=34					tmpbranch = user0+34  ; temporary storage for 0BRANCH, BRANCH only
=36					tmp1      = user0+36  ; temporary storage
=38					tmp2      = user0+38  ; temporary storage
=40					tmp3      = user0+40  ; temporary storage (especially for print)
=42					tmpdsp    = user0+42  ; temporary DSP (X) storage (two bytes)
=44					tmptos    = user0+44  ; temporary TOS storage
=46					editor1   = user0+46  ; temporary for editors
=48					editor2   = user0+48  ; temporary for editors
=50					editor3   = user0+50  ; temporary for editors
=52					tohold    = user0+52  ; pointer for formatted output
=54					scratch   = user0+54  ; 8 byte scratchpad (see UM/MOD)
=120					dsp0      = zpage_end-7    ; initial Data Stack Pointer
=0					blk_offset = 0        ; BLK : UP + 0
=2					scr_offset = 2        ; SCR : UP + 2
=4					current_offset = 4    ; CURRENT (byte) : UP + 4 (Compilation wordlist)
=5					num_wordlists_offset = 5
=6					wordlists_offset = 6  ; WORDLISTS (cells) : UP + 6 to UP + 29
=30					num_order_offset = 30 ; #ORDER (byte) : UP + 30
=31					search_order_offset = 31
=12					max_wordlists = 12    ; Maximum number of wordlists supported
=40					blkbuffer_offset    = 40   ; Address of buffer
=42					buffblocknum_offset = 42   ; Block number current in buffer
=44					buffstatus_offset   = 44   ; Status of buffer (bit 0 = used, bit 1 = dirty)
=46					blockread_offset    = 46   ; Vector to block reading routine
=48					blockwrite_offset   = 48   ; Vector to block writing routine
=$03					AscCC   = $03  ; break (CTRL-c)
=$07					AscBELL = $07  ; bell sound
=$08					AscBS   = $08  ; backspace
=$0a					AscLF   = $0a  ; line feed
=$0d					AscCR   = $0d  ; carriage return
=$1b					AscESC  = $1b  ; escape
=$20					AscSP   = $20  ; space
=$7f					AscDEL  = $7f  ; delete (CTRL-h)
=$10					AscCP   = $10  ; CTRL-p (used to recall previous input history)
=$0e					AscCN   = $0e  ; CTRL-n (used to recall next input history)
=1					CO = 1  ; Compile Only
=2					AN = 2  ; Always Native Compile
=4					IM = 4  ; Immediate Word
=8					NN = 8  ; Never Native Compile
=16					UF = 16 ; Includes Underflow Check (RESERVED)
=32					HC = 32 ; Word has Code Field Area (CFA)
=79					MAX_LINE_LENGTH  = 79      ; assumes 80 character lines

;******  Return to file: platform/../taliforth.asm

.8000					forth:

;******  Processing file: platform/../native_words.asm

.8000					xt_cold:
.8000	d8		cld		                cld
.8001	a9 27		lda #$27	                lda #<kernel_putc
.8003	85 10		sta $10		                sta output
.8005	a9 f0		lda #$f0	                lda #>kernel_putc
.8007	85 11		sta $11		                sta output+1
.8009	a2 21		ldx #$21	                ldx #cold_zp_table_end-cold_zp_table-1
.800b					_load_zp_loop:
.800b	bd a4 80	lda $80a4,x	                lda cold_zp_table,x
.800e	95 00		sta $00,x	                sta zpage,x
.8010	ca		dex		                dex
.8011	d0 f8		bne $800b	                bne _load_zp_loop
.8013	ad a4 80	lda $80a4	                lda cold_zp_table
.8016	85 00		sta $00		                sta zpage
.8018	a2 ff		ldx #$ff	                ldx #rsp0
.801a	9a		txs		                txs
.801b	a2 78		ldx #$78	                ldx #dsp0
.801d	a0 33		ldy #$33	                ldy #cold_user_table_end-cold_user_table-1
.801f	a9 00		lda #$00	                lda #0
.8021					_load_user_vars_loop:
.8021	b9 c6 80	lda $80c6,y	                lda cold_user_table,y
.8024	91 1e		sta ($1e),y	                sta (up),y
.8026	88		dey		                dey
.8027	d0 f8		bne $8021	                bne _load_user_vars_loop
.8029	ad c6 80	lda $80c6	                lda cold_user_table
.802c	92 1e		sta ($1e)	                sta (up)
.802e	20 44 89	jsr $8944	                jsr xt_cr
.8031	ca		dex		                dex
.8032	ca		dex		                dex
.8033	ca		dex		                dex
.8034	ca		dex		                dex
.8035	a9 52		lda #$52	                lda #<forth_words_start
.8037	95 02		sta $02,x	                sta 2,x
.8039	a9 bb		lda #$bb	                lda #>forth_words_start
.803b	95 03		sta $03,x	                sta 3,x
.803d	a9 d3		lda #$d3	                lda #<(user_words_end-forth_words_start)
.803f	95 00		sta $00,x	                sta 0,x
.8041	a9 00		lda #$00	                lda #>(user_words_end-forth_words_start)
.8043	95 01		sta $01,x	                sta 1,x
.8045	20 b6 90	jsr $90b6	                jsr xt_evaluate
.8048	9c 00 7c	stz $7c00	                stz hist_buff
.804b	9c 80 7c	stz $7c80	                stz hist_buff+$80
.804e	9c 00 7d	stz $7d00	                stz hist_buff+$100
.8051	9c 80 7d	stz $7d80	                stz hist_buff+$180
.8054	9c 00 7e	stz $7e00	                stz hist_buff+$200
.8057	9c 80 7e	stz $7e80	                stz hist_buff+$280
.805a	9c 00 7f	stz $7f00	                stz hist_buff+$300
.805d	9c 80 7f	stz $7f80	                stz hist_buff+$380
.8060					xt_abort:
.8060	a2 78		ldx #$78	                ldx #dsp0
.8062					xt_quit:
.8062	8a		txa		                txa             ; Save the DSP that we just defined
.8063	a2 ff		ldx #$ff	                ldx #rsp0
.8065	9a		txs		                txs
.8066	aa		tax		                tax             ; Restore the DSP. Dude, seriously.
.8067	64 0e		stz $0e		                stz ip
.8069	64 0f		stz $0f		                stz ip+1
.806b	64 06		stz $06		                stz insrc
.806d	64 07		stz $07		                stz insrc+1
.806f	64 16		stz $16		                stz state
.8071	64 17		stz $17		                stz state+1
.8073					_get_line:
.8073	a9 00		lda #$00	                lda #<buffer0   ; input buffer, this is paranoid
.8075	85 08		sta $08		                sta cib
.8077	a9 02		lda #$02	                lda #>buffer0
.8079	85 09		sta $09		                sta cib+1
.807b	64 0a		stz $0a		                stz ciblen
.807d	64 0b		stz $0b		                stz ciblen+1
.807f	20 d9 9a	jsr $9ad9	                jsr xt_refill           ; ( -- f )
.8082	b5 00		lda $00,x	                lda 0,x
.8084	d0 05		bne $808b	                bne _success
.8086	a9 06		lda #$06	                lda #err_refill
.8088	4c 26 d8	jmp $d826	                jmp error
.808b					_success:
.808b	e8		inx		                inx                     ; drop
.808c	e8		inx		                inx
.808d	20 78 d7	jsr $d778	                jsr interpret
.8090	e0 78		cpx #$78	                cpx #dsp0
.8092	f0 05		beq $8099	                beq _stack_ok
.8094	90 03		bcc $8099	                bcc _stack_ok           ; DSP must always be smaller than DSP0
.8096	4c 24 d8	jmp $d824	                jmp underflow_error
.8099					_stack_ok:
.8099	a5 16		lda $16		                lda state
.809b	f0 02		beq $809f	                beq _print
.809d	a9 01		lda #$01	                lda #1                  ; number for "compile" string
.809f					_print:
.809f	20 56 d8	jsr $d856	                jsr print_string
.80a2	80 cf		bra $8073	                bra _get_line
.80a4					z_cold:
.80a4					z_abort:
.80a4					z_quit:
.80a4					cold_zp_table:
>80a4	00 08				        .word cp0+256+1024      ; cp moved to make room for user vars and
>80a6	25 bc				        .word dictionary_start  ; dp
>80a8	00 00				        .word 0                 ; workword
>80aa	00 00				        .word 0                 ; insrc (SOURCE-ID is 0 for keyboard)
>80ac	00 02				        .word buffer0           ; cib
>80ae	00 00				        .word 0                 ; ciblen
>80b0	00 00				        .word 0                 ; toin
>80b2	00 00				        .word 0                 ; ip
>80b4	27 f0				        .word kernel_putc       ; output
>80b6	21 f0				        .word kernel_getc       ; input
>80b8	00 00				        .word 0                 ; havekey
>80ba	00 00				        .word 0                 ; state (0 = interpret)
>80bc	0a 00				        .word 10                ; base
>80be	14 00				        .word 20                ; nc-limit
>80c0	00 00				        .word 0                 ; uf_strip (off by default)
>80c2	00 03				        .word cp0               ; up (user vars put right at beginning of
>80c4	00 00				        .word 0                 ; status
.80c6					cold_zp_table_end:
.80c6					cold_user_table:
>80c6	00 00				        .word 0                         ;  0 BLK
>80c8	00 00				        .word 0                         ;  2 SCR
>80ca	00				        .byte 0                         ;  4 CURRENT = FORTH-WORDLIST
>80cb	04				        .byte 4                         ;  5 #WORDLISTS (FORTH EDITOR ASSEMBLER ROOT)
>80cc	25 bc				        .word dictionary_start          ;  6 FORTH-WORDLIST
>80ce	6d ca				        .word editor_dictionary_start   ;  8 EDITOR-WORDLIST
>80d0	bd ca				        .word assembler_dictionary_start ; a ASSEMBLER-WORDLIST
>80d2	2c ca				        .word root_dictionary_start     ;  c ROOT-WORDLIST
>80d4	00 00 00 00 00 00 00 00		        .word 0,0,0,0,0,0,0,0           ;  e User wordlists
>80dc	00 00 00 00 00 00 00 00
>80e4	01				        .byte 1                         ; 1e #ORDER
>80e5	00 00 00 00 00 00 00 00		        .byte 0,0,0,0,0,0,0,0,0         ; 1f search-order
>80ed	00
>80ee	00 04				        .word cp0+256                   ; 28 Address of buffer (right after USER vars)
>80f0	00 00				        .word 0                         ; 2a block in buffer
>80f2	00 00				        .word 0                         ; 2c buffer status (not in use)
>80f4	3c 85				        .word xt_block_word_error       ; 2e block-read vector
>80f6	3c 85				        .word xt_block_word_error       ; 30 block-write vector
>80f8	00 00				        .word 0                         ; 32 'COLD
.80fa					cold_user_table_end:
.80fa					xt_abort_quote:
.80fa	20 30 9d	jsr $9d30	                jsr xt_s_quote          ; S"
.80fd	a0 81		ldy #$81	                ldy #>abort_quote_runtime
.80ff	a9 05		lda #$05	                lda #<abort_quote_runtime
.8101	20 b3 d6	jsr $d6b3	                jsr cmpl_subroutine     ; may not be JMP as JSR/RTS
.8104	60		rts		z_abort_quote:  rts
.8105					abort_quote_runtime:
.8105	b5 04		lda $04,x	                lda 4,x
.8107	15 05		ora $05,x	                ora 5,x
.8109	f0 09		beq $8114	                beq _done       ; if FALSE, we're done
.810b	20 e4 a4	jsr $a4e4	                jsr xt_type
.810e	20 44 89	jsr $8944	                jsr xt_cr
.8111	4c 60 80	jmp $8060	                jmp xt_abort    ; not JSR, so never come back
.8114					_done:
.8114	8a		txa		                txa
.8115	18		clc		                clc
.8116	69 06		adc #$06	                adc #6
.8118	aa		tax		                tax
.8119	60		rts		                rts
.811a					xt_abs:
.811a	20 10 d8	jsr $d810	                jsr underflow_1
.811d	b5 01		lda $01,x	                lda 1,x
.811f	10 0d		bpl $812e	                bpl _done       ; positive number, easy money!
.8121	38		sec		                sec
.8122	a9 00		lda #$00	                lda #0
.8124	f5 00		sbc $00,x	                sbc 0,x         ; LSB
.8126	95 00		sta $00,x	                sta 0,x
.8128	a9 00		lda #$00	                lda #0          ; MSB
.812a	f5 01		sbc $01,x	                sbc 1,x
.812c	95 01		sta $01,x	                sta 1,x
.812e					_done:
.812e	60		rts		z_abs:          rts
.812f					xt_accept:
.812f	20 15 d8	jsr $d815	                jsr underflow_2
.8132	b5 00		lda $00,x	                lda 0,x
.8134	15 01		ora $01,x	                ora 1,x
.8136	d0 09		bne $8141	                bne _not_zero
.8138	e8		inx		                inx
.8139	e8		inx		                inx
.813a	74 00		stz $00,x	                stz 0,x
.813c	74 01		stz $01,x	                stz 1,x
.813e	4c 0d 82	jmp $820d	                jmp accept_done
.8141					_not_zero:
.8141	b5 00		lda $00,x	                lda 0,x         ; number of chars to get in tmp2 ...
.8143	85 26		sta $26		                sta tmp2
.8145	64 27		stz $27		                stz tmp2+1      ; ... but we only accept max 255 chars
.8147	b5 02		lda $02,x	                lda 2,x         ; address of buffer is NOS, to tmp1
.8149	85 24		sta $24		                sta tmp1
.814b	b5 03		lda $03,x	                lda 3,x
.814d	85 25		sta $25		                sta tmp1+1
.814f	e8		inx		                inx
.8150	e8		inx		                inx
.8151	a0 00		ldy #$00	                ldy #0
.8153	a5 20		lda $20		                lda status
.8155	29 f7		and #$f7	                and #$f7
.8157	1a		inc a		               ina
.8158	09 08		ora #$08	                ora #$08
.815a	85 20		sta $20		                sta status
.815c					accept_loop:
.815c	20 19 93	jsr $9319	                jsr key_a
.815f	c9 0a		cmp #$0a	                cmp #AscLF
.8161	f0 20		beq $8183	                beq _eol
.8163	c9 0d		cmp #$0d	                cmp #AscCR
.8165	f0 1c		beq $8183	                beq _eol
.8167	c9 08		cmp #$08	                cmp #AscBS
.8169	f0 22		beq $818d	                beq _backspace
.816b	c9 7f		cmp #$7f	                cmp #AscDEL     ; (CTRL-h)
.816d	f0 1e		beq $818d	                beq _backspace
.816f	c9 10		cmp #$10	                cmp #AscCP
.8171	f0 36		beq $81a9	                beq _ctrl_p
.8173	c9 0e		cmp #$0e	                cmp #AscCN
.8175	f0 44		beq $81bb	                beq _ctrl_n
.8177	91 24		sta ($24),y	                sta (tmp1),y
.8179	c8		iny		                iny
.817a	20 d7 8d	jsr $8dd7	                jsr emit_a
.817d	c4 26		cpy $26		                cpy tmp2        ; reached character limit?
.817f	d0 db		bne $815c	                bne accept_loop       ; fall through if buffer limit reached
.8181	80 03		bra $8186	                bra _buffer_full
.8183					_eol:
.8183	20 ff a0	jsr $a0ff	                jsr xt_space    ; print final space
.8186					_buffer_full:
.8186	94 00		sty $00,x	                sty 0,x         ; Y contains number of chars accepted already
.8188	74 01		stz $01,x	                stz 1,x         ; we only accept 256 chars
.818a	4c 0d 82	jmp $820d	                jmp accept_done
.818d					_backspace:
.818d	c0 00		cpy #$00	                cpy #0          ; buffer empty?
.818f	d0 06		bne $8197	                bne +
.8191	a9 07		lda #$07	                lda #AscBELL    ; complain and don't delete beyond the start of line
.8193	20 d7 8d	jsr $8dd7	                jsr emit_a
.8196	c8		iny		                iny
.8197					+
.8197	88		dey		                dey
.8198	a9 08		lda #$08	                lda #AscBS      ; move back one
.819a	20 d7 8d	jsr $8dd7	                jsr emit_a
.819d	a9 20		lda #$20	                lda #AscSP      ; print a space (rubout)
.819f	20 d7 8d	jsr $8dd7	                jsr emit_a
.81a2	a9 08		lda #$08	                lda #AscBS      ; move back over space
.81a4	20 d7 8d	jsr $8dd7	                jsr emit_a
.81a7	80 b3		bra $815c	                bra accept_loop
.81a9					_ctrl_p:
.81a9	a5 20		lda $20		                lda status
.81ab	29 07		and #$07	                and #7
.81ad	d0 08		bne $81b7	                bne _ctrl_p_dec
.81af	a5 20		lda $20		                lda status
.81b1	09 07		ora #$07	                ora #7
.81b3	85 20		sta $20		                sta status
.81b5	80 11		bra $81c8	                bra _recall_history
.81b7					_ctrl_p_dec:
.81b7	c6 20		dec $20		                dec status
.81b9	80 0d		bra $81c8	                bra _recall_history
.81bb					_ctrl_n:
.81bb	a9 08		lda #$08	                lda #$8
.81bd	24 20		bit $20		                bit status
.81bf	d0 07		bne $81c8	                bne _recall_history
.81c1	a5 20		lda $20		                lda status
.81c3	29 f7		and #$f7	                and #$f7
.81c5	1a		inc a		               ina
.81c6	85 20		sta $20		                sta status
.81c8					_recall_history:
.81c8	a9 08		lda #$08	                lda #%00001000
.81ca	14 20		trb $20		                trb status
.81cc	20 28 82	jsr $8228	                jsr accept_total_recall
.81cf	a9 0d		lda #$0d	                lda #AscCR
.81d1	20 d7 8d	jsr $8dd7	                jsr emit_a
.81d4					input_clear:
.81d4	c0 00		cpy #$00	                cpy #0
.81d6	f0 08		beq $81e0	                beq input_cleared
.81d8	a9 20		lda #$20	                lda #AscSP
.81da	20 d7 8d	jsr $8dd7	                jsr emit_a
.81dd	88		dey		                dey
.81de	80 f4		bra $81d4	                bra input_clear
.81e0					input_cleared:
.81e0	a9 0d		lda #$0d	                lda #AscCR
.81e2	20 d7 8d	jsr $8dd7	                jsr emit_a
.81e5	b1 28		lda ($28),y	                lda (tmp3),y
.81e7	85 21		sta $21		                sta status+1
.81e9	e6 28		inc $28		                inc tmp3
.81eb	d0 02		bne $81ef	                bne +           ; Increment the upper byte on carry.
.81ed	e6 29		inc $29		                inc tmp3+1
.81ef					+
.81ef	a9 0d		lda #$0d	                lda #AscCR
.81f1	20 d7 8d	jsr $8dd7	                jsr emit_a
.81f4					_history_loop:
.81f4	c4 21		cpy $21		                cpy status+1
.81f6	d0 03		bne $81fb	                bne +
.81f8	4c 5c 81	jmp $815c	                jmp accept_loop       ; Needs a long jump
.81fb					+
.81fb	c4 26		cpy $26		                cpy tmp2
.81fd	f0 0a		beq $8209	                beq _hist_filled_buffer
.81ff	b1 28		lda ($28),y	                lda (tmp3),y
.8201	91 24		sta ($24),y	                sta (tmp1),y
.8203	20 d7 8d	jsr $8dd7	                jsr emit_a
.8206	c8		iny		                iny
.8207	80 eb		bra $81f4	                bra _history_loop
.8209					_hist_filled_buffer:
.8209	88		dey		                dey
.820a	4c 5c 81	jmp $815c	                jmp accept_loop
.820d					accept_done:
.820d	20 28 82	jsr $8228	                jsr accept_total_recall
.8210	85 21		sta $21		                sta status+1
.8212	a0 00		ldy #$00	                ldy #0
.8214	91 28		sta ($28),y	                sta (tmp3),y
.8216	e6 28		inc $28		                inc tmp3
.8218	d0 02		bne $821c	                bne +           ; Increment the upper byte on carry.
.821a	e6 29		inc $29		                inc tmp3+1
.821c					+
.821c					_save_history_loop:
.821c	c4 21		cpy $21		                cpy status+1
.821e	f0 07		beq $8227	                beq _save_history_done
.8220	b1 24		lda ($24),y	                lda (tmp1),y
.8222	91 28		sta ($28),y	                sta (tmp3),y
.8224	c8		iny		                iny
.8225	80 f5		bra $821c	                bra _save_history_loop
.8227					_save_history_done:
.8227					z_accept:
.8227	60		rts		                rts
.8228					accept_total_recall:
.8228	a9 00		lda #$00	                lda #<hist_buff
.822a	85 28		sta $28		                sta tmp3
.822c	a9 7c		lda #$7c	                lda #>hist_buff
.822e	85 29		sta $29		                sta tmp3+1
.8230	a5 20		lda $20		                lda status
.8232	6a		ror a		                ror
.8233	29 03		and #$03	                and #3
.8235	18		clc		                clc
.8236	65 29		adc $29		                adc tmp3+1
.8238	85 29		sta $29		                sta tmp3+1
.823a	a5 20		lda $20		                lda status
.823c	6a		ror a		                ror             ; Rotate through carry into msb.
.823d	6a		ror a		                ror
.823e	29 80		and #$80	                and #$80
.8240	18		clc		                clc
.8241	65 28		adc $28		                adc tmp3
.8243	85 28		sta $28		                sta tmp3
.8245	90 02		bcc $8249	                bcc +           ; Increment the upper byte on carry.
.8247	e6 29		inc $29		                inc tmp3+1
.8249					+
.8249	98		tya		                tya
.824a	c9 80		cmp #$80	                cmp #$80
.824c	90 02		bcc $8250	                bcc +
.824e	a9 7f		lda #$7f	                lda #$7F
.8250					+
.8250	60		rts		                rts
.8251					xt_action_of:
.8251	a5 16		lda $16		                lda state
.8253	05 17		ora $17		                ora state+1
.8255	f0 0c		beq $8263	                beq _interpreting
.8257					_compiling:
.8257	20 7f 85	jsr $857f	                jsr xt_bracket_tick
.825a	a0 8a		ldy #$8a	                ldy #>xt_defer_fetch
.825c	a9 c0		lda #$c0	                lda #<xt_defer_fetch
.825e	20 b3 d6	jsr $d6b3	                jsr cmpl_subroutine
.8261	80 06		bra $8269	                bra _done
.8263					_interpreting:
.8263	20 f2 a1	jsr $a1f2	                jsr xt_tick
.8266	20 c0 8a	jsr $8ac0	                jsr xt_defer_fetch
.8269					_done:
.8269	60		rts		z_action_of:           rts
.826a					xt_again:
.826a	20 10 d8	jsr $d810	                jsr underflow_1
.826d	a0 00		ldy #$00	                ldy #0
.826f	a9 4c		lda #$4c	                lda #$4C        ; JMP
.8271	91 00		sta ($00),y	                sta (cp),y
.8273	c8		iny		                iny
.8274	b5 00		lda $00,x	                lda 0,x         ; LSB of address
.8276	91 00		sta ($00),y	                sta (cp),y
.8278	c8		iny		                iny
.8279	b5 01		lda $01,x	                lda 1,x         ; MSB of address
.827b	91 00		sta ($00),y	                sta (cp),y
.827d	c8		iny		                iny
.827e	98		tya		                tya
.827f	18		clc		                clc
.8280	65 00		adc $00		                adc cp
.8282	85 00		sta $00		                sta cp
.8284	90 02		bcc $8288	                bcc _done
.8286	e6 01		inc $01		                inc cp+1
.8288					_done:
.8288	e8		inx		                inx
.8289	e8		inx		                inx
.828a	60		rts		z_again:        rts
.828b					xt_align:
.828b					xt_aligned:
.828b					z_align:
.828b	60		rts		z_aligned:      rts             ; stripped out during native compile
.828c					xt_allot:
.828c	20 10 d8	jsr $d810	                jsr underflow_1
.828f	b5 01		lda $01,x	                lda 1,x
.8291	30 22		bmi $82b5	                bmi _release
.8293	18		clc		                clc
.8294	a5 00		lda $00		                lda cp
.8296	75 00		adc $00,x	                adc 0,x
.8298	85 00		sta $00		                sta cp
.829a	a5 01		lda $01		                lda cp+1
.829c	75 01		adc $01,x	                adc 1,x
.829e	85 01		sta $01		                sta cp+1
.82a0	a0 00		ldy #$00	                ldy #<cp_end
.82a2	c4 00		cpy $00		                cpy cp
.82a4	a9 7c		lda #$7c	                lda #>cp_end
.82a6	e5 01		sbc $01		                sbc cp+1
.82a8	b0 48		bcs $82f2	                bcs _done               ; we're fine.
.82aa	84 00		sty $00		                sty cp                  ; still #<cp_end
.82ac	a9 7c		lda #$7c	                lda #>cp_end
.82ae	85 01		sta $01		                sta cp+1
.82b0	a9 00		lda #$00	                lda #err_allot
.82b2	4c 26 d8	jmp $d826	                jmp error
.82b5					_release:
.82b5	ca		dex		                dex
.82b6	ca		dex		                dex
.82b7	a5 00		lda $00		                lda cp
.82b9	95 00		sta $00,x	                sta 0,x
.82bb	a5 01		lda $01		                lda cp+1
.82bd	95 01		sta $01,x	                sta 1,x
.82bf	20 c4 99	jsr $99c4	                jsr xt_plus                     ; new CP is now TOS
.82c2	ca		dex		                dex
.82c3	ca		dex		                dex                             ; new CP now NOS
.82c4	a9 00		lda #$00	                lda #<cp0
.82c6	95 00		sta $00,x	                sta 0,x
.82c8	a9 03		lda #$03	                lda #>cp0
.82ca	95 01		sta $01,x	                sta 1,x                         ; CP0 is TOS
.82cc	20 37 d7	jsr $d737	                jsr compare_16bit               ; still ( CP CP0 )
.82cf	f0 17		beq $82e8	                beq _nega_done
.82d1	30 15		bmi $82e8	                bmi _nega_done
.82d3	a9 00		lda #$00	                lda #<cp0
.82d5	85 00		sta $00		                sta cp
.82d7	a9 03		lda #$03	                lda #>cp0
.82d9	85 01		sta $01		                sta cp+1
.82db	a9 25		lda #$25	                lda #<dictionary_start
.82dd	85 02		sta $02		                sta dp
.82df	a9 bc		lda #$bc	                lda #>dictionary_start
.82e1	85 03		sta $03		                sta dp+1
.82e3	a9 0a		lda #$0a	                lda #err_negallot
.82e5	4c 26 d8	jmp $d826	                jmp error
.82e8					_nega_done:
.82e8	b5 02		lda $02,x	                lda 2,x
.82ea	85 00		sta $00		                sta cp
.82ec	b5 03		lda $03,x	                lda 3,x
.82ee	85 01		sta $01		                sta cp+1
.82f0	e8		inx		                inx
.82f1	e8		inx		                inx                     ; drop through to _done
.82f2					_done:
.82f2	e8		inx		                inx
.82f3	e8		inx		                inx
.82f4					z_allot:
.82f4	60		rts		                rts
.82f5					xt_allow_native:
.82f5	20 52 d7	jsr $d752	                jsr current_to_dp
.82f8	a0 01		ldy #$01	                ldy #1          ; offset for status byte
.82fa	b1 02		lda ($02),y	                lda (dp),y
.82fc	29 f5		and #$f5	                and #$ff-NN-AN  ; AN and NN flag is clear.
.82fe	91 02		sta ($02),y	                sta (dp),y
.8300					z_allow_native:
.8300	60		rts		                rts
.8301					xt_also:
.8301	20 15 91	jsr $9115	                jsr xt_get_order
.8304	20 74 98	jsr $9874	                jsr xt_over
.8307	20 8f a1	jsr $a18f	                jsr xt_swap
.830a	20 fe 97	jsr $97fe	                jsr xt_one_plus
.830d	20 fc 9c	jsr $9cfc	                jsr xt_set_order
.8310	60		rts		z_also:         rts
.8311					xt_always_native:
.8311	20 52 d7	jsr $d752	                jsr current_to_dp
.8314	a0 01		ldy #$01	                ldy #1          ; offset for status byte
.8316	b1 02		lda ($02),y	                lda (dp),y
.8318	09 02		ora #$02	                ora #AN         ; Make sure AN flag is set
.831a	29 f7		and #$f7	                and #$ff-NN     ; and NN flag is clear.
.831c	91 02		sta ($02),y	                sta (dp),y
.831e					z_always_native:
.831e	60		rts		                rts
.831f					xt_and:
.831f	20 15 d8	jsr $d815	                jsr underflow_2
.8322	b5 00		lda $00,x	                lda 0,x
.8324	35 02		and $02,x	                and 2,x
.8326	95 02		sta $02,x	                sta 2,x
.8328	b5 01		lda $01,x	                lda 1,x
.832a	35 03		and $03,x	                and 3,x
.832c	95 03		sta $03,x	                sta 3,x
.832e	e8		inx		                inx
.832f	e8		inx		                inx
.8330	60		rts		z_and:          rts
.8331					xt_at_xy:
.8331	20 15 d8	jsr $d815	                jsr underflow_2
.8334	a5 18		lda $18		                lda base
.8336	48		pha		                pha
.8337	a9 0a		lda #$0a	                lda #10
.8339	85 18		sta $18		                sta base
.833b	a9 1b		lda #$1b	                lda #AscESC
.833d	20 d7 8d	jsr $8dd7	                jsr emit_a
.8340	a9 5b		lda #$5b	                lda #$5B        ; ASCII for "["
.8342	20 d7 8d	jsr $8dd7	                jsr emit_a
.8345	20 fe 97	jsr $97fe	                jsr xt_one_plus ; AT-XY is zero based, but ANSI is 1 based
.8348	20 5c d8	jsr $d85c	                jsr print_u
.834b	a9 3b		lda #$3b	                lda #$3B        ; ASCII for ";"
.834d	20 d7 8d	jsr $8dd7	                jsr emit_a
.8350	20 fe 97	jsr $97fe	                jsr xt_one_plus ; AT-XY is zero based, but ANSI is 1 based
.8353	20 5c d8	jsr $d85c	                jsr print_u
.8356	a9 48		lda #$48	                lda #'H'
.8358	20 d7 8d	jsr $8dd7	                jsr emit_a
.835b	68		pla		                pla
.835c	85 18		sta $18		                sta base
.835e	60		rts		z_at_xy:        rts
.835f					xt_backslash:
.835f	a5 0a		lda $0a		                lda ciblen
.8361	85 0c		sta $0c		                sta toin
.8363	a5 0b		lda $0b		                lda ciblen+1
.8365	85 0d		sta $0d		                sta toin+1
.8367	60		rts		z_backslash:    rts
.8368					xt_base:
.8368	ca		dex		                dex
.8369	ca		dex		                dex
.836a	a9 18		lda #$18	                lda #<base
.836c	95 00		sta $00,x	                sta 0,x         ; LSB
.836e	74 01		stz $01,x	                stz 1,x         ; MSB is always 0
.8370	60		rts		z_base:         rts
.8371					xt_begin:
.8371	20 53 91	jsr $9153	                jsr xt_here
.8374	60		rts		z_begin:        rts
.8375					xt_bell:
.8375	a9 07		lda #$07	                lda #7          ; ASCII value for BELl
.8377	20 d7 8d	jsr $8dd7	                jsr emit_a
.837a	60		rts		z_bell:         rts
.837b					xt_bl:
.837b	ca		dex		                dex
.837c	ca		dex		                dex
.837d	a9 20		lda #$20	                lda #AscSP
.837f	95 00		sta $00,x	                sta 0,x
.8381	74 01		stz $01,x	                stz 1,x
.8383	60		rts		z_bl:           rts
.8384					xt_blk:
.8384	ca		dex		                dex
.8385	ca		dex		                dex
.8386	18		clc		                clc
.8387	a5 1e		lda $1e		                lda up
.8389	69 00		adc #$00	                adc #blk_offset ; Add offset
.838b	95 00		sta $00,x	                sta 0,x
.838d	a5 1f		lda $1f		                lda up+1
.838f	69 00		adc #$00	                adc #0          ; Adding carry
.8391	95 01		sta $01,x	                sta 1,x
.8393	60		rts		z_blk:          rts
.8394					xt_blkbuffer:
.8394	ca		dex		                dex
.8395	ca		dex		                dex
.8396	a0 28		ldy #$28	                ldy #blkbuffer_offset
.8398	b1 1e		lda ($1e),y	                lda (up),y
.839a	95 00		sta $00,x	                sta 0,x
.839c	c8		iny		                iny             ; Move along to the next byte
.839d	b1 1e		lda ($1e),y	                lda (up),y
.839f	95 01		sta $01,x	                sta 1,x
.83a1	60		rts		z_blkbuffer:    rts
.83a2					xt_block:
.83a2	a0 2a		ldy #$2a	                ldy #buffblocknum_offset
.83a4	b1 1e		lda ($1e),y	                lda (up),y
.83a6	d5 00		cmp $00,x	                cmp 0,x
.83a8	d0 0f		bne $83b9	                bne _not_in_buffer
.83aa	c8		iny		                iny
.83ab	b1 1e		lda ($1e),y	                lda (up),y
.83ad	d5 01		cmp $01,x	                cmp 1,x
.83af	d0 08		bne $83b9	                bne _not_in_buffer
.83b1	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.83b3	b1 1e		lda ($1e),y	                lda (up),y
.83b5	29 01		and #$01	                and #1          ; Check the in-use flag (bit 0)
.83b7	d0 30		bne $83e9	                bne _done       ; It's already in the buffer and in use.
.83b9					_not_in_buffer:
.83b9	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.83bb	b1 1e		lda ($1e),y	                lda (up),y      ; Only bits 0 and 1 are used, so only
.83bd	c9 03		cmp #$03	                cmp #3          ; LSB is needed.
.83bf	d0 0c		bne $83cd	                bne _buffer_available ; Unused or not dirty = available
.83c1	20 94 83	jsr $8394	                jsr xt_blkbuffer
.83c4	20 86 85	jsr $8586	                jsr xt_buffblocknum
.83c7	20 61 8f	jsr $8f61	                jsr xt_fetch
.83ca	20 41 85	jsr $8541	                jsr xt_block_write
.83cd					_buffer_available:
.83cd	a0 2a		ldy #$2a	                ldy #buffblocknum_offset
.83cf	b5 00		lda $00,x	                lda 0,x
.83d1	91 1e		sta ($1e),y	                sta (up),y
.83d3	c8		iny		                iny
.83d4	b5 01		lda $01,x	                lda 1,x
.83d6	91 1e		sta ($1e),y	                sta (up),y
.83d8	20 94 83	jsr $8394	                jsr xt_blkbuffer
.83db	20 8f a1	jsr $a18f	                jsr xt_swap
.83de	20 1e 85	jsr $851e	                jsr xt_block_read
.83e1	a9 01		lda #$01	                lda #1
.83e3	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.83e5	91 1e		sta ($1e),y	                sta (up),y
.83e7	ca		dex		                dex
.83e8	ca		dex		                dex
.83e9					_done:
.83e9	a0 28		ldy #$28	                ldy #blkbuffer_offset
.83eb	b1 1e		lda ($1e),y	                lda (up),y
.83ed	95 00		sta $00,x	                sta 0,x
.83ef	c8		iny		                iny
.83f0	b1 1e		lda ($1e),y	                lda (up),y
.83f2	95 01		sta $01,x	                sta 1,x
.83f4	60		rts		z_block:        rts
.83f5					xt_block_ramdrive_init:
.83f5	20 10 d8	jsr $d810	                jsr underflow_1
.83f8	4c 13 85	jmp $8513	                jmp _after_ramdrive_code
.83fb					_ramdrive_code:
>83fb	62 61 73 65 20 40 20 73		        .text "base @ swap decimal"
>8403	77 61 70 20 64 65 63 69 6d 61 6c
>840e	20 31 30 32 34 20 2a		        .text " 1024 *" ; ( Calculate how many bytes are needed for numblocks blocks )
>8415	20 64 75 70			        .text " dup"    ; ( Save a copy for formatting it at the end )
>8419	20 62 75 66 66 65 72 3a		        .text " buffer: ramdrive" ; ( Create ramdrive )
>8421	20 72 61 6d 64 72 69 76 65
>842a	20 3a 20 62 6c 6f 63 6b		        .text " : block-read-ramdrive"  ; ( addr u -- )
>8432	2d 72 65 61 64 2d 72 61 6d 64 72 69 76 65
>8440	20 72 61 6d 64 72 69 76		        .text " ramdrive swap 1024 * + swap 1024 move ;"
>8448	65 20 73 77 61 70 20 31 30 32 34 20 2a 20 2b 20
>8458	73 77 61 70 20 31 30 32 34 20 6d 6f 76 65 20 3b
>8468	20 3a 20 62 6c 6f 63 6b		        .text " : block-write-ramdrive" ; ( addr u -- )
>8470	2d 77 72 69 74 65 2d 72 61 6d 64 72 69 76 65
>847f	20 72 61 6d 64 72 69 76		        .text " ramdrive swap 1024 * + 1024 move ;"
>8487	65 20 73 77 61 70 20 31 30 32 34 20 2a 20 2b 20
>8497	31 30 32 34 20 6d 6f 76 65 20 3b
>84a2	20 27 20 62 6c 6f 63 6b		        .text " ' block-read-ramdrive block-read-vector !" ; ( Replace I/O vectors )
>84aa	2d 72 65 61 64 2d 72 61 6d 64 72 69 76 65 20 62
>84ba	6c 6f 63 6b 2d 72 65 61 64 2d 76 65 63 74 6f 72
>84ca	20 21
>84cc	20 27 20 62 6c 6f 63 6b		        .text " ' block-write-ramdrive block-write-vector !"
>84d4	2d 77 72 69 74 65 2d 72 61 6d 64 72 69 76 65 20
>84e4	62 6c 6f 63 6b 2d 77 72 69 74 65 2d 76 65 63 74
>84f4	6f 72 20 21
>84f8	20 72 61 6d 64 72 69 76		        .text " ramdrive swap blank base !"
>8500	65 20 73 77 61 70 20 62 6c 61 6e 6b 20 62 61 73
>8510	65 20 21
.8513					_after_ramdrive_code:
.8513	20 8a a0	jsr $a08a	                jsr sliteral_runtime
>8516	fb 83 18 01			.word _ramdrive_code, _after_ramdrive_code-_ramdrive_code
.851a	20 b6 90	jsr $90b6	                jsr xt_evaluate
.851d					z_block_ramdrive_init:
.851d	60		rts		                rts
.851e					xt_block_read:
.851e	a0 2e		ldy #$2e	                ldy #blockread_offset
.8520	b1 1e		lda ($1e),y	                lda (up),y
.8522	85 24		sta $24		                sta tmp1
.8524	c8		iny		                iny
.8525	b1 1e		lda ($1e),y	                lda (up),y
.8527	85 25		sta $25		                sta tmp1+1
.8529	6c 24 00	jmp ($0024)	                jmp (tmp1)
.852c					z_block_read:
.852c					xt_block_read_vector:
.852c	ca		dex		                dex
.852d	ca		dex		                dex
.852e	18		clc		                clc
.852f	a5 1e		lda $1e		                lda up
.8531	69 2e		adc #$2e	                adc #blockread_offset
.8533	95 00		sta $00,x	                sta 0,x
.8535	a5 1f		lda $1f		                lda up+1
.8537	69 00		adc #$00	                adc #0          ; Add carry
.8539	95 01		sta $01,x	                sta 1,x
.853b					z_block_read_vector:
.853b	60		rts		                rts
.853c					xt_block_word_error:
.853c	a9 0c		lda #$0c	                lda #err_blockwords
.853e	4c 26 d8	jmp $d826	                jmp error       ; no RTS needed
.8541					z_block_word_error:
.8541					xt_block_write:
.8541	a0 30		ldy #$30	                ldy #blockwrite_offset
.8543	b1 1e		lda ($1e),y	                lda (up),y
.8545	85 24		sta $24		                sta tmp1
.8547	c8		iny		                iny
.8548	b1 1e		lda ($1e),y	                lda (up),y
.854a	85 25		sta $25		                sta tmp1+1
.854c	6c 24 00	jmp ($0024)	                jmp (tmp1)
.854f					z_block_write:
.854f					xt_block_write_vector:
.854f	ca		dex		                dex
.8550	ca		dex		                dex
.8551	18		clc		                clc
.8552	a5 1e		lda $1e		                lda up
.8554	69 30		adc #$30	                adc #blockwrite_offset
.8556	95 00		sta $00,x	                sta 0,x
.8558	a5 1f		lda $1f		                lda up+1
.855a	69 00		adc #$00	                adc #0          ; Add carry
.855c	95 01		sta $01,x	                sta 1,x
.855e					z_block_write_vector:
.855e	60		rts		                rts
.855f					xt_bounds:
.855f	20 15 d8	jsr $d815	                jsr underflow_2
.8562	18		clc		                clc
.8563	b5 00		lda $00,x	                lda 0,x                 ; LSB u
.8565	b4 02		ldy $02,x	                ldy 2,x                 ; LSB addr
.8567	75 02		adc $02,x	                adc 2,x
.8569	95 02		sta $02,x	                sta 2,x                 ; LSB addr+u
.856b	94 00		sty $00,x	                sty 0,x
.856d	b5 01		lda $01,x	                lda 1,x                 ; MSB u
.856f	b4 03		ldy $03,x	                ldy 3,x                 ; MSB addr
.8571	75 03		adc $03,x	                adc 3,x
.8573	95 03		sta $03,x	                sta 3,x                 ; MSB addr+u
.8575	94 01		sty $01,x	                sty 1,x
.8577	60		rts		z_bounds:       rts
.8578					xt_bracket_char:
.8578	20 12 86	jsr $8612	                jsr xt_char
.857b	20 6b 93	jsr $936b	                jsr xt_literal
.857e	60		rts		z_bracket_char: rts
.857f					xt_bracket_tick:
.857f	20 f2 a1	jsr $a1f2	                jsr xt_tick
.8582	20 6b 93	jsr $936b	                jsr xt_literal
.8585	60		rts		z_bracket_tick: rts
.8586					xt_buffblocknum:
.8586	ca		dex		                dex
.8587	ca		dex		                dex
.8588	18		clc		                clc
.8589	a5 1e		lda $1e		                lda up
.858b	69 2a		adc #$2a	                adc #buffblocknum_offset        ; Add offset
.858d	95 00		sta $00,x	                sta 0,x
.858f	a5 1f		lda $1f		                lda up+1
.8591	69 00		adc #$00	                adc #0                          ; Adding carry
.8593	95 01		sta $01,x	                sta 1,x
.8595	60		rts		z_buffblocknum: rts
.8596					xt_buffer:
.8596	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.8598	b1 1e		lda ($1e),y	                lda (up),y      ; Only bits 0 and 1 are used, so only
.859a	c9 03		cmp #$03	                cmp #3          ; LSB is needed.
.859c	d0 0c		bne $85aa	                bne _buffer_available ; Unused or not dirty = available
.859e	20 94 83	jsr $8394	                jsr xt_blkbuffer
.85a1	20 86 85	jsr $8586	                jsr xt_buffblocknum
.85a4	20 61 8f	jsr $8f61	                jsr xt_fetch
.85a7	20 41 85	jsr $8541	                jsr xt_block_write
.85aa					_buffer_available:
.85aa	a0 2a		ldy #$2a	                ldy #buffblocknum_offset
.85ac	b5 00		lda $00,x	                lda 0,x
.85ae	91 1e		sta ($1e),y	                sta (up),y
.85b0	c8		iny		                iny
.85b1	b5 01		lda $01,x	                lda 1,x
.85b3	91 1e		sta ($1e),y	                sta (up),y
.85b5	a9 01		lda #$01	                lda #1
.85b7	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.85b9	91 1e		sta ($1e),y	                sta (up),y
.85bb					_done:
.85bb	a0 28		ldy #$28	                ldy #blkbuffer_offset
.85bd	b1 1e		lda ($1e),y	                lda (up),y
.85bf	95 00		sta $00,x	                sta 0,x
.85c1	c8		iny		                iny
.85c2	b1 1e		lda ($1e),y	                lda (up),y
.85c4	95 01		sta $01,x	                sta 1,x
.85c6	60		rts		z_buffer:       rts
.85c7					xt_buffer_colon:
.85c7	20 4a 89	jsr $894a	                jsr xt_create
.85ca	20 8c 82	jsr $828c	                jsr xt_allot
.85cd	60		rts		z_buffer_colon: rts
.85ce					xt_buffstatus:
.85ce	ca		dex		                dex
.85cf	ca		dex		                dex
.85d0	18		clc		                clc
.85d1	a5 1e		lda $1e		                lda up
.85d3	69 2c		adc #$2c	                adc #buffstatus_offset  ; Add offset
.85d5	95 00		sta $00,x	                sta 0,x
.85d7	a5 1f		lda $1f		                lda up+1
.85d9	69 00		adc #$00	                adc #0                  ; Adding carry
.85db	95 01		sta $01,x	                sta 1,x
.85dd	60		rts		z_buffstatus:   rts
.85de					xt_bye:
.85de	4c 2b f0	jmp $f02b	                jmp platform_bye
.85e1					z_bye:
.85e1					xt_c_comma:
.85e1	20 10 d8	jsr $d810	                jsr underflow_1
.85e4	b5 00		lda $00,x	                lda 0,x
.85e6	20 c3 d6	jsr $d6c3	                jsr cmpl_a
.85e9	e8		inx		                inx
.85ea	e8		inx		                inx
.85eb	60		rts		z_c_comma:      rts
.85ec					xt_c_fetch:
.85ec	20 10 d8	jsr $d810	                jsr underflow_1
.85ef	a1 00		lda ($00,x)	                lda (0,x)
.85f1	95 00		sta $00,x	                sta 0,x
.85f3	74 01		stz $01,x	                stz 1,x         ; Ignore LSB
.85f5	60		rts		z_c_fetch:      rts
.85f6					xt_c_store:
.85f6	20 15 d8	jsr $d815	                jsr underflow_2
.85f9	b5 02		lda $02,x	                lda 2,x
.85fb	81 00		sta ($00,x)	                sta (0,x)
.85fd	e8		inx		                inx
.85fe	e8		inx		                inx
.85ff	e8		inx		                inx
.8600	e8		inx		                inx
.8601	60		rts		z_c_store:      rts
.8602					xt_cell_plus:
.8602	20 10 d8	jsr $d810	                jsr underflow_1
.8605	f6 00		inc $00,x	                inc 0,x
.8607	d0 02		bne $860b	                bne +
.8609	f6 01		inc $01,x	                inc 1,x
.860b					+
.860b	f6 00		inc $00,x	                inc 0,x
.860d	d0 02		bne $8611	                bne _done
.860f	f6 01		inc $01,x	                inc 1,x
.8611					_done:
.8611	60		rts		z_cell_plus:    rts
.8612					xt_char:
.8612	20 c0 98	jsr $98c0	                jsr xt_parse_name
.8615	b5 00		lda $00,x	                lda 0,x
.8617	15 01		ora $01,x	                ora 1,x
.8619	d0 05		bne $8620	                bne _not_empty
.861b	a9 05		lda #$05	                lda #err_noname
.861d	4c 26 d8	jmp $d826	                jmp error
.8620					_not_empty:
.8620	e8		inx		                inx             ; drop number of characters, leave addr
.8621	e8		inx		                inx
.8622	a1 00		lda ($00,x)	                lda (0,x)       ; get character (equivalent to C@)
.8624	95 00		sta $00,x	                sta 0,x
.8626	74 01		stz $01,x	                stz 1,x         ; MSB is always zero
.8628	60		rts		z_char:         rts
.8629					xt_chars:
.8629	20 10 d8	jsr $d810	                jsr underflow_1
.862c	60		rts		z_chars:        rts
.862d					xt_cleave:
.862d	20 15 d8	jsr $d815	                jsr underflow_2
.8630	20 44 95	jsr $9544	                jsr xt_minus_leading    ; -LEADING ( addr u )
.8633	20 43 92	jsr $9243	                jsr xt_input_to_r       ; save old imput state
.8636	b5 00		lda $00,x	                lda 0,x         ; u is new ciblen
.8638	85 0a		sta $0a		                sta ciblen
.863a	b5 01		lda $01,x	                lda 1,x
.863c	85 0b		sta $0b		                sta ciblen+1
.863e	b5 02		lda $02,x	                lda 2,x         ; addr is new cib
.8640	85 08		sta $08		                sta cib
.8642	b5 03		lda $03,x	                lda 3,x
.8644	85 09		sta $09		                sta cib+1
.8646	64 0c		stz $0c		                stz toin        ; >IN pointer is zero
.8648	64 0d		stz $0d		                stz toin+1
.864a	20 c0 98	jsr $98c0	                jsr xt_parse_name       ; ( addr u addr-s u-s )
.864d	b5 00		lda $00,x	                lda 0,x
.864f	15 01		ora $01,x	                ora 1,x
.8651	f0 23		beq $8676	                beq _done
.8653	b5 04		lda $04,x	                lda 4,x         ; LSB of original u
.8655	38		sec		                sec
.8656	f5 00		sbc $00,x	                sbc 0,x
.8658	95 04		sta $04,x	                sta 4,x
.865a	b5 05		lda $05,x	                lda 5,x         ; MSB of original u
.865c	f5 01		sbc $01,x	                sbc 1,x
.865e	95 05		sta $05,x	                sta 5,x
.8660	b5 06		lda $06,x	                lda 6,x         ; LSB of original addr
.8662	18		clc		                clc
.8663	75 00		adc $00,x	                adc 0,x
.8665	95 06		sta $06,x	                sta 6,x
.8667	b5 07		lda $07,x	                lda 7,x         ; MSB of original addr
.8669	75 01		adc $01,x	                adc 1,x
.866b	95 07		sta $07,x	                sta 7,x
.866d	20 5f a4	jsr $a45f	                jsr xt_two_swap         ; ( addr-s u-s addr u )
.8670	20 44 95	jsr $9544	                jsr xt_minus_leading
.8673	20 5f a4	jsr $a45f	                jsr xt_two_swap         ; ( addr u addr-s u-s )
.8676					_done:
.8676	20 84 9a	jsr $9a84	                jsr xt_r_to_input
.8679	60		rts		z_cleave:       rts
.867a					xt_cmove:
.867a	20 1a d8	jsr $d81a	                jsr underflow_3
.867d	b5 02		lda $02,x	                lda 2,x
.867f	85 26		sta $26		                sta tmp2        ; use tmp2 because easier to remember
.8681	b5 03		lda $03,x	                lda 3,x
.8683	85 27		sta $27		                sta tmp2+1
.8685	b5 04		lda $04,x	                lda 4,x
.8687	85 24		sta $24		                sta tmp1        ; use tmp1 because easier to remember
.8689	b5 05		lda $05,x	                lda 5,x
.868b	85 25		sta $25		                sta tmp1+1
.868d	a0 00		ldy #$00	                ldy #0
.868f	b5 01		lda $01,x	                lda 1,x         ; number of whole pages to move
.8691	f0 0f		beq $86a2	                beq _dopartial
.8693					_page:
.8693	b1 24		lda ($24),y	                lda (tmp1),y
.8695	91 26		sta ($26),y	                sta (tmp2),y
.8697	c8		iny		                iny
.8698	d0 f9		bne $8693	                bne _page
.869a	e6 25		inc $25		                inc tmp1+1
.869c	e6 27		inc $27		                inc tmp2+1
.869e	d6 01		dec $01,x	                dec 1,x
.86a0	d0 f1		bne $8693	                bne _page
.86a2					_dopartial:
.86a2	b5 00		lda $00,x	                lda 0,x         ; length of last page
.86a4	f0 09		beq $86af	                beq _done
.86a6					_partial:
.86a6	b1 24		lda ($24),y	                lda (tmp1),y
.86a8	91 26		sta ($26),y	                sta (tmp2),y
.86aa	c8		iny		                iny
.86ab	d6 00		dec $00,x	                dec 0,x
.86ad	d0 f7		bne $86a6	                bne _partial
.86af					_done:
.86af	8a		txa		                txa
.86b0	18		clc		                clc
.86b1	69 06		adc #$06	                adc #6
.86b3	aa		tax		                tax
.86b4	60		rts		z_cmove:        rts
.86b5					xt_cmove_up:
.86b5	20 1a d8	jsr $d81a	                jsr underflow_3
.86b8	b5 02		lda $02,x	                lda 2,x
.86ba	85 26		sta $26		                sta tmp2        ; use tmp2 because easier to remember
.86bc	b5 03		lda $03,x	                lda 3,x
.86be	18		clc		                clc
.86bf	75 01		adc $01,x	                adc 1,x
.86c1	85 27		sta $27		                sta tmp2+1      ; point to last page of destination
.86c3	b5 04		lda $04,x	                lda 4,x
.86c5	85 24		sta $24		                sta tmp1        ; use tmp1 because easier to remember
.86c7	b5 05		lda $05,x	                lda 5,x
.86c9	18		clc		                clc
.86ca	75 01		adc $01,x	                adc 1,x
.86cc	85 25		sta $25		                sta tmp1+1      ; point to last page of source
.86ce	f6 01		inc $01,x	                inc 1,x         ; allows us to use bne with dec 1,x below
.86d0	b4 00		ldy $00,x	                ldy 0,x         ; length of last page
.86d2	f0 0e		beq $86e2	                beq _nopartial
.86d4					_outerloop:
.86d4	88		dey		                dey
.86d5	f0 07		beq $86de	                beq _finishpage
.86d7					_innerloop:
.86d7	b1 24		lda ($24),y	                lda (tmp1),y
.86d9	91 26		sta ($26),y	                sta (tmp2),y
.86db	88		dey		                dey
.86dc	d0 f9		bne $86d7	                bne _innerloop
.86de					_finishpage:
.86de	b2 24		lda ($24)	                lda (tmp1)      ; handle y = 0 separately
.86e0	92 26		sta ($26)	                sta (tmp2)
.86e2					_nopartial:
.86e2	c6 25		dec $25		                dec tmp1+1      ; back up to previous pages
.86e4	c6 27		dec $27		                dec tmp2+1
.86e6	d6 01		dec $01,x	                dec 1,x
.86e8	d0 ea		bne $86d4	                bne _outerloop
.86ea					_done:
.86ea	8a		txa		                txa
.86eb	18		clc		                clc
.86ec	69 06		adc #$06	                adc #6
.86ee	aa		tax		                tax
.86ef	60		rts		z_cmove_up:     rts
.86f0					xt_colon:
.86f0	a5 16		lda $16		                lda state
.86f2	05 17		ora $17		                ora state+1
.86f4	f0 05		beq $86fb	                beq +
.86f6	a9 07		lda #$07	                lda #err_state
.86f8	4c 26 d8	jmp $d826	                jmp error
.86fb					+
.86fb	c6 16		dec $16		                dec state
.86fd	c6 17		dec $17		                dec state+1
.86ff	a9 40		lda #$40	                lda #%01000000
.8701	04 20		tsb $20		                tsb status
.8703	20 52 d7	jsr $d752	                jsr current_to_dp
.8706	a5 03		lda $03		                lda dp+1            ; CREATE uses a lot of variables
.8708	48		pha		                pha
.8709	a5 02		lda $02		                lda dp
.870b	48		pha		                pha
.870c	a9 80		lda #$80	                lda #%10000000
.870e	04 20		tsb $20		                tsb status
.8710	20 4a 89	jsr $894a	                jsr xt_create
.8713	20 52 d7	jsr $d752	                jsr current_to_dp   ; This might be able to be omitted
.8716	a5 02		lda $02		                lda dp
.8718	85 04		sta $04		                sta workword
.871a	a5 03		lda $03		                lda dp+1
.871c	85 05		sta $05		                sta workword+1
.871e	68		pla		                pla
.871f	85 02		sta $02		                sta dp
.8721	68		pla		                pla
.8722	85 03		sta $03		                sta dp+1
.8724	20 65 d7	jsr $d765	                jsr dp_to_current
.8727	a5 00		lda $00		                lda cp
.8729	38		sec		                sec
.872a	e9 03		sbc #$03	                sbc #3
.872c	85 00		sta $00		                sta cp
.872e	b0 02		bcs $8732	                bcs _done
.8730	c6 01		dec $01		                dec cp+1
.8732					_done:
.8732	60		rts		z_colon:        rts
.8733					xt_colon_noname:
.8733	a5 16		lda $16		                lda state
.8735	05 17		ora $17		                ora state+1
.8737	f0 05		beq $873e	                beq +
.8739	a9 07		lda #$07	                lda #err_state
.873b	4c 26 d8	jmp $d826	                jmp error
.873e					+
.873e	c6 16		dec $16		                dec state
.8740	c6 17		dec $17		                dec state+1
.8742	a9 40		lda #$40	                lda #%01000000
.8744	14 20		trb $20		                trb status
.8746	a5 00		lda $00		                lda cp
.8748	85 04		sta $04		                sta workword
.874a	a5 01		lda $01		                lda cp+1
.874c	85 05		sta $05		                sta workword+1
.874e					_done:
.874e	60		rts		z_colon_noname:        rts
.874f					xt_comma:
.874f	20 10 d8	jsr $d810	                jsr underflow_1
.8752	b5 00		lda $00,x	                lda 0,x
.8754	92 00		sta ($00)	                sta (cp)
.8756	e6 00		inc $00		                inc cp
.8758	d0 02		bne $875c	                bne +
.875a	e6 01		inc $01		                inc cp+1
.875c					+
.875c	b5 01		lda $01,x	                lda 1,x
.875e	92 00		sta ($00)	                sta (cp)
.8760	e6 00		inc $00		                inc cp
.8762	d0 02		bne $8766	                bne _done
.8764	e6 01		inc $01		                inc cp+1
.8766					_done:
.8766	e8		inx		                inx
.8767	e8		inx		                inx
.8768	60		rts		z_comma:        rts
.8769					xt_compare:
.8769	20 1f d8	jsr $d81f	                jsr underflow_4
.876c	b5 02		lda $02,x	                lda 2,x
.876e	85 26		sta $26		                sta tmp2
.8770	b5 03		lda $03,x	                lda 3,x
.8772	85 27		sta $27		                sta tmp2+1
.8774	b5 06		lda $06,x	                lda 6,x
.8776	85 24		sta $24		                sta tmp1
.8778	b5 07		lda $07,x	                lda 7,x
.877a	85 25		sta $25		                sta tmp1+1
.877c					_compare_loop:
.877c	b5 04		lda $04,x	                lda 4,x
.877e	15 05		ora $05,x	                ora 5,x
.8780	f0 2c		beq $87ae	                beq _str1_done
.8782	b5 00		lda $00,x	                lda 0,x
.8784	15 01		ora $01,x	                ora 1,x
.8786	f0 3a		beq $87c2	                beq _greater    ; Str2 empty first
.8788					_check_letter:
.8788	b2 24		lda ($24)	                lda (tmp1)
.878a	d2 26		cmp ($26)	                cmp (tmp2)
.878c	90 26		bcc $87b4	                bcc _less
.878e	d0 32		bne $87c2	                bne _greater
.8790					_next_letter:
.8790	e6 24		inc $24		                inc tmp1
.8792	d0 02		bne $8796	                bne +
.8794	e6 25		inc $25		                inc tmp1+1
.8796					+
.8796	e6 26		inc $26		                inc tmp2
.8798	d0 02		bne $879c	                bne +
.879a	e6 27		inc $27		                inc tmp2+1
.879c					+
.879c	b5 04		lda $04,x	                lda 4,x
.879e	d0 02		bne $87a2	                bne +
.87a0	d6 05		dec $05,x	                dec 5,x
.87a2					+
.87a2	d6 04		dec $04,x	                dec 4,x
.87a4	b5 00		lda $00,x	                lda 0,x
.87a6	d0 02		bne $87aa	                bne +
.87a8	d6 01		dec $01,x	                dec 1,x
.87aa					+
.87aa	d6 00		dec $00,x	                dec 0,x
.87ac	80 ce		bra $877c	                bra _compare_loop
.87ae					_str1_done:
.87ae	b5 00		lda $00,x	                lda 0,x
.87b0	15 01		ora $01,x	                ora 1,x
.87b2	f0 08		beq $87bc	                beq _equal      ; Both out of letters
.87b4					_less:
.87b4	a9 ff		lda #$ff	                lda #$FF
.87b6	95 06		sta $06,x	                sta 6,x
.87b8	95 07		sta $07,x	                sta 7,x
.87ba	80 0c		bra $87c8	                bra _done
.87bc					_equal:
.87bc	74 06		stz $06,x	                stz 6,x
.87be	74 07		stz $07,x	                stz 7,x
.87c0	80 06		bra $87c8	                bra _done
.87c2					_greater:
.87c2	a9 01		lda #$01	                lda #1
.87c4	95 06		sta $06,x	                sta 6,x
.87c6	74 07		stz $07,x	                stz 7,x
.87c8					_done:
.87c8	8a		txa		                txa
.87c9	18		clc		                clc
.87ca	69 06		adc #$06	                adc #6
.87cc	aa		tax		                tax
.87cd	60		rts		z_compare:      rts
.87ce					xt_compile_comma:
.87ce	20 10 d8	jsr $d810	                jsr underflow_1
.87d1	b5 01		lda $01,x	                lda 1,x                 ; MSB
.87d3	48		pha		                pha
.87d4	b5 00		lda $00,x	                lda 0,x
.87d6	48		pha		                pha                     ; LSB
.87d7	20 59 92	jsr $9259	                jsr xt_int_to_name      ; ( xt -- nt )
.87da	b5 00		lda $00,x	                lda 0,x
.87dc	15 01		ora $01,x	                ora 1,x
.87de	d0 03		bne $87e3	                bne _check_nt
.87e0	4c cb 88	jmp $88cb	                jmp _compile_as_jump
.87e3					_check_nt:
.87e3	b5 00		lda $00,x	                lda 0,x
.87e5	85 2c		sta $2c		                sta tmptos
.87e7	b5 01		lda $01,x	                lda 1,x
.87e9	85 2d		sta $2d		                sta tmptos+1
.87eb	f6 00		inc $00,x	                inc 0,x
.87ed	d0 02		bne $87f1	                bne +
.87ef	f6 01		inc $01,x	                inc 1,x                 ; ( nt -- nt+1 )
.87f1					+
.87f1	a1 00		lda ($00,x)	                lda (0,x)
.87f3	85 28		sta $28		                sta tmp3                ; keep copy of status byte for NN
.87f5	29 02		and #$02	                and #AN                 ; mask all but Always Native (AN) bit
.87f7	f0 0d		beq $8806	                beq _compile_check
.87f9	a5 2c		lda $2c		                lda tmptos
.87fb	95 00		sta $00,x	                sta 0,x
.87fd	a5 2d		lda $2d		                lda tmptos+1
.87ff	95 01		sta $01,x	                sta 1,x
.8801	20 56 a7	jsr $a756	                jsr xt_wordsize         ; ( nt -- u )
.8804	80 27		bra $882d	                bra _compile_as_code
.8806					_compile_check:
.8806	a5 28		lda $28		                lda tmp3
.8808	29 08		and #$08	                and #NN
.880a	f0 03		beq $880f	                beq _check_size_limit
.880c	4c cb 88	jmp $88cb	                jmp _compile_as_jump    ; too far for BRA
.880f					_check_size_limit:
.880f	a5 2c		lda $2c		                lda tmptos
.8811	95 00		sta $00,x	                sta 0,x
.8813	a5 2d		lda $2d		                lda tmptos+1
.8815	95 01		sta $01,x	                sta 1,x
.8817	20 56 a7	jsr $a756	                jsr xt_wordsize         ; ( nt -- u )
.881a	b5 01		lda $01,x	                lda 1,x
.881c	c5 1b		cmp $1b		                cmp nc_limit+1
.881e	90 0d		bcc $882d	                bcc _compile_as_code    ; user-defined limit MSB
.8820	d0 08		bne $882a	                bne _jumpto_compile_as_jump
.8822	b5 00		lda $00,x	                lda 0,x
.8824	c5 1a		cmp $1a		                cmp nc_limit            ; user-defined limit LSB
.8826	90 05		bcc $882d	                bcc _compile_as_code    ; Allow native compiling for less
.8828	f0 03		beq $882d	                beq _compile_as_code    ; than or equal to the limit.
.882a					_jumpto_compile_as_jump:
.882a	4c cb 88	jmp $88cb	                jmp _compile_as_jump    ; too far for BRA
.882d					_compile_as_code:
.882d	ca		dex		                dex
.882e	ca		dex		                dex                     ; ( -- u ? )
.882f	ca		dex		                dex
.8830	ca		dex		                dex                     ; ( -- u ? ? )
.8831	b5 04		lda $04,x	                lda 4,x
.8833	95 00		sta $00,x	                sta 0,x                 ; LSB of u
.8835	b5 05		lda $05,x	                lda 5,x
.8837	95 01		sta $01,x	                sta 1,x                 ; ( -- u ? u )
.8839	68		pla		                pla
.883a	95 04		sta $04,x	                sta 4,x                 ; LSB of xt
.883c	68		pla		                pla
.883d	95 05		sta $05,x	                sta 5,x                 ; ( -- xt ? u )
.883f	a5 00		lda $00		                lda cp                  ; LSB of cp
.8841	95 02		sta $02,x	                sta 2,x
.8843	a5 01		lda $01		                lda cp+1
.8845	95 03		sta $03,x	                sta 3,x                 ; ( -- xt cp u )
.8847	a0 00		ldy #$00	                ldy #0
.8849					_strip_loop:
.8849	b9 b9 88	lda $88b9,y	                lda _strip_table,y      ; LSB of first word
.884c	d5 04		cmp $04,x	                cmp 4,x                 ; LSB of xt
.884e	d0 07		bne $8857	                bne _next_entry
.8850	b9 ba 88	lda $88ba,y	                lda _strip_table+1,y
.8853	d5 05		cmp $05,x	                cmp 5,x
.8855	f0 0c		beq $8863	                beq _found_entry
.8857					_next_entry:
.8857	b9 b9 88	lda $88b9,y	                lda _strip_table,y      ; pointing to LSB
.885a	19 ba 88	ora $88ba,y	                ora _strip_table+1,y    ; get MSB
.885d	f0 22		beq $8881	                beq _underflow_strip    ; table done, let's get out of here
.885f	c8		iny		                iny
.8860	c8		iny		                iny
.8861	80 e6		bra $8849	                bra _strip_loop
.8863					_found_entry:
.8863	98		tya		                tya
.8864	4a		lsr a		                lsr
.8865	a8		tay		                tay
.8866	b9 c5 88	lda $88c5,y	                lda _strip_size,y
.8869	85 2c		sta $2c		                sta tmptos              ; save a copy
.886b	18		clc		                clc
.886c	75 04		adc $04,x	                adc 4,x
.886e	95 04		sta $04,x	                sta 4,x
.8870	90 02		bcc $8874	                bcc+
.8872	f6 05		inc $05,x	                inc 5,x                 ; we just care about the carry
.8874					+
.8874	06 2c		asl $2c		                asl tmptos
.8876	38		sec		                sec
.8877	b5 00		lda $00,x	                lda 0,x
.8879	e5 2c		sbc $2c		                sbc tmptos
.887b	95 00		sta $00,x	                sta 0,x
.887d	b0 02		bcs $8881	                bcs +
.887f	d6 01		dec $01,x	                dec 1,x                 ; we just care about the borrow
.8881					+
.8881					_underflow_strip:
.8881	a5 1c		lda $1c		                lda uf_strip
.8883	05 1d		ora $1d		                ora uf_strip+1
.8885	f0 1c		beq $88a3	                beq _specials_done
.8887	a5 28		lda $28		                lda tmp3
.8889	29 10		and #$10	                and #UF
.888b	f0 16		beq $88a3	                beq _specials_done
.888d	18		clc		                clc
.888e	b5 04		lda $04,x	                lda 4,x
.8890	69 03		adc #$03	                adc #3
.8892	95 04		sta $04,x	                sta 4,x
.8894	90 02		bcc $8898	                bcc +
.8896	f6 05		inc $05,x	                inc 5,x                  ; we just care about the carry
.8898					+
.8898	38		sec		                sec
.8899	b5 00		lda $00,x	                lda 0,x
.889b	e9 03		sbc #$03	                sbc #3
.889d	95 00		sta $00,x	                sta 0,x
.889f	b0 02		bcs $88a3	                bcs +
.88a1	d6 01		dec $01,x	                dec 1,x                  ; we just care about the borrow
.88a3					+
.88a3					_specials_done:
.88a3	b5 01		lda $01,x	                lda 1,x                 ; MSB
.88a5	48		pha		                pha
.88a6	b5 00		lda $00,x	                lda 0,x                 ; LSB
.88a8	48		pha		                pha
.88a9	20 a3 95	jsr $95a3	                jsr xt_move
.88ac	18		clc		                clc
.88ad	68		pla		                pla                     ; LSB
.88ae	65 00		adc $00		                adc cp
.88b0	85 00		sta $00		                sta cp
.88b2	68		pla		                pla                     ; MSB
.88b3	65 01		adc $01		                adc cp+1
.88b5	85 01		sta $01		                sta cp+1
.88b7	80 2c		bra $88e5	                bra _done
.88b9					_strip_table:
>88b9	73 9a 5e 9a 51 a3		                .word xt_r_from, xt_r_fetch, xt_to_r    ; R>, R@, >R
>88bf	83 a4 09 a4 00 00		                .word xt_two_to_r, xt_two_r_from, 0000  ; 2>R, 2R>, EOL
.88c5					_strip_size:
>88c5	04 04 04 06 06 00		                .byte 4, 4, 4, 6, 6, 0          ; R>, R@, >R, 2>R, 2R>, EOL
.88cb					_compile_as_jump:
.88cb	a9 20		lda #$20	                lda #$20
.88cd	92 00		sta ($00)	                sta (cp)
.88cf	a0 01		ldy #$01	                ldy #1
.88d1	68		pla		                pla             ; LSB
.88d2	91 00		sta ($00),y	                sta (cp),y
.88d4	c8		iny		                iny
.88d5	68		pla		                pla             ; MSB
.88d6	91 00		sta ($00),y	                sta (cp),y
.88d8	a9 03		lda #$03	                lda #3
.88da	18		clc		                clc
.88db	65 00		adc $00		                adc cp
.88dd	85 00		sta $00		                sta cp
.88df	90 02		bcc $88e3	                bcc +
.88e1	e6 01		inc $01		                inc cp+1
.88e3					+
.88e3	e8		inx		                inx             ; drop xt
.88e4	e8		inx		                inx
.88e5					_done:
.88e5					z_compile_comma:
.88e5	60		rts		                rts
.88e6					xt_compile_only:
.88e6	20 52 d7	jsr $d752	                jsr current_to_dp
.88e9	a0 01		ldy #$01	                ldy #1          ; offset for status byte
.88eb	b1 02		lda ($02),y	                lda (dp),y
.88ed	09 01		ora #$01	                ora #CO        ; make sure bit 7 is set
.88ef	91 02		sta ($02),y	                sta (dp),y
.88f1	60		rts		z_compile_only: rts
.88f2					xt_value:
.88f2					xt_constant:
.88f2	20 10 d8	jsr $d810	                jsr underflow_1
.88f5	20 4a 89	jsr $894a	                jsr xt_create
.88f8	38		sec		                sec
.88f9	a5 00		lda $00		                lda cp
.88fb	e9 02		sbc #$02	                sbc #2
.88fd	85 24		sta $24		                sta tmp1
.88ff	a5 01		lda $01		                lda cp+1
.8901	e9 00		sbc #$00	                sbc #0
.8903	85 25		sta $25		                sta tmp1+1
.8905	a9 cc		lda #$cc	                lda #<doconst           ; LSB of DOCONST
.8907	92 24		sta ($24)	                sta (tmp1)
.8909	a0 01		ldy #$01	                ldy #1
.890b	a9 d6		lda #$d6	                lda #>doconst           ; MSB of DOCONST
.890d	91 24		sta ($24),y	                sta (tmp1),y
.890f	20 4f 87	jsr $874f	                jsr xt_comma            ; drop through to adjust_z
.8912					adjust_z:
.8912	20 1c 93	jsr $931c	                jsr xt_latestnt         ; gives us ( -- nt )
.8915	b5 00		lda $00,x	                lda 0,x
.8917	85 24		sta $24		                sta tmp1
.8919	b5 01		lda $01,x	                lda 1,x
.891b	85 25		sta $25		                sta tmp1+1
.891d	a0 06		ldy #$06	                ldy #6
.891f	b1 24		lda ($24),y	                lda (tmp1),y
.8921	18		clc		                clc
.8922	69 02		adc #$02	                adc #2
.8924	91 24		sta ($24),y	                sta (tmp1),y
.8926	c8		iny		                iny
.8927	b1 24		lda ($24),y	                lda (tmp1),y
.8929	69 00		adc #$00	                adc #0                  ; only need carry
.892b	91 24		sta ($24),y	                sta (tmp1),y
.892d	e8		inx		                inx
.892e	e8		inx		                inx
.892f					z_value:
.892f	60		rts		z_constant:     rts
.8930					xt_count:
.8930	20 10 d8	jsr $d810	                jsr underflow_1
.8933	a1 00		lda ($00,x)	                lda (0,x)       ; Get number of characters (255 max)
.8935	a8		tay		                tay
.8936	f6 00		inc $00,x	                inc 0,x         ; LSB
.8938	d0 02		bne $893c	                bne +
.893a	f6 01		inc $01,x	                inc 1,x         ; MSB
.893c	98		tya		+               tya
.893d	ca		dex		                dex
.893e	ca		dex		                dex
.893f	95 00		sta $00,x	                sta 0,x         ; LSB
.8941	74 01		stz $01,x	                stz 1,x         ; MSB, always zero
.8943	60		rts		z_count:        rts
.8944					xt_cr:
.8944	a9 0a		lda #$0a	                lda #AscLF
.8946	20 d7 8d	jsr $8dd7	                jsr emit_a
.8949	60		rts		z_cr:           rts
.894a					xt_create:
.894a	20 c0 98	jsr $98c0	                jsr xt_parse_name       ; ( addr u )
.894d	b5 00		lda $00,x	                lda 0,x
.894f	15 01		ora $01,x	                ora 1,x
.8951	d0 05		bne $8958	                bne _got_name
.8953	a9 05		lda #$05	                lda #err_noname
.8955	4c 26 d8	jmp $d826	                jmp error
.8958					_got_name:
.8958	74 01		stz $01,x	                stz 1,x
.895a	20 99 a3	jsr $a399	                jsr xt_two_dup          ; ( addr u addr u )
.895d	20 bc 8f	jsr $8fbc	                jsr xt_find_name        ; ( addr u flag ) (non-zero nt as flag)
.8960	b5 00		lda $00,x	                lda 0,x
.8962	15 01		ora $01,x	                ora 1,x
.8964	f0 1e		beq $8984	                beq _new_name           ; We haven't seen this one before.
.8966	e8		inx		                inx                     ; Drop flag (nt) from find-name.
.8967	e8		inx		                inx
.8968	24 20		bit $20		                bit status
.896a	10 08		bpl $8974	                bpl _redefined_name     ; Bit 7 is zero, so print the message.
.896c	a9 80		lda #$80	                lda #$80                ; Set bit 7 to indicate dup
.896e	05 20		ora $20		                ora status
.8970	85 20		sta $20		                sta status
.8972	80 18		bra $898c	                bra _process_name
.8974					_redefined_name:
.8974	a9 02		lda #$02	                lda #str_redefined
.8976	20 3c d8	jsr $d83c	                jsr print_string_no_lf
.8979	20 99 a3	jsr $a399	                jsr xt_two_dup           ; ( addr u addr u )
.897c	20 e4 a4	jsr $a4e4	                jsr xt_type
.897f	20 ff a0	jsr $a0ff	                jsr xt_space
.8982	80 08		bra $898c	                bra _process_name
.8984					_new_name:
.8984	e8		inx		                inx                     ; Drop flag (0) from find-name.
.8985	e8		inx		                inx
.8986	a9 7f		lda #$7f	                lda #$7F                ; Clear bit 0 of status to indicate new word.
.8988	25 20		and $20		                and status
.898a	85 20		sta $20		                sta status
.898c					_process_name:
.898c	b5 00		lda $00,x	                lda 0,x
.898e	85 26		sta $26		                sta tmp2                ; store length of string in tmp2
.8990	a5 00		lda $00		                lda cp
.8992	85 24		sta $24		                sta tmp1
.8994	a5 01		lda $01		                lda cp+1
.8996	85 25		sta $25		                sta tmp1+1
.8998	b5 00		lda $00,x	                lda 0,x
.899a	18		clc		                clc
.899b	69 08		adc #$08	                adc #8
.899d	85 28		sta $28		                sta tmp3                ; total header length
.899f	18		clc		                clc
.89a0	69 03		adc #$03	                adc #3
.89a2	95 00		sta $00,x	                sta 0,x
.89a4	74 01		stz $01,x	                stz 1,x         ; max header size is 255 chars
.89a6	20 8c 82	jsr $828c	                jsr xt_allot    ; ( addr )
.89a9	20 52 d7	jsr $d752	                jsr current_to_dp
.89ac	a0 00		ldy #$00	                ldy #0
.89ae	a5 26		lda $26		                lda tmp2
.89b0	91 24		sta ($24),y	                sta (tmp1),y
.89b2	a9 08		lda #$08	                lda #NN
.89b4	09 20		ora #$20	                ora #HC
.89b6	c8		iny		                iny
.89b7	91 24		sta ($24),y	                sta (tmp1),y
.89b9	c8		iny		                iny
.89ba	a5 02		lda $02		                lda dp
.89bc	91 24		sta ($24),y	                sta (tmp1),y
.89be	c8		iny		                iny
.89bf	a5 03		lda $03		                lda dp+1
.89c1	91 24		sta ($24),y	                sta (tmp1),y
.89c3	c8		iny		                iny
.89c4	a5 25		lda $25		                lda tmp1+1
.89c6	85 03		sta $03		                sta dp+1
.89c8	a5 24		lda $24		                lda tmp1
.89ca	85 02		sta $02		                sta dp
.89cc	18		clc		                clc
.89cd	65 28		adc $28		                adc tmp3        ; add total header length
.89cf	91 24		sta ($24),y	                sta (tmp1),y
.89d1	48		pha		                pha             ; we need this in the next step
.89d2	c8		iny		                iny
.89d3	a5 25		lda $25		                lda tmp1+1
.89d5	69 00		adc #$00	                adc #0          ; only need the carry
.89d7	91 24		sta ($24),y	                sta (tmp1),y
.89d9	c8		iny		                iny
.89da	68		pla		                pla             ; LSB of "z_" address
.89db	18		clc		                clc
.89dc	69 03		adc #$03	                adc #3
.89de	91 24		sta ($24),y	                sta (tmp1),y
.89e0	88		dey		                dey             ; get the MSB of xt back
.89e1	b1 24		lda ($24),y	                lda (tmp1),y
.89e3	69 00		adc #$00	                adc #0          ; only need the carry
.89e5	c8		iny		                iny
.89e6	c8		iny		                iny
.89e7	91 24		sta ($24),y	                sta (tmp1),y
.89e9	c8		iny		                iny
.89ea	b5 00		lda $00,x	                lda 0,x
.89ec	38		sec		                sec
.89ed	e9 08		sbc #$08	                sbc #8
.89ef	85 2c		sta $2c		                sta tmptos
.89f1	b5 01		lda $01,x	                lda 1,x
.89f3	e9 00		sbc #$00	                sbc #0          ; only need carry
.89f5	85 2d		sta $2d		                sta tmptos+1
.89f7					_name_loop:
.89f7	b1 2c		lda ($2c),y	                lda (tmptos),y
.89f9	c9 5b		cmp #$5b	                cmp #$5B         ; ASCII '[' (one past Z)
.89fb	b0 07		bcs $8a04	                bcs _store_name
.89fd	c9 41		cmp #$41	                cmp #$41        ; ASCII 'A'
.89ff	90 03		bcc $8a04	                bcc _store_name
.8a01	18		clc		                clc
.8a02	69 20		adc #$20	                adc #$20
.8a04					_store_name:
.8a04	91 24		sta ($24),y	                sta (tmp1),y
.8a06	c8		iny		                iny
.8a07	c6 26		dec $26		                dec tmp2
.8a09	d0 ec		bne $89f7	                bne _name_loop
.8a0b	a9 20		lda #$20	                lda #$20        ; opcode of JSR
.8a0d	91 24		sta ($24),y	                sta (tmp1),y
.8a0f	c8		iny		                iny
.8a10	a9 12		lda #$12	                lda #<dovar
.8a12	91 24		sta ($24),y	                sta (tmp1),y
.8a14	c8		iny		                iny
.8a15	a9 d7		lda #$d7	                lda #>dovar
.8a17	91 24		sta ($24),y	                sta (tmp1),y
.8a19	20 65 d7	jsr $d765	                jsr dp_to_current
.8a1c	e8		inx		                inx
.8a1d	e8		inx		                inx
.8a1e	60		rts		z_create:       rts
.8a1f					xt_d_minus:
.8a1f	20 1f d8	jsr $d81f	                jsr underflow_4 ; two double numbers
.8a22	38		sec		                sec
.8a23	b5 06		lda $06,x	                lda 6,x         ; LSB of lower word
.8a25	f5 02		sbc $02,x	                sbc 2,x
.8a27	95 06		sta $06,x	                sta 6,x
.8a29	b5 07		lda $07,x	                lda 7,x         ; MSB of lower word
.8a2b	f5 03		sbc $03,x	                sbc 3,x
.8a2d	95 07		sta $07,x	                sta 7,x
.8a2f	b5 04		lda $04,x	                lda 4,x         ; LSB of upper word
.8a31	f5 00		sbc $00,x	                sbc 0,x
.8a33	95 04		sta $04,x	                sta 4,x
.8a35	b5 05		lda $05,x	                lda 5,x         ; MSB of upper word
.8a37	f5 01		sbc $01,x	                sbc 1,x
.8a39	95 05		sta $05,x	                sta 5,x
.8a3b	e8		inx		                inx
.8a3c	e8		inx		                inx
.8a3d	e8		inx		                inx
.8a3e	e8		inx		                inx
.8a3f	60		rts		z_d_minus:      rts
.8a40					xt_d_plus:
.8a40	20 1f d8	jsr $d81f	                jsr underflow_4 ; two double numbers
.8a43	18		clc		                clc
.8a44	b5 02		lda $02,x	                lda 2,x         ; LSB of lower word
.8a46	75 06		adc $06,x	                adc 6,x
.8a48	95 06		sta $06,x	                sta 6,x
.8a4a	b5 03		lda $03,x	                lda 3,x         ; MSB of lower word
.8a4c	75 07		adc $07,x	                adc 7,x
.8a4e	95 07		sta $07,x	                sta 7,x
.8a50	b5 00		lda $00,x	                lda 0,x         ; LSB of upper word
.8a52	75 04		adc $04,x	                adc 4,x
.8a54	95 04		sta $04,x	                sta 4,x
.8a56	b5 01		lda $01,x	                lda 1,x         ; MSB of upper word
.8a58	75 05		adc $05,x	                adc 5,x
.8a5a	95 05		sta $05,x	                sta 5,x
.8a5c	e8		inx		                inx
.8a5d	e8		inx		                inx
.8a5e	e8		inx		                inx
.8a5f	e8		inx		                inx
.8a60	60		rts		z_d_plus:       rts
.8a61					xt_d_to_s:
.8a61	20 15 d8	jsr $d815	                jsr underflow_2
.8a64	e8		inx		                inx
.8a65	e8		inx		                inx
.8a66	60		rts		z_d_to_s:       rts
.8a67					xt_dabs:
.8a67	20 15 d8	jsr $d815	                jsr underflow_2 ; double number
.8a6a	b5 01		lda $01,x	                lda 1,x         ; MSB of high cell
.8a6c	10 17		bpl $8a85	                bpl _done       ; positive, we get off light
.8a6e	a0 00		ldy #$00	                ldy #0
.8a70	38		sec		                sec
.8a71	98		tya		                tya
.8a72	f5 02		sbc $02,x	                sbc 2,x         ; LSB of low cell
.8a74	95 02		sta $02,x	                sta 2,x
.8a76	98		tya		                tya
.8a77	f5 03		sbc $03,x	                sbc 3,x         ; MSB of low cell
.8a79	95 03		sta $03,x	                sta 3,x
.8a7b	98		tya		                tya
.8a7c	f5 00		sbc $00,x	                sbc 0,x         ; LSB of high cell
.8a7e	95 00		sta $00,x	                sta 0,x
.8a80	98		tya		                tya
.8a81	f5 01		sbc $01,x	                sbc 1,x         ; MSB of high cell
.8a83	95 01		sta $01,x	                sta 1,x
.8a85					_done:
.8a85	60		rts		z_dabs:         rts
.8a86					xt_decimal:
.8a86	a9 0a		lda #$0a	                lda #10
.8a88	85 18		sta $18		                sta base
.8a8a	64 19		stz $19		                stz base+1              ; paranoid
.8a8c	60		rts		z_decimal:      rts
.8a8d					xt_defer:
.8a8d	20 4a 89	jsr $894a	                jsr xt_create
.8a90	a5 00		lda $00		                lda cp          ; LSB
.8a92	38		sec		                sec
.8a93	e9 02		sbc #$02	                sbc #2
.8a95	85 24		sta $24		                sta tmp1
.8a97	a5 01		lda $01		                lda cp+1        ; MSB
.8a99	e9 00		sbc #$00	                sbc #0          ; we only care about the borrow
.8a9b	85 25		sta $25		                sta tmp1+1
.8a9d	a0 00		ldy #$00	                ldy #0
.8a9f	a9 e0		lda #$e0	                lda #<dodefer   ; LSB
.8aa1	91 24		sta ($24),y	                sta (tmp1),y
.8aa3	c8		iny		                iny
.8aa4	a9 d6		lda #$d6	                lda #>dodefer   ; MSB
.8aa6	91 24		sta ($24),y	                sta (tmp1),y
.8aa8	a9 f4		lda #$f4	                lda #<defer_error
.8aaa	92 00		sta ($00)	                sta (cp)
.8aac	e6 00		inc $00		                inc cp
.8aae	d0 02		bne $8ab2	                bne +
.8ab0	e6 01		inc $01		                inc cp+1
.8ab2					+
.8ab2	a9 d6		lda #$d6	                lda #>defer_error
.8ab4	92 00		sta ($00)	                sta (cp)
.8ab6	e6 00		inc $00		                inc cp
.8ab8	d0 02		bne $8abc	                bne +
.8aba	e6 01		inc $01		                inc cp+1
.8abc					+
.8abc	20 12 89	jsr $8912	                jsr adjust_z    ; adjust header to correct length
.8abf	60		rts		z_defer:        rts
.8ac0					xt_defer_fetch:
.8ac0	20 6e a2	jsr $a26e	                jsr xt_to_body
.8ac3	20 61 8f	jsr $8f61	                jsr xt_fetch
.8ac6	60		rts		z_defer_fetch:  rts
.8ac7					xt_defer_store:
.8ac7	20 6e a2	jsr $a26e	                jsr xt_to_body
.8aca	20 6e a1	jsr $a16e	                jsr xt_store
.8acd	60		rts		z_defer_store:  rts
.8ace					xt_definitions:
.8ace	a0 1f		ldy #$1f	                ldy #search_order_offset    ; Transfer byte variable
.8ad0	b1 1e		lda ($1e),y	                lda (up),y                  ; SEARCH_ORDER[0] to
.8ad2	a0 04		ldy #$04	                ldy #current_offset         ; byte variable CURRENT.
.8ad4	91 1e		sta ($1e),y	                sta (up),y
.8ad6	60		rts		z_definitions:  rts
.8ad7					xt_depth:
.8ad7	a9 78		lda #$78	                lda #dsp0
.8ad9	86 2a		stx $2a		                stx tmpdsp
.8adb	38		sec		                sec
.8adc	e5 2a		sbc $2a		                sbc tmpdsp
.8ade	4a		lsr a		                lsr
.8adf	ca		dex		                dex
.8ae0	ca		dex		                dex
.8ae1	95 00		sta $00,x	                sta 0,x
.8ae3	74 01		stz $01,x	                stz 1,x
.8ae5	60		rts		z_depth:        rts
.8ae6					xt_digit_question:
.8ae6	20 10 d8	jsr $d810	                jsr underflow_1
.8ae9	ca		dex		                dex
.8aea	ca		dex		                dex
.8aeb	74 00		stz $00,x	                stz 0,x                 ; default flag is failure
.8aed	74 01		stz $01,x	                stz 1,x
.8aef	74 03		stz $03,x	                stz 3,x                 ; paranoid
.8af1	b5 02		lda $02,x	                lda 2,x
.8af3	c9 30		cmp #$30	                cmp #'0'
.8af5	90 23		bcc $8b1a	                bcc _done               ; failure flag already set
.8af7	c9 3a		cmp #$3a	                cmp #'9'+1               ; this is actually ":"
.8af9	90 12		bcc $8b0d	                bcc _checkbase
.8afb	c9 41		cmp #$41	                cmp #'A'
.8afd	90 1b		bcc $8b1a	                bcc _done               ; failure flag is already set
.8aff	c9 61		cmp #$61	                cmp #'a'
.8b01	90 07		bcc $8b0a	                bcc _case_done          ; not lower case, too low
.8b03	c9 7b		cmp #$7b	                cmp #'z'+1
.8b05	b0 03		bcs $8b0a	                bcs _case_done          ; not lower case, too high
.8b07	18		clc		                clc                     ; just right
.8b08	69 e0		adc #$e0	                adc #$e0                ; offset to upper case (wraps)
.8b0a					_case_done:
.8b0a	38		sec		                sec
.8b0b	e9 07		sbc #$07	                sbc #7                  ; fall through to _checkbase
.8b0d					_checkbase:
.8b0d	38		sec		                sec
.8b0e	e9 30		sbc #$30	                sbc #'0'                 ; this is also the conversion step
.8b10	c5 18		cmp $18		                cmp base
.8b12	b0 06		bcs $8b1a	                bcs _done               ; already have false flag
.8b14	95 02		sta $02,x	                sta 2,x                 ; put number in NOS
.8b16	d6 00		dec $00,x	                dec 0,x                 ; set success flag
.8b18	d6 01		dec $01,x	                dec 1,x
.8b1a					_done:
.8b1a					z_digit_question:
.8b1a	60		rts		                rts
.8b1b					xt_disasm:
.8b1b	20 15 d8	jsr $d815	                jsr underflow_2
.8b1e	20 b8 ac	jsr $acb8	                jsr disassembler
.8b21	60		rts		z_disasm:       rts
.8b22					xt_dnegate:
.8b22	20 15 d8	jsr $d815	                jsr underflow_2 ; double number
.8b25	a0 00		ldy #$00	     		ldy #0
.8b27	38		sec		                sec
.8b28	98		tya		                tya
.8b29	f5 02		sbc $02,x	                sbc 2,x         ; LSB of low cell
.8b2b	95 02		sta $02,x	                sta 2,x
.8b2d	98		tya		                tya
.8b2e	f5 03		sbc $03,x	                sbc 3,x         ; MSB of low cell
.8b30	95 03		sta $03,x	                sta 3,x
.8b32	98		tya		                tya
.8b33	f5 00		sbc $00,x	                sbc 0,x         ; LSB of high cell
.8b35	95 00		sta $00,x	                sta 0,x
.8b37	98		tya		                tya
.8b38	f5 01		sbc $01,x	                sbc 1,x         ; MSB of high cell
.8b3a	95 01		sta $01,x	                sta 1,x
.8b3c	60		rts		z_dnegate:      rts
.8b3d					xt_question_do:
.8b3d	a9 ff		lda #$ff	                lda #$ff                ; -1 is ?DO, jump to common code
.8b3f	85 24		sta $24		                sta tmp1
.8b41	80 02		bra $8b45	                bra do_common           ; skip flag for DO
.8b43					xt_do:
.8b43	64 24		stz $24		                stz tmp1                ; 0 is DO, drop through to DO_COMMON
.8b45					do_common:
.8b45	ca		dex		                dex
.8b46	ca		dex		                dex
.8b47	a5 00		lda $00		                lda cp
.8b49	95 00		sta $00,x	                sta 0,x                 ; LSB
.8b4b	a5 01		lda $01		                lda cp+1
.8b4d	95 01		sta $01,x	                sta 1,x                 ; MSB   ( limit start here )
.8b4f	a9 05		lda #$05	                lda #5                  ; we don't really care about the value,
.8b51	a8		tay		                tay                     ; so we use 5 to be tricky
.8b52					_loop:
.8b52	91 00		sta ($00),y	                sta (CP),y
.8b54	88		dey		                dey
.8b55	10 fb		bpl $8b52	                bpl _loop
.8b57	1a		inc a		                ina             ; we used 5 as a dummy value, this is why
.8b58	18		clc		                clc
.8b59	65 00		adc $00		                adc CP
.8b5b	85 00		sta $00		                sta CP
.8b5d	90 02		bcc $8b61	                bcc +
.8b5f	e6 01		inc $01		                inc CP+1
.8b61					+
.8b61	a5 24		lda $24		                lda tmp1
.8b63	f0 17		beq $8b7c	                beq _compile_do
.8b65	a0 14		ldy #$14	                ldy #question_do_runtime_end-question_do_runtime
.8b67	5a		phy		                phy             ; save counter to calculate new CP
.8b68					-
.8b68	b9 c2 8b	lda $8bc2,y	                lda question_do_runtime,y
.8b6b	91 00		sta ($00),y	                sta (cp),y
.8b6d	88		dey		                dey
.8b6e	10 f8		bpl $8b68	                bpl -
.8b70	68		pla		                pla             ; retrieve counter
.8b71	18		clc		                clc
.8b72	65 00		adc $00		                adc cp
.8b74	85 00		sta $00		                sta cp
.8b76	a5 01		lda $01		                lda cp+1
.8b78	69 00		adc #$00	                adc #0          ; only care about carry
.8b7a	85 01		sta $01		                sta cp+1        ; fall through to _compile_do
.8b7c					_compile_do:
.8b7c	a0 24		ldy #$24	                ldy #do_runtime_end-do_runtime  ; counter
.8b7e	5a		phy		                phy             ; save counter to calculate new CP
.8b7f					-
.8b7f	b9 9e 8b	lda $8b9e,y	                lda do_runtime,y
.8b82	91 00		sta ($00),y	                sta (cp),y
.8b84	88		dey		                dey
.8b85	10 f8		bpl $8b7f	                bpl -
.8b87	68		pla		                pla             ; retrieve counter
.8b88	18		clc		                clc
.8b89	65 00		adc $00		                adc cp
.8b8b	85 00		sta $00		                sta cp
.8b8d	a5 01		lda $01		                lda cp+1
.8b8f	69 00		adc #$00	                adc #0          ; only care about carry
.8b91	85 01		sta $01		                sta cp+1
.8b93	ca		dex		                dex
.8b94	ca		dex		                dex
.8b95	a5 00		lda $00		                lda CP          ; LSB
.8b97	95 00		sta $00,x	                sta 0,x
.8b99	a5 01		lda $01		                lda CP+1        ; MSB
.8b9b	95 01		sta $01,x	                sta 1,x
.8b9d					z_question_do:
.8b9d	60		rts		z_do:           rts
.8b9e					do_runtime:
.8b9e	38		sec		                sec
.8b9f	a9 00		lda #$00	                lda #0
.8ba1	f5 02		sbc $02,x	                sbc 2,x         ; LSB of limit
.8ba3	95 02		sta $02,x	                sta 2,x         ; save FUFA for later use
.8ba5	a9 80		lda #$80	                lda #$80
.8ba7	f5 03		sbc $03,x	                sbc 3,x         ; MSB of limit
.8ba9	95 03		sta $03,x	                sta 3,x         ; save FUFA for later use
.8bab	48		pha		                pha             ; FUFA replaces limit on R stack
.8bac	b5 02		lda $02,x	                lda 2,x         ; LSB of limit
.8bae	48		pha		                pha
.8baf	18		clc		                clc
.8bb0	b5 00		lda $00,x	                lda 0,x         ; LSB of original index
.8bb2	75 02		adc $02,x	                adc 2,x         ; add LSB of FUFA
.8bb4	95 00		sta $00,x	                sta 0,x
.8bb6	b5 01		lda $01,x	                lda 1,x         ; MSB of orginal index
.8bb8	75 03		adc $03,x	                adc 3,x         ; add MSB of FUFA
.8bba	48		pha		                pha
.8bbb	b5 00		lda $00,x	                lda 0,x         ; LSB of index
.8bbd	48		pha		                pha
.8bbe	e8		inx		                inx
.8bbf	e8		inx		                inx
.8bc0	e8		inx		                inx
.8bc1	e8		inx		                inx             ; no RTS because this is copied into code
.8bc2					do_runtime_end:
.8bc2					question_do_runtime:
.8bc2	20 99 a3	jsr $a399	                jsr xt_two_dup          ; ( n1 n2 n1 n2 )
.8bc5	20 af 8e	jsr $8eaf	                jsr xt_equal            ; ( -- n1 n2 f )
.8bc8	b5 00		lda $00,x	                lda 0,x
.8bca	15 01		ora $01,x	                ora 1,x
.8bcc	f0 06		beq $8bd4	                beq _do_do
.8bce	8a		txa		                txa
.8bcf	18		clc		                clc
.8bd0	69 06		adc #$06	                adc #6
.8bd2	aa		tax		                tax
.8bd3	60		rts		                rts
.8bd4					_do_do:
.8bd4	e8		inx		                inx             ; clear flag from EQUAL off stack
.8bd5	e8		inx		                inx             ; no RTS because this is copied into code
.8bd6					question_do_runtime_end:
.8bd6					xt_does:
.8bd6	a0 8b		ldy #$8b	                ldy #>does_runtime
.8bd8	a9 e5		lda #$e5	                lda #<does_runtime
.8bda	20 b3 d6	jsr $d6b3	                jsr cmpl_subroutine
.8bdd	a0 d6		ldy #$d6	                ldy #>dodoes
.8bdf	a9 f9		lda #$f9	                lda #<dodoes
.8be1	20 b3 d6	jsr $d6b3	                jsr cmpl_subroutine
.8be4	60		rts		z_does:         rts
.8be5					does_runtime:
.8be5	7a		ply		                ply             ; LSB
.8be6	68		pla		                pla             ; MSB
.8be7	c8		iny		                iny
.8be8	d0 01		bne $8beb	                bne +
.8bea	1a		inc a		                ina
.8beb					+
.8beb	84 24		sty $24		                sty tmp1
.8bed	85 25		sta $25		                sta tmp1+1
.8bef	20 52 d7	jsr $d752	                jsr current_to_dp   ; Grab the DP from the CURRENT wordlist.
.8bf2	a5 02		lda $02		                lda dp
.8bf4	18		clc		                clc
.8bf5	69 04		adc #$04	                adc #4
.8bf7	85 26		sta $26		                sta tmp2
.8bf9	a5 03		lda $03		                lda dp+1
.8bfb	69 00		adc #$00	                adc #0          ; we only care about the carry
.8bfd	85 27		sta $27		                sta tmp2+1
.8bff	b2 26		lda ($26)	                lda (tmp2)
.8c01	18		clc		                clc
.8c02	69 01		adc #$01	                adc #1
.8c04	85 28		sta $28		                sta tmp3
.8c06	a0 01		ldy #$01	                ldy #1
.8c08	b1 26		lda ($26),y	                lda (tmp2),y
.8c0a	69 00		adc #$00	                adc #0          ; we only care about the carry
.8c0c	85 29		sta $29		                sta tmp3+1
.8c0e	a5 24		lda $24		                lda tmp1        ; LSB
.8c10	92 28		sta ($28)	                sta (tmp3)
.8c12	a5 25		lda $25		                lda tmp1+1
.8c14	91 28		sta ($28),y	                sta (tmp3),y    ; Y is still 1
.8c16	60		rts		                rts
.8c17					xt_dot:
.8c17	20 10 d8	jsr $d810	                jsr underflow_1
.8c1a	20 90 8d	jsr $8d90	                jsr xt_dup                      ; ( n n )
.8c1d	20 1a 81	jsr $811a	                jsr xt_abs                      ; ( n u )
.8c20	20 89 a7	jsr $a789	                jsr xt_zero                     ; ( n u 0 )
.8c23	20 3b 93	jsr $933b	                jsr xt_less_number_sign         ; ( n u 0 )
.8c26	20 bf 97	jsr $97bf	                jsr xt_number_sign_s            ; ( n ud )
.8c29	20 38 9b	jsr $9b38	                jsr xt_rot                      ; ( ud n )
.8c2c	20 c8 9f	jsr $9fc8	                jsr xt_sign                     ; ( ud )
.8c2f	20 9d 97	jsr $979d	                jsr xt_number_sign_greater      ; ( addr u )
.8c32	20 e4 a4	jsr $a4e4	                jsr xt_type
.8c35	20 ff a0	jsr $a0ff	                jsr xt_space
.8c38	60		rts		z_dot:          rts
.8c39					xt_dot_paren:
.8c39	ca		dex		                dex
.8c3a	ca		dex		                dex
.8c3b	a9 29		lda #$29	                lda #41     ; Right parenthesis
.8c3d	95 00		sta $00,x	                sta 0,x
.8c3f	74 01		stz $01,x	                stz 1,x
.8c41	20 1b 99	jsr $991b	                jsr xt_parse
.8c44	20 e4 a4	jsr $a4e4	                jsr xt_type
.8c47	60		rts		z_dot_paren:    rts
.8c48					xt_dot_quote:
.8c48	20 30 9d	jsr $9d30	                jsr xt_s_quote
.8c4b	a0 a4		ldy #$a4	                ldy #>xt_type
.8c4d	a9 e4		lda #$e4	                lda #<xt_type
.8c4f	20 b3 d6	jsr $d6b3	                jsr cmpl_subroutine
.8c52	60		rts		z_dot_quote:    rts
.8c53					xt_dot_r:
.8c53	20 15 d8	jsr $d815	                jsr underflow_2
.8c56	20 51 a3	jsr $a351	                jsr xt_to_r
.8c59	20 90 8d	jsr $8d90	                jsr xt_dup
.8c5c	20 1a 81	jsr $811a	                jsr xt_abs
.8c5f	20 89 a7	jsr $a789	                jsr xt_zero
.8c62	20 3b 93	jsr $933b	                jsr xt_less_number_sign
.8c65	20 bf 97	jsr $97bf	                jsr xt_number_sign_s
.8c68	20 38 9b	jsr $9b38	                jsr xt_rot
.8c6b	20 c8 9f	jsr $9fc8	                jsr xt_sign
.8c6e	20 9d 97	jsr $979d	                jsr xt_number_sign_greater
.8c71	20 73 9a	jsr $9a73	                jsr xt_r_from
.8c74	20 74 98	jsr $9874	                jsr xt_over
.8c77	20 31 95	jsr $9531	                jsr xt_minus
.8c7a	20 05 a1	jsr $a105	                jsr xt_spaces
.8c7d	20 e4 a4	jsr $a4e4	                jsr xt_type
.8c80	60		rts		z_dot_r:        rts
.8c81					xt_dot_s:
.8c81	20 d7 8a	jsr $8ad7	                jsr xt_depth    ; ( -- u )
.8c84	a9 3c		lda #$3c	                lda #$3c        ; ASCII for "<"
.8c86	20 d7 8d	jsr $8dd7	                jsr emit_a
.8c89	b5 00		lda $00,x	                lda 0,x
.8c8b	48		pha		                pha
.8c8c	ca		dex		                dex             ; DUP
.8c8d	ca		dex		                dex
.8c8e	95 00		sta $00,x	                sta 0,x
.8c90	74 01		stz $01,x	                stz 1,x
.8c92	20 5c d8	jsr $d85c	                jsr print_u
.8c95	a9 3e		lda #$3e	                lda #$3e        ; ASCII for ">"
.8c97	20 d7 8d	jsr $8dd7	                jsr emit_a
.8c9a	a9 20		lda #$20	                lda #AscSP      ; ASCII for SPACE
.8c9c	20 d7 8d	jsr $8dd7	                jsr emit_a
.8c9f	e8		inx		                inx
.8ca0	e8		inx		                inx
.8ca1	e0 78		cpx #$78	                cpx #dsp0
.8ca3	f0 1e		beq $8cc3	                beq _done
.8ca5					_have_stack:
.8ca5	7a		ply		                ply
.8ca6	a9 77		lda #$77	                lda #dsp0-1     ; go up one to avoid garbage
.8ca8	85 28		sta $28		                sta tmp3
.8caa	64 29		stz $29		                stz tmp3+1      ; must be zero page on the 65c02
.8cac					_loop:
.8cac	ca		dex		                dex
.8cad	ca		dex		                dex
.8cae	b2 28		lda ($28)	                lda (tmp3)
.8cb0	95 01		sta $01,x	                sta 1,x
.8cb2	c6 28		dec $28		                dec tmp3
.8cb4	b2 28		lda ($28)	                lda (tmp3)
.8cb6	95 00		sta $00,x	                sta 0,x
.8cb8	c6 28		dec $28		                dec tmp3
.8cba	5a		phy		                phy
.8cbb	20 17 8c	jsr $8c17	                jsr xt_dot
.8cbe	7a		ply		                ply
.8cbf	88		dey		                dey
.8cc0	d0 ea		bne $8cac	                bne _loop
.8cc2	48		pha		                pha             ; dummy to balance stack
.8cc3					_done:
.8cc3	68		pla		                pla
.8cc4	60		rts		z_dot_s:        rts
.8cc5					xt_d_dot:
.8cc5	20 15 d8	jsr $d815	                jsr underflow_2
.8cc8	20 6e a3	jsr $a36e	                jsr xt_tuck
.8ccb	20 67 8a	jsr $8a67	                jsr xt_dabs
.8cce	20 3b 93	jsr $933b	                jsr xt_less_number_sign
.8cd1	20 bf 97	jsr $97bf	                jsr xt_number_sign_s
.8cd4	20 38 9b	jsr $9b38	                jsr xt_rot
.8cd7	20 c8 9f	jsr $9fc8	                jsr xt_sign
.8cda	20 9d 97	jsr $979d	                jsr xt_number_sign_greater
.8cdd	20 e4 a4	jsr $a4e4	                jsr xt_type
.8ce0	20 ff a0	jsr $a0ff	                jsr xt_space
.8ce3	60		rts		z_d_dot:        rts
.8ce4					xt_d_dot_r:
.8ce4	20 1a d8	jsr $d81a	                jsr underflow_3
.8ce7	20 51 a3	jsr $a351	                jsr xt_to_r
.8cea	20 6e a3	jsr $a36e	                jsr xt_tuck
.8ced	20 67 8a	jsr $8a67	                jsr xt_dabs
.8cf0	20 3b 93	jsr $933b	                jsr xt_less_number_sign
.8cf3	20 bf 97	jsr $97bf	                jsr xt_number_sign_s
.8cf6	20 38 9b	jsr $9b38	                jsr xt_rot
.8cf9	20 c8 9f	jsr $9fc8	                jsr xt_sign
.8cfc	20 9d 97	jsr $979d	                jsr xt_number_sign_greater
.8cff	20 73 9a	jsr $9a73	                jsr xt_r_from
.8d02	20 74 98	jsr $9874	                jsr xt_over
.8d05	20 31 95	jsr $9531	                jsr xt_minus
.8d08	20 05 a1	jsr $a105	                jsr xt_spaces
.8d0b	20 e4 a4	jsr $a4e4	                jsr xt_type
.8d0e	60		rts		z_d_dot_r:      rts
.8d0f					xt_drop:
.8d0f	20 10 d8	jsr $d810	                jsr underflow_1
.8d12	e8		inx		                inx
.8d13	e8		inx		                inx
.8d14	60		rts		z_drop:         rts
.8d15					xt_dump:
.8d15	20 15 d8	jsr $d815	                jsr underflow_2
.8d18					_row:
.8d18	a0 10		ldy #$10	                ldy #16
.8d1a	64 26		stz $26		                stz tmp2
.8d1c	20 44 89	jsr $8944	                jsr xt_cr
.8d1f	b5 03		lda $03,x	                lda 3,x
.8d21	20 20 d7	jsr $d720	                jsr byte_to_ascii
.8d24	b5 02		lda $02,x	                lda 2,x
.8d26	20 20 d7	jsr $d720	                jsr byte_to_ascii
.8d29	20 ff a0	jsr $a0ff	                jsr xt_space
.8d2c	20 ff a0	jsr $a0ff	                jsr xt_space
.8d2f					_loop:
.8d2f	b5 00		lda $00,x	                lda 0,x
.8d31	15 01		ora $01,x	                ora 1,x
.8d33	f0 39		beq $8d6e	                beq _all_printed
.8d35	a1 02		lda ($02,x)	                lda (2,x)
.8d37	48		pha		                pha                     ; byte_to_ascii destroys A
.8d38	20 20 d7	jsr $d720	                jsr byte_to_ascii
.8d3b	20 ff a0	jsr $a0ff	                jsr xt_space
.8d3e	68		pla		                pla
.8d3f	20 f6 d7	jsr $d7f6	                jsr is_printable
.8d42	b0 02		bcs $8d46	                bcs _printable
.8d44	a9 2e		lda #$2e	                lda #'.'                 ; Print dot if not printable
.8d46					_printable:
.8d46	5a		phy		                phy                     ; save counter
.8d47	a4 26		ldy $26		                ldy tmp2
.8d49	91 00		sta ($00),y	                sta (cp),y
.8d4b	e6 26		inc $26		                inc tmp2
.8d4d	7a		ply		                ply
.8d4e	c0 09		cpy #$09	                cpy #9
.8d50	d0 03		bne $8d55	                bne _next_char
.8d52	20 ff a0	jsr $a0ff	                jsr xt_space
.8d55					_next_char:
.8d55	f6 02		inc $02,x	                inc 2,x
.8d57	d0 02		bne $8d5b	                bne _counter
.8d59	f6 03		inc $03,x	                inc 3,x
.8d5b					_counter:
.8d5b	b5 00		lda $00,x	                lda 0,x
.8d5d	d0 02		bne $8d61	                bne +
.8d5f	d6 01		dec $01,x	                dec 1,x
.8d61					+
.8d61	d6 00		dec $00,x	                dec 0,x
.8d63	88		dey		                dey
.8d64	d0 c9		bne $8d2f	                bne _loop               ; next byte
.8d66	20 ff a0	jsr $a0ff	                jsr xt_space
.8d69	20 7c 8d	jsr $8d7c	                jsr dump_print_ascii
.8d6c	80 aa		bra $8d18	                bra _row                ; new row
.8d6e					_all_printed:
.8d6e	a5 26		lda $26		                lda tmp2
.8d70	f0 06		beq $8d78	                beq _done
.8d72	20 ff a0	jsr $a0ff	                jsr xt_space
.8d75	20 7c 8d	jsr $8d7c	                jsr dump_print_ascii
.8d78					_done:
.8d78	20 91 a3	jsr $a391	                jsr xt_two_drop         ; one byte less than 4x INX
.8d7b	60		rts		z_dump:         rts
.8d7c					dump_print_ascii:
.8d7c	a0 00		ldy #$00	                ldy #0
.8d7e					_ascii_loop:
.8d7e	b1 00		lda ($00),y	                lda (cp),y
.8d80	20 d7 8d	jsr $8dd7	                jsr emit_a
.8d83	c8		iny		                iny
.8d84	c0 08		cpy #$08	                cpy #8
.8d86	d0 03		bne $8d8b	                bne +
.8d88	20 ff a0	jsr $a0ff	                jsr xt_space
.8d8b					+
.8d8b	c6 26		dec $26		                dec tmp2
.8d8d	d0 ef		bne $8d7e	                bne _ascii_loop
.8d8f	60		rts		                rts
.8d90					xt_dup:
.8d90	20 10 d8	jsr $d810	                jsr underflow_1
.8d93	ca		dex		                dex
.8d94	ca		dex		                dex
.8d95	b5 02		lda $02,x	                lda 2,x         ; LSB
.8d97	95 00		sta $00,x	                sta 0,x
.8d99	b5 03		lda $03,x	                lda 3,x         ; MSB
.8d9b	95 01		sta $01,x	                sta 1,x
.8d9d	60		rts		z_dup:          rts
.8d9e					xt_ed:
.8d9e	20 63 b5	jsr $b563	                jsr ed6502      ; kept in separate file
.8da1	60		rts		z_ed:           rts
.8da2					xt_else:
.8da2					xt_endof:
.8da2	a0 8d		ldy #$8d	                ldy #>branch_runtime
.8da4	a9 bc		lda #$bc	                lda #<branch_runtime
.8da6	20 b3 d6	jsr $d6b3	                jsr cmpl_subroutine
.8da9	20 53 91	jsr $9153	                jsr xt_here
.8dac	20 89 a7	jsr $a789	                jsr xt_zero
.8daf	20 4f 87	jsr $874f	                jsr xt_comma
.8db2	20 53 91	jsr $9153	                jsr xt_here
.8db5	20 38 9b	jsr $9b38	                jsr xt_rot
.8db8	20 6e a1	jsr $a16e	                jsr xt_store
.8dbb					z_else:
.8dbb					z_endof:
.8dbb	60		rts		                rts
.8dbc					branch_runtime:
.8dbc	68		pla		                pla
.8dbd	85 22		sta $22		                sta tmpbranch
.8dbf	68		pla		                pla
.8dc0	85 23		sta $23		                sta tmpbranch+1
.8dc2	a0 01		ldy #$01	                ldy #1
.8dc4	b1 22		lda ($22),y	                lda (tmpbranch),y  ; LSB
.8dc6	85 24		sta $24		                sta tmp1
.8dc8	c8		iny		                iny
.8dc9	b1 22		lda ($22),y	                lda (tmpbranch),y  ; MSB
.8dcb	85 25		sta $25		                sta tmp1+1
.8dcd	6c 24 00	jmp ($0024)	                jmp (tmp1)
.8dd0					xt_emit:
.8dd0	20 10 d8	jsr $d810	                jsr underflow_1
.8dd3	b5 00		lda $00,x	                lda 0,x
.8dd5	e8		inx		                inx
.8dd6	e8		inx		                inx
.8dd7					emit_a:
.8dd7	6c 10 00	jmp ($0010)	                jmp (output)            ; JSR/RTS
.8dda					z_emit:
.8dda					xt_empty_buffers:
.8dda	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.8ddc	a9 00		lda #$00	                lda #0
.8dde	91 1e		sta ($1e),y	                sta (up),y      ; Only LSB is used.
.8de0					z_empty_buffers:
.8de0	60		rts		                rts
.8de1					xt_endcase:
.8de1	a0 8d		ldy #$8d	                ldy #>xt_drop
.8de3	a9 0f		lda #$0f	                lda #<xt_drop
.8de5	20 b3 d6	jsr $d6b3	                jsr cmpl_subroutine
.8de8					_endcase_loop:
.8de8	b5 00		lda $00,x	                lda 0,x
.8dea	15 01		ora $01,x	                ora 1,x
.8dec	f0 05		beq $8df3	                beq _done
.8dee	20 a3 a1	jsr $a1a3	                jsr xt_then
.8df1	80 f5		bra $8de8	                bra _endcase_loop
.8df3					_done:
.8df3	e8		inx		                inx
.8df4	e8		inx		                inx
.8df5	60		rts		z_endcase:      rts
.8df6					xt_environment_q:
.8df6	20 10 d8	jsr $d810	                jsr underflow_1
.8df9	a0 00		ldy #$00	                ldy #00                 ; counter for table
.8dfb	5a		phy		                phy
.8dfc					_table_loop:
.8dfc	20 99 a3	jsr $a399	                jsr xt_two_dup          ; ( addr u addr u ) 2DUP does not use Y
.8dff	ca		dex		                dex
.8e00	ca		dex		                dex                     ; ( addr u addr u ? )
.8e01	b9 73 8e	lda $8e73,y	                lda env_table_single,y
.8e04	95 00		sta $00,x	                sta 0,x
.8e06	c8		iny		                iny
.8e07	b9 73 8e	lda $8e73,y	                lda env_table_single,y
.8e0a	95 01		sta $01,x	                sta 1,x                 ; ( addr u addr u addr-t )
.8e0c	c8		iny		                iny
.8e0d	15 00		ora $00,x	                ora 0,x
.8e0f	f0 4d		beq $8e5e	                beq _table_done
.8e11	5a		phy		                phy                     ; save Y, which is used by COUNT
.8e12	20 30 89	jsr $8930	                jsr xt_count            ; ( addr u addr u addr-s u-s )
.8e15	20 69 87	jsr $8769	                jsr xt_compare          ; ( addr u f )
.8e18	7a		ply		                ply
.8e19	b5 00		lda $00,x	                lda 0,x
.8e1b	15 01		ora $01,x	                ora 1,x
.8e1d	f0 04		beq $8e23	                beq _got_result
.8e1f	e8		inx		                inx                     ; DROP, now ( addr u )
.8e20	e8		inx		                inx
.8e21	80 d9		bra $8dfc	                bra _table_loop
.8e23					_got_result:
.8e23	e8		inx		                inx                     ; drop flag, now ( addr u )
.8e24	e8		inx		                inx
.8e25	88		dey		                dey                     ; go back to index we had
.8e26	88		dey		                dey
.8e27	68		pla		                pla
.8e28	d0 0d		bne $8e37	                bne _double_result
.8e2a	b9 91 8e	lda $8e91,y	                lda env_results_single,y
.8e2d	95 02		sta $02,x	                sta 2,x
.8e2f	c8		iny		                iny
.8e30	b9 91 8e	lda $8e91,y	                lda env_results_single,y
.8e33	95 03		sta $03,x	                sta 3,x                 ; ( res u )
.8e35	80 1f		bra $8e56	                bra _set_flag
.8e37					_double_result:
.8e37	ca		dex		                dex                     ; ( addr u ? )
.8e38	ca		dex		                dex
.8e39	98		tya		                tya
.8e3a	38		sec		                sec
.8e3b	e9 18		sbc #$18	                sbc #24
.8e3d	0a		asl a		                asl
.8e3e	a8		tay		                tay
.8e3f	b9 a7 8e	lda $8ea7,y	                lda env_results_double,y
.8e42	95 02		sta $02,x	                sta 2,x
.8e44	c8		iny		                iny
.8e45	b9 a7 8e	lda $8ea7,y	                lda env_results_double,y
.8e48	95 03		sta $03,x	                sta 3,x                 ; ( res u ? )
.8e4a	c8		iny		                iny
.8e4b	b9 a7 8e	lda $8ea7,y	                lda env_results_double,y
.8e4e	95 04		sta $04,x	                sta 4,x
.8e50	c8		iny		                iny
.8e51	b9 a7 8e	lda $8ea7,y	                lda env_results_double,y
.8e54	95 05		sta $05,x	                sta 5,x                 ; ( res res ? )
.8e56					_set_flag:
.8e56	a9 ff		lda #$ff	                lda #$ff
.8e58	95 00		sta $00,x	                sta 0,x
.8e5a	95 01		sta $01,x	                sta 1,x                 ; ( res f )
.8e5c	80 14		bra $8e72	                bra _done
.8e5e					_table_done:
.8e5e	68		pla		                pla
.8e5f	d0 09		bne $8e6a	                bne _no_match
.8e61	1a		inc a		                ina
.8e62	48		pha		                pha
.8e63	8a		txa		                txa
.8e64	18		clc		                clc
.8e65	69 06		adc #$06	                adc #6                  ; skip six bytes
.8e67	aa		tax		                tax                     ; ( addr u )
.8e68	80 92		bra $8dfc	                bra _table_loop
.8e6a					_no_match:
.8e6a	8a		txa		                txa
.8e6b	18		clc		                clc
.8e6c	69 0a		adc #$0a	                adc #10
.8e6e	aa		tax		                tax                     ; ( addr ) - not ( 0 ) !
.8e6f	20 5a 8f	jsr $8f5a	                jsr xt_false
.8e72					_done:
.8e72					z_environment_q:
.8e72	60		rts		                rts
.8e73					env_table_single:
>8e73	33 d6 43 d6 49 d6 4e d6		        .word envs_cs, envs_hold, envs_pad, envs_aub, envs_floored
>8e7b	60 d6
>8e7d	68 d6 71 d6 77 d6 7d d6		        .word envs_max_char, envs_max_n, envs_max_u, envs_rsc
>8e85	90 d6 9c d6 00 00		        .word envs_sc, envs_wl, 0000
.8e8b					env_table_double:
>8e8b	a6 d6 ac d6 00 00		        .word envs_max_d, envs_max_ud, 0000
.8e91					env_results_single:
>8e91	ff 7f				        .word $7FFF     ; /COUNTED-STRING
>8e93	ff 00				        .word $00FF     ; /HOLD
>8e95	54 00				        .word $0054     ; /PAD (this is 84 decimal)
>8e97	08 00				        .word $0008     ; ADDRESS-UNIT-BITS (keep "$" to avoid octal!)
>8e99	00 00				        .word 0000      ; FLOORED ("FALSE", we have symmetric)
>8e9b	ff 00				        .word $00FF     ; MAX-CHAR
>8e9d	ff 7f				        .word $7FFF     ; MAX-N
>8e9f	ff ff				        .word $FFFF     ; MAX-U
>8ea1	80 00				        .word $0080     ; RETURN-STACK-CELLS
>8ea3	20 00				        .word $0020     ; STACK-CELLS (from definitions.asm)
>8ea5	09 00				        .word $0009     ; WORDLISTS
.8ea7					env_results_double:
>8ea7	ff 7f ff ff			        .word $7FFF, $FFFF      ; MAX-D
>8eab	ff ff ff ff			        .word $FFFF, $FFFF      ; MAX-UD
.8eaf					xt_equal:
.8eaf	20 15 d8	jsr $d815	                jsr underflow_2
.8eb2	b5 00		lda $00,x	                lda 0,x                 ; LSB
.8eb4	d5 02		cmp $02,x	                cmp 2,x
.8eb6	d0 0a		bne $8ec2	                bne _false
.8eb8	b5 01		lda $01,x	                lda 1,x                 ; MSB
.8eba	d5 03		cmp $03,x	                cmp 3,x
.8ebc	d0 04		bne $8ec2	                bne _false
.8ebe	a9 ff		lda #$ff	                lda #$ff
.8ec0	80 02		bra $8ec4	                bra _done
.8ec2	a9 00		lda #$00	_false:         lda #0                  ; drop thru to done
.8ec4	95 02		sta $02,x	_done:          sta 2,x
.8ec6	95 03		sta $03,x	                sta 3,x
.8ec8	e8		inx		                inx
.8ec9	e8		inx		                inx
.8eca	60		rts		z_equal:        rts
.8ecb					xt_blank:
.8ecb	ca		dex		                dex
.8ecc	ca		dex		                dex
.8ecd	a9 20		lda #$20	                lda #AscSP
.8ecf	95 00		sta $00,x	                sta 0,x
.8ed1	74 01		stz $01,x	                stz 1,x
.8ed3	80 06		bra $8edb	                bra xt_fill     ; skip over code for ERASE
.8ed5					xt_erase:
.8ed5	ca		dex		                dex
.8ed6	ca		dex		                dex
.8ed7	74 00		stz $00,x	                stz 0,x
.8ed9	74 01		stz $01,x	                stz 1,x
.8edb					xt_fill:
.8edb	20 1a d8	jsr $d81a	                jsr underflow_3
.8ede	b5 04		lda $04,x	                lda 4,x         ; LSB
.8ee0	85 24		sta $24		                sta tmp1
.8ee2	b5 05		lda $05,x	                lda 5,x
.8ee4	85 25		sta $25		                sta tmp1+1
.8ee6	b5 02		lda $02,x	                lda 2,x
.8ee8	85 26		sta $26		                sta tmp2
.8eea	b5 03		lda $03,x	                lda 3,x
.8eec	85 27		sta $27		                sta tmp2+1
.8eee	b5 00		lda $00,x	                lda 0,x
.8ef0	a8		tay		                tay
.8ef1					_loop:
.8ef1	a9 7f		lda #$7f	                lda #>ram_end           ; MSB
.8ef3	c5 25		cmp $25		                cmp tmp1+1
.8ef5	90 21		bcc $8f18	                bcc _done               ; RAM_END < TMP1, so leave
.8ef7	d0 06		bne $8eff	                bne _check_counter      ; RAM_END is not smaller and not equal
.8ef9	a9 ff		lda #$ff	                lda #<ram_end           ; LSB, because MSBs were equal
.8efb	c5 24		cmp $24		                cmp tmp1
.8efd	90 19		bcc $8f18	                bcc _done               ; RAM_END < TMP1, so leave
.8eff					_check_counter:
.8eff	a5 26		lda $26		                lda tmp2
.8f01	05 27		ora $27		                ora tmp2+1
.8f03	f0 13		beq $8f18	                beq _done
.8f05	98		tya		                tya
.8f06	92 24		sta ($24)	                sta (tmp1)
.8f08	a5 26		lda $26		                lda tmp2
.8f0a	d0 02		bne $8f0e	                bne +
.8f0c	c6 27		dec $27		                dec tmp2+1
.8f0e	c6 26		dec $26		+               dec tmp2
.8f10	e6 24		inc $24		                inc tmp1
.8f12	d0 dd		bne $8ef1	                bne _loop
.8f14	e6 25		inc $25		                inc tmp1+1
.8f16	80 d9		bra $8ef1	                bra _loop
.8f18					_done:
.8f18	8a		txa		                txa
.8f19	18		clc		                clc
.8f1a	69 06		adc #$06	                adc #6
.8f1c	aa		tax		                tax
.8f1d					z_blank:
.8f1d					z_erase:
.8f1d	60		rts		z_fill:         rts
.8f1e					xt_execute:
.8f1e	20 10 d8	jsr $d810	                jsr underflow_1
.8f21	20 25 8f	jsr $8f25	                jsr doexecute   ; do not combine to JMP (native coding)
.8f24	60		rts		z_execute:      rts
.8f25					doexecute:
.8f25	b5 00		lda $00,x	                lda 0,x
.8f27	85 0e		sta $0e		                sta ip
.8f29	b5 01		lda $01,x	                lda 1,x
.8f2b	85 0f		sta $0f		                sta ip+1
.8f2d	e8		inx		                inx
.8f2e	e8		inx		                inx
.8f2f	6c 0e 00	jmp ($000e)	                jmp (ip)
.8f32					xt_execute_parsing:
.8f32	20 1a d8	jsr $d81a	                jsr underflow_3
.8f35	20 43 92	jsr $9243	                jsr xt_input_to_r       ; save normal input for later
.8f38	20 4f 96	jsr $964f	                jsr xt_not_rote         ; -ROT ( xt addr u )
.8f3b	b5 00		lda $00,x	                lda 0,x                 ; TOS is new ciblen
.8f3d	85 0a		sta $0a		                sta ciblen
.8f3f	b5 01		lda $01,x	                lda 1,x
.8f41	85 0b		sta $0b		                sta ciblen+1
.8f43	b5 02		lda $02,x	                lda 2,x                 ; NOS is new cib
.8f45	85 08		sta $08		                sta cib
.8f47	b5 03		lda $03,x	                lda 3,x
.8f49	85 09		sta $09		                sta cib+1
.8f4b	64 0c		stz $0c		                stz toin                ; Set >IN to zero
.8f4d	64 0d		stz $0d		                stz toin+1
.8f4f	20 91 a3	jsr $a391	                jsr xt_two_drop         ; 2DROP ( xt )
.8f52	20 1e 8f	jsr $8f1e	                jsr xt_execute
.8f55	20 84 9a	jsr $9a84	                jsr xt_r_to_input
.8f58					z_execute_parsing:
.8f58	60		rts		                rts
.8f59					xt_exit:
.8f59	60		rts		                rts             ; keep before z_exit
.8f5a					z_exit:
.8f5a					xt_false:
.8f5a	ca		dex		                dex
.8f5b	ca		dex		                dex
.8f5c	74 00		stz $00,x	                stz 0,x
.8f5e	74 01		stz $01,x	                stz 1,x
.8f60	60		rts		z_false:        rts
.8f61					xt_fetch:
.8f61	20 10 d8	jsr $d810	                jsr underflow_1
.8f64	a1 00		lda ($00,x)	                lda (0,x)               ; LSB
.8f66	a8		tay		                tay
.8f67	f6 00		inc $00,x	                inc 0,x
.8f69	d0 02		bne $8f6d	                bne +
.8f6b	f6 01		inc $01,x	                inc 1,x
.8f6d					+
.8f6d	a1 00		lda ($00,x)	                lda (0,x)               ; MSB
.8f6f	95 01		sta $01,x	                sta 1,x
.8f71	94 00		sty $00,x	                sty 0,x
.8f73	60		rts		z_fetch:        rts
.8f74					xt_find:
.8f74	20 10 d8	jsr $d810	                jsr underflow_1
.8f77	b5 01		lda $01,x	                lda 1,x                 ; MSB
.8f79	48		pha		                pha
.8f7a	b5 00		lda $00,x	                lda 0,x                 ; LSB
.8f7c	48		pha		                pha
.8f7d	20 30 89	jsr $8930	                jsr xt_count            ; ( caddr -- addr u )
.8f80	20 bc 8f	jsr $8fbc	                jsr xt_find_name        ; ( addr u -- nt | 0 )
.8f83	b5 00		lda $00,x	                lda 0,x
.8f85	15 01		ora $01,x	                ora 1,x
.8f87	d0 0b		bne $8f94	                bne _found_word
.8f89	20 5a 8f	jsr $8f5a	                jsr xt_false            ; ( 0 0 )
.8f8c	68		pla		                pla                     ; LSB of address
.8f8d	95 02		sta $02,x	                sta 2,x
.8f8f	68		pla		                pla
.8f90	95 03		sta $03,x	                sta 3,x                 ; MSB of address
.8f92	80 27		bra $8fbb	                bra _done               ; ( addr 0 )
.8f94					_found_word:
.8f94	68		pla		                pla
.8f95	68		pla		                pla
.8f96	20 90 8d	jsr $8d90	                jsr xt_dup              ; ( nt nt )
.8f99	20 c2 95	jsr $95c2	                jsr xt_name_to_int      ; ( nt xt )
.8f9c	20 8f a1	jsr $a18f	                jsr xt_swap             ; ( xt nt )
.8f9f	a0 00		ldy #$00	                ldy #0                  ; Prepare flag
.8fa1	f6 00		inc $00,x	                inc 0,x
.8fa3	d0 02		bne $8fa7	                bne +
.8fa5	f6 01		inc $01,x	                inc 1,x                 ; ( xt nt+1 )
.8fa7					+
.8fa7	a1 00		lda ($00,x)	                lda (0,x)               ; ( xt char )
.8fa9	29 04		and #$04	                and #IM
.8fab	d0 08		bne $8fb5	                bne _immediate          ; bit set, we're immediate
.8fad	a9 ff		lda #$ff	                lda #$FF                ; We're not immediate, return -1
.8faf	95 00		sta $00,x	                sta 0,x
.8fb1	95 01		sta $01,x	                sta 1,x
.8fb3	80 06		bra $8fbb	                bra _done
.8fb5					_immediate:
.8fb5	a9 01		lda #$01	                lda #1                  ; We're immediate, return 1
.8fb7	95 00		sta $00,x	                sta 0,x
.8fb9	74 01		stz $01,x	                stz 1,x
.8fbb					_done:
.8fbb	60		rts		z_find:         rts
.8fbc					xt_find_name:
.8fbc	20 15 d8	jsr $d815	                jsr underflow_2
.8fbf	b5 00		lda $00,x	                lda 0,x
.8fc1	15 01		ora $01,x	                ora 1,x
.8fc3	d0 03		bne $8fc8	                bne _nonempty
.8fc5	4c 61 90	jmp $9061	                jmp _fail_done
.8fc8					_nonempty:
.8fc8	64 28		stz $28		                stz tmp3                ; Start at the beginning
.8fca					_wordlist_loop:
.8fca	a0 1e		ldy #$1e	                ldy #num_order_offset   ; Compare to byte variable #ORDER
.8fcc	a5 28		lda $28		                lda tmp3
.8fce	d1 1e		cmp ($1e),y	                cmp (up),y              ; Check to see if we are done
.8fd0	d0 03		bne $8fd5	                bne _have_string
.8fd2	4c 61 90	jmp $9061	                jmp _fail_done
.8fd5					_have_string:
.8fd5	18		clc		                clc             ; SEARCH-ORDER is array of bytes.
.8fd6	69 1f		adc #$1f	                adc #search_order_offset
.8fd8	a8		tay		                tay
.8fd9	b1 1e		lda ($1e),y	                lda (up),y      ; Get the id byte, which is the offset
.8fdb	0a		asl a		                asl                     ; Turn offset into cells offset.
.8fdc	18		clc		                clc
.8fdd	69 06		adc #$06	                adc #wordlists_offset
.8fdf	a8		tay		                tay
.8fe0	b1 1e		lda ($1e),y	                lda (up),y
.8fe2	85 24		sta $24		                sta tmp1
.8fe4	c8		iny		                iny
.8fe5	b1 1e		lda ($1e),y	                lda (up),y
.8fe7	85 25		sta $25		                sta tmp1+1
.8fe9	b5 02		lda $02,x	                lda 2,x                 ; Address of mystery string
.8feb	85 26		sta $26		                sta tmp2
.8fed	b5 03		lda $03,x	                lda 3,x
.8fef	85 27		sta $27		                sta tmp2+1
.8ff1					_loop:
.8ff1	b2 24		lda ($24)	                lda (tmp1)
.8ff3	d5 00		cmp $00,x	                cmp 0,x
.8ff5	d0 54		bne $904b	                bne _next_entry
.8ff7					_compare_string:
.8ff7	b2 26		lda ($26)	                lda (tmp2)      ; first character of mystery string
.8ff9	c9 5b		cmp #$5b	                cmp #$5B        ; ASCII '[' (one past Z)
.8ffb	b0 07		bcs $9004	                bcs _compare_first
.8ffd	c9 41		cmp #$41	                cmp #$41        ; ASCII 'A'
.8fff	90 03		bcc $9004	                bcc _compare_first
.9001	18		clc		                clc
.9002	69 20		adc #$20	                adc #$20
.9004					_compare_first:
.9004	a0 08		ldy #$08	                ldy #8          ; Offset in nt to name
.9006	d1 24		cmp ($24),y	                cmp (tmp1),y    ; first character of current word
.9008	d0 41		bne $904b	                bne _next_entry
.900a	b5 00		lda $00,x	                lda 0,x
.900c	3a		dec a		                dea
.900d	f0 2c		beq $903b	                beq _success
.900f	a5 24		lda $24		                lda tmp1
.9011	48		pha		                pha             ; Preserve tmp1 on the return stack.
.9012	18		clc		                clc
.9013	69 08		adc #$08	                adc #8
.9015	85 24		sta $24		                sta tmp1        ; Reusing tmp1 temporarily for string check.
.9017	a5 25		lda $25		                lda tmp1+1
.9019	48		pha		                pha             ; Preserve tmp1+1 on the return stack.
.901a	69 00		adc #$00	                adc #0          ; we only need the carry
.901c	85 25		sta $25		                sta tmp1+1
.901e	b4 00		ldy $00,x	                ldy 0,x         ; index is length of string minus 1
.9020	88		dey		                dey
.9021					_string_loop:
.9021	b1 26		lda ($26),y	                lda (tmp2),y    ; last char of mystery string
.9023	c9 5b		cmp #$5b	                cmp #$5B         ; ASCII '[' (one past Z)
.9025	b0 07		bcs $902e	                bcs _check_char
.9027	c9 41		cmp #$41	                cmp #$41        ; ASCII 'A'
.9029	90 03		bcc $902e	                bcc _check_char
.902b	18		clc		                clc
.902c	69 20		adc #$20	                adc #$20
.902e					_check_char:
.902e	d1 24		cmp ($24),y	                cmp (tmp1),y    ; last char of word we're testing against
.9030	d0 13		bne $9045	                bne _next_entry_tmp1
.9032	88		dey		                dey
.9033	d0 ec		bne $9021	                bne _string_loop
.9035					_success_tmp1:
.9035	68		pla		                pla             ; Restore tmp1 from the return stack.
.9036	85 25		sta $25		                sta tmp1+1
.9038	68		pla		                pla
.9039	85 24		sta $24		                sta tmp1
.903b					_success:
.903b	a5 24		lda $24		                lda tmp1
.903d	95 02		sta $02,x	                sta 2,x
.903f	a5 25		lda $25		                lda tmp1+1
.9041	95 03		sta $03,x	                sta 3,x
.9043	80 20		bra $9065	                bra _done
.9045					_next_entry_tmp1:
.9045	68		pla		                pla             ; Restore tmp1 from the return stack.
.9046	85 25		sta $25		                sta tmp1+1
.9048	68		pla		                pla
.9049	85 24		sta $24		                sta tmp1
.904b					_next_entry:
.904b	a0 02		ldy #$02	                ldy #2
.904d	b1 24		lda ($24),y	                lda (tmp1),y
.904f	48		pha		                pha
.9050	c8		iny		                iny
.9051	b1 24		lda ($24),y	                lda (tmp1),y
.9053	85 25		sta $25		                sta tmp1+1
.9055	68		pla		                pla
.9056	85 24		sta $24		                sta tmp1
.9058	05 25		ora $25		                ora tmp1+1
.905a	d0 95		bne $8ff1	                bne _loop
.905c	e6 28		inc $28		                inc tmp3
.905e	4c ca 8f	jmp $8fca	                jmp _wordlist_loop
.9061					_fail_done:
.9061	74 02		stz $02,x	                stz 2,x         ; failure flag
.9063	74 03		stz $03,x	                stz 3,x
.9065					_done:
.9065	e8		inx		                inx
.9066	e8		inx		                inx
.9067	60		rts		z_find_name:    rts
.9068					xt_flush:
.9068	20 9f 9e	jsr $9e9f	                jsr xt_save_buffers
.906b	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.906d	a9 00		lda #$00	                lda #0
.906f	91 1e		sta ($1e),y	                sta (up),y      ; Only LSB is used.
.9071					z_flush:
.9071	60		rts		                rts
.9072					xt_fm_slash_mod:
.9072	20 1a d8	jsr $d81a	                jsr underflow_3
.9075	64 26		stz $26		                stz tmp2        ; default: n is positive
.9077	b5 01		lda $01,x	                lda 1,x         ; MSB of n1
.9079	10 0e		bpl $9089	                bpl _check_d
.907b	e6 26		inc $26		                inc tmp2        ; set flag to negative for n1
.907d	20 04 96	jsr $9604	                jsr xt_negate   ; NEGATE
.9080	20 51 a3	jsr $a351	                jsr xt_to_r     ; >R
.9083	20 22 8b	jsr $8b22	                jsr xt_dnegate  ; DNEGATE
.9086	20 73 9a	jsr $9a73	                jsr xt_r_from   ; R>
.9089					_check_d:
.9089	b5 03		lda $03,x	                lda 3,x         ; MSB of high word of d
.908b	10 0d		bpl $909a	                bpl _multiply
.908d	18		clc		                clc
.908e	b5 00		lda $00,x	                lda 0,x         ; LSB of n1
.9090	75 02		adc $02,x	                adc 2,x         ; LSB of dh
.9092	95 02		sta $02,x	                sta 2,x
.9094	b5 01		lda $01,x	                lda 1,x         ; MSB of n1
.9096	75 03		adc $03,x	                adc 3,x         ; MSB of dh
.9098	95 03		sta $03,x	                sta 3,x
.909a					_multiply:
.909a	20 9b a5	jsr $a59b	                jsr xt_um_slash_mod     ; ( d n1 -- rem n2 )
.909d	a5 26		lda $26		                lda tmp2
.909f	f0 07		beq $90a8	                beq _done
.90a1	e8		inx		                inx             ; pretend that we SWAP
.90a2	e8		inx		                inx
.90a3	20 04 96	jsr $9604	                jsr xt_negate
.90a6	ca		dex		                dex
.90a7	ca		dex		                dex
.90a8					_done:
.90a8	60		rts		z_fm_slash_mod: rts
.90a9					xt_forth:
.90a9	a0 1f		ldy #$1f	                ldy #search_order_offset
.90ab	a9 00		lda #$00	                lda #0          ; The WID for Forth is 0.
.90ad	91 1e		sta ($1e),y	                sta (up),y
.90af					z_forth:
.90af	60		rts		                rts
.90b0					load_evaluate:
.90b0	a9 ff		lda #$ff	                lda #$FF
.90b2	85 24		sta $24		                sta tmp1
.90b4	80 11		bra $90c7	                bra load_evaluate_start
.90b6					xt_evaluate:
.90b6	20 15 d8	jsr $d815	                jsr underflow_2
.90b9	64 24		stz $24		                stz tmp1
.90bb	b5 00		lda $00,x	                lda 0,x
.90bd	15 01		ora $01,x	                ora 1,x
.90bf	d0 06		bne $90c7	                bne evaluate_got_work
.90c1	e8		inx		                inx
.90c2	e8		inx		                inx
.90c3	e8		inx		                inx
.90c4	e8		inx		                inx
.90c5	80 42		bra $9109	                bra evaluate_done
.90c7					load_evaluate_start:
.90c7					evaluate_got_work:
.90c7	a0 01		ldy #$01	                ldy #blk_offset+1
.90c9	b1 1e		lda ($1e),y	                lda (up),y
.90cb	48		pha		                pha
.90cc	88		dey		                dey
.90cd	b1 1e		lda ($1e),y	                lda (up),y
.90cf	48		pha		                pha
.90d0	a5 24		lda $24		                lda tmp1
.90d2	d0 05		bne $90d9	                bne _nozero
.90d4	91 1e		sta ($1e),y	                sta (up),y
.90d6	c8		iny		                iny
.90d7	91 1e		sta ($1e),y	                sta (up),y
.90d9					_nozero:
.90d9	20 43 92	jsr $9243	                jsr xt_input_to_r
.90dc	a9 ff		lda #$ff	                lda #$ff
.90de	85 06		sta $06		                sta insrc
.90e0	85 07		sta $07		                sta insrc+1
.90e2	64 0c		stz $0c		                stz toin
.90e4	64 0d		stz $0d		                stz toin+1
.90e6	b5 00		lda $00,x	                lda 0,x
.90e8	85 0a		sta $0a		                sta ciblen
.90ea	b5 01		lda $01,x	                lda 1,x
.90ec	85 0b		sta $0b		                sta ciblen+1
.90ee	b5 02		lda $02,x	                lda 2,x
.90f0	85 08		sta $08		                sta cib
.90f2	b5 03		lda $03,x	                lda 3,x
.90f4	85 09		sta $09		                sta cib+1
.90f6	e8		inx		                inx             ; A clean stack is a clean mind
.90f7	e8		inx		                inx
.90f8	e8		inx		                inx
.90f9	e8		inx		                inx
.90fa	20 78 d7	jsr $d778	                jsr interpret   ; ( -- )
.90fd	20 84 9a	jsr $9a84	                jsr xt_r_to_input
.9100	a0 00		ldy #$00	                ldy #blk_offset
.9102	68		pla		                pla
.9103	91 1e		sta ($1e),y	                sta (up),y
.9105	c8		iny		                iny
.9106	68		pla		                pla
.9107	91 1e		sta ($1e),y	                sta (up),y
.9109					evaluate_done:
.9109	60		rts		z_evaluate:     rts
.910a					xt_get_current:
.910a	ca		dex		                dex
.910b	ca		dex		                dex
.910c	a0 04		ldy #$04	                ldy #current_offset
.910e	b1 1e		lda ($1e),y	                lda (up),y
.9110	95 00		sta $00,x	                sta 0,x         ; CURRENT is a byte variable
.9112	74 01		stz $01,x	                stz 1,x         ; so the MSB is zero.
.9114	60		rts		z_get_current:  rts
.9115					xt_get_order:
.9115	a0 1e		ldy #$1e	                ldy #num_order_offset
.9117	b1 1e		lda ($1e),y	                lda (up),y
.9119	85 24		sta $24		                sta tmp1
.911b	f0 16		beq $9133	                beq _done       ; If zero, there are no wordlists.
.911d					_loop:
.911d	c6 24		dec $24		                dec tmp1        ; Count down by bytes.
.911f	a9 1f		lda #$1f	                lda #search_order_offset
.9121	18		clc		                clc
.9122	65 24		adc $24		                adc tmp1
.9124	a8		tay		                tay
.9125	ca		dex		                dex
.9126	ca		dex		                dex
.9127	b1 1e		lda ($1e),y	                lda (up),y
.9129	95 00		sta $00,x	                sta 0,x         ; Search order array is bytes, so
.912b	74 01		stz $01,x	                stz 1,x         ; put a zero in the high byte.
.912d	a9 00		lda #$00	                lda #0
.912f	c5 24		cmp $24		                cmp tmp1
.9131	d0 ea		bne $911d	                bne _loop
.9133					_done:
.9133	ca		dex		                dex
.9134	ca		dex		                dex
.9135	a0 1e		ldy #$1e	                ldy #num_order_offset
.9137	b1 1e		lda ($1e),y	                lda (up),y
.9139	95 00		sta $00,x	                sta 0,x
.913b	74 01		stz $01,x	                stz 1,x         ; We only support 8 wordlists.
.913d	60		rts		z_get_order:    rts
.913e					xt_greater_than:
.913e	20 15 d8	jsr $d815	                jsr underflow_2
.9141	a0 00		ldy #$00	                ldy #0          ; default false
.9143	20 37 d7	jsr $d737	                jsr compare_16bit
.9146	f0 03		beq $914b	                beq _false
.9148	10 01		bpl $914b	                bpl _false
.914a	88		dey		                dey
.914b					_false:
.914b	98		tya		                tya
.914c	e8		inx		                inx
.914d	e8		inx		                inx
.914e	95 00		sta $00,x	                sta 0,x
.9150	95 01		sta $01,x	                sta 1,x
.9152	60		rts		z_greater_than: rts
.9153					xt_here:
.9153					xt_asm_arrow:
.9153	ca		dex		                dex
.9154	ca		dex		                dex
.9155	a5 00		lda $00		                lda cp
.9157	95 00		sta $00,x	                sta 0,x
.9159	a5 01		lda $01		                lda cp+1
.915b	95 01		sta $01,x	                sta 1,x
.915d					z_asm_arrow:
.915d	60		rts		z_here:         rts
.915e					xt_hex:
.915e	a9 10		lda #$10	                lda #16
.9160	85 18		sta $18		                sta base
.9162	64 19		stz $19		                stz base+1              ; paranoid
.9164	60		rts		z_hex:          rts
.9165					xt_hexstore:
.9165	20 1a d8	jsr $d81a	                jsr underflow_3
.9168	20 90 8d	jsr $8d90	                jsr xt_dup              ; Save copy of original address
.916b	20 83 a4	jsr $a483	                jsr xt_two_to_r         ; ( addr1 u1 ) ( R: addr2 addr2 )
.916e					_loop:
.916e	b5 00		lda $00,x	                lda 0,x
.9170	15 01		ora $01,x	                ora 1,x
.9172	f0 36		beq $91aa	                beq _done
.9174	20 2d 86	jsr $862d	                jsr xt_cleave           ; ( addr1 u1 addr3 u3 ) ( R: addr2 addr2 )
.9177	20 83 a4	jsr $a483	                jsr xt_two_to_r
.917a	20 89 a7	jsr $a789	                jsr xt_zero
.917d	20 89 a7	jsr $a789	                jsr xt_zero
.9180	20 09 a4	jsr $a409	                jsr xt_two_r_from       ; ( addr1 u1 0 0 addr3 u3 ) ( R: addr2 addr2 )
.9183	20 9e a2	jsr $a29e	                jsr xt_to_number        ; ( addr1 u1 n n addr4 u4 ) ( R: addr2 addr2 )
.9186	b5 00		lda $00,x	                lda 0,x
.9188	15 01		ora $01,x	                ora 1,x
.918a	d0 17		bne $91a3	                bne _have_chars_left
.918c	20 91 a3	jsr $a391	                jsr xt_two_drop         ; ( addr1 u1 n n ) ( R: addr2 addr2 )
.918f	20 61 8a	jsr $8a61	                jsr xt_d_to_s           ; ( addr1 u1 n ) ( R: addr2 addr2 )
.9192	20 5e 9a	jsr $9a5e	                jsr xt_r_fetch          ; ( addr1 u1 n addr2 ) ( R: addr2 addr2 )
.9195	20 f6 85	jsr $85f6	                jsr xt_c_store          ; ( addr1 u1 ) ( R: addr2 addr2 )
.9198	20 73 9a	jsr $9a73	                jsr xt_r_from           ; R>
.919b	20 fe 97	jsr $97fe	                jsr xt_one_plus         ; 1+
.919e	20 51 a3	jsr $a351	                jsr xt_to_r             ; >R ( addr1 u1 ) ( R: addr2+1 addr2 )
.91a1	80 cb		bra $916e	                bra _loop
.91a3					_have_chars_left:
.91a3	8a		txa		                txa
.91a4	18		clc		                clc
.91a5	69 08		adc #$08	                adc #8
.91a7	aa		tax		                tax
.91a8	80 c4		bra $916e	                bra _loop
.91aa					_done:
.91aa	e8		inx		                inx
.91ab	e8		inx		                inx
.91ac	e8		inx		                inx
.91ad	e8		inx		                inx                     ; 2DROP
.91ae	20 09 a4	jsr $a409	                jsr xt_two_r_from       ; ( addr2+n addr2 )
.91b1	20 8f a1	jsr $a18f	                jsr xt_swap
.91b4	20 31 95	jsr $9531	                jsr xt_minus            ; ( n )
.91b7	60		rts		z_hexstore:     rts
.91b8					xt_hold:
.91b8	20 10 d8	jsr $d810	                jsr underflow_1
.91bb	a5 34		lda $34		                lda tohold
.91bd	d0 02		bne $91c1	                bne +
.91bf	c6 35		dec $35		                dec tohold+1
.91c1					+
.91c1	c6 34		dec $34		                dec tohold
.91c3	b5 00		lda $00,x	                lda 0,x
.91c5	92 34		sta ($34)	                sta (tohold)
.91c7	e8		inx		                inx
.91c8	e8		inx		                inx
.91c9	60		rts		z_hold:         rts
.91ca					xt_i:
.91ca	ca		dex		                dex
.91cb	ca		dex		                dex
.91cc	86 2a		stx $2a		                stx tmpdsp
.91ce	ba		tsx		                tsx
.91cf	38		sec		                sec
.91d0	bd 01 01	lda $0101,x	                lda $0101,x     ; LSB
.91d3	fd 03 01	sbc $0103,x	                sbc $0103,x
.91d6	a8		tay		                tay
.91d7	bd 02 01	lda $0102,x	                lda $0102,x     ; MSB
.91da	fd 04 01	sbc $0104,x	                sbc $0104,x
.91dd	a6 2a		ldx $2a		                ldx tmpdsp
.91df	95 01		sta $01,x	                sta 1,x         ; MSB of de-fudged index
.91e1	94 00		sty $00,x	                sty 0,x         ; LSB of de-fudged index
.91e3	60		rts		z_i:            rts
.91e4					xt_if:
.91e4	a0 91		ldy #$91	                ldy #>zero_branch_runtime
.91e6	a9 f5		lda #$f5	                lda #<zero_branch_runtime
.91e8	20 b3 d6	jsr $d6b3	                jsr cmpl_subroutine
.91eb	20 53 91	jsr $9153	                jsr xt_here
.91ee	20 89 a7	jsr $a789	                jsr xt_zero
.91f1	20 4f 87	jsr $874f	                jsr xt_comma
.91f4	60		rts		z_if:           rts
.91f5					zero_branch_runtime:
.91f5	68		pla		                pla
.91f6	85 22		sta $22		                sta tmpbranch
.91f8	68		pla		                pla
.91f9	85 23		sta $23		                sta tmpbranch+1
.91fb	b5 00		lda $00,x	                lda 0,x
.91fd	15 01		ora $01,x	                ora 1,x
.91ff	f0 0f		beq $9210	                beq _zero
.9201	a5 22		lda $22		                lda tmpbranch   ; LSB
.9203	18		clc		                clc
.9204	69 02		adc #$02	                adc #2
.9206	85 24		sta $24		                sta tmp1
.9208	a5 23		lda $23		                lda tmpbranch+1 ; MSB
.920a	69 00		adc #$00	                adc #0          ; For carry
.920c	85 25		sta $25		                sta tmp1+1
.920e	80 13		bra $9223	                bra _done
.9210					_zero:
.9210	a0 01		ldy #$01	                ldy #1
.9212	b1 22		lda ($22),y	                lda (tmpbranch),y
.9214	85 24		sta $24		                sta tmp1
.9216	c8		iny		                iny
.9217	b1 22		lda ($22),y	                lda (tmpbranch),y
.9219	85 25		sta $25		                sta tmp1+1
.921b	a5 24		lda $24		                lda tmp1
.921d	d0 02		bne $9221	                bne +
.921f	c6 25		dec $25		                dec tmp1+1
.9221					+
.9221	c6 24		dec $24		                dec tmp1
.9223					_done:
.9223	a5 25		lda $25		                lda tmp1+1
.9225	48		pha		                pha             ; MSB first
.9226	a5 24		lda $24		                lda tmp1
.9228	48		pha		                pha
.9229	e8		inx		                inx
.922a	e8		inx		                inx
.922b	60		rts		                rts
.922c					xt_immediate:
.922c	20 52 d7	jsr $d752	                jsr current_to_dp
.922f	a0 01		ldy #$01	                ldy #1          ; offset for status byte
.9231	b1 02		lda ($02),y	                lda (dp),y
.9233	09 04		ora #$04	                ora #IM        ; make sure bit 7 is set
.9235	91 02		sta ($02),y	                sta (dp),y
.9237	60		rts		z_immediate:    rts
.9238					xt_input:
.9238	ca		dex		                dex
.9239	ca		dex		                dex
.923a	a9 12		lda #$12	                lda #<input
.923c	95 00		sta $00,x	                sta 0,x
.923e	a9 00		lda #$00	                lda #>input
.9240	95 01		sta $01,x	                sta 1,x
.9242	60		rts		z_input:        rts
.9243					xt_input_to_r:
.9243	68		pla		                pla
.9244	85 24		sta $24		                sta tmp1
.9246	68		pla		                pla
.9247	85 25		sta $25		                sta tmp1+1
.9249	a0 07		ldy #$07	                ldy #7
.924b					_loop:
.924b	b9 06 00	lda $0006,y	                lda insrc,y     ; insrc+7 is toin+1
.924e	48		pha		                pha
.924f	88		dey		                dey
.9250	10 f9		bpl $924b	                bpl _loop
.9252	a5 25		lda $25		                lda tmp1+1
.9254	48		pha		                pha
.9255	a5 24		lda $24		                lda tmp1
.9257	48		pha		                pha
.9258	60		rts		z_input_to_r: 	rts
.9259					xt_int_to_name:
.9259	20 10 d8	jsr $d810	                jsr underflow_1
.925c	ca		dex		                dex
.925d	ca		dex		                dex
.925e	74 00		stz $00,x	                stz 0,x
.9260	74 01		stz $01,x	                stz 1,x
.9262					_wordlist_loop:
.9262	b5 00		lda $00,x	                lda 0,x                 ; Get the current wordlist.
.9264	0a		asl a		                asl                     ; Turn offset into cells offset.
.9265	18		clc		                clc
.9266	69 06		adc #$06	                adc #wordlists_offset
.9268	a8		tay		                tay
.9269	b1 1e		lda ($1e),y	                lda (up),y              ; Save the DP for this wordlist
.926b	85 26		sta $26		                sta tmp2                ; into tmp2
.926d	c8		iny		                iny
.926e	b1 1e		lda ($1e),y	                lda (up),y
.9270	85 27		sta $27		                sta tmp2+1
.9272	a5 26		lda $26		                lda tmp2
.9274	05 27		ora $27		                ora tmp2+1
.9276	f0 38		beq $92b0	                beq _next_wordlist
.9278	b5 02		lda $02,x	                lda 2,x         ; Target xt is now behind wordlist id.
.927a	85 28		sta $28		                sta tmp3        ; Save target xt in tmp3
.927c	b5 03		lda $03,x	                lda 3,x
.927e	85 29		sta $29		                sta tmp3+1
.9280					_loop:
.9280	a0 04		ldy #$04	                ldy #4          ; xt is four bytes down
.9282	b1 26		lda ($26),y	                lda (tmp2),y    ; LSB of xt of current nt
.9284	c5 28		cmp $28		                cmp tmp3
.9286	d0 07		bne $928f	                bne _no_match
.9288	c8		iny		                iny
.9289	b1 26		lda ($26),y	                lda (tmp2),y    ; MSB of xt of current nt
.928b	c5 29		cmp $29		                cmp tmp3+1
.928d	f0 32		beq $92c1	                beq _match
.928f					_no_match:
.928f	18		clc		                clc
.9290	a5 26		lda $26		                lda tmp2
.9292	69 02		adc #$02	                adc #2
.9294	85 26		sta $26		                sta tmp2
.9296	a5 27		lda $27		                lda tmp2+1
.9298	69 00		adc #$00	                adc #0          ; only care about carry
.929a	85 27		sta $27		                sta tmp2+1
.929c	a0 00		ldy #$00	                ldy #0
.929e	b1 26		lda ($26),y	                lda (tmp2),y
.92a0	48		pha		                pha
.92a1	c8		iny		                iny
.92a2	11 26		ora ($26),y	                ora (tmp2),y
.92a4	f0 09		beq $92af	                beq _zero
.92a6	b1 26		lda ($26),y	                lda (tmp2),y
.92a8	85 27		sta $27		                sta tmp2+1
.92aa	68		pla		                pla
.92ab	85 26		sta $26		                sta tmp2
.92ad	80 d1		bra $9280	                bra _loop
.92af					_zero:
.92af	68		pla		                pla             ; Leftover from above loop
.92b0					_next_wordlist:
.92b0	b5 00		lda $00,x	                lda 0,x
.92b2	1a		inc a		                ina
.92b3	95 00		sta $00,x	                sta 0,x
.92b5	c9 0c		cmp #$0c	                cmp #max_wordlists
.92b7	d0 a9		bne $9262	                bne _wordlist_loop
.92b9	e8		inx		                inx
.92ba	e8		inx		                inx
.92bb	74 00		stz $00,x	                stz 0,x
.92bd	74 01		stz $01,x	                stz 1,x
.92bf	80 0a		bra $92cb	                bra z_int_to_name
.92c1					_match:
.92c1	e8		inx		                inx
.92c2	e8		inx		                inx
.92c3	a5 26		lda $26		                lda tmp2
.92c5	95 00		sta $00,x	                sta 0,x
.92c7	a5 27		lda $27		                lda tmp2+1
.92c9	95 01		sta $01,x	                sta 1,x
.92cb	60		rts		z_int_to_name:  rts
.92cc					xt_invert:
.92cc	20 10 d8	jsr $d810	                jsr underflow_1
.92cf	a9 ff		lda #$ff	                lda #$FF
.92d1	55 00		eor $00,x	                eor 0,x         ; LSB
.92d3	95 00		sta $00,x	                sta 0,x
.92d5	a9 ff		lda #$ff	                lda #$FF
.92d7	55 01		eor $01,x	                eor 1,x         ; MSB
.92d9	95 01		sta $01,x	                sta 1,x
.92db	60		rts		z_invert:       rts
.92dc					xt_is:
.92dc	a5 16		lda $16		                lda state
.92de	05 17		ora $17		                ora state+1
.92e0	f0 0c		beq $92ee	                beq _interpreting
.92e2					_compiling:
.92e2	20 7f 85	jsr $857f	                jsr xt_bracket_tick
.92e5	a0 8a		ldy #$8a	                ldy #>xt_defer_store
.92e7	a9 c7		lda #$c7	                lda #<xt_defer_store
.92e9	20 b3 d6	jsr $d6b3	                jsr cmpl_subroutine
.92ec	80 06		bra $92f4	                bra _done
.92ee					_interpreting:
.92ee	20 f2 a1	jsr $a1f2	                jsr xt_tick
.92f1	20 c7 8a	jsr $8ac7	                jsr xt_defer_store
.92f4					_done:
.92f4	60		rts		z_is:           rts
.92f5					xt_j:
.92f5	ca		dex		                dex
.92f6	ca		dex		                dex
.92f7	86 2a		stx $2a		                stx tmpdsp
.92f9	ba		tsx		                tsx
.92fa	38		sec		                sec
.92fb	bd 07 01	lda $0107,x	                lda $0107,x     ; LSB
.92fe	fd 09 01	sbc $0109,x	                sbc $0109,x
.9301	a8		tay		                tay
.9302	bd 08 01	lda $0108,x	                lda $0108,x     ; MSB
.9305	fd 0a 01	sbc $010a,x	                sbc $010A,x
.9308	a6 2a		ldx $2a		                ldx tmpdsp
.930a	95 01		sta $01,x	                sta 1,x         ; MSB of de-fudged index
.930c	94 00		sty $00,x	                sty 0,x         ; LSB of de-fudged index
.930e	60		rts		z_j:            rts
.930f					xt_key:
.930f	20 19 93	jsr $9319	                jsr key_a               ; returns char in A
.9312	ca		dex		                dex
.9313	ca		dex		                dex
.9314	95 00		sta $00,x	                sta 0,x
.9316	74 01		stz $01,x	                stz 1,x
.9318	60		rts		z_key:          rts
.9319					key_a:
.9319	6c 12 00	jmp ($0012)	                jmp (input)             ; JSR/RTS
.931c					xt_latestnt:
.931c	ca		dex		                dex
.931d	ca		dex		                dex
.931e	20 52 d7	jsr $d752	                jsr current_to_dp
.9321	a5 02		lda $02		                lda dp
.9323	95 00		sta $00,x	                sta 0,x
.9325	a5 03		lda $03		                lda dp+1
.9327	95 01		sta $01,x	                sta 1,x
.9329	60		rts		z_latestnt:     rts
.932a					xt_latestxt:
.932a	20 1c 93	jsr $931c	                jsr xt_latestnt         ; ( nt )
.932d	20 c2 95	jsr $95c2	                jsr xt_name_to_int      ; ( xt )
.9330	60		rts		z_latestxt:     rts
.9331					xt_leave:
.9331	68		pla		                pla
.9332	68		pla		                pla
.9333	68		pla		                pla
.9334	68		pla		                pla
.9335	60		rts		                rts             ; this must be compiled, so keep before z_leave
.9336					z_leave:
.9336					xt_left_bracket:
.9336	64 16		stz $16		                stz state
.9338	64 17		stz $17		                stz state+1
.933a	60		rts		z_left_bracket: rts
.933b					xt_less_number_sign:
.933b	20 82 98	jsr $9882	                jsr xt_pad      ; ( addr )
.933e	b5 00		lda $00,x	                lda 0,x
.9340	85 34		sta $34		                sta tohold
.9342	b5 01		lda $01,x	                lda 1,x
.9344	85 35		sta $35		                sta tohold+1
.9346	e8		inx		                inx
.9347	e8		inx		                inx
.9348					z_less_number_sign:
.9348	60		rts		                rts
.9349					xt_less_than:
.9349	20 15 d8	jsr $d815	                jsr underflow_2
.934c	a0 00		ldy #$00	                ldy #0          ; default false
.934e	20 37 d7	jsr $d737	                jsr compare_16bit
.9351	f0 03		beq $9356	                beq _false
.9353	30 01		bmi $9356	                bmi _false
.9355	88		dey		                dey
.9356					_false:
.9356	98		tya		                tya
.9357	e8		inx		                inx
.9358	e8		inx		                inx
.9359	95 00		sta $00,x	                sta 0,x
.935b	95 01		sta $01,x	                sta 1,x
.935d	60		rts		z_less_than:    rts
.935e					xt_list:
.935e	20 10 d8	jsr $d810	                jsr underflow_1
.9361	20 ba 9e	jsr $9eba	                jsr xt_scr
.9364	20 6e a1	jsr $a16e	                jsr xt_store
.9367	20 27 a8	jsr $a827	                jsr xt_editor_l
.936a	60		rts		z_list:         rts
.936b					xt_literal:
.936b	20 10 d8	jsr $d810	                jsr underflow_1
.936e	a0 93		ldy #$93	                ldy #>literal_runtime
.9370	a9 79		lda #$79	                lda #<literal_runtime
.9372	20 b3 d6	jsr $d6b3	                jsr cmpl_subroutine
.9375	20 4f 87	jsr $874f	                jsr xt_comma
.9378	60		rts		z_literal:      rts
.9379					literal_runtime:
.9379	ca		dex		                dex
.937a	ca		dex		                dex
.937b	68		pla		                pla             ; LSB
.937c	85 24		sta $24		                sta tmp1
.937e	68		pla		                pla             ; MSB
.937f	85 25		sta $25		                sta tmp1+1
.9381	a0 01		ldy #$01	                ldy #1
.9383	b1 24		lda ($24),y	                lda (tmp1),y    ; LSB
.9385	95 00		sta $00,x	                sta 0,x
.9387	c8		iny		                iny
.9388	b1 24		lda ($24),y	                lda (tmp1),y    ; MSB
.938a	95 01		sta $01,x	                sta 1,x
.938c	98		tya		                tya
.938d	18		clc		                clc
.938e	65 24		adc $24		                adc tmp1
.9390	a8		tay		                tay
.9391	a5 25		lda $25		                lda tmp1+1
.9393	69 00		adc #$00	                adc #0
.9395	48		pha		                pha
.9396	5a		phy		                phy
.9397	60		rts		                rts
.9398					xt_load:
.9398	20 10 d8	jsr $d810	                jsr underflow_1
.939b	a0 01		ldy #$01	                ldy #blk_offset+1
.939d	b1 1e		lda ($1e),y	                lda (up),y
.939f	48		pha		                pha
.93a0	88		dey		                dey
.93a1	b1 1e		lda ($1e),y	                lda (up),y
.93a3	48		pha		                pha
.93a4	b5 00		lda $00,x	                lda 0,x
.93a6	91 1e		sta ($1e),y	                sta (up),y
.93a8	c8		iny		                iny
.93a9	b5 01		lda $01,x	                lda 1,x
.93ab	91 1e		sta ($1e),y	                sta (up),y
.93ad	20 a2 83	jsr $83a2	                jsr xt_block
.93b0	ca		dex		                dex
.93b1	ca		dex		                dex
.93b2	a9 04		lda #$04	                lda #4
.93b4	95 01		sta $01,x	                sta 1,x
.93b6	74 00		stz $00,x	                stz 0,x
.93b8	20 b0 90	jsr $90b0	                jsr load_evaluate
.93bb	a0 00		ldy #$00	                ldy #blk_offset
.93bd	68		pla		                pla
.93be	91 1e		sta ($1e),y	                sta (up),y
.93c0	c8		iny		                iny
.93c1	68		pla		                pla
.93c2	91 1e		sta ($1e),y	                sta (up),y
.93c4	88		dey		                dey
.93c5	11 1e		ora ($1e),y	                ora (up),y
.93c7	f0 12		beq $93db	                beq _done
.93c9	ca		dex		                dex
.93ca	ca		dex		                dex
.93cb	a0 00		ldy #$00	                ldy #blk_offset
.93cd	b1 1e		lda ($1e),y	                lda (up),y
.93cf	95 00		sta $00,x	                sta 0,x
.93d1	c8		iny		                iny
.93d2	b1 1e		lda ($1e),y	                lda (up),y
.93d4	95 01		sta $01,x	                sta 1,x
.93d6	20 a2 83	jsr $83a2	                jsr xt_block
.93d9	e8		inx		                inx
.93da	e8		inx		                inx
.93db					_done:
.93db	60		rts		z_load:         rts
.93dc					xt_loop:
.93dc	a0 97		ldy #$97	                ldy #>xt_one
.93de	a9 e9		lda #$e9	                lda #<xt_one
.93e0	20 b3 d6	jsr $d6b3	                jsr cmpl_subroutine     ; drop through to +LOOP
.93e3					xt_plus_loop:
.93e3	a0 11		ldy #$11	                ldy #plus_loop_runtime_end-plus_loop_runtime
.93e5	5a		phy		                phy             ; save counter to adjust CP
.93e6					-
.93e6	b9 4a 94	lda $944a,y	                lda plus_loop_runtime,y
.93e9	91 00		sta ($00),y	                sta (cp),y
.93eb	88		dey		                dey
.93ec	10 f8		bpl $93e6	                bpl -
.93ee	68		pla		                pla
.93ef	18		clc		                clc
.93f0	65 00		adc $00		                adc cp
.93f2	85 00		sta $00		                sta cp
.93f4	a5 01		lda $01		                lda cp+1
.93f6	69 00		adc #$00	                adc #0          ; only need carry
.93f8	85 01		sta $01		                sta cp+1
.93fa	20 4f 87	jsr $874f	                jsr xt_comma
.93fd	a9 68		lda #$68	                lda #$68                ; opcode for PLA
.93ff	a0 06		ldy #$06	                ldy #6
.9401					-
.9401	91 00		sta ($00),y	                sta (cp),y
.9403	88		dey		                dey
.9404	10 fb		bpl $9401	                bpl -
.9406	a9 06		lda #$06	                lda #6
.9408	18		clc		                clc
.9409	65 00		adc $00		                adc cp
.940b	85 00		sta $00		                sta cp
.940d	a5 01		lda $01		                lda cp+1
.940f	69 00		adc #$00	                adc #0                  ; only need carry
.9411	85 01		sta $01		                sta cp+1
.9413	b5 00		lda $00,x	                lda 0,x
.9415	85 24		sta $24		                sta tmp1
.9417	b5 01		lda $01,x	                lda 1,x
.9419	85 25		sta $25		                sta tmp1+1
.941b	e8		inx		                inx
.941c	e8		inx		                inx
.941d	a5 00		lda $00		                lda cp
.941f	38		sec		                sec
.9420	e9 01		sbc #$01	                sbc #1
.9422	85 26		sta $26		                sta tmp2
.9424	a5 01		lda $01		                lda cp+1
.9426	e9 00		sbc #$00	                sbc #0
.9428	85 27		sta $27		                sta tmp2+1
.942a	a0 00		ldy #$00	                ldy #0
.942c	a9 a9		lda #$a9	                lda #$A9        ; opcode for LDA immediate
.942e	91 24		sta ($24),y	                sta (tmp1),y
.9430	c8		iny		                iny
.9431	a5 27		lda $27		                lda tmp2+1      ; MSB
.9433	91 24		sta ($24),y	                sta (tmp1),y
.9435	c8		iny		                iny
.9436	a9 48		lda #$48	                lda #$48        ; Opcode for PHA
.9438	91 24		sta ($24),y	                sta (tmp1),y
.943a	c8		iny		                iny
.943b	a9 a9		lda #$a9	                lda #$A9        ; opcode for LDA immediate
.943d	91 24		sta ($24),y	                sta (tmp1),y
.943f	c8		iny		                iny
.9440	a5 26		lda $26		                lda tmp2        ; LSB
.9442	91 24		sta ($24),y	                sta (tmp1),y
.9444	c8		iny		                iny
.9445	a9 48		lda #$48	                lda #$48        ; Opcode for PHA
.9447	91 24		sta ($24),y	                sta (tmp1),y
.9449					z_loop:
.9449	60		rts		z_plus_loop:    rts
.944a					plus_loop_runtime:
.944a	18		clc		                clc
.944b	68		pla		                pla             ; LSB of index
.944c	75 00		adc $00,x	                adc 0,x         ; LSB of step
.944e	a8		tay		                tay             ; temporary storage of LSB
.944f	b8		clv		                clv
.9450	68		pla		                pla             ; MSB of index
.9451	75 01		adc $01,x	                adc 1,x         ; MSB of step
.9453	48		pha		                pha             ; put MSB of index back on stack
.9454	98		tya		                tya             ; put LSB of index back on stack
.9455	48		pha		                pha
.9456	e8		inx		                inx             ; dump step from TOS
.9457	e8		inx		                inx
.9458	70 03		bvs $945d	                bvs _hack+3     ; skip over JMP instruction
.945a					_hack:
>945a	4c				                .byte $4C
.945b					plus_loop_runtime_end:
.945b					xt_lshift:
.945b	20 15 d8	jsr $d815	                jsr underflow_2
.945e	b5 00		lda $00,x	                lda 0,x
.9460	29 0f		and #$0f	                and #%00001111
.9462	f0 08		beq $946c	                beq _done
.9464	a8		tay		                tay
.9465					_loop:
.9465	16 02		asl $02,x	                asl 2,x
.9467	36 03		rol $03,x	                rol 3,x
.9469	88		dey		                dey
.946a	d0 f9		bne $9465	                bne _loop
.946c					_done:
.946c	e8		inx		                inx
.946d	e8		inx		                inx
.946e	60		rts		z_lshift:       rts
.946f					xt_m_star:
.946f	20 15 d8	jsr $d815	                jsr underflow_2
.9472	b5 01		lda $01,x	                lda 1,x         ; MSB of n1
.9474	55 03		eor $03,x	                eor 3,x         ; MSB of n2
.9476	48		pha		                pha
.9477	20 1a 81	jsr $811a	                jsr xt_abs
.947a	20 8f a1	jsr $a18f	                jsr xt_swap
.947d	20 1a 81	jsr $811a	                jsr xt_abs
.9480	20 dd a5	jsr $a5dd	                jsr xt_um_star          ; ( d )
.9483	68		pla		                pla
.9484	10 03		bpl $9489	                bpl _done
.9486	20 22 8b	jsr $8b22	                jsr xt_dnegate
.9489					_done:
.9489	60		rts		z_m_star:       rts
.948a					xt_marker:
.948a	20 52 d7	jsr $d752	                jsr current_to_dp
.948d	a5 02		lda $02		                lda dp
.948f	48		pha		                pha
.9490	a5 03		lda $03		                lda dp+1
.9492	48		pha		                pha
.9493	a5 00		lda $00		                lda cp
.9495	48		pha		                pha
.9496	a5 01		lda $01		                lda cp+1
.9498	48		pha		                pha
.9499	20 4a 89	jsr $894a	                jsr xt_create
.949c	a5 00		lda $00		                lda cp          ; LSB
.949e	38		sec		                sec
.949f	e9 02		sbc #$02	                sbc #2
.94a1	85 00		sta $00		                sta cp
.94a3	a5 01		lda $01		                lda cp+1        ; MSB
.94a5	e9 00		sbc #$00	                sbc #0          ; we only care about the borrow
.94a7	85 01		sta $01		                sta cp+1
.94a9	a0 94		ldy #$94	                ldy #>marker_runtime
.94ab	a9 c8		lda #$c8	                lda #<marker_runtime
.94ad	20 bf d6	jsr $d6bf	                jsr cmpl_word
.94b0	7a		ply		                ply                     ; MSB
.94b1	68		pla		                pla                     ; LSB
.94b2	20 bf d6	jsr $d6bf	                jsr cmpl_word
.94b5	7a		ply		                ply                     ; MSB
.94b6	68		pla		                pla                     ; LSB
.94b7	20 bf d6	jsr $d6bf	                jsr cmpl_word
.94ba	a0 04		ldy #$04	                ldy #4                  ; Start at CURRENT
.94bc					_marker_loop:
.94bc	b1 1e		lda ($1e),y	                lda (up),y
.94be	20 c3 d6	jsr $d6c3	                jsr cmpl_a
.94c1	c8		iny		                iny
.94c2	98		tya		                tya
.94c3	c9 28		cmp #$28	                cmp #40                 ; One past the end of the search order.
.94c5	d0 f5		bne $94bc	                bne _marker_loop
.94c7	60		rts		z_marker:       rts
.94c8					marker_runtime:
.94c8	68		pla		                pla
.94c9	85 24		sta $24		                sta tmp1        ; LSB of address
.94cb	68		pla		                pla
.94cc	85 25		sta $25		                sta tmp1+1      ; MSB of address
.94ce	e6 24		inc $24		                inc tmp1
.94d0	d0 02		bne $94d4	                bne +
.94d2	e6 25		inc $25		                inc tmp1+1
.94d4					+
.94d4	a0 00		ldy #$00	                ldy #0
.94d6	b1 24		lda ($24),y	                lda (tmp1),y
.94d8	85 00		sta $00		                sta cp
.94da	c8		iny		                iny
.94db	b1 24		lda ($24),y	                lda (tmp1),y
.94dd	85 01		sta $01		                sta cp+1
.94df	c8		iny		                iny
.94e0	b1 24		lda ($24),y	                lda (tmp1),y
.94e2	85 02		sta $02		                sta dp
.94e4	c8		iny		                iny
.94e5	b1 24		lda ($24),y	                lda (tmp1),y
.94e7	85 03		sta $03		                sta dp+1
.94e9	a0 04		ldy #$04	                ldy #4
.94eb					_marker_restore_loop:
.94eb	b1 24		lda ($24),y	                lda (tmp1), y
.94ed	91 1e		sta ($1e),y	                sta (up), y
.94ef	c8		iny		                iny
.94f0	98		tya		                tya
.94f1	c9 28		cmp #$28	                cmp #40                 ; One past the end of the search order.
.94f3	d0 f6		bne $94eb	                bne _marker_restore_loop
.94f5	20 65 d7	jsr $d765	                jsr dp_to_current       ; Move the CURRENT DP back.
.94f8	60		rts		                rts
.94f9					xt_max:
.94f9	20 15 d8	jsr $d815	                jsr underflow_2
.94fc	b5 00		lda $00,x	                lda 0,x         ; LSB of TOS
.94fe	d5 02		cmp $02,x	                cmp 2,x         ; LSB of NOS, this sets the carry
.9500	b5 01		lda $01,x	                lda 1,x         ; MSB of TOS
.9502	f5 03		sbc $03,x	                sbc 3,x         ; MSB of NOS
.9504	50 02		bvc $9508	                bvc _no_overflow
.9506	49 80		eor #$80	                eor #$80        ; complement negative flag
.9508					_no_overflow:
.9508	30 08		bmi $9512	                bmi _keep_nos
.950a	b5 00		lda $00,x	                lda 0,x
.950c	95 02		sta $02,x	                sta 2,x
.950e	b5 01		lda $01,x	                lda 1,x
.9510	95 03		sta $03,x	                sta 3,x
.9512					_keep_nos:
.9512	e8		inx		                inx
.9513	e8		inx		                inx
.9514	60		rts		z_max:          rts
.9515					xt_min:
.9515	20 15 d8	jsr $d815	                jsr underflow_2
.9518	b5 00		lda $00,x	                lda 0,x         ; LSB of TOS
.951a	d5 02		cmp $02,x	                cmp 2,x         ; LSB of NOS, this sets carry
.951c	b5 01		lda $01,x	                lda 1,x         ; MSB of TOS
.951e	f5 03		sbc $03,x	                sbc 3,x         ; MSB of NOS
.9520	50 02		bvc $9524	                bvc _no_overflow
.9522	49 80		eor #$80	                eor #$80
.9524					_no_overflow:
.9524	10 08		bpl $952e	                bpl _keep_nos
.9526	b5 00		lda $00,x	                lda 0,x
.9528	95 02		sta $02,x	                sta 2,x
.952a	b5 01		lda $01,x	                lda 1,x
.952c	95 03		sta $03,x	                sta 3,x
.952e					_keep_nos:
.952e	e8		inx		                inx
.952f	e8		inx		                inx
.9530	60		rts		z_min:          rts
.9531					xt_minus:
.9531	20 15 d8	jsr $d815	                jsr underflow_2
.9534	38		sec		                sec
.9535	b5 02		lda $02,x	                lda 2,x         ; LSB
.9537	f5 00		sbc $00,x	                sbc 0,x
.9539	95 02		sta $02,x	                sta 2,x
.953b	b5 03		lda $03,x	                lda 3,x         ; MSB
.953d	f5 01		sbc $01,x	                sbc 1,x
.953f	95 03		sta $03,x	                sta 3,x
.9541	e8		inx		                inx
.9542	e8		inx		                inx
.9543	60		rts		z_minus:        rts
.9544					xt_minus_leading:
.9544	20 15 d8	jsr $d815	                jsr underflow_2
.9547					_loop:
.9547	b5 00		lda $00,x	                lda 0,x
.9549	15 01		ora $01,x	                ora 1,x
.954b	f0 0f		beq $955c	                beq _done
.954d	a1 02		lda ($02,x)	                lda (2,x)               ; get first character
.954f	20 03 d8	jsr $d803	                jsr is_whitespace
.9552	90 08		bcc $955c	                bcc _done
.9554	20 e9 97	jsr $97e9	                jsr xt_one              ; ( addr u 1 )
.9557	20 fa 9f	jsr $9ffa	                jsr xt_slash_string     ; ( addr+ u-1 )
.955a	80 eb		bra $9547	                bra _loop
.955c					_done:
.955c					z_minus_leading:
.955c	60		rts		                rts
.955d					xt_minus_trailing:
.955d	20 15 d8	jsr $d815	                jsr underflow_2
.9560	b5 00		lda $00,x	                lda 0,x         ; LSB of n
.9562	15 01		ora $01,x	                ora 1,x         ; MSB of n
.9564	f0 33		beq $9599	                beq _done
.9566	18		clc		                clc
.9567	b5 02		lda $02,x	                lda 2,x         ; LSB of addr
.9569	75 00		adc $00,x	                adc 0,x
.956b	85 24		sta $24		                sta tmp1
.956d	b5 03		lda $03,x	                lda 3,x         ; MSB of addr
.956f	75 01		adc $01,x	                adc 1,x
.9571	85 25		sta $25		                sta tmp1+1
.9573	a5 24		lda $24		                lda tmp1
.9575	d0 02		bne $9579	                bne +
.9577	c6 25		dec $25		                dec tmp1+1
.9579					+
.9579	c6 24		dec $24		                dec tmp1
.957b					_loop:
.957b	b2 24		lda ($24)	                lda (tmp1)
.957d	c9 20		cmp #$20	                cmp #AscSP
.957f	d0 18		bne $9599	                bne _done
.9581	a5 24		lda $24		                lda tmp1
.9583	d0 02		bne $9587	                bne +
.9585	c6 25		dec $25		                dec tmp1+1
.9587					+
.9587	c6 24		dec $24		                dec tmp1
.9589	b5 00		lda $00,x	                lda 0,x
.958b	d0 02		bne $958f	                bne +
.958d	d6 01		dec $01,x	                dec 1,x
.958f					+
.958f	d6 00		dec $00,x	                dec 0,x
.9591	b5 00		lda $00,x	                lda 0,x
.9593	15 01		ora $01,x	                ora 1,x
.9595	f0 02		beq $9599	                beq _done       ; Count has reached zero - we're done!
.9597	80 e2		bra $957b	                bra _loop
.9599					_done:
.9599					z_minus_trailing:
.9599	60		rts		                rts
.959a					xt_mod:
.959a	20 15 d8	jsr $d815	                jsr underflow_2
.959d	20 e2 9f	jsr $9fe2	                jsr xt_slash_mod
.95a0	e8		inx		                inx             ; DROP
.95a1	e8		inx		                inx
.95a2					z_mod:
.95a2	60		rts		                rts
.95a3					xt_move:
.95a3	b5 03		lda $03,x	                lda 3,x                 ; MSB of addr2
.95a5	d5 05		cmp $05,x	                cmp 5,x                 ; MSB of addr1
.95a7	f0 05		beq $95ae	                beq _lsb                ; wasn't helpful, move to LSB
.95a9	b0 0e		bcs $95b9	                bcs _to_move_up         ; we want CMOVE>
.95ab	4c 7a 86	jmp $867a	                jmp xt_cmove            ; JSR/RTS
.95ae					_lsb:
.95ae	b5 02		lda $02,x	                lda 2,x                 ; LSB of addr2
.95b0	d5 04		cmp $04,x	                cmp 4,x                 ; LSB of addr1
.95b2	f0 08		beq $95bc	                beq _equal              ; LSB is equal as well
.95b4	b0 03		bcs $95b9	                bcs _to_move_up         ; we want CMOVE>
.95b6	4c 7a 86	jmp $867a	                jmp xt_cmove            ; JSR/RTS
.95b9					_to_move_up:
.95b9	4c b5 86	jmp $86b5	                jmp xt_cmove_up         ; JSR/RTS
.95bc					_equal:
.95bc	8a		txa		                txa
.95bd	18		clc		                clc
.95be	69 06		adc #$06	                adc #6
.95c0	aa		tax		                tax
.95c1	60		rts		z_move:         rts
.95c2					xt_name_to_int:
.95c2	20 10 d8	jsr $d810	                jsr underflow_1
.95c5	b5 00		lda $00,x	                lda 0,x
.95c7	18		clc		                clc
.95c8	69 04		adc #$04	                adc #4
.95ca	85 28		sta $28		                sta tmp3
.95cc	b5 01		lda $01,x	                lda 1,x
.95ce	90 01		bcc $95d1	                bcc _done
.95d0	1a		inc a		                ina
.95d1					_done:
.95d1	85 29		sta $29		                sta tmp3+1
.95d3	a0 00		ldy #$00	                ldy #0
.95d5	b1 28		lda ($28),y	                lda (tmp3),y
.95d7	95 00		sta $00,x	                sta 0,x
.95d9	c8		iny		                iny
.95da	b1 28		lda ($28),y	                lda (tmp3),y
.95dc	95 01		sta $01,x	                sta 1,x
.95de	60		rts		z_name_to_int:  rts
.95df					xt_name_to_string:
.95df	20 10 d8	jsr $d810	                jsr underflow_1
.95e2	ca		dex		                dex
.95e3	ca		dex		                dex
.95e4	a1 02		lda ($02,x)	                lda (2,x)
.95e6	95 00		sta $00,x	                sta 0,x
.95e8	74 01		stz $01,x	                stz 1,x
.95ea	b5 02		lda $02,x	                lda 2,x         ; LSB
.95ec	18		clc		                clc
.95ed	69 08		adc #$08	                adc #8
.95ef	a8		tay		                tay
.95f0	b5 03		lda $03,x	                lda 3,x         ; MSB
.95f2	69 00		adc #$00	                adc #0          ; just need carry
.95f4	95 03		sta $03,x	                sta 3,x
.95f6	94 02		sty $02,x	                sty 2,x
.95f8					z_name_to_string:
.95f8	60		rts		                rts
.95f9					xt_nc_limit:
.95f9	ca		dex		                dex
.95fa	ca		dex		                dex
.95fb	a9 1a		lda #$1a	                lda #<nc_limit
.95fd	95 00		sta $00,x	                sta 0,x
.95ff	a9 00		lda #$00	                lda #>nc_limit
.9601	95 01		sta $01,x	                sta 1,x
.9603	60		rts		z_nc_limit:     rts
.9604					xt_negate:
.9604	20 10 d8	jsr $d810	                jsr underflow_1
.9607	a9 00		lda #$00	        	lda #0
.9609	38		sec		                sec
.960a	f5 00		sbc $00,x	                sbc 0,x         ; LSB
.960c	95 00		sta $00,x	                sta 0,x
.960e	a9 00		lda #$00	                lda #0
.9610	f5 01		sbc $01,x	                sbc 1,x         ; MSB
.9612	95 01		sta $01,x	                sta 1,x
.9614	60		rts		z_negate:       rts
.9615					xt_never_native:
.9615	20 52 d7	jsr $d752	                jsr current_to_dp
.9618	a0 01		ldy #$01	                ldy #1          ; offset for status byte
.961a	b1 02		lda ($02),y	                lda (dp),y
.961c	09 08		ora #$08	                ora #NN         ; Make sure NN flag is set
.961e	29 fd		and #$fd	                and #$ff-AN     ; and AN flag is clear.
.9620	91 02		sta ($02),y	                sta (dp),y
.9622					z_never_native:
.9622	60		rts		                rts
.9623					xt_nip:
.9623	20 15 d8	jsr $d815	                jsr underflow_2
.9626	b5 00		lda $00,x	                lda 0,x         ; LSB
.9628	95 02		sta $02,x	                sta 2,x
.962a	b5 01		lda $01,x	                lda 1,x         ; MSB
.962c	95 03		sta $03,x	                sta 3,x
.962e	e8		inx		                inx
.962f	e8		inx		                inx
.9630	60		rts		z_nip:          rts
.9631					xt_not_equals:
.9631	20 15 d8	jsr $d815	                jsr underflow_2
.9634	a0 00		ldy #$00	                ldy #0                  ; default is true
.9636	b5 00		lda $00,x	                lda 0,x                 ; LSB
.9638	d5 02		cmp $02,x	                cmp 2,x
.963a	d0 0a		bne $9646	                bne _not_equal
.963c	b5 01		lda $01,x	                lda 1,x                 ; MSB
.963e	d5 03		cmp $03,x	                cmp 3,x
.9640	d0 04		bne $9646	                bne _not_equal
.9642	a9 ff		lda #$ff	                lda #$FF
.9644	80 01		bra $9647	                bra _done
.9646					_not_equal:
.9646	88		dey		                dey                     ; drop thru to done
.9647					_done:
.9647	98		tya		                tya
.9648	e8		inx		                inx
.9649	e8		inx		                inx
.964a	95 00		sta $00,x	                sta 0,x
.964c	95 01		sta $01,x	                sta 1,x
.964e	60		rts		z_not_equals:   rts
.964f					xt_not_rote:
.964f	20 1a d8	jsr $d81a	                jsr underflow_3
.9652	b4 01		ldy $01,x	                ldy 1,x         ; MSB first
.9654	b5 03		lda $03,x	                lda 3,x
.9656	95 01		sta $01,x	                sta 1,x
.9658	b5 05		lda $05,x	                lda 5,x
.965a	95 03		sta $03,x	                sta 3,x
.965c	94 05		sty $05,x	                sty 5,x
.965e	b4 00		ldy $00,x	                ldy 0,x         ; LSB second
.9660	b5 02		lda $02,x	                lda 2,x
.9662	95 00		sta $00,x	                sta 0,x
.9664	b5 04		lda $04,x	                lda 4,x
.9666	95 02		sta $02,x	                sta 2,x
.9668	94 04		sty $04,x	                sty 4,x
.966a	60		rts		z_not_rote:     rts
.966b					xt_number:
.966b	20 15 d8	jsr $d815	                jsr underflow_2
.966e	64 2a		stz $2a		                stz tmpdsp      ; flag for double
.9670	64 2b		stz $2b		                stz tmpdsp+1    ; flag for minus
.9672	a5 18		lda $18		                lda base
.9674	48		pha		                pha
.9675	20 99 a3	jsr $a399	                jsr xt_two_dup
.9678	a1 02		lda ($02,x)	                lda (2,x)
.967a					_check_dec:
.967a	c9 23		cmp #$23	                cmp #$23        ; ASCII for "#"
.967c	d0 04		bne $9682	                bne _check_hex
.967e	a9 0a		lda #$0a	                lda #$0A
.9680	80 42		bra $96c4	                bra _base_changed
.9682					_check_hex:
.9682	c9 24		cmp #$24	                cmp #$24        ; ASCII for "$"
.9684	d0 04		bne $968a	                bne _check_binary
.9686	a9 10		lda #$10	                lda #$10
.9688	80 3a		bra $96c4	                bra _base_changed
.968a					_check_binary:
.968a	c9 25		cmp #$25	                cmp #$25        ; ASCII for "%"
.968c	d0 04		bne $9692	                bne _check_char
.968e	a9 02		lda #$02	                lda #$02
.9690	80 32		bra $96c4	                bra _base_changed
.9692					_check_char:
.9692	c9 27		cmp #$27	                cmp #$27        ; ASCII for "'"
.9694	d0 3a		bne $96d0	                bne _check_minus
.9696	b5 00		lda $00,x	                lda 0,x         ; Get the length
.9698	c9 03		cmp #$03	                cmp #$03
.969a	d0 26		bne $96c2	                bne _not_a_char
.969c	b5 01		lda $01,x	                lda 1,x
.969e	d0 22		bne $96c2	                bne _not_a_char ; No compare needed to check for non-zero.
.96a0	b5 02		lda $02,x	                lda 2,x         ; LSB of address
.96a2	18		clc		                clc
.96a3	69 02		adc #$02	                adc #2          ; length of string
.96a5	85 2c		sta $2c		                sta tmptos
.96a7	b5 03		lda $03,x	                lda 3,x
.96a9	69 00		adc #$00	                adc #0          ; only need carry
.96ab	85 2d		sta $2d		                sta tmptos+1
.96ad	b2 2c		lda ($2c)	                lda (tmptos)
.96af	c9 27		cmp #$27	                cmp #$27        ; ASCII for "'"
.96b1	d0 0f		bne $96c2	                bne _not_a_char
.96b3	f6 02		inc $02,x	                inc 2,x
.96b5	d0 02		bne $96b9	                bne +
.96b7	f6 03		inc $03,x	                inc 3,x
.96b9					+
.96b9	a1 02		lda ($02,x)	                lda (2,x)
.96bb	95 02		sta $02,x	                sta 2,x
.96bd	74 03		stz $03,x	                stz 3,x
.96bf	4c 40 97	jmp $9740	                jmp _drop_original_string ; Single flag will drop the TOS for us.
.96c2					_not_a_char:
.96c2	80 5a		bra $971e	                bra _number_error
.96c4					_base_changed:
.96c4	85 18		sta $18		                sta base        ; Switch to the new base
.96c6	f6 02		inc $02,x	                inc 2,x         ; start one character later
.96c8	d0 02		bne $96cc	                bne +
.96ca	f6 03		inc $03,x	                inc 3,x
.96cc					+
.96cc	d6 00		dec $00,x	                dec 0,x         ; decrease string length by one
.96ce	a1 02		lda ($02,x)	                lda (2,x)       ; Load the first char again
.96d0					_check_minus:
.96d0	c9 2d		cmp #$2d	                cmp #$2D        ; ASCII for "-"
.96d2	d0 0a		bne $96de	                bne _check_dot
.96d4	c6 2b		dec $2b		                dec tmpdsp+1
.96d6	f6 02		inc $02,x	                inc 2,x         ; start one character later
.96d8	d0 02		bne $96dc	                bne +
.96da	f6 03		inc $03,x	                inc 3,x
.96dc					+
.96dc	d6 00		dec $00,x	                dec 0,x         ; decrease string length by one
.96de					_check_dot:
.96de	b5 02		lda $02,x	                lda 2,x         ; LSB of address
.96e0	18		clc		                clc
.96e1	75 00		adc $00,x	                adc 0,x         ; length of string
.96e3	85 2c		sta $2c		                sta tmptos
.96e5	b5 03		lda $03,x	                lda 3,x
.96e7	69 00		adc #$00	                adc #0          ; only need carry
.96e9	85 2d		sta $2d		                sta tmptos+1
.96eb	a5 2c		lda $2c		                lda tmptos
.96ed	d0 02		bne $96f1	                bne +
.96ef	c6 2d		dec $2d		                dec tmptos+1
.96f1					+
.96f1	c6 2c		dec $2c		                dec tmptos
.96f3	b2 2c		lda ($2c)	                lda (tmptos)
.96f5	c9 2e		cmp #$2e	                cmp #'.'
.96f7	d0 04		bne $96fd	                bne _main
.96f9	c6 2a		dec $2a		                dec tmpdsp
.96fb	d6 00		dec $00,x	                dec 0,x
.96fd					_main:
.96fd	ca		dex		                dex
.96fe	ca		dex		                dex
.96ff	ca		dex		                dex
.9700	ca		dex		                dex
.9701	b5 04		lda $04,x	                lda 4,x         ; LSB of length
.9703	95 00		sta $00,x	                sta 0,x
.9705	74 01		stz $01,x	                stz 1,x         ; MSB, max length 255 chars
.9707	b5 06		lda $06,x	                lda 6,x         ; LSB of address
.9709	95 02		sta $02,x	                sta 2,x
.970b	b5 07		lda $07,x	                lda 7,x         ; MSB of address
.970d	95 03		sta $03,x	                sta 3,x
.970f	74 04		stz $04,x	                stz 4,x         ; clear space for ud
.9711	74 05		stz $05,x	                stz 5,x
.9713	74 06		stz $06,x	                stz 6,x
.9715	74 07		stz $07,x	                stz 7,x
.9717	20 9e a2	jsr $a29e	                jsr xt_to_number        ; (ud addr u -- ud addr u )
.971a	b5 00		lda $00,x	                lda 0,x
.971c	f0 1e		beq $973c	                beq _all_converted
.971e					_number_error:
.971e	20 91 a3	jsr $a391	                jsr xt_two_drop ; >NUMBER modified addr u
.9721	20 91 a3	jsr $a391	                jsr xt_two_drop ; ud   (partially converted number)
.9724	a9 3e		lda #$3e	                lda #$3E        ; ASCII for ">"
.9726	20 d7 8d	jsr $8dd7	                jsr emit_a
.9729	20 e4 a4	jsr $a4e4	                jsr xt_type
.972c	a9 3c		lda #$3c	                lda #$3C        ; ASCII for "<"
.972e	20 d7 8d	jsr $8dd7	                jsr emit_a
.9731	20 ff a0	jsr $a0ff	                jsr xt_space
.9734	68		pla		                pla
.9735	85 18		sta $18		                sta base
.9737	a9 08		lda #$08	                lda #err_syntax
.9739	4c 26 d8	jmp $d826	                jmp error
.973c					_all_converted:
.973c	e8		inx		                inx ; Drop the current addr u
.973d	e8		inx		                inx
.973e	e8		inx		                inx
.973f	e8		inx		                inx
.9740					_drop_original_string:
.9740	20 5f a4	jsr $a45f	                jsr xt_two_swap  ; Drop the original addr u
.9743	20 91 a3	jsr $a391	                jsr xt_two_drop  ; (was saved for unknown word error message)
.9746	a5 2a		lda $2a		                lda tmpdsp      ; flag for double
.9748	f0 0d		beq $9757	                beq _single
.974a	a9 20		lda #$20	                lda #%00100000
.974c	04 20		tsb $20		                tsb status
.974e	a5 2b		lda $2b		                lda tmpdsp+1
.9750	f0 12		beq $9764	                beq _done       ; no minus, all done
.9752	20 22 8b	jsr $8b22	                jsr xt_dnegate
.9755	80 0d		bra $9764	                bra _done
.9757					_single:
.9757	e8		inx		                inx
.9758	e8		inx		                inx
.9759	a9 20		lda #$20	                lda #%00100000
.975b	14 20		trb $20		                trb status
.975d	a5 2b		lda $2b		                lda tmpdsp+1
.975f	f0 03		beq $9764	                beq _done       ; no minus, all done
.9761	20 04 96	jsr $9604	                jsr xt_negate
.9764					_done:
.9764	68		pla		                pla
.9765	85 18		sta $18		                sta base
.9767	60		rts		z_number:       rts
.9768					xt_number_sign:
.9768	20 15 d8	jsr $d815	                jsr underflow_2         ; double number
.976b	20 68 83	jsr $8368	                jsr xt_base
.976e	20 61 8f	jsr $8f61	                jsr xt_fetch            ; ( ud1 base )
.9771	20 51 a3	jsr $a351	                jsr xt_to_r             ; >r
.9774	20 89 a7	jsr $a789	                jsr xt_zero             ; 0
.9777	20 5e 9a	jsr $9a5e	                jsr xt_r_fetch          ; r@
.977a	20 9b a5	jsr $a59b	                jsr xt_um_slash_mod     ; um/mod
.977d	20 38 9b	jsr $9b38	                jsr xt_rot              ; rot
.9780	20 38 9b	jsr $9b38	                jsr xt_rot              ; rot
.9783	20 73 9a	jsr $9a73	                jsr xt_r_from           ; r>
.9786	20 9b a5	jsr $a59b	                jsr xt_um_slash_mod     ; um/mod
.9789	20 38 9b	jsr $9b38	                jsr xt_rot              ; rot
.978c	20 38 9b	jsr $9b38	                jsr xt_rot              ; ( ud rem )
.978f	b5 00		lda $00,x	                lda 0,x
.9791	a8		tay		                tay
.9792	b9 04 d4	lda $d404,y	                lda s_abc_upper,y
.9795	95 00		sta $00,x	                sta 0,x
.9797	74 01		stz $01,x	                stz 1,x                 ; paranoid; now ( ud char )
.9799	20 b8 91	jsr $91b8	                jsr xt_hold
.979c					z_number_sign:
.979c	60		rts		                rts
.979d					xt_number_sign_greater:
.979d	20 15 d8	jsr $d815	                jsr underflow_2         ; double number
.97a0	a5 34		lda $34		                lda tohold
.97a2	95 00		sta $00,x	                sta 0,x         ; LSB of tohold
.97a4	95 02		sta $02,x	                sta 2,x
.97a6	a5 35		lda $35		                lda tohold+1
.97a8	95 01		sta $01,x	                sta 1,x         ; MSB of addr
.97aa	95 03		sta $03,x	                sta 3,x         ; ( addr addr )
.97ac	20 82 98	jsr $9882	                jsr xt_pad      ; ( addr addr pad )
.97af	38		sec		                sec
.97b0	b5 00		lda $00,x	                lda 0,x         ; LSB of pad address
.97b2	f5 02		sbc $02,x	                sbc 2,x
.97b4	95 02		sta $02,x	                sta 2,x
.97b6	b5 01		lda $01,x	                lda 1,x         ; MSB, which should always be zero
.97b8	f5 03		sbc $03,x	                sbc 3,x
.97ba	95 03		sta $03,x	                sta 3,x         ; ( addr u pad )
.97bc	e8		inx		                inx
.97bd	e8		inx		                inx
.97be					z_number_sign_greater:
.97be	60		rts		                rts
.97bf					xt_number_sign_s:
.97bf	20 15 d8	jsr $d815	                jsr underflow_2
.97c2					_loop:
.97c2	20 68 97	jsr $9768	                jsr xt_number_sign
.97c5	b5 00		lda $00,x	                lda 0,x
.97c7	15 01		ora $01,x	                ora 1,x
.97c9	15 02		ora $02,x	                ora 2,x
.97cb	15 03		ora $03,x	                ora 3,x
.97cd	d0 f3		bne $97c2	                bne _loop
.97cf					z_number_sign_s:
.97cf	60		rts		                rts
.97d0					xt_of:
.97d0	a0 98		ldy #$98	                ldy #>xt_over
.97d2	a9 74		lda #$74	                lda #<xt_over
.97d4	20 b3 d6	jsr $d6b3	                jsr cmpl_subroutine
.97d7	a0 8e		ldy #$8e	                ldy #>xt_equal
.97d9	a9 af		lda #$af	                lda #<xt_equal
.97db	20 b3 d6	jsr $d6b3	                jsr cmpl_subroutine
.97de	20 e4 91	jsr $91e4	                jsr xt_if
.97e1	a0 8d		ldy #$8d	                ldy #>xt_drop
.97e3	a9 0f		lda #$0f	                lda #<xt_drop
.97e5	20 b3 d6	jsr $d6b3	                jsr cmpl_subroutine
.97e8	60		rts		z_of:           rts
.97e9					xt_editor_wordlist:
.97e9					xt_one:
.97e9	ca		dex		                dex
.97ea	ca		dex		                dex
.97eb	a9 01		lda #$01	                lda #1
.97ed	95 00		sta $00,x	                sta 0,x
.97ef	74 01		stz $01,x	                stz 1,x
.97f1					z_editor_wordlist:
.97f1					z_one:
.97f1	60		rts		                rts
.97f2					xt_one_minus:
.97f2	20 10 d8	jsr $d810	                jsr underflow_1
.97f5	b5 00		lda $00,x	                lda 0,x
.97f7	d0 02		bne $97fb	                bne +
.97f9	d6 01		dec $01,x	                dec 1,x
.97fb					+
.97fb	d6 00		dec $00,x	                dec 0,x
.97fd	60		rts		z_one_minus:    rts
.97fe					xt_char_plus:
.97fe					xt_one_plus:
.97fe	20 10 d8	jsr $d810	                jsr underflow_1
.9801	f6 00		inc $00,x	                inc 0,x
.9803	d0 02		bne $9807	                bne _done
.9805	f6 01		inc $01,x	                inc 1,x
.9807					_done:
.9807					z_char_plus:
.9807	60		rts		z_one_plus:     rts
.9808					xt_only:
.9808	ca		dex		                dex
.9809	ca		dex		                dex
.980a	a9 ff		lda #$ff	                lda #$FF
.980c	95 00		sta $00,x	                sta 0,x
.980e	95 01		sta $01,x	                sta 1,x
.9810	20 fc 9c	jsr $9cfc	                jsr xt_set_order
.9813	60		rts		z_only:         rts
.9814					xt_or:
.9814	20 15 d8	jsr $d815	                jsr underflow_2
.9817	b5 00		lda $00,x	                lda 0,x
.9819	15 02		ora $02,x	                ora 2,x
.981b	95 02		sta $02,x	                sta 2,x
.981d	b5 01		lda $01,x	                lda 1,x
.981f	15 03		ora $03,x	                ora 3,x
.9821	95 03		sta $03,x	                sta 3,x
.9823	e8		inx		                inx
.9824	e8		inx		                inx
.9825	60		rts		z_or:           rts
.9826					xt_order:
.9826	20 44 89	jsr $8944	                jsr xt_cr
.9829	20 15 91	jsr $9115	                jsr xt_get_order        ; ( wid_n ... wid_1 n )
.982c	b5 00		lda $00,x	                lda 0,x                 ; assumes no more than 255 wordlists
.982e	f0 1e		beq $984e	                beq _drop_done
.9830					_have_wordlists:
.9830	a8		tay		                tay
.9831					_loop:
.9831	e8		inx		                inx
.9832	e8		inx		                inx                     ; DROP, now ( wid_n ... wid_1 )
.9833	b5 00		lda $00,x	                lda 0,x
.9835	5a		phy		                phy
.9836	20 51 98	jsr $9851	                jsr order_print_wid_string   ; internal helper function
.9839	7a		ply		                ply
.983a	88		dey		                dey
.983b	d0 f4		bne $9831	                bne _loop
.983d	20 ff a0	jsr $a0ff	                jsr xt_space
.9840	20 ff a0	jsr $a0ff	                jsr xt_space
.9843	20 0a 91	jsr $910a	                jsr xt_get_current      ; ( wid )
.9846	b5 00		lda $00,x	                lda 0,x
.9848	20 51 98	jsr $9851	                jsr order_print_wid_string
.984b	20 44 89	jsr $8944	                jsr xt_cr
.984e					_drop_done:
.984e	e8		inx		                inx
.984f	e8		inx		                inx
.9850					z_order:
.9850	60		rts		                rts
.9851					order_print_wid_string:
.9851	c9 04		cmp #$04	                cmp #4
.9853	90 09		bcc $985e	                bcc _output_string      ; less than 4, print a real string
.9855	ca		dex		                dex
.9856	ca		dex		                dex
.9857	95 00		sta $00,x	                sta 0,x
.9859	74 01		stz $01,x	                stz 1,x
.985b	4c 0f a5	jmp $a50f	                jmp xt_u_dot            ; JSR/RTS as this routine is not compiled
.985e					_output_string:
.985e	a8		tay		                tay
.985f	b9 65 98	lda $9865,y	                lda _wid_data,y
.9862	4c 3c d8	jmp $d83c	                jmp print_string_no_lf  ; JSR/RTS as this routine is not compiled
.9865					_wid_data:
>9865	03				        .byte str_wid_forth            ; WID 0: "Forth"
>9866	06				        .byte str_wid_editor           ; WID 1: "Editor"
>9867	07				        .byte str_wid_assembler        ; WID 2: "Assembler"
>9868	08				        .byte str_wid_root             ; WID 3: "Root"
.9869					xt_output:
.9869	ca		dex		                dex
.986a	ca		dex		                dex
.986b	a9 10		lda #$10	                lda #<output
.986d	95 00		sta $00,x	                sta 0,x
.986f	a9 00		lda #$00	                lda #>output
.9871	95 01		sta $01,x	                sta 1,x
.9873	60		rts		z_output:       rts
.9874					xt_over:
.9874	20 15 d8	jsr $d815	                jsr underflow_2
.9877	ca		dex		                dex
.9878	ca		dex		                dex
.9879	b5 04		lda $04,x	                lda 4,x         ; LSB
.987b	95 00		sta $00,x	                sta 0,x
.987d	b5 05		lda $05,x	                lda 5,x         ; MSB
.987f	95 01		sta $01,x	                sta 1,x
.9881	60		rts		z_over:         rts
.9882					xt_pad:
.9882	ca		dex		                dex
.9883	ca		dex		                dex
.9884	a5 00		lda $00		                lda cp
.9886	18		clc		                clc
.9887	69 ff		adc #$ff	                adc #padoffset  ; assumes padoffset one byte in size
.9889	95 00		sta $00,x	                sta 0,x
.988b	a5 01		lda $01		                lda cp+1
.988d	69 00		adc #$00	                adc #0          ; only need carry
.988f	95 01		sta $01,x	                sta 1,x
.9891	60		rts		z_pad:          rts
.9892					xt_page:
.9892	a9 1b		lda #$1b	                lda #AscESC
.9894	20 d7 8d	jsr $8dd7	                jsr emit_a
.9897	a9 5b		lda #$5b	                lda #$5B        ; ASCII for "["
.9899	20 d7 8d	jsr $8dd7	                jsr emit_a
.989c	a9 32		lda #$32	                lda #'2'
.989e	20 d7 8d	jsr $8dd7	                jsr emit_a
.98a1	a9 4a		lda #$4a	                lda #'J'
.98a3	20 d7 8d	jsr $8dd7	                jsr emit_a
.98a6	20 89 a7	jsr $a789	                jsr xt_zero
.98a9	20 89 a7	jsr $a789	                jsr xt_zero
.98ac	20 31 83	jsr $8331	                jsr xt_at_xy
.98af	60		rts		z_page:         rts
.98b0					xt_paren:
.98b0	ca		dex		                dex
.98b1	ca		dex		                dex
.98b2	a9 29		lda #$29	                lda #41     ; Right parenthesis
.98b4	95 00		sta $00,x	                sta 0,x
.98b6	74 01		stz $01,x	                stz 1,x
.98b8	20 1b 99	jsr $991b	                jsr xt_parse
.98bb	e8		inx		                inx
.98bc	e8		inx		                inx
.98bd	e8		inx		                inx
.98be	e8		inx		                inx
.98bf	60		rts		z_paren:        rts
.98c0					xt_parse_name:
.98c0	a5 0a		lda $0a		                lda ciblen              ; LSB of counter
.98c2	38		sec		                sec
.98c3	e5 0c		sbc $0c		                sbc toin
.98c5	85 24		sta $24		                sta tmp1
.98c7	a5 0b		lda $0b		                lda ciblen+1            ; MSB
.98c9	e5 0d		sbc $0d		                sbc toin+1
.98cb	85 25		sta $25		                sta tmp1+1
.98cd	a5 24		lda $24		                lda tmp1
.98cf	05 25		ora $25		                ora tmp1+1
.98d1	f0 28		beq $98fb	                beq _empty_line
.98d3	a5 08		lda $08		                lda cib
.98d5	18		clc		                clc
.98d6	65 0c		adc $0c		                adc toin
.98d8	85 26		sta $26		                sta tmp2                ; LSB of first character
.98da	a5 09		lda $09		                lda cib+1
.98dc	65 0d		adc $0d		                adc toin+1
.98de	85 27		sta $27		                sta tmp2+1              ; MSB
.98e0					_skip_loop:
.98e0	b2 26		lda ($26)	                lda (tmp2)              ; work copy of cib
.98e2	20 03 d8	jsr $d803	                jsr is_whitespace
.98e5	90 1f		bcc $9906	                bcc _char_found
.98e7	e6 26		inc $26		                inc tmp2
.98e9	d0 02		bne $98ed	                bne +
.98eb	e6 27		inc $27		                inc tmp2+1
.98ed					+
.98ed	a5 24		lda $24		                lda tmp1
.98ef	d0 02		bne $98f3	                bne +
.98f1	c6 25		dec $25		                dec tmp1+1
.98f3	c6 24		dec $24		+               dec tmp1
.98f5	a5 24		lda $24		                lda tmp1
.98f7	05 25		ora $25		                ora tmp1+1
.98f9	d0 e5		bne $98e0	                bne _skip_loop          ; fall through if empty line
.98fb					_empty_line:
.98fb	ca		dex		                dex
.98fc	ca		dex		                dex
.98fd	ca		dex		                dex
.98fe	ca		dex		                dex
.98ff	74 00		stz $00,x	                stz 0,x                 ; TOS is zero
.9901	74 01		stz $01,x	                stz 1,x
.9903	4c b2 99	jmp $99b2	                jmp z_parse_name        ; skip over PARSE
.9906					_char_found:
.9906	a5 26		lda $26		                lda tmp2
.9908	38		sec		                sec
.9909	e5 08		sbc $08		                sbc cib
.990b	85 0c		sta $0c		                sta toin
.990d	a5 27		lda $27		                lda tmp2+1
.990f	e5 09		sbc $09		                sbc cib+1
.9911	85 0d		sta $0d		                sta toin+1
.9913	ca		dex		                dex
.9914	ca		dex		                dex
.9915	a9 20		lda #$20	                lda #AscSP
.9917	95 00		sta $00,x	                sta 0,x
.9919	74 01		stz $01,x	                stz 1,x                 ; paranoid, now ( "name" c )
.991b					xt_parse:
.991b	20 10 d8	jsr $d810	                jsr underflow_1
.991e	a5 0a		lda $0a		                lda ciblen
.9920	05 0b		ora $0b		                ora ciblen+1
.9922	f0 0c		beq $9930	                beq _abort_parse
.9924	a5 0d		lda $0d		                lda toin+1              ; MSB
.9926	c5 0b		cmp $0b		                cmp ciblen+1
.9928	90 0e		bcc $9938	                bcc _go_parse           ; unsigned comparison
.992a	a5 0c		lda $0c		                lda toin                ; LSB
.992c	c5 0a		cmp $0a		                cmp ciblen
.992e	90 08		bcc $9938	                bcc _go_parse
.9930					_abort_parse:
.9930	ca		dex		                dex
.9931	ca		dex		                dex
.9932	74 00		stz $00,x	                stz 0,x
.9934	74 01		stz $01,x	                stz 1,x
.9936	80 7a		bra $99b2	                bra _done
.9938					_go_parse:
.9938	b5 00		lda $00,x	                lda 0,x
.993a	85 2c		sta $2c		                sta tmptos
.993c	ca		dex		                dex
.993d	ca		dex		                dex
.993e	a5 08		lda $08		                lda cib
.9940	18		clc		                clc
.9941	65 0c		adc $0c		                adc toin        ; LSB
.9943	85 24		sta $24		                sta tmp1
.9945	85 26		sta $26		                sta tmp2
.9947	95 02		sta $02,x	                sta 2,x
.9949	a5 09		lda $09		                lda cib+1
.994b	65 0d		adc $0d		                adc toin+1      ; MSB
.994d	85 25		sta $25		                sta tmp1+1
.994f	85 27		sta $27		                sta tmp2+1
.9951	95 03		sta $03,x	                sta 3,x
.9953	a5 08		lda $08		                lda cib
.9955	18		clc		                clc
.9956	65 0a		adc $0a		                adc ciblen
.9958	85 28		sta $28		                sta tmp3
.995a	a5 09		lda $09		                lda cib+1
.995c	65 0b		adc $0b		                adc ciblen+1
.995e	85 29		sta $29		                sta tmp3+1
.9960	64 2d		stz $2d		                stz tmptos+1
.9962					_loop:
.9962	a5 26		lda $26		                lda tmp2
.9964	c5 28		cmp $28		                cmp tmp3
.9966	d0 06		bne $996e	                bne _not_empty
.9968	a5 27		lda $27		                lda tmp2+1
.996a	c5 29		cmp $29		                cmp tmp3+1
.996c	f0 1d		beq $998b	                beq _eol
.996e					_not_empty:
.996e	b2 26		lda ($26)	                lda (tmp2)
.9970	a4 2c		ldy $2c		                ldy tmptos
.9972	c0 20		cpy #$20	                cpy #AscSP
.9974	d0 07		bne $997d	                bne _not_whitespace
.9976	20 03 d8	jsr $d803	                jsr is_whitespace
.9979	90 02		bcc $997d	                bcc _not_whitespace
.997b	80 0c		bra $9989	                bra _found_delimiter
.997d					_not_whitespace:
.997d	c5 2c		cmp $2c		                cmp tmptos
.997f	f0 08		beq $9989	                beq _found_delimiter
.9981	e6 26		inc $26		                inc tmp2
.9983	d0 dd		bne $9962	                bne _loop
.9985	e6 27		inc $27		                inc tmp2+1
.9987	80 d9		bra $9962	                bra _loop
.9989					_found_delimiter:
.9989	e6 2d		inc $2d		                inc tmptos+1
.998b					_eol:
.998b	a5 26		lda $26		                lda tmp2
.998d	38		sec		                sec
.998e	e5 24		sbc $24		                sbc tmp1
.9990	95 00		sta $00,x	                sta 0,x
.9992	a5 27		lda $27		                lda tmp2+1
.9994	e5 25		sbc $25		                sbc tmp1+1
.9996	95 01		sta $01,x	                sta 1,x
.9998	a5 26		lda $26		                lda tmp2
.999a	38		sec		                sec
.999b	e5 08		sbc $08		                sbc cib
.999d	85 0c		sta $0c		                sta toin
.999f	a5 27		lda $27		                lda tmp2+1
.99a1	e5 09		sbc $09		                sbc cib+1
.99a3	85 0d		sta $0d		                sta toin+1
.99a5	a5 0c		lda $0c		                lda toin
.99a7	18		clc		                clc
.99a8	65 2d		adc $2d		                adc tmptos+1
.99aa	85 0c		sta $0c		                sta toin
.99ac	a5 0d		lda $0d		                lda toin+1
.99ae	69 00		adc #$00	                adc #0          ; we only need the carry
.99b0	85 0d		sta $0d		                sta toin+1
.99b2					_done:
.99b2					z_parse_name:
.99b2	60		rts		z_parse:        rts
.99b3					xt_pick:
.99b3	16 00		asl $00,x	                asl 0,x         ; we assume u < 128 (stack is small)
.99b5	8a		txa		                txa
.99b6	75 00		adc $00,x	                adc 0,x
.99b8	a8		tay		                tay
.99b9	b9 02 00	lda $0002,y	                lda 0002,y
.99bc	95 00		sta $00,x	                sta 0,x
.99be	b9 03 00	lda $0003,y	                lda 0003,y
.99c1	95 01		sta $01,x	                sta 1,x
.99c3	60		rts		z_pick:         rts
.99c4					xt_plus:
.99c4	20 15 d8	jsr $d815	                jsr underflow_2
.99c7	18		clc		                clc
.99c8	b5 00		lda $00,x	                lda 0,x         ; LSB
.99ca	75 02		adc $02,x	                adc 2,x
.99cc	95 02		sta $02,x	                sta 2,x
.99ce	b5 01		lda $01,x	                lda 1,x         ; MSB. No CLC, conserve carry bit
.99d0	75 03		adc $03,x	                adc 3,x
.99d2	95 03		sta $03,x	                sta 3,x
.99d4	e8		inx		                inx
.99d5	e8		inx		                inx
.99d6	60		rts		z_plus:         rts
.99d7					xt_plus_store:
.99d7	20 15 d8	jsr $d815	                jsr underflow_2
.99da	b5 00		lda $00,x	                lda 0,x
.99dc	85 24		sta $24		                sta tmp1
.99de	b5 01		lda $01,x	                lda 1,x
.99e0	85 25		sta $25		                sta tmp1+1
.99e2	a0 00		ldy #$00	                ldy #0          ; LSB
.99e4	b1 24		lda ($24),y	                lda (tmp1),y
.99e6	18		clc		                clc
.99e7	75 02		adc $02,x	                adc 2,x
.99e9	91 24		sta ($24),y	                sta (tmp1),y
.99eb	c8		iny		                iny             ; MSB
.99ec	b1 24		lda ($24),y	                lda (tmp1),y
.99ee	75 03		adc $03,x	                adc 3,x
.99f0	91 24		sta ($24),y	                sta (tmp1),y
.99f2	e8		inx		                inx
.99f3	e8		inx		                inx
.99f4	e8		inx		                inx
.99f5	e8		inx		                inx
.99f6	60		rts		z_plus_store:   rts
.99f7					xt_postpone:
.99f7	20 c0 98	jsr $98c0	                jsr xt_parse_name               ; ( -- addr n )
.99fa	b5 00		lda $00,x	                lda 0,x
.99fc	15 01		ora $01,x	                ora 1,x
.99fe	d0 05		bne $9a05	                bne +
.9a00	a9 05		lda #$05	                lda #err_noname
.9a02	4c 26 d8	jmp $d826	                jmp error
.9a05					+
.9a05	20 bc 8f	jsr $8fbc	                jsr xt_find_name                ; ( -- nt | 0 )
.9a08	d0 05		bne $9a0f	                bne +
.9a0a	a9 05		lda #$05	                lda #err_noname
.9a0c	4c 26 d8	jmp $d826	                jmp error
.9a0f					+
.9a0f	b5 00		lda $00,x	                lda 0,x
.9a11	85 24		sta $24		                sta tmp1
.9a13	b5 01		lda $01,x	                lda 1,x
.9a15	85 25		sta $25		                sta tmp1+1
.9a17	20 c2 95	jsr $95c2	                jsr xt_name_to_int              ; ( nt -- xt )
.9a1a	e6 24		inc $24		                inc tmp1
.9a1c	d0 02		bne $9a20	                bne +
.9a1e	e6 25		inc $25		                inc tmp1+1
.9a20					+
.9a20	b2 24		lda ($24)	                lda (tmp1)
.9a22	29 04		and #$04	                and #IM         ; mask all but Intermediate flag
.9a24	f0 05		beq $9a2b	                beq _not_immediate
.9a26	20 ce 87	jsr $87ce	                jsr xt_compile_comma
.9a29	80 0a		bra $9a35	                bra _done
.9a2b					_not_immediate:
.9a2b	20 6b 93	jsr $936b	                jsr xt_literal
.9a2e	a0 87		ldy #$87	                ldy #>xt_compile_comma
.9a30	a9 ce		lda #$ce	                lda #<xt_compile_comma
.9a32	20 b3 d6	jsr $d6b3	                jsr cmpl_subroutine
.9a35					_done:
.9a35	60		rts		z_postpone:     rts
.9a36					xt_previous:
.9a36	20 15 91	jsr $9115	                jsr xt_get_order
.9a39	20 23 96	jsr $9623	                jsr xt_nip
.9a3c	20 f2 97	jsr $97f2	                jsr xt_one_minus
.9a3f	20 fc 9c	jsr $9cfc	                jsr xt_set_order
.9a42	60		rts		z_previous:     rts
.9a43					xt_question:
.9a43	20 61 8f	jsr $8f61	                jsr xt_fetch
.9a46	20 17 8c	jsr $8c17	                jsr xt_dot
.9a49	60		rts		z_question:     rts
.9a4a					xt_question_dup:
.9a4a	20 10 d8	jsr $d810	                jsr underflow_1
.9a4d	b5 00		lda $00,x	                lda 0,x
.9a4f	15 01		ora $01,x	                ora 1,x
.9a51	f0 0a		beq $9a5d	                beq _done
.9a53	ca		dex		                dex
.9a54	ca		dex		                dex
.9a55	b5 02		lda $02,x	                lda 2,x
.9a57	95 00		sta $00,x	                sta 0,x
.9a59	b5 03		lda $03,x	                lda 3,x
.9a5b	95 01		sta $01,x	                sta 1,x
.9a5d					_done:
.9a5d	60		rts		z_question_dup: rts
.9a5e					xt_r_fetch:
.9a5e	7a		ply		                ply             ; LSB
.9a5f	84 24		sty $24		                sty tmp1
.9a61	7a		ply		                ply             ; MSB
.9a62	ca		dex		                dex
.9a63	ca		dex		                dex
.9a64	68		pla		                pla             ; LSB
.9a65	95 00		sta $00,x	                sta 0,x
.9a67	68		pla		                pla             ; MSB
.9a68	95 01		sta $01,x	                sta 1,x
.9a6a	48		pha		                pha
.9a6b	b5 00		lda $00,x	                lda 0,x
.9a6d	48		pha		                pha
.9a6e	5a		phy		                phy             ; MSB
.9a6f	a4 24		ldy $24		                ldy tmp1
.9a71	5a		phy		                phy             ; LSB
.9a72	60		rts		z_r_fetch:      rts
.9a73					xt_r_from:
.9a73	68		pla		                pla             ; LSB
.9a74	85 2c		sta $2c		                sta tmptos
.9a76	7a		ply		                ply             ; MSB
.9a77	ca		dex		                dex
.9a78	ca		dex		                dex
.9a79	68		pla		                pla             ; LSB
.9a7a	95 00		sta $00,x	                sta 0,x
.9a7c	68		pla		                pla             ; MSB
.9a7d	95 01		sta $01,x	                sta 1,x
.9a7f	5a		phy		                phy             ; MSB
.9a80	a5 2c		lda $2c		                lda tmptos
.9a82	48		pha		                pha             ; LSB
.9a83	60		rts		z_r_from:       rts
.9a84					xt_r_to_input:
.9a84	68		pla		                pla
.9a85	85 24		sta $24		                sta tmp1
.9a87	68		pla		                pla
.9a88	85 25		sta $25		                sta tmp1+1
.9a8a	a0 00		ldy #$00	                ldy #0
.9a8c					_loop:
.9a8c	68		pla		                pla
.9a8d	99 06 00	sta $0006,y	                sta insrc,y
.9a90	c8		iny		                iny
.9a91	c0 08		cpy #$08	                cpy #8
.9a93	d0 f7		bne $9a8c	                bne _loop
.9a95	a5 25		lda $25		                lda tmp1+1
.9a97	48		pha		                pha
.9a98	a5 24		lda $24		                lda tmp1
.9a9a	48		pha		                pha
.9a9b	60		rts		z_r_to_input: 	rts
.9a9c					xt_recurse:
.9a9c	a0 00		ldy #$00	                ldy #0
.9a9e	a9 20		lda #$20	                lda #$20        ; opcode for JSR
.9aa0	91 00		sta ($00),y	                sta (cp),y
.9aa2	c8		iny		                iny
.9aa3	24 20		bit $20		                bit status
.9aa5	70 0c		bvs $9ab3	                bvs _nt_in_workword
.9aa7	a5 04		lda $04		                lda workword
.9aa9	91 00		sta ($00),y	                sta (cp),y
.9aab	c8		iny		                iny
.9aac	a5 05		lda $05		                lda workword+1
.9aae	91 00		sta ($00),y	                sta (cp),y
.9ab0	c8		iny		                iny
.9ab1	80 1b		bra $9ace	                bra _update_cp
.9ab3					_nt_in_workword:
.9ab3	a5 04		lda $04		                lda workword            ; LSB
.9ab5	18		clc		                clc
.9ab6	69 04		adc #$04	                adc #4
.9ab8	85 24		sta $24		                sta tmp1
.9aba	a5 05		lda $05		                lda workword+1          ; MSB
.9abc	69 00		adc #$00	                adc #0
.9abe	85 25		sta $25		                sta tmp1+1
.9ac0	b2 24		lda ($24)	                lda (tmp1)
.9ac2	91 00		sta ($00),y	                sta (cp),y
.9ac4	5a		phy		                phy
.9ac5	a0 01		ldy #$01	                ldy #1
.9ac7	b1 24		lda ($24),y	                lda (tmp1),y
.9ac9	7a		ply		                ply
.9aca	c8		iny		                iny
.9acb	91 00		sta ($00),y	                sta (cp),y
.9acd	c8		iny		                iny
.9ace					_update_cp:
.9ace	98		tya		                tya
.9acf	18		clc		                clc
.9ad0	65 00		adc $00		                adc cp
.9ad2	85 00		sta $00		                sta cp
.9ad4	90 02		bcc $9ad8	                bcc _done
.9ad6	e6 01		inc $01		                inc cp+1
.9ad8					_done:
.9ad8	60		rts		z_recurse:      rts
.9ad9					xt_refill:
.9ad9	a5 06		lda $06		                lda insrc               ; cheat: We only check LSB
.9adb	d0 2d		bne $9b0a	                bne _src_not_kbd
.9add	ca		dex		                dex
.9ade	ca		dex		                dex
.9adf	ca		dex		                dex
.9ae0	ca		dex		                dex
.9ae1	a5 08		lda $08		                lda cib                 ; address of CIB is NOS
.9ae3	95 02		sta $02,x	                sta 2,x
.9ae5	a5 09		lda $09		                lda cib+1
.9ae7	95 03		sta $03,x	                sta 3,x
.9ae9	64 0a		stz $0a		                stz ciblen              ; go in with empty buffer
.9aeb	64 0b		stz $0b		                stz ciblen+1
.9aed	a9 ff		lda #$ff	                lda #bsize              ; max number of chars is TOS
.9aef	95 00		sta $00,x	                sta 0,x
.9af1	74 01		stz $01,x	                stz 1,x                 ; cheat: We only accept max 255
.9af3	20 2f 81	jsr $812f	                jsr xt_accept           ; ( addr n1 -- n2)
.9af6	b5 00		lda $00,x	                lda 0,x
.9af8	85 0a		sta $0a		                sta ciblen
.9afa	b5 01		lda $01,x	                lda 1,x
.9afc	85 0b		sta $0b		                sta ciblen+1            ; though we only accept 255 chars
.9afe	64 0c		stz $0c		                stz toin
.9b00	64 0d		stz $0d		                stz toin+1
.9b02	a9 ff		lda #$ff	                lda #$FF                ; overwrite with TRUE flag
.9b04	95 00		sta $00,x	                sta 0,x
.9b06	95 01		sta $01,x	                sta 1,x
.9b08	80 10		bra $9b1a	                bra _done
.9b0a					_src_not_kbd:
.9b0a	1a		inc a		                ina
.9b0b	d0 08		bne $9b15	                bne _src_not_string
.9b0d	ca		dex		                dex
.9b0e	ca		dex		                dex
.9b0f	74 00		stz $00,x	                stz 0,x
.9b11	74 01		stz $01,x	                stz 1,x
.9b13	80 05		bra $9b1a	                bra z_refill
.9b15					_src_not_string:
.9b15	a9 01		lda #$01	                lda #err_badsource
.9b17	4c 26 d8	jmp $d826	                jmp error
.9b1a					_done:
.9b1a	60		rts		z_refill:       rts
.9b1b					xt_repeat:
.9b1b	20 6a 82	jsr $826a	                jsr xt_again
.9b1e	20 53 91	jsr $9153	                jsr xt_here
.9b21	20 8f a1	jsr $a18f	                jsr xt_swap
.9b24	20 6e a1	jsr $a16e	                jsr xt_store
.9b27	60		rts		z_repeat:       rts
.9b28					xt_right_bracket:
.9b28	a9 ff		lda #$ff	                lda #$FF
.9b2a	85 16		sta $16		                sta state
.9b2c	85 17		sta $17		                sta state+1
.9b2e					z_right_bracket:
.9b2e	60		rts		                rts
.9b2f					xt_root_wordlist:
.9b2f	ca		dex		                dex             ; The WID for the Root wordlist is 3.
.9b30	ca		dex		                dex
.9b31	a9 03		lda #$03	                lda #3
.9b33	95 00		sta $00,x	                sta 0,x
.9b35	74 01		stz $01,x	                stz 1,x
.9b37					z_root_wordlist:
.9b37	60		rts		                rts
.9b38					xt_rot:
.9b38	20 1a d8	jsr $d81a	                jsr underflow_3
.9b3b	b4 05		ldy $05,x	                ldy 5,x         ; MSB first
.9b3d	b5 03		lda $03,x	                lda 3,x
.9b3f	95 05		sta $05,x	                sta 5,x
.9b41	b5 01		lda $01,x	                lda 1,x
.9b43	95 03		sta $03,x	                sta 3,x
.9b45	94 01		sty $01,x	                sty 1,x
.9b47	b4 04		ldy $04,x	                ldy 4,x         ; LSB next
.9b49	b5 02		lda $02,x	                lda 2,x
.9b4b	95 04		sta $04,x	                sta 4,x
.9b4d	b5 00		lda $00,x	                lda 0,x
.9b4f	95 02		sta $02,x	                sta 2,x
.9b51	94 00		sty $00,x	                sty 0,x
.9b53	60		rts		z_rot:          rts
.9b54					xt_rshift:
.9b54	20 15 d8	jsr $d815	                jsr underflow_2
.9b57	b5 00		lda $00,x	                lda 0,x
.9b59	29 0f		and #$0f	                and #%00001111
.9b5b	f0 08		beq $9b65	                beq _done               ; if 0 shifts, quit
.9b5d	a8		tay		                tay
.9b5e					_loop:
.9b5e	56 03		lsr $03,x	                lsr 3,x
.9b60	76 02		ror $02,x	                ror 2,x
.9b62	88		dey		                dey
.9b63	d0 f9		bne $9b5e	                bne _loop
.9b65					_done:
.9b65	e8		inx		                inx
.9b66	e8		inx		                inx
.9b67	60		rts		z_rshift:       rts
.9b68					xt_s_backslash_quote:
.9b68	a9 ff		lda #$ff	                lda #$FF
.9b6a	85 26		sta $26		                sta tmp2
.9b6c	64 27		stz $27		                stz tmp2+1
.9b6e	20 34 9d	jsr $9d34	                jsr s_quote_start
.9b71					_done:
.9b71					z_s_backslash_quote:
.9b71	60		rts		                rts
.9b72					convert_hex_value:
.9b72	c9 41		cmp #$41	        cmp #'A'
.9b74	90 07		bcc $9b7d	        bcc _digit
.9b76	29 df		and #$df	        and #$DF                ; Make it uppercase.
.9b78	38		sec		        sec
.9b79	e9 37		sbc #$37	        sbc #'7'                 ; gives value 10 for 'A'
.9b7b	80 03		bra $9b80	        bra _done
.9b7d					_digit:
.9b7d	38		sec		        sec
.9b7e	e9 30		sbc #$30	        sbc #'0'
.9b80					_done:
.9b80	60		rts		        rts
.9b81					xt_search_wordlist:
.9b81	20 1a d8	jsr $d81a	                jsr underflow_3
.9b84	a5 1e		lda $1e		                lda up
.9b86	18		clc		                clc
.9b87	69 06		adc #$06	                adc #wordlists_offset
.9b89	85 26		sta $26		                sta tmp2
.9b8b	a5 1f		lda $1f		                lda up+1
.9b8d	69 00		adc #$00	                adc #0          ; Adding carry
.9b8f	85 27		sta $27		                sta tmp2+1
.9b91	b5 00		lda $00,x	                lda 0,x
.9b93	0a		asl a		                asl             ; Convert wid to offset in cells (x2)
.9b94	65 26		adc $26		                adc tmp2
.9b96	85 26		sta $26		                sta tmp2
.9b98	90 02		bcc $9b9c	                bcc +
.9b9a	e6 27		inc $27		                inc tmp2+1      ; Propagate carry if needed.
.9b9c					+
.9b9c	e8		inx		                inx
.9b9d	e8		inx		                inx
.9b9e	b5 00		lda $00,x	                lda 0,x
.9ba0	15 01		ora $01,x	                ora 1,x
.9ba2	d0 03		bne $9ba7	                bne _check_wordlist
.9ba4	4c 5f 9c	jmp $9c5f	                jmp _done
.9ba7					_check_wordlist:
.9ba7	a5 26		lda $26		                lda tmp2
.9ba9	05 27		ora $27		                ora tmp2+1
.9bab	d0 03		bne $9bb0	                bne _have_string
.9bad	4c 5f 9c	jmp $9c5f	                jmp _done
.9bb0					_have_string:
.9bb0	b2 26		lda ($26)	                lda (tmp2)              ; nt of first word in Dictionary
.9bb2	85 24		sta $24		                sta tmp1
.9bb4	e6 26		inc $26		                inc tmp2                ; Move to the upper byte
.9bb6	d0 02		bne $9bba	                bne +
.9bb8	e6 27		inc $27		                inc tmp2+1
.9bba					+
.9bba	b2 26		lda ($26)	                lda (tmp2)
.9bbc	85 25		sta $25		                sta tmp1+1
.9bbe	b5 02		lda $02,x	                lda 2,x                 ; Address of mystery string
.9bc0	85 26		sta $26		                sta tmp2
.9bc2	b5 03		lda $03,x	                lda 3,x
.9bc4	85 27		sta $27		                sta tmp2+1
.9bc6					_loop:
.9bc6	b2 24		lda ($24)	                lda (tmp1)
.9bc8	d5 00		cmp $00,x	                cmp 0,x
.9bca	d0 7b		bne $9c47	                bne _next_entry
.9bcc					_compare_string:
.9bcc	b2 26		lda ($26)	                lda (tmp2)      ; first character of mystery string
.9bce	c9 5b		cmp #$5b	                cmp #$5B        ; ASCII '[' (one past Z)
.9bd0	b0 07		bcs $9bd9	                bcs _compare_first
.9bd2	c9 41		cmp #$41	                cmp #$41        ; ASCII 'A'
.9bd4	90 03		bcc $9bd9	                bcc _compare_first
.9bd6	18		clc		                clc
.9bd7	69 20		adc #$20	                adc #$20
.9bd9					_compare_first:
.9bd9	a0 08		ldy #$08	                ldy #8          ; Offset in nt to name
.9bdb	d1 24		cmp ($24),y	                cmp (tmp1),y    ; first character of current word
.9bdd	d0 68		bne $9c47	                bne _next_entry
.9bdf	b5 00		lda $00,x	                lda 0,x
.9be1	3a		dec a		                dea
.9be2	f0 2c		beq $9c10	                beq _success
.9be4	a5 24		lda $24		                lda tmp1
.9be6	48		pha		                pha             ; Preserve tmp1 on the return stack.
.9be7	18		clc		                clc
.9be8	69 08		adc #$08	                adc #8
.9bea	85 24		sta $24		                sta tmp1        ; Reusing tmp1 temporarily for string check.
.9bec	a5 25		lda $25		                lda tmp1+1
.9bee	48		pha		                pha             ; Preserve tmp1+1 on the return stack.
.9bef	69 00		adc #$00	                adc #0          ; we only need the carry
.9bf1	85 25		sta $25		                sta tmp1+1
.9bf3	b4 00		ldy $00,x	                ldy 0,x         ; index is length of string minus 1
.9bf5	88		dey		                dey
.9bf6					_string_loop:
.9bf6	b1 26		lda ($26),y	                lda (tmp2),y    ; last char of mystery string
.9bf8	c9 5b		cmp #$5b	                cmp #$5B         ; ASCII '[' (one past Z)
.9bfa	b0 07		bcs $9c03	                bcs _check_char
.9bfc	c9 41		cmp #$41	                cmp #$41        ; ASCII 'A'
.9bfe	90 03		bcc $9c03	                bcc _check_char
.9c00	18		clc		                clc
.9c01	69 20		adc #$20	                adc #$20
.9c03					_check_char:
.9c03	d1 24		cmp ($24),y	                cmp (tmp1),y    ; last char of word we're testing against
.9c05	d0 3a		bne $9c41	                bne _next_entry_tmp1
.9c07	88		dey		                dey
.9c08	d0 ec		bne $9bf6	                bne _string_loop
.9c0a					_success_tmp1:
.9c0a	68		pla		                pla             ; Restore tmp1 from the return stack.
.9c0b	85 25		sta $25		                sta tmp1+1
.9c0d	68		pla		                pla
.9c0e	85 24		sta $24		                sta tmp1
.9c10					_success:
.9c10	e8		inx		                inx
.9c11	e8		inx		                inx
.9c12	a5 24		lda $24		                lda tmp1
.9c14	95 00		sta $00,x	                sta 0,x
.9c16	a5 25		lda $25		                lda tmp1+1
.9c18	95 01		sta $01,x	                sta 1,x
.9c1a	20 90 8d	jsr $8d90	                jsr xt_dup              ; ( nt nt )
.9c1d	20 c2 95	jsr $95c2	                jsr xt_name_to_int      ; ( nt xt )
.9c20	20 8f a1	jsr $a18f	                jsr xt_swap             ; ( xt nt )
.9c23	a0 00		ldy #$00	                ldy #0                  ; Prepare flag
.9c25	f6 00		inc $00,x	                inc 0,x
.9c27	d0 02		bne $9c2b	                bne +
.9c29	f6 01		inc $01,x	                inc 1,x                 ; ( xt nt+1 )
.9c2b					+
.9c2b	a1 00		lda ($00,x)	                lda (0,x)               ; ( xt char )
.9c2d	29 04		and #$04	                and #IM
.9c2f	d0 08		bne $9c39	                bne _immediate          ; bit set, we're immediate
.9c31	a9 ff		lda #$ff	                lda #$FF                ; We're not immediate, return -1
.9c33	95 00		sta $00,x	                sta 0,x
.9c35	95 01		sta $01,x	                sta 1,x
.9c37	80 28		bra $9c61	                bra _done_nodrop
.9c39					_immediate:
.9c39	a9 01		lda #$01	                lda #1                  ; We're immediate, return 1
.9c3b	95 00		sta $00,x	                sta 0,x
.9c3d	74 01		stz $01,x	                stz 1,x
.9c3f	80 20		bra $9c61	                bra _done_nodrop
.9c41					_next_entry_tmp1:
.9c41	68		pla		                pla             ; Restore tmp1 from the return stack.
.9c42	85 25		sta $25		                sta tmp1+1
.9c44	68		pla		                pla
.9c45	85 24		sta $24		                sta tmp1
.9c47					_next_entry:
.9c47	a0 02		ldy #$02	                ldy #2
.9c49	b1 24		lda ($24),y	                lda (tmp1),y
.9c4b	48		pha		                pha
.9c4c	c8		iny		                iny
.9c4d	b1 24		lda ($24),y	                lda (tmp1),y
.9c4f	85 25		sta $25		                sta tmp1+1
.9c51	68		pla		                pla
.9c52	85 24		sta $24		                sta tmp1
.9c54	05 25		ora $25		                ora tmp1+1
.9c56	f0 03		beq $9c5b	                beq _fail_done
.9c58	4c c6 9b	jmp $9bc6	                jmp _loop
.9c5b					_fail_done:
.9c5b	74 02		stz $02,x	                stz 2,x         ; failure flag
.9c5d	74 03		stz $03,x	                stz 3,x
.9c5f					_done:
.9c5f	e8		inx		                inx
.9c60	e8		inx		                inx
.9c61					_done_nodrop:
.9c61					z_search_wordlist:
.9c61	60		rts		                rts
.9c62					xt_see:
.9c62	20 c0 98	jsr $98c0	                jsr xt_parse_name       ; ( addr u )
.9c65	20 bc 8f	jsr $8fbc	                jsr xt_find_name        ; ( nt | 0 )
.9c68	b5 00		lda $00,x	                lda 0,x
.9c6a	15 01		ora $01,x	                ora 1,x
.9c6c	d0 05		bne $9c73	                bne +
.9c6e	a9 05		lda #$05	                lda #err_noname
.9c70	4c 26 d8	jmp $d826	                jmp error
.9c73					+
.9c73	20 44 89	jsr $8944	                jsr xt_cr
.9c76	a5 18		lda $18		                lda base
.9c78	48		pha		                pha
.9c79	20 5e 91	jsr $915e	                jsr xt_hex
.9c7c	a9 0a		lda #$0a	                lda #str_see_nt
.9c7e	20 3c d8	jsr $d83c	                jsr print_string_no_lf
.9c81	20 90 8d	jsr $8d90	                jsr xt_dup              ; ( nt nt )
.9c84	20 0f a5	jsr $a50f	                jsr xt_u_dot
.9c87	20 ff a0	jsr $a0ff	                jsr xt_space            ; ( nt )
.9c8a	20 90 8d	jsr $8d90	                jsr xt_dup              ; ( nt nt )
.9c8d	20 c2 95	jsr $95c2	                jsr xt_name_to_int      ; ( nt xt )
.9c90	a9 0b		lda #$0b	                lda #str_see_xt
.9c92	20 3c d8	jsr $d83c	                jsr print_string_no_lf
.9c95	20 90 8d	jsr $8d90	                jsr xt_dup              ; ( nt xt xt )
.9c98	20 0f a5	jsr $a50f	                jsr xt_u_dot
.9c9b	20 44 89	jsr $8944	                jsr xt_cr               ; ( nt xt )
.9c9e	a9 09		lda #$09	                lda #str_see_flags
.9ca0	20 3c d8	jsr $d83c	                jsr print_string_no_lf
.9ca3	20 74 98	jsr $9874	                jsr xt_over             ; ( nt xt nt )
.9ca6	20 fe 97	jsr $97fe	                jsr xt_one_plus         ; ( nt xt nt+1 )
.9ca9	20 61 8f	jsr $8f61	                jsr xt_fetch            ; ( nt xt flags )
.9cac	b5 00		lda $00,x	                lda 0,x
.9cae	a0 06		ldy #$06	                ldy #6                  ; Not all bits are used
.9cb0					_flag_loop:
.9cb0	48		pha		                pha
.9cb1	29 01		and #$01	                and #%00000001
.9cb3	18		clc		                clc
.9cb4	69 30		adc #$30	                adc #$30                ; ASCII "0"
.9cb6	20 d7 8d	jsr $8dd7	                jsr emit_a
.9cb9	20 ff a0	jsr $a0ff	                jsr xt_space
.9cbc	68		pla		                pla
.9cbd	6a		ror a		                ror                     ; Next flag
.9cbe	88		dey		                dey
.9cbf	d0 ef		bne $9cb0	                bne _flag_loop
.9cc1	20 44 89	jsr $8944	                jsr xt_cr
.9cc4	e8		inx		                inx
.9cc5	e8		inx		                inx                     ; ( nt xt )
.9cc6	a9 0c		lda #$0c	                lda #str_see_size
.9cc8	20 3c d8	jsr $d83c	                jsr print_string_no_lf
.9ccb	20 8f a1	jsr $a18f	                jsr xt_swap             ; ( xt nt )
.9cce	20 56 a7	jsr $a756	                jsr xt_wordsize         ; ( xt u )
.9cd1	20 90 8d	jsr $8d90	                jsr xt_dup              ; ( xt u u ) for DUMP and DISASM
.9cd4	20 86 8a	jsr $8a86	                jsr xt_decimal
.9cd7	20 0f a5	jsr $a50f	                jsr xt_u_dot            ; ( xt u )
.9cda	20 5e 91	jsr $915e	                jsr xt_hex
.9cdd	20 44 89	jsr $8944	                jsr xt_cr
.9ce0	20 99 a3	jsr $a399	                jsr xt_two_dup          ; ( xt u xt u )
.9ce3	20 15 8d	jsr $8d15	                jsr xt_dump
.9ce6	20 44 89	jsr $8944	                jsr xt_cr
.9ce9	20 1b 8b	jsr $8b1b	                jsr xt_disasm
.9cec	68		pla		                pla
.9ced	85 18		sta $18		                sta base
.9cef	60		rts		z_see:          rts
.9cf0					xt_set_current:
.9cf0	20 10 d8	jsr $d810	                jsr underflow_1
.9cf3	a0 04		ldy #$04	                ldy #current_offset
.9cf5	b5 00		lda $00,x	                lda 0,x         ; CURRENT is byte variable
.9cf7	91 1e		sta ($1e),y	                sta (up),y      ; so only the LSB is used.
.9cf9	e8		inx		                inx
.9cfa	e8		inx		                inx
.9cfb	60		rts		z_set_current:  rts
.9cfc					xt_set_order:
.9cfc	a9 ff		lda #$ff	                lda #$FF
.9cfe	d5 01		cmp $01,x	                cmp 1,x
.9d00	d0 12		bne $9d14	                bne _start
.9d02	d5 00		cmp $00,x	                cmp 0,x
.9d04	d0 0e		bne $9d14	                bne _start
.9d06	ca		dex		                dex             ; Make room for the count.
.9d07	ca		dex		                dex
.9d08	74 03		stz $03,x	                stz 3,x         ; ROOT-WORDLIST is 3
.9d0a	a9 03		lda #$03	                lda #3
.9d0c	95 02		sta $02,x	                sta 2,x
.9d0e	74 01		stz $01,x	                stz 1,x         ; Count is 1.
.9d10	a9 01		lda #$01	                lda #1
.9d12	95 00		sta $00,x	                sta 0,x
.9d14					_start:
.9d14	a0 1e		ldy #$1e	                ldy #num_order_offset
.9d16	b5 00		lda $00,x	                lda 0,x
.9d18	91 1e		sta ($1e),y	                sta (up),y      ; #ORDER is a byte variable.
.9d1a	85 24		sta $24		                sta tmp1        ; Save a copy for zero check and looping.
.9d1c	e8		inx		                inx             ; Drop the count off the data stack.
.9d1d	e8		inx		                inx
.9d1e	a5 24		lda $24		                lda tmp1
.9d20	f0 0d		beq $9d2f	                beq _done       ; If zero, there are no wordlists.
.9d22	a0 1f		ldy #$1f	                ldy #search_order_offset
.9d24					_loop:
.9d24	b5 00		lda $00,x	                lda 0,x         ; The search order is a byte array
.9d26	91 1e		sta ($1e),y	                sta (up),y      ; so only save the LSB
.9d28	c8		iny		                iny
.9d29	e8		inx		                inx
.9d2a	e8		inx		                inx
.9d2b	c6 24		dec $24		                dec tmp1
.9d2d	d0 f5		bne $9d24	                bne _loop
.9d2f					_done:
.9d2f	60		rts		z_set_order:    rts
.9d30					xt_s_quote:
.9d30	64 26		stz $26		                stz tmp2
.9d32	64 27		stz $27		                stz tmp2+1
.9d34					s_quote_start:
.9d34	ca		dex		                dex
.9d35	ca		dex		                dex
.9d36	ca		dex		                dex
.9d37	ca		dex		                dex
.9d38	a9 4c		lda #$4c	                lda #$4C
.9d3a	20 c3 d6	jsr $d6c3	                jsr cmpl_a
.9d3d	20 c3 d6	jsr $d6c3	                jsr cmpl_a
.9d40	20 c3 d6	jsr $d6c3	                jsr cmpl_a
.9d43	a5 00		lda $00		                lda cp
.9d45	95 02		sta $02,x	                sta 2,x
.9d47	a5 01		lda $01		                lda cp+1
.9d49	95 03		sta $03,x	                sta 3,x
.9d4b					_savechars_loop:
.9d4b	a5 0d		lda $0d		                lda toin+1              ; MSB
.9d4d	c5 0b		cmp $0b		                cmp ciblen+1
.9d4f	90 2a		bcc $9d7b	                bcc _input_fine         ; unsigned comparison
.9d51	a5 0c		lda $0c		                lda toin                ; LSB
.9d53	c5 0a		cmp $0a		                cmp ciblen
.9d55	90 24		bcc $9d7b	                bcc _input_fine
.9d57	a5 26		lda $26		                lda tmp2
.9d59	48		pha		                pha
.9d5a	a5 27		lda $27		                lda tmp2+1
.9d5c	48		pha		                pha
.9d5d	a5 28		lda $28		                lda tmp3    ; Only tmp3 used, so don't bother with tmp3+1
.9d5f	48		pha		                pha
.9d60	20 d9 9a	jsr $9ad9	                jsr xt_refill           ; ( -- f )
.9d63	68		pla		                pla
.9d64	85 28		sta $28		                sta tmp3
.9d66	68		pla		                pla
.9d67	85 27		sta $27		                sta tmp2+1
.9d69	68		pla		                pla
.9d6a	85 26		sta $26		                sta tmp2
.9d6c	b5 00		lda $00,x	                lda 0,x
.9d6e	15 01		ora $01,x	                ora 1,x
.9d70	d0 05		bne $9d77	                bne _refill_ok
.9d72	a9 06		lda #$06	                lda #err_refill
.9d74	4c 26 d8	jmp $d826	                jmp error
.9d77					_refill_ok:
.9d77	e8		inx		                inx
.9d78	e8		inx		                inx
.9d79	80 d0		bra $9d4b	                bra _savechars_loop
.9d7b					_input_fine:
.9d7b	a5 08		lda $08		                lda cib
.9d7d	18		clc		                clc
.9d7e	65 0c		adc $0c		                adc toin        ; LSB
.9d80	85 24		sta $24		                sta tmp1
.9d82	a5 09		lda $09		                lda cib+1
.9d84	65 0d		adc $0d		                adc toin+1      ; MSB
.9d86	85 25		sta $25		                sta tmp1+1
.9d88	b2 24		lda ($24)	                lda (tmp1)
.9d8a	24 26		bit $26		                bit tmp2
.9d8c	30 03		bmi $9d91	                bmi _handle_escapes    ; Only checking bit 7
.9d8e	4c 49 9e	jmp $9e49	                jmp _regular_char
.9d91					_handle_escapes:
.9d91	24 27		bit $27		                bit tmp2+1
.9d93	30 03		bmi $9d98	                bmi _escaped
.9d95	4c 3f 9e	jmp $9e3f	                jmp _not_escaped
.9d98					_escaped:
.9d98	70 22		bvs $9dbc	                bvs _check_esc_chars
.9d9a	a9 01		lda #$01	                lda #1
.9d9c	24 27		bit $27		                bit tmp2+1
.9d9e	d0 10		bne $9db0	                bne _esc_x_second_digit
.9da0	e6 27		inc $27		                inc tmp2+1  ; Adjust flag for second digit next time.
.9da2	b2 24		lda ($24)	                lda (tmp1)  ; Get the char again.
.9da4	20 72 9b	jsr $9b72	                jsr convert_hex_value
.9da7	0a		asl a		                asl
.9da8	0a		asl a		                asl
.9da9	0a		asl a		                asl
.9daa	0a		asl a		                asl
.9dab	85 28		sta $28		                sta tmp3    ; Save it for later.
.9dad	4c 50 9e	jmp $9e50	                jmp _next_character
.9db0					_esc_x_second_digit:
.9db0	64 27		stz $27		                stz tmp2+1
.9db2	b2 24		lda ($24)	                lda (tmp1)
.9db4	20 72 9b	jsr $9b72	                jsr convert_hex_value
.9db7	05 28		ora $28		                ora tmp3
.9db9	4c 4d 9e	jmp $9e4d	                jmp _save_character
.9dbc					_check_esc_chars:
.9dbc	64 27		stz $27		                stz tmp2+1
.9dbe					_check_esc_a:
.9dbe	c9 61		cmp #$61	                cmp #'a'
.9dc0	d0 05		bne $9dc7	                bne _check_esc_b
.9dc2	a9 07		lda #$07	                lda #7
.9dc4	4c 4d 9e	jmp $9e4d	                jmp _save_character
.9dc7					_check_esc_b:
.9dc7	c9 62		cmp #$62	                cmp #'b'
.9dc9	d0 05		bne $9dd0	                bne _check_esc_e
.9dcb	a9 08		lda #$08	                lda #8
.9dcd	4c 4d 9e	jmp $9e4d	                jmp _save_character
.9dd0					_check_esc_e:
.9dd0	c9 65		cmp #$65	                cmp #'e'
.9dd2	d0 04		bne $9dd8	                bne _check_esc_f
.9dd4	a9 1b		lda #$1b	                lda #27
.9dd6	80 75		bra $9e4d	                bra _save_character
.9dd8					_check_esc_f:
.9dd8	c9 66		cmp #$66	                cmp #'f'
.9dda	d0 04		bne $9de0	                bne _check_esc_l
.9ddc	a9 0c		lda #$0c	                lda #12
.9dde	80 6d		bra $9e4d	                bra _save_character
.9de0					_check_esc_l:
.9de0	c9 6c		cmp #$6c	                cmp #'l'
.9de2	d0 04		bne $9de8	                bne _check_esc_m
.9de4	a9 0a		lda #$0a	                lda #10
.9de6	80 65		bra $9e4d	                bra _save_character
.9de8					_check_esc_m:
.9de8	c9 6d		cmp #$6d	                cmp #'m'
.9dea	d0 09		bne $9df5	                bne _check_esc_n
.9dec	a9 0d		lda #$0d	                lda #13
.9dee	20 c3 d6	jsr $d6c3	                jsr cmpl_a
.9df1	a9 0a		lda #$0a	                lda #10
.9df3	80 58		bra $9e4d	                bra _save_character
.9df5					_check_esc_n:
.9df5	c9 6e		cmp #$6e	                cmp #'n'
.9df7	d0 04		bne $9dfd	                bne _check_esc_q
.9df9	a9 0a		lda #$0a	                lda #10
.9dfb	80 50		bra $9e4d	                bra _save_character
.9dfd					_check_esc_q:
.9dfd	c9 71		cmp #$71	                cmp #'q'
.9dff	d0 04		bne $9e05	                bne _check_esc_r
.9e01	a9 22		lda #$22	                lda #34
.9e03	80 48		bra $9e4d	                bra _save_character
.9e05					_check_esc_r:
.9e05	c9 72		cmp #$72	                cmp #'r'
.9e07	d0 04		bne $9e0d	                bne _check_esc_t
.9e09	a9 0d		lda #$0d	                lda #13
.9e0b	80 40		bra $9e4d	                bra _save_character
.9e0d					_check_esc_t:
.9e0d	c9 74		cmp #$74	                cmp #'t'
.9e0f	d0 04		bne $9e15	                bne _check_esc_v
.9e11	a9 09		lda #$09	                lda #9
.9e13	80 38		bra $9e4d	                bra _save_character
.9e15					_check_esc_v:
.9e15	c9 76		cmp #$76	                cmp #'v'
.9e17	d0 04		bne $9e1d	                bne _check_esc_z
.9e19	a9 0b		lda #$0b	                lda #11
.9e1b	80 30		bra $9e4d	                bra _save_character
.9e1d					_check_esc_z:
.9e1d	c9 7a		cmp #$7a	                cmp #'z'
.9e1f	d0 04		bne $9e25	                bne _check_esc_quote
.9e21	a9 00		lda #$00	                lda #0
.9e23	80 28		bra $9e4d	                bra _save_character
.9e25					_check_esc_quote:
.9e25	c9 22		cmp #$22	                cmp #$22
.9e27	d0 04		bne $9e2d	                bne _check_esc_x
.9e29	a9 22		lda #$22	                lda #34
.9e2b	80 20		bra $9e4d	                bra _save_character
.9e2d					_check_esc_x:
.9e2d	c9 78		cmp #$78	                cmp #'x'
.9e2f	d0 06		bne $9e37	                bne _check_esc_backslash
.9e31	a9 be		lda #$be	                lda #$BE        ; Clear bits 6 and 0
.9e33	85 27		sta $27		                sta tmp2+1
.9e35	80 19		bra $9e50	                bra _next_character
.9e37					_check_esc_backslash:
.9e37	c9 5c		cmp #$5c	                cmp #$5C
.9e39	d0 04		bne $9e3f	                bne _not_escaped
.9e3b	a9 5c		lda #$5c	                lda #92
.9e3d	80 0e		bra $9e4d	                bra _save_character
.9e3f					_not_escaped:
.9e3f	c9 5c		cmp #$5c	                cmp #$5C        ; The backslash char
.9e41	d0 06		bne $9e49	                bne _regular_char
.9e43	a9 ff		lda #$ff	                lda #$FF
.9e45	85 27		sta $27		                sta tmp2+1
.9e47	80 07		bra $9e50	                bra _next_character
.9e49					_regular_char:
.9e49	c9 22		cmp #$22	                cmp #$22        ; ASCII for "
.9e4b	f0 0c		beq $9e59	                beq _found_string_end
.9e4d					_save_character:
.9e4d	20 c3 d6	jsr $d6c3	                jsr cmpl_a
.9e50					_next_character:
.9e50	e6 0c		inc $0c		                inc toin
.9e52	d0 02		bne $9e56	                bne _savechars_loop_longjump
.9e54	e6 0d		inc $0d		                inc toin+1
.9e56					_savechars_loop_longjump:
.9e56	4c 4b 9d	jmp $9d4b	                jmp _savechars_loop
.9e59					_found_string_end:
.9e59	e6 0c		inc $0c		                inc toin
.9e5b	d0 02		bne $9e5f	                bne +
.9e5d	e6 0d		inc $0d		                inc toin+1
.9e5f					+
.9e5f	a5 00		lda $00		                lda cp
.9e61	38		sec		                sec
.9e62	f5 02		sbc $02,x	                sbc 2,x
.9e64	95 00		sta $00,x	                sta 0,x         ; LSB
.9e66	a5 01		lda $01		                lda cp+1
.9e68	f5 03		sbc $03,x	                sbc 3,x
.9e6a	95 01		sta $01,x	                sta 1,x         ; MSB
.9e6c	b5 02		lda $02,x	                lda 2,x
.9e6e	38		sec		                sec
.9e6f	e9 02		sbc #$02	                sbc #2
.9e71	85 24		sta $24		                sta tmp1
.9e73	b5 03		lda $03,x	                lda 3,x
.9e75	e9 00		sbc #$00	                sbc #0          ; Propagate borrow
.9e77	85 25		sta $25		                sta tmp1+1
.9e79	a5 00		lda $00		                lda cp
.9e7b	92 24		sta ($24)	                sta (tmp1)
.9e7d	a0 01		ldy #$01	                ldy #1
.9e7f	a5 01		lda $01		                lda cp+1
.9e81	91 24		sta ($24),y	                sta (tmp1),y
.9e83	a5 16		lda $16		                lda state
.9e85	05 17		ora $17		                ora state+1             ; paranoid
.9e87	f0 03		beq $9e8c	                beq _done
.9e89	20 70 a0	jsr $a070	                jsr sliteral_const_str         ; ( addr u -- )
.9e8c					_done:
.9e8c	60		rts		z_s_quote:      rts
.9e8d					xt_s_to_d:
.9e8d	20 10 d8	jsr $d810	                jsr underflow_1
.9e90	ca		dex		                dex
.9e91	ca		dex		                dex
.9e92	74 00		stz $00,x	                stz 0,x
.9e94	74 01		stz $01,x	                stz 1,x
.9e96	b5 03		lda $03,x	                lda 3,x
.9e98	10 04		bpl $9e9e	                bpl _done
.9e9a	d6 00		dec $00,x	                dec 0,x
.9e9c	d6 01		dec $01,x	                dec 1,x
.9e9e					_done:
.9e9e	60		rts		z_s_to_d:       rts
.9e9f					xt_save_buffers:
.9e9f	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.9ea1	b1 1e		lda ($1e),y	                lda (up),y      ; Only bits 0 and 1 are used, so only
.9ea3	c9 03		cmp #$03	                cmp #3          ; LSB is needed.
.9ea5	d0 12		bne $9eb9	                bne _done       ; Either not used or not dirty = done!
.9ea7	20 94 83	jsr $8394	                jsr xt_blkbuffer
.9eaa	20 86 85	jsr $8586	                jsr xt_buffblocknum
.9ead	20 61 8f	jsr $8f61	                jsr xt_fetch
.9eb0	20 41 85	jsr $8541	                jsr xt_block_write
.9eb3	a9 01		lda #$01	                lda #1
.9eb5	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.9eb7	91 1e		sta ($1e),y	                sta (up),y
.9eb9					_done:
.9eb9	60		rts		z_save_buffers: rts
.9eba					xt_scr:
.9eba	ca		dex		                dex
.9ebb	ca		dex		                dex
.9ebc	18		clc		                clc
.9ebd	a5 1e		lda $1e		                lda up
.9ebf	69 02		adc #$02	                adc #scr_offset ; Add offset
.9ec1	95 00		sta $00,x	                sta 0,x
.9ec3	a5 1f		lda $1f		                lda up+1
.9ec5	69 00		adc #$00	                adc #0          ; Adding carry
.9ec7	95 01		sta $01,x	                sta 1,x
.9ec9	60		rts		z_scr:          rts
.9eca					xt_search:
.9eca	20 1f d8	jsr $d81f	                jsr underflow_4
.9ecd	b5 00		lda $00,x	                lda 0,x
.9ecf	15 01		ora $01,x	                ora 1,x
.9ed1	d0 0b		bne $9ede	                bne _start_search
.9ed3	e8		inx		                inx             ; Remove u2
.9ed4	e8		inx		                inx
.9ed5	a9 ff		lda #$ff	                lda #$FF        ; Turn addr2 into a true flag
.9ed7	95 00		sta $00,x	                sta 0,x
.9ed9	95 01		sta $01,x	                sta 1,x
.9edb	4c 68 9f	jmp $9f68	                jmp z_search
.9ede					_start_search:
.9ede	20 89 a7	jsr $a789	                jsr xt_zero
.9ee1					_search_loop:
.9ee1	18		clc		                clc
.9ee2	b5 00		lda $00,x	                lda 0,x
.9ee4	75 02		adc $02,x	                adc 2,x
.9ee6	85 24		sta $24		                sta tmp1
.9ee8	b5 01		lda $01,x	                lda 1,x
.9eea	75 03		adc $03,x	                adc 3,x
.9eec	d5 07		cmp $07,x	                cmp 7,x
.9eee	90 12		bcc $9f02	                bcc _init_comparison ; Obviously less
.9ef0	d0 06		bne $9ef8	                bne _not_found
.9ef2	b5 06		lda $06,x	                lda 6,x
.9ef4	c5 24		cmp $24		                cmp tmp1
.9ef6	b0 0a		bcs $9f02	                bcs _init_comparison
.9ef8					_not_found:
.9ef8	e8		inx		                inx             ; Remove offset
.9ef9	e8		inx		                inx
.9efa	e8		inx		                inx             ; Remove u2
.9efb	e8		inx		                inx
.9efc	74 00		stz $00,x	                stz 0,x         ; Turn addr2 into a false flag
.9efe	74 01		stz $01,x	                stz 1,x
.9f00	80 66		bra $9f68	                bra z_search
.9f02					_init_comparison:
.9f02	18		clc		                clc
.9f03	b5 08		lda $08,x	                lda 8,x
.9f05	75 00		adc $00,x	                adc 0,x
.9f07	85 24		sta $24		                sta tmp1
.9f09	b5 09		lda $09,x	                lda 9,x
.9f0b	75 01		adc $01,x	                adc 1,x
.9f0d	85 25		sta $25		                sta tmp1+1
.9f0f	b5 04		lda $04,x	                lda 4,x
.9f11	85 26		sta $26		                sta tmp2
.9f13	b5 05		lda $05,x	                lda 5,x
.9f15	85 27		sta $27		                sta tmp2+1
.9f17	b5 02		lda $02,x	                lda 2,x
.9f19	85 28		sta $28		                sta tmp3
.9f1b	b5 03		lda $03,x	                lda 3,x
.9f1d	85 29		sta $29		                sta tmp3+1
.9f1f					_comparison_loop:
.9f1f	b2 24		lda ($24)	                lda (tmp1)
.9f21	d2 26		cmp ($26)	                cmp (tmp2)
.9f23	f0 05		beq $9f2a	                beq _letters_match
.9f25	20 fe 97	jsr $97fe	                jsr xt_one_plus
.9f28	80 b7		bra $9ee1	                bra _search_loop
.9f2a					_letters_match:
.9f2a	e6 24		inc $24		                inc tmp1
.9f2c	d0 02		bne $9f30	                bne +
.9f2e	e6 25		inc $25		                inc tmp1+1
.9f30					+
.9f30	e6 26		inc $26		                inc tmp2
.9f32	d0 02		bne $9f36	                bne +
.9f34	e6 27		inc $27		                inc tmp2+1
.9f36					+
.9f36	a5 28		lda $28		                lda tmp3
.9f38	d0 02		bne $9f3c	                bne +
.9f3a	c6 29		dec $29		                dec tmp3+1
.9f3c					+
.9f3c	c6 28		dec $28		                dec tmp3
.9f3e	a5 28		lda $28		                lda tmp3
.9f40	05 29		ora $29		                ora tmp3+1
.9f42	d0 db		bne $9f1f	                bne _comparison_loop ; Check the next letter
.9f44	18		clc		                clc
.9f45	b5 00		lda $00,x	                lda 0,x
.9f47	75 08		adc $08,x	                adc 8,x
.9f49	95 08		sta $08,x	                sta 8,x
.9f4b	b5 01		lda $01,x	                lda 1,x
.9f4d	75 09		adc $09,x	                adc 9,x
.9f4f	95 09		sta $09,x	                sta 9,x
.9f51	38		sec		                sec
.9f52	b5 06		lda $06,x	                lda 6,x
.9f54	f5 00		sbc $00,x	                sbc 0,x
.9f56	95 06		sta $06,x	                sta 6,x
.9f58	b5 07		lda $07,x	                lda 7,x
.9f5a	f5 01		sbc $01,x	                sbc 1,x
.9f5c	95 07		sta $07,x	                sta 7,x
.9f5e	e8		inx		                inx             ; drop offset
.9f5f	e8		inx		                inx
.9f60	e8		inx		                inx             ; drop u2
.9f61	e8		inx		                inx
.9f62	a9 ff		lda #$ff	                lda #$FF
.9f64	95 00		sta $00,x	                sta 0,x         ; Turn addr2 into a true flag.
.9f66	95 01		sta $01,x	                sta 1,x
.9f68	60		rts		z_search:       rts
.9f69					xt_semicolon:
.9f69	24 20		bit $20		                bit status
.9f6b	70 11		bvs $9f7e	                bvs _colonword
.9f6d	a9 60		lda #$60	                lda #$60                ; opcode for RTS
.9f6f	20 c3 d6	jsr $d6c3	                jsr cmpl_a
.9f72	ca		dex		                dex
.9f73	ca		dex		                dex
.9f74	a5 04		lda $04		                lda workword
.9f76	95 00		sta $00,x	                sta 0,x
.9f78	a5 05		lda $05		                lda workword+1
.9f7a	95 01		sta $01,x	                sta 1,x
.9f7c	80 45		bra $9fc3	                bra _semicolon_done
.9f7e					_colonword:
.9f7e	a0 06		ldy #$06	                ldy #6
.9f80	a5 00		lda $00		                lda cp
.9f82	91 04		sta ($04),y	                sta (workword),y
.9f84	c8		iny		                iny
.9f85	a5 01		lda $01		                lda cp+1
.9f87	91 04		sta ($04),y	                sta (workword),y
.9f89	a9 60		lda #$60	                lda #$60                ; opcode for RTS
.9f8b	20 c3 d6	jsr $d6c3	                jsr cmpl_a
.9f8e	24 20		bit $20		                bit status
.9f90	10 26		bpl $9fb8	                bpl _new_word   ; Bit 7 is clear = new word
.9f92	ca		dex		                dex
.9f93	ca		dex		                dex
.9f94	ca		dex		                dex
.9f95	ca		dex		                dex
.9f96	b2 04		lda ($04)	                lda (workword)
.9f98	95 00		sta $00,x	                sta 0,x
.9f9a	74 01		stz $01,x	                stz 1,x
.9f9c	a5 04		lda $04		                lda workword
.9f9e	18		clc		                clc
.9f9f	69 08		adc #$08	                adc #8
.9fa1	95 02		sta $02,x	                sta 2,x
.9fa3	a5 05		lda $05		                lda workword+1
.9fa5	69 00		adc #$00	                adc #0                  ; only want carry
.9fa7	95 03		sta $03,x	                sta 3,x
.9fa9	a9 02		lda #$02	                lda #str_redefined       ; address of string "redefined"
.9fab	20 3c d8	jsr $d83c	                jsr print_string_no_lf
.9fae	20 e4 a4	jsr $a4e4	                jsr xt_type
.9fb1	20 ff a0	jsr $a0ff	                jsr xt_space
.9fb4	a9 80		lda #$80	                lda #%10000000
.9fb6	14 20		trb $20		                trb status
.9fb8					_new_word:
.9fb8	a5 04		lda $04		                lda workword
.9fba	85 02		sta $02		                sta dp
.9fbc	a5 05		lda $05		                lda workword+1
.9fbe	85 03		sta $03		                sta dp+1
.9fc0	20 65 d7	jsr $d765	                jsr dp_to_current       ; Save the updated DP to the
.9fc3					_semicolon_done:
.9fc3	64 16		stz $16		                stz state
.9fc5	64 17		stz $17		                stz state+1
.9fc7	60		rts		z_semicolon:    rts
.9fc8					xt_sign:
.9fc8	20 10 d8	jsr $d810	                jsr underflow_1
.9fcb	b5 01		lda $01,x	                lda 1,x         ; check MSB of TOS
.9fcd	30 04		bmi $9fd3	                bmi _minus
.9fcf	e8		inx		                inx
.9fd0	e8		inx		                inx
.9fd1	80 09		bra $9fdc	                bra _done
.9fd3					_minus:
.9fd3	a9 2d		lda #$2d	                lda #$2D        ; ASCII for "-"
.9fd5	95 00		sta $00,x	                sta 0,x         ; overwrite TOS
.9fd7	74 01		stz $01,x	                stz 1,x         ; paranoid
.9fd9	20 b8 91	jsr $91b8	                jsr xt_hold
.9fdc					_done:
.9fdc	60		rts		z_sign:         rts
.9fdd					xt_slash:
.9fdd	a9 00		lda #$00	                lda #0
.9fdf	48		pha		                pha
.9fe0	80 03		bra $9fe5	                bra slashmod_common
.9fe2					xt_slash_mod:
.9fe2	a9 ff		lda #$ff	                lda #$FF
.9fe4	48		pha		                pha             ; falls through to _common
.9fe5					slashmod_common:
.9fe5	20 51 a3	jsr $a351	                jsr xt_to_r             ; >R
.9fe8	20 8d 9e	jsr $9e8d	                jsr xt_s_to_d           ; S>D
.9feb	20 73 9a	jsr $9a73	                jsr xt_r_from           ; R>
.9fee	20 b6 a0	jsr $a0b6	                jsr xt_sm_slash_rem     ; SM/REM
.9ff1	68		pla		                pla
.9ff2	d0 05		bne $9ff9	                bne _done
.9ff4	20 8f a1	jsr $a18f	                jsr xt_swap
.9ff7	e8		inx		                inx             ; DROP
.9ff8	e8		inx		                inx
.9ff9					_done:
.9ff9					z_slash_mod:
.9ff9	60		rts		z_slash:        rts
.9ffa					xt_slash_string:
.9ffa	20 1a d8	jsr $d81a	                jsr underflow_3
.9ffd	18		clc		                clc             ; 3OS+TOS
.9ffe	b5 00		lda $00,x	                lda 0,x
.a000	75 04		adc $04,x	                adc 4,x
.a002	95 04		sta $04,x	                sta 4,x
.a004	b5 01		lda $01,x	                lda 1,x
.a006	75 05		adc $05,x	                adc 5,x
.a008	95 05		sta $05,x	                sta 5,x
.a00a	38		sec		                sec             ; NOS-TOS
.a00b	b5 02		lda $02,x	                lda 2,x
.a00d	f5 00		sbc $00,x	                sbc 0,x
.a00f	95 02		sta $02,x	                sta 2,x
.a011	b5 03		lda $03,x	                lda 3,x
.a013	f5 01		sbc $01,x	                sbc 1,x
.a015	95 03		sta $03,x	                sta 3,x
.a017	e8		inx		                inx
.a018	e8		inx		                inx
.a019	60		rts		z_slash_string: rts
.a01a					xt_sliteral:
.a01a	20 15 d8	jsr $d815	                jsr underflow_2
.a01d	a9 4c		lda #$4c	                lda #$4C
.a01f	20 c3 d6	jsr $d6c3	                jsr cmpl_a
.a022	20 c3 d6	jsr $d6c3	                jsr cmpl_a
.a025	20 c3 d6	jsr $d6c3	                jsr cmpl_a
.a028	8a		txa		                txa
.a029	38		sec		                sec
.a02a	e9 06		sbc #$06	                sbc #6
.a02c	aa		tax		                tax
.a02d	b5 08		lda $08,x	                lda 8,x
.a02f	95 04		sta $04,x	                sta 4,x
.a031	b5 09		lda $09,x	                lda 9,x
.a033	95 05		sta $05,x	                sta 5,x
.a035	b5 06		lda $06,x	                lda 6,x
.a037	95 00		sta $00,x	                sta 0,x
.a039	b5 07		lda $07,x	                lda 7,x
.a03b	95 01		sta $01,x	                sta 1,x
.a03d	a5 00		lda $00		                lda cp
.a03f	95 08		sta $08,x	                sta 8,x
.a041	95 02		sta $02,x	                sta 2,x
.a043	a5 01		lda $01		                lda cp+1
.a045	95 09		sta $09,x	                sta 9,x
.a047	95 03		sta $03,x	                sta 3,x
.a049	20 a3 95	jsr $95a3	                jsr xt_move
.a04c	18		clc		                clc
.a04d	a5 00		lda $00		                lda cp
.a04f	75 00		adc $00,x	                adc 0,x
.a051	85 00		sta $00		                sta cp
.a053	a5 01		lda $01		                lda cp+1
.a055	75 01		adc $01,x	                adc 1,x
.a057	85 01		sta $01		                sta cp+1
.a059	b5 02		lda $02,x	                lda 2,x
.a05b	38		sec		                sec
.a05c	e9 02		sbc #$02	                sbc #2
.a05e	85 24		sta $24		                sta tmp1
.a060	b5 03		lda $03,x	                lda 3,x
.a062	e9 00		sbc #$00	                sbc #0          ; Propagate borrow
.a064	85 25		sta $25		                sta tmp1+1
.a066	a5 00		lda $00		                lda cp
.a068	92 24		sta ($24)	                sta (tmp1)
.a06a	a0 01		ldy #$01	                ldy #1
.a06c	a5 01		lda $01		                lda cp+1
.a06e	91 24		sta ($24),y	                sta (tmp1),y
.a070					sliteral_const_str:
.a070	a0 a0		ldy #$a0	                ldy #>sliteral_runtime
.a072	a9 8a		lda #$8a	                lda #<sliteral_runtime
.a074	20 b3 d6	jsr $d6b3	                jsr cmpl_subroutine
.a077	b4 03		ldy $03,x	                ldy 3,x                ; address MSB
.a079	b5 02		lda $02,x	                lda 2,x                ; address LSB
.a07b	20 bf d6	jsr $d6bf	                jsr cmpl_word
.a07e	b4 01		ldy $01,x	                ldy 1,x                ; length MSB
.a080	b5 00		lda $00,x	                lda 0,x                ; length LSB
.a082	20 bf d6	jsr $d6bf	                jsr cmpl_word
.a085	e8		inx		                inx
.a086	e8		inx		                inx
.a087	e8		inx		                inx
.a088	e8		inx		                inx
.a089	60		rts		z_sliteral:     rts
.a08a					sliteral_runtime:
.a08a	ca		dex		                dex
.a08b	ca		dex		                dex
.a08c	ca		dex		                dex
.a08d	ca		dex		                dex
.a08e	68		pla		                pla
.a08f	85 24		sta $24		                sta tmp1        ; LSB of address
.a091	68		pla		                pla
.a092	85 25		sta $25		                sta tmp1+1      ; MSB of address
.a094	a0 01		ldy #$01	                ldy #1          ; adjust for JSR/RTS mechanics on 65c02
.a096	b1 24		lda ($24),y	                lda (tmp1),y
.a098	95 02		sta $02,x	                sta 2,x         ; LSB of address
.a09a	c8		iny		                iny
.a09b	b1 24		lda ($24),y	                lda (tmp1),y
.a09d	95 03		sta $03,x	                sta 3,x         ; MSB of address
.a09f	c8		iny		                iny
.a0a0	b1 24		lda ($24),y	                lda (tmp1),y
.a0a2	95 00		sta $00,x	                sta 0,x         ; LSB of length
.a0a4	c8		iny		                iny
.a0a5	b1 24		lda ($24),y	                lda (tmp1),y
.a0a7	95 01		sta $01,x	                sta 1,x         ; MSB of length
.a0a9	18		clc		                clc
.a0aa	a5 24		lda $24		                lda tmp1
.a0ac	69 04		adc #$04	                adc #4
.a0ae	a8		tay		                tay             ; LSB
.a0af	a5 25		lda $25		                lda tmp1+1
.a0b1	69 00		adc #$00	                adc #0          ; we only need carry
.a0b3	48		pha		                pha             ; MSB
.a0b4	5a		phy		                phy
.a0b5	60		rts		                rts
.a0b6					xt_sm_slash_rem:
.a0b6	20 1a d8	jsr $d81a	                jsr underflow_3 ; contains double number
.a0b9	b5 03		lda $03,x	                lda 3,x
.a0bb	48		pha		                pha
.a0bc	b5 01		lda $01,x	                lda 1,x
.a0be	55 03		eor $03,x	                eor 3,x
.a0c0	48		pha		                pha
.a0c1	20 1a 81	jsr $811a	                jsr xt_abs
.a0c4	e8		inx		                inx             ; pretend we pushed n1 to R
.a0c5	e8		inx		                inx
.a0c6	20 67 8a	jsr $8a67	                jsr xt_dabs
.a0c9	ca		dex		                dex
.a0ca	ca		dex		                dex
.a0cb	20 9b a5	jsr $a59b	                jsr xt_um_slash_mod     ; UM/MOD
.a0ce	68		pla		                pla
.a0cf	10 03		bpl $a0d4	                bpl +
.a0d1	20 04 96	jsr $9604	                jsr xt_negate
.a0d4					+
.a0d4	68		pla		                pla
.a0d5	10 07		bpl $a0de	                bpl _done
.a0d7	e8		inx		                inx             ; pretend we pushed quotient to R
.a0d8	e8		inx		                inx
.a0d9	20 04 96	jsr $9604	                jsr xt_negate
.a0dc	ca		dex		                dex
.a0dd	ca		dex		                dex
.a0de					_done:
.a0de	60		rts		z_sm_slash_rem: rts
.a0df					xt_source:
.a0df	ca		dex		                dex
.a0e0	ca		dex		                dex
.a0e1	a5 08		lda $08		                lda cib
.a0e3	95 00		sta $00,x	                sta 0,x
.a0e5	a5 09		lda $09		                lda cib+1
.a0e7	95 01		sta $01,x	                sta 1,x
.a0e9	ca		dex		                dex
.a0ea	ca		dex		                dex
.a0eb	a5 0a		lda $0a		                lda ciblen
.a0ed	95 00		sta $00,x	                sta 0,x
.a0ef	a5 0b		lda $0b		                lda ciblen+1
.a0f1	95 01		sta $01,x	                sta 1,x
.a0f3	60		rts		z_source:       rts
.a0f4					xt_source_id:
.a0f4	ca		dex		                dex
.a0f5	ca		dex		                dex
.a0f6	a5 06		lda $06		                lda insrc
.a0f8	95 00		sta $00,x	                sta 0,x
.a0fa	a5 07		lda $07		                lda insrc+1
.a0fc	95 01		sta $01,x	                sta 1,x
.a0fe	60		rts		z_source_id:    rts
.a0ff					xt_space:
.a0ff	a9 20		lda #$20	                lda #AscSP
.a101	20 d7 8d	jsr $8dd7	                jsr emit_a
.a104	60		rts		z_space:        rts
.a105					xt_spaces:
.a105	20 10 d8	jsr $d810	                jsr underflow_1
.a108	20 89 a7	jsr $a789	                jsr xt_zero
.a10b	20 f9 94	jsr $94f9	                jsr xt_max
.a10e	b5 00		lda $00,x	                lda 0,x
.a110	15 01		ora $01,x	                ora 1,x
.a112	f0 2a		beq $a13e	                beq _done
.a114	b4 01		ldy $01,x	                ldy 1,x
.a116	d0 0c		bne $a124	                bne _lots_of_spaces
.a118	b4 00		ldy $00,x	                ldy 0,x
.a11a					_quick_loop:
.a11a	a9 20		lda #$20	                lda #AscSP
.a11c	20 d7 8d	jsr $8dd7	                jsr emit_a
.a11f	88		dey		                dey
.a120	f0 1c		beq $a13e	                beq _done
.a122	80 f6		bra $a11a	                bra _quick_loop
.a124					_lots_of_spaces:
.a124	b4 00		ldy $00,x	                ldy 0,x
.a126					_first_slow_loop:
.a126	f0 08		beq $a130	                beq _slow_outer_loop
.a128	a9 20		lda #$20	                lda #AscSP
.a12a	20 d7 8d	jsr $8dd7	                jsr emit_a
.a12d	88		dey		                dey
.a12e	80 f6		bra $a126	                bra _first_slow_loop
.a130					_slow_outer_loop:
.a130	a0 00		ldy #$00	                ldy #00
.a132					_slow_inner_loop:
.a132	a9 20		lda #$20	                lda #AscSP
.a134	20 d7 8d	jsr $8dd7	                jsr emit_a
.a137	88		dey		                dey
.a138	d0 f8		bne $a132	                bne _slow_inner_loop
.a13a	d6 01		dec $01,x	                dec 1,x
.a13c	d0 f2		bne $a130	                bne _slow_outer_loop
.a13e					_done:
.a13e	e8		inx		                inx             ; drop
.a13f	e8		inx		                inx
.a140	60		rts		z_spaces:       rts
.a141					xt_star:
.a141	20 15 d8	jsr $d815	                jsr underflow_2
.a144	20 dd a5	jsr $a5dd	                jsr xt_um_star
.a147	e8		inx		                inx
.a148	e8		inx		                inx
.a149	60		rts		z_star:         rts
.a14a					xt_star_slash:
.a14a	20 53 a1	jsr $a153	                jsr xt_star_slash_mod
.a14d	20 8f a1	jsr $a18f	                jsr xt_swap
.a150	e8		inx		                inx
.a151	e8		inx		                inx
.a152					z_star_slash:
.a152	60		rts		                rts
.a153					xt_star_slash_mod:
.a153	20 1a d8	jsr $d81a	                jsr underflow_3
.a156	20 51 a3	jsr $a351	                jsr xt_to_r
.a159	20 6f 94	jsr $946f	                jsr xt_m_star
.a15c	20 73 9a	jsr $9a73	                jsr xt_r_from
.a15f	20 b6 a0	jsr $a0b6	                jsr xt_sm_slash_rem
.a162					z_star_slash_mod:
.a162	60		rts		                rts
.a163					xt_state:
.a163	ca		dex		                dex
.a164	ca		dex		                dex
.a165	a9 16		lda #$16	                lda #<state
.a167	95 00		sta $00,x	                sta 0,x
.a169	a9 00		lda #$00	                lda #>state
.a16b	95 01		sta $01,x	                sta 1,x
.a16d	60		rts		z_state:        rts
.a16e					xt_store:
.a16e	20 15 d8	jsr $d815	                jsr underflow_2
.a171	b5 02		lda $02,x	                lda 2,x         ; LSB
.a173	81 00		sta ($00,x)	                sta (0,x)
.a175	f6 00		inc $00,x	                inc 0,x
.a177	d0 02		bne $a17b	                bne +
.a179	f6 01		inc $01,x	                inc 1,x
.a17b					+
.a17b	b5 03		lda $03,x	                lda 3,x         ; MSB
.a17d	81 00		sta ($00,x)	                sta (0,x)
.a17f	e8		inx		                inx             ; 2DROP
.a180	e8		inx		                inx
.a181	e8		inx		                inx
.a182	e8		inx		                inx
.a183	60		rts		z_store:        rts
.a184					xt_strip_underflow:
.a184	ca		dex		                dex
.a185	ca		dex		                dex
.a186	a9 1c		lda #$1c	                lda #<uf_strip
.a188	95 00		sta $00,x	                sta 0,x
.a18a	a9 00		lda #$00	                lda #>uf_strip
.a18c	95 01		sta $01,x	                sta 1,x
.a18e					z_strip_underflow:
.a18e	60		rts		                rts
.a18f					xt_swap:
.a18f	20 15 d8	jsr $d815	                jsr underflow_2
.a192	b5 00		lda $00,x	                lda 0,x         ; LSB
.a194	b4 02		ldy $02,x	                ldy 2,x
.a196	95 02		sta $02,x	                sta 2,x
.a198	94 00		sty $00,x	                sty 0,x
.a19a	b5 01		lda $01,x	                lda 1,x         ; MSB
.a19c	b4 03		ldy $03,x	                ldy 3,x
.a19e	95 03		sta $03,x	                sta 3,x
.a1a0	94 01		sty $01,x	                sty 1,x
.a1a2	60		rts		z_swap:         rts
.a1a3					xt_then:
.a1a3	20 53 91	jsr $9153	                jsr xt_here
.a1a6	20 8f a1	jsr $a18f	                jsr xt_swap
.a1a9	20 6e a1	jsr $a16e	                jsr xt_store
.a1ac	60		rts		z_then:         rts
.a1ad					xt_thru:
.a1ad	20 15 d8	jsr $d815	                jsr underflow_2
.a1b0	b5 01		lda $01,x	                lda 1,x
.a1b2	48		pha		                pha
.a1b3	b5 00		lda $00,x	                lda 0,x
.a1b5	48		pha		                pha
.a1b6	e8		inx		                inx
.a1b7	e8		inx		                inx
.a1b8					_thru_loop:
.a1b8	b5 01		lda $01,x	                lda 1,x
.a1ba	48		pha		                pha
.a1bb	b5 00		lda $00,x	                lda 0,x
.a1bd	48		pha		                pha
.a1be	20 98 93	jsr $9398	                jsr xt_load
.a1c1	68		pla		                pla
.a1c2	85 24		sta $24		                sta tmp1
.a1c4	68		pla		                pla
.a1c5	85 25		sta $25		                sta tmp1+1
.a1c7	68		pla		                pla
.a1c8	85 26		sta $26		                sta tmp2
.a1ca	68		pla		                pla
.a1cb	85 27		sta $27		                sta tmp2+1
.a1cd	c5 25		cmp $25		                cmp tmp1+1
.a1cf	d0 08		bne $a1d9	                bne _next_screen
.a1d1	a5 26		lda $26		                lda tmp2        ; Compare the LSB
.a1d3	c5 24		cmp $24		                cmp tmp1
.a1d5	d0 02		bne $a1d9	                bne _next_screen
.a1d7	80 18		bra $a1f1	                bra _done       ; We just did the last screen.
.a1d9					_next_screen:
.a1d9	a5 27		lda $27		                lda tmp2+1
.a1db	48		pha		                pha
.a1dc	a5 26		lda $26		                lda tmp2
.a1de	48		pha		                pha
.a1df	e6 24		inc $24		                inc tmp1
.a1e1	d0 02		bne $a1e5	                bne +
.a1e3	e6 25		inc $25		                inc tmp1+1
.a1e5					+
.a1e5	ca		dex		                dex
.a1e6	ca		dex		                dex
.a1e7	a5 24		lda $24		                lda tmp1
.a1e9	95 00		sta $00,x	                sta 0,x
.a1eb	a5 25		lda $25		                lda tmp1+1
.a1ed	95 01		sta $01,x	                sta 1,x
.a1ef	80 c7		bra $a1b8	                bra _thru_loop
.a1f1					_done:
.a1f1	60		rts		z_thru:         rts
.a1f2					xt_tick:
.a1f2	20 c0 98	jsr $98c0	                jsr xt_parse_name       ; ( -- addr u )
.a1f5	b5 00		lda $00,x	                lda 0,x
.a1f7	15 01		ora $01,x	                ora 1,x
.a1f9	d0 05		bne $a200	                bne +
.a1fb	a9 05		lda #$05	                lda #err_noname
.a1fd	4c 26 d8	jmp $d826	                jmp error
.a200					+
.a200	20 bc 8f	jsr $8fbc	                jsr xt_find_name        ; ( addr u -- nt )
.a203	b5 00		lda $00,x	                lda 0,x
.a205	15 01		ora $01,x	                ora 1,x
.a207	d0 05		bne $a20e	                bne +
.a209	a9 08		lda #$08	                lda #err_syntax
.a20b	4c 26 d8	jmp $d826	                jmp error
.a20e					+
.a20e	20 c2 95	jsr $95c2	                jsr xt_name_to_int      ; ( nt -- xt )
.a211	60		rts		z_tick:         rts
.a212					xt_to:
.a212	20 f2 a1	jsr $a1f2	                jsr xt_tick             ; ( [n] xt )
.a215	b5 00		lda $00,x	                lda 0,x                 ; LSB
.a217	18		clc		                clc
.a218	69 03		adc #$03	                adc #3
.a21a	85 24		sta $24		                sta tmp1
.a21c	b5 01		lda $01,x	                lda 1,x                 ; MSB
.a21e	69 00		adc #$00	                adc #0                  ; we just want the carry
.a220	85 25		sta $25		                sta tmp1+1
.a222	e8		inx		                inx
.a223	e8		inx		                inx                     ; ( [n] )
.a224	a5 16		lda $16		                lda state
.a226	05 17		ora $17		                ora state+1
.a228	f0 34		beq $a25e	                beq _interpret
.a22a	a0 00		ldy #$00	                ldy #$00                ; Code for LDA 0,X
.a22c	a9 b5		lda #$b5	                lda #$B5
.a22e	20 bf d6	jsr $d6bf	                jsr cmpl_word
.a231	a9 8d		lda #$8d	                lda #$8D                ; Code for STA abs
.a233	20 c3 d6	jsr $d6c3	                jsr cmpl_a
.a236	a4 25		ldy $25		                ldy tmp1+1              ; MSB goes in Y
.a238	a5 24		lda $24		                lda tmp1
.a23a	20 bf d6	jsr $d6bf	                jsr cmpl_word
.a23d	a0 01		ldy #$01	                ldy #$01                ; Code for LDA 1,X
.a23f	a9 b5		lda #$b5	                lda #$B5
.a241	20 bf d6	jsr $d6bf	                jsr cmpl_word
.a244	a9 8d		lda #$8d	                lda #$8D                ; Code for STA abs
.a246	20 c3 d6	jsr $d6c3	                jsr cmpl_a
.a249	e6 24		inc $24		                inc tmp1                ; Calculate MSB
.a24b	d0 02		bne $a24f	                bne +
.a24d	e6 25		inc $25		                inc tmp1+1
.a24f					+
.a24f	a4 25		ldy $25		                ldy tmp1+1              ; MSB goes in Y
.a251	a5 24		lda $24		                lda tmp1
.a253	20 bf d6	jsr $d6bf	                jsr cmpl_word
.a256	a0 e8		ldy #$e8	                ldy #$E8                ; Code for INX
.a258	98		tya		                tya
.a259	20 bf d6	jsr $d6bf	                jsr cmpl_word
.a25c	80 0f		bra $a26d	                bra _done
.a25e					_interpret:
.a25e	20 10 d8	jsr $d810	                jsr underflow_1
.a261	b5 00		lda $00,x	                lda 0,x
.a263	92 24		sta ($24)	                sta (tmp1)              ; LSB
.a265	a0 01		ldy #$01	                ldy #1
.a267	b5 01		lda $01,x	                lda 1,x                 ; MSB
.a269	91 24		sta ($24),y	                sta (tmp1),y            ; fall through to common
.a26b	e8		inx		                inx                     ; DROP
.a26c	e8		inx		                inx
.a26d					_done:
.a26d	60		rts		z_to:           rts
.a26e					xt_to_body:
.a26e	20 10 d8	jsr $d810	                jsr underflow_1
.a271	20 90 8d	jsr $8d90	                jsr xt_dup              ; ( xt xt )
.a274	20 59 92	jsr $9259	                jsr xt_int_to_name      ; ( xt nt )
.a277	f6 00		inc $00,x	                inc 0,x
.a279	d0 02		bne $a27d	                bne +
.a27b	f6 01		inc $01,x	                inc 1,x
.a27d					+
.a27d	a1 00		lda ($00,x)	                lda (0,x)               ; get status byte
.a27f	29 20		and #$20	                and #HC
.a281	f0 0d		beq $a290	                beq _no_cfa
.a283	18		clc		                clc
.a284	b5 02		lda $02,x	                lda 2,x         ; LSB
.a286	69 03		adc #$03	                adc #3
.a288	95 02		sta $02,x	                sta 2,x
.a28a	b5 03		lda $03,x	                lda 3,x         ; MSB
.a28c	69 00		adc #$00	                adc #0          ; we conly care about the carry
.a28e	95 03		sta $03,x	                sta 3,x         ; Fall through to _no_cfa
.a290					_no_cfa:
.a290	e8		inx		                inx             ; get rid of the nt
.a291	e8		inx		                inx
.a292					_done:
.a292	60		rts		z_to_body:      rts
.a293					xt_to_in:
.a293	ca		dex		                dex
.a294	ca		dex		                dex
.a295	a9 0c		lda #$0c	                lda #<toin
.a297	95 00		sta $00,x	                sta 0,x
.a299	a9 00		lda #$00	                lda #>toin      ; paranoid, should be zero
.a29b	95 01		sta $01,x	                sta 1,x
.a29d	60		rts		z_to_in:        rts
.a29e					xt_to_number:
.a29e	20 1f d8	jsr $d81f	                jsr underflow_4
.a2a1	b5 06		lda $06,x	                lda 6,x         ; ud-lo LSB
.a2a3	85 36		sta $36		                sta scratch
.a2a5	b5 07		lda $07,x	                lda 7,x         ; ud-lo MSB
.a2a7	85 37		sta $37		                sta scratch+1
.a2a9	b5 04		lda $04,x	                lda 4,x         ; ud-hi LSB
.a2ab	85 38		sta $38		                sta scratch+2
.a2ad	b5 05		lda $05,x	                lda 5,x         ; ud-hi MSB
.a2af	85 39		sta $39		                sta scratch+3
.a2b1	ca		dex		                dex
.a2b2	ca		dex		                dex
.a2b3					_loop:
.a2b3	a1 04		lda ($04,x)	                lda (4,x)
.a2b5	95 00		sta $00,x	                sta 0,x                 ; ( ud-lo ud-hi addr u char )
.a2b7	74 01		stz $01,x	                stz 1,x                 ; paranoid
.a2b9	20 e6 8a	jsr $8ae6	                jsr xt_digit_question   ; ( char -- n -1 | char 0 )
.a2bc	b5 00		lda $00,x	                lda 0,x
.a2be	d0 04		bne $a2c4	                bne _digit_ok
.a2c0	e8		inx		                inx
.a2c1	e8		inx		                inx
.a2c2	80 67		bra $a32b	                bra _done       ; ( ud-lo ud-hi addr u char )
.a2c4					_digit_ok:
.a2c4	b5 02		lda $02,x	                lda 2,x
.a2c6	85 3a		sta $3a		                sta scratch+4
.a2c8	b5 03		lda $03,x	                lda 3,x
.a2ca	85 3b		sta $3b		                sta scratch+5
.a2cc	a5 38		lda $38		                lda scratch+2
.a2ce	95 02		sta $02,x	                sta 2,x         ; NOS
.a2d0	a5 39		lda $39		                lda scratch+3
.a2d2	95 03		sta $03,x	                sta 3,x
.a2d4	a5 18		lda $18		                lda base
.a2d6	95 00		sta $00,x	                sta 0,x         ; TOS
.a2d8	74 01		stz $01,x	                stz 1,x         ; now ( ud-lo ud-hi addr u ud-hi base)
.a2da	20 dd a5	jsr $a5dd	                jsr xt_um_star  ; ( ud-lo ud-hi addr u ud-hi-lo ud-hi-hi )
.a2dd	b5 02		lda $02,x	                lda 2,x         ; ud-hi-lo
.a2df	85 3c		sta $3c		                sta scratch+6
.a2e1	b5 03		lda $03,x	                lda 3,x
.a2e3	85 3d		sta $3d		                sta scratch+7
.a2e5	a5 36		lda $36		                lda scratch
.a2e7	95 02		sta $02,x	                sta 2,x
.a2e9	a5 37		lda $37		                lda scratch+1
.a2eb	95 03		sta $03,x	                sta 3,x         ; ( ud-lo ud-hi addr u ud-lo ud-hi-hi )
.a2ed	a5 18		lda $18		                lda base
.a2ef	95 00		sta $00,x	                sta 0,x
.a2f1	74 01		stz $01,x	                stz 1,x         ; ( ud-lo ud-hi addr u ud-lo base )
.a2f3	20 dd a5	jsr $a5dd	                jsr xt_um_star  ; ( ud-lo ud-hi addr u ud-lo-lo ud-lo-hi )
.a2f6	b5 00		lda $00,x	                lda 0,x
.a2f8	85 38		sta $38		                sta scratch+2
.a2fa	b5 01		lda $01,x	                lda 1,x
.a2fc	85 39		sta $39		                sta scratch+3
.a2fe	b5 02		lda $02,x	                lda 2,x
.a300	85 36		sta $36		                sta scratch
.a302	b5 03		lda $03,x	                lda 3,x
.a304	85 37		sta $37		                sta scratch+1
.a306	18		clc		                clc
.a307	a5 36		lda $36		                lda scratch     ; ud-lo LSB
.a309	65 3a		adc $3a		                adc scratch+4   ; n LSB
.a30b	85 36		sta $36		                sta scratch     ; this is the new ud-lo
.a30d	a5 37		lda $37		                lda scratch+1   ; ud-lo MSB
.a30f	65 3b		adc $3b		                adc scratch+5   ; n MSB
.a311	85 37		sta $37		                sta scratch+1
.a313	a5 38		lda $38		                lda scratch+2   ; LSB
.a315	65 3c		adc $3c		                adc scratch+6
.a317	85 38		sta $38		                sta scratch+2   ; this is the new ud-hi
.a319	a5 39		lda $39		                lda scratch+3   ; MSB
.a31b	65 3d		adc $3d		                adc scratch+7
.a31d	85 39		sta $39		                sta scratch+3
.a31f	e8		inx		                inx
.a320	e8		inx		                inx             ; ( ud-lo ud-hi addr u ud-lo-lo )
.a321	f6 04		inc $04,x	                inc 4,x
.a323	d0 02		bne $a327	                bne +
.a325	f6 05		inc $05,x	                inc 5,x
.a327					+
.a327	d6 02		dec $02,x	                dec 2,x
.a329	d0 88		bne $a2b3	                bne _loop
.a32b					_done:
.a32b	e8		inx		                inx
.a32c	e8		inx		                inx             ; ( ud-lo ud-hi addr u )
.a32d	a5 36		lda $36		                lda scratch     ; new ud-lo
.a32f	95 06		sta $06,x	                sta 6,x
.a331	a5 37		lda $37		                lda scratch+1
.a333	95 07		sta $07,x	                sta 7,x
.a335	a5 38		lda $38		                lda scratch+2
.a337	95 04		sta $04,x	                sta 4,x
.a339	a5 39		lda $39		                lda scratch+3
.a33b	95 05		sta $05,x	                sta 5,x
.a33d	60		rts		z_to_number:    rts
.a33e					xt_to_order:
.a33e	20 51 a3	jsr $a351	                jsr xt_to_r
.a341	20 15 91	jsr $9115	                jsr xt_get_order
.a344	20 73 9a	jsr $9a73	                jsr xt_r_from
.a347	20 8f a1	jsr $a18f	                jsr xt_swap
.a34a	20 fe 97	jsr $97fe	                jsr xt_one_plus
.a34d	20 fc 9c	jsr $9cfc	                jsr xt_set_order
.a350	60		rts		z_to_order:     rts
.a351					xt_to_r:
.a351	68		pla		                pla             ; LSB
.a352	85 2c		sta $2c		                sta tmptos
.a354	7a		ply		                ply             ; MSB
.a355	20 10 d8	jsr $d810	                jsr underflow_1
.a358	b5 01		lda $01,x	                lda 1,x         ; MSB
.a35a	48		pha		                pha
.a35b	b5 00		lda $00,x	                lda 0,x         ; LSB
.a35d	48		pha		                pha
.a35e	e8		inx		                inx
.a35f	e8		inx		                inx
.a360	5a		phy		                phy             ; MSB
.a361	a5 2c		lda $2c		                lda tmptos
.a363	48		pha		                pha             ; LSB
.a364	60		rts		z_to_r:         rts
.a365					xt_true:
.a365	ca		dex		                dex
.a366	ca		dex		                dex
.a367	a9 ff		lda #$ff	                lda #$FF
.a369	95 00		sta $00,x	                sta 0,x
.a36b	95 01		sta $01,x	                sta 1,x
.a36d	60		rts		z_true:         rts
.a36e					xt_tuck:
.a36e	20 15 d8	jsr $d815	                jsr underflow_2
.a371	ca		dex		                dex
.a372	ca		dex		                dex
.a373	b4 04		ldy $04,x	                ldy 4,x         ; LSB
.a375	b5 02		lda $02,x	                lda 2,x
.a377	95 04		sta $04,x	                sta 4,x
.a379	94 02		sty $02,x	                sty 2,x
.a37b	95 00		sta $00,x	                sta 0,x
.a37d	b4 05		ldy $05,x	                ldy 5,x         ; MSB
.a37f	b5 03		lda $03,x	                lda 3,x
.a381	95 05		sta $05,x	                sta 5,x
.a383	94 03		sty $03,x	                sty 3,x         ; bba
.a385	95 01		sta $01,x	                sta 1,x         ; baa
.a387	60		rts		z_tuck:         rts
.a388					xt_assembler_wordlist:
.a388					xt_two:
.a388	ca		dex		                dex
.a389	ca		dex		                dex
.a38a	a9 02		lda #$02	                lda #2
.a38c	95 00		sta $00,x	                sta 0,x
.a38e	74 01		stz $01,x	                stz 1,x
.a390					z_assembler_wordlist:
.a390	60		rts		z_two:          rts
.a391					xt_two_drop:
.a391	20 15 d8	jsr $d815	                jsr underflow_2
.a394	e8		inx		                inx
.a395	e8		inx		                inx
.a396	e8		inx		                inx
.a397	e8		inx		                inx
.a398	60		rts		z_two_drop:     rts
.a399					xt_two_dup:
.a399	20 15 d8	jsr $d815	                jsr underflow_2
.a39c	ca		dex		                dex
.a39d	ca		dex		                dex
.a39e	ca		dex		                dex
.a39f	ca		dex		                dex
.a3a0	b5 04		lda $04,x	                lda 4,x         ; TOS
.a3a2	95 00		sta $00,x	                sta 0,x
.a3a4	b5 05		lda $05,x	                lda 5,x
.a3a6	95 01		sta $01,x	                sta 1,x
.a3a8	b5 06		lda $06,x	                lda 6,x         ; NOS
.a3aa	95 02		sta $02,x	                sta 2,x
.a3ac	b5 07		lda $07,x	                lda 7,x
.a3ae	95 03		sta $03,x	                sta 3,x
.a3b0	60		rts		z_two_dup:      rts
.a3b1					xt_two_fetch:
.a3b1	20 10 d8	jsr $d810	                jsr underflow_1
.a3b4	b5 00		lda $00,x	                lda 0,x
.a3b6	85 24		sta $24		                sta tmp1
.a3b8	b4 01		ldy $01,x	                ldy 1,x
.a3ba	84 25		sty $25		                sty tmp1+1
.a3bc	ca		dex		                dex             ; reuse one stack element
.a3bd	ca		dex		                dex
.a3be	b2 24		lda ($24)	                lda (tmp1)      ; copy LSB
.a3c0	95 00		sta $00,x	                sta 0,x
.a3c2	a0 01		ldy #$01	                ldy #1          ; copy next
.a3c4	b1 24		lda ($24),y	                lda (tmp1),y
.a3c6	95 01		sta $01,x	                sta 1,x
.a3c8	c8		iny		                iny             ; copy next
.a3c9	b1 24		lda ($24),y	                lda (tmp1),y
.a3cb	95 02		sta $02,x	                sta 2,x
.a3cd	c8		iny		                iny             ; copy next
.a3ce	b1 24		lda ($24),y	                lda (tmp1),y
.a3d0	95 03		sta $03,x	                sta 3,x
.a3d2	60		rts		z_two_fetch:    rts
.a3d3					xt_two_over:
.a3d3	20 1f d8	jsr $d81f	                jsr underflow_4
.a3d6	ca		dex		                dex
.a3d7	ca		dex		                dex
.a3d8	ca		dex		                dex
.a3d9	ca		dex		                dex
.a3da	b5 08		lda $08,x	                lda 8,x
.a3dc	95 00		sta $00,x	                sta 0,x
.a3de	b5 09		lda $09,x	                lda 9,x
.a3e0	95 01		sta $01,x	                sta 1,x
.a3e2	b5 0a		lda $0a,x	                lda 10,x
.a3e4	95 02		sta $02,x	                sta 2,x
.a3e6	b5 0b		lda $0b,x	                lda 11,x
.a3e8	95 03		sta $03,x	                sta 3,x
.a3ea	60		rts		z_two_over:     rts
.a3eb					xt_two_r_fetch:
.a3eb	ca		dex		                dex
.a3ec	ca		dex		                dex
.a3ed	ca		dex		                dex
.a3ee	ca		dex		                dex
.a3ef	8a		txa		                txa
.a3f0	ba		tsx		                tsx
.a3f1	da		phx		                phx             ; 65c02 has no TXY, so do it the hard way
.a3f2	7a		ply		                ply
.a3f3	aa		tax		                tax
.a3f4	b9 03 01	lda $0103,y	                lda $0103,y     ; LSB of top entry
.a3f7	95 00		sta $00,x	                sta 0,x
.a3f9	b9 04 01	lda $0104,y	                lda $0104,y     ; MSB of top entry
.a3fc	95 01		sta $01,x	                sta 1,x
.a3fe	b9 05 01	lda $0105,y	                lda $0105,y     ; LSB of bottom entry
.a401	95 02		sta $02,x	                sta 2,x
.a403	b9 06 01	lda $0106,y	                lda $0106,y     ; MSB of top entry
.a406	95 03		sta $03,x	                sta 3,x
.a408	60		rts		z_two_r_fetch:  rts
.a409					xt_two_r_from:
.a409	68		pla		                pla                     ; LSB
.a40a	85 24		sta $24		                sta tmp1
.a40c	68		pla		                pla                     ; MSB
.a40d	85 25		sta $25		                sta tmp1+1
.a40f	ca		dex		                dex
.a410	ca		dex		                dex
.a411	ca		dex		                dex
.a412	ca		dex		                dex
.a413	68		pla		                pla                     ; LSB
.a414	95 00		sta $00,x	                sta 0,x
.a416	68		pla		                pla                     ; MSB
.a417	95 01		sta $01,x	                sta 1,x
.a419	68		pla		                pla                     ; LSB
.a41a	95 02		sta $02,x	                sta 2,x
.a41c	68		pla		                pla                     ; MSB
.a41d	95 03		sta $03,x	                sta 3,x
.a41f	a5 25		lda $25		                lda tmp1+1              ; MSB
.a421	48		pha		                pha
.a422	a5 24		lda $24		                lda tmp1                ; LSB
.a424	48		pha		                pha
.a425	60		rts		z_two_r_from:   rts
.a426					xt_two_slash:
.a426	20 10 d8	jsr $d810	                jsr underflow_1
.a429	b5 01		lda $01,x	                lda 1,x
.a42b	0a		asl a		                asl                     ; save the sign
.a42c	76 01		ror $01,x	                ror 1,x
.a42e	76 00		ror $00,x	                ror 0,x
.a430	60		rts		z_two_slash:    rts
.a431					xt_two_star:
.a431					xt_cells:
.a431	20 10 d8	jsr $d810	                jsr underflow_1
.a434	16 00		asl $00,x	                asl 0,x
.a436	36 01		rol $01,x	                rol 1,x
.a438					z_cells:
.a438	60		rts		z_two_star:     rts
.a439					xt_two_store:
.a439	20 1a d8	jsr $d81a	                jsr underflow_3
.a43c	b5 00		lda $00,x	                lda 0,x
.a43e	85 24		sta $24		                sta tmp1
.a440	b4 01		ldy $01,x	                ldy 1,x
.a442	84 25		sty $25		                sty tmp1+1
.a444	e8		inx		                inx
.a445	e8		inx		                inx
.a446	b5 00		lda $00,x	                lda 0,x         ; copy MSB
.a448	92 24		sta ($24)	                sta (tmp1)
.a44a	b5 01		lda $01,x	                lda 1,x         ; copy next
.a44c	a0 01		ldy #$01	                ldy #1
.a44e	91 24		sta ($24),y	                sta (tmp1),y
.a450	b5 02		lda $02,x	                lda 2,x         ; copy next
.a452	c8		iny		                iny
.a453	91 24		sta ($24),y	                sta (tmp1),y
.a455	b5 03		lda $03,x	                lda 3,x         ; copy MSB
.a457	c8		iny		                iny
.a458	91 24		sta ($24),y	                sta (tmp1),y
.a45a	e8		inx		                inx             ; 2DROP
.a45b	e8		inx		                inx
.a45c	e8		inx		                inx
.a45d	e8		inx		                inx
.a45e	60		rts		z_two_store:    rts
.a45f					xt_two_swap:
.a45f	20 1f d8	jsr $d81f	                jsr underflow_4
.a462	b5 00		lda $00,x	                lda 0,x
.a464	b4 04		ldy $04,x	                ldy 4,x
.a466	95 04		sta $04,x	                sta 4,x
.a468	94 00		sty $00,x	                sty 0,x
.a46a	b5 01		lda $01,x	                lda 1,x
.a46c	b4 05		ldy $05,x	                ldy 5,x
.a46e	95 05		sta $05,x	                sta 5,x
.a470	94 01		sty $01,x	                sty 1,x
.a472	b5 02		lda $02,x	                lda 2,x
.a474	b4 06		ldy $06,x	                ldy 6,x
.a476	95 06		sta $06,x	                sta 6,x
.a478	94 02		sty $02,x	                sty 2,x
.a47a	b5 03		lda $03,x	                lda 3,x
.a47c	b4 07		ldy $07,x	                ldy 7,x
.a47e	95 07		sta $07,x	                sta 7,x
.a480	94 03		sty $03,x	                sty 3,x
.a482	60		rts		z_two_swap:     rts
.a483					xt_two_to_r:
.a483	68		pla		                pla             ; LSB
.a484	85 24		sta $24		                sta tmp1
.a486	68		pla		                pla             ; MSB
.a487	85 25		sta $25		                sta tmp1+1
.a489	20 15 d8	jsr $d815	                jsr underflow_2
.a48c	b5 03		lda $03,x	                lda 3,x         ; MSB
.a48e	48		pha		                pha
.a48f	b5 02		lda $02,x	                lda 2,x         ; LSB
.a491	48		pha		                pha
.a492	b5 01		lda $01,x	                lda 1,x         ; MSB
.a494	48		pha		                pha
.a495	b5 00		lda $00,x	                lda 0,x         ; LSB
.a497	48		pha		                pha
.a498	e8		inx		                inx
.a499	e8		inx		                inx
.a49a	e8		inx		                inx
.a49b	e8		inx		                inx
.a49c	a5 25		lda $25		                lda tmp1+1      ; MSB
.a49e	48		pha		                pha
.a49f	a5 24		lda $24		                lda tmp1        ; LSB
.a4a1	48		pha		                pha
.a4a2	60		rts		z_two_to_r:     rts
.a4a3					xt_two_constant:
.a4a3	20 15 d8	jsr $d815	                jsr underflow_2
.a4a6	20 4a 89	jsr $894a	                jsr xt_create
.a4a9	20 8f a1	jsr $a18f	                jsr xt_swap
.a4ac	20 4f 87	jsr $874f	                jsr xt_comma
.a4af	20 4f 87	jsr $874f	                jsr xt_comma
.a4b2	20 e5 8b	jsr $8be5	                jsr does_runtime    ; does> turns into these two routines.
.a4b5	20 f9 d6	jsr $d6f9	                jsr dodoes
.a4b8	20 90 8d	jsr $8d90	                jsr xt_dup
.a4bb	20 61 8f	jsr $8f61	                jsr xt_fetch
.a4be	20 8f a1	jsr $a18f	                jsr xt_swap
.a4c1	20 02 86	jsr $8602	                jsr xt_cell_plus
.a4c4	20 61 8f	jsr $8f61	                jsr xt_fetch
.a4c7	60		rts		z_two_constant: rts
.a4c8					xt_two_literal:
.a4c8	20 15 d8	jsr $d815	                jsr underflow_2 ; double number
.a4cb	20 8f a1	jsr $a18f	                jsr xt_swap
.a4ce	20 6b 93	jsr $936b	                jsr xt_literal
.a4d1	20 6b 93	jsr $936b	                jsr xt_literal
.a4d4	60		rts		z_two_literal:  rts
.a4d5					xt_two_variable:
.a4d5	20 4a 89	jsr $894a	                jsr xt_create
.a4d8	ca		dex		                dex
.a4d9	ca		dex		                dex
.a4da	a9 04		lda #$04	                lda #4
.a4dc	95 00		sta $00,x	                sta 0,x
.a4de	74 01		stz $01,x	                stz 1,x
.a4e0	20 8c 82	jsr $828c	                jsr xt_allot
.a4e3	60		rts		z_two_variable: rts
.a4e4					xt_type:
.a4e4	20 15 d8	jsr $d815	                jsr underflow_2
.a4e7	b5 02		lda $02,x	                lda 2,x
.a4e9	85 24		sta $24		                sta tmp1
.a4eb	b5 03		lda $03,x	                lda 3,x
.a4ed	85 25		sta $25		                sta tmp1+1
.a4ef					_loop:
.a4ef	b5 00		lda $00,x	                lda 0,x
.a4f1	15 01		ora $01,x	                ora 1,x
.a4f3	f0 15		beq $a50a	                beq _done
.a4f5	b2 24		lda ($24)	                lda (tmp1)
.a4f7	20 d7 8d	jsr $8dd7	                jsr emit_a      ; avoids stack foolery
.a4fa	e6 24		inc $24		                inc tmp1
.a4fc	d0 02		bne $a500	                bne +
.a4fe	e6 25		inc $25		                inc tmp1+1
.a500					+
.a500	b5 00		lda $00,x	                lda 0,x
.a502	d0 02		bne $a506	                bne +
.a504	d6 01		dec $01,x	                dec 1,x
.a506					+
.a506	d6 00		dec $00,x	                dec 0,x
.a508	80 e5		bra $a4ef	                bra _loop
.a50a					_done:
.a50a	e8		inx		                inx
.a50b	e8		inx		                inx
.a50c	e8		inx		                inx
.a50d	e8		inx		                inx
.a50e	60		rts		z_type:         rts
.a50f					xt_u_dot:
.a50f	20 10 d8	jsr $d810	                jsr underflow_1
.a512	20 5c d8	jsr $d85c	                jsr print_u
.a515	a9 20		lda #$20	                lda #AscSP
.a517	20 d7 8d	jsr $8dd7	                jsr emit_a
.a51a	60		rts		z_u_dot:        rts
.a51b					xt_u_dot_r:
.a51b	20 15 d8	jsr $d815	                jsr underflow_2
.a51e	20 51 a3	jsr $a351	                jsr xt_to_r
.a521	20 89 a7	jsr $a789	                jsr xt_zero
.a524	20 3b 93	jsr $933b	                jsr xt_less_number_sign
.a527	20 bf 97	jsr $97bf	                jsr xt_number_sign_s
.a52a	20 9d 97	jsr $979d	                jsr xt_number_sign_greater
.a52d	20 73 9a	jsr $9a73	                jsr xt_r_from
.a530	20 74 98	jsr $9874	                jsr xt_over
.a533	20 31 95	jsr $9531	                jsr xt_minus
.a536	20 05 a1	jsr $a105	                jsr xt_spaces
.a539	20 e4 a4	jsr $a4e4	                jsr xt_type
.a53c	60		rts		z_u_dot_r:      rts
.a53d					xt_u_greater_than:
.a53d	20 15 d8	jsr $d815	                jsr underflow_2
.a540	b5 00		lda $00,x	                lda 0,x
.a542	d5 02		cmp $02,x	                cmp 2,x
.a544	b5 01		lda $01,x	                lda 1,x
.a546	f5 03		sbc $03,x	                sbc 3,x
.a548	e8		inx		                inx
.a549	e8		inx		                inx
.a54a	a9 00		lda #$00	                lda #0
.a54c	69 ff		adc #$ff	                adc #$ff
.a54e	95 00		sta $00,x	                sta 0,x         ; store flag
.a550	95 01		sta $01,x	                sta 1,x
.a552	60		rts		z_u_greater_than:    rts
.a553					xt_u_less_than:
.a553	20 15 d8	jsr $d815	                jsr underflow_2
.a556	b5 02		lda $02,x	                lda 2,x
.a558	d5 00		cmp $00,x	                cmp 0,x
.a55a	b5 03		lda $03,x	                lda 3,x
.a55c	f5 01		sbc $01,x	                sbc 1,x
.a55e	e8		inx		                inx
.a55f	e8		inx		                inx
.a560	a9 00		lda #$00	                lda #0
.a562	69 ff		adc #$ff	                adc #$ff
.a564	95 00		sta $00,x	                sta 0,x         ; store flag
.a566	95 01		sta $01,x	                sta 1,x
.a568	60		rts		z_u_less_than:    rts
.a569					xt_ud_dot:
.a569	20 15 d8	jsr $d815	                jsr underflow_2 ; double number
.a56c	20 3b 93	jsr $933b	                jsr xt_less_number_sign
.a56f	20 bf 97	jsr $97bf	                jsr xt_number_sign_s
.a572	20 9d 97	jsr $979d	                jsr xt_number_sign_greater
.a575	20 e4 a4	jsr $a4e4	                jsr xt_type
.a578	20 ff a0	jsr $a0ff	                jsr xt_space
.a57b	60		rts		z_ud_dot:        rts
.a57c					xt_ud_dot_r:
.a57c	20 1a d8	jsr $d81a	                jsr underflow_3
.a57f	20 51 a3	jsr $a351	                jsr xt_to_r
.a582	20 3b 93	jsr $933b	                jsr xt_less_number_sign
.a585	20 bf 97	jsr $97bf	                jsr xt_number_sign_s
.a588	20 9d 97	jsr $979d	                jsr xt_number_sign_greater
.a58b	20 73 9a	jsr $9a73	                jsr xt_r_from
.a58e	20 74 98	jsr $9874	                jsr xt_over
.a591	20 31 95	jsr $9531	                jsr xt_minus
.a594	20 05 a1	jsr $a105	                jsr xt_spaces
.a597	20 e4 a4	jsr $a4e4	                jsr xt_type
.a59a	60		rts		z_ud_dot_r:      rts
.a59b					xt_um_slash_mod:
.a59b	20 1a d8	jsr $d81a	                jsr underflow_3
.a59e	b5 00		lda $00,x	                lda 0,x
.a5a0	15 01		ora $01,x	                ora 1,x
.a5a2	d0 05		bne $a5a9	                bne _not_zero
.a5a4	a9 04		lda #$04	                lda #err_divzero
.a5a6	4c 26 d8	jmp $d826	                jmp error
.a5a9					_not_zero:
.a5a9	a9 11		lda #$11	                lda #17
.a5ab	85 2c		sta $2c		                sta tmptos
.a5ad					_loop:
.a5ad	36 04		rol $04,x	                rol 4,x
.a5af	36 05		rol $05,x	                rol 5,x
.a5b1	c6 2c		dec $2c		                dec tmptos
.a5b3	f0 22		beq $a5d7	                beq _done
.a5b5	36 02		rol $02,x	                rol 2,x
.a5b7	36 03		rol $03,x	                rol 3,x
.a5b9	64 24		stz $24		                stz tmp1        ; store the bit we got from hi cell (MSB)
.a5bb	26 24		rol $24		                rol tmp1
.a5bd	38		sec		                sec
.a5be	b5 02		lda $02,x	                lda 2,x
.a5c0	f5 00		sbc $00,x	                sbc 0,x
.a5c2	85 25		sta $25		                sta tmp1+1
.a5c4	b5 03		lda $03,x	                lda 3,x
.a5c6	f5 01		sbc $01,x	                sbc 1,x
.a5c8	a8		tay		                tay
.a5c9	a5 24		lda $24		                lda tmp1
.a5cb	e9 00		sbc #$00	                sbc #0
.a5cd	90 de		bcc $a5ad	                bcc _loop
.a5cf	a5 25		lda $25		                lda tmp1+1
.a5d1	95 02		sta $02,x	                sta 2,x
.a5d3	94 03		sty $03,x	                sty 3,x         ; used as temp storage
.a5d5	80 d6		bra $a5ad	                bra _loop
.a5d7					_done:
.a5d7	e8		inx		                inx
.a5d8	e8		inx		                inx
.a5d9	20 8f a1	jsr $a18f	                jsr xt_swap
.a5dc	60		rts		z_um_slash_mod: rts
.a5dd					xt_um_star:
.a5dd	20 15 d8	jsr $d815	                jsr underflow_2
.a5e0	18		clc		                clc
.a5e1	b5 00		lda $00,x	                lda 0,x         ; copy TOS to tmp2
.a5e3	e9 00		sbc #$00	                sbc #0
.a5e5	85 26		sta $26		                sta tmp2
.a5e7	b5 01		lda $01,x	                lda 1,x
.a5e9	e9 00		sbc #$00	                sbc #0
.a5eb	90 31		bcc $a61e	                bcc _zero       ; is TOS zero?
.a5ed	85 27		sta $27		                sta tmp2+1
.a5ef	a9 00		lda #$00	                lda #0
.a5f1	85 24		sta $24		                sta tmp1
.a5f3	86 28		stx $28		                stx tmp3        ; tested for exit from outer loop
.a5f5	ca		dex		                dex
.a5f6	ca		dex		                dex
.a5f7					_outer_loop:
.a5f7	a0 08		ldy #$08	                ldy #8          ; counter inner loop
.a5f9	56 04		lsr $04,x	                lsr 4,x         ; think "2,x" then later "3,x"
.a5fb					_inner_loop:
.a5fb	90 0c		bcc $a609	                bcc _no_add
.a5fd	85 25		sta $25		                sta tmp1+1      ; save time, don't CLC
.a5ff	a5 24		lda $24		                lda tmp1
.a601	65 26		adc $26		                adc tmp2
.a603	85 24		sta $24		                sta tmp1
.a605	a5 25		lda $25		                lda tmp1+1
.a607	65 27		adc $27		                adc tmp2+1
.a609					_no_add:
.a609	6a		ror a		                ror
.a60a	66 24		ror $24		                ror tmp1
.a60c	76 04		ror $04,x	                ror 4,x         ; think "2,x" then later "3,x"
.a60e	88		dey		                dey
.a60f	d0 ea		bne $a5fb	                bne _inner_loop ; go back for one more shift?
.a611	e8		inx		                inx
.a612	e4 28		cpx $28		                cpx tmp3
.a614	d0 e1		bne $a5f7	                bne _outer_loop ; go back for eight more shifts?
.a616	95 01		sta $01,x	                sta 1,x
.a618	a5 24		lda $24		                lda tmp1
.a61a	95 00		sta $00,x	                sta 0,x
.a61c	80 04		bra $a622	                bra _done
.a61e					_zero:
.a61e	74 02		stz $02,x	                stz 2,x
.a620	74 03		stz $03,x	                stz 3,x
.a622					_done:
.a622	60		rts		z_um_star:      rts
.a623					xt_unloop:
.a623	68		pla		                pla
.a624	68		pla		                pla
.a625	68		pla		                pla
.a626	68		pla		                pla
.a627	68		pla		                pla
.a628	68		pla		                pla
.a629	60		rts		z_unloop:       rts
.a62a					xt_until:
.a62a	a0 91		ldy #$91	                ldy #>zero_branch_runtime
.a62c	a9 f5		lda #$f5	                lda #<zero_branch_runtime
.a62e	20 b3 d6	jsr $d6b3	                jsr cmpl_subroutine
.a631	20 4f 87	jsr $874f	                jsr xt_comma
.a634	60		rts		z_until:        rts
.a635					xt_unused:
.a635	ca		dex		                dex
.a636	ca		dex		                dex
.a637	a9 00		lda #$00	                lda #<cp_end
.a639	38		sec		                sec
.a63a	e5 00		sbc $00		                sbc cp
.a63c	95 00		sta $00,x	                sta 0,x
.a63e	a9 7c		lda #$7c	                lda #>cp_end
.a640	e5 01		sbc $01		                sbc cp+1
.a642	95 01		sta $01,x	                sta 1,x
.a644	60		rts		z_unused:       rts
.a645					xt_update:
.a645	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.a647	b1 1e		lda ($1e),y	                lda (up),y
.a649	09 02		ora #$02	                ora #2          ; Turn on dirty flag (bit 2)
.a64b	91 1e		sta ($1e),y	                sta (up),y
.a64d	60		rts		z_update:       rts
.a64e					xt_useraddr:
.a64e	ca		dex		                dex
.a64f	ca		dex		                dex
.a650	a9 1e		lda #$1e	                lda #<up
.a652	95 00		sta $00,x	                sta 0,x
.a654	a9 00		lda #$00	                lda #>up
.a656	95 01		sta $01,x	                sta 1,x
.a658	60		rts		z_useraddr:     rts
.a659					xt_variable:
.a659	20 4a 89	jsr $894a	                jsr xt_create
.a65c	a9 00		lda #$00	                lda #0
.a65e	92 00		sta ($00)	                sta (cp)
.a660	e6 00		inc $00		                inc cp
.a662	d0 02		bne $a666	                bne +
.a664	e6 01		inc $01		                inc cp+1
.a666					+
.a666	92 00		sta ($00)	                sta (cp)
.a668	e6 00		inc $00		                inc cp
.a66a	d0 02		bne $a66e	                bne +
.a66c	e6 01		inc $01		                inc cp+1
.a66e					+
.a66e	20 12 89	jsr $8912	                jsr adjust_z
.a671	60		rts		z_variable:     rts
.a672					xt_while:
.a672	a0 91		ldy #$91	                ldy #>zero_branch_runtime
.a674	a9 f5		lda #$f5	                lda #<zero_branch_runtime
.a676	20 b3 d6	jsr $d6b3	                jsr cmpl_subroutine
.a679	20 53 91	jsr $9153	                jsr xt_here
.a67c	20 89 a7	jsr $a789	                jsr xt_zero
.a67f	20 4f 87	jsr $874f	                jsr xt_comma
.a682	20 8f a1	jsr $a18f	                jsr xt_swap
.a685	60		rts		z_while:        rts
.a686					xt_within:
.a686	20 1a d8	jsr $d81a	                jsr underflow_3
.a689	20 74 98	jsr $9874	                jsr xt_over
.a68c	20 31 95	jsr $9531	                jsr xt_minus
.a68f	20 51 a3	jsr $a351	                jsr xt_to_r
.a692	20 31 95	jsr $9531	                jsr xt_minus
.a695	20 73 9a	jsr $9a73	                jsr xt_r_from
.a698	20 53 a5	jsr $a553	                jsr xt_u_less_than
.a69b	60		rts		z_within:       rts
.a69c					xt_word:
.a69c	20 10 d8	jsr $d810	                jsr underflow_1
.a69f	a4 0c		ldy $0c		                ldy toin                ; >IN
.a6a1					_loop:
.a6a1	c4 0a		cpy $0a		                cpy ciblen              ; quit if end of input
.a6a3	f0 09		beq $a6ae	                beq _found_char
.a6a5	b1 08		lda ($08),y	                lda (cib),y
.a6a7	d5 00		cmp $00,x	                cmp 0,x                 ; ASCII of delimiter
.a6a9	d0 03		bne $a6ae	                bne _found_char
.a6ab	c8		iny		                iny
.a6ac	80 f3		bra $a6a1	                bra _loop
.a6ae					_found_char:
.a6ae	84 0c		sty $0c		                sty toin
.a6b0	20 1b 99	jsr $991b	                jsr xt_parse            ; Returns ( addr u )
.a6b3	b5 00		lda $00,x	                lda 0,x
.a6b5	92 00		sta ($00)	                sta (cp)                ; Save length of string
.a6b7	48		pha		                pha                     ; Keep copy of length for later
.a6b8	20 90 8d	jsr $8d90	                jsr xt_dup              ; ( addr u u )
.a6bb	a5 00		lda $00		                lda cp
.a6bd	18		clc		                clc
.a6be	69 01		adc #$01	                adc #1
.a6c0	95 02		sta $02,x	                sta 2,x                 ; LSB of CP
.a6c2	a5 01		lda $01		                lda cp+1
.a6c4	69 00		adc #$00	                adc #0
.a6c6	95 03		sta $03,x	                sta 3,x                 ; ( addr cp+1 u )
.a6c8	20 a3 95	jsr $95a3	                jsr xt_move
.a6cb	ca		dex		                dex
.a6cc	ca		dex		                dex
.a6cd	a5 00		lda $00		                lda cp
.a6cf	95 00		sta $00,x	                sta 0,x
.a6d1	a5 01		lda $01		                lda cp+1
.a6d3	95 01		sta $01,x	                sta 1,x
.a6d5	68		pla		                pla                     ; length of string
.a6d6	18		clc		                clc
.a6d7	65 00		adc $00		                adc cp
.a6d9	85 00		sta $00		                sta cp
.a6db	a5 01		lda $01		                lda cp+1
.a6dd	69 00		adc #$00	                adc #0                  ; we only need the carry
.a6df	85 01		sta $01		                sta cp+1
.a6e1	60		rts		z_word:         rts
.a6e2					xt_wordlist:
.a6e2	a0 05		ldy #$05	                ldy #num_wordlists_offset
.a6e4	b1 1e		lda ($1e),y	                lda (up),y      ; This is a byte variable, so only
.a6e6	c9 0c		cmp #$0c	                cmp #max_wordlists
.a6e8	d0 05		bne $a6ef	                bne _ok
.a6ea	a9 0b		lda #$0b	                lda #err_wordlist
.a6ec	4c 26 d8	jmp $d826	                jmp error
.a6ef					_ok:
.a6ef	1a		inc a		                ina             ; Increment the wordlist#
.a6f0	91 1e		sta ($1e),y	                sta (up),y      ; Save it into byte variable #wordlists
.a6f2	ca		dex		                dex             ; and put it on the stack.
.a6f3	ca		dex		                dex
.a6f4	95 00		sta $00,x	                sta 0,x
.a6f6	74 01		stz $01,x	                stz 1,x         ; 12 is the max, so upper byte is always zero.
.a6f8	60		rts		z_wordlist:     rts
.a6f9					xt_words:
.a6f9	20 44 89	jsr $8944	                jsr xt_cr
.a6fc	a9 00		lda #$00	                lda #0
.a6fe	48		pha		                pha
.a6ff	ca		dex		                dex                     ; Make room on the stack for
.a700	ca		dex		                dex                     ; a dictionary pointer.
.a701	64 28		stz $28		                stz tmp3                ; Start at the beginning of
.a703					_wordlist_loop:
.a703	a0 1e		ldy #$1e	                ldy #num_order_offset   ; Check against byte variable #ORDER.
.a705	a5 28		lda $28		                lda tmp3
.a707	d1 1e		cmp ($1e),y	                cmp (up),y              ; See if we are done.
.a709	d0 02		bne $a70d	                bne _have_wordlist
.a70b	80 45		bra $a752	                bra _words_done
.a70d					_have_wordlist:
.a70d	18		clc		                clc                     ; Index into byte array SEARCH-ORDER.
.a70e	69 1f		adc #$1f	                adc #search_order_offset
.a710	a8		tay		                tay
.a711	b1 1e		lda ($1e),y	                lda (up),y              ; Get the index into array WORDLISTS
.a713	0a		asl a		                asl                     ; Turn offset into cells offset.
.a714	18		clc		                clc
.a715	69 06		adc #$06	                adc #wordlists_offset
.a717	a8		tay		                tay
.a718	b1 1e		lda ($1e),y	                lda (up),y              ; Save the DP for this wordlist
.a71a	95 00		sta $00,x	                sta 0,x                 ; on the stack. ( nt )
.a71c	c8		iny		                iny
.a71d	b1 1e		lda ($1e),y	                lda (up),y
.a71f	95 01		sta $01,x	                sta 1,x
.a721					_loop:
.a721	20 90 8d	jsr $8d90	                jsr xt_dup              ; ( nt nt )
.a724	20 df 95	jsr $95df	                jsr xt_name_to_string   ; ( nt addr u )
.a727	68		pla		                pla
.a728	18		clc		                clc
.a729	75 00		adc $00,x	                adc 0,x
.a72b	1a		inc a		                ina                     ; don't forget the space between words
.a72c	c9 4f		cmp #$4f	                cmp #MAX_LINE_LENGTH    ; usually 79
.a72e	90 06		bcc $a736	                bcc +
.a730	20 44 89	jsr $8944	                jsr xt_cr
.a733	b5 00		lda $00,x	                lda 0,x                 ; After going to next line, start
.a735	1a		inc a		                ina                     ; with length of this word.
.a736					+
.a736	48		pha		                pha
.a737	20 e4 a4	jsr $a4e4	                jsr xt_type             ; ( nt )
.a73a	a9 20		lda #$20	                lda #AscSP
.a73c	20 d7 8d	jsr $8dd7	                jsr emit_a
.a73f	20 fe 97	jsr $97fe	                jsr xt_one_plus         ; 1+
.a742	20 fe 97	jsr $97fe	                jsr xt_one_plus         ; 1+
.a745	20 61 8f	jsr $8f61	                jsr xt_fetch            ; @ ( nt+1 )
.a748	b5 00		lda $00,x	                lda 0,x
.a74a	15 01		ora $01,x	                ora 1,x
.a74c	d0 d3		bne $a721	                bne _loop
.a74e	e6 28		inc $28		                inc tmp3
.a750	80 b1		bra $a703	                bra _wordlist_loop
.a752					_words_done:
.a752	68		pla		                pla                     ; dump counter
.a753	e8		inx		                inx
.a754	e8		inx		                inx
.a755	60		rts		z_words:        rts
.a756					xt_wordsize:
.a756	20 10 d8	jsr $d810	                jsr underflow_1
.a759	b5 00		lda $00,x	                lda 0,x
.a75b	85 24		sta $24		                sta tmp1
.a75d	b5 01		lda $01,x	                lda 1,x
.a75f	85 25		sta $25		                sta tmp1+1
.a761	a0 06		ldy #$06	                ldy #6
.a763	b1 24		lda ($24),y	                lda (tmp1),y    ; LSB of z
.a765	88		dey		                dey
.a766	88		dey		                dey
.a767	38		sec		                sec
.a768	f1 24		sbc ($24),y	                sbc (tmp1),y    ; LSB of xt
.a76a	95 00		sta $00,x	                sta 0,x
.a76c	a0 07		ldy #$07	                ldy #7
.a76e	b1 24		lda ($24),y	                lda (tmp1),y    ; MSB of z
.a770	88		dey		                dey
.a771	88		dey		                dey
.a772	f1 24		sbc ($24),y	                sbc (tmp1),y    ; MSB of xt
.a774	95 01		sta $01,x	                sta 1,x
.a776	60		rts		z_wordsize:     rts
.a777					xt_xor:
.a777	20 15 d8	jsr $d815	                jsr underflow_2
.a77a	b5 00		lda $00,x	                lda 0,x
.a77c	55 02		eor $02,x	                eor 2,x
.a77e	95 02		sta $02,x	                sta 2,x
.a780	b5 01		lda $01,x	                lda 1,x
.a782	55 03		eor $03,x	                eor 3,x
.a784	95 03		sta $03,x	                sta 3,x
.a786	e8		inx		                inx
.a787	e8		inx		                inx
.a788	60		rts		z_xor:          rts
.a789					xt_case:
.a789					xt_forth_wordlist:
.a789					xt_zero:
.a789	ca		dex		                dex             ; push
.a78a	ca		dex		                dex
.a78b	74 00		stz $00,x	                stz 0,x
.a78d	74 01		stz $01,x	                stz 1,x
.a78f					z_case:
.a78f					z_forth_wordlist:
.a78f					z_zero:
.a78f	60		rts		                rts
.a790					xt_zero_equal:
.a790	20 10 d8	jsr $d810	                jsr underflow_1
.a793	b5 00		lda $00,x	                lda 0,x
.a795	15 01		ora $01,x	                ora 1,x
.a797	f0 04		beq $a79d	                beq _zero
.a799	a9 00		lda #$00	                lda #0
.a79b	80 02		bra $a79f	                bra _store
.a79d					_zero:
.a79d	a9 ff		lda #$ff	                lda #$ff
.a79f					_store:
.a79f	95 00		sta $00,x	                sta 0,x
.a7a1	95 01		sta $01,x	                sta 1,x
.a7a3	60		rts		z_zero_equal:   rts
.a7a4					xt_zero_greater:
.a7a4	20 10 d8	jsr $d810	                jsr underflow_1
.a7a7	a0 00		ldy #$00	                ldy #0          ; Default is FALSE (TOS is negative)
.a7a9	b5 01		lda $01,x	                lda 1,x         ; MSB
.a7ab	30 05		bmi $a7b2	                bmi _done       ; TOS is negative, keep FLASE
.a7ad	15 00		ora $00,x	                ora 0,x
.a7af	f0 01		beq $a7b2	                beq _done       ; TOS is zero, keep FALSE
.a7b1	88		dey		                dey             ; TOS is postive, make true
.a7b2					_done:
.a7b2	98		tya		                tya
.a7b3	95 00		sta $00,x	                sta 0,x
.a7b5	95 01		sta $01,x	                sta 1,x
.a7b7	60		rts		z_zero_greater: rts
.a7b8					xt_zero_less:
.a7b8	20 10 d8	jsr $d810	                jsr underflow_1
.a7bb	a0 00		ldy #$00	                ldy #0          ; Default is FALSE (TOS positive)
.a7bd	b5 01		lda $01,x	                lda 1,x         ; MSB
.a7bf	10 01		bpl $a7c2	                bpl _done       ; TOS is positive, so keep FALSE
.a7c1	88		dey		                dey             ; TOS is negative, make TRUE
.a7c2					_done:
.a7c2	98		tya		                tya
.a7c3	95 00		sta $00,x	                sta 0,x
.a7c5	95 01		sta $01,x	                sta 1,x
.a7c7	60		rts		z_zero_less:    rts
.a7c8					xt_zero_unequal:
.a7c8	20 10 d8	jsr $d810	                jsr underflow_1
.a7cb	a0 00		ldy #$00	                ldy #0          ; default false
.a7cd	b5 00		lda $00,x	                lda 0,x
.a7cf	15 01		ora $01,x	                ora 1,x
.a7d1	f0 01		beq $a7d4	                beq _got_zero
.a7d3	88		dey		                dey
.a7d4					_got_zero:
.a7d4	98		tya		                tya
.a7d5	95 00		sta $00,x	                sta 0,x
.a7d7	95 01		sta $01,x	                sta 1,x
.a7d9	60		rts		z_zero_unequal: rts
.a7da					xt_editor_screen_helper:
.a7da	20 90 8d	jsr $8d90	                jsr xt_dup
.a7dd	20 ba 9e	jsr $9eba	                jsr xt_scr
.a7e0	20 6e a1	jsr $a16e	                jsr xt_store
.a7e3	20 96 85	jsr $8596	                jsr xt_buffer
.a7e6					z_editor_screen_helper:
.a7e6	60		rts		                rts
.a7e7					xt_editor_enter_screen:
.a7e7	20 da a7	jsr $a7da	                jsr xt_editor_screen_helper
.a7ea	20 0f 8d	jsr $8d0f	                jsr xt_drop
.a7ed	64 2e		stz $2e		                stz editor1
.a7ef					_prompt_loop:
.a7ef	ca		dex		                dex
.a7f0	ca		dex		                dex
.a7f1	a5 2e		lda $2e		                lda editor1
.a7f3	95 00		sta $00,x	                sta 0,x
.a7f5	74 01		stz $01,x	                stz 1,x
.a7f7	20 bc a8	jsr $a8bc	                jsr xt_editor_o
.a7fa	e6 2e		inc $2e		                inc editor1
.a7fc	a9 10		lda #$10	                lda #16
.a7fe	c5 2e		cmp $2e		                cmp editor1
.a800	d0 ed		bne $a7ef	                bne _prompt_loop
.a802					z_editor_enter_screen:
.a802	60		rts		                rts
.a803					xt_editor_erase_screen:
.a803	20 da a7	jsr $a7da	                jsr xt_editor_screen_helper
.a806	ca		dex		                dex
.a807	ca		dex		                dex
.a808	74 00		stz $00,x	                stz 0,x
.a80a	a9 04		lda #$04	                lda #4          ; 4 in MSB makes 1024 ($400).
.a80c	95 01		sta $01,x	                sta 1,x
.a80e	20 cb 8e	jsr $8ecb	                jsr xt_blank
.a811	20 45 a6	jsr $a645	                jsr xt_update
.a814					z_editor_erase_screen:
.a814	60		rts		                rts
.a815					xt_editor_el:
.a815	20 a3 a8	jsr $a8a3	                jsr xt_editor_line
.a818	ca		dex		                dex
.a819	ca		dex		                dex
.a81a	a9 40		lda #$40	                lda #64
.a81c	95 00		sta $00,x	                sta 0,x
.a81e	74 01		stz $01,x	                stz 1,x
.a820	20 cb 8e	jsr $8ecb	                jsr xt_blank
.a823	20 45 a6	jsr $a645	                jsr xt_update
.a826	60		rts		z_editor_el:    rts
.a827					xt_editor_l:
.a827	ca		dex		                dex             ; Put SCR on the stack.
.a828	ca		dex		                dex
.a829	a0 02		ldy #$02	                ldy #scr_offset
.a82b	b1 1e		lda ($1e),y	                lda (up),y
.a82d	95 00		sta $00,x	                sta 0,x
.a82f	c8		iny		                iny
.a830	b1 1e		lda ($1e),y	                lda (up),y
.a832	95 01		sta $01,x	                sta 1,x
.a834	20 a2 83	jsr $83a2	                jsr xt_block    ; Get the current screen.
.a837	20 44 89	jsr $8944	                jsr xt_cr
.a83a	80 08		bra $a844	                bra _after_screen_msg
.a83c					_screen_msg:
>a83c	53 63 72 65 65 6e 20 23		                .text "Screen #"
.a844					_after_screen_msg:
.a844	20 8a a0	jsr $a08a	                jsr sliteral_runtime
>a847	3c a8 08 00			                .word _screen_msg, _after_screen_msg-_screen_msg
.a84b	20 e4 a4	jsr $a4e4	                jsr xt_type
.a84e	20 ba 9e	jsr $9eba	                jsr xt_scr
.a851	20 61 8f	jsr $8f61	                jsr xt_fetch
.a854	ca		dex		                dex
.a855	ca		dex		                dex
.a856	a9 04		lda #$04	                lda #4          ; four spaces
.a858	95 00		sta $00,x	                sta 0,x
.a85a	74 01		stz $01,x	                stz 1,x
.a85c	20 1b a5	jsr $a51b	                jsr xt_u_dot_r
.a85f	64 28		stz $28		                stz tmp3
.a861					_line_loop:
.a861	20 44 89	jsr $8944	                jsr xt_cr
.a864	ca		dex		                dex
.a865	ca		dex		                dex
.a866	ca		dex		                dex
.a867	ca		dex		                dex
.a868	74 03		stz $03,x	                stz 3,x
.a86a	a5 28		lda $28		                lda tmp3
.a86c	95 02		sta $02,x	                sta 2,x
.a86e	74 01		stz $01,x	                stz 1,x
.a870	a9 02		lda #$02	                lda #2
.a872	95 00		sta $00,x	                sta 0,x
.a874	20 1b a5	jsr $a51b	                jsr xt_u_dot_r
.a877	20 ff a0	jsr $a0ff	                jsr xt_space
.a87a	20 90 8d	jsr $8d90	                jsr xt_dup
.a87d	ca		dex		                dex
.a87e	ca		dex		                dex
.a87f	a9 40		lda #$40	                lda #64
.a881	95 00		sta $00,x	                sta 0,x
.a883	74 01		stz $01,x	                stz 1,x
.a885	20 e4 a4	jsr $a4e4	                jsr xt_type
.a888	18		clc		                clc
.a889	a9 40		lda #$40	                lda #64
.a88b	75 00		adc $00,x	                adc 0,x
.a88d	95 00		sta $00,x	                sta 0,x
.a88f	b5 01		lda $01,x	                lda 1,x
.a891	69 00		adc #$00	                adc #0      ; Add carry
.a893	95 01		sta $01,x	                sta 1,x
.a895	e6 28		inc $28		                inc tmp3
.a897	a5 28		lda $28		                lda tmp3
.a899	c9 10		cmp #$10	                cmp #16
.a89b	d0 c4		bne $a861	                bne _line_loop
.a89d	20 44 89	jsr $8944	                jsr xt_cr
.a8a0	e8		inx		                inx
.a8a1	e8		inx		                inx
.a8a2	60		rts		z_editor_l:            rts
.a8a3					xt_editor_line:
.a8a3	20 10 d8	jsr $d810	                jsr underflow_1
.a8a6	a0 06		ldy #$06	                ldy #6          ; *64 is same as left shift 6 times.
.a8a8					_shift_tos_left:
.a8a8	16 00		asl $00,x	                asl 0,x         ; Shift TOS to the left
.a8aa	36 01		rol $01,x	                rol 1,x         ; ROL brings MSb from lower byte.
.a8ac	88		dey		                dey
.a8ad	d0 f9		bne $a8a8	                bne _shift_tos_left
.a8af	20 ba 9e	jsr $9eba	                jsr xt_scr
.a8b2	20 61 8f	jsr $8f61	                jsr xt_fetch
.a8b5	20 a2 83	jsr $83a2	                jsr xt_block
.a8b8	20 c4 99	jsr $99c4	                jsr xt_plus
.a8bb	60		rts		z_editor_line:  rts
.a8bc					xt_editor_o:
.a8bc	20 44 89	jsr $8944	                jsr xt_cr
.a8bf	20 90 8d	jsr $8d90	                jsr xt_dup
.a8c2	20 88 a3	jsr $a388	                jsr xt_two
.a8c5	20 1b a5	jsr $a51b	                jsr xt_u_dot_r
.a8c8	20 ff a0	jsr $a0ff	                jsr xt_space
.a8cb	a9 2a		lda #$2a	                lda #42         ; ASCII for *
.a8cd	20 d7 8d	jsr $8dd7	                jsr emit_a
.a8d0	20 ff a0	jsr $a0ff	                jsr xt_space
.a8d3	20 a3 a8	jsr $a8a3	                jsr xt_editor_line
.a8d6	20 90 8d	jsr $8d90	                jsr xt_dup      ; Save a copy of the line address for later.
.a8d9	ca		dex		                dex
.a8da	ca		dex		                dex
.a8db	a9 40		lda #$40	                lda #64         ; chars/line
.a8dd	95 00		sta $00,x	                sta 0,x
.a8df	74 01		stz $01,x	                stz 1,x
.a8e1	20 2f 81	jsr $812f	                jsr xt_accept
.a8e4	20 90 8d	jsr $8d90	                jsr xt_dup
.a8e7	20 4f 96	jsr $964f	                jsr xt_not_rote ; -rot
.a8ea	20 c4 99	jsr $99c4	                jsr xt_plus
.a8ed	ca		dex		                dex
.a8ee	ca		dex		                dex
.a8ef	a9 40		lda #$40	                lda #64         ; chars/line
.a8f1	95 00		sta $00,x	                sta 0,x
.a8f3	74 01		stz $01,x	                stz 1,x
.a8f5	20 38 9b	jsr $9b38	                jsr xt_rot
.a8f8	20 31 95	jsr $9531	                jsr xt_minus
.a8fb	20 cb 8e	jsr $8ecb	                jsr xt_blank
.a8fe	20 45 a6	jsr $a645	                jsr xt_update
.a901	60		rts		z_editor_o:     rts

;******  Return to file: platform/../taliforth.asm


;******  Processing file: platform/../assembler.asm

.a902					assembler:
.a902					xt_asm_adc_h:
.a902	a9 69		lda #$69	                lda #$69
.a904	4c 5d ac	jmp $ac5d	                jmp asm_common
.a907					z_asm_adc_h:
.a907					xt_asm_adc_x:
.a907	a9 7d		lda #$7d	                lda #$7D
.a909	4c 5d ac	jmp $ac5d	                jmp asm_common
.a90c					z_asm_adc_x:
.a90c					xt_asm_adc_y:
.a90c	a9 79		lda #$79	                lda #$79
.a90e	4c 5d ac	jmp $ac5d	                jmp asm_common
.a911					z_asm_adc_y:
.a911					xt_asm_adc_z:
.a911	a9 65		lda #$65	                lda #$65
.a913	4c 5d ac	jmp $ac5d	                jmp asm_common
.a916					z_asm_adc_z:
.a916					xt_asm_adc_zi:
.a916	a9 72		lda #$72	                lda #$72
.a918	4c 5d ac	jmp $ac5d	                jmp asm_common
.a91b					z_asm_adc_zi:
.a91b					xt_asm_adc_ziy:
.a91b	a9 71		lda #$71	                lda #$71
.a91d	4c 5d ac	jmp $ac5d	                jmp asm_common
.a920					z_asm_adc_ziy:
.a920					xt_asm_adc_zx:
.a920	a9 75		lda #$75	                lda #$75
.a922	4c 5d ac	jmp $ac5d	                jmp asm_common
.a925					z_asm_adc_zx:
.a925					xt_asm_adc_zxi:
.a925	a9 61		lda #$61	                lda #$61
.a927	4c 5d ac	jmp $ac5d	                jmp asm_common
.a92a					z_asm_adc_zxi:
.a92a					xt_asm_and:
.a92a	a9 2d		lda #$2d	                lda #$2D
.a92c	4c 5d ac	jmp $ac5d	                jmp asm_common
.a92f					z_asm_and:
.a92f					xt_asm_and_h:
.a92f	a9 29		lda #$29	                lda #$29
.a931	4c 5d ac	jmp $ac5d	                jmp asm_common
.a934					z_asm_and_h:
.a934					xt_asm_and_x:
.a934	a9 3d		lda #$3d	                lda #$3D
.a936	4c 5d ac	jmp $ac5d	                jmp asm_common
.a939					z_asm_and_x:
.a939					xt_asm_and_y:
.a939	a9 39		lda #$39	                lda #$39
.a93b	4c 5d ac	jmp $ac5d	                jmp asm_common
.a93e					z_asm_and_y:
.a93e					xt_asm_and_z:
.a93e	a9 25		lda #$25	                lda #$25
.a940	4c 5d ac	jmp $ac5d	                jmp asm_common
.a943					z_asm_and_z:
.a943					xt_asm_and_zi:
.a943	a9 32		lda #$32	                lda #$32
.a945	4c 5d ac	jmp $ac5d	                jmp asm_common
.a948					z_asm_and_zi:
.a948					xt_asm_and_ziy:
.a948	a9 31		lda #$31	                lda #$31
.a94a	4c 5d ac	jmp $ac5d	                jmp asm_common
.a94d					z_asm_and_ziy:
.a94d					xt_asm_and_zx:
.a94d	a9 35		lda #$35	                lda #$35
.a94f	4c 5d ac	jmp $ac5d	                jmp asm_common
.a952					z_asm_and_zx:
.a952					xt_asm_and_zxi:
.a952	a9 21		lda #$21	                lda #$21
.a954	4c 5d ac	jmp $ac5d	                jmp asm_common
.a957					z_asm_and_zxi:
.a957					xt_asm_asl:
.a957	a9 0e		lda #$0e	                lda #$0E
.a959	4c 5d ac	jmp $ac5d	                jmp asm_common
.a95c					z_asm_asl:
.a95c					xt_asm_asl_a:
.a95c	a9 0a		lda #$0a	                lda #$0A
.a95e	4c 5d ac	jmp $ac5d	                jmp asm_common
.a961					z_asm_asl_a:
.a961					xt_asm_asl_x:
.a961	a9 1e		lda #$1e	                lda #$1E
.a963	4c 5d ac	jmp $ac5d	                jmp asm_common
.a966					z_asm_asl_x:
.a966					xt_asm_asl_z:
.a966	a9 06		lda #$06	                lda #$06
.a968	4c 5d ac	jmp $ac5d	                jmp asm_common
.a96b					z_asm_asl_z:
.a96b					xt_asm_asl_zx:
.a96b	a9 16		lda #$16	                lda #$16
.a96d	4c 5d ac	jmp $ac5d	                jmp asm_common
.a970					z_asm_asl_zx:
.a970					xt_asm_bcc:
.a970	a9 90		lda #$90	                lda #$90
.a972	4c 5d ac	jmp $ac5d	                jmp asm_common
.a975					z_asm_bcc:
.a975					xt_asm_bcs:
.a975	a9 b0		lda #$b0	                lda #$B0
.a977	a0 02		ldy #$02	                ldy #2
.a979	4c 5d ac	jmp $ac5d	                jmp asm_common
.a97c					z_asm_bcs:
.a97c					xt_asm_beq:
.a97c	a9 f0		lda #$f0	                lda #$F0
.a97e	4c 5d ac	jmp $ac5d	                jmp asm_common
.a981					z_asm_beq:
.a981					xt_asm_bit:
.a981	a9 2c		lda #$2c	                lda #$2C
.a983	4c 5d ac	jmp $ac5d	                jmp asm_common
.a986					z_asm_bit:
.a986					xt_asm_bit_h:
.a986	a9 89		lda #$89	                lda #$89
.a988	4c 5d ac	jmp $ac5d	                jmp asm_common
.a98b					z_asm_bit_h:
.a98b					xt_asm_bit_x:
.a98b	a9 3c		lda #$3c	                lda #$3C
.a98d	4c 5d ac	jmp $ac5d	                jmp asm_common
.a990					z_asm_bit_x:
.a990					xt_asm_bit_z:
.a990	a9 24		lda #$24	                lda #$24
.a992	4c 5d ac	jmp $ac5d	                jmp asm_common
.a995					z_asm_bit_z:
.a995					xt_asm_bit_zx:
.a995	a9 34		lda #$34	                lda #$34
.a997	4c 5d ac	jmp $ac5d	                jmp asm_common
.a99a					z_asm_bit_zx:
.a99a					xt_asm_bmi:
.a99a	a9 30		lda #$30	                lda #$30
.a99c	4c 5d ac	jmp $ac5d	                jmp asm_common
.a99f					z_asm_bmi:
.a99f					xt_asm_bne:
.a99f	a9 d0		lda #$d0	                lda #$D0
.a9a1	4c 5d ac	jmp $ac5d	                jmp asm_common
.a9a4					z_asm_bne:
.a9a4					xt_asm_bpl:
.a9a4	a9 10		lda #$10	                lda #$10
.a9a6	4c 5d ac	jmp $ac5d	                jmp asm_common
.a9a9					z_asm_bpl:
.a9a9					xt_asm_bra:
.a9a9	a9 80		lda #$80	                lda #$80
.a9ab	4c 5d ac	jmp $ac5d	                jmp asm_common
.a9ae					z_asm_bra:
.a9ae					xt_asm_brk:
.a9ae	a9 00		lda #$00	                lda #$00
.a9b0	4c 5d ac	jmp $ac5d	                jmp asm_common
.a9b3					z_asm_brk:
.a9b3					xt_asm_bvc:
.a9b3	a9 50		lda #$50	                lda #$50
.a9b5	4c 5d ac	jmp $ac5d	                jmp asm_common
.a9b8					z_asm_bvc:
.a9b8					xt_asm_bvs:
.a9b8	a9 70		lda #$70	                lda #$70
.a9ba	4c 5d ac	jmp $ac5d	                jmp asm_common
.a9bd					z_asm_bvs:
.a9bd					xt_asm_clc:
.a9bd	a9 18		lda #$18	                lda #$18
.a9bf	4c 5d ac	jmp $ac5d	                jmp asm_common
.a9c2					z_asm_clc:
.a9c2					xt_asm_cld:
.a9c2	a9 d8		lda #$d8	                lda #$D8
.a9c4	4c 5d ac	jmp $ac5d	                jmp asm_common
.a9c7					z_asm_cld:
.a9c7					xt_asm_cli:
.a9c7	a9 58		lda #$58	                lda #$58
.a9c9	4c 5d ac	jmp $ac5d	                jmp asm_common
.a9cc					z_asm_cli:
.a9cc					xt_asm_clv:
.a9cc	a9 b8		lda #$b8	                lda #$B8
.a9ce	4c 5d ac	jmp $ac5d	                jmp asm_common
.a9d1					z_asm_clv:
.a9d1					xt_asm_cmp:
.a9d1	a9 cd		lda #$cd	                lda #$CD
.a9d3	4c 5d ac	jmp $ac5d	                jmp asm_common
.a9d6					z_asm_cmp:
.a9d6					xt_asm_cmp_h:
.a9d6	a9 c9		lda #$c9	                lda #$C9
.a9d8	4c 5d ac	jmp $ac5d	                jmp asm_common
.a9db					z_asm_cmp_h:
.a9db					xt_asm_cmp_x:
.a9db	a9 dd		lda #$dd	                lda #$DD
.a9dd	4c 5d ac	jmp $ac5d	                jmp asm_common
.a9e0					z_asm_cmp_x:
.a9e0					xt_asm_cmp_y:
.a9e0	a9 d9		lda #$d9	                lda #$D9
.a9e2	4c 5d ac	jmp $ac5d	                jmp asm_common
.a9e5					z_asm_cmp_y:
.a9e5					xt_asm_cmp_z:
.a9e5	a9 c5		lda #$c5	                lda #$C5
.a9e7	4c 5d ac	jmp $ac5d	                jmp asm_common
.a9ea					z_asm_cmp_z:
.a9ea					xt_asm_cmp_zi:
.a9ea	a9 d2		lda #$d2	                lda #$D2
.a9ec	4c 5d ac	jmp $ac5d	                jmp asm_common
.a9ef					z_asm_cmp_zi:
.a9ef					xt_asm_cmp_ziy:
.a9ef	a9 d1		lda #$d1	                lda #$D1
.a9f1	4c 5d ac	jmp $ac5d	                jmp asm_common
.a9f4					z_asm_cmp_ziy:
.a9f4					xt_asm_cmp_zx:
.a9f4	a9 d5		lda #$d5	                lda #$D5
.a9f6	4c 5d ac	jmp $ac5d	                jmp asm_common
.a9f9					z_asm_cmp_zx:
.a9f9					xt_asm_cmp_zxi:
.a9f9	a9 c1		lda #$c1	                lda #$C1
.a9fb	4c 5d ac	jmp $ac5d	                jmp asm_common
.a9fe					z_asm_cmp_zxi:
.a9fe					xt_asm_cpx:
.a9fe	a9 ec		lda #$ec	                lda #$EC
.aa00	4c 5d ac	jmp $ac5d	                jmp asm_common
.aa03					z_asm_cpx:
.aa03					xt_asm_cpx_h:
.aa03	a9 e0		lda #$e0	                lda #$E0
.aa05	4c 5d ac	jmp $ac5d	                jmp asm_common
.aa08					z_asm_cpx_h:
.aa08					xt_asm_cpx_z:
.aa08	a9 e4		lda #$e4	                lda #$E4
.aa0a	4c 5d ac	jmp $ac5d	                jmp asm_common
.aa0d					z_asm_cpx_z:
.aa0d					xt_asm_cpy:
.aa0d	a9 cc		lda #$cc	                lda #$CC
.aa0f	a0 03		ldy #$03	                ldy #3
.aa11	4c 5d ac	jmp $ac5d	                jmp asm_common
.aa14					z_asm_cpy:
.aa14					xt_asm_cpy_h:
.aa14	a9 c0		lda #$c0	                lda #$C0
.aa16	4c 5d ac	jmp $ac5d	                jmp asm_common
.aa19					z_asm_cpy_h:
.aa19					xt_asm_cpy_z:
.aa19	a9 c4		lda #$c4	                lda #$C4
.aa1b	4c 5d ac	jmp $ac5d	                jmp asm_common
.aa1e					z_asm_cpy_z:
.aa1e					xt_asm_dec:
.aa1e	a9 ce		lda #$ce	                lda #$CE
.aa20	4c 5d ac	jmp $ac5d	                jmp asm_common
.aa23					z_asm_dec:
.aa23					xt_asm_dec_a:
.aa23	a9 3a		lda #$3a	                lda #$3A
.aa25	4c 5d ac	jmp $ac5d	                jmp asm_common
.aa28					z_asm_dec_a:
.aa28					xt_asm_dec_x:
.aa28	a9 de		lda #$de	                lda #$DE
.aa2a	4c 5d ac	jmp $ac5d	                jmp asm_common
.aa2d					z_asm_dec_x:
.aa2d					xt_asm_dec_z:
.aa2d	a9 c6		lda #$c6	                lda #$C6
.aa2f	4c 5d ac	jmp $ac5d	                jmp asm_common
.aa32					z_asm_dec_z:
.aa32					xt_asm_dec_zx:
.aa32	a9 d6		lda #$d6	                lda #$D6
.aa34	4c 5d ac	jmp $ac5d	                jmp asm_common
.aa37					z_asm_dec_zx:
.aa37					xt_asm_dex:
.aa37	a9 ca		lda #$ca	                lda #$CA
.aa39	4c 5d ac	jmp $ac5d	                jmp asm_common
.aa3c					z_asm_dex:
.aa3c					xt_asm_dey:
.aa3c	a9 88		lda #$88	                lda #$88
.aa3e	4c 5d ac	jmp $ac5d	                jmp asm_common
.aa41					z_asm_dey:
.aa41					xt_asm_eor:
.aa41	a9 4d		lda #$4d	                lda #$4D
.aa43	4c 5d ac	jmp $ac5d	                jmp asm_common
.aa46					z_asm_eor:
.aa46					xt_asm_eor_h:
.aa46	a9 49		lda #$49	                lda #$49
.aa48	4c 5d ac	jmp $ac5d	                jmp asm_common
.aa4b					z_asm_eor_h:
.aa4b					xt_asm_eor_x:
.aa4b	a9 5d		lda #$5d	                lda #$5D
.aa4d	4c 5d ac	jmp $ac5d	                jmp asm_common
.aa50					z_asm_eor_x:
.aa50					xt_asm_eor_y:
.aa50	a9 59		lda #$59	                lda #$59
.aa52	4c 5d ac	jmp $ac5d	                jmp asm_common
.aa55					z_asm_eor_y:
.aa55					xt_asm_eor_z:
.aa55	a9 45		lda #$45	                lda #$45
.aa57	4c 5d ac	jmp $ac5d	                jmp asm_common
.aa5a					z_asm_eor_z:
.aa5a					xt_asm_eor_zi:
.aa5a	a9 52		lda #$52	                lda #$52
.aa5c	4c 5d ac	jmp $ac5d	                jmp asm_common
.aa5f					z_asm_eor_zi:
.aa5f					xt_asm_eor_ziy:
.aa5f	a9 51		lda #$51	                lda #$51
.aa61	4c 5d ac	jmp $ac5d	                jmp asm_common
.aa64					z_asm_eor_ziy:
.aa64					xt_asm_eor_zx:
.aa64	a9 55		lda #$55	                lda #$55
.aa66	4c 5d ac	jmp $ac5d	                jmp asm_common
.aa69					z_asm_eor_zx:
.aa69					xt_asm_eor_zxi:
.aa69	a9 41		lda #$41	                lda #$41
.aa6b	4c 5d ac	jmp $ac5d	                jmp asm_common
.aa6e					z_asm_eor_zxi:
.aa6e					xt_asm_inc:
.aa6e	a9 ee		lda #$ee	                lda #$EE
.aa70	4c 5d ac	jmp $ac5d	                jmp asm_common
.aa73					z_asm_inc:
.aa73					xt_asm_inc_a:
.aa73	a9 1a		lda #$1a	                lda #$1A
.aa75	4c 5d ac	jmp $ac5d	                jmp asm_common
.aa78					z_asm_inc_a:
.aa78					xt_asm_inc_x:
.aa78	a9 fe		lda #$fe	                lda #$FE
.aa7a	4c 5d ac	jmp $ac5d	                jmp asm_common
.aa7d					z_asm_inc_x:
.aa7d					xt_asm_inc_z:
.aa7d	a9 e6		lda #$e6	                lda #$E6
.aa7f	4c 5d ac	jmp $ac5d	                jmp asm_common
.aa82					z_asm_inc_z:
.aa82					xt_asm_inc_zx:
.aa82	a9 f6		lda #$f6	                lda #$F6
.aa84	4c 5d ac	jmp $ac5d	                jmp asm_common
.aa87					z_asm_inc_zx:
.aa87					xt_asm_inx:
.aa87	a9 e8		lda #$e8	                lda #$E8
.aa89	4c 5d ac	jmp $ac5d	                jmp asm_common
.aa8c					z_asm_inx:
.aa8c					xt_asm_iny:
.aa8c	a9 c8		lda #$c8	                lda #$C8
.aa8e	4c 5d ac	jmp $ac5d	                jmp asm_common
.aa91					z_asm_iny:
.aa91					xt_asm_jmp:
.aa91	a9 4c		lda #$4c	                lda #$4C
.aa93	4c 5d ac	jmp $ac5d	                jmp asm_common
.aa96					z_asm_jmp:
.aa96					xt_asm_jmp_i:
.aa96	a9 6c		lda #$6c	                lda #$6C
.aa98	4c 5d ac	jmp $ac5d	                jmp asm_common
.aa9b					z_asm_jmp_i:
.aa9b					xt_asm_jmp_xi:
.aa9b	a9 7c		lda #$7c	                lda #$7C
.aa9d	4c 5d ac	jmp $ac5d	                jmp asm_common
.aaa0					z_asm_jmp_xi:
.aaa0					xt_asm_jsr:
.aaa0	a9 20		lda #$20	                lda #$20
.aaa2	4c 5d ac	jmp $ac5d	                jmp asm_common
.aaa5					z_asm_jsr:
.aaa5					xt_asm_lda:
.aaa5	a9 ad		lda #$ad	                lda #$AD
.aaa7	4c 5d ac	jmp $ac5d	                jmp asm_common
.aaaa					z_asm_lda:
.aaaa					xt_asm_lda_h:
.aaaa	a9 a9		lda #$a9	                lda #$A9
.aaac	4c 5d ac	jmp $ac5d	                jmp asm_common
.aaaf					z_asm_lda_h:
.aaaf					xt_asm_lda_x:
.aaaf	a9 bd		lda #$bd	                lda #$BD
.aab1	4c 5d ac	jmp $ac5d	                jmp asm_common
.aab4					z_asm_lda_x:
.aab4					xt_asm_lda_y:
.aab4	a9 b9		lda #$b9	                lda #$B9
.aab6	4c 5d ac	jmp $ac5d	                jmp asm_common
.aab9					z_asm_lda_y:
.aab9					xt_asm_lda_z:
.aab9	a9 a5		lda #$a5	                lda #$A5
.aabb	4c 5d ac	jmp $ac5d	                jmp asm_common
.aabe					z_asm_lda_z:
.aabe					xt_asm_lda_zi:
.aabe	a9 b2		lda #$b2	                lda #$B2
.aac0	4c 5d ac	jmp $ac5d	                jmp asm_common
.aac3					z_asm_lda_zi:
.aac3					xt_asm_lda_ziy:
.aac3	a9 b1		lda #$b1	                lda #$B1
.aac5	4c 5d ac	jmp $ac5d	                jmp asm_common
.aac8					z_asm_lda_ziy:
.aac8					xt_asm_lda_zx:
.aac8	a9 b5		lda #$b5	                lda #$B5
.aaca	4c 5d ac	jmp $ac5d	                jmp asm_common
.aacd					z_asm_lda_zx:
.aacd					xt_asm_lda_zxi:
.aacd	a9 a1		lda #$a1	                lda #$A1
.aacf	4c 5d ac	jmp $ac5d	                jmp asm_common
.aad2					z_asm_lda_zxi:
.aad2					xt_asm_ldx:
.aad2	a9 ae		lda #$ae	                lda #$AE
.aad4	4c 5d ac	jmp $ac5d	                jmp asm_common
.aad7					z_asm_ldx:
.aad7					xt_asm_ldx_h:
.aad7	a9 a2		lda #$a2	                lda #$A2
.aad9	4c 5d ac	jmp $ac5d	                jmp asm_common
.aadc					z_asm_ldx_h:
.aadc					xt_asm_ldx_y:
.aadc	a9 be		lda #$be	                lda #$BE
.aade	4c 5d ac	jmp $ac5d	                jmp asm_common
.aae1					z_asm_ldx_y:
.aae1					xt_asm_ldx_z:
.aae1	a9 a6		lda #$a6	                lda #$A6
.aae3	4c 5d ac	jmp $ac5d	                jmp asm_common
.aae6					z_asm_ldx_z:
.aae6					xt_asm_ldx_zy:
.aae6	a9 b6		lda #$b6	                lda #$B6
.aae8	4c 5d ac	jmp $ac5d	                jmp asm_common
.aaeb					z_asm_ldx_zy:
.aaeb					xt_asm_ldy:
.aaeb	a9 ac		lda #$ac	                lda #$AC
.aaed	4c 5d ac	jmp $ac5d	                jmp asm_common
.aaf0					z_asm_ldy:
.aaf0					xt_asm_ldy_h:
.aaf0	a9 a0		lda #$a0	                lda #$A0
.aaf2	4c 5d ac	jmp $ac5d	                jmp asm_common
.aaf5					z_asm_ldy_h:
.aaf5					xt_asm_ldy_x:
.aaf5	a9 bc		lda #$bc	                lda #$BC
.aaf7	4c 5d ac	jmp $ac5d	                jmp asm_common
.aafa					z_asm_ldy_x:
.aafa					xt_asm_ldy_z:
.aafa	a9 a4		lda #$a4	                lda #$A4
.aafc	4c 5d ac	jmp $ac5d	                jmp asm_common
.aaff					z_asm_ldy_z:
.aaff					xt_asm_ldy_zx:
.aaff	a9 b4		lda #$b4	                lda #$B4
.ab01	4c 5d ac	jmp $ac5d	                jmp asm_common
.ab04					z_asm_ldy_zx:
.ab04					xt_asm_lsr:
.ab04	a9 4e		lda #$4e	                lda #$4E
.ab06	4c 5d ac	jmp $ac5d	                jmp asm_common
.ab09					z_asm_lsr:
.ab09					xt_asm_lsr_a:
.ab09	a9 4a		lda #$4a	                lda #$4A
.ab0b	4c 5d ac	jmp $ac5d	                jmp asm_common
.ab0e					z_asm_lsr_a:
.ab0e					xt_asm_lsr_x:
.ab0e	a9 5e		lda #$5e	                lda #$5E
.ab10	4c 5d ac	jmp $ac5d	                jmp asm_common
.ab13					z_asm_lsr_x:
.ab13					xt_asm_lsr_z:
.ab13	a9 46		lda #$46	                lda #$46
.ab15	4c 5d ac	jmp $ac5d	                jmp asm_common
.ab18					z_asm_lsr_z:
.ab18					xt_asm_lsr_zx:
.ab18	a9 56		lda #$56	                lda #$56
.ab1a	4c 5d ac	jmp $ac5d	                jmp asm_common
.ab1d					z_asm_lsr_zx:
.ab1d					xt_asm_nop:
.ab1d	a9 ea		lda #$ea	                lda #$EA
.ab1f	4c 5d ac	jmp $ac5d	                jmp asm_common
.ab22					z_asm_nop:
.ab22					xt_asm_ora:
.ab22	a9 0d		lda #$0d	                lda #$0D
.ab24	4c 5d ac	jmp $ac5d	                jmp asm_common
.ab27					z_asm_ora:
.ab27					xt_asm_ora_h:
.ab27	a9 09		lda #$09	                lda #$09
.ab29	4c 5d ac	jmp $ac5d	                jmp asm_common
.ab2c					z_asm_ora_h:
.ab2c					xt_asm_ora_x:
.ab2c	a9 1d		lda #$1d	                lda #$1D
.ab2e	4c 5d ac	jmp $ac5d	                jmp asm_common
.ab31					z_asm_ora_x:
.ab31					xt_asm_ora_y:
.ab31	a9 19		lda #$19	                lda #$19
.ab33	4c 5d ac	jmp $ac5d	                jmp asm_common
.ab36					z_asm_ora_y:
.ab36					xt_asm_ora_z:
.ab36	a9 05		lda #$05	                lda #$05
.ab38	4c 5d ac	jmp $ac5d	                jmp asm_common
.ab3b					z_asm_ora_z:
.ab3b					xt_asm_ora_zi:
.ab3b	a9 12		lda #$12	                lda #$12
.ab3d	a0 02		ldy #$02	                ldy #2
.ab3f	4c 5d ac	jmp $ac5d	                jmp asm_common
.ab42					z_asm_ora_zi:
.ab42					xt_asm_ora_ziy:
.ab42	a9 11		lda #$11	                lda #$11
.ab44	4c 5d ac	jmp $ac5d	                jmp asm_common
.ab47					z_asm_ora_ziy:
.ab47					xt_asm_ora_zx:
.ab47	a9 15		lda #$15	                lda #$15
.ab49	4c 5d ac	jmp $ac5d	                jmp asm_common
.ab4c					z_asm_ora_zx:
.ab4c					xt_asm_ora_zxi:
.ab4c	a9 01		lda #$01	                lda #$01
.ab4e	4c 5d ac	jmp $ac5d	                jmp asm_common
.ab51					z_asm_ora_zxi:
.ab51					xt_asm_pha:
.ab51	a9 48		lda #$48	                lda #$48
.ab53	4c 5d ac	jmp $ac5d	                jmp asm_common
.ab56					z_asm_pha:
.ab56					xt_asm_php:
.ab56	a9 08		lda #$08	                lda #$08
.ab58	4c 5d ac	jmp $ac5d	                jmp asm_common
.ab5b					z_asm_php:
.ab5b					xt_asm_phx:
.ab5b	a9 da		lda #$da	                lda #$DA
.ab5d	4c 5d ac	jmp $ac5d	                jmp asm_common
.ab60					z_asm_phx:
.ab60					xt_asm_phy:
.ab60	a9 5a		lda #$5a	                lda #$5A
.ab62	4c 5d ac	jmp $ac5d	                jmp asm_common
.ab65					z_asm_phy:
.ab65					xt_asm_pla:
.ab65	a9 68		lda #$68	                lda #$68
.ab67	4c 5d ac	jmp $ac5d	                jmp asm_common
.ab6a					z_asm_pla:
.ab6a					xt_asm_plp:
.ab6a	a9 28		lda #$28	                lda #$28
.ab6c	4c 5d ac	jmp $ac5d	                jmp asm_common
.ab6f					z_asm_plp:
.ab6f					xt_asm_plx:
.ab6f	a9 fa		lda #$fa	                lda #$FA
.ab71	4c 5d ac	jmp $ac5d	                jmp asm_common
.ab74					z_asm_plx:
.ab74					xt_asm_ply:
.ab74	a9 7a		lda #$7a	                lda #$7A
.ab76	4c 5d ac	jmp $ac5d	                jmp asm_common
.ab79					z_asm_ply:
.ab79					xt_asm_rol:
.ab79	a9 2e		lda #$2e	                lda #$2E
.ab7b	4c 5d ac	jmp $ac5d	                jmp asm_common
.ab7e					z_asm_rol:
.ab7e					xt_asm_rol_a:
.ab7e	a9 2a		lda #$2a	                lda #$2A
.ab80	4c 5d ac	jmp $ac5d	                jmp asm_common
.ab83					z_asm_rol_a:
.ab83					xt_asm_rol_x:
.ab83	a9 3e		lda #$3e	                lda #$3E
.ab85	4c 5d ac	jmp $ac5d	                jmp asm_common
.ab88					z_asm_rol_x:
.ab88					xt_asm_rol_z:
.ab88	a9 26		lda #$26	                lda #$26
.ab8a	4c 5d ac	jmp $ac5d	                jmp asm_common
.ab8d					z_asm_rol_z:
.ab8d					xt_asm_rol_zx:
.ab8d	a9 36		lda #$36	                lda #$36
.ab8f	4c 5d ac	jmp $ac5d	                jmp asm_common
.ab92					z_asm_rol_zx:
.ab92					xt_asm_ror:
.ab92	a9 6e		lda #$6e	                lda #$6E
.ab94	4c 5d ac	jmp $ac5d	                jmp asm_common
.ab97					z_asm_ror:
.ab97					xt_asm_ror_a:
.ab97	a9 6a		lda #$6a	                lda #$6A
.ab99	4c 5d ac	jmp $ac5d	                jmp asm_common
.ab9c					z_asm_ror_a:
.ab9c					xt_asm_ror_x:
.ab9c	a9 7e		lda #$7e	                lda #$7E
.ab9e	4c 5d ac	jmp $ac5d	                jmp asm_common
.aba1					z_asm_ror_x:
.aba1					xt_asm_ror_z:
.aba1	a9 66		lda #$66	                lda #$66
.aba3	4c 5d ac	jmp $ac5d	                jmp asm_common
.aba6					z_asm_ror_z:
.aba6					xt_asm_ror_zx:
.aba6	a9 76		lda #$76	                lda #$76
.aba8	4c 5d ac	jmp $ac5d	                jmp asm_common
.abab					z_asm_ror_zx:
.abab					xt_asm_rti:
.abab	a9 40		lda #$40	                lda #$40
.abad	4c 5d ac	jmp $ac5d	                jmp asm_common
.abb0					z_asm_rti:
.abb0					xt_asm_rts:
.abb0	a9 60		lda #$60	                lda #$60
.abb2	4c 5d ac	jmp $ac5d	                jmp asm_common
.abb5					z_asm_rts:
.abb5					xt_asm_sbc:
.abb5	a9 ed		lda #$ed	                lda #$ED
.abb7	4c 5d ac	jmp $ac5d	                jmp asm_common
.abba					z_asm_sbc:
.abba					xt_asm_sbc_h:
.abba	a9 e9		lda #$e9	                lda #$E9
.abbc	4c 5d ac	jmp $ac5d	                jmp asm_common
.abbf					z_asm_sbc_h:
.abbf					xt_asm_sbc_x:
.abbf	a9 fd		lda #$fd	                lda #$FD
.abc1	4c 5d ac	jmp $ac5d	                jmp asm_common
.abc4					z_asm_sbc_x:
.abc4					xt_asm_sbc_y:
.abc4	a9 f9		lda #$f9	                lda #$F9
.abc6	4c 5d ac	jmp $ac5d	                jmp asm_common
.abc9					z_asm_sbc_y:
.abc9					xt_asm_sbc_z:
.abc9	a9 e5		lda #$e5	                lda #$E5
.abcb	4c 5d ac	jmp $ac5d	                jmp asm_common
.abce					z_asm_sbc_z:
.abce					xt_asm_sbc_zi:
.abce	a9 f2		lda #$f2	                lda #$F2
.abd0	4c 5d ac	jmp $ac5d	                jmp asm_common
.abd3					z_asm_sbc_zi:
.abd3					xt_asm_sbc_ziy:
.abd3	a9 f1		lda #$f1	                lda #$F1
.abd5	4c 5d ac	jmp $ac5d	                jmp asm_common
.abd8					z_asm_sbc_ziy:
.abd8					xt_asm_sbc_zx:
.abd8	a9 f5		lda #$f5	                lda #$F5
.abda	4c 5d ac	jmp $ac5d	                jmp asm_common
.abdd					z_asm_sbc_zx:
.abdd					xt_asm_sbc_zxi:
.abdd	a9 e1		lda #$e1	                lda #$E1
.abdf	80 7c		bra $ac5d	                bra asm_common  ; <-- limit for BRA instead of JMP
.abe1					z_asm_sbc_zxi:
.abe1					xt_asm_sec:
.abe1	a9 38		lda #$38	                lda #$38
.abe3	80 78		bra $ac5d	                bra asm_common
.abe5					z_asm_sec:
.abe5					xt_asm_sed:
.abe5	a9 f8		lda #$f8	                lda #$F8
.abe7	80 74		bra $ac5d	                bra asm_common
.abe9					z_asm_sed:
.abe9					xt_asm_sei:
.abe9	a9 78		lda #$78	                lda #$78
.abeb	80 70		bra $ac5d	                bra asm_common
.abed					z_asm_sei:
.abed					xt_asm_sta:
.abed	a9 8d		lda #$8d	                lda #$8D
.abef	80 6c		bra $ac5d	                bra asm_common
.abf1					z_asm_sta:
.abf1					xt_asm_sta_x:
.abf1	a9 9d		lda #$9d	                lda #$9D
.abf3	80 68		bra $ac5d	                bra asm_common
.abf5					z_asm_sta_x:
.abf5					xt_asm_sta_y:
.abf5	a9 99		lda #$99	                lda #$99
.abf7	80 64		bra $ac5d	                bra asm_common
.abf9					z_asm_sta_y:
.abf9					xt_asm_sta_z:
.abf9	a9 85		lda #$85	                lda #$85
.abfb	80 60		bra $ac5d	                bra asm_common
.abfd					z_asm_sta_z:
.abfd					xt_asm_sta_zi:
.abfd	a9 92		lda #$92	                lda #$92
.abff	80 5c		bra $ac5d	                bra asm_common
.ac01					z_asm_sta_zi:
.ac01					xt_asm_sta_ziy:
.ac01	a9 91		lda #$91	                lda #$91
.ac03	80 58		bra $ac5d	                bra asm_common
.ac05					z_asm_sta_ziy:
.ac05					xt_asm_sta_zx:
.ac05	a9 95		lda #$95	                lda #$95
.ac07	80 54		bra $ac5d	                bra asm_common
.ac09					z_asm_sta_zx:
.ac09					xt_asm_sta_zxi:
.ac09	a9 81		lda #$81	                lda #$81
.ac0b	80 50		bra $ac5d	                bra asm_common
.ac0d					z_asm_sta_zxi:
.ac0d					xt_asm_stx:
.ac0d	a9 8e		lda #$8e	                lda #$8E
.ac0f	80 4c		bra $ac5d	                bra asm_common
.ac11					z_asm_stx:
.ac11					xt_asm_stx_z:
.ac11	a9 86		lda #$86	                lda #$86
.ac13	80 48		bra $ac5d	                bra asm_common
.ac15					z_asm_stx_z:
.ac15					xt_asm_stx_zy:
.ac15	a9 96		lda #$96	                lda #$96
.ac17	80 44		bra $ac5d	                bra asm_common
.ac19					z_asm_stx_zy:
.ac19					xt_asm_sty:
.ac19	a9 8c		lda #$8c	                lda #$8C
.ac1b	80 40		bra $ac5d	                bra asm_common
.ac1d					z_asm_sty:
.ac1d					xt_asm_sty_z:
.ac1d	a9 84		lda #$84	                lda #$84
.ac1f	80 3c		bra $ac5d	                bra asm_common
.ac21					z_asm_sty_z:
.ac21					xt_asm_sty_zx:
.ac21	a9 94		lda #$94	                lda #$94
.ac23	80 38		bra $ac5d	                bra asm_common
.ac25					z_asm_sty_zx:
.ac25					xt_asm_stz:
.ac25	a9 9c		lda #$9c	                lda #$9C
.ac27	80 34		bra $ac5d	                bra asm_common
.ac29					z_asm_stz:
.ac29					xt_asm_stz_x:
.ac29	a9 9e		lda #$9e	                lda #$9E
.ac2b	80 30		bra $ac5d	                bra asm_common
.ac2d					z_asm_stz_x:
.ac2d					xt_asm_stz_z:
.ac2d	a9 64		lda #$64	                lda #$64
.ac2f	80 2c		bra $ac5d	                bra asm_common
.ac31					z_asm_stz_z:
.ac31					xt_asm_stz_zx:
.ac31	a9 74		lda #$74	                lda #$74
.ac33	80 28		bra $ac5d	                bra asm_common
.ac35					z_asm_stz_zx:
.ac35					xt_asm_tax:
.ac35	a9 aa		lda #$aa	                lda #$AA
.ac37	80 24		bra $ac5d	                bra asm_common
.ac39					z_asm_tax:
.ac39					xt_asm_tay:
.ac39	a9 a8		lda #$a8	                lda #$A8
.ac3b	80 20		bra $ac5d	                bra asm_common
.ac3d					z_asm_tay:
.ac3d					xt_asm_trb:
.ac3d	a9 1c		lda #$1c	                lda #$1C
.ac3f	80 1c		bra $ac5d	                bra asm_common
.ac41					z_asm_trb:
.ac41					xt_asm_trb_z:
.ac41	a9 14		lda #$14	                lda #$14
.ac43	80 18		bra $ac5d	                bra asm_common
.ac45					z_asm_trb_z:
.ac45					xt_asm_tsb:
.ac45	a9 0c		lda #$0c	                lda #$0C
.ac47	80 14		bra $ac5d	                bra asm_common
.ac49					z_asm_tsb:
.ac49					xt_asm_tsb_z:
.ac49	a9 04		lda #$04	                lda #$04
.ac4b	80 10		bra $ac5d	                bra asm_common
.ac4d					z_asm_tsb_z:
.ac4d					xt_asm_tsx:
.ac4d	a9 ba		lda #$ba	                lda #$BA
.ac4f	80 0c		bra $ac5d	                bra asm_common
.ac51					z_asm_tsx:
.ac51					xt_asm_txa:
.ac51	a9 8a		lda #$8a	                lda #$8A
.ac53	80 08		bra $ac5d	                bra asm_common
.ac55					z_asm_txa:
.ac55					xt_asm_txs:
.ac55	a9 9a		lda #$9a	                lda #$9A
.ac57	80 04		bra $ac5d	                bra asm_common
.ac59					z_asm_txs:
.ac59					xt_asm_tya:
.ac59	a9 98		lda #$98	                lda #$98
.ac5b	80 00		bra $ac5d	                bra asm_common
.ac5d					z_asm_tya:
.ac5d					asm_common:
.ac5d	a8		tay		                tay
.ac5e	20 c3 d6	jsr $d6c3	                jsr cmpl_a
.ac61	a9 c9		lda #$c9	                lda #<oc_index_table
.ac63	85 26		sta $26		                sta tmp2
.ac65	a9 ae		lda #$ae	                lda #>oc_index_table
.ac67	85 27		sta $27		                sta tmp2+1
.ac69	98		tya		                tya             ; retrieve opcode
.ac6a	0a		asl a		                asl             ; times two for offset
.ac6b	90 02		bcc $ac6f	                bcc +
.ac6d	e6 27		inc $27		                inc tmp2+1
.ac6f					+
.ac6f	a8		tay		                tay             ; use Y as the index
.ac70	b1 26		lda ($26),y	                lda (tmp2),y    ; LSB
.ac72	85 28		sta $28		                sta tmp3
.ac74	c8		iny		                iny
.ac75	b1 26		lda ($26),y	                lda (tmp2),y    ; MSB
.ac77	85 29		sta $29		                sta tmp3+1
.ac79	b2 28		lda ($28)	                lda (tmp3)      ; get "lengths byte"
.ac7b	2a		rol a		                rol
.ac7c	2a		rol a		                rol
.ac7d	2a		rol a		                rol             ; Three times because we go through Carry
.ac7e	29 03		and #$03	                and #%00000011
.ac80	a8		tay		                tay
.ac81	88		dey		                dey
.ac82	f0 12		beq $ac96	                beq _done
.ac84	20 10 d8	jsr $d810	                jsr underflow_1
.ac87	b5 00		lda $00,x	                lda 0,x
.ac89	20 c3 d6	jsr $d6c3	                jsr cmpl_a      ; does not use Y
.ac8c	88		dey		                dey
.ac8d	f0 05		beq $ac94	                beq _done_drop
.ac8f	b5 01		lda $01,x	                lda 1,x
.ac91	20 c3 d6	jsr $d6c3	                jsr cmpl_a      ; Fall through to _done_drop
.ac94					_done_drop:
.ac94	e8		inx		                inx
.ac95	e8		inx		                inx             ; Fall through to _done
.ac96					_done:
.ac96	60		rts		                rts             ; Returns to original caller
.ac97					xt_asm_push_a:
.ac97	a0 00		ldy #$00	                ldy #0
.ac99					_loop:
.ac99	b9 a7 ac	lda $aca7,y	                lda asm_push_a_data,y
.ac9c	c9 ff		cmp #$ff	                cmp #$FF
.ac9e	f0 06		beq $aca6	                beq _done
.aca0	20 c3 d6	jsr $d6c3	                jsr cmpl_a      ; does not change Y
.aca3	c8		iny		                iny
.aca4	80 f3		bra $ac99	                bra _loop
.aca6					_done:
.aca6					z_asm_push_a:
.aca6	60		rts		                rts
.aca7					asm_push_a_data:
>aca7	ca ca 95 00 74 01		        .byte $CA, $CA, $95, 00, $74, $01
>acad	ff				        .byte $FF               ; terminator
.acae					xt_asm_back_jump:
.acae					z_asm_back_jump:
.acae	60		rts		                rts
.acaf					xt_asm_back_branch:
.acaf	20 53 91	jsr $9153	                jsr xt_here             ; ( addr-l addr-h )
.acb2	20 31 95	jsr $9531	                jsr xt_minus            ; ( offset )
.acb5	3a		dec a		                dea
.acb6	3a		dec a		                dea
.acb7					z_asm_back_branch:
.acb7	60		rts		                rts
.acb8					assembler_end:

;******  Return to file: platform/../taliforth.asm


;******  Processing file: platform/../disassembler.asm

.acb8					disassembler:
.acb8	20 44 89	jsr $8944	                jsr xt_cr       ; ( addr u )
.acbb					_byte_loop:
.acbb	20 74 98	jsr $9874	                jsr xt_over     ; ( addr u addr )
.acbe	20 0f a5	jsr $a50f	                jsr xt_u_dot    ; ( addr u )
.acc1	20 ff a0	jsr $a0ff	                jsr xt_space
.acc4	a9 c9		lda #$c9	                lda #<oc_index_table
.acc6	85 26		sta $26		                sta tmp2
.acc8	a9 ae		lda #$ae	                lda #>oc_index_table
.acca	85 27		sta $27		                sta tmp2+1
.accc	a1 02		lda ($02,x)	                lda (2,x)       ; get opcode that addr points to
.acce	85 36		sta $36		                sta scratch     ; Save opcode
.acd0	0a		asl a		                asl             ; multiply by two for offset
.acd1	90 02		bcc $acd5	                bcc +
.acd3	e6 27		inc $27		                inc tmp2+1      ; we're on second page
.acd5					+
.acd5	a8		tay		                tay             ; use Y as the index
.acd6	b1 26		lda ($26),y	                lda (tmp2),y    ; LSB
.acd8	85 28		sta $28		                sta tmp3
.acda	48		pha		                pha
.acdb	c8		iny		                iny
.acdc	b1 26		lda ($26),y	                lda (tmp2),y    ; MSB
.acde	85 29		sta $29		                sta tmp3+1
.ace0	48		pha		                pha
.ace1	b2 28		lda ($28)	                lda (tmp3)
.ace3	a8		tay		                tay                     ; save copy of lengths byte
.ace4	10 3c		bpl $ad22	                bpl _no_operand         ; bit 7 clear, single-byte instruction
.ace6	20 89 a7	jsr $a789	                jsr xt_zero             ; ( addr u 0 ) ZERO does not use Y
.ace9	f6 04		inc $04,x	                inc 4,x
.aceb	d0 02		bne $acef	                bne +
.aced	f6 05		inc $05,x	                inc 5,x                 ; ( addr+1 u 0 )
.acef					+
.acef	b5 02		lda $02,x	                lda 2,x
.acf1	d0 02		bne $acf5	                bne +
.acf3	d6 03		dec $03,x	                dec 3,x
.acf5					+
.acf5	d6 02		dec $02,x	                dec 2,x                 ; ( addr+1 u-1 0 )
.acf7	a1 04		lda ($04,x)	                lda (4,x)
.acf9	95 00		sta $00,x	                sta 0,x                 ; LSB of operand ( addr+1 u-1 LSB )
.acfb	85 37		sta $37		                sta scratch+1           ; Save a copy in the scratch buffer
.acfd	98		tya		                tya                     ; retrieve copy of lengths byte
.acfe	2a		rol a		                rol                     ; shift bit 6 to bit 7
.acff	10 14		bpl $ad15	                bpl _print_operand
.ad01	f6 04		inc $04,x	                inc 4,x
.ad03	d0 02		bne $ad07	                bne +
.ad05	f6 05		inc $05,x	                inc 5,x                 ; ( addr+2 u-1 LSB )
.ad07					+
.ad07	b5 02		lda $02,x	                lda 2,x
.ad09	d0 02		bne $ad0d	                bne +
.ad0b	d6 03		dec $03,x	                dec 3,x
.ad0d					+
.ad0d	d6 02		dec $02,x	                dec 2,x                 ; ( addr+2 u-2 LSB )
.ad0f	a1 04		lda ($04,x)	                lda (4,x)
.ad11	95 01		sta $01,x	                sta 1,x                 ; MSB of operand ( addr+2 u-2 opr )
.ad13	85 38		sta $38		                sta scratch+2           ; Save a copy in the scratch buffer
.ad15					_print_operand:
.ad15	ca		dex		                dex
.ad16	ca		dex		                dex
.ad17	a9 05		lda #$05	                lda #5
.ad19	95 00		sta $00,x	                sta 0,x
.ad1b	74 01		stz $01,x	                stz 1,x                 ; ( addr+n u-n opr 5 )
.ad1d	20 1b a5	jsr $a51b	                jsr xt_u_dot_r          ; U.R ( addr+n u-n )
.ad20	80 0b		bra $ad2d	                bra _print_mnemonic
.ad22					_no_operand:
.ad22	ca		dex		                dex
.ad23	ca		dex		                dex
.ad24	a9 05		lda #$05	                lda #5
.ad26	95 00		sta $00,x	                sta 0,x
.ad28	74 01		stz $01,x	                stz 1,x                 ; ( addr u 5 )
.ad2a	20 05 a1	jsr $a105	                jsr xt_spaces           ; ( addr u )
.ad2d					_print_mnemonic:
.ad2d	20 ff a0	jsr $a0ff	                jsr xt_space
.ad30	ca		dex		                dex
.ad31	ca		dex		                dex                     ; ( addr u ? )
.ad32	68		pla		                pla                     ; MSB
.ad33	95 01		sta $01,x	                sta 1,x                 ; ( addr u MSB )
.ad35	68		pla		                pla                     ; LSB
.ad36	95 00		sta $00,x	                sta 0,x                 ; ( addr u addr-o )
.ad38	20 30 89	jsr $8930	                jsr xt_count            ; ( addr u addr-o u-o )
.ad3b	74 01		stz $01,x	                stz 1,x                 ; paranoid
.ad3d	b5 00		lda $00,x	                lda 0,x
.ad3f	29 07		and #$07	                and #%00000111          ; ( addr u addr-o u-o )
.ad41	95 00		sta $00,x	                sta 0,x
.ad43	20 e4 a4	jsr $a4e4	                jsr xt_type             ; ( addr u )
.ad46	a5 36		lda $36		                lda scratch
.ad48	c9 20		cmp #$20	                cmp #$20
.ad4a	d0 59		bne $ada5	                bne _not_jsr
.ad4c	ca		dex		                dex
.ad4d	ca		dex		                dex
.ad4e	a9 05		lda #$05	                lda #5
.ad50	95 00		sta $00,x	                sta 0,x
.ad52	74 01		stz $01,x	                stz 1,x
.ad54	20 05 a1	jsr $a105	                jsr xt_spaces
.ad57	a9 79		lda #$79	                lda #<literal_runtime
.ad59	c5 37		cmp $37		                cmp scratch+1
.ad5b	d0 0c		bne $ad69	                bne _not_literal
.ad5d	a9 93		lda #$93	                lda #>literal_runtime
.ad5f	c5 38		cmp $38		                cmp scratch+2
.ad61	d0 06		bne $ad69	                bne _not_literal
.ad63	20 5b ae	jsr $ae5b	                jsr disasm_literal
.ad66	4c d2 ad	jmp $add2	                jmp _printing_done
.ad69					_not_literal:
.ad69	a9 8a		lda #$8a	                lda #<sliteral_runtime
.ad6b	c5 37		cmp $37		                cmp scratch+1
.ad6d	d0 0c		bne $ad7b	                bne _not_sliteral
.ad6f	a9 a0		lda #$a0	                lda #>sliteral_runtime
.ad71	c5 38		cmp $38		                cmp scratch+2
.ad73	d0 06		bne $ad7b	                bne _not_sliteral
.ad75	20 18 ae	jsr $ae18	                jsr disasm_sliteral
.ad78	4c d2 ad	jmp $add2	                jmp _printing_done
.ad7b					_not_sliteral:
.ad7b	a9 f5		lda #$f5	                lda #<zero_branch_runtime
.ad7d	c5 37		cmp $37		                cmp scratch+1
.ad7f	d0 0c		bne $ad8d	                bne _not_0branch
.ad81	a9 91		lda #$91	                lda #>zero_branch_runtime
.ad83	c5 38		cmp $38		                cmp scratch+2
.ad85	d0 06		bne $ad8d	                bne _not_0branch
.ad87	20 4f ae	jsr $ae4f	                jsr disasm_0branch
.ad8a	4c d2 ad	jmp $add2	                jmp _printing_done
.ad8d					_not_0branch
.ad8d	a9 bc		lda #$bc	                lda #<branch_runtime
.ad8f	c5 37		cmp $37		                cmp scratch+1
.ad91	d0 0c		bne $ad9f	                bne _not_branch
.ad93	a9 8d		lda #$8d	                lda #>branch_runtime
.ad95	c5 38		cmp $38		                cmp scratch+2
.ad97	d0 06		bne $ad9f	                bne _not_branch
.ad99	20 54 ae	jsr $ae54	                jsr disasm_branch
.ad9c	4c d2 ad	jmp $add2	                jmp _printing_done
.ad9f					_not_branch
.ad9f	20 79 ae	jsr $ae79	                jsr disasm_jsr
.ada2	4c d2 ad	jmp $add2	                jmp _printing_done
.ada5					_not_jsr:
.ada5	c9 4c		cmp #$4c	                cmp #$4C
.ada7	d0 29		bne $add2	                bne _printing_done
.ada9	a5 37		lda $37		                lda scratch+1   ; Copy the pointer.
.adab	85 39		sta $39		                sta scratch+3
.adad	a5 38		lda $38		                lda scratch+2
.adaf	85 3a		sta $3a		                sta scratch+4
.adb1	b2 39		lda ($39)	                lda (scratch+3)
.adb3	c9 20		cmp #$20	                cmp #$20 ; check for JSR
.adb5	d0 1b		bne $add2	                bne _printing_done
.adb7	e6 39		inc $39		                inc scratch+3
.adb9	d0 02		bne $adbd	                bne +
.adbb	e6 3a		inc $3a		                inc scratch+4
.adbd					+
.adbd	b2 39		lda ($39)	                lda (scratch+3)
.adbf	c9 8a		cmp #$8a	                cmp #<sliteral_runtime
.adc1	d0 0f		bne $add2	                bne _printing_done
.adc3	e6 39		inc $39		                inc scratch+3
.adc5	d0 02		bne $adc9	                bne +
.adc7	e6 3a		inc $3a		                inc scratch+4
.adc9					+
.adc9	b2 39		lda ($39)	                lda (scratch+3)
.adcb	c9 a0		cmp #$a0	                cmp #>sliteral_runtime
.adcd	d0 03		bne $add2	                bne _printing_done
.adcf	20 ee ad	jsr $adee	                jsr disasm_sliteral_jump
.add2					_printing_done:
.add2	20 44 89	jsr $8944	                jsr xt_cr
.add5	f6 02		inc $02,x	                inc 2,x
.add7	d0 02		bne $addb	                bne +
.add9	f6 03		inc $03,x	                inc 3,x                 ; ( addr+1 u )
.addb					+
.addb	20 f2 97	jsr $97f2	                jsr xt_one_minus        ; ( addr+1 u-1 )
.adde	b5 00		lda $00,x	                lda 0,x                 ; All done?
.ade0	15 01		ora $01,x	                ora 1,x
.ade2	f0 07		beq $adeb	                beq _done
.ade4	b5 01		lda $01,x	                lda 1,x                 ; Catch mid-instruction ranges
.ade6	30 03		bmi $adeb	                bmi _done
.ade8	4c bb ac	jmp $acbb	                jmp _byte_loop          ; out of range for BRA
.adeb					_done:
.adeb	4c 91 a3	jmp $a391	                jmp xt_two_drop         ; JSR/RTS
.adee					disasm_sliteral_jump:
.adee	20 8f a1	jsr $a18f	                jsr xt_swap
.adf1	ca		dex		                dex
.adf2	ca		dex		                dex
.adf3	a5 37		lda $37		                lda scratch+1
.adf5	95 00		sta $00,x	                sta 0,x
.adf7	a5 38		lda $38		                lda scratch+2
.adf9	95 01		sta $01,x	                sta 1,x
.adfb	20 8f a1	jsr $a18f	                jsr xt_swap
.adfe	20 31 95	jsr $9531	                jsr xt_minus
.ae01	20 f2 97	jsr $97f2	                jsr xt_one_minus
.ae04	20 31 95	jsr $9531	                jsr xt_minus
.ae07	ca		dex		                dex
.ae08	ca		dex		                dex
.ae09	a5 37		lda $37		                lda scratch+1
.ae0b	95 00		sta $00,x	                sta 0,x
.ae0d	a5 38		lda $38		                lda scratch+2
.ae0f	95 01		sta $01,x	                sta 1,x
.ae11	20 f2 97	jsr $97f2	                jsr xt_one_minus
.ae14	20 8f a1	jsr $a18f	                jsr xt_swap ; ( new_addr new_n )
.ae17	60		rts		                rts
.ae18					disasm_sliteral:
.ae18	a9 53		lda #$53	                lda #'S'
.ae1a	20 d7 8d	jsr $8dd7	                jsr emit_a ; Print S before LITERAL so it becomes SLITERAL
.ae1d	a9 0d		lda #$0d	                lda #str_disasm_lit     ; "LITERAL "
.ae1f	20 3c d8	jsr $d83c	                jsr print_string_no_lf
.ae22	20 8f a1	jsr $a18f	                jsr xt_swap             ; switch to (u addr)
.ae25	20 fe 97	jsr $97fe	                jsr xt_one_plus
.ae28	20 90 8d	jsr $8d90	                jsr xt_dup
.ae2b	20 61 8f	jsr $8f61	                jsr xt_fetch
.ae2e	20 0f a5	jsr $a50f	                jsr xt_u_dot            ; Print the address of the string
.ae31	20 88 a3	jsr $a388	                jsr xt_two
.ae34	20 c4 99	jsr $99c4	                jsr xt_plus
.ae37	20 90 8d	jsr $8d90	                jsr xt_dup
.ae3a	20 43 9a	jsr $9a43	                jsr xt_question         ; Print the length of the string
.ae3d	20 fe 97	jsr $97fe	                jsr xt_one_plus
.ae40	20 8f a1	jsr $a18f	                jsr xt_swap            ; ( addr+4 u )
.ae43	ca		dex		                dex
.ae44	ca		dex		                dex
.ae45	a9 04		lda #$04	                lda #4
.ae47	95 00		sta $00,x	                sta 0,x
.ae49	74 01		stz $01,x	                stz 1,x
.ae4b	20 31 95	jsr $9531	                jsr xt_minus            ; ( addr+4 u-4 )
.ae4e	60		rts		                rts
.ae4f					disasm_0branch:
.ae4f	a9 30		lda #$30	                lda #'0'
.ae51	20 d7 8d	jsr $8dd7	                jsr emit_a ; Print 0 before BRANCH so it becomes 0BRANCH
.ae54					disasm_branch:
.ae54	a9 0f		lda #$0f	                lda #str_disasm_bra
.ae56	20 3c d8	jsr $d83c	                jsr print_string_no_lf ; "BRANCH "
.ae59	80 05		bra $ae60	                bra disasm_print_literal
.ae5b					disasm_literal:
.ae5b	a9 0d		lda #$0d	                lda #str_disasm_lit
.ae5d	20 3c d8	jsr $d83c	                jsr print_string_no_lf ; "LITERAL "
.ae60					disasm_print_literal:
.ae60	20 8f a1	jsr $a18f	                jsr xt_swap ; switch to (u addr)
.ae63	20 fe 97	jsr $97fe	                jsr xt_one_plus
.ae66	20 90 8d	jsr $8d90	                jsr xt_dup
.ae69	20 43 9a	jsr $9a43	                jsr xt_question ; Print the value at the adress
.ae6c	20 fe 97	jsr $97fe	                jsr xt_one_plus
.ae6f	20 8f a1	jsr $a18f	                jsr xt_swap ; (addr+2 u)
.ae72	20 f2 97	jsr $97f2	                jsr xt_one_minus
.ae75	20 f2 97	jsr $97f2	                jsr xt_one_minus ; (addr+2 u-2)
.ae78	60		rts		                rts
.ae79					disasm_jsr:
.ae79	ca		dex		                dex
.ae7a	ca		dex		                dex
.ae7b	a5 37		lda $37		                lda scratch+1
.ae7d	95 00		sta $00,x	                sta 0,x
.ae7f	a5 38		lda $38		                lda scratch+2
.ae81	95 01		sta $01,x	                sta 1,x
.ae83	20 59 92	jsr $9259	                jsr xt_int_to_name
.ae86	b5 00		lda $00,x	                lda 0,x
.ae88	15 01		ora $01,x	                ora 1,x
.ae8a	f0 07		beq $ae93	                beq _disasm_no_nt
.ae8c	20 df 95	jsr $95df	                jsr xt_name_to_string
.ae8f	20 e4 a4	jsr $a4e4	                jsr xt_type
.ae92	60		rts		                rts
.ae93					_disasm_no_nt:
.ae93	20 0f 8d	jsr $8d0f	                jsr xt_drop ; the 0 indicating no name token
.ae96	ca		dex		                dex
.ae97	ca		dex		                dex
.ae98	a5 37		lda $37		                lda scratch+1
.ae9a	95 00		sta $00,x	                sta 0,x
.ae9c	a5 38		lda $38		                lda scratch+2
.ae9e	95 01		sta $01,x	                sta 1,x
.aea0	ca		dex		                dex
.aea1	ca		dex		                dex
.aea2	a9 10		lda #$10	                lda #<underflow_1
.aea4	95 00		sta $00,x	                sta 0,x
.aea6	a9 d8		lda #$d8	                lda #>underflow_1
.aea8	95 01		sta $01,x	                sta 1,x
.aeaa	20 37 d7	jsr $d737	                jsr compare_16bit
.aead	f0 02		beq $aeb1	                beq _disasm_jsr_uflow_check_upper
.aeaf	b0 14		bcs $aec5	                bcs _disasm_jsr_unknown
.aeb1					_disasm_jsr_uflow_check_upper:
.aeb1	a9 1f		lda #$1f	                lda #<underflow_4
.aeb3	95 00		sta $00,x	                sta 0,x
.aeb5	a9 d8		lda #$d8	                lda #>underflow_4
.aeb7	95 01		sta $01,x	                sta 1,x
.aeb9	20 37 d7	jsr $d737	                jsr compare_16bit
.aebc	f0 02		beq $aec0	                beq _disasm_jsr_soc
.aebe	90 05		bcc $aec5	                bcc _disasm_jsr_unknown
.aec0					_disasm_jsr_soc:
.aec0	a9 0e		lda #$0e	                lda #str_disasm_sdc
.aec2	20 3c d8	jsr $d83c	                jsr print_string_no_lf  ; "STACK DEPTH CHECK"
.aec5					_disasm_jsr_unknown:
.aec5	20 91 a3	jsr $a391	                jsr xt_two_drop
.aec8	60		rts		                rts
.aec9					oc_index_table:
>aec9	c9 b0 cd b0 61 b5 61 b5		        .word oc00, oc01, oc__, oc__, oc04, oc05, oc06, oc__
>aed1	d5 b0 db b0 e1 b0 61 b5
>aed9	e7 b0 eb b0 f1 b0 61 b5		        .word oc08, oc09, oc0a, oc__, oc0c, oc0d, oc0e, oc0f
>aee1	f7 b0 fb b0 ff b0 03 b1
>aee9	08 b1 0c b1 14 b1 61 b5		        .word oc10, oc11, oc12, oc__, oc14, oc15, oc16, oc17
>aef1	1b b1 21 b1 28 b1 2f b1
>aef9	36 b1 3a b1 40 b1 61 b5		        .word oc18, oc19, oc1a, oc__, oc1c, oc1d, oc__, oc1f
>af01	46 b1 4a b1 61 b5 50 b1
>af09	56 b1 5a b1 61 b5 61 b5		        .word oc20, oc21, oc__, oc__, oc24, oc25, oc26, oc27
>af11	62 b1 68 b1 6e b1 74 b1
>af19	7b b1 7f b1 85 b1 61 b5		        .word oc28, oc29, oc2a, oc__, oc2c, oc2d, oc2e, oc2f
>af21	8b b1 8f b1 94 b1 98 b1
>af29	9d b1 a1 b1 a9 b1 61 b5		        .word oc30, oc31, oc32, oc__, oc34, oc35, oc36, oc37
>af31	b0 b1 b8 b1 bf b1 c6 b1
>af39	cd b1 d1 b1 d7 b1 61 b5		        .word oc38, oc39, oc3a, oc__, oc3c, oc3d, oc3e, oc0f
>af41	dd b1 e3 b1 e9 b1 03 b1
>af49	f4 b1 f8 b1 61 b5 61 b5		        .word oc40, oc41, oc__, oc__, oc__, oc45, oc46, oc47
>af51	61 b5 00 b2 06 b2 0c b2
>af59	13 b2 17 b2 1d b2 61 b5		        .word oc48, oc49, oc4a, oc__, oc4c, oc4d, oc4e, oc4f
>af61	23 b2 27 b2 2b b2 2f b2
>af69	34 b2 38 b2 40 b2 61 b5		        .word oc50, oc51, oc52, oc__, oc__, oc55, oc56, oc57
>af71	61 b5 47 b2 4e b2 55 b2
>af79	5c b2 60 b2 66 b2 61 b5		        .word oc58, oc59, oc5a, oc__, oc__, oc__, oc5e, oc5f
>af81	61 b5 61 b5 70 b2 76 b2
>af89	7b b2 7f b2 61 b5 61 b5		        .word oc60, oc61, oc__, oc__, oc64, oc65, oc66, oc67
>af91	87 b2 8d b2 93 b2 99 b2
>af99	a0 b2 a4 b2 aa b2 61 b5		        .word oc68, oc69, oc6a, oc__, oc6c, oc6d, oc6e, oc6f
>afa1	b0 b2 b6 b2 ba b2 be b2
>afa9	c3 b2 c7 b2 cf b2 61 b5		        .word oc70, oc71, oc72, oc__, oc74, oc75, oc76, oc77
>afb1	d6 b2 dd b2 e4 b2 eb b2
>afb9	f2 b2 f6 b2 fc b2 61 b5		        .word oc78, oc79, oc7a, oc__, oc7c, oc7d, oc7e, oc7f
>afc1	00 b3 07 b3 0d b3 13 b3
>afc9	18 b3 1c b3 61 b5 61 b5		        .word oc80, oc81, oc__, oc__, oc84, oc85, oc86, oc__
>afd1	24 b3 2a b3 30 b3 61 b5
>afd9	36 b3 3a b3 40 b3 61 b5		        .word oc88, oc89, oc8a, oc__, oc8c, oc8d, oc8e, oc8f
>afe1	44 b3 48 b3 4c b3 50 b3
>afe9	55 b3 59 b3 61 b3 61 b5		        .word oc90, oc91, oc92, oc__, oc94, oc95, oc96, oc97
>aff1	68 b3 6f b3 76 b3 7d b3
>aff9	84 b3 88 b3 8e b3 61 b5		        .word oc98, oc99, oc9a, oc__, oc9c, oc9d, oc9e, oc9f
>b001	92 b3 96 b3 9c b3 a2 b3
>b009	a7 b3 ad b3 b5 b3 61 b5		        .word oca0, oca1, oca2, oc__, oca4, oca5, oca6, oca7
>b011	bb b3 c1 b3 c7 b3 cd b3
>b019	d4 b3 d8 b3 de b3 61 b5		        .word oca8, oca9, ocaa, oc__, ocac, ocad, ocae, ocaf
>b021	e2 b3 e6 b3 ea b3 ee b3
>b029	f3 b3 f7 b3 ff b3 61 b5		        .word ocb0, ocb1, ocb2, oc__, ocb4, ocb5, ocb6, ocb7
>b031	06 b4 0d b4 14 b4 1b b4
>b039	22 b4 26 b4 2c b4 61 b5		        .word ocb8, ocb9, ocba, oc__, ocbc, ocbd, ocbe, ocbf
>b041	30 b4 36 b4 3c b4 42 b4
>b049	47 b4 4d b4 61 b5 61 b5		        .word occ0, occ1, oc__, oc__, occ4, occ5, occ6, occ7
>b051	55 b4 5b b4 61 b4 67 b4
>b059	6e b4 72 b4 78 b4 61 b5		        .word occ8, occ9, occa, oc__, occc, occd, occe, occf
>b061	7c b4 80 b4 84 b4 88 b4
>b069	8d b4 91 b4 99 b4 61 b5		        .word ocd0, ocd1, ocd2, oc__, oc__, ocd5, ocd6, ocd7
>b071	61 b5 a0 b4 a7 b4 ae b4
>b079	b5 b4 b9 b4 bf b4 61 b5		        .word ocd8, ocd9, ocda, oc__, oc__, ocdd, ocde, ocdf
>b081	61 b5 c3 b4 c9 b4 cf b4
>b089	d4 b4 da b4 61 b5 61 b5		        .word oce0, oce1, oc__, oc__, oce4, oce5, oce6, oce7
>b091	e2 b4 e8 b4 ee b4 f4 b4
>b099	fb b4 ff b4 05 b5 61 b5		        .word oce8, oce9, ocea, oc__, ocec, oced, ocee, ocef
>b0a1	09 b5 0d b5 11 b5 15 b5
>b0a9	1a b5 1e b5 26 b5 61 b5		        .word ocf0, ocf1, ocf2, oc__, oc__, ocf5, ocf6, ocf7
>b0b1	61 b5 2d b5 34 b5 3b b5
>b0b9	42 b5 46 b5 4c b5 61 b5		        .word ocf8, ocf9, ocfa, oc__, oc__, ocfd, ocfe, ocff
>b0c1	61 b5 50 b5 56 b5 5c b5
.b0c9					oc_table:
>b0c9	83 62 72 6b				oc00:	.text 2*64+3, "brk"              ; enforce the signature byte
>b0cd	87 6f 72 61 2e 7a 78 69			oc01:	.text 2*64+7, "ora.zxi"
>b0d5	85 74 73 62 2e 7a		        oc04:   .text 2*64+5, "tsb.z"
>b0db	85 6f 72 61 2e 7a			oc05:	.text 2*64+5, "ora.z"
>b0e1	85 61 73 6c 2e 7a			oc06:	.text 2*64+5, "asl.z"
>b0e7	43 70 68 70				oc08:	.text 1*64+3, "php"
>b0eb	85 6f 72 61 2e 23			oc09:	.text 2*64+5, "ora.#"
>b0f1	45 61 73 6c 2e 61			oc0a:	.text 1*64+5, "asl.a"
>b0f7	c3 74 73 62				oc0c:	.text 3*64+3, "tsb"
>b0fb	c3 6f 72 61				oc0d:	.text 3*64+3, "ora"
>b0ff	c3 61 73 6c				oc0e:	.text 3*64+3, "asl"
>b103	c4 62 62 72 30				oc0f:	.text 3*64+4, "bbr0"
>b108	83 62 70 6c				oc10:	.text 2*64+3, "bpl"
>b10c	87 6f 72 61 2e 7a 69 79			oc11:	.text 2*64+7, "ora.ziy"
>b114	86 6f 72 61 2e 7a 69			oc12:	.text 2*64+6, "ora.zi"
>b11b	85 74 72 62 2e 7a			oc14:	.text 2*64+5, "trb.z"
>b121	86 6f 72 61 2e 7a 78			oc15:	.text 2*64+6, "ora.zx"
>b128	86 61 73 6c 2e 7a 78			oc16:	.text 2*64+6, "asl.zx"
>b12f	86 72 6d 62 31 2e 7a			oc17:	.text 2*64+6, "rmb1.z"
>b136	43 63 6c 63				oc18:	.text 1*64+3, "clc"
>b13a	c5 6f 72 61 2e 79			oc19:	.text 3*64+5, "ora.y"
>b140	45 69 6e 63 2e 61			oc1a:	.text 1*64+5, "inc.a"
>b146	c3 74 72 62				oc1c:	.text 3*64+3, "trb"
>b14a	c5 6f 72 61 2e 78			oc1d:	.text 3*64+5, "ora.x"
>b150	c5 61 73 6c 2e 78			oc1f:	.text 3*64+5, "asl.x"
>b156	c3 6a 73 72				oc20:	.text 3*64+3, "jsr"
>b15a	87 61 6e 64 2e 7a 78 69			oc21:	.text 2*64+7, "and.zxi"
>b162	85 62 69 74 2e 7a			oc24:	.text 2*64+5, "bit.z"
>b168	85 61 6e 64 2e 7a			oc25:	.text 2*64+5, "and.z"
>b16e	85 72 6f 6c 2e 7a			oc26:	.text 2*64+5, "rol.z"
>b174	86 72 6d 62 32 2e 7a			oc27:	.text 2*64+6, "rmb2.z"
>b17b	43 70 6c 70				oc28:	.text 1*64+3, "plp"
>b17f	85 61 6e 64 2e 23			oc29:	.text 2*64+5, "and.#"
>b185	45 72 6f 6c 2e 61			oc2a:	.text 1*64+5, "rol.a"
>b18b	c3 62 69 74				oc2c:	.text 3*64+3, "bit"
>b18f	c4 61 6e 64 2e				oc2d:	.text 3*64+4, "and."
>b194	c3 72 6f 6c				oc2e:	.text 3*64+3, "rol"
>b198	c4 62 62 72 32				oc2f:	.text 3*64+4, "bbr2"
>b19d	83 62 6d 69				oc30:	.text 2*64+3, "bmi"
>b1a1	87 61 6e 64 2e 7a 69 79			oc31:	.text 2*64+7, "and.ziy"
>b1a9	86 61 6e 64 2e 7a 69			oc32:	.text 2*64+6, "and.zi"
>b1b0	87 62 69 74 2e 7a 78 69			oc34:	.text 2*64+7, "bit.zxi"
>b1b8	86 61 6e 64 2e 7a 78			oc35:	.text 2*64+6, "and.zx"
>b1bf	86 72 6f 6c 2e 7a 78			oc36:	.text 2*64+6, "rol.zx"
>b1c6	86 72 6d 62 33 2e 7a			oc37:	.text 2*64+6, "rmb3.z"
>b1cd	43 73 65 63				oc38:	.text 1*64+3, "sec"
>b1d1	c5 61 6e 64 2e 79			oc39:	.text 3*64+5, "and.y"
>b1d7	45 64 65 63 2e 61			oc3a:	.text 1*64+5, "dec.a"
>b1dd	c5 62 69 74 2e 78			oc3c:	.text 3*64+5, "bit.x"
>b1e3	c5 61 6e 64 2e 78			oc3d:	.text 3*64+5, "and.x"
>b1e9	c5 72 6f 6c 2e 78			oc3e:	.text 3*64+5, "rol.x"
>b1ef	c4 62 62 72 33				oc3f:	.text 3*64+4, "bbr3"
>b1f4	43 72 74 69				oc40:	.text 1*64+3, "rti"
>b1f8	87 65 6f 72 2e 7a 78 69			oc41:	.text 2*64+7, "eor.zxi"
>b200	85 65 6f 72 2e 7a			oc45:	.text 2*64+5, "eor.z"
>b206	85 6c 73 72 2e 7a			oc46:	.text 2*64+5, "lsr.z"
>b20c	86 72 62 6d 34 2e 7a			oc47:	.text 2*64+6, "rbm4.z"
>b213	43 70 68 61				oc48:	.text 1*64+3, "pha"
>b217	85 65 6f 72 2e 23			oc49:	.text 2*64+5, "eor.#"
>b21d	45 6c 73 72 2e 61			oc4a:	.text 1*64+5, "lsr.a"
>b223	c3 6a 6d 70				oc4c:	.text 3*64+3, "jmp"
>b227	c3 65 6f 72				oc4d:	.text 3*64+3, "eor"
>b22b	c3 6c 73 72				oc4e:	.text 3*64+3, "lsr"
>b22f	c4 62 62 72 34				oc4f:	.text 3*64+4, "bbr4"
>b234	83 62 76 63				oc50:	.text 2*64+3, "bvc"
>b238	87 65 6f 72 2e 7a 69 79			oc51:	.text 2*64+7, "eor.ziy"
>b240	86 65 6f 72 2e 7a 69			oc52:	.text 2*64+6, "eor.zi"
>b247	86 65 6f 72 2e 7a 78			oc55:	.text 2*64+6, "eor.zx"
>b24e	86 6c 73 72 2e 7a 78			oc56:	.text 2*64+6, "lsr.zx"
>b255	86 72 62 6d 35 2e 7a			oc57:	.text 2*64+6, "rbm5.z"
>b25c	43 63 6c 69				oc58:	.text 1*64+3, "cli"
>b260	c5 65 6f 72 2e 79			oc59:	.text 3*64+5, "eor.y"
>b266	43 70 68 79				oc5a:	.text 1*64+3, "phy"
>b26a	c5 65 6f 72 2e 78			oc5d:	.text 3*64+5, "eor.x"
>b270	c5 6c 73 72 2e 78			oc5e:	.text 3*64+5, "lsr.x"
>b276	c4 62 62 72 35				oc5f:	.text 3*64+4, "bbr5"
>b27b	43 72 74 73				oc60:	.text 1*64+3, "rts"
>b27f	87 61 64 63 2e 7a 78 69			oc61:	.text 2*64+7, "adc.zxi"
>b287	85 73 74 7a 2e 7a			oc64:	.text 2*64+5, "stz.z"
>b28d	85 61 64 63 2e 7a			oc65:	.text 2*64+5, "adc.z"
>b293	85 72 6f 72 2e 7a			oc66:	.text 2*64+5, "ror.z"
>b299	86 72 6d 62 36 2e 7a			oc67:	.text 2*64+6, "rmb6.z"
>b2a0	43 70 6c 61				oc68:	.text 1*64+3, "pla"
>b2a4	85 61 64 63 2e 23			oc69:	.text 2*64+5, "adc.#"
>b2aa	45 72 6f 72 2e 61			oc6a:	.text 1*64+5, "ror.a"
>b2b0	c5 6a 6d 70 2e 69			oc6c:	.text 3*64+5, "jmp.i"
>b2b6	c3 61 64 63				oc6d:	.text 3*64+3, "adc"
>b2ba	c3 72 6f 72				oc6e:	.text 3*64+3, "ror"
>b2be	c4 62 62 72 36				oc6f:	.text 3*64+4, "bbr6"
>b2c3	83 62 76 73				oc70:	.text 2*64+3, "bvs"
>b2c7	87 61 64 63 2e 7a 69 79			oc71:	.text 2*64+7, "adc.ziy"
>b2cf	86 61 64 63 2e 7a 69			oc72:	.text 2*64+6, "adc.zi"
>b2d6	86 73 74 7a 2e 7a 78			oc74:	.text 2*64+6, "stz.zx"
>b2dd	86 61 64 63 2e 7a 78			oc75:	.text 2*64+6, "adc.zx"
>b2e4	86 72 6f 72 2e 7a 78			oc76:	.text 2*64+6, "ror.zx"
>b2eb	86 72 6d 62 37 2e 7a			oc77:	.text 2*64+6, "rmb7.z"
>b2f2	43 73 65 69				oc78:	.text 1*64+3, "sei"
>b2f6	c5 61 64 63 2e 79			oc79:	.text 3*64+5, "adc.y"
>b2fc	43 70 6c 79				oc7a:	.text 1*64+3, "ply"
>b300	c6 6a 6d 70 2e 78 69			oc7c:	.text 3*64+6, "jmp.xi"
>b307	c5 61 64 63 2e 78			oc7d:	.text 3*64+5, "adc.x"
>b30d	c5 72 6f 72 2e 78			oc7e:	.text 3*64+5, "ror.x"
>b313	c4 62 62 72 37				oc7f:	.text 3*64+4, "bbr7"
>b318	83 62 72 61				oc80:	.text 2*64+3, "bra"
>b31c	87 73 74 61 2e 7a 78 69			oc81:	.text 2*64+7, "sta.zxi"
>b324	85 73 74 79 2e 7a			oc84:	.text 2*64+5, "sty.z"
>b32a	85 73 74 61 2e 7a			oc85:	.text 2*64+5, "sta.z"
>b330	85 73 74 78 2e 7a			oc86:	.text 2*64+5, "stx.z"
>b336	43 64 65 79				oc88:	.text 1*64+3, "dey"
>b33a	85 62 69 74 2e 23			oc89:	.text 2*64+5, "bit.#"
>b340	43 74 78 61				oc8a:	.text 1*64+3, "txa"
>b344	c3 73 74 79				oc8c:	.text 3*64+3, "sty"
>b348	c3 73 74 61				oc8d:	.text 3*64+3, "sta"
>b34c	c3 73 74 78				oc8e:	.text 3*64+3, "stx"
>b350	c4 62 62 73 30				oc8f:	.text 3*64+4, "bbs0"
>b355	83 62 63 63				oc90:	.text 2*64+3, "bcc"
>b359	87 73 74 61 2e 7a 69 79			oc91:	.text 2*64+7, "sta.ziy"
>b361	86 73 74 61 2e 7a 69			oc92:	.text 2*64+6, "sta.zi"
>b368	86 73 74 79 2e 7a 78			oc94:	.text 2*64+6, "sty.zx"
>b36f	86 73 74 61 2e 7a 78			oc95:	.text 2*64+6, "sta.zx"
>b376	86 73 74 78 2e 7a 79			oc96:	.text 2*64+6, "stx.zy"
>b37d	86 73 6d 62 31 2e 7a			oc97:	.text 2*64+6, "smb1.z"
>b384	43 74 79 61				oc98:	.text 1*64+3, "tya"
>b388	c5 73 74 61 2e 79			oc99:	.text 3*64+5, "sta.y"
>b38e	43 74 78 73				oc9a:	.text 1*64+3, "txs"
>b392	c3 73 74 7a				oc9c:	.text 3*64+3, "stz"
>b396	c5 73 74 61 2e 78			oc9d:	.text 3*64+5, "sta.x"
>b39c	c5 73 74 7a 2e 78			oc9e:	.text 3*64+5, "stz.x"
>b3a2	c4 62 62 73 31				oc9f:	.text 3*64+4, "bbs1"
>b3a7	85 6c 64 79 2e 23			oca0:	.text 2*64+5, "ldy.#"
>b3ad	87 6c 64 61 2e 7a 78 69			oca1:	.text 2*64+7, "lda.zxi"
>b3b5	85 6c 64 78 2e 23			oca2:	.text 2*64+5, "ldx.#"
>b3bb	85 6c 64 79 2e 7a			oca4:	.text 2*64+5, "ldy.z"
>b3c1	85 6c 64 61 2e 7a			oca5:	.text 2*64+5, "lda.z"
>b3c7	85 6c 64 78 2e 7a			oca6:	.text 2*64+5, "ldx.z"
>b3cd	86 73 6d 62 32 2e 7a			oca7:	.text 2*64+6, "smb2.z"
>b3d4	43 74 61 79				oca8:	.text 1*64+3, "tay"
>b3d8	85 6c 64 61 2e 23			oca9:	.text 2*64+5, "lda.#"
>b3de	43 74 61 78				ocaa:	.text 1*64+3, "tax"
>b3e2	c3 6c 64 79				ocac:	.text 3*64+3, "ldy"
>b3e6	c3 6c 64 61				ocad:	.text 3*64+3, "lda"
>b3ea	c3 6c 64 78				ocae:	.text 3*64+3, "ldx"
>b3ee	c4 62 62 73 32				ocaf:	.text 3*64+4, "bbs2"
>b3f3	83 62 63 73				ocb0:	.text 2*64+3, "bcs"
>b3f7	87 6c 64 61 2e 7a 69 79			ocb1:	.text 2*64+7, "lda.ziy"
>b3ff	86 6c 64 61 2e 7a 69			ocb2:	.text 2*64+6, "lda.zi"
>b406	86 6c 64 79 2e 7a 78			ocb4:	.text 2*64+6, "ldy.zx"
>b40d	86 6c 64 61 2e 7a 78			ocb5:	.text 2*64+6, "lda.zx"
>b414	86 6c 64 78 2e 7a 79			ocb6:	.text 2*64+6, "ldx.zy"
>b41b	86 73 6d 62 33 2e 7a			ocb7:	.text 2*64+6, "smb3.z"
>b422	43 63 6c 76				ocb8:	.text 1*64+3, "clv"
>b426	c5 6c 64 61 2e 79			ocb9:	.text 3*64+5, "lda.y"
>b42c	43 74 73 78				ocba:	.text 1*64+3, "tsx"
>b430	c5 6c 64 79 2e 78			ocbc:	.text 3*64+5, "ldy.x"
>b436	c5 6c 64 61 2e 78			ocbd:	.text 3*64+5, "lda.x"
>b43c	c5 6c 64 78 2e 79			ocbe:	.text 3*64+5, "ldx.y"
>b442	c4 62 62 73 34				ocbf:	.text 3*64+4, "bbs4"
>b447	85 63 70 79 2e 23			occ0:	.text 2*64+5, "cpy.#"
>b44d	87 63 6d 70 2e 7a 78 69			occ1:	.text 2*64+7, "cmp.zxi"
>b455	85 63 70 79 2e 7a			occ4:	.text 2*64+5, "cpy.z"
>b45b	85 63 6d 70 2e 7a			occ5:	.text 2*64+5, "cmp.z"
>b461	85 64 65 63 2e 7a			occ6:	.text 2*64+5, "dec.z"
>b467	86 73 6d 62 34 2e 7a			occ7:	.text 2*64+6, "smb4.z"
>b46e	43 69 6e 79				occ8:	.text 1*64+3, "iny"
>b472	85 63 6d 70 2e 23			occ9:	.text 2*64+5, "cmp.#"
>b478	43 64 65 78				occa:	.text 1*64+3, "dex"
>b47c	c3 63 70 79				occc:	.text 3*64+3, "cpy"
>b480	c3 63 6d 70				occd:	.text 3*64+3, "cmp"
>b484	c3 64 65 63				occe:	.text 3*64+3, "dec"
>b488	c4 62 62 73 34				occf:	.text 3*64+4, "bbs4"
>b48d	83 62 6e 65				ocd0:	.text 2*64+3, "bne"
>b491	87 63 6d 70 2e 7a 69 79			ocd1:	.text 2*64+7, "cmp.ziy"
>b499	86 63 6d 70 2e 7a 69			ocd2:	.text 2*64+6, "cmp.zi"
>b4a0	86 63 6d 70 2e 7a 78			ocd5:	.text 2*64+6, "cmp.zx"
>b4a7	86 64 65 63 2e 7a 78			ocd6:	.text 2*64+6, "dec.zx"
>b4ae	86 73 6d 62 35 2e 7a			ocd7:	.text 2*64+6, "smb5.z"
>b4b5	43 63 6c 64				ocd8:	.text 1*64+3, "cld"
>b4b9	c5 63 6d 70 2e 79			ocd9:	.text 3*64+5, "cmp.y"
>b4bf	43 70 68 78				ocda:	.text 1*64+3, "phx"
>b4c3	c5 63 6d 70 2e 78			ocdd:	.text 3*64+5, "cmp.x"
>b4c9	c5 64 65 63 2e 78			ocde:	.text 3*64+5, "dec.x"
>b4cf	c4 62 62 73 35				ocdf:	.text 3*64+4, "bbs5"
>b4d4	85 63 70 78 2e 23			oce0:	.text 2*64+5, "cpx.#"
>b4da	87 73 62 63 2e 7a 78 69			oce1:	.text 2*64+7, "sbc.zxi"
>b4e2	85 63 70 78 2e 7a			oce4:	.text 2*64+5, "cpx.z"
>b4e8	85 73 62 63 2e 7a			oce5:	.text 2*64+5, "sbc.z"
>b4ee	85 69 6e 63 2e 7a			oce6:	.text 2*64+5, "inc.z"
>b4f4	86 73 6d 62 36 2e 7a			oce7:	.text 2*64+6, "smb6.z"
>b4fb	43 69 6e 78				oce8:	.text 1*64+3, "inx"
>b4ff	85 73 62 63 2e 23			oce9:	.text 2*64+5, "sbc.#"
>b505	43 6e 6f 70				ocea:	.text 1*64+3, "nop"
>b509	c3 63 70 78				ocec:	.text 3*64+3, "cpx"
>b50d	c3 73 62 63				oced:	.text 3*64+3, "sbc"
>b511	c3 69 6e 63				ocee:	.text 3*64+3, "inc"
>b515	c4 62 62 73 36				ocef:	.text 3*64+4, "bbs6"
>b51a	83 62 65 71				ocf0:	.text 2*64+3, "beq"
>b51e	87 73 62 63 2e 7a 69 79			ocf1:	.text 2*64+7, "sbc.ziy"
>b526	86 73 62 63 2e 7a 69			ocf2:	.text 2*64+6, "sbc.zi"
>b52d	86 73 62 63 2e 7a 78			ocf5:	.text 2*64+6, "sbc.zx"
>b534	86 69 6e 63 2e 7a 78			ocf6:	.text 2*64+6, "inc.zx"
>b53b	86 73 6d 62 37 2e 7a			ocf7:	.text 2*64+6, "smb7.z"
>b542	43 73 65 64				ocf8:	.text 1*64+3, "sed"
>b546	c5 73 62 63 2e 79			ocf9:	.text 3*64+5, "sbc.y"
>b54c	43 70 6c 78				ocfa:	.text 1*64+3, "plx"
>b550	c5 73 62 63 2e 78			ocfd:	.text 3*64+5, "sbc.x"
>b556	c5 69 6e 63 2e 78			ocfe:	.text 3*64+5, "inc.x"
>b55c	c4 62 62 73 37				ocff:	.text 3*64+4, "bbs7"
>b561	01 3f					oc__:	.text 1, "?"
.b563					disassembler_end:

;******  Return to file: platform/../taliforth.asm


;******  Processing file: platform/../ed.asm

=46					ed_head  = editor1  ; pointer to first list element (addr) (2 bytes)
=48					ed_cur   = editor2  ; current line number (1 is first line) (2 bytes)
=50					ed_flags = editor3  ; Flags used by ed, where
.b563					ed6502:
.b563	a5 18		lda $18		                lda base
.b565	85 33		sta $33		                sta editor3+1
.b567	a9 0a		lda #$0a	                lda #10
.b569	85 18		sta $18		                sta base
.b56b	64 2e		stz $2e		                stz ed_head
.b56d	64 2f		stz $2f		                stz ed_head+1
.b56f	64 30		stz $30		                stz ed_cur
.b571	64 31		stz $31		                stz ed_cur+1
.b573	64 32		stz $32		                stz ed_flags
.b575	20 89 a7	jsr $a789	                jsr xt_zero
.b578	20 89 a7	jsr $a789	                jsr xt_zero             ; ( addr-t u-t )
.b57b	20 44 89	jsr $8944	                jsr xt_cr
.b57e					ed_input_loop:
.b57e	a9 81		lda #$81	                lda #%10000001
.b580	14 32		trb $32		                trb ed_flags
.b582	20 5d ba	jsr $ba5d	                jsr ed_get_input
.b585	a5 0a		lda $0a		                lda ciblen
.b587	d0 1f		bne $b5a8	                bne _command_mode
.b589	ca		dex		                dex
.b58a	ca		dex		                dex                     ; ( addr-t u-t ? )
.b58b	a5 30		lda $30		                lda ed_cur
.b58d	95 00		sta $00,x	                sta 0,x
.b58f	a5 31		lda $31		                lda ed_cur+1
.b591	95 01		sta $01,x	                sta 1,x                 ; ( addr-t u-t u )
.b593	a9 80		lda #$80	                lda #%10000000
.b595	04 32		tsb $32		                tsb ed_flags
.b597	20 fe 97	jsr $97fe	                jsr xt_one_plus         ; ( addr-t u-t u+1 )
.b59a	20 79 ba	jsr $ba79	                jsr ed_is_valid_line
.b59d	b0 03		bcs $b5a2	                bcs +
.b59f	4c 4d ba	jmp $ba4d	                jmp ed_error_1drop
.b5a2					+
.b5a2	20 89 a7	jsr $a789	                jsr xt_zero             ; ( addr-t u-t u+1 0 )
.b5a5	4c 73 b6	jmp $b673	                jmp _line_number_only_from_external
.b5a8					_command_mode:
.b5a8	20 89 a7	jsr $a789	                jsr xt_zero             ; parameter 1 is NOS ( addr-t u-t 0 )
.b5ab	20 89 a7	jsr $a789	                jsr xt_zero             ; parameter 2 is TOS ( addr-t u-t 0 0 )
.b5ae					_prefix_dot:
.b5ae	b2 08		lda ($08)	                lda (cib)
.b5b0	c9 2e		cmp #$2e	                cmp #$2e                ; ASCII '.'
.b5b2	d0 3a		bne $b5ee	                bne _prefix_dollar
.b5b4	20 6e ba	jsr $ba6e	                jsr ed_have_text
.b5b7	a5 30		lda $30		                lda ed_cur
.b5b9	95 02		sta $02,x	                sta 2,x
.b5bb	a5 31		lda $31		                lda ed_cur+1
.b5bd	95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t cur 0 )
.b5bf	a9 80		lda #$80	                lda #%10000000
.b5c1	04 32		tsb $32		                tsb ed_flags
.b5c3	a5 0a		lda $0a		                lda ciblen
.b5c5	3a		dec a		                dea                     ; sets Z if A was 1
.b5c6	d0 03		bne $b5cb	                bne +
.b5c8	4c 73 b6	jmp $b673	                jmp _line_number_only_from_external
.b5cb					+
.b5cb	ca		dex		                dex
.b5cc	ca		dex		                dex
.b5cd	ca		dex		                dex
.b5ce	ca		dex		                dex
.b5cf	a5 08		lda $08		                lda cib
.b5d1	95 02		sta $02,x	                sta 2,x
.b5d3	a5 09		lda $09		                lda cib+1
.b5d5	95 03		sta $03,x	                sta 3,x
.b5d7	a5 0a		lda $0a		                lda ciblen
.b5d9	95 00		sta $00,x	                sta 0,x
.b5db	a5 0b		lda $0b		                lda ciblen+1
.b5dd	95 01		sta $01,x	                sta 1,x
.b5df	20 f2 97	jsr $97f2	                jsr xt_one_minus        ; ( addr-t u-t para1 0 addr u-1 )
.b5e2	20 8f a1	jsr $a18f	                jsr xt_swap             ; ( addr-t u-t para1 0 u-1 addr )
.b5e5	20 fe 97	jsr $97fe	                jsr xt_one_plus         ; ( addr-t u-t para1 0 u-1 addr+1 )
.b5e8	20 8f a1	jsr $a18f	                jsr xt_swap             ; ( addr-t u-t para1 0 addr+1 u-1 )
.b5eb	4c cb b6	jmp $b6cb	                jmp _check_for_para2
.b5ee					_prefix_dollar:
.b5ee	b2 08		lda ($08)	                lda (cib)
.b5f0	c9 24		cmp #$24	                cmp #'$'
.b5f2	d0 1c		bne $b610	                bne _prefix_percent
.b5f4	20 6e ba	jsr $ba6e	                jsr ed_have_text
.b5f7	e8		inx		                inx
.b5f8	e8		inx		                inx                     ; ( addr-t u-t 0 )
.b5f9	20 9b ba	jsr $ba9b	                jsr ed_last_line          ; ( addr-t u-t 0 para1 )
.b5fc	20 8f a1	jsr $a18f	                jsr xt_swap             ; SWAP ( addr-t u-t para1 0 )
.b5ff	a9 80		lda #$80	                lda #%10000000
.b601	04 32		tsb $32		                tsb ed_flags
.b603	a5 0a		lda $0a		                lda ciblen
.b605	3a		dec a		                dea                     ; sets Z if A was 1
.b606	d0 03		bne $b60b	                bne +
.b608	4c 73 b6	jmp $b673	                jmp _line_number_only_from_external
.b60b					+
.b60b	a0 01		ldy #$01	                ldy #01
.b60d	4c 47 b7	jmp $b747	                jmp _check_command
.b610					_prefix_percent:
.b610	b2 08		lda ($08)	                lda (cib)
.b612	c9 25		cmp #$25	                cmp #$25                ; ASCII '%'
.b614	f0 04		beq $b61a	                beq _whole_text
.b616	c9 2c		cmp #$2c	                cmp #$2c                ; ASCII ','
.b618	d0 17		bne $b631	                bne _prefix_semicolon
.b61a					_whole_text:
.b61a	20 6e ba	jsr $ba6e	                jsr ed_have_text
.b61d	a9 01		lda #$01	                lda #01
.b61f	95 02		sta $02,x	                sta 2,x                 ; LSB of NOS is para 1
.b621	74 03		stz $03,x	                stz 3,x                 ; ( addr-t u-t para1 0 )
.b623					_semicolon_entry:
.b623	e8		inx		                inx
.b624	e8		inx		                inx                     ; DROP ( addr-t u-t para1 )
.b625	20 9b ba	jsr $ba9b	                jsr ed_last_line          ; ( addr-t u-t para1 para2 )
.b628	a9 80		lda #$80	                lda #%10000000
.b62a	04 32		tsb $32		                tsb ed_flags
.b62c	a0 01		ldy #$01	                ldy #01
.b62e	4c 47 b7	jmp $b747	                jmp _check_command
.b631					_prefix_semicolon:
.b631	b2 08		lda ($08)	                lda (cib)
.b633	c9 3b		cmp #$3b	                cmp #$3b                ; ASCII ';'
.b635	d0 0d		bne $b644	                bne _prefix_number
.b637	20 6e ba	jsr $ba6e	                jsr ed_have_text
.b63a	a5 30		lda $30		                lda ed_cur
.b63c	95 02		sta $02,x	                sta 2,x
.b63e	a5 31		lda $31		                lda ed_cur+1
.b640	95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t cur 0 )
.b642	80 df		bra $b623	                bra _semicolon_entry
.b644					_prefix_number:
.b644	20 89 a7	jsr $a789	                jsr xt_zero
.b647	20 89 a7	jsr $a789	                jsr xt_zero             ; ( addr-t u-t 0 0 0 0 )
.b64a	ca		dex		                dex
.b64b	ca		dex		                dex
.b64c	ca		dex		                dex
.b64d	ca		dex		                dex                     ; ( addr-t u-t 0 0 0 0 ? ? )
.b64e	a5 08		lda $08		                lda cib
.b650	95 02		sta $02,x	                sta 2,x
.b652	a5 09		lda $09		                lda cib+1
.b654	95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t 0 0 0 0 cib ? )
.b656	a5 0a		lda $0a		                lda ciblen
.b658	95 00		sta $00,x	                sta 0,x
.b65a	a5 0b		lda $0b		                lda ciblen+1
.b65c	95 01		sta $01,x	                sta 1,x                 ; ( addr-t u-t 0 0 0 0 cib ciblen )
.b65e	20 9e a2	jsr $a29e	                jsr xt_to_number        ; ( addr-t u-t 0 0 ud addr2 u2 )
.b661	b5 00		lda $00,x	                lda 0,x
.b663	15 01		ora $01,x	                ora 1,x
.b665	d0 24		bne $b68b	                bne _have_unconverted_chars
.b667	e8		inx		                inx
.b668	e8		inx		                inx
.b669	e8		inx		                inx
.b66a	e8		inx		                inx                     ; 2DROP ( addr-t u-t 0 0 ud )
.b66b	20 61 8a	jsr $8a61	                jsr xt_d_to_s           ; D>S ( addr-t u-t 0 0 u )
.b66e	20 4f 96	jsr $964f	                jsr xt_not_rote         ; -ROT ( addr-t u-t u 0 0 )
.b671	e8		inx		                inx
.b672	e8		inx		                inx                     ; ( addr-t u-t u 0 ) drop through
.b673					_line_number_only_from_external:
.b673	20 8f a1	jsr $a18f	                jsr xt_swap             ; ( addr-t u-t 0 u )
.b676	20 79 ba	jsr $ba79	                jsr ed_is_valid_line
.b679	b0 03		bcs $b67e	                bcs +
.b67b	4c 4b ba	jmp $ba4b	                jmp ed_error_2drop
.b67e					+
.b67e	20 8f a1	jsr $a18f	                jsr xt_swap             ; ( addr-t u-t u 0 )
.b681	20 08 bb	jsr $bb08	                jsr ed_para1_to_cur
.b684	a9 80		lda #$80	                lda #%10000000
.b686	04 32		tsb $32		                tsb ed_flags
.b688	4c 26 b9	jmp $b926	                jmp ed_cmd_p_from_external
.b68b					_have_unconverted_chars:
.b68b	20 90 8d	jsr $8d90	                jsr xt_dup              ; ( addr-t u-t 0 0 ud addr2 u2 u2 )
.b68e	ca		dex		                dex
.b68f	ca		dex		                dex                     ; ( addr-t u-t 0 0 ud addr2 u2 u2 ? )
.b690	a5 0a		lda $0a		                lda ciblen
.b692	95 00		sta $00,x	                sta 0,x
.b694	a5 0b		lda $0b		                lda ciblen+1
.b696	95 01		sta $01,x	                sta 1,x                 ; ( addr-t u-t 0 0 ud addr2 u2 u2 ciblen )
.b698	20 af 8e	jsr $8eaf	                jsr xt_equal            ; ( addr-t u-t 0 0 ud addr2 u2 f )
.b69b	b5 00		lda $00,x	                lda 0,x
.b69d	15 01		ora $01,x	                ora 1,x
.b69f	f0 0e		beq $b6af	                beq _no_command_yet
.b6a1	8a		txa		                txa
.b6a2	18		clc		                clc
.b6a3	69 0a		adc #$0a	                adc #10
.b6a5	aa		tax		                tax                     ; ( addr-t u-t 0 0 )
.b6a6	a9 80		lda #$80	                lda #%10000000
.b6a8	14 32		trb $32		                trb ed_flags
.b6aa	a0 00		ldy #$00	                ldy #00
.b6ac	4c 47 b7	jmp $b747	                jmp _check_command
.b6af					_no_command_yet:
.b6af	e8		inx		                inx
.b6b0	e8		inx		                inx                     ; ( ... 0 0 ud addr2 u2 )
.b6b1	20 51 a3	jsr $a351	                jsr xt_to_r             ; >R ( ... 0 0 ud addr2 ) (R: u2)
.b6b4	20 4f 96	jsr $964f	                jsr xt_not_rote         ; -ROT ( ... 0 0 addr2 ud ) (R: u2)
.b6b7	20 61 8a	jsr $8a61	                jsr xt_d_to_s           ; D>S  ( ... 0 0 addr2 para1 ) (R: u2)
.b6ba	b5 00		lda $00,x	                lda 0,x                 ; LSB
.b6bc	95 06		sta $06,x	                sta 6,x
.b6be	b5 01		lda $01,x	                lda 1,x                 ; MSB
.b6c0	95 07		sta $07,x	                sta 7,x                 ; ( ... para1 0 addr2 para1 ) (R: u2)
.b6c2	e8		inx		                inx
.b6c3	e8		inx		                inx                     ; ( addr-t u-t para1 0 addr2 ) (R: u2)
.b6c4	20 73 9a	jsr $9a73	                jsr xt_r_from           ; R> ( addr-t u-t para1 0 addr2 u2 ) fall through
.b6c7	a9 80		lda #$80	                lda #%10000000
.b6c9	04 32		tsb $32		                tsb ed_flags
.b6cb					_check_for_para2:
.b6cb	a1 02		lda ($02,x)	                lda (2,x)
.b6cd	c9 2c		cmp #$2c	                cmp #$2c                ; ASCII code for ',' (comma)
.b6cf	f0 0d		beq $b6de	                beq _got_comma
.b6d1	38		sec		                sec
.b6d2	a5 0a		lda $0a		                lda ciblen
.b6d4	f5 00		sbc $00,x	                sbc 0,x
.b6d6	a8		tay		                tay
.b6d7	e8		inx		                inx
.b6d8	e8		inx		                inx
.b6d9	e8		inx		                inx
.b6da	e8		inx		                inx                     ; 2DROP ( addr-t u-t para1 0 )
.b6db	4c 47 b7	jmp $b747	                jmp _check_command
.b6de					_got_comma:
.b6de	f6 02		inc $02,x	                inc 2,x
.b6e0	d0 02		bne $b6e4	                bne +
.b6e2	f6 03		inc $03,x	                inc 3,x                 ; ( addr-t u-t para1 0 addr2+1 u2 )
.b6e4					+
.b6e4	b5 01		lda $01,x	                lda 1,x
.b6e6	f0 02		beq $b6ea	                beq +
.b6e8	d6 01		dec $01,x	                dec 1,x
.b6ea					+
.b6ea	d6 00		dec $00,x	                dec 0,x                 ; ( addr-t u-t para1 0 addr2+1 u2-1 )
.b6ec	a1 02		lda ($02,x)	                lda (2,x)
.b6ee	c9 24		cmp #$24	                cmp #$24                ; ASCII for '$'
.b6f0	d0 14		bne $b706	                bne _para2_not_dollar
.b6f2	38		sec		                sec
.b6f3	a5 0a		lda $0a		                lda ciblen
.b6f5	f5 02		sbc $02,x	                sbc 2,x
.b6f7	a8		tay		                tay
.b6f8	c8		iny		                iny
.b6f9	5a		phy		                phy
.b6fa	8a		txa		                txa
.b6fb	18		clc		                clc
.b6fc	69 06		adc #$06	                adc #06
.b6fe	aa		tax		                tax                     ; ( addr-t u-t para1 )
.b6ff	20 9b ba	jsr $ba9b	                jsr ed_last_line          ; ( addr-t u-t para1 para2 )
.b702	7a		ply		                ply
.b703	4c 47 b7	jmp $b747	                jmp _check_command
.b706					_para2_not_dollar:
.b706	20 51 a3	jsr $a351	                jsr xt_to_r             ; >R ( ... para1 0 addr2+1 ) (R: u2-1)
.b709	20 89 a7	jsr $a789	                jsr xt_zero             ; 0 ( ... para1 0 addr2+1 0 ) (R: u2-1)
.b70c	20 89 a7	jsr $a789	                jsr xt_zero             ; 0 ( ... para1 0 addr2+1 0 0 ) (R: u2-1)
.b70f	20 38 9b	jsr $9b38	                jsr xt_rot              ; ROT ( ... para1 0 0 0 addr2+1 ) (R: u2-1)
.b712	20 73 9a	jsr $9a73	                jsr xt_r_from           ; R> ( ... para1 0 0 0 addr2+1 u2-1)
.b715	20 90 8d	jsr $8d90	                jsr xt_dup              ; DUP ( ... para1 0 0 0 addr2+1 u2-1 u2-1)
.b718	20 51 a3	jsr $a351	                jsr xt_to_r             ; >R ( ... para1 0 0 0 addr2+1 u2-1 ) (R: u2-1)
.b71b	20 9e a2	jsr $a29e	                jsr xt_to_number        ; >NUMBER ( ... para1 0 ud addr3 u3 ) (R: u2-1)
.b71e	20 90 8d	jsr $8d90	                jsr xt_dup              ; DUP ( ... para1 0 ud addr3 u3 u3 ) (R: u2-1)
.b721	20 73 9a	jsr $9a73	                jsr xt_r_from           ; R> ( ... para1 0 ud addr3 u3 u3 u2-1 )
.b724	20 af 8e	jsr $8eaf	                jsr xt_equal            ; = ( ... para1 0 ud addr3 u3 f )
.b727	b5 00		lda $00,x	                lda 0,x
.b729	15 01		ora $01,x	                ora 1,x
.b72b	f0 08		beq $b735	                beq _second_number
.b72d	8a		txa		                txa
.b72e	18		clc		                clc
.b72f	69 0c		adc #$0c	                adc #12
.b731	aa		tax		                tax                     ; back to ( addr-t u-t )
.b732	4c 4f ba	jmp $ba4f	                jmp ed_error
.b735					_second_number:
.b735	e8		inx		                inx
.b736	e8		inx		                inx                     ; ( addr-t u-t para1 0 ud addr3 u3 )
.b737	38		sec		                sec
.b738	a5 0a		lda $0a		                lda ciblen
.b73a	f5 00		sbc $00,x	                sbc 0,x
.b73c	48		pha		                pha
.b73d	20 91 a3	jsr $a391	                jsr xt_two_drop         ; 2DROP ( addr-t u-t para1 0 ud )
.b740	20 61 8a	jsr $8a61	                jsr xt_d_to_s           ; D>S  ( addr-t u-t para1 0 para2 )
.b743	20 23 96	jsr $9623	                jsr xt_nip              ; NIP ( addr-t u-t para1 para2 )
.b746	7a		ply		                ply
.b747					_check_command:
.b747	24 32		bit $32		                bit ed_flags
.b749	30 08		bmi $b753	                bmi _check_command_have_arg
.b74b	a5 30		lda $30		                lda ed_cur
.b74d	95 02		sta $02,x	                sta 2,x
.b74f	a5 31		lda $31		                lda ed_cur+1
.b751	95 03		sta $03,x	                sta 3,x
.b753					_check_command_have_arg:
.b753	b1 08		lda ($08),y	                lda (cib),y             ; get mystery char from input
.b755	85 24		sta $24		                sta tmp1
.b757	da		phx		                phx
.b758	a2 00		ldx #$00	                ldx #00
.b75a					_cmd_loop:
.b75a	bd 33 bb	lda $bb33,x	                lda ed_cmd_list,x
.b75d	f0 07		beq $b766	                beq _illegal_command    ; zero marks end of list
.b75f	c5 24		cmp $24		                cmp tmp1
.b761	f0 07		beq $b76a	                beq _found_cmd
.b763	e8		inx		                inx
.b764	80 f4		bra $b75a	                bra _cmd_loop
.b766					_illegal_command:
.b766	fa		plx		                plx
.b767	4c 4b ba	jmp $ba4b	                jmp ed_error_2drop
.b76a					_found_cmd:
.b76a	8a		txa		                txa
.b76b	0a		asl a		                asl
.b76c	aa		tax		                tax                     ; X * 2 for table
.b76d	7c 3e bb	jmp ($bb3e,x)	                jmp (ed_cmd_table,x)
.b770					ed_next_command:
.b770	e8		inx		                inx
.b771	e8		inx		                inx
.b772	e8		inx		                inx
.b773	e8		inx		                inx                     ; ( addr-t u-t ) Fall through
.b774					_next_command_empty:
.b774	4c 7e b5	jmp $b57e	                jmp ed_input_loop
.b777					ed_all_done:
.b777	64 0a		stz $0a		                stz ciblen
.b779	64 0b		stz $0b		                stz ciblen+1
.b77b	20 91 a3	jsr $a391	                jsr xt_two_drop                 ; 2DROP ( addr-t u-t )
.b77e	a5 33		lda $33		                lda editor3+1
.b780	85 18		sta $18		                sta base
.b782	60		rts		                rts
.b783					ed_cmd_a:
.b783	fa		plx		                plx
.b784	e8		inx		                inx
.b785	e8		inx		                inx                     ;  DROP ( addr-t u-t para1 )
.b786					ed_entry_cmd_i:
.b786					ed_cmd_a_have_para:
.b786	20 d1 ba	jsr $bad1	                jsr ed_num_to_addr        ;  ( addr-t u-t addr1 )
.b789	20 44 89	jsr $8944	                jsr xt_cr
.b78c					_next_string_loop:
.b78c	20 5d ba	jsr $ba5d	                jsr ed_get_input
.b78f	b2 08		lda ($08)	                lda (cib)
.b791	c9 2e		cmp #$2e	                cmp #$2e                ; ASCII for '.'
.b793	d0 16		bne $b7ab	                bne _add_line
.b795	a4 0a		ldy $0a		                ldy ciblen
.b797	c0 01		cpy #$01	                cpy #01
.b799	d0 10		bne $b7ab	                bne _add_line
.b79b	a4 0b		ldy $0b		                ldy ciblen+1
.b79d	d0 0c		bne $b7ab	                bne _add_line
.b79f	e8		inx		                inx
.b7a0	e8		inx		                inx
.b7a1	a9 40		lda #$40	                lda #%01000000
.b7a3	04 32		tsb $32		                tsb ed_flags
.b7a5	20 44 89	jsr $8944	                jsr xt_cr
.b7a8	4c 7e b5	jmp $b57e	                jmp ed_input_loop
.b7ab					_add_line:
.b7ab	20 90 8d	jsr $8d90	                jsr xt_dup              ; DUP ( addr-t u-t addr1 addr1 )
.b7ae	20 53 91	jsr $9153	                jsr xt_here             ; HERE ( addr-t u-t addr1 addr1 here )
.b7b1	20 8f a1	jsr $a18f	                jsr xt_swap             ; SWAP ( addr-t u-t addr1 here addr1 )
.b7b4	20 61 8f	jsr $8f61	                jsr xt_fetch            ; @  ( addr-t u-t addr1 here addr2 )
.b7b7	20 4f 87	jsr $874f	                jsr xt_comma            ; ,  ( addr-t u-t addr1 here )
.b7ba	20 6e a3	jsr $a36e	                jsr xt_tuck             ; TUCK ( addr-t u-t here addr1 here )
.b7bd	20 8f a1	jsr $a18f	                jsr xt_swap             ; SWAP ( addr-t u-t here here addr1 )
.b7c0	20 6e a1	jsr $a16e	                jsr xt_store            ; ! ( addr-t u-t here )
.b7c3	20 53 91	jsr $9153	                jsr xt_here             ; HERE ( addr-t u-t here here2)
.b7c6	a5 00		lda $00		                lda cp
.b7c8	18		clc		                clc
.b7c9	69 04		adc #$04	                adc #04
.b7cb	85 00		sta $00		                sta cp
.b7cd	90 02		bcc $b7d1	                bcc +
.b7cf	e6 01		inc $01		                inc cp+1
.b7d1					+
.b7d1	e6 30		inc $30		                inc ed_cur
.b7d3	d0 02		bne $b7d7	                bne +
.b7d5	e6 31		inc $31		                inc ed_cur+1
.b7d7					+
.b7d7	20 53 91	jsr $9153	                jsr xt_here     ; HERE ( addr-t u-t here here2 here3 )
.b7da	20 90 8d	jsr $8d90	                jsr xt_dup      ; DUP ( addr-t u-t here here2 here3 here3 )
.b7dd	ca		dex		                dex
.b7de	ca		dex		                dex             ; ( addr-t u-t here here2 here3 here3 ? )
.b7df	a5 08		lda $08		                lda cib
.b7e1	95 00		sta $00,x	                sta 0,x
.b7e3	a5 09		lda $09		                lda cib+1
.b7e5	95 01		sta $01,x	                sta 1,x         ; ( addr-t u-t here here2 here3 here3 cib )
.b7e7	20 8f a1	jsr $a18f	                jsr xt_swap     ; SWAP ( addr-t u-t here here2 here3 cib here3 )
.b7ea	ca		dex		                dex
.b7eb	ca		dex		                dex             ; ( addr-t u-t here here2 here3 cib here3 ? )
.b7ec	a5 0a		lda $0a		                lda ciblen
.b7ee	95 00		sta $00,x	                sta 0,x
.b7f0	a5 0b		lda $0b		                lda ciblen+1
.b7f2	95 01		sta $01,x	                sta 1,x         ; ( addr-t u-t here here2 here3 cib here3 ciblen )
.b7f4	20 a3 95	jsr $95a3	                jsr xt_move     ; ( addr-t u-t here here2 here3 )
.b7f7	18		clc		                clc
.b7f8	a5 00		lda $00		                lda cp
.b7fa	65 0a		adc $0a		                adc ciblen
.b7fc	85 00		sta $00		                sta cp
.b7fe	90 06		bcc $b806	                bcc +
.b800	a5 01		lda $01		                lda cp+1
.b802	65 0b		adc $0b		                adc ciblen+1
.b804	85 01		sta $01		                sta cp+1
.b806					+
.b806	20 74 98	jsr $9874	                jsr xt_over             ; OVER ( addr-t u-t here here2 here3 here2 )
.b809	20 6e a1	jsr $a16e	                jsr xt_store            ; ! ( addr-t u-t here here2 )
.b80c	20 fe 97	jsr $97fe	                jsr xt_one_plus         ; 1+
.b80f	20 fe 97	jsr $97fe	                jsr xt_one_plus         ; 1+ ( addr-t u-t here here2+2 )
.b812	20 90 8d	jsr $8d90	                jsr xt_dup              ; DUP ( addr-t u-t here here2+2 here2+2 )
.b815	a5 0a		lda $0a		                lda ciblen
.b817	95 02		sta $02,x	                sta 2,x
.b819	a5 0b		lda $0b		                lda ciblen+1
.b81b	95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t here ciblen here2+2 )
.b81d	20 6e a1	jsr $a16e	                jsr xt_store            ; ! ( addr-t u-t here )
.b820	20 44 89	jsr $8944	                jsr xt_cr
.b823	4c 8c b7	jmp $b78c	                jmp _next_string_loop
.b826					ed_cmd_d:
.b826	fa		plx		                plx
.b827	20 6e ba	jsr $ba6e	                jsr ed_have_text
.b82a	20 c3 ba	jsr $bac3	                jsr ed_no_line_zero
.b82d	b5 00		lda $00,x	                lda 0,x
.b82f	15 01		ora $01,x	                ora 1,x
.b831	d0 08		bne $b83b	                bne +
.b833	20 74 98	jsr $9874	                jsr xt_over             ; ( addr-t u-t para1 0 para1 )
.b836	20 78 b8	jsr $b878	                jsr _cmd_d_common       ; ( addr-t u-t para1 0 )
.b839	80 33		bra $b86e	                bra _cmd_d_done
.b83b					+
.b83b	20 79 ba	jsr $ba79	                jsr ed_is_valid_line      ; result is in C flag
.b83e	b0 03		bcs $b843	                bcs _cmd_d_loop
.b840	4c 4b ba	jmp $ba4b	                jmp ed_error_2drop
.b843					_cmd_d_loop:
.b843	20 99 a3	jsr $a399	                jsr xt_two_dup          ; 2DUP ( addr-t u-t para1 para2 para1 para2 )
.b846	20 3e 91	jsr $913e	                jsr xt_greater_than     ; > ( addr-t u-t para1 para2 f )
.b849	b5 00		lda $00,x	                lda 0,x
.b84b	15 01		ora $01,x	                ora 1,x
.b84d	d0 0d		bne $b85c	                bne _cmd_d_done_with_flag
.b84f	e8		inx		                inx
.b850	e8		inx		                inx                     ; Get rid of the flag from >
.b851	20 90 8d	jsr $8d90	                jsr xt_dup              ; DUP ( addr-t u-t para1 para2 para2 )
.b854	20 78 b8	jsr $b878	                jsr _cmd_d_common       ; ( addr-t u-t para1 para2 )
.b857	20 f2 97	jsr $97f2	                jsr xt_one_minus        ; 1- ( addr-t u-t para1 para2-1 )
.b85a	80 e7		bra $b843	                bra _cmd_d_loop
.b85c					_cmd_d_done_with_flag:
.b85c	e8		inx		                inx                     ; ( addr-t u-t para1 para2 )
.b85d	e8		inx		                inx
.b85e	b5 02		lda $02,x	                lda 2,x
.b860	d0 02		bne $b864	                bne +
.b862	d6 03		dec $03,x	                dec 3,x
.b864					+
.b864	d6 02		dec $02,x	                dec 2,x
.b866	b5 02		lda $02,x	                lda 2,x
.b868	85 30		sta $30		                sta ed_cur
.b86a	b5 03		lda $03,x	                lda 3,x
.b86c	85 31		sta $31		                sta ed_cur+1            ; drop through to _cmd_d_done
.b86e					_cmd_d_done:
.b86e	a9 40		lda #$40	                lda #%01000000
.b870	04 32		tsb $32		                tsb ed_flags
.b872	20 44 89	jsr $8944	                jsr xt_cr
.b875	4c 70 b7	jmp $b770	                jmp ed_next_command
.b878					_cmd_d_common:
.b878	20 90 8d	jsr $8d90	                jsr xt_dup              ; DUP ( addr-t u-t u u )
.b87b	20 d1 ba	jsr $bad1	                jsr ed_num_to_addr        ; ( addr-t u-t u addr )
.b87e	20 61 8f	jsr $8f61	                jsr xt_fetch            ; @ ( addr-t u-t u addr1 )
.b881	20 8f a1	jsr $a18f	                jsr xt_swap             ; SWAP ( addr-t u-t addr1 u )
.b884	20 f2 97	jsr $97f2	                jsr xt_one_minus        ; 1- ( addr-t u-t addr1 u-1 )
.b887	20 d1 ba	jsr $bad1	                jsr ed_num_to_addr        ; ( addr-t u-t addr1 addr-1 )
.b88a	20 6e a1	jsr $a16e	                jsr xt_store            ; ! ( addr-t u-t )
.b88d	60		rts		                rts
.b88e					ed_cmd_equ:
.b88e	fa		plx		                plx
.b88f	a5 2e		lda $2e		                lda ed_head
.b891	05 2f		ora $2f		                ora ed_head+1
.b893	d0 08		bne $b89d	                bne _cmd_equ_have_text
.b895	ca		dex		                dex
.b896	ca		dex		                dex
.b897	74 00		stz $00,x	                stz 0,x
.b899	74 01		stz $01,x	                stz 1,x                 ; ( addr-t u-t para1 para2 0 )
.b89b	80 21		bra $b8be	                bra _cmd_equ_done
.b89d					_cmd_equ_have_text:
.b89d	20 c3 ba	jsr $bac3	                jsr ed_no_line_zero
.b8a0	24 32		bit $32		                bit ed_flags
.b8a2	30 0c		bmi $b8b0	                bmi _cmd_equ_have_para
.b8a4	ca		dex		                dex
.b8a5	ca		dex		                dex                     ; ( addr-t u-t para1 para2 ? )
.b8a6	a5 30		lda $30		                lda ed_cur
.b8a8	95 00		sta $00,x	                sta 0,x
.b8aa	a5 31		lda $31		                lda ed_cur+1
.b8ac	95 01		sta $01,x	                sta 1,x
.b8ae	80 0e		bra $b8be	                bra _cmd_equ_done       ; ( addr-t u-t para1 para2 cur )
.b8b0					_cmd_equ_have_para:
.b8b0	b5 00		lda $00,x	                lda 0,x
.b8b2	15 01		ora $01,x	                ora 1,x
.b8b4	d0 05		bne $b8bb	                bne _cmd_equ_two_paras
.b8b6	20 74 98	jsr $9874	                jsr xt_over             ; ( addr-t u-t para1 para2 para1)
.b8b9	80 03		bra $b8be	                bra _cmd_equ_done
.b8bb					_cmd_equ_two_paras:
.b8bb	20 90 8d	jsr $8d90	                jsr xt_dup              ; ( addr-t u-t para1 para2 para2) drop through
.b8be					_cmd_equ_done:
.b8be	20 44 89	jsr $8944	                jsr xt_cr               ; number goes on new line
.b8c1	20 0f a5	jsr $a50f	                jsr xt_u_dot            ; ( addr-t u-t para1 para2 )
.b8c4	20 44 89	jsr $8944	                jsr xt_cr
.b8c7	4c 70 b7	jmp $b770	                jmp ed_next_command
.b8ca					ed_cmd_f:
.b8ca	fa		plx		                plx
.b8cb	24 32		bit $32		                bit ed_flags
.b8cd	30 17		bmi $b8e6	                bmi _cmd_f_have_para
.b8cf	20 44 89	jsr $8944	                jsr xt_cr
.b8d2	20 51 a3	jsr $a351	                jsr xt_to_r             ; >R   ( addr-t u-t 0 ) ( R: 0 )
.b8d5	20 38 9b	jsr $9b38	                jsr xt_rot              ; ROT  ( u-t 0 addr-t ) ( R: 0 )
.b8d8	20 90 8d	jsr $8d90	                jsr xt_dup              ; DUP  ( u-t 0 addr-t addr-t ) ( R: 0 )
.b8db	20 0f a5	jsr $a50f	                jsr xt_u_dot            ; U.   ( u-t 0 addr-t ) ( R: 0 )
.b8de	20 4f 96	jsr $964f	                jsr xt_not_rote         ; -ROT ( addr-t u-t 0 ) ( R: 0 )
.b8e1	20 73 9a	jsr $9a73	                jsr xt_r_from           ; R>   ( addr-t u-t 0 0 )
.b8e4	80 11		bra $b8f7	                bra _cmd_f_done
.b8e6					_cmd_f_have_para:
.b8e6	20 74 98	jsr $9874	                jsr xt_over
.b8e9	20 44 89	jsr $8944	                jsr xt_cr
.b8ec	20 0f a5	jsr $a50f	                jsr xt_u_dot
.b8ef	b5 02		lda $02,x	                lda 2,x
.b8f1	95 06		sta $06,x	                sta 6,x
.b8f3	b5 03		lda $03,x	                lda 3,x
.b8f5	95 07		sta $07,x	                sta 7,x                 ; fall through to _cmd_f_done
.b8f7					_cmd_f_done:
.b8f7	20 44 89	jsr $8944	                jsr xt_cr
.b8fa	4c 70 b7	jmp $b770	                jmp ed_next_command
.b8fd					ed_cmd_i:
.b8fd	fa		plx		                plx
.b8fe	e8		inx		                inx
.b8ff	e8		inx		                inx                     ;  DROP ( addr-t u-t para1 )
.b900	24 32		bit $32		                bit ed_flags
.b902	30 08		bmi $b90c	                bmi _cmd_i_have_para
.b904	a5 30		lda $30		                lda ed_cur
.b906	95 00		sta $00,x	                sta 0,x
.b908	a5 31		lda $31		                lda ed_cur+1
.b90a	95 01		sta $01,x	                sta 1,x                 ;  ( addr-t u-t cur ) drop through
.b90c					_cmd_i_have_para:
.b90c	b5 00		lda $00,x	                lda 0,x
.b90e	15 01		ora $01,x	                ora 1,x
.b910	f0 09		beq $b91b	                beq _cmd_i_done
.b912	20 f2 97	jsr $97f2	                jsr xt_one_minus        ; 1-  ( addr-t u-t para1-1 )
.b915	20 89 a7	jsr $a789	                jsr xt_zero             ; 0   ( addr-t u-t para1-1 0 )
.b918	20 f9 94	jsr $94f9	                jsr xt_max              ; MAX ( addr-t u-t para1-1 | 0 )
.b91b					_cmd_i_done:
.b91b	4c 86 b7	jmp $b786	                jmp ed_entry_cmd_i
.b91e					ed_cmd_n:
.b91e	fa		plx		                plx
.b91f	a9 01		lda #$01	                lda #%00000001
.b921	04 32		tsb $32		                tsb ed_flags
.b923	80 05		bra $b92a	                bra ed_cmd_p_entry_for_cmd_n
.b925					ed_cmd_p:
.b925	fa		plx		                plx
.b926					ed_cmd_p_from_external:
.b926	a9 01		lda #$01	                lda #%00000001
.b928	14 32		trb $32		                trb ed_flags
.b92a					ed_cmd_p_entry_for_cmd_n:
.b92a	20 6e ba	jsr $ba6e	                jsr ed_have_text
.b92d	20 c3 ba	jsr $bac3	                jsr ed_no_line_zero
.b930	20 44 89	jsr $8944	                jsr xt_cr
.b933	b5 00		lda $00,x	                lda 0,x
.b935	15 01		ora $01,x	                ora 1,x
.b937	d0 10		bne $b949	                bne _cmd_p_loop
.b939	b5 02		lda $02,x	                lda 2,x
.b93b	85 30		sta $30		                sta ed_cur
.b93d	b5 03		lda $03,x	                lda 3,x
.b93f	85 31		sta $31		                sta ed_cur+1
.b941	20 74 98	jsr $9874	                jsr xt_over             ; OVER ( addr-t u-t para1 para2 para1 )
.b944	20 72 b9	jsr $b972	                jsr _cmd_p_common       ; ( addr-t u-t para1 para2 )
.b947	80 26		bra $b96f	                bra _cmd_p_all_done
.b949					_cmd_p_loop:
.b949	20 99 a3	jsr $a399	                jsr xt_two_dup          ; 2DUP ( addr-t u-t para1 para2 para1 para2 )
.b94c	20 3e 91	jsr $913e	                jsr xt_greater_than     ; > ( addr-t u-t para1 para2 f )
.b94f	b5 00		lda $00,x	                lda 0,x
.b951	15 01		ora $01,x	                ora 1,x
.b953	d0 10		bne $b965	                bne _cmd_p_done
.b955	e8		inx		                inx
.b956	e8		inx		                inx                     ; Get rid of the flag from >
.b957	20 74 98	jsr $9874	                jsr xt_over             ; ( addr-t u-t para1 para2 para1 )
.b95a	20 72 b9	jsr $b972	                jsr _cmd_p_common       ; ( addr-t u-t para1 para2 )
.b95d	f6 02		inc $02,x	                inc 2,x
.b95f	d0 02		bne $b963	                bne +
.b961	f6 03		inc $03,x	                inc 3,x
.b963					+
.b963	80 e4		bra $b949	                bra _cmd_p_loop
.b965					_cmd_p_done:
.b965	e8		inx		                inx
.b966	e8		inx		                inx                     ; fall through to _cmp_p_all_done
.b967	b5 00		lda $00,x	                lda 0,x
.b969	85 30		sta $30		                sta ed_cur
.b96b	b5 01		lda $01,x	                lda 1,x
.b96d	85 31		sta $31		                sta ed_cur+1
.b96f					_cmd_p_all_done:
.b96f	4c 70 b7	jmp $b770	                jmp ed_next_command
.b972					_cmd_p_common:
.b972	a5 32		lda $32		                lda ed_flags
.b974	4a		lsr a		                lsr                     ; bit 0 now in carry
.b975	90 0b		bcc $b982	                bcc _cmd_p_common_no_num
.b977	20 90 8d	jsr $8d90	                jsr xt_dup              ; DUP ( addr-t u-t para1 para1 )
.b97a	20 0f a5	jsr $a50f	                jsr xt_u_dot            ; U. ( addr-t u-t para1 )
.b97d	a9 09		lda #$09	                lda #$09                 ; ASCII for Tab
.b97f	20 d7 8d	jsr $8dd7	                jsr emit_a
.b982					_cmd_p_common_no_num:
.b982	20 d1 ba	jsr $bad1	                jsr ed_num_to_addr        ; ( addr-t u-t addr )
.b985	20 11 bb	jsr $bb11	                jsr ed_print_addr
.b988	60		rts		                rts
.b989					ed_cmd_q:
.b989	fa		plx		                plx
.b98a	24 32		bit $32		                bit ed_flags            ; bit 6 is change flag
.b98c	50 03		bvc $b991	                bvc +
.b98e	4c 4b ba	jmp $ba4b	                jmp ed_error_2drop
.b991					+
.b991	4c 77 b7	jmp $b777	                jmp ed_all_done            ; can't fall thru because of PLX
.b994					ed_cmd_qq:
.b994	fa		plx		                plx
.b995	4c 77 b7	jmp $b777	                jmp ed_all_done
.b998					ed_cmd_w:
.b998	fa		plx		                plx
.b999	20 6e ba	jsr $ba6e	                jsr ed_have_text
.b99c	24 32		bit $32		                bit ed_flags
.b99e	30 13		bmi $b9b3	                bmi _cmd_w_have_para
.b9a0	b5 06		lda $06,x	                lda 6,x
.b9a2	15 07		ora $07,x	                ora 7,x
.b9a4	d0 03		bne $b9a9	                bne +
.b9a6	4c 4b ba	jmp $ba4b	                jmp ed_error_2drop
.b9a9					+
.b9a9	b5 06		lda $06,x	                lda 6,x
.b9ab	95 02		sta $02,x	                sta 2,x
.b9ad	b5 07		lda $07,x	                lda 7,x
.b9af	95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t addr-t ? )
.b9b1	80 08		bra $b9bb	                bra _cmd_w_para_ready
.b9b3					_cmd_w_have_para:
.b9b3	b5 02		lda $02,x	                lda 2,x
.b9b5	95 06		sta $06,x	                sta 6,x
.b9b7	b5 03		lda $03,x	                lda 3,x
.b9b9	95 07		sta $07,x	                sta 7,x                 ; drop through to _cmd_w_para_ready
.b9bb					_cmd_w_para_ready:
.b9bb	a9 2e		lda #$2e	                lda #<ed_head
.b9bd	95 00		sta $00,x	                sta 0,x
.b9bf	a9 00		lda #$00	                lda #>ed_head
.b9c1	95 01		sta $01,x	                sta 1,x                 ; ( addr-t u-t addr-t addr-h )
.b9c3	20 74 98	jsr $9874	                jsr xt_over             ; OVER ( addr-t u-t addr-t addr-h addr-t )
.b9c6	20 51 a3	jsr $a351	                jsr xt_to_r             ; >R ( addr-t u-t addr-t addr-h ) ( R: addr-t )
.b9c9					_cmd_w_loop:
.b9c9	20 61 8f	jsr $8f61	                jsr xt_fetch            ; @ ( addr-t u-t addr-t addr1 ) ( R: addr-t )
.b9cc	b5 00		lda $00,x	                lda 0,x
.b9ce	15 01		ora $01,x	                ora 1,x
.b9d0	f0 55		beq $ba27	                beq _cmd_w_eol
.b9d2	20 99 a3	jsr $a399	                jsr xt_two_dup          ; 2DUP ( addr-t addr-1 addr-t addr-1 ) ( R: addr-t addr-1 addr-t )
.b9d5	20 83 a4	jsr $a483	                jsr xt_two_to_r         ; 2>R  ( addr-t addr-1 ) (R: ... )
.b9d8	20 fe 97	jsr $97fe	                jsr xt_one_plus         ; 1+ ( addr-t addr1+1 ) (R: ... )
.b9db	20 fe 97	jsr $97fe	                jsr xt_one_plus         ; 1+ ( addr-t addr1+2 ) (R: ... )
.b9de	20 90 8d	jsr $8d90	                jsr xt_dup              ; DUP ( addr-t addr1+2 addr1+2 ) ( R: ... )
.b9e1	20 61 8f	jsr $8f61	                jsr xt_fetch            ; @ ( addr-t addr1+2 addr-s ) ( R: ... )
.b9e4	20 8f a1	jsr $a18f	                jsr xt_swap             ; SWAP ( addr-t addr-s addr1+2 ) ( R: ... )
.b9e7	20 fe 97	jsr $97fe	                jsr xt_one_plus         ; 1+ ( addr-t addr-s addr1+1 ) (R: ... )
.b9ea	20 fe 97	jsr $97fe	                jsr xt_one_plus         ; 1+ ( addr-t addr-s addr1+2 ) (R: ... )
.b9ed	20 61 8f	jsr $8f61	                jsr xt_fetch            ; @ ( addr-t addr-s u-s ) ( R: ... )
.b9f0	20 4f 96	jsr $964f	                jsr xt_not_rote         ; -ROT ( u-s addr-t addr-s ) ( R: ... )
.b9f3	20 8f a1	jsr $a18f	                jsr xt_swap             ; SWAP ( u-s addr-s addr-t ) ( R: ... )
.b9f6	20 38 9b	jsr $9b38	                jsr xt_rot              ; ROT (addr-s addr-t u-s ) ( R: ... )
.b9f9	20 90 8d	jsr $8d90	                jsr xt_dup              ; DUP (addr-s addr-t u-s u-s ) ( R: ... )
.b9fc	20 51 a3	jsr $a351	                jsr xt_to_r             ; >R (addr-s addr-t u-s ) ( R: ... u-s )
.b9ff	20 a3 95	jsr $95a3	                jsr xt_move             ; MOVE ( )( R: addr-t addr-1 addr-t )
.ba02	20 73 9a	jsr $9a73	                jsr xt_r_from           ; R> ( u-s )  ( R: addr-t addr-h addr-t )
.ba05	20 09 a4	jsr $a409	                jsr xt_two_r_from       ; 2R> ( u-s addr-t addr-h ) ( R: addr-t )
.ba08	20 4f 96	jsr $964f	                jsr xt_not_rote         ; -ROT ( addr-h u-s addr-t ) ( R: addr-t )
.ba0b	20 c4 99	jsr $99c4	                jsr xt_plus             ; + ( addr-h addr-t1 ) ( R: addr-t )
.ba0e	20 90 8d	jsr $8d90	                jsr xt_dup              ; DUP ( addr-h addr-t1 addr-t1 ) ( R: addr-t )
.ba11	ca		dex		                dex
.ba12	ca		dex		                dex                     ; ( addr-h addr-t1 addr-t1 ? ) ( R: addr-t )
.ba13	a9 0a		lda #$0a	                lda #AscLF              ; ASCII for LF
.ba15	95 00		sta $00,x	                sta 0,x
.ba17	74 01		stz $01,x	                stz 1,x                 ; ( addr-h addr-t1 addr-t1 c ) ( R: addr-t )
.ba19	20 8f a1	jsr $a18f	                jsr xt_swap             ; SWAP ( addr-h addr-t1 c addr-t1 ) ( R: addr-t )
.ba1c	20 6e a1	jsr $a16e	                jsr xt_store            ; ! ( addr-h addr-t1 ) ( R: addr-t )
.ba1f	20 fe 97	jsr $97fe	                jsr xt_one_plus         ; 1+ ( addr-h addr-t1+1 ) ( R: addr-t )
.ba22	20 8f a1	jsr $a18f	                jsr xt_swap             ; SWAP ( addr-t1+1 addr-h ) ( R: addr-t )
.ba25	80 a2		bra $b9c9	                bra _cmd_w_loop
.ba27					_cmd_w_eol:
.ba27	20 8f a1	jsr $a18f	                jsr xt_swap             ; SWAP ( addr-t u-t addr-n addr-tn ) ( R: addr-t )
.ba2a	20 73 9a	jsr $9a73	                jsr xt_r_from           ; R> ( addr-t u-t addr-n addr-tn addr-t )
.ba2d	20 31 95	jsr $9531	                jsr xt_minus            ; - ( addr-t u-t addr-n u )
.ba30	b5 00		lda $00,x	                lda 0,x
.ba32	95 04		sta $04,x	                sta 4,x
.ba34	b5 01		lda $01,x	                lda 1,x
.ba36	95 05		sta $05,x	                sta 5,x                 ; ( addr-t u addr-n u )
.ba38	20 44 89	jsr $8944	                jsr xt_cr
.ba3b	20 90 8d	jsr $8d90	                jsr xt_dup              ; DUP ( addr-t u addr-n u u )
.ba3e	20 0f a5	jsr $a50f	                jsr xt_u_dot            ; U. ( addr-t u addr-n u )
.ba41	20 44 89	jsr $8944	                jsr xt_cr
.ba44	a9 40		lda #$40	                lda #%01000000
.ba46	14 32		trb $32		                trb ed_flags
.ba48	4c 70 b7	jmp $b770	                jmp ed_next_command
.ba4b					ed_error_2drop:
.ba4b	e8		inx		                inx
.ba4c	e8		inx		                inx                     ; drop through to _error_1drop
.ba4d					ed_error_1drop:
.ba4d	e8		inx		                inx
.ba4e	e8		inx		                inx                     ; drop through to _error
.ba4f					ed_error:
.ba4f	20 44 89	jsr $8944	                jsr xt_cr
.ba52	a9 3f		lda #$3f	                lda #'?'
.ba54	20 d7 8d	jsr $8dd7	                jsr emit_a
.ba57	20 44 89	jsr $8944	                jsr xt_cr
.ba5a	4c 7e b5	jmp $b57e	                jmp ed_input_loop
.ba5d					ed_get_input:
.ba5d	20 d9 9a	jsr $9ad9	                jsr xt_refill           ;  ( addr-t u-t f )
.ba60	b5 00		lda $00,x	                lda 0,x
.ba62	15 01		ora $01,x	                ora 1,x
.ba64	d0 05		bne $ba6b	                bne +
.ba66	7a		ply		                ply
.ba67	7a		ply		                ply
.ba68	4c 4d ba	jmp $ba4d	                jmp ed_error_1drop
.ba6b					+
.ba6b	e8		inx		                inx
.ba6c	e8		inx		                inx
.ba6d	60		rts		                rts
.ba6e					ed_have_text:
.ba6e	a5 2e		lda $2e		                lda ed_head
.ba70	05 2f		ora $2f		                ora ed_head+1
.ba72	d0 04		bne $ba78	                bne +
.ba74	7a		ply		                ply
.ba75	7a		ply		                ply
.ba76	80 d7		bra $ba4f	                bra ed_error
.ba78					+
.ba78	60		rts		                rts
.ba79					ed_is_valid_line:
.ba79	38		sec		                sec                             ; default is legal line number
.ba7a	b5 00		lda $00,x	                lda 0,x
.ba7c	15 01		ora $01,x	                ora 1,x
.ba7e	f0 19		beq $ba99	                beq _is_valid_line_nope_zero    ; ( n )
.ba80	20 90 8d	jsr $8d90	                jsr xt_dup                      ; DUP ( n n )
.ba83	20 9b ba	jsr $ba9b	                jsr ed_last_line                  ; ( n n last )
.ba86	20 8f a1	jsr $a18f	                jsr xt_swap                     ; SWAP ( n last n )
.ba89	20 49 93	jsr $9349	                jsr xt_less_than                ; < ( n f )
.ba8c	b5 00		lda $00,x	                lda 0,x                         ; 0 flag is good
.ba8e	15 01		ora $01,x	                ora 1,x
.ba90	d0 05		bne $ba97	                bne _is_valid_line_too_small
.ba92	e8		inx		                inx
.ba93	e8		inx		                inx                     ; DROP flag ( n )
.ba94	38		sec		                sec                     ; Who knows what's happened to C by now
.ba95	80 03		bra $ba9a	                bra _is_valid_line_done ; only one exit from this routine
.ba97					_is_valid_line_too_small:
.ba97	e8		inx		                inx
.ba98	e8		inx		                inx                     ; drop through to _is_valid_line_zero
.ba99					_is_valid_line_nope_zero:
.ba99	18		clc		                clc                     ; drop through to _is_valid_line_done
.ba9a					_is_valid_line_done:
.ba9a	60		rts		                rts
.ba9b					ed_last_line:
.ba9b	64 24		stz $24		                stz tmp1
.ba9d	64 25		stz $25		                stz tmp1+1
.ba9f	ca		dex		                dex
.baa0	ca		dex		                dex                     ; ( ? )
.baa1	a9 2e		lda #$2e	                lda #<ed_head
.baa3	95 00		sta $00,x	                sta 0,x
.baa5	a9 00		lda #$00	                lda #>ed_head
.baa7	95 01		sta $01,x	                sta 1,x                 ; ( addr )
.baa9					_last_line_loop:
.baa9	20 61 8f	jsr $8f61	                jsr xt_fetch            ; ( addr | 0 )
.baac	b5 00		lda $00,x	                lda 0,x
.baae	15 01		ora $01,x	                ora 1,x
.bab0	f0 08		beq $baba	                beq _last_line_done
.bab2	e6 24		inc $24		                inc tmp1
.bab4	d0 02		bne $bab8	                bne +
.bab6	e6 25		inc $25		                inc tmp1+1
.bab8					+
.bab8	80 ef		bra $baa9	                bra _last_line_loop
.baba					_last_line_done:
.baba	a5 24		lda $24		                lda tmp1
.babc	95 00		sta $00,x	                sta 0,x
.babe	a5 25		lda $25		                lda tmp1+1
.bac0	95 01		sta $01,x	                sta 1,x                 ; ( u )
.bac2	60		rts		                rts
.bac3					ed_no_line_zero:
.bac3	b5 02		lda $02,x	                lda 2,x
.bac5	15 03		ora $03,x	                ora 3,x
.bac7	d0 07		bne $bad0	                bne _no_line_zero_done
.bac9	24 32		bit $32		                bit ed_flags
.bacb	10 03		bpl $bad0	                bpl _no_line_zero_done
.bacd	4c 4b ba	jmp $ba4b	                jmp ed_error_2drop
.bad0					_no_line_zero_done:
.bad0	60		rts		                rts
.bad1					ed_num_to_addr:
.bad1	ca		dex		                dex
.bad2	ca		dex		                dex                     ; ( u ? )
.bad3	a9 2e		lda #$2e	                lda #<ed_head
.bad5	95 00		sta $00,x	                sta 0,x
.bad7	a9 00		lda #$00	                lda #>ed_head
.bad9	95 01		sta $01,x	                sta 1,x                 ; ( u addr-h )
.badb	b5 02		lda $02,x	                lda 2,x
.badd	15 03		ora $03,x	                ora 3,x
.badf	d0 05		bne $bae6	                bne _num_to_addr_loop
.bae1	20 23 96	jsr $9623	                jsr xt_nip              ; ( addr-h )
.bae4	80 21		bra $bb07	                bra _num_to_addr_done
.bae6					_num_to_addr_loop:
.bae6	20 61 8f	jsr $8f61	                jsr xt_fetch            ; @ ( u addr1 )
.bae9	b5 00		lda $00,x	                lda 0,x
.baeb	15 01		ora $01,x	                ora 1,x
.baed	d0 05		bne $baf4	                bne +
.baef	20 23 96	jsr $9623	                jsr xt_nip              ; NIP ( addr1 )
.baf2	80 13		bra $bb07	                bra _num_to_addr_done
.baf4					+
.baf4	20 8f a1	jsr $a18f	                jsr xt_swap             ; SWAP ( addr1 u )
.baf7	20 f2 97	jsr $97f2	                jsr xt_one_minus        ; 1- ( addr1 u-1 )
.bafa	b5 00		lda $00,x	                lda 0,x
.bafc	15 01		ora $01,x	                ora 1,x
.bafe	f0 05		beq $bb05	                beq _num_to_addr_finished
.bb00	20 8f a1	jsr $a18f	                jsr xt_swap             ; SWAP ( u-1 addr1 )
.bb03	80 e1		bra $bae6	                bra _num_to_addr_loop
.bb05					_num_to_addr_finished:
.bb05	e8		inx		                inx
.bb06	e8		inx		                inx                     ; ( addr )
.bb07					_num_to_addr_done:
.bb07	60		rts		                rts
.bb08					ed_para1_to_cur:
.bb08	b5 02		lda $02,x	                lda 2,x
.bb0a	85 30		sta $30		                sta ed_cur
.bb0c	b5 03		lda $03,x	                lda 3,x
.bb0e	85 31		sta $31		                sta ed_cur+1
.bb10	60		rts		                rts
.bb11					ed_print_addr:
.bb11	20 fe 97	jsr $97fe	                jsr xt_one_plus
.bb14	20 fe 97	jsr $97fe	                jsr xt_one_plus         ; ( addr+2 )
.bb17	20 90 8d	jsr $8d90	                jsr xt_dup              ; ( addr+2 addr+2 )
.bb1a	20 fe 97	jsr $97fe	                jsr xt_one_plus
.bb1d	20 fe 97	jsr $97fe	                jsr xt_one_plus         ; ( addr+2 addr+4 )
.bb20	20 61 8f	jsr $8f61	                jsr xt_fetch            ; ( addr+2 u-s )
.bb23	20 8f a1	jsr $a18f	                jsr xt_swap             ; ( u-s addr+2 )
.bb26	20 61 8f	jsr $8f61	                jsr xt_fetch            ; ( u-s addr-s )
.bb29	20 8f a1	jsr $a18f	                jsr xt_swap             ; ( addr-s u-s )
.bb2c	20 e4 a4	jsr $a4e4	                jsr xt_type
.bb2f	20 44 89	jsr $8944	                jsr xt_cr
.bb32	60		rts		                rts
>bb33	61 66 69 64 70 6e 3d 77		ed_cmd_list:    .text "afidpn=wqQ", 0
>bb3b	71 51 00
.bb3e					ed_cmd_table:
>bb3e	83 b7 ca b8 fd b8 26 b8		                .word ed_cmd_a, ed_cmd_f, ed_cmd_i, ed_cmd_d, ed_cmd_p, ed_cmd_n
>bb46	25 b9 1e b9
>bb4a	8e b8 98 b9 89 b9 94 b9		                .word ed_cmd_equ, ed_cmd_w, ed_cmd_q, ed_cmd_qq
.bb52					ed6502_end:

;******  Return to file: platform/../taliforth.asm

.bb52					forth_words_start:
>bb52	20 63 72 20 2e 28 20 54		.binary "forth_words.asc"
>bb5a	61 6c 69 20 46 6f 72 74 68 20 32 20 66 6f 72 20
>bb6a	74 68 65 20 36 35 63 30 32 29 20 63 72 20 2e 28
>bb7a	20 56 65 72 73 69 6f 6e 20 31 2e 30 20 30 34 2e
>bb8a	20 44 65 63 20 32 30 32 32 20 29 20 63 72 20 2e
>bb9a	28 20 43 6f 70 79 72 69 67 68 74 20 32 30 31 34
>bbaa	2d 32 30 32 32 20 53 63 6f 74 20 57 2e 20 53 74
>bbba	65 76 65 6e 73 6f 6e 2c 20 53 61 6d 20 43 6f 6c
>bbca	77 65 6c 6c 29 20 63 72 20 2e 28 20 54 61 6c 69
>bbda	20 46 6f 72 74 68 20 32 20 63 6f 6d 65 73 20 77
>bbea	69 74 68 20 61 62 73 6f 6c 75 74 65 6c 79 20 4e
>bbfa	4f 20 57 41 52 52 41 4e 54 59 29 20 63 72 20 2e
>bc0a	28 20 54 79 70 65 20 27 62 79 65 27 20 74 6f 20
>bc1a	65 78 69 74 29 20 63 72 20
.bc23					forth_words_end:
.bc23					user_words_start:
>bc23	20 20				.binary "user_words.asc"
.bc25					user_words_end:

;******  Processing file: platform/../headers.asm

.bc25					dictionary_start:
.bc25					nt_drop:
>bc25	04 10				        .byte 4, UF
>bc27	31 bc 0f 8d 14 8d		        .word nt_dup, xt_drop, z_drop
>bc2d	64 72 6f 70			        .text "drop"
.bc31					nt_dup:
>bc31	03 10				        .byte 3, UF
>bc33	3c bc 90 8d 9d 8d		        .word nt_swap, xt_dup, z_dup
>bc39	64 75 70			        .text "dup"
.bc3c					nt_swap:
>bc3c	04 10				        .byte 4, UF
>bc3e	48 bc 8f a1 a2 a1		        .word nt_store, xt_swap, z_swap
>bc44	73 77 61 70			        .text "swap"
.bc48					nt_store:
>bc48	01 10				        .byte 1, UF
>bc4a	51 bc 6e a1 83 a1		        .word nt_fetch, xt_store, z_store
>bc50	21				        .text "!"
.bc51					nt_fetch:
>bc51	01 10				        .byte 1, UF
>bc53	5a bc 61 8f 73 8f		        .word nt_over, xt_fetch, z_fetch
>bc59	40				        .text "@"
.bc5a					nt_over:
>bc5a	04 10				        .byte 4, UF
>bc5c	66 bc 74 98 81 98		        .word nt_to_r, xt_over, z_over
>bc62	6f 76 65 72			        .text "over"
.bc66					nt_to_r:
>bc66	02 11				        .byte 2, CO+UF ; native is special case
>bc68	70 bc 51 a3 64 a3		        .word nt_r_from, xt_to_r, z_to_r
>bc6e	3e 72				        .text ">r"
.bc70					nt_r_from:
>bc70	02 01				        .byte 2, CO    ; native is special case
>bc72	7a bc 73 9a 83 9a		        .word nt_r_fetch, xt_r_from, z_r_from
>bc78	72 3e				        .text "r>"
.bc7a					nt_r_fetch:
>bc7a	02 01				        .byte 2, CO    ; native is special case
>bc7c	84 bc 5e 9a 72 9a		        .word nt_nip, xt_r_fetch, z_r_fetch
>bc82	72 40				        .text "r@"
.bc84					nt_nip:
>bc84	03 10				        .byte 3, UF
>bc86	8f bc 23 96 30 96		        .word nt_rot, xt_nip, z_nip
>bc8c	6e 69 70			        .text "nip"
.bc8f					nt_rot:
>bc8f	03 10				        .byte 3, UF
>bc91	9a bc 38 9b 53 9b		        .word nt_not_rote, xt_rot, z_rot
>bc97	72 6f 74			        .text "rot"
.bc9a					nt_not_rote:
>bc9a	04 10				        .byte 4, UF
>bc9c	a6 bc 4f 96 6a 96		        .word nt_tuck, xt_not_rote, z_not_rote
>bca2	2d 72 6f 74			        .text "-rot"
.bca6					nt_tuck:
>bca6	04 10				        .byte 4, UF
>bca8	b2 bc 6e a3 87 a3		        .word nt_comma, xt_tuck, z_tuck
>bcae	74 75 63 6b			        .text "tuck"
.bcb2					nt_comma:
>bcb2	01 10				        .byte 1, UF
>bcb4	bb bc 4f 87 68 87		        .word nt_c_fetch, xt_comma, z_comma
>bcba	2c				        .text ","
.bcbb					nt_c_fetch:
>bcbb	02 10				        .byte 2, UF
>bcbd	c5 bc ec 85 f5 85		        .word nt_c_store, xt_c_fetch, z_c_fetch
>bcc3	63 40				        .text "c@"
.bcc5					nt_c_store:
>bcc5	02 10				        .byte 2, UF
>bcc7	cf bc f6 85 01 86		        .word nt_plus_store, xt_c_store, z_c_store
>bccd	63 21				        .text "c!"
.bccf					nt_plus_store:
>bccf	02 10				        .byte 2, UF
>bcd1	d9 bc d7 99 f6 99		        .word nt_execute, xt_plus_store, z_plus_store
>bcd7	2b 21				        .text "+!"
.bcd9					nt_execute:
>bcd9	07 10				        .byte 7, UF
>bcdb	e8 bc 1e 8f 24 8f		        .word nt_emit, xt_execute, z_execute
>bce1	65 78 65 63 75 74 65		        .text "execute"
.bce8					nt_emit:
>bce8	04 18				        .byte 4, NN+UF
>bcea	f4 bc d0 8d da 8d		        .word nt_type, xt_emit, z_emit
>bcf0	65 6d 69 74			        .text "emit"
.bcf4					nt_type:
>bcf4	04 10				        .byte 4, UF
>bcf6	00 bd e4 a4 0e a5		        .word nt_dot, xt_type, z_type
>bcfc	74 79 70 65			        .text "type"
.bd00					nt_dot:
>bd00	01 10				        .byte 1, UF
>bd02	09 bd 17 8c 38 8c		        .word nt_u_dot, xt_dot, z_dot
>bd08	2e				        .text "."
.bd09					nt_u_dot:
>bd09	02 10				        .byte 2, UF
>bd0b	13 bd 0f a5 1a a5		        .word nt_u_dot_r, xt_u_dot, z_u_dot
>bd11	75 2e				        .text "u."
.bd13					nt_u_dot_r:
>bd13	03 10				        .byte 3, UF
>bd15	1e bd 1b a5 3c a5		        .word nt_dot_r, xt_u_dot_r, z_u_dot_r
>bd1b	75 2e 72			        .text "u.r"
.bd1e					nt_dot_r:
>bd1e	02 10				        .byte 2, UF
>bd20	28 bd 53 8c 80 8c		        .word nt_d_dot, xt_dot_r, z_dot_r
>bd26	2e 72				        .text ".r"
.bd28					nt_d_dot:
>bd28	02 10				        .byte 2, UF
>bd2a	32 bd c5 8c e3 8c		        .word nt_d_dot_r, xt_d_dot, z_d_dot
>bd30	64 2e				        .text "d."
.bd32					nt_d_dot_r:
>bd32	03 10				        .byte 3, UF
>bd34	3d bd e4 8c 0e 8d		        .word nt_ud_dot, xt_d_dot_r, z_d_dot_r
>bd3a	64 2e 72			        .text "d.r"
.bd3d					nt_ud_dot:
>bd3d	03 10				        .byte 3, UF
>bd3f	48 bd 69 a5 7b a5		        .word nt_ud_dot_r, xt_ud_dot, z_ud_dot
>bd45	75 64 2e			        .text "ud."
.bd48					nt_ud_dot_r:
>bd48	04 10				        .byte 4, UF
>bd4a	54 bd 7c a5 9a a5		        .word nt_question, xt_ud_dot_r, z_ud_dot_r
>bd50	75 64 2e 72			        .text "ud.r"
.bd54					nt_question:
>bd54	01 00				        .byte 1, 0
>bd56	5d bd 43 9a 49 9a		        .word nt_false, xt_question, z_question
>bd5c	3f				        .text "?"
.bd5d					nt_false:
>bd5d	05 00				        .byte 5, 0
>bd5f	6a bd 5a 8f 60 8f		        .word nt_true, xt_false, z_false
>bd65	66 61 6c 73 65			        .text "false"
.bd6a					nt_true:
>bd6a	04 00				        .byte 4, 0
>bd6c	76 bd 65 a3 6d a3		        .word nt_space, xt_true, z_true
>bd72	74 72 75 65			        .text "true"
.bd76					nt_space:
>bd76	05 00				        .byte 5, 0
>bd78	83 bd ff a0 04 a1		        .word nt_zero, xt_space, z_space
>bd7e	73 70 61 63 65			        .text "space"
.bd83					nt_zero:
>bd83	01 00				        .byte 1, 0
>bd85	8c bd 89 a7 8f a7		        .word nt_one, xt_zero, z_zero
>bd8b	30				        .text "0"
.bd8c					nt_one:
>bd8c	01 00				        .byte 1, 0
>bd8e	95 bd e9 97 f1 97		        .word nt_two, xt_one, z_one
>bd94	31				        .text "1"
.bd95					nt_two:
>bd95	01 00				        .byte 1, 0
>bd97	9e bd 88 a3 90 a3		        .word nt_two_dup, xt_two, z_two
>bd9d	32				        .text "2"
.bd9e					nt_two_dup:
>bd9e	04 10				        .byte 4, UF
>bda0	aa bd 99 a3 b0 a3		        .word nt_question_dup, xt_two_dup, z_two_dup
>bda6	32 64 75 70			        .text "2dup"
.bdaa					nt_question_dup:
>bdaa	04 10				        .byte 4, UF
>bdac	b6 bd 4a 9a 5d 9a		        .word nt_plus, xt_question_dup, z_question_dup
>bdb2	3f 64 75 70			        .text "?dup"
.bdb6					nt_plus:
>bdb6	01 10				        .byte 1, UF
>bdb8	bf bd c4 99 d6 99		        .word nt_minus, xt_plus, z_plus
>bdbe	2b				        .text "+"
.bdbf					nt_minus:
>bdbf	01 10				        .byte 1, UF
>bdc1	c8 bd 31 95 43 95		        .word nt_one_minus, xt_minus, z_minus
>bdc7	2d				        .text "-"
.bdc8					nt_one_minus:
>bdc8	02 10				        .byte 2, UF
>bdca	d2 bd f2 97 fd 97		        .word nt_one_plus, xt_one_minus, z_one_minus
>bdd0	31 2d				        .text "1-"
.bdd2					nt_one_plus:
>bdd2	02 10				        .byte 2, UF
>bdd4	dc bd fe 97 07 98		        .word nt_two_star, xt_one_plus, z_one_plus
>bdda	31 2b				        .text "1+"
.bddc					nt_two_star:
>bddc	02 10				        .byte 2, UF
>bdde	e6 bd 31 a4 38 a4		        .word nt_two_slash, xt_two_star, z_two_star
>bde4	32 2a				        .text "2*"
.bde6					nt_two_slash:
>bde6	02 10				        .byte 2, UF
>bde8	f0 bd 26 a4 30 a4		        .word nt_abs, xt_two_slash, z_two_slash
>bdee	32 2f				        .text "2/"
.bdf0					nt_abs:
>bdf0	03 10				        .byte 3, UF
>bdf2	fb bd 1a 81 2e 81		        .word nt_dabs, xt_abs, z_abs
>bdf8	61 62 73			        .text "abs"
.bdfb					nt_dabs:
>bdfb	04 10				        .byte 4, UF
>bdfd	07 be 67 8a 85 8a		        .word nt_and, xt_dabs, z_dabs
>be03	64 61 62 73			        .text "dabs"
.be07					nt_and:
>be07	03 10				        .byte 3, UF
>be09	12 be 1f 83 30 83		        .word nt_or, xt_and, z_and
>be0f	61 6e 64			        .text "and"
.be12					nt_or:
>be12	02 10				        .byte 2, UF
>be14	1c be 14 98 25 98		        .word nt_xor, xt_or, z_or
>be1a	6f 72				        .text "or"
.be1c					nt_xor:
>be1c	03 10				        .byte 3, UF
>be1e	27 be 77 a7 88 a7		        .word nt_rshift, xt_xor, z_xor
>be24	78 6f 72			        .text "xor"
.be27					nt_rshift:
>be27	06 10				        .byte 6, UF
>be29	35 be 54 9b 67 9b		        .word nt_lshift, xt_rshift, z_rshift
>be2f	72 73 68 69 66 74		        .text "rshift"
.be35					nt_lshift:
>be35	06 10				        .byte 6, UF
>be37	43 be 5b 94 6e 94		        .word nt_pick, xt_lshift, z_lshift
>be3d	6c 73 68 69 66 74		        .text "lshift"
.be43					nt_pick:
>be43	04 00				        .byte 4, 0    ; underflow check is complicated, leave off here
>be45	4f be b3 99 c3 99		        .word nt_char, xt_pick, z_pick
>be4b	70 69 63 6b			        .text "pick"
.be4f					nt_char:
>be4f	04 00				        .byte 4, 0
>be51	5b be 12 86 28 86		        .word nt_bracket_char, xt_char, z_char
>be57	63 68 61 72			        .text "char"
.be5b					nt_bracket_char:
>be5b	06 05				        .byte 6, CO+IM
>be5d	69 be 78 85 7e 85		        .word nt_char_plus, xt_bracket_char, z_bracket_char
>be63	5b 63 68 61 72 5d		        .text "[char]"
.be69					nt_char_plus:
>be69	05 00				        .byte 5, 0
>be6b	76 be fe 97 07 98		        .word nt_chars, xt_one_plus, z_one_plus ; same as 1+
>be71	63 68 61 72 2b			        .text "char+"
.be76					nt_chars:
>be76	05 12				        .byte 5, AN+UF   ; deleted during compile
>be78	83 be 29 86 2c 86		        .word nt_cells, xt_chars, z_chars
>be7e	63 68 61 72 73			        .text "chars"
.be83					nt_cells:
>be83	05 00				        .byte 5, 0
>be85	90 be 31 a4 38 a4		        .word nt_cell_plus, xt_two_star, z_two_star  ; same as 2*
>be8b	63 65 6c 6c 73			        .text "cells"
.be90					nt_cell_plus:
>be90	05 10				        .byte 5, UF
>be92	9d be 02 86 11 86		        .word nt_here, xt_cell_plus, z_cell_plus
>be98	63 65 6c 6c 2b			        .text "cell+"
.be9d					nt_here:
>be9d	04 00				        .byte 4, 0
>be9f	a9 be 53 91 5d 91		        .word nt_equal, xt_here, z_here
>bea5	68 65 72 65			        .text "here"
.bea9					nt_equal:
>bea9	01 10				        .byte 1, UF
>beab	b2 be af 8e ca 8e		        .word nt_not_equals, xt_equal, z_equal
>beb1	3d				        .text "="
.beb2					nt_not_equals:
>beb2	02 10				        .byte 2, UF
>beb4	bc be 31 96 4e 96		        .word nt_less_than, xt_not_equals, z_not_equals
>beba	3c 3e				        .text "<>"
.bebc					nt_less_than:
>bebc	01 10				        .byte 1, UF
>bebe	c5 be 49 93 5d 93		        .word nt_u_less_than, xt_less_than, z_less_than
>bec4	3c				        .text "<"
.bec5					nt_u_less_than:
>bec5	02 10				        .byte 2, UF
>bec7	cf be 53 a5 68 a5		        .word nt_u_greater_than, xt_u_less_than, z_u_less_than
>becd	75 3c				        .text "u<"
.becf					nt_u_greater_than:
>becf	02 10				        .byte 2, UF
>bed1	d9 be 3d a5 52 a5		        .word nt_greater_than, xt_u_greater_than, z_u_greater_than
>bed7	75 3e				        .text "u>"
.bed9					nt_greater_than:
>bed9	01 10				        .byte 1, UF
>bedb	e2 be 3e 91 52 91		        .word nt_zero_equal, xt_greater_than, z_greater_than
>bee1	3e				        .text ">"
.bee2					nt_zero_equal:
>bee2	02 10				        .byte 2, UF
>bee4	ec be 90 a7 a3 a7		        .word nt_zero_unequal, xt_zero_equal, z_zero_equal
>beea	30 3d				        .text "0="
.beec					nt_zero_unequal:
>beec	03 10				        .byte 3, UF
>beee	f7 be c8 a7 d9 a7		        .word nt_zero_greater, xt_zero_unequal, z_zero_unequal
>bef4	30 3c 3e			        .text "0<>"
.bef7					nt_zero_greater:
>bef7	02 10				        .byte 2, UF
>bef9	01 bf a4 a7 b7 a7		        .word nt_zero_less, xt_zero_greater, z_zero_greater
>beff	30 3e				        .text "0>"
.bf01					nt_zero_less:
>bf01	02 10				        .byte 2, UF
>bf03	0b bf b8 a7 c7 a7		        .word nt_min, xt_zero_less, z_zero_less
>bf09	30 3c				        .text "0<"
.bf0b					nt_min:
>bf0b	03 10				        .byte 3, UF
>bf0d	16 bf 15 95 30 95		        .word nt_max, xt_min, z_min
>bf13	6d 69 6e			        .text "min"
.bf16					nt_max:
>bf16	03 10				        .byte 3, UF
>bf18	21 bf f9 94 14 95		        .word nt_two_drop, xt_max, z_max
>bf1e	6d 61 78			        .text "max"
.bf21					nt_two_drop:
>bf21	05 10				        .byte 5, UF
>bf23	2e bf 91 a3 98 a3		        .word nt_two_swap, xt_two_drop, z_two_drop
>bf29	32 64 72 6f 70			        .text "2drop"
.bf2e					nt_two_swap:
>bf2e	05 10				        .byte 5, UF
>bf30	3b bf 5f a4 82 a4		        .word nt_two_over, xt_two_swap, z_two_swap
>bf36	32 73 77 61 70			        .text "2swap"
.bf3b					nt_two_over:
>bf3b	05 10				        .byte 5, UF
>bf3d	48 bf d3 a3 ea a3		        .word nt_two_store, xt_two_over, z_two_over
>bf43	32 6f 76 65 72			        .text "2over"
.bf48					nt_two_store:
>bf48	02 10				        .byte 2, UF
>bf4a	52 bf 39 a4 5e a4		        .word nt_two_fetch, xt_two_store, z_two_store
>bf50	32 21				        .text "2!"
.bf52					nt_two_fetch:
>bf52	02 10				        .byte 2, UF
>bf54	5c bf b1 a3 d2 a3		        .word nt_two_variable, xt_two_fetch, z_two_fetch
>bf5a	32 40				        .text "2@"
.bf5c					nt_two_variable:
>bf5c	09 00				        .byte 9, 0
>bf5e	6d bf d5 a4 e3 a4		        .word nt_two_constant, xt_two_variable, z_two_variable
>bf64	32 76 61 72 69 61 62 6c		        .text "2variable"
>bf6c	65
.bf6d					nt_two_constant:
>bf6d	09 10				        .byte 9, UF
>bf6f	7e bf a3 a4 c7 a4		        .word nt_two_literal, xt_two_constant, z_two_constant
>bf75	32 63 6f 6e 73 74 61 6e		        .text "2constant"
>bf7d	74
.bf7e					nt_two_literal:
>bf7e	08 14				        .byte 8, UF+IM
>bf80	8e bf c8 a4 d4 a4		        .word nt_two_r_fetch, xt_two_literal, z_two_literal
>bf86	32 6c 69 74 65 72 61 6c		        .text "2literal"
.bf8e					nt_two_r_fetch:
>bf8e	03 09				        .byte 3, CO+NN          ; native is special case, leave NN for now
>bf90	99 bf eb a3 08 a4		        .word nt_two_r_from, xt_two_r_fetch, z_two_r_fetch
>bf96	32 72 40			        .text "2r@"
.bf99					nt_two_r_from:
>bf99	03 01				        .byte 3, CO             ; native is special case
>bf9b	a4 bf 09 a4 25 a4		        .word nt_two_to_r, xt_two_r_from, z_two_r_from
>bfa1	32 72 3e			        .text "2r>"
.bfa4					nt_two_to_r:
>bfa4	03 11				        .byte 3, CO+UF          ; native is special case
>bfa6	af bf 83 a4 a2 a4		        .word nt_invert, xt_two_to_r, z_two_to_r
>bfac	32 3e 72			        .text "2>r"
.bfaf					nt_invert:
>bfaf	06 10				        .byte 6, UF
>bfb1	bd bf cc 92 db 92		        .word nt_negate, xt_invert, z_invert
>bfb7	69 6e 76 65 72 74		        .text "invert"
.bfbd					nt_negate:
>bfbd	06 10				        .byte 6, UF
>bfbf	cb bf 04 96 14 96		        .word nt_dnegate, xt_negate, z_negate
>bfc5	6e 65 67 61 74 65		        .text "negate"
.bfcb					nt_dnegate:
>bfcb	07 10				        .byte 7, UF
>bfcd	da bf 22 8b 3c 8b		        .word nt_c_comma, xt_dnegate, z_dnegate
>bfd3	64 6e 65 67 61 74 65		        .text "dnegate"
.bfda					nt_c_comma:
>bfda	02 10				        .byte 2, UF
>bfdc	e4 bf e1 85 eb 85		        .word nt_bounds, xt_c_comma, z_c_comma
>bfe2	63 2c				        .text "c,"
.bfe4					nt_bounds:
>bfe4	06 10				        .byte 6, UF
>bfe6	f2 bf 5f 85 77 85		        .word nt_spaces, xt_bounds, z_bounds
>bfec	62 6f 75 6e 64 73		        .text "bounds"
.bff2					nt_spaces:
>bff2	06 10				        .byte 6, UF
>bff4	00 c0 05 a1 40 a1		        .word nt_bl, xt_spaces, z_spaces
>bffa	73 70 61 63 65 73		        .text "spaces"
.c000					nt_bl:
>c000	02 00				        .byte 2, 0
>c002	0a c0 7b 83 83 83		        .word nt_minus_trailing, xt_bl, z_bl
>c008	62 6c				        .text "bl"
.c00a					nt_minus_trailing:
>c00a	09 10				        .byte 9, UF
>c00c	1b c0 5d 95 99 95		        .word nt_minus_leading, xt_minus_trailing, z_minus_trailing
>c012	2d 74 72 61 69 6c 69 6e		        .text "-trailing"
>c01a	67
.c01b					nt_minus_leading:
>c01b	08 10				        .byte 8, UF
>c01d	2b c0 44 95 5c 95		        .word nt_slash_string, xt_minus_leading, z_minus_leading
>c023	2d 6c 65 61 64 69 6e 67		        .text "-leading"
.c02b					nt_slash_string:
>c02b	07 10				        .byte 7, UF
>c02d	3a c0 fa 9f 19 a0		        .word nt_refill, xt_slash_string, z_slash_string
>c033	2f 73 74 72 69 6e 67		        .text "/string"
.c03a					nt_refill:
>c03a	06 00				        .byte 6, 0
>c03c	48 c0 d9 9a 1a 9b		        .word nt_accept, xt_refill, z_refill
>c042	72 65 66 69 6c 6c		        .text "refill"
.c048					nt_accept:
>c048	06 18				        .byte 6, UF+NN
>c04a	56 c0 2f 81 27 82		        .word nt_input_to_r, xt_accept, z_accept
>c050	61 63 63 65 70 74		        .text "accept"
.c056					nt_input_to_r:
>c056	07 08				        .byte 7, NN
>c058	65 c0 43 92 58 92		        .word nt_r_to_input, xt_input_to_r, z_input_to_r
>c05e	69 6e 70 75 74 3e 72		        .text "input>r"
.c065					nt_r_to_input:
>c065	07 08				        .byte 7, NN
>c067	74 c0 84 9a 9b 9a		        .word nt_unused, xt_r_to_input, z_r_to_input
>c06d	72 3e 69 6e 70 75 74		        .text "r>input"
.c074					nt_unused:
>c074	06 00				        .byte 6, 0
>c076	82 c0 35 a6 44 a6		        .word nt_depth, xt_unused, z_unused
>c07c	75 6e 75 73 65 64		        .text "unused"
.c082					nt_depth:
>c082	05 00				        .byte 5, 0
>c084	8f c0 d7 8a e5 8a		        .word nt_key, xt_depth, z_depth
>c08a	64 65 70 74 68			        .text "depth"
.c08f					nt_key:
>c08f	03 00				        .byte 3, 0
>c091	9a c0 0f 93 18 93		        .word nt_allot, xt_key, z_key
>c097	6b 65 79			        .text "key"
.c09a					nt_allot:
>c09a	05 10				        .byte 5, UF
>c09c	a7 c0 8c 82 f4 82		        .word nt_create, xt_allot, z_allot
>c0a2	61 6c 6c 6f 74			        .text "allot"
.c0a7					nt_create:
>c0a7	06 00				        .byte 6, 0
>c0a9	b5 c0 4a 89 1e 8a		        .word nt_does, xt_create, z_create
>c0af	63 72 65 61 74 65		        .text "create"
.c0b5					nt_does:
>c0b5	05 05				        .byte 5, CO+IM
>c0b7	c2 c0 d6 8b e4 8b		        .word nt_variable, xt_does, z_does
>c0bd	64 6f 65 73 3e			        .text "does>"
.c0c2					nt_variable:
>c0c2	08 00				        .byte 8, 0
>c0c4	d2 c0 59 a6 71 a6		        .word nt_constant, xt_variable, z_variable
>c0ca	76 61 72 69 61 62 6c 65		        .text "variable"
.c0d2					nt_constant:
>c0d2	08 10				        .byte 8, UF
>c0d4	e2 c0 f2 88 2f 89		        .word nt_value, xt_constant, z_constant
>c0da	63 6f 6e 73 74 61 6e 74		        .text "constant"
.c0e2					nt_value:
>c0e2	05 10				        .byte 5, UF
>c0e4	ef c0 f2 88 2f 89		        .word nt_to, xt_constant, z_constant
>c0ea	76 61 6c 75 65			        .text "value"
.c0ef					nt_to:
>c0ef	02 0c				        .byte 2, NN+IM
>c0f1	f9 c0 12 a2 6d a2		        .word nt_s_to_d, xt_to, z_to
>c0f7	74 6f				        .text "to"
.c0f9					nt_s_to_d:
>c0f9	03 10				        .byte 3, UF
>c0fb	04 c1 8d 9e 9e 9e		        .word nt_d_to_s, xt_s_to_d, z_s_to_d
>c101	73 3e 64			        .text "s>d"
.c104					nt_d_to_s:
>c104	03 10				        .byte 3, UF
>c106	0f c1 61 8a 66 8a		        .word nt_d_minus, xt_d_to_s, z_d_to_s
>c10c	64 3e 73			        .text "d>s"
.c10f					nt_d_minus:
>c10f	02 10				        .byte 2, UF
>c111	19 c1 1f 8a 3f 8a		        .word nt_d_plus, xt_d_minus, z_d_minus
>c117	64 2d				        .text "d-"
.c119					nt_d_plus:
>c119	02 10				        .byte 2, UF
>c11b	23 c1 40 8a 60 8a		        .word nt_erase, xt_d_plus, z_d_plus
>c121	64 2b				        .text "d+"
.c123					nt_erase:
>c123	05 00				        .byte 5, 0      ; underflow checked by FILL
>c125	30 c1 d5 8e 1d 8f		        .word nt_blank, xt_erase, z_erase
>c12b	65 72 61 73 65			        .text "erase"
.c130					nt_blank:
>c130	05 00				        .byte 5, 0     ; underflow checked by FILL
>c132	3d c1 cb 8e 1d 8f		        .word nt_fill, xt_blank, z_blank
>c138	62 6c 61 6e 6b			        .text "blank"
.c13d					nt_fill:
>c13d	04 10				        .byte 4, UF
>c13f	49 c1 db 8e 1d 8f		        .word nt_find_name, xt_fill, z_fill
>c145	66 69 6c 6c			        .text "fill"
.c149					nt_find_name:
>c149	09 10				        .byte 9, UF
>c14b	5a c1 bc 8f 67 90		        .word nt_tick, xt_find_name, z_find_name
>c151	66 69 6e 64 2d 6e 61 6d		        .text "find-name"
>c159	65
.c15a					nt_tick:
>c15a	01 00				        .byte 1, 0
>c15c	63 c1 f2 a1 11 a2		        .word nt_bracket_tick, xt_tick, z_tick
>c162	27				        .text "'"
.c163					nt_bracket_tick:
>c163	03 05				        .byte 3, CO+IM
>c165	6e c1 7f 85 85 85		        .word nt_name_to_int, xt_bracket_tick, z_bracket_tick
>c16b	5b 27 5d			        .text "[']"
.c16e					nt_name_to_int:
>c16e	08 10				        .byte 8, UF
>c170	7e c1 c2 95 de 95		        .word nt_int_to_name, xt_name_to_int, z_name_to_int
>c176	6e 61 6d 65 3e 69 6e 74		        .text "name>int"
.c17e					nt_int_to_name:
>c17e	08 10				        .byte 8, UF
>c180	8e c1 59 92 cb 92		        .word nt_name_to_string, xt_int_to_name, z_int_to_name
>c186	69 6e 74 3e 6e 61 6d 65		        .text "int>name"
.c18e					nt_name_to_string:
>c18e	0b 10				        .byte 11, UF
>c190	a1 c1 df 95 f8 95		        .word nt_to_body, xt_name_to_string, z_name_to_string
>c196	6e 61 6d 65 3e 73 74 72		        .text "name>string"
>c19e	69 6e 67
.c1a1					nt_to_body:
>c1a1	05 10				        .byte 5, UF
>c1a3	ae c1 6e a2 92 a2		        .word nt_defer, xt_to_body, z_to_body
>c1a9	3e 62 6f 64 79			        .text ">body"
.c1ae					nt_defer:
>c1ae	05 00				        .byte 5, 0
>c1b0	bb c1 8d 8a bf 8a		        .word nt_latestxt, xt_defer, z_defer
>c1b6	64 65 66 65 72			        .text "defer"
.c1bb					nt_latestxt:
>c1bb	08 00				        .byte 8, 0
>c1bd	cb c1 2a 93 30 93		        .word nt_latestnt, xt_latestxt, z_latestxt
>c1c3	6c 61 74 65 73 74 78 74		        .text "latestxt"
.c1cb					nt_latestnt:
>c1cb	08 00				        .byte 8, 0
>c1cd	db c1 1c 93 29 93		        .word nt_parse_name, xt_latestnt, z_latestnt
>c1d3	6c 61 74 65 73 74 6e 74		        .text "latestnt"
.c1db					nt_parse_name:
>c1db	0a 08				        .byte 10, NN
>c1dd	ed c1 c0 98 b2 99		        .word nt_parse, xt_parse_name, z_parse_name
>c1e3	70 61 72 73 65 2d 6e 61		        .text "parse-name"
>c1eb	6d 65
.c1ed					nt_parse:
>c1ed	05 10				        .byte 5, UF
>c1ef	fa c1 1b 99 b2 99		        .word nt_execute_parsing, xt_parse, z_parse
>c1f5	70 61 72 73 65			        .text "parse"
.c1fa					nt_execute_parsing:
>c1fa	0f 10				        .byte 15, UF
>c1fc	11 c2 32 8f 58 8f		        .word nt_source, xt_execute_parsing, z_execute_parsing
>c202	65 78 65 63 75 74 65 2d		        .text "execute-parsing"
>c20a	70 61 72 73 69 6e 67
.c211					nt_source:
>c211	06 00				        .byte 6, 0
>c213	1f c2 df a0 f3 a0		        .word nt_source_id, xt_source, z_source
>c219	73 6f 75 72 63 65		        .text "source"
.c21f					nt_source_id:
>c21f	09 00				        .byte 9, 0
>c221	30 c2 f4 a0 fe a0		        .word nt_colon, xt_source_id, z_source_id
>c227	73 6f 75 72 63 65 2d 69		        .text "source-id"
>c22f	64
.c230					nt_colon:
>c230	01 00				        .byte 1, 0
>c232	39 c2 f0 86 32 87		        .word nt_semicolon, xt_colon, z_colon
>c238	3a				        .text ":"
.c239					nt_semicolon:
>c239	01 05				        .byte 1, CO+IM
>c23b	42 c2 69 9f c7 9f		        .word nt_colon_noname, xt_semicolon, z_semicolon
>c241	3b				        .text ";"
.c242					nt_colon_noname:
>c242	07 00				        .byte 7, 0
>c244	51 c2 33 87 4e 87		        .word nt_compile_comma, xt_colon_noname, z_colon_noname
>c24a	3a 6e 6f 6e 61 6d 65		        .text ":noname"
.c251					nt_compile_comma:
>c251	08 18				        .byte 8, UF+NN
>c253	61 c2 ce 87 e5 88		        .word nt_left_bracket, xt_compile_comma, z_compile_comma
>c259	63 6f 6d 70 69 6c 65 2c		        .text "compile,"
.c261					nt_left_bracket:
>c261	01 05				        .byte 1, IM+CO
>c263	6a c2 36 93 3a 93		        .word nt_right_bracket, xt_left_bracket, z_left_bracket
>c269	5b				        .text "["
.c26a					nt_right_bracket:
>c26a	01 04				        .byte 1, IM
>c26c	73 c2 28 9b 2e 9b		        .word nt_literal, xt_right_bracket, z_right_bracket
>c272	5d				        .text "]"
.c273					nt_literal:
>c273	07 15				        .byte 7, IM+CO+UF
>c275	82 c2 6b 93 78 93		        .word nt_sliteral, xt_literal, z_literal
>c27b	6c 69 74 65 72 61 6c		        .text "literal"
.c282					nt_sliteral:
>c282	08 15				        .byte 8, CO+IM+UF
>c284	92 c2 1a a0 89 a0		        .word nt_dot_quote, xt_sliteral, z_sliteral
>c28a	73 6c 69 74 65 72 61 6c		        .text "sliteral"
.c292					nt_dot_quote:
>c292	02 05				        .byte 2, CO+IM
>c294	9c c2 48 8c 52 8c		        .word nt_s_quote, xt_dot_quote, z_dot_quote
>c29a	2e 22				        .text ".", $22
.c29c					nt_s_quote:
>c29c	02 0c				        .byte 2, IM+NN
>c29e	a6 c2 30 9d 8c 9e		        .word nt_s_backslash_quote, xt_s_quote, z_s_quote
>c2a4	73 22				        .text "s", $22
.c2a6					nt_s_backslash_quote:
>c2a6	03 04				        .byte 3, IM
>c2a8	b1 c2 68 9b 71 9b		        .word nt_postpone, xt_s_backslash_quote, z_s_backslash_quote
>c2ae	73 5c 22			        .text "s", $5C, $22
.c2b1					nt_postpone:
>c2b1	08 05				        .byte 8, IM+CO
>c2b3	c1 c2 f7 99 35 9a		        .word nt_immediate, xt_postpone, z_postpone
>c2b9	70 6f 73 74 70 6f 6e 65		        .text "postpone"
.c2c1					nt_immediate:
>c2c1	09 00				        .byte 9, 0
>c2c3	d2 c2 2c 92 37 92		        .word nt_compile_only, xt_immediate, z_immediate
>c2c9	69 6d 6d 65 64 69 61 74		        .text "immediate"
>c2d1	65
.c2d2					nt_compile_only:
>c2d2	0c 00				        .byte 12, 0
>c2d4	e6 c2 e6 88 f1 88		        .word nt_never_native, xt_compile_only, z_compile_only
>c2da	63 6f 6d 70 69 6c 65 2d		        .text "compile-only"
>c2e2	6f 6e 6c 79
.c2e6					nt_never_native:
>c2e6	0c 00				        .byte 12, 0
>c2e8	fa c2 15 96 22 96		        .word nt_always_native, xt_never_native, z_never_native
>c2ee	6e 65 76 65 72 2d 6e 61		        .text "never-native"
>c2f6	74 69 76 65
.c2fa					nt_always_native:
>c2fa	0d 00				        .byte 13, 0
>c2fc	0f c3 11 83 1e 83		        .word nt_allow_native, xt_always_native, z_always_native
>c302	61 6c 77 61 79 73 2d 6e		        .text "always-native"
>c30a	61 74 69 76 65
.c30f					nt_allow_native:
>c30f	0c 00				        .byte 12, 0
>c311	23 c3 f5 82 00 83		        .word nt_nc_limit, xt_allow_native, z_allow_native
>c317	61 6c 6c 6f 77 2d 6e 61		        .text "allow-native"
>c31f	74 69 76 65
.c323					nt_nc_limit:
>c323	08 00				        .byte 8, 0
>c325	33 c3 f9 95 03 96		        .word nt_strip_underflow, xt_nc_limit, z_nc_limit
>c32b	6e 63 2d 6c 69 6d 69 74		        .text "nc-limit"
.c333					nt_strip_underflow:
>c333	0f 00				        .byte 15, 0
>c335	4a c3 84 a1 8e a1		        .word nt_abort, xt_strip_underflow, z_strip_underflow
>c33b	73 74 72 69 70 2d 75 6e		        .text "strip-underflow"
>c343	64 65 72 66 6c 6f 77
.c34a					nt_abort:
>c34a	05 00				        .byte 5, 0
>c34c	57 c3 60 80 a4 80		        .word nt_abort_quote, xt_abort, z_abort
>c352	61 62 6f 72 74			        .text "abort"
.c357					nt_abort_quote:
>c357	06 0d				        .byte 6, CO+IM+NN
>c359	65 c3 fa 80 04 81		        .word nt_do, xt_abort_quote, z_abort_quote
>c35f	61 62 6f 72 74 22		        .text "abort", $22
.c365					nt_do:
>c365	02 0d				        .byte 2, CO+IM+NN
>c367	6f c3 43 8b 9d 8b		        .word nt_question_do, xt_do, z_do
>c36d	64 6f				        .text "do"
.c36f					nt_question_do:
>c36f	03 0d				        .byte 3, CO+IM+NN
>c371	7a c3 3d 8b 9d 8b		        .word nt_i, xt_question_do, z_question_do
>c377	3f 64 6f			        .text "?do"
.c37a					nt_i:
>c37a	01 03				        .byte 1, AN+CO
>c37c	83 c3 ca 91 e3 91		        .word nt_j, xt_i, z_i
>c382	69				        .text "i"
.c383					nt_j:
>c383	01 03				        .byte 1, AN+CO
>c385	8c c3 f5 92 0e 93		        .word nt_loop, xt_j, z_j
>c38b	6a				        .text "j"
.c38c					nt_loop:
>c38c	04 05				        .byte 4, CO+IM
>c38e	98 c3 dc 93 49 94		        .word nt_plus_loop, xt_loop, z_loop
>c394	6c 6f 6f 70			        .text "loop"
.c398					nt_plus_loop:
>c398	05 05				        .byte 5, CO+IM
>c39a	a5 c3 e3 93 49 94		        .word nt_exit, xt_plus_loop, z_plus_loop
>c3a0	2b 6c 6f 6f 70			        .text "+loop"
.c3a5					nt_exit:
>c3a5	04 03				        .byte 4, AN+CO
>c3a7	b1 c3 59 8f 5a 8f		        .word nt_unloop, xt_exit, z_exit
>c3ad	65 78 69 74			        .text "exit"
.c3b1					nt_unloop:
>c3b1	06 03				        .byte 6, AN+CO
>c3b3	bf c3 23 a6 29 a6		        .word nt_leave, xt_unloop, z_unloop
>c3b9	75 6e 6c 6f 6f 70		        .text "unloop"
.c3bf					nt_leave:
>c3bf	05 03				        .byte 5, AN+CO
>c3c1	cc c3 31 93 36 93		        .word nt_recurse, xt_leave, z_leave
>c3c7	6c 65 61 76 65			        .text "leave"
.c3cc					nt_recurse:
>c3cc	07 0d				        .byte 7, CO+IM+NN
>c3ce	db c3 9c 9a d8 9a		        .word nt_quit, xt_recurse, z_recurse
>c3d4	72 65 63 75 72 73 65		        .text "recurse"
.c3db					nt_quit:
>c3db	04 00				        .byte 4, 0
>c3dd	e7 c3 62 80 a4 80		        .word nt_begin, xt_quit, z_quit
>c3e3	71 75 69 74			        .text "quit"
.c3e7					nt_begin:
>c3e7	05 07				        .byte 5, AN+CO+IM
>c3e9	f4 c3 71 83 74 83		        .word nt_again, xt_begin, z_begin
>c3ef	62 65 67 69 6e			        .text "begin"
.c3f4					nt_again:
>c3f4	05 17				        .byte 5, AN+CO+IM+UF
>c3f6	01 c4 6a 82 8a 82		        .word nt_state, xt_again, z_again
>c3fc	61 67 61 69 6e			        .text "again"
.c401					nt_state:
>c401	05 00				        .byte 5, 0
>c403	0e c4 63 a1 6d a1		        .word nt_evaluate, xt_state, z_state
>c409	73 74 61 74 65			        .text "state"
.c40e					nt_evaluate:
>c40e	08 10				        .byte 8, UF
>c410	1e c4 b6 90 09 91		        .word nt_base, xt_evaluate, z_evaluate
>c416	65 76 61 6c 75 61 74 65		        .text "evaluate"
.c41e					nt_base:
>c41e	04 00				        .byte 4, 0
>c420	2a c4 68 83 70 83		        .word nt_digit_question, xt_base, z_base
>c426	62 61 73 65			        .text "base"
.c42a					nt_digit_question:
>c42a	06 10				        .byte 6, UF
>c42c	38 c4 e6 8a 1a 8b		        .word nt_number, xt_digit_question, z_digit_question
>c432	64 69 67 69 74 3f		        .text "digit?"
.c438					nt_number:
>c438	06 10				        .byte 6, UF
>c43a	46 c4 6b 96 67 97		        .word nt_to_number, xt_number, z_number
>c440	6e 75 6d 62 65 72		        .text "number"
.c446					nt_to_number:
>c446	07 10				        .byte 7, UF
>c448	55 c4 9e a2 3d a3		        .word nt_hex, xt_to_number, z_to_number
>c44e	3e 6e 75 6d 62 65 72		        .text ">number"
.c455					nt_hex:
>c455	03 00				        .byte 3, 0
>c457	60 c4 5e 91 64 91		        .word nt_decimal, xt_hex, z_hex
>c45d	68 65 78			        .text "hex"
.c460					nt_decimal:
>c460	07 00				        .byte 7, 0
>c462	6f c4 86 8a 8c 8a		        .word nt_count, xt_decimal, z_decimal
>c468	64 65 63 69 6d 61 6c		        .text "decimal"
.c46f					nt_count:
>c46f	05 10				        .byte 5, UF
>c471	7c c4 30 89 43 89		        .word nt_m_star, xt_count, z_count
>c477	63 6f 75 6e 74			        .text "count"
.c47c					nt_m_star:
>c47c	02 10				        .byte 2, UF
>c47e	86 c4 6f 94 89 94		        .word nt_um_star, xt_m_star, z_m_star
>c484	6d 2a				        .text "m*"
.c486					nt_um_star:
>c486	03 10				        .byte 3, UF
>c488	91 c4 dd a5 22 a6		        .word nt_star, xt_um_star, z_um_star
>c48e	75 6d 2a			        .text "um*"
.c491					nt_star:
>c491	01 10				        .byte 1, UF
>c493	9a c4 41 a1 49 a1		        .word nt_um_slash_mod, xt_star, z_star
>c499	2a				        .text "*"
.c49a					nt_um_slash_mod:
>c49a	06 10				        .byte 6, UF
>c49c	a8 c4 9b a5 dc a5		        .word nt_sm_slash_rem, xt_um_slash_mod, z_um_slash_mod
>c4a2	75 6d 2f 6d 6f 64		        .text "um/mod"
.c4a8					nt_sm_slash_rem:
>c4a8	06 10				        .byte 6, UF
>c4aa	b6 c4 b6 a0 de a0		        .word nt_fm_slash_mod, xt_sm_slash_rem, z_sm_slash_rem
>c4b0	73 6d 2f 72 65 6d		        .text "sm/rem"
.c4b6					nt_fm_slash_mod:
>c4b6	06 10				        .byte 6, UF
>c4b8	c4 c4 72 90 a8 90		        .word nt_slash, xt_fm_slash_mod, z_fm_slash_mod
>c4be	66 6d 2f 6d 6f 64		        .text "fm/mod"
.c4c4					nt_slash:
>c4c4	01 10				        .byte 1, UF
>c4c6	cd c4 dd 9f f9 9f		        .word nt_slash_mod, xt_slash, z_slash
>c4cc	2f				        .text "/"
.c4cd					nt_slash_mod:
>c4cd	04 10				        .byte 4, UF
>c4cf	d9 c4 e2 9f f9 9f		        .word nt_mod, xt_slash_mod, z_slash_mod
>c4d5	2f 6d 6f 64			        .text "/mod"
.c4d9					nt_mod:
>c4d9	03 10				        .byte 3, UF
>c4db	e4 c4 9a 95 a2 95		        .word nt_star_slash_mod, xt_mod, z_mod
>c4e1	6d 6f 64			        .text "mod"
.c4e4					nt_star_slash_mod:
>c4e4	05 10				        .byte 5, UF
>c4e6	f1 c4 53 a1 62 a1		        .word nt_star_slash, xt_star_slash_mod, z_star_slash_mod
>c4ec	2a 2f 6d 6f 64			        .text "*/mod"
.c4f1					nt_star_slash:
>c4f1	02 10				        .byte 2, UF
>c4f3	fb c4 4a a1 52 a1		        .word nt_backslash, xt_star_slash, z_star_slash
>c4f9	2a 2f				        .text "*/"
.c4fb					nt_backslash:
>c4fb	01 04				        .byte 1, IM
>c4fd	04 c5 5f 83 67 83		        .word nt_move, xt_backslash, z_backslash
>c503	5c				        .byte $5c
.c504					nt_move:
>c504	04 18				        .byte 4, NN+UF
>c506	10 c5 a3 95 c1 95		        .word nt_cmove_up, xt_move, z_move
>c50c	6d 6f 76 65			        .text "move"
.c510					nt_cmove_up:
>c510	06 10				        .byte 6, UF
>c512	1e c5 b5 86 ef 86		        .word nt_cmove, xt_cmove_up, z_cmove_up
>c518	63 6d 6f 76 65 3e		        .text "cmove>"
.c51e					nt_cmove:
>c51e	05 10				        .byte 5, UF
>c520	2b c5 7a 86 b4 86		        .word nt_pad, xt_cmove, z_cmove
>c526	63 6d 6f 76 65			        .text "cmove"
.c52b					nt_pad:
>c52b	03 00				        .byte 3, 0
>c52d	36 c5 82 98 91 98		        .word nt_cleave, xt_pad, z_pad
>c533	70 61 64			        .text "pad"
.c536					nt_cleave:
>c536	06 10				        .byte 6, UF
>c538	44 c5 2d 86 79 86		        .word nt_hexstore, xt_cleave, z_cleave
>c53e	63 6c 65 61 76 65		        .text "cleave"
.c544					nt_hexstore:
>c544	08 10				        .byte 8, UF
>c546	54 c5 65 91 b7 91		        .word nt_within, xt_hexstore, z_hexstore
>c54c	68 65 78 73 74 6f 72 65		        .text "hexstore"
.c554					nt_within:
>c554	06 10				        .byte 6, UF
>c556	62 c5 86 a6 9b a6		        .word nt_to_in, xt_within, z_within
>c55c	77 69 74 68 69 6e		        .text "within"
.c562					nt_to_in:
>c562	03 00				        .byte 3, 0
>c564	6d c5 93 a2 9d a2		        .word nt_less_number_sign, xt_to_in, z_to_in
>c56a	3e 69 6e			        .text ">in"
.c56d					nt_less_number_sign:
>c56d	02 00				        .byte 2, 0
>c56f	77 c5 3b 93 48 93		        .word nt_number_sign, xt_less_number_sign, z_less_number_sign
>c575	3c 23				        .text "<#"
.c577					nt_number_sign:
>c577	01 10				        .byte 1, UF
>c579	80 c5 68 97 9c 97		        .word nt_number_sign_s, xt_number_sign, z_number_sign
>c57f	23				        .text "#"
.c580					nt_number_sign_s:
>c580	02 10				        .byte 2, UF
>c582	8a c5 bf 97 cf 97		        .word nt_number_sign_greater, xt_number_sign_s, z_number_sign_s
>c588	23 73				        .text "#s"
.c58a					nt_number_sign_greater:
>c58a	02 10				        .byte 2, UF
>c58c	94 c5 9d 97 be 97		        .word nt_hold, xt_number_sign_greater, z_number_sign_greater
>c592	23 3e				        .text "#>"
.c594					nt_hold:
>c594	04 10				        .byte 4, UF
>c596	a0 c5 b8 91 c9 91		        .word nt_sign, xt_hold, z_hold
>c59c	68 6f 6c 64			        .text "hold"
.c5a0					nt_sign:
>c5a0	04 10				        .byte 4, UF
>c5a2	ac c5 c8 9f dc 9f		        .word nt_output, xt_sign, z_sign
>c5a8	73 69 67 6e			        .text "sign"
.c5ac					nt_output:
>c5ac	06 00				        .byte 6, 0
>c5ae	ba c5 69 98 73 98		        .word nt_input, xt_output, z_output
>c5b4	6f 75 74 70 75 74		        .text "output"
.c5ba					nt_input:
>c5ba	05 00				        .byte 5, 0
>c5bc	c7 c5 38 92 42 92		        .word nt_cr, xt_input, z_input
>c5c2	69 6e 70 75 74			        .text "input"
.c5c7					nt_cr:
>c5c7	02 00				        .byte 2, 0
>c5c9	d1 c5 44 89 49 89		        .word nt_page, xt_cr, z_cr
>c5cf	63 72				        .text "cr"
.c5d1					nt_page:
>c5d1	04 00				        .byte 4, 0
>c5d3	dd c5 92 98 af 98		        .word nt_at_xy, xt_page, z_page
>c5d9	70 61 67 65			        .text "page"
.c5dd					nt_at_xy:
>c5dd	05 10				        .byte 5, UF
>c5df	ea c5 31 83 5e 83		        .word nt_marker, xt_at_xy, z_at_xy
>c5e5	61 74 2d 78 79			        .text "at-xy"
.c5ea					nt_marker:
>c5ea	06 04				        .byte 6, IM
>c5ec	f8 c5 8a 94 c7 94		        .word nt_words, xt_marker, z_marker
>c5f2	6d 61 72 6b 65 72		        .text "marker"
.c5f8					nt_words:
>c5f8	05 00				        .byte 5, 0
>c5fa	05 c6 f9 a6 55 a7		        .word nt_wordsize, xt_words, z_words
>c600	77 6f 72 64 73			        .text "words"
.c605					nt_wordsize:
>c605	08 10				        .byte 8, UF
>c607	15 c6 56 a7 76 a7		        .word nt_aligned, xt_wordsize, z_wordsize
>c60d	77 6f 72 64 73 69 7a 65		        .text "wordsize"
.c615					nt_aligned:
>c615	07 00				        .byte 7, 0
>c617	24 c6 8b 82 8b 82		        .word nt_align, xt_align, z_align
>c61d	61 6c 69 67 6e 65 64		        .text "aligned"
.c624					nt_align:
>c624	05 00				        .byte 5, 0
>c626	31 c6 8b 82 8b 82		        .word nt_bell, xt_align, z_align
>c62c	61 6c 69 67 6e			        .text "align"
.c631					nt_bell:
>c631	04 00				        .byte 4, 0
>c633	3d c6 75 83 7a 83		        .word nt_dump, xt_bell, z_bell
>c639	62 65 6c 6c			        .text "bell"
.c63d					nt_dump:
>c63d	04 10				        .byte 4, UF
>c63f	49 c6 15 8d 7b 8d		        .word nt_dot_s, xt_dump, z_dump
>c645	64 75 6d 70			        .text "dump"
.c649					nt_dot_s:
>c649	02 00				        .byte 2, 0
>c64b	53 c6 81 8c c4 8c		        .word nt_disasm, xt_dot_s, z_dot_s
>c651	2e 73				        .text ".s"
.c653					nt_disasm:
>c653	06 10				        .byte 6, UF
>c655	61 c6 1b 8b 21 8b		        .word nt_compare, xt_disasm, z_disasm
>c65b	64 69 73 61 73 6d		        .text "disasm"
.c661					nt_compare:
>c661	07 10				        .byte 7, UF
>c663	70 c6 69 87 cd 87		        .word nt_search, xt_compare, z_compare
>c669	63 6f 6d 70 61 72 65		        .text "compare"
.c670					nt_search:
>c670	06 18				        .byte 6, UF+NN
>c672	7e c6 ca 9e 68 9f		        .word +, xt_search, z_search
>c678	73 65 61 72 63 68		        .text "search"
.c67e					+
.c67e					nt_environment_q:
>c67e	0c 10				        .byte 12, UF
>c680	92 c6 f6 8d 72 8e		        .word +, xt_environment_q, z_environment_q
>c686	65 6e 76 69 72 6f 6e 6d		        .text "environment?"
>c68e	65 6e 74 3f
.c692					+
.c692					nt_find:
>c692	04 10				        .byte 4, UF
>c694	9e c6 74 8f bb 8f		        .word nt_word, xt_find, z_find
>c69a	66 69 6e 64			        .text "find"
.c69e					nt_word:
>c69e	04 10				        .byte 4, UF
>c6a0	aa c6 9c a6 e1 a6		        .word nt_paren, xt_word, z_word
>c6a6	77 6f 72 64			        .text "word"
.c6aa					nt_paren:
>c6aa	01 04				        .byte 1, IM
>c6ac	b3 c6 b0 98 bf 98		        .word nt_dot_paren, xt_paren, z_paren
>c6b2	28				        .text "("
.c6b3					nt_dot_paren:
>c6b3	02 04				        .byte 2, IM
>c6b5	bd c6 39 8c 47 8c		        .word nt_if, xt_dot_paren, z_dot_paren
>c6bb	2e 28				        .text ".("
.c6bd					nt_if:
>c6bd	02 0d				        .byte 2, IM+CO+NN
>c6bf	c7 c6 e4 91 f4 91		        .word nt_then, xt_if, z_if
>c6c5	69 66				        .text "if"
.c6c7					nt_then:
>c6c7	04 0d				        .byte 4, IM+CO+NN
>c6c9	d3 c6 a3 a1 ac a1		        .word nt_else, xt_then, z_then
>c6cf	74 68 65 6e			        .text "then"
.c6d3					nt_else:
>c6d3	04 0d				        .byte 4, IM+CO+NN
>c6d5	df c6 a2 8d bb 8d		        .word nt_repeat, xt_else, z_else
>c6db	65 6c 73 65			        .text "else"
.c6df					nt_repeat:
>c6df	06 0d				        .byte 6, IM+CO+NN
>c6e1	ed c6 1b 9b 27 9b		        .word nt_until, xt_repeat, z_repeat
>c6e7	72 65 70 65 61 74		        .text "repeat"
.c6ed					nt_until:
>c6ed	05 0d				        .byte 5, IM+CO+NN
>c6ef	fa c6 2a a6 34 a6		        .word nt_while, xt_until, z_until
>c6f5	75 6e 74 69 6c			        .text "until"
.c6fa					nt_while:
>c6fa	05 0d				        .byte 5, IM+CO+NN
>c6fc	07 c7 72 a6 85 a6		        .word nt_case, xt_while, z_while
>c702	77 68 69 6c 65			        .text "while"
.c707					nt_case:
>c707	04 0d				        .byte 4, IM+CO+NN
>c709	13 c7 89 a7 8f a7		        .word nt_of, xt_case, z_case    ; shares code with ZERO
>c70f	63 61 73 65			        .text "case"
.c713					nt_of:
>c713	02 0d				        .byte 2, IM+CO+NN
>c715	1d c7 d0 97 e8 97		        .word nt_endof, xt_of, z_of
>c71b	6f 66				        .text "of"
.c71d					nt_endof:
>c71d	05 0d				        .byte 5, IM+CO+NN
>c71f	2a c7 a2 8d bb 8d		        .word nt_endcase, xt_endof, z_endof ; shares code with ELSE
>c725	65 6e 64 6f 66			        .text "endof"
.c72a					nt_endcase:
>c72a	07 0d				        .byte 7, IM+CO+NN
>c72c	39 c7 e1 8d f5 8d		        .word nt_defer_fetch, xt_endcase, z_endcase
>c732	65 6e 64 63 61 73 65		        .text "endcase"
.c739					nt_defer_fetch:
>c739	06 00				        .byte 6, 0
>c73b	47 c7 c0 8a c6 8a		        .word nt_defer_store, xt_defer_fetch, z_defer_fetch
>c741	64 65 66 65 72 40		        .text "defer@"
.c747					nt_defer_store:
>c747	06 00				        .byte 6, 0
>c749	55 c7 c7 8a cd 8a		        .word nt_is, xt_defer_store, z_defer_store
>c74f	64 65 66 65 72 21		        .text "defer!"
.c755					nt_is:
>c755	02 04				        .byte 2, IM
>c757	5f c7 dc 92 f4 92		        .word nt_action_of, xt_is, z_is
>c75d	69 73				        .text "is"
.c75f					nt_action_of:
>c75f	09 04				        .byte 9, IM
>c761	70 c7 51 82 69 82		        .word nt_useraddr, xt_action_of, z_action_of
>c767	61 63 74 69 6f 6e 2d 6f		        .text "action-of"
>c76f	66
.c770					nt_useraddr:
>c770	08 00				        .byte 8, 0
>c772	80 c7 4e a6 58 a6		        .word nt_buffer_colon, xt_useraddr, z_useraddr
>c778	75 73 65 72 61 64 64 72		        .text "useraddr"
.c780					nt_buffer_colon:
>c780	07 00				        .byte 7, 0
>c782	8f c7 c7 85 cd 85		        .word +, xt_buffer_colon, z_buffer_colon
>c788	62 75 66 66 65 72 3a		        .text "buffer:"
.c78f					+
.c78f					nt_buffstatus:
>c78f	0a 00				        .byte 10, 0
>c791	a1 c7 ce 85 dd 85		        .word nt_buffblocknum, xt_buffstatus, z_buffstatus
>c797	62 75 66 66 73 74 61 74		        .text "buffstatus"
>c79f	75 73
.c7a1					nt_buffblocknum:
>c7a1	0c 00				        .byte 12, 0
>c7a3	b5 c7 86 85 95 85		        .word nt_blkbuffer, xt_buffblocknum, z_buffblocknum
>c7a9	62 75 66 66 62 6c 6f 63		        .text "buffblocknum"
>c7b1	6b 6e 75 6d
.c7b5					nt_blkbuffer:
>c7b5	09 00				        .byte 9, 0
>c7b7	c6 c7 94 83 a1 83		        .word nt_scr, xt_blkbuffer, z_blkbuffer
>c7bd	62 6c 6b 62 75 66 66 65		        .text "blkbuffer"
>c7c5	72
.c7c6					nt_scr:
>c7c6	03 00				        .byte 3, 0
>c7c8	d1 c7 ba 9e c9 9e		        .word nt_blk, xt_scr, z_scr
>c7ce	73 63 72			        .text "scr"
.c7d1					nt_blk:
>c7d1	03 00				        .byte 3, 0
>c7d3	dc c7 84 83 93 83		        .word nt_block_write, xt_blk, z_blk
>c7d9	62 6c 6b			        .text "blk"
.c7dc					nt_block_write:
>c7dc	0b 08				        .byte 11, NN ; Deferred words need the HC (Code Field) flag.
>c7de	ef c7 41 85 4f 85		        .word nt_block_write_vector, xt_block_write, z_block_write
>c7e4	62 6c 6f 63 6b 2d 77 72		        .text "block-write"
>c7ec	69 74 65
.c7ef					nt_block_write_vector:
>c7ef	12 08				        .byte 18, NN ; Deferred words need the HC (Code Field) flag.
>c7f1	09 c8 4f 85 5e 85		        .word nt_block_read, xt_block_write_vector, z_block_write_vector
>c7f7	62 6c 6f 63 6b 2d 77 72		        .text "block-write-vector"
>c7ff	69 74 65 2d 76 65 63 74 6f 72
.c809					nt_block_read:
>c809	0a 28				        .byte 10, HC+NN ; Deferred words need the HC (Code Field) flag.
>c80b	1b c8 1e 85 2c 85		        .word nt_block_read_vector, xt_block_read, z_block_read
>c811	62 6c 6f 63 6b 2d 72 65		        .text "block-read"
>c819	61 64
.c81b					nt_block_read_vector:
>c81b	11 28				        .byte 17, HC+NN ; Deferred words need the HC (Code Field) flag.
>c81d	34 c8 2c 85 3b 85		        .word nt_save_buffers, xt_block_read_vector, z_block_read_vector
>c823	62 6c 6f 63 6b 2d 72 65		        .text "block-read-vector"
>c82b	61 64 2d 76 65 63 74 6f 72
.c834					nt_save_buffers:
>c834	0c 00				        .byte 12, 0
>c836	48 c8 9f 9e b9 9e		        .word nt_block, xt_save_buffers, z_save_buffers
>c83c	73 61 76 65 2d 62 75 66		        .text "save-buffers"
>c844	66 65 72 73
.c848					nt_block:
>c848	05 00				        .byte 5, 0
>c84a	55 c8 a2 83 f4 83		        .word nt_update, xt_block, z_block
>c850	62 6c 6f 63 6b			        .text "block"
.c855					nt_update:
>c855	06 00				        .byte 6, 0
>c857	63 c8 45 a6 4d a6		        .word nt_buffer, xt_update, z_update
>c85d	75 70 64 61 74 65		        .text "update"
.c863					nt_buffer:
>c863	06 00				        .byte 6, 0
>c865	71 c8 96 85 c6 85		        .word nt_empty_buffers, xt_buffer, z_buffer
>c86b	62 75 66 66 65 72		        .text "buffer"
.c871					nt_empty_buffers:
>c871	0d 00				        .byte 13, 0
>c873	86 c8 da 8d e0 8d		        .word nt_flush, xt_empty_buffers, z_empty_buffers
>c879	65 6d 70 74 79 2d 62 75		        .text "empty-buffers"
>c881	66 66 65 72 73
.c886					nt_flush:
>c886	05 00				        .byte 5, 0
>c888	93 c8 68 90 71 90		        .word nt_load, xt_flush, z_flush
>c88e	66 6c 75 73 68			        .text "flush"
.c893					nt_load:
>c893	04 10				        .byte 4, UF
>c895	9f c8 98 93 db 93		        .word nt_thru, xt_load, z_load
>c89b	6c 6f 61 64			        .text "load"
.c89f					nt_thru:
>c89f	04 10				        .byte 4, UF
>c8a1	ab c8 ad a1 f1 a1		        .word nt_list, xt_thru, z_thru
>c8a7	74 68 72 75			        .text "thru"
.c8ab					nt_list:
>c8ab	04 10				        .byte 4, UF
>c8ad	b7 c8 5e 93 6a 93		        .word +, xt_list, z_list
>c8b3	6c 69 73 74			        .text "list"
.c8b7					+
.c8b7					nt_block_ramdrive_init:
>c8b7	13 10				        .byte 19, UF
>c8b9	d2 c8 f5 83 1d 85		        .word +, xt_block_ramdrive_init, z_block_ramdrive_init
>c8bf	62 6c 6f 63 6b 2d 72 61		        .text "block-ramdrive-init"
>c8c7	6d 64 72 69 76 65 2d 69 6e 69 74
.c8d2					+
.c8d2					nt_definitions:
>c8d2	0b 00				        .byte 11, 0
>c8d4	e5 c8 ce 8a d6 8a		        .word nt_wordlist, xt_definitions, z_definitions
>c8da	64 65 66 69 6e 69 74 69		        .text "definitions"
>c8e2	6f 6e 73
.c8e5					nt_wordlist:
>c8e5	08 00				        .byte 8, 0
>c8e7	f5 c8 e2 a6 f8 a6		        .word nt_search_wordlist, xt_wordlist, z_wordlist
>c8ed	77 6f 72 64 6c 69 73 74		        .text "wordlist"
.c8f5					nt_search_wordlist:
>c8f5	0f 10				        .byte 15, UF
>c8f7	0c c9 81 9b 61 9c		        .word nt_set_current, xt_search_wordlist, z_search_wordlist
>c8fd	73 65 61 72 63 68 2d 77		        .text "search-wordlist"
>c905	6f 72 64 6c 69 73 74
.c90c					nt_set_current:
>c90c	0b 10				        .byte 11, UF
>c90e	1f c9 f0 9c fb 9c		        .word nt_get_current, xt_set_current, z_set_current
>c914	73 65 74 2d 63 75 72 72		        .text "set-current"
>c91c	65 6e 74
.c91f					nt_get_current:
>c91f	0b 00				        .byte 11, 0
>c921	32 c9 0a 91 14 91		        .word nt_set_order, xt_get_current, z_get_current
>c927	67 65 74 2d 63 75 72 72		        .text "get-current"
>c92f	65 6e 74
.c932					nt_set_order:
>c932	09 00				        .byte 9, 0
>c934	43 c9 fc 9c 2f 9d		        .word nt_get_order, xt_set_order, z_set_order
>c93a	73 65 74 2d 6f 72 64 65		        .text "set-order"
>c942	72
.c943					nt_get_order:
>c943	09 00				        .byte 9, 0
>c945	54 c9 15 91 3d 91		        .word nt_root_wordlist, xt_get_order, z_get_order
>c94b	67 65 74 2d 6f 72 64 65		        .text "get-order"
>c953	72
.c954					nt_root_wordlist:
>c954	0d 00				        .byte 13, 0
>c956	69 c9 2f 9b 37 9b		        .word +, xt_root_wordlist, z_root_wordlist
>c95c	72 6f 6f 74 2d 77 6f 72		        .text "root-wordlist"
>c964	64 6c 69 73 74
.c969					+
.c969					nt_assembler_wordlist:
>c969	12 00				        .byte 18, 0
>c96b	83 c9 88 a3 90 a3		        .word +, xt_assembler_wordlist, z_assembler_wordlist
>c971	61 73 73 65 6d 62 6c 65		        .text "assembler-wordlist"
>c979	72 2d 77 6f 72 64 6c 69 73 74
.c983					+
.c983					nt_editor_wordlist:
>c983	0f 00				        .byte 15, 0
>c985	9a c9 e9 97 f1 97		        .word +, xt_editor_wordlist, z_editor_wordlist
>c98b	65 64 69 74 6f 72 2d 77		        .text "editor-wordlist"
>c993	6f 72 64 6c 69 73 74
.c99a					+
.c99a					nt_forth_wordlist:
>c99a	0e 00				        .byte 14, 0
>c99c	b0 c9 89 a7 8f a7		        .word nt_only, xt_forth_wordlist, z_forth_wordlist
>c9a2	66 6f 72 74 68 2d 77 6f		        .text "forth-wordlist"
>c9aa	72 64 6c 69 73 74
.c9b0					nt_only:
>c9b0	04 00				        .byte 4, 0
>c9b2	bc c9 08 98 13 98		        .word nt_also, xt_only, z_only
>c9b8	6f 6e 6c 79			        .text "only"
.c9bc					nt_also:
>c9bc	04 00				        .byte 4, 0
>c9be	c8 c9 01 83 10 83		        .word nt_previous, xt_also, z_also
>c9c4	61 6c 73 6f			        .text "also"
.c9c8					nt_previous:
>c9c8	08 00				        .byte 8, 0
>c9ca	d8 c9 36 9a 42 9a		        .word nt_to_order, xt_previous, z_previous
>c9d0	70 72 65 76 69 6f 75 73		        .text "previous"
.c9d8					nt_to_order:
>c9d8	06 00				        .byte 6, 0
>c9da	e6 c9 3e a3 50 a3		        .word nt_order, xt_to_order, z_to_order
>c9e0	3e 6f 72 64 65 72		        .text ">order"
.c9e6					nt_order:
>c9e6	05 00				        .byte 5, 0
>c9e8	f3 c9 26 98 50 98		        .word nt_forth, xt_order, z_order
>c9ee	6f 72 64 65 72			        .text "order"
.c9f3					nt_forth:
>c9f3	05 00				        .byte 5, 0
>c9f5	00 ca a9 90 af 90		        .word +, xt_forth, z_forth
>c9fb	66 6f 72 74 68			        .text "forth"
.ca00					+
>ca00	03 08				nt_see: .byte 3, NN
>ca02	0b ca 62 9c ef 9c		        .word +, xt_see, z_see
>ca08	73 65 65			        .text "see"
.ca0b					+
.ca0b					nt_ed:
>ca0b	02 08				        .byte 2, NN
>ca0d	15 ca 9e 8d a1 8d		        .word +, xt_ed, z_ed
>ca13	65 64				        .text "ed"
.ca15					+
.ca15					nt_cold:
>ca15	04 00				        .byte 4, 0
>ca17	21 ca 00 80 a4 80		        .word nt_bye, xt_cold, z_cold
>ca1d	63 6f 6c 64			        .text "cold"
.ca21					nt_bye:
>ca21	03				        .byte 3         ; length of word strings
>ca22	00				        .byte 0         ; status byte
>ca23	00 00				        .word 0000      ; next word in Dictionary, 0000 signals end
>ca25	de 85				        .word xt_bye    ; start of code block (xt of this word)
>ca27	e1 85				        .word z_bye     ; end of code (RTS)
>ca29	62 79 65			        .text "bye"     ; word name, always lower case, not zero-terminated
.ca2c					root_dictionary_start:
.ca2c					nt_root_set_order:
>ca2c	09 00				        .byte 9, 0
>ca2e	3d ca fc 9c 2f 9d		        .word nt_root_forth, xt_set_order, z_set_order
>ca34	73 65 74 2d 6f 72 64 65		        .text "set-order"
>ca3c	72
.ca3d					nt_root_forth:
>ca3d	05 00				        .byte 5, 0
>ca3f	4a ca a9 90 af 90		        .word nt_root_forth_wordlist, xt_forth, z_forth
>ca45	66 6f 72 74 68			        .text "forth"
.ca4a					nt_root_forth_wordlist:
>ca4a	0e 00				        .byte 14, 0
>ca4c	60 ca 89 a7 8f a7		        .word nt_root_words, xt_forth_wordlist, z_forth_wordlist
>ca52	66 6f 72 74 68 2d 77 6f		        .text "forth-wordlist"
>ca5a	72 64 6c 69 73 74
.ca60					nt_root_words:
>ca60	05 00				        .byte 5, 0
>ca62	00 00 f9 a6 55 a7		        .word 0000, xt_words, z_words
>ca68	77 6f 72 64 73			        .text "words"
.ca6d					editor_dictionary_start:
.ca6d					nt_editor_o:
>ca6d	01 00				        .byte 1, 0
>ca6f	76 ca bc a8 01 a9		        .word nt_editor_line, xt_editor_o, z_editor_o
>ca75	6f				        .text "o"
.ca76					nt_editor_line:
>ca76	04 10				        .byte 4, UF
>ca78	82 ca a3 a8 bb a8		        .word nt_editor_l, xt_editor_line, z_editor_line
>ca7e	6c 69 6e 65			        .text "line"
.ca82					nt_editor_l:
>ca82	01 00				        .byte 1, 0
>ca84	8b ca 27 a8 a2 a8		        .word nt_editor_el, xt_editor_l, z_editor_l
>ca8a	6c				        .text "l"
.ca8b					nt_editor_el:
>ca8b	02 00				        .byte 2, 0
>ca8d	95 ca 15 a8 26 a8		        .word nt_editor_erase_screen, xt_editor_el, z_editor_el
>ca93	65 6c				        .text "el"
.ca95					nt_editor_erase_screen:
>ca95	0c 00				        .byte 12, 0
>ca97	a9 ca 03 a8 14 a8		        .word nt_editor_enter_screen, xt_editor_erase_screen, z_editor_erase_screen
>ca9d	65 72 61 73 65 2d 73 63		        .text "erase-screen"
>caa5	72 65 65 6e
.caa9					nt_editor_enter_screen:
>caa9	0c 00				        .byte 12, 0
>caab	00 00 e7 a7 02 a8		        .word 0000, xt_editor_enter_screen, z_editor_enter_screen
>cab1	65 6e 74 65 72 2d 73 63		        .text "enter-screen"
>cab9	72 65 65 6e
.cabd					assembler_dictionary_start:
.cabd					nt_asm_adc_h:
>cabd	05 0c						.byte 5, IM+NN
>cabf	ca ca				                .word nt_asm_adc_x
>cac1	02 a9 07 a9					.word xt_asm_adc_h, z_asm_adc_h
>cac5	61 64 63 2e 23					.text "adc.#"
.caca					nt_asm_adc_x:
>caca	05 0c						.byte 5, IM+NN
>cacc	d7 ca				                .word nt_asm_adc_y
>cace	07 a9 0c a9					.word xt_asm_adc_x, z_asm_adc_x
>cad2	61 64 63 2e 78					.text "adc.x"
.cad7					nt_asm_adc_y:
>cad7	05 0c						.byte 5, IM+NN
>cad9	e4 ca				                .word nt_asm_adc_z
>cadb	0c a9 11 a9					.word xt_asm_adc_y, z_asm_adc_y
>cadf	61 64 63 2e 79					.text "adc.y"
.cae4					nt_asm_adc_z:
>cae4	05 0c						.byte 5, IM+NN
>cae6	f1 ca				                .word nt_asm_adc_zi
>cae8	11 a9 16 a9					.word xt_asm_adc_z, z_asm_adc_z
>caec	61 64 63 2e 7a					.text "adc.z"
.caf1					nt_asm_adc_zi:
>caf1	06 0c						.byte 6, IM+NN
>caf3	ff ca				                .word nt_asm_adc_ziy
>caf5	16 a9 1b a9					.word xt_asm_adc_zi, z_asm_adc_zi
>caf9	61 64 63 2e 7a 69				.text "adc.zi"
.caff					nt_asm_adc_ziy:
>caff	07 0c						.byte 7, IM+NN
>cb01	0e cb				                .word nt_asm_adc_zx
>cb03	1b a9 20 a9					.word xt_asm_adc_ziy, z_asm_adc_ziy
>cb07	61 64 63 2e 7a 69 79				.text "adc.ziy"
.cb0e					nt_asm_adc_zx:
>cb0e	06 0c						.byte 6, IM+NN
>cb10	1c cb				                .word nt_asm_adc_zxi
>cb12	20 a9 25 a9					.word xt_asm_adc_zx, z_asm_adc_zx
>cb16	61 64 63 2e 7a 78				.text "adc.zx"
.cb1c					nt_asm_adc_zxi:
>cb1c	07 0c						.byte 7, IM+NN
>cb1e	2b cb				                .word nt_asm_and
>cb20	25 a9 2a a9					.word xt_asm_adc_zxi, z_asm_adc_zxi
>cb24	61 64 63 2e 7a 78 69				.text "adc.zxi"
.cb2b					nt_asm_and:
>cb2b	04 0c						.byte 4, IM+NN
>cb2d	37 cb				                .word nt_asm_and_h
>cb2f	2a a9 2f a9					.word xt_asm_and, z_asm_and
>cb33	61 6e 64 2e					.text "and."
.cb37					nt_asm_and_h:
>cb37	05 0c						.byte 5, IM+NN
>cb39	44 cb				                .word nt_asm_and_x
>cb3b	2f a9 34 a9					.word xt_asm_and_h, z_asm_and_h
>cb3f	61 6e 64 2e 23					.text "and.#"
.cb44					nt_asm_and_x:
>cb44	05 0c						.byte 5, IM+NN
>cb46	51 cb				                .word nt_asm_and_y
>cb48	34 a9 39 a9					.word xt_asm_and_x, z_asm_and_x
>cb4c	61 6e 64 2e 78					.text "and.x"
.cb51					nt_asm_and_y:
>cb51	05 0c						.byte 5, IM+NN
>cb53	5e cb				                .word nt_asm_and_z
>cb55	39 a9 3e a9					.word xt_asm_and_y, z_asm_and_y
>cb59	61 6e 64 2e 79					.text "and.y"
.cb5e					nt_asm_and_z:
>cb5e	05 0c						.byte 5, IM+NN
>cb60	6b cb				                .word nt_asm_and_zi
>cb62	3e a9 43 a9					.word xt_asm_and_z, z_asm_and_z
>cb66	61 6e 64 2e 7a					.text "and.z"
.cb6b					nt_asm_and_zi:
>cb6b	06 0c						.byte 6, IM+NN
>cb6d	79 cb				                .word nt_asm_and_ziy
>cb6f	43 a9 48 a9					.word xt_asm_and_zi, z_asm_and_zi
>cb73	61 6e 64 2e 7a 69				.text "and.zi"
.cb79					nt_asm_and_ziy:
>cb79	07 0c						.byte 7, IM+NN
>cb7b	88 cb				                .word nt_asm_and_zx
>cb7d	48 a9 4d a9					.word xt_asm_and_ziy, z_asm_and_ziy
>cb81	61 6e 64 2e 7a 69 79				.text "and.ziy"
.cb88					nt_asm_and_zx:
>cb88	06 0c						.byte 6, IM+NN
>cb8a	96 cb				                .word nt_asm_and_zxi
>cb8c	4d a9 52 a9					.word xt_asm_and_zx, z_asm_and_zx
>cb90	61 6e 64 2e 7a 78				.text "and.zx"
.cb96					nt_asm_and_zxi:
>cb96	07 0c						.byte 7, IM+NN
>cb98	a5 cb				                .word nt_asm_asl
>cb9a	52 a9 57 a9					.word xt_asm_and_zxi, z_asm_and_zxi
>cb9e	61 6e 64 2e 7a 78 69				.text "and.zxi"
.cba5					nt_asm_asl:
>cba5	03 0c						.byte 3, IM+NN
>cba7	b0 cb				                .word nt_asm_asl_a
>cba9	57 a9 5c a9					.word xt_asm_asl, z_asm_asl
>cbad	61 73 6c					.text "asl"
.cbb0					nt_asm_asl_a:
>cbb0	05 0c						.byte 5, IM+NN
>cbb2	bd cb				                .word nt_asm_asl_x
>cbb4	5c a9 61 a9					.word xt_asm_asl_a, z_asm_asl_a
>cbb8	61 73 6c 2e 61					.text "asl.a"
.cbbd					nt_asm_asl_x:
>cbbd	05 0c						.byte 5, IM+NN
>cbbf	ca cb				                .word nt_asm_asl_z
>cbc1	61 a9 66 a9					.word xt_asm_asl_x, z_asm_asl_x
>cbc5	61 73 6c 2e 78					.text "asl.x"
.cbca					nt_asm_asl_z:
>cbca	05 0c						.byte 5, IM+NN
>cbcc	d7 cb				                .word nt_asm_asl_zx
>cbce	66 a9 6b a9					.word xt_asm_asl_z, z_asm_asl_z
>cbd2	61 73 6c 2e 7a					.text "asl.z"
.cbd7					nt_asm_asl_zx:
>cbd7	06 0c						.byte 6, IM+NN
>cbd9	e5 cb				                .word nt_asm_bcc
>cbdb	6b a9 70 a9					.word xt_asm_asl_zx, z_asm_asl_zx
>cbdf	61 73 6c 2e 7a 78				.text "asl.zx"
.cbe5					nt_asm_bcc:
>cbe5	03 0c						.byte 3, IM+NN
>cbe7	f0 cb				                .word nt_asm_bcs
>cbe9	70 a9 75 a9					.word xt_asm_bcc, z_asm_bcc
>cbed	62 63 63					.text "bcc"
.cbf0					nt_asm_bcs:
>cbf0	03 0c						.byte 3, IM+NN
>cbf2	fb cb				                .word nt_asm_beq
>cbf4	75 a9 7c a9					.word xt_asm_bcs, z_asm_bcs
>cbf8	62 63 73					.text "bcs"
.cbfb					nt_asm_beq:
>cbfb	03 0c						.byte 3, IM+NN
>cbfd	06 cc				                .word nt_asm_bit
>cbff	7c a9 81 a9					.word xt_asm_beq, z_asm_beq
>cc03	62 65 71					.text "beq"
.cc06					nt_asm_bit:
>cc06	03 0c						.byte 3, IM+NN
>cc08	11 cc				                .word nt_asm_bit_h
>cc0a	81 a9 86 a9					.word xt_asm_bit, z_asm_bit
>cc0e	62 69 74					.text "bit"
.cc11					nt_asm_bit_h:
>cc11	05 0c						.byte 5, IM+NN
>cc13	1e cc				                .word nt_asm_bit_x
>cc15	86 a9 8b a9					.word xt_asm_bit_h, z_asm_bit_h
>cc19	62 69 74 2e 23					.text "bit.#"
.cc1e					nt_asm_bit_x:
>cc1e	05 0c						.byte 5, IM+NN
>cc20	2b cc				                .word nt_asm_bit_z
>cc22	8b a9 90 a9					.word xt_asm_bit_x, z_asm_bit_x
>cc26	62 69 74 2e 78					.text "bit.x"
.cc2b					nt_asm_bit_z:
>cc2b	05 0c						.byte 5, IM+NN
>cc2d	38 cc				                .word nt_asm_bit_zx
>cc2f	90 a9 95 a9					.word xt_asm_bit_z, z_asm_bit_z
>cc33	62 69 74 2e 7a					.text "bit.z"
.cc38					nt_asm_bit_zx:
>cc38	06 0c						.byte 6, IM+NN
>cc3a	46 cc				                .word nt_asm_bmi
>cc3c	95 a9 9a a9					.word xt_asm_bit_zx, z_asm_bit_zx
>cc40	62 69 74 2e 7a 78				.text "bit.zx"
.cc46					nt_asm_bmi:
>cc46	03 0c						.byte 3, IM+NN
>cc48	51 cc				                .word nt_asm_bne
>cc4a	9a a9 9f a9					.word xt_asm_bmi, z_asm_bmi
>cc4e	62 6d 69					.text "bmi"
.cc51					nt_asm_bne:
>cc51	03 0c						.byte 3, IM+NN
>cc53	5c cc				                .word nt_asm_bpl
>cc55	9f a9 a4 a9					.word xt_asm_bne, z_asm_bne
>cc59	62 6e 65					.text "bne"
.cc5c					nt_asm_bpl:
>cc5c	03 0c						.byte 3, IM+NN
>cc5e	67 cc				                .word nt_asm_bra
>cc60	a4 a9 a9 a9					.word xt_asm_bpl, z_asm_bpl
>cc64	62 70 6c					.text "bpl"
.cc67					nt_asm_bra:
>cc67	03 0c						.byte 3, IM+NN
>cc69	72 cc				                .word nt_asm_brk
>cc6b	a9 a9 ae a9					.word xt_asm_bra, z_asm_bra
>cc6f	62 72 61					.text "bra"
.cc72					nt_asm_brk:
>cc72	03 0c						.byte 3, IM+NN
>cc74	7d cc				                .word nt_asm_bvc
>cc76	ae a9 b3 a9					.word xt_asm_brk, z_asm_brk
>cc7a	62 72 6b					.text "brk"
.cc7d					nt_asm_bvc:
>cc7d	03 0c						.byte 3, IM+NN
>cc7f	88 cc				                .word nt_asm_bvs
>cc81	b3 a9 b8 a9					.word xt_asm_bvc, z_asm_bvc
>cc85	62 76 63					.text "bvc"
.cc88					nt_asm_bvs:
>cc88	03 0c						.byte 3, IM+NN
>cc8a	93 cc				                .word nt_asm_clc
>cc8c	b8 a9 bd a9					.word xt_asm_bvs, z_asm_bvs
>cc90	62 76 73					.text "bvs"
.cc93					nt_asm_clc:
>cc93	03 0c						.byte 3, IM+NN
>cc95	9e cc				                .word nt_asm_cld
>cc97	bd a9 c2 a9					.word xt_asm_clc, z_asm_clc
>cc9b	63 6c 63					.text "clc"
.cc9e					nt_asm_cld:
>cc9e	03 0c						.byte 3, IM+NN
>cca0	a9 cc				                .word nt_asm_cli
>cca2	c2 a9 c7 a9					.word xt_asm_cld, z_asm_cld
>cca6	63 6c 64					.text "cld"
.cca9					nt_asm_cli:
>cca9	03 0c						.byte 3, IM+NN
>ccab	b4 cc				                .word nt_asm_clv
>ccad	c7 a9 cc a9					.word xt_asm_cli, z_asm_cli
>ccb1	63 6c 69					.text "cli"
.ccb4					nt_asm_clv:
>ccb4	03 0c						.byte 3, IM+NN
>ccb6	bf cc				                .word nt_asm_cmp
>ccb8	cc a9 d1 a9					.word xt_asm_clv, z_asm_clv
>ccbc	63 6c 76					.text "clv"
.ccbf					nt_asm_cmp:
>ccbf	03 0c						.byte 3, IM+NN
>ccc1	ca cc				                .word nt_asm_cmp_h
>ccc3	d1 a9 d6 a9					.word xt_asm_cmp, z_asm_cmp
>ccc7	63 6d 70					.text "cmp"
.ccca					nt_asm_cmp_h:
>ccca	05 0c						.byte 5, IM+NN
>cccc	d7 cc				                .word nt_asm_cmp_x
>ccce	d6 a9 db a9					.word xt_asm_cmp_h, z_asm_cmp_h
>ccd2	63 6d 70 2e 23					.text "cmp.#"
.ccd7					nt_asm_cmp_x:
>ccd7	05 0c						.byte 5, IM+NN
>ccd9	e4 cc				                .word nt_asm_cmp_y
>ccdb	db a9 e0 a9					.word xt_asm_cmp_x, z_asm_cmp_x
>ccdf	63 6d 70 2e 78					.text "cmp.x"
.cce4					nt_asm_cmp_y:
>cce4	05 0c						.byte 5, IM+NN
>cce6	f1 cc				                .word nt_asm_cmp_z
>cce8	e0 a9 e5 a9					.word xt_asm_cmp_y, z_asm_cmp_y
>ccec	63 6d 70 2e 79					.text "cmp.y"
.ccf1					nt_asm_cmp_z:
>ccf1	05 0c						.byte 5, IM+NN
>ccf3	fe cc				                .word nt_asm_cmp_zi
>ccf5	e5 a9 ea a9					.word xt_asm_cmp_z, z_asm_cmp_z
>ccf9	63 6d 70 2e 7a					.text "cmp.z"
.ccfe					nt_asm_cmp_zi:
>ccfe	06 0c						.byte 6, IM+NN
>cd00	0c cd				                .word nt_asm_cmp_ziy
>cd02	ea a9 ef a9					.word xt_asm_cmp_zi, z_asm_cmp_zi
>cd06	63 6d 70 2e 7a 69				.text "cmp.zi"
.cd0c					nt_asm_cmp_ziy:
>cd0c	07 0c						.byte 7, IM+NN
>cd0e	1b cd				                .word nt_asm_cmp_zx
>cd10	ef a9 f4 a9					.word xt_asm_cmp_ziy, z_asm_cmp_ziy
>cd14	63 6d 70 2e 7a 69 79				.text "cmp.ziy"
.cd1b					nt_asm_cmp_zx:
>cd1b	06 0c						.byte 6, IM+NN
>cd1d	29 cd				                .word nt_asm_cmp_zxi
>cd1f	f4 a9 f9 a9					.word xt_asm_cmp_zx, z_asm_cmp_zx
>cd23	63 6d 70 2e 7a 78				.text "cmp.zx"
.cd29					nt_asm_cmp_zxi:
>cd29	07 0c						.byte 7, IM+NN
>cd2b	38 cd				                .word nt_asm_cpx
>cd2d	f9 a9 fe a9					.word xt_asm_cmp_zxi, z_asm_cmp_zxi
>cd31	63 6d 70 2e 7a 78 69				.text "cmp.zxi"
.cd38					nt_asm_cpx:
>cd38	03 0c						.byte 3, IM+NN
>cd3a	43 cd				                .word nt_asm_cpx_h
>cd3c	fe a9 03 aa					.word xt_asm_cpx, z_asm_cpx
>cd40	63 70 78					.text "cpx"
.cd43					nt_asm_cpx_h:
>cd43	05 0c						.byte 5, IM+NN
>cd45	50 cd				                .word nt_asm_cpx_z
>cd47	03 aa 08 aa					.word xt_asm_cpx_h, z_asm_cpx_h
>cd4b	63 70 78 2e 23					.text "cpx.#"
.cd50					nt_asm_cpx_z:
>cd50	05 0c						.byte 5, IM+NN
>cd52	5d cd				                .word nt_asm_cpy
>cd54	08 aa 0d aa					.word xt_asm_cpx_z, z_asm_cpx_z
>cd58	63 70 78 2e 7a					.text "cpx.z"
.cd5d					nt_asm_cpy:
>cd5d	03 0c						.byte 3, IM+NN
>cd5f	68 cd				                .word nt_asm_cpy_h
>cd61	0d aa 14 aa					.word xt_asm_cpy, z_asm_cpy
>cd65	63 70 79					.text "cpy"
.cd68					nt_asm_cpy_h:
>cd68	05 0c						.byte 5, IM+NN
>cd6a	75 cd				                .word nt_asm_cpy_z
>cd6c	14 aa 19 aa					.word xt_asm_cpy_h, z_asm_cpy_h
>cd70	63 70 79 2e 23					.text "cpy.#"
.cd75					nt_asm_cpy_z:
>cd75	05 0c						.byte 5, IM+NN
>cd77	82 cd				                .word nt_asm_dec
>cd79	19 aa 1e aa					.word xt_asm_cpy_z, z_asm_cpy_z
>cd7d	63 70 79 2e 7a					.text "cpy.z"
.cd82					nt_asm_dec:
>cd82	03 0c						.byte 3, IM+NN
>cd84	8d cd				                .word nt_asm_dec_a
>cd86	1e aa 23 aa					.word xt_asm_dec, z_asm_dec
>cd8a	64 65 63					.text "dec"
.cd8d					nt_asm_dec_a:
>cd8d	05 0c						.byte 5, IM+NN
>cd8f	9a cd				                .word nt_asm_dec_x
>cd91	23 aa 28 aa					.word xt_asm_dec_a, z_asm_dec_a
>cd95	64 65 63 2e 61					.text "dec.a"
.cd9a					nt_asm_dec_x:
>cd9a	05 0c						.byte 5, IM+NN
>cd9c	a7 cd				                .word nt_asm_dec_z
>cd9e	28 aa 2d aa					.word xt_asm_dec_x, z_asm_dec_x
>cda2	64 65 63 2e 78					.text "dec.x"
.cda7					nt_asm_dec_z:
>cda7	05 0c						.byte 5, IM+NN
>cda9	b4 cd				                .word nt_asm_dec_zx
>cdab	2d aa 32 aa					.word xt_asm_dec_z, z_asm_dec_z
>cdaf	64 65 63 2e 7a					.text "dec.z"
.cdb4					nt_asm_dec_zx:
>cdb4	06 0c						.byte 6, IM+NN
>cdb6	c2 cd				                .word nt_asm_dex
>cdb8	32 aa 37 aa					.word xt_asm_dec_zx, z_asm_dec_zx
>cdbc	64 65 63 2e 7a 78				.text "dec.zx"
.cdc2					nt_asm_dex:
>cdc2	03 0c						.byte 3, IM+NN
>cdc4	cd cd				                .word nt_asm_dey
>cdc6	37 aa 3c aa					.word xt_asm_dex, z_asm_dex
>cdca	64 65 78					.text "dex"
.cdcd					nt_asm_dey:
>cdcd	03 0c						.byte 3, IM+NN
>cdcf	d8 cd				                .word nt_asm_eor
>cdd1	3c aa 41 aa					.word xt_asm_dey, z_asm_dey
>cdd5	64 65 79					.text "dey"
.cdd8					nt_asm_eor:
>cdd8	03 0c						.byte 3, IM+NN
>cdda	e3 cd				                .word nt_asm_eor_h
>cddc	41 aa 46 aa					.word xt_asm_eor, z_asm_eor
>cde0	65 6f 72					.text "eor"
.cde3					nt_asm_eor_h:
>cde3	05 0c						.byte 5, IM+NN
>cde5	f0 cd				                .word nt_asm_eor_x
>cde7	46 aa 4b aa					.word xt_asm_eor_h, z_asm_eor_h
>cdeb	65 6f 72 2e 23					.text "eor.#"
.cdf0					nt_asm_eor_x:
>cdf0	05 0c						.byte 5, IM+NN
>cdf2	fd cd				                .word nt_asm_eor_y
>cdf4	4b aa 50 aa					.word xt_asm_eor_x, z_asm_eor_x
>cdf8	65 6f 72 2e 78					.text "eor.x"
.cdfd					nt_asm_eor_y:
>cdfd	05 0c						.byte 5, IM+NN
>cdff	0a ce				                .word nt_asm_eor_z
>ce01	50 aa 55 aa					.word xt_asm_eor_y, z_asm_eor_y
>ce05	65 6f 72 2e 79					.text "eor.y"
.ce0a					nt_asm_eor_z:
>ce0a	05 0c						.byte 5, IM+NN
>ce0c	17 ce				                .word nt_asm_eor_zi
>ce0e	55 aa 5a aa					.word xt_asm_eor_z, z_asm_eor_z
>ce12	65 6f 72 2e 7a					.text "eor.z"
.ce17					nt_asm_eor_zi:
>ce17	06 0c						.byte 6, IM+NN
>ce19	25 ce				                .word nt_asm_eor_ziy
>ce1b	5a aa 5f aa					.word xt_asm_eor_zi, z_asm_eor_zi
>ce1f	65 6f 72 2e 7a 69				.text "eor.zi"
.ce25					nt_asm_eor_ziy:
>ce25	07 0c						.byte 7, IM+NN
>ce27	34 ce				                .word nt_asm_eor_zx
>ce29	5f aa 64 aa					.word xt_asm_eor_ziy, z_asm_eor_ziy
>ce2d	65 6f 72 2e 7a 69 79				.text "eor.ziy"
.ce34					nt_asm_eor_zx:
>ce34	06 0c						.byte 6, IM+NN
>ce36	42 ce				                .word nt_asm_eor_zxi
>ce38	64 aa 69 aa					.word xt_asm_eor_zx, z_asm_eor_zx
>ce3c	65 6f 72 2e 7a 78				.text "eor.zx"
.ce42					nt_asm_eor_zxi:
>ce42	07 0c						.byte 7, IM+NN
>ce44	51 ce				                .word nt_asm_inc
>ce46	69 aa 6e aa					.word xt_asm_eor_zxi, z_asm_eor_zxi
>ce4a	65 6f 72 2e 7a 78 69				.text "eor.zxi"
.ce51					nt_asm_inc:
>ce51	03 0c						.byte 3, IM+NN
>ce53	5c ce				                .word nt_asm_inc_a
>ce55	6e aa 73 aa					.word xt_asm_inc, z_asm_inc
>ce59	69 6e 63					.text "inc"
.ce5c					nt_asm_inc_a:
>ce5c	05 0c						.byte 5, IM+NN
>ce5e	69 ce				                .word nt_asm_inc_x
>ce60	73 aa 78 aa					.word xt_asm_inc_a, z_asm_inc_a
>ce64	69 6e 63 2e 61					.text "inc.a"
.ce69					nt_asm_inc_x:
>ce69	05 0c						.byte 5, IM+NN
>ce6b	76 ce				                .word nt_asm_inc_z
>ce6d	78 aa 7d aa					.word xt_asm_inc_x, z_asm_inc_x
>ce71	69 6e 63 2e 78					.text "inc.x"
.ce76					nt_asm_inc_z:
>ce76	05 0c						.byte 5, IM+NN
>ce78	83 ce				                .word nt_asm_inc_zx
>ce7a	7d aa 82 aa					.word xt_asm_inc_z, z_asm_inc_z
>ce7e	69 6e 63 2e 7a					.text "inc.z"
.ce83					nt_asm_inc_zx:
>ce83	06 0c						.byte 6, IM+NN
>ce85	91 ce				                .word nt_asm_inx
>ce87	82 aa 87 aa					.word xt_asm_inc_zx, z_asm_inc_zx
>ce8b	69 6e 63 2e 7a 78				.text "inc.zx"
.ce91					nt_asm_inx:
>ce91	03 0c						.byte 3, IM+NN
>ce93	9c ce				                .word nt_asm_iny
>ce95	87 aa 8c aa					.word xt_asm_inx, z_asm_inx
>ce99	69 6e 78					.text "inx"
.ce9c					nt_asm_iny:
>ce9c	03 0c						.byte 3, IM+NN
>ce9e	a7 ce				                .word nt_asm_jmp
>cea0	8c aa 91 aa					.word xt_asm_iny, z_asm_iny
>cea4	69 6e 79					.text "iny"
.cea7					nt_asm_jmp:
>cea7	03 0c						.byte 3, IM+NN
>cea9	b2 ce				                .word nt_asm_jmp_i
>ceab	91 aa 96 aa					.word xt_asm_jmp, z_asm_jmp
>ceaf	6a 6d 70					.text "jmp"
.ceb2					nt_asm_jmp_i:
>ceb2	05 0c						.byte 5, IM+NN
>ceb4	bf ce				                .word nt_asm_jmp_xi
>ceb6	96 aa 9b aa					.word xt_asm_jmp_i, z_asm_jmp_i
>ceba	6a 6d 70 2e 69					.text "jmp.i"
.cebf					nt_asm_jmp_xi:
>cebf	06 0c						.byte 6, IM+NN
>cec1	cd ce				                .word nt_asm_jsr
>cec3	9b aa a0 aa					.word xt_asm_jmp_xi, z_asm_jmp_xi
>cec7	6a 6d 70 2e 78 69				.text "jmp.xi"
.cecd					nt_asm_jsr:
>cecd	03 0c						.byte 3, IM+NN
>cecf	d8 ce				                .word nt_asm_lda
>ced1	a0 aa a5 aa					.word xt_asm_jsr, z_asm_jsr
>ced5	6a 73 72					.text "jsr"
.ced8					nt_asm_lda:
>ced8	03 0c						.byte 3, IM+NN
>ceda	e3 ce				                .word nt_asm_lda_h
>cedc	a5 aa aa aa					.word xt_asm_lda, z_asm_lda
>cee0	6c 64 61					.text "lda"
.cee3					nt_asm_lda_h:
>cee3	05 0c						.byte 5, IM+NN
>cee5	f0 ce				                .word nt_asm_lda_x
>cee7	aa aa af aa					.word xt_asm_lda_h, z_asm_lda_h
>ceeb	6c 64 61 2e 23					.text "lda.#"
.cef0					nt_asm_lda_x:
>cef0	05 0c						.byte 5, IM+NN
>cef2	fd ce				                .word nt_asm_lda_y
>cef4	af aa b4 aa					.word xt_asm_lda_x, z_asm_lda_x
>cef8	6c 64 61 2e 78					.text "lda.x"
.cefd					nt_asm_lda_y:
>cefd	05 0c						.byte 5, IM+NN
>ceff	0a cf				                .word nt_asm_lda_z
>cf01	b4 aa b9 aa					.word xt_asm_lda_y, z_asm_lda_y
>cf05	6c 64 61 2e 79					.text "lda.y"
.cf0a					nt_asm_lda_z:
>cf0a	05 0c						.byte 5, IM+NN
>cf0c	17 cf				                .word nt_asm_lda_zi
>cf0e	b9 aa be aa					.word xt_asm_lda_z, z_asm_lda_z
>cf12	6c 64 61 2e 7a					.text "lda.z"
.cf17					nt_asm_lda_zi:
>cf17	06 0c						.byte 6, IM+NN
>cf19	25 cf				                .word nt_asm_lda_ziy
>cf1b	be aa c3 aa					.word xt_asm_lda_zi, z_asm_lda_zi
>cf1f	6c 64 61 2e 7a 69				.text "lda.zi"
.cf25					nt_asm_lda_ziy:
>cf25	07 0c						.byte 7, IM+NN
>cf27	34 cf				                .word nt_asm_lda_zx
>cf29	c3 aa c8 aa					.word xt_asm_lda_ziy, z_asm_lda_ziy
>cf2d	6c 64 61 2e 7a 69 79				.text "lda.ziy"
.cf34					nt_asm_lda_zx:
>cf34	06 0c						.byte 6, IM+NN
>cf36	42 cf				                .word nt_asm_lda_zxi
>cf38	c8 aa cd aa					.word xt_asm_lda_zx, z_asm_lda_zx
>cf3c	6c 64 61 2e 7a 78				.text "lda.zx"
.cf42					nt_asm_lda_zxi:
>cf42	07 0c						.byte 7, IM+NN
>cf44	51 cf				                .word nt_asm_ldx
>cf46	cd aa d2 aa					.word xt_asm_lda_zxi, z_asm_lda_zxi
>cf4a	6c 64 61 2e 7a 78 69				.text "lda.zxi"
.cf51					nt_asm_ldx:
>cf51	03 0c						.byte 3, IM+NN
>cf53	5c cf				                .word nt_asm_ldx_h
>cf55	d2 aa d7 aa					.word xt_asm_ldx, z_asm_ldx
>cf59	6c 64 78					.text "ldx"
.cf5c					nt_asm_ldx_h:
>cf5c	05 0c						.byte 5, IM+NN
>cf5e	69 cf				                .word nt_asm_ldx_y
>cf60	d7 aa dc aa					.word xt_asm_ldx_h, z_asm_ldx_h
>cf64	6c 64 78 2e 23					.text "ldx.#"
.cf69					nt_asm_ldx_y:
>cf69	05 0c						.byte 5, IM+NN
>cf6b	76 cf				                .word nt_asm_ldx_z
>cf6d	dc aa e1 aa					.word xt_asm_ldx_y, z_asm_ldx_y
>cf71	6c 64 78 2e 79					.text "ldx.y"
.cf76					nt_asm_ldx_z:
>cf76	05 0c						.byte 5, IM+NN
>cf78	83 cf				                .word nt_asm_ldx_zy
>cf7a	e1 aa e6 aa					.word xt_asm_ldx_z, z_asm_ldx_z
>cf7e	6c 64 78 2e 7a					.text "ldx.z"
.cf83					nt_asm_ldx_zy:
>cf83	06 0c						.byte 6, IM+NN
>cf85	91 cf				                .word nt_asm_ldy
>cf87	e6 aa eb aa					.word xt_asm_ldx_zy, z_asm_ldx_zy
>cf8b	6c 64 78 2e 7a 79				.text "ldx.zy"
.cf91					nt_asm_ldy:
>cf91	03 0c						.byte 3, IM+NN
>cf93	9c cf				                .word nt_asm_ldy_h
>cf95	eb aa f0 aa					.word xt_asm_ldy, z_asm_ldy
>cf99	6c 64 79					.text "ldy"
.cf9c					nt_asm_ldy_h:
>cf9c	05 0c						.byte 5, IM+NN
>cf9e	a9 cf				                .word nt_asm_ldy_x
>cfa0	f0 aa f5 aa					.word xt_asm_ldy_h, z_asm_ldy_h
>cfa4	6c 64 79 2e 23					.text "ldy.#"
.cfa9					nt_asm_ldy_x:
>cfa9	05 0c						.byte 5, IM+NN
>cfab	b6 cf				                .word nt_asm_ldy_z
>cfad	f5 aa fa aa					.word xt_asm_ldy_x, z_asm_ldy_x
>cfb1	6c 64 79 2e 78					.text "ldy.x"
.cfb6					nt_asm_ldy_z:
>cfb6	05 0c						.byte 5, IM+NN
>cfb8	c3 cf				                .word nt_asm_ldy_zx
>cfba	fa aa ff aa					.word xt_asm_ldy_z, z_asm_ldy_z
>cfbe	6c 64 79 2e 7a					.text "ldy.z"
.cfc3					nt_asm_ldy_zx:
>cfc3	06 0c						.byte 6, IM+NN
>cfc5	d1 cf				                .word nt_asm_lsr
>cfc7	ff aa 04 ab					.word xt_asm_ldy_zx, z_asm_ldy_zx
>cfcb	6c 64 79 2e 7a 78				.text "ldy.zx"
.cfd1					nt_asm_lsr:
>cfd1	03 0c						.byte 3, IM+NN
>cfd3	dc cf				                .word nt_asm_lsr_a
>cfd5	04 ab 09 ab					.word xt_asm_lsr, z_asm_lsr
>cfd9	6c 73 72					.text "lsr"
.cfdc					nt_asm_lsr_a:
>cfdc	05 0c						.byte 5, IM+NN
>cfde	e9 cf				                .word nt_asm_lsr_x
>cfe0	09 ab 0e ab					.word xt_asm_lsr_a, z_asm_lsr_a
>cfe4	6c 73 72 2e 61					.text "lsr.a"
.cfe9					nt_asm_lsr_x:
>cfe9	05 0c						.byte 5, IM+NN
>cfeb	f6 cf				                .word nt_asm_lsr_z
>cfed	0e ab 13 ab					.word xt_asm_lsr_x, z_asm_lsr_x
>cff1	6c 73 72 2e 78					.text "lsr.x"
.cff6					nt_asm_lsr_z:
>cff6	05 0c						.byte 5, IM+NN
>cff8	03 d0				                .word nt_asm_lsr_zx
>cffa	13 ab 18 ab					.word xt_asm_lsr_z, z_asm_lsr_z
>cffe	6c 73 72 2e 7a					.text "lsr.z"
.d003					nt_asm_lsr_zx:
>d003	06 0c						.byte 6, IM+NN
>d005	11 d0				                .word nt_asm_nop
>d007	18 ab 1d ab					.word xt_asm_lsr_zx, z_asm_lsr_zx
>d00b	6c 73 72 2e 7a 78				.text "lsr.zx"
.d011					nt_asm_nop:
>d011	03 0c						.byte 3, IM+NN
>d013	1c d0				                .word nt_asm_ora
>d015	1d ab 22 ab					.word xt_asm_nop, z_asm_nop
>d019	6e 6f 70					.text "nop"
.d01c					nt_asm_ora:
>d01c	03 0c						.byte 3, IM+NN
>d01e	27 d0				                .word nt_asm_ora_h
>d020	22 ab 27 ab					.word xt_asm_ora, z_asm_ora
>d024	6f 72 61					.text "ora"
.d027					nt_asm_ora_h:
>d027	05 0c						.byte 5, IM+NN
>d029	34 d0				                .word nt_asm_ora_x
>d02b	27 ab 2c ab					.word xt_asm_ora_h, z_asm_ora_h
>d02f	6f 72 61 2e 23					.text "ora.#"
.d034					nt_asm_ora_x:
>d034	05 0c						.byte 5, IM+NN
>d036	41 d0				                .word nt_asm_ora_y
>d038	2c ab 31 ab					.word xt_asm_ora_x, z_asm_ora_x
>d03c	6f 72 61 2e 78					.text "ora.x"
.d041					nt_asm_ora_y:
>d041	05 0c						.byte 5, IM+NN
>d043	4e d0				                .word nt_asm_ora_z
>d045	31 ab 36 ab					.word xt_asm_ora_y, z_asm_ora_y
>d049	6f 72 61 2e 79					.text "ora.y"
.d04e					nt_asm_ora_z:
>d04e	05 0c						.byte 5, IM+NN
>d050	5b d0				                .word nt_asm_ora_zi
>d052	36 ab 3b ab					.word xt_asm_ora_z, z_asm_ora_z
>d056	6f 72 61 2e 7a					.text "ora.z"
.d05b					nt_asm_ora_zi:
>d05b	06 0c						.byte 6, IM+NN
>d05d	69 d0				                .word nt_asm_ora_ziy
>d05f	3b ab 42 ab					.word xt_asm_ora_zi, z_asm_ora_zi
>d063	6f 72 61 2e 7a 69				.text "ora.zi"
.d069					nt_asm_ora_ziy:
>d069	07 0c						.byte 7, IM+NN
>d06b	78 d0				                .word nt_asm_ora_zx
>d06d	42 ab 47 ab					.word xt_asm_ora_ziy, z_asm_ora_ziy
>d071	6f 72 61 2e 7a 69 79				.text "ora.ziy"
.d078					nt_asm_ora_zx:
>d078	06 0c						.byte 6, IM+NN
>d07a	86 d0				                .word nt_asm_ora_zxi
>d07c	47 ab 4c ab					.word xt_asm_ora_zx, z_asm_ora_zx
>d080	6f 72 61 2e 7a 78				.text "ora.zx"
.d086					nt_asm_ora_zxi:
>d086	07 0c						.byte 7, IM+NN
>d088	95 d0				                .word nt_asm_pha
>d08a	4c ab 51 ab					.word xt_asm_ora_zxi, z_asm_ora_zxi
>d08e	6f 72 61 2e 7a 78 69				.text "ora.zxi"
.d095					nt_asm_pha:
>d095	03 0c						.byte 3, IM+NN
>d097	a0 d0				                .word nt_asm_php
>d099	51 ab 56 ab					.word xt_asm_pha, z_asm_pha
>d09d	70 68 61					.text "pha"
.d0a0					nt_asm_php:
>d0a0	03 0c						.byte 3, IM+NN
>d0a2	ab d0				                .word nt_asm_phx
>d0a4	56 ab 5b ab					.word xt_asm_php, z_asm_php
>d0a8	70 68 70					.text "php"
.d0ab					nt_asm_phx:
>d0ab	03 0c						.byte 3, IM+NN
>d0ad	b6 d0				                .word nt_asm_phy
>d0af	5b ab 60 ab					.word xt_asm_phx, z_asm_phx
>d0b3	70 68 78					.text "phx"
.d0b6					nt_asm_phy:
>d0b6	03 0c						.byte 3, IM+NN
>d0b8	c1 d0				                .word nt_asm_pla
>d0ba	60 ab 65 ab					.word xt_asm_phy, z_asm_phy
>d0be	70 68 79					.text "phy"
.d0c1					nt_asm_pla:
>d0c1	03 0c						.byte 3, IM+NN
>d0c3	cc d0				                .word nt_asm_plp
>d0c5	65 ab 6a ab					.word xt_asm_pla, z_asm_pla
>d0c9	70 6c 61					.text "pla"
.d0cc					nt_asm_plp:
>d0cc	03 0c						.byte 3, IM+NN
>d0ce	d7 d0				                .word nt_asm_plx
>d0d0	6a ab 6f ab					.word xt_asm_plp, z_asm_plp
>d0d4	70 6c 70					.text "plp"
.d0d7					nt_asm_plx:
>d0d7	03 0c						.byte 3, IM+NN
>d0d9	e2 d0				                .word nt_asm_ply
>d0db	6f ab 74 ab					.word xt_asm_plx, z_asm_plx
>d0df	70 6c 78					.text "plx"
.d0e2					nt_asm_ply:
>d0e2	03 0c						.byte 3, IM+NN
>d0e4	ed d0				                .word nt_asm_rol
>d0e6	74 ab 79 ab					.word xt_asm_ply, z_asm_ply
>d0ea	70 6c 79					.text "ply"
.d0ed					nt_asm_rol:
>d0ed	03 0c						.byte 3, IM+NN
>d0ef	f8 d0				                .word nt_asm_rol_a
>d0f1	79 ab 7e ab					.word xt_asm_rol, z_asm_rol
>d0f5	72 6f 6c					.text "rol"
.d0f8					nt_asm_rol_a:
>d0f8	05 0c						.byte 5, IM+NN
>d0fa	05 d1				                .word nt_asm_rol_x
>d0fc	7e ab 83 ab					.word xt_asm_rol_a, z_asm_rol_a
>d100	72 6f 6c 2e 61					.text "rol.a"
.d105					nt_asm_rol_x:
>d105	05 0c						.byte 5, IM+NN
>d107	12 d1				                .word nt_asm_rol_z
>d109	83 ab 88 ab					.word xt_asm_rol_x, z_asm_rol_x
>d10d	72 6f 6c 2e 78					.text "rol.x"
.d112					nt_asm_rol_z:
>d112	05 0c						.byte 5, IM+NN
>d114	1f d1				                .word nt_asm_rol_zx
>d116	88 ab 8d ab					.word xt_asm_rol_z, z_asm_rol_z
>d11a	72 6f 6c 2e 7a					.text "rol.z"
.d11f					nt_asm_rol_zx:
>d11f	06 0c						.byte 6, IM+NN
>d121	2d d1				                .word nt_asm_ror
>d123	8d ab 92 ab					.word xt_asm_rol_zx, z_asm_rol_zx
>d127	72 6f 6c 2e 7a 78				.text "rol.zx"
.d12d					nt_asm_ror:
>d12d	03 0c						.byte 3, IM+NN
>d12f	38 d1				                .word nt_asm_ror_a
>d131	92 ab 97 ab					.word xt_asm_ror, z_asm_ror
>d135	72 6f 72					.text "ror"
.d138					nt_asm_ror_a:
>d138	05 0c						.byte 5, IM+NN
>d13a	45 d1				                .word nt_asm_ror_x
>d13c	97 ab 9c ab					.word xt_asm_ror_a, z_asm_ror_a
>d140	72 6f 72 2e 61					.text "ror.a"
.d145					nt_asm_ror_x:
>d145	05 0c						.byte 5, IM+NN
>d147	52 d1				                .word nt_asm_ror_z
>d149	9c ab a1 ab					.word xt_asm_ror_x, z_asm_ror_x
>d14d	72 6f 72 2e 78					.text "ror.x"
.d152					nt_asm_ror_z:
>d152	05 0c						.byte 5, IM+NN
>d154	5f d1				                .word nt_asm_ror_zx
>d156	a1 ab a6 ab					.word xt_asm_ror_z, z_asm_ror_z
>d15a	72 6f 72 2e 7a					.text "ror.z"
.d15f					nt_asm_ror_zx:
>d15f	06 0c						.byte 6, IM+NN
>d161	6d d1				                .word nt_asm_rti
>d163	a6 ab ab ab					.word xt_asm_ror_zx, z_asm_ror_zx
>d167	72 6f 72 2e 7a 78				.text "ror.zx"
.d16d					nt_asm_rti:
>d16d	03 0c						.byte 3, IM+NN
>d16f	78 d1				                .word nt_asm_rts
>d171	ab ab b0 ab					.word xt_asm_rti, z_asm_rti
>d175	72 74 69					.text "rti"
.d178					nt_asm_rts:
>d178	03 0c						.byte 3, IM+NN
>d17a	83 d1				                .word nt_asm_sbc
>d17c	b0 ab b5 ab					.word xt_asm_rts, z_asm_rts
>d180	72 74 73					.text "rts"
.d183					nt_asm_sbc:
>d183	03 0c						.byte 3, IM+NN
>d185	8e d1				                .word nt_asm_sbc_h
>d187	b5 ab ba ab					.word xt_asm_sbc, z_asm_sbc
>d18b	73 62 63					.text "sbc"
.d18e					nt_asm_sbc_h:
>d18e	05 0c						.byte 5, IM+NN
>d190	9b d1				                .word nt_asm_sbc_x
>d192	ba ab bf ab					.word xt_asm_sbc_h, z_asm_sbc_h
>d196	73 62 63 2e 23					.text "sbc.#"
.d19b					nt_asm_sbc_x:
>d19b	05 0c						.byte 5, IM+NN
>d19d	a8 d1				                .word nt_asm_sbc_y
>d19f	bf ab c4 ab					.word xt_asm_sbc_x, z_asm_sbc_x
>d1a3	73 62 63 2e 78					.text "sbc.x"
.d1a8					nt_asm_sbc_y:
>d1a8	05 0c						.byte 5, IM+NN
>d1aa	b5 d1				                .word nt_asm_sbc_z
>d1ac	c4 ab c9 ab					.word xt_asm_sbc_y, z_asm_sbc_y
>d1b0	73 62 63 2e 79					.text "sbc.y"
.d1b5					nt_asm_sbc_z:
>d1b5	05 0c						.byte 5, IM+NN
>d1b7	c2 d1				                .word nt_asm_sbc_zi
>d1b9	c9 ab ce ab					.word xt_asm_sbc_z, z_asm_sbc_z
>d1bd	73 62 63 2e 7a					.text "sbc.z"
.d1c2					nt_asm_sbc_zi:
>d1c2	06 0c						.byte 6, IM+NN
>d1c4	d0 d1				                .word nt_asm_sbc_ziy
>d1c6	ce ab d3 ab					.word xt_asm_sbc_zi, z_asm_sbc_zi
>d1ca	73 62 63 2e 7a 69				.text "sbc.zi"
.d1d0					nt_asm_sbc_ziy:
>d1d0	07 0c						.byte 7, IM+NN
>d1d2	df d1				                .word nt_asm_sbc_zx
>d1d4	d3 ab d8 ab					.word xt_asm_sbc_ziy, z_asm_sbc_ziy
>d1d8	73 62 63 2e 7a 69 79				.text "sbc.ziy"
.d1df					nt_asm_sbc_zx:
>d1df	06 0c						.byte 6, IM+NN
>d1e1	ed d1				                .word nt_asm_sbc_zxi
>d1e3	d8 ab dd ab					.word xt_asm_sbc_zx, z_asm_sbc_zx
>d1e7	73 62 63 2e 7a 78				.text "sbc.zx"
.d1ed					nt_asm_sbc_zxi:
>d1ed	07 0c						.byte 7, IM+NN
>d1ef	fc d1				                .word nt_asm_sec
>d1f1	dd ab e1 ab					.word xt_asm_sbc_zxi, z_asm_sbc_zxi
>d1f5	73 62 63 2e 7a 78 69				.text "sbc.zxi"
.d1fc					nt_asm_sec:
>d1fc	03 0c						.byte 3, IM+NN
>d1fe	07 d2				                .word nt_asm_sed
>d200	e1 ab e5 ab					.word xt_asm_sec, z_asm_sec
>d204	73 65 63					.text "sec"
.d207					nt_asm_sed:
>d207	03 0c						.byte 3, IM+NN
>d209	12 d2				                .word nt_asm_sei
>d20b	e5 ab e9 ab					.word xt_asm_sed, z_asm_sed
>d20f	73 65 64					.text "sed"
.d212					nt_asm_sei:
>d212	03 0c						.byte 3, IM+NN
>d214	1d d2				                .word nt_asm_sta
>d216	e9 ab ed ab					.word xt_asm_sei, z_asm_sei
>d21a	73 65 69					.text "sei"
.d21d					nt_asm_sta:
>d21d	03 0c						.byte 3, IM+NN
>d21f	28 d2				                .word nt_asm_sta_x
>d221	ed ab f1 ab					.word xt_asm_sta, z_asm_sta
>d225	73 74 61					.text "sta"
.d228					nt_asm_sta_x:
>d228	05 0c						.byte 5, IM+NN
>d22a	35 d2				                .word nt_asm_sta_y
>d22c	f1 ab f5 ab					.word xt_asm_sta_x, z_asm_sta_x
>d230	73 74 61 2e 78					.text "sta.x"
.d235					nt_asm_sta_y:
>d235	05 0c						.byte 5, IM+NN
>d237	42 d2				                .word nt_asm_sta_z
>d239	f5 ab f9 ab					.word xt_asm_sta_y, z_asm_sta_y
>d23d	73 74 61 2e 79					.text "sta.y"
.d242					nt_asm_sta_z:
>d242	05 0c						.byte 5, IM+NN
>d244	4f d2				                .word nt_asm_sta_zi
>d246	f9 ab fd ab					.word xt_asm_sta_z, z_asm_sta_z
>d24a	73 74 61 2e 7a					.text "sta.z"
.d24f					nt_asm_sta_zi:
>d24f	06 0c						.byte 6, IM+NN
>d251	5d d2				                .word nt_asm_sta_ziy
>d253	fd ab 01 ac					.word xt_asm_sta_zi, z_asm_sta_zi
>d257	73 74 61 2e 7a 69				.text "sta.zi"
.d25d					nt_asm_sta_ziy:
>d25d	07 0c						.byte 7, IM+NN
>d25f	6c d2				                .word nt_asm_sta_zx
>d261	01 ac 05 ac					.word xt_asm_sta_ziy, z_asm_sta_ziy
>d265	73 74 61 2e 7a 69 79				.text "sta.ziy"
.d26c					nt_asm_sta_zx:
>d26c	06 0c						.byte 6, IM+NN
>d26e	7a d2				                .word nt_asm_sta_zxi
>d270	05 ac 09 ac					.word xt_asm_sta_zx, z_asm_sta_zx
>d274	73 74 61 2e 7a 78				.text "sta.zx"
.d27a					nt_asm_sta_zxi:
>d27a	07 0c						.byte 7, IM+NN
>d27c	89 d2				                .word nt_asm_stx
>d27e	09 ac 0d ac					.word xt_asm_sta_zxi, z_asm_sta_zxi
>d282	73 74 61 2e 7a 78 69				.text "sta.zxi"
.d289					nt_asm_stx:
>d289	03 0c						.byte 3, IM+NN
>d28b	94 d2				                .word nt_asm_stx_z
>d28d	0d ac 11 ac					.word xt_asm_stx, z_asm_stx
>d291	73 74 78					.text "stx"
.d294					nt_asm_stx_z:
>d294	05 0c						.byte 5, IM+NN
>d296	a1 d2				                .word nt_asm_stx_zy
>d298	11 ac 15 ac					.word xt_asm_stx_z, z_asm_stx_z
>d29c	73 74 78 2e 7a					.text "stx.z"
.d2a1					nt_asm_stx_zy:
>d2a1	06 0c						.byte 6, IM+NN
>d2a3	af d2				                .word nt_asm_sty
>d2a5	15 ac 19 ac					.word xt_asm_stx_zy, z_asm_stx_zy
>d2a9	73 74 78 2e 7a 79				.text "stx.zy"
.d2af					nt_asm_sty:
>d2af	03 0c						.byte 3, IM+NN
>d2b1	ba d2				                .word nt_asm_sty_z
>d2b3	19 ac 1d ac					.word xt_asm_sty, z_asm_sty
>d2b7	73 74 79					.text "sty"
.d2ba					nt_asm_sty_z:
>d2ba	05 0c						.byte 5, IM+NN
>d2bc	c7 d2				                .word nt_asm_sty_zx
>d2be	1d ac 21 ac					.word xt_asm_sty_z, z_asm_sty_z
>d2c2	73 74 79 2e 7a					.text "sty.z"
.d2c7					nt_asm_sty_zx:
>d2c7	06 0c						.byte 6, IM+NN
>d2c9	d5 d2				                .word nt_asm_stz
>d2cb	21 ac 25 ac					.word xt_asm_sty_zx, z_asm_sty_zx
>d2cf	73 74 79 2e 7a 78				.text "sty.zx"
.d2d5					nt_asm_stz:
>d2d5	03 0c						.byte 3, IM+NN
>d2d7	e0 d2				                .word nt_asm_stz_x
>d2d9	25 ac 29 ac					.word xt_asm_stz, z_asm_stz
>d2dd	73 74 7a					.text "stz"
.d2e0					nt_asm_stz_x:
>d2e0	05 0c						.byte 5, IM+NN
>d2e2	ed d2				                .word nt_asm_stz_z
>d2e4	29 ac 2d ac					.word xt_asm_stz_x, z_asm_stz_x
>d2e8	73 74 7a 2e 78					.text "stz.x"
.d2ed					nt_asm_stz_z:
>d2ed	05 0c						.byte 5, IM+NN
>d2ef	fa d2				                .word nt_asm_stz_zx
>d2f1	2d ac 31 ac					.word xt_asm_stz_z, z_asm_stz_z
>d2f5	73 74 7a 2e 7a					.text "stz.z"
.d2fa					nt_asm_stz_zx:
>d2fa	06 0c						.byte 6, IM+NN
>d2fc	08 d3				                .word nt_asm_tax
>d2fe	31 ac 35 ac					.word xt_asm_stz_zx, z_asm_stz_zx
>d302	73 74 7a 2e 7a 78				.text "stz.zx"
.d308					nt_asm_tax:
>d308	03 0c						.byte 3, IM+NN
>d30a	13 d3				                .word nt_asm_tay
>d30c	35 ac 39 ac					.word xt_asm_tax, z_asm_tax
>d310	74 61 78					.text "tax"
.d313					nt_asm_tay:
>d313	03 0c						.byte 3, IM+NN
>d315	1e d3				                .word nt_asm_trb
>d317	39 ac 3d ac					.word xt_asm_tay, z_asm_tay
>d31b	74 61 79					.text "tay"
.d31e					nt_asm_trb:
>d31e	03 0c						.byte 3, IM+NN
>d320	29 d3				                .word nt_asm_trb_z
>d322	3d ac 41 ac					.word xt_asm_trb, z_asm_trb
>d326	74 72 62					.text "trb"
.d329					nt_asm_trb_z:
>d329	05 0c						.byte 5, IM+NN
>d32b	36 d3				                .word nt_asm_tsb
>d32d	41 ac 45 ac					.word xt_asm_trb_z, z_asm_trb_z
>d331	74 72 62 2e 7a					.text "trb.z"
.d336					nt_asm_tsb:
>d336	03 0c						.byte 3, IM+NN
>d338	41 d3				                .word nt_asm_tsb_z
>d33a	45 ac 49 ac					.word xt_asm_tsb, z_asm_tsb
>d33e	74 73 62					.text "tsb"
.d341					nt_asm_tsb_z:
>d341	05 0c						.byte 5, IM+NN
>d343	4e d3				                .word nt_asm_tsx
>d345	49 ac 4d ac					.word xt_asm_tsb_z, z_asm_tsb_z
>d349	74 73 62 2e 7a					.text "tsb.z"
.d34e					nt_asm_tsx:
>d34e	03 0c						.byte 3, IM+NN
>d350	59 d3				                .word nt_asm_txa
>d352	4d ac 51 ac					.word xt_asm_tsx, z_asm_tsx
>d356	74 73 78					.text "tsx"
.d359					nt_asm_txa:
>d359	03 0c						.byte 3, IM+NN
>d35b	64 d3				                .word nt_asm_txs
>d35d	51 ac 55 ac					.word xt_asm_txa, z_asm_txa
>d361	74 78 61					.text "txa"
.d364					nt_asm_txs:
>d364	03 0c						.byte 3, IM+NN
>d366	6f d3				                .word nt_asm_tya
>d368	55 ac 59 ac					.word xt_asm_txs, z_asm_txs
>d36c	74 78 73					.text "txs"
.d36f					nt_asm_tya:
>d36f	03 0c						.byte 3, IM+NN
>d371	7a d3				                .word nt_asm_arrow
>d373	59 ac 5d ac					.word xt_asm_tya, z_asm_tya
>d377	74 79 61					.text "tya"
.d37a					nt_asm_arrow:
>d37a	03 04				                .byte 3, IM
>d37c	85 d3				                .word nt_asm_back_jump
>d37e	53 91 5d 91			                .word xt_asm_arrow, z_asm_arrow
>d382	2d 2d 3e			                .text "-->"
.d385					nt_asm_back_jump:
>d385	02 04				                .byte 2, IM
>d387	8f d3				                .word nt_asm_back_branch
>d389	ae ac ae ac			                .word xt_asm_back_jump, z_asm_back_jump
>d38d	3c 6a				                .text "<j"
.d38f					nt_asm_back_branch:
>d38f	02 04				                .byte 2, IM
>d391	99 d3				                .word nt_asm_push_a
>d393	af ac b7 ac			                .word xt_asm_back_branch, z_asm_back_branch
>d397	3c 62				                .text "<b"
.d399					nt_asm_push_a:
>d399	06 0c				                .byte 6, IM+NN
>d39b	00 00				                .word 0000
>d39d	97 ac a6 ac			                .word xt_asm_push_a, z_asm_push_a
>d3a1	70 75 73 68 2d 61		                .text "push-a"

;******  Return to file: platform/../taliforth.asm


;******  Processing file: platform/../strings.asm

=0					str_ok             =  0
=1					str_compile        =  1
=2					str_redefined      =  2
=3					str_wid_forth      =  3
=4					str_abc_lower      =  4
=5					str_abc_upper      =  5
=6					str_wid_editor     =  6
=7					str_wid_assembler  =  7
=8					str_wid_root       =  8
=9					str_see_flags      =  9
=10					str_see_nt         = 10
=11					str_see_xt         = 11
=12					str_see_size       = 12
=13					str_disasm_lit     = 13
=14					str_disasm_sdc     = 14
=15					str_disasm_bra     = 15
.d3a7					string_table:
>d3a7	c7 d3 cb d3 d5 d3 3b d4		        .word s_ok, s_compiled, s_redefined, s_wid_forth, s_abc_lower ; 0-4
>d3af	e0 d3
>d3b1	04 d4 33 d4 28 d4 42 d4		        .word s_abc_upper, s_wid_editor, s_wid_asm, s_wid_root        ; 5-8
>d3b9	48 d4 64 d4 69 d4 6e d4		        .word s_see_flags, s_see_nt, s_see_xt, s_see_size             ; 9-12
>d3c1	7f d4 88 d4 9a d4		        .word s_disasm_lit, s_disasm_sdc, s_disasm_bra                ; 13-15
>d3c7	20 6f 6b 00			s_ok:         .text " ok", 0         ; note space at beginning
>d3cb	20 63 6f 6d 70 69 6c 65		s_compiled:   .text " compiled", 0   ; note space at beginning
>d3d3	64 00
>d3d5	72 65 64 65 66 69 6e 65		s_redefined:  .text "redefined ", 0  ; note space at end
>d3dd	64 20 00
>d3e0	30 31 32 33 34 35 36 37		s_abc_lower:  .text "0123456789abcdefghijklmnopqrstuvwxyz"
>d3e8	38 39 61 62 63 64 65 66 67 68 69 6a 6b 6c 6d 6e
>d3f8	6f 70 71 72 73 74 75 76 77 78 79 7a
>d404	30 31 32 33 34 35 36 37		s_abc_upper:  .text "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
>d40c	38 39 41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e
>d41c	4f 50 51 52 53 54 55 56 57 58 59 5a
>d428	41 73 73 65 6d 62 6c 65		s_wid_asm:    .text "Assembler ", 0  ; Wordlist ID 2, note space at end
>d430	72 20 00
>d433	45 64 69 74 6f 72 20 00		s_wid_editor: .text "Editor ", 0     ; Wordlist ID 1, note space at end
>d43b	46 6f 72 74 68 20 00		s_wid_forth:  .text "Forth ", 0      ; Wordlist ID 0, note space at end
>d442	52 6f 6f 74 20 00		s_wid_root:   .text "Root ", 0       ; Wordlist ID 3, note space at end
>d448	66 6c 61 67 73 20 28 43		s_see_flags:  .text "flags (CO AN IM NN UF HC): ", 0
>d450	4f 20 41 4e 20 49 4d 20 4e 4e 20 55 46 20 48 43
>d460	29 3a 20 00
>d464	6e 74 3a 20 00			s_see_nt:     .text "nt: ", 0
>d469	78 74 3a 20 00			s_see_xt:     .text "xt: ", 0
>d46e	73 69 7a 65 20 28 64 65		s_see_size:   .text "size (decimal): ", 0
>d476	63 69 6d 61 6c 29 3a 20 00
>d47f	4c 49 54 45 52 41 4c 20		s_disasm_lit: .text "LITERAL ", 0
>d487	00
>d488	53 54 41 43 4b 20 44 45		s_disasm_sdc: .text "STACK DEPTH CHECK", 0
>d490	50 54 48 20 43 48 45 43 4b 00
>d49a	42 52 41 4e 43 48 20 00		s_disasm_bra: .text "BRANCH ",0
=0					err_allot        = 0
=1					err_badsource    = 1
=2					err_compileonly  = 2
=3					err_defer        = 3
=4					err_divzero      = 4
=5					err_noname       = 5
=6					err_refill       = 6
=7					err_state        = 7
=8					err_syntax       = 8
=9					err_underflow    = 9
=10					err_negallot     = 10
=11					err_wordlist     = 11
=12					err_blockwords   = 12
.d4a2					error_table:
>d4a2	bc d4 dd d4 fd d4 1e d5		        .word es_allot, es_badsource, es_compileonly, es_defer  ;  0-3
>d4aa	3b d5 4c d5 5c d5 8a d5		        .word es_divzero, es_noname, es_refill, es_state        ;  4-7
>d4b2	a2 d5 b1 d5 c1 d5 dd d5		        .word es_syntax, es_underflow, es_negallot, es_wordlist ;  8-11
>d4ba	f4 d5				        .word es_blockwords                                    ; 12
>d4bc	41 4c 4c 4f 54 20 75 73		es_allot:       .text "ALLOT using all available memory", 0
>d4c4	69 6e 67 20 61 6c 6c 20 61 76 61 69 6c 61 62 6c
>d4d4	65 20 6d 65 6d 6f 72 79 00
>d4dd	49 6c 6c 65 67 61 6c 20		es_badsource:   .text "Illegal SOURCE-ID during REFILL", 0
>d4e5	53 4f 55 52 43 45 2d 49 44 20 64 75 72 69 6e 67
>d4f5	20 52 45 46 49 4c 4c 00
>d4fd	49 6e 74 65 72 70 72 65		es_compileonly: .text "Interpreting a compile-only word", 0
>d505	74 69 6e 67 20 61 20 63 6f 6d 70 69 6c 65 2d 6f
>d515	6e 6c 79 20 77 6f 72 64 00
>d51e	44 45 46 45 52 65 64 20		es_defer:       .text "DEFERed word not defined yet", 0
>d526	77 6f 72 64 20 6e 6f 74 20 64 65 66 69 6e 65 64
>d536	20 79 65 74 00
>d53b	44 69 76 69 73 69 6f 6e		es_divzero:     .text "Division by zero", 0
>d543	20 62 79 20 7a 65 72 6f 00
>d54c	50 61 72 73 69 6e 67 20		es_noname:      .text "Parsing failure", 0
>d554	66 61 69 6c 75 72 65 00
>d55c	51 55 49 54 20 63 6f 75		es_refill:      .text "QUIT could not get input (REFILL returned -1)", 0
>d564	6c 64 20 6e 6f 74 20 67 65 74 20 69 6e 70 75 74
>d574	20 28 52 45 46 49 4c 4c 20 72 65 74 75 72 6e 65
>d584	64 20 2d 31 29 00
>d58a	41 6c 72 65 61 64 79 20		es_state:       .text "Already in compile mode", 0
>d592	69 6e 20 63 6f 6d 70 69 6c 65 20 6d 6f 64 65 00
>d5a2	55 6e 64 65 66 69 6e 65		es_syntax:      .text "Undefined word", 0
>d5aa	64 20 77 6f 72 64 00
>d5b1	53 74 61 63 6b 20 75 6e		es_underflow:   .text "Stack underflow", 0
>d5b9	64 65 72 66 6c 6f 77 00
>d5c1	4d 61 78 20 6d 65 6d 6f		es_negallot:    .text "Max memory freed with ALLOT", 0
>d5c9	72 79 20 66 72 65 65 64 20 77 69 74 68 20 41 4c
>d5d9	4c 4f 54 00
>d5dd	4e 6f 20 77 6f 72 64 6c		es_wordlist:    .text "No wordlists available", 0
>d5e5	69 73 74 73 20 61 76 61 69 6c 61 62 6c 65 00
>d5f4	50 6c 65 61 73 65 20 61		es_blockwords:  .text "Please assign vectors BLOCK-READ-VECTOR and BLOCK-WRITE-VECTOR",0
>d5fc	73 73 69 67 6e 20 76 65 63 74 6f 72 73 20 42 4c
>d60c	4f 43 4b 2d 52 45 41 44 2d 56 45 43 54 4f 52 20
>d61c	61 6e 64 20 42 4c 4f 43 4b 2d 57 52 49 54 45 2d
>d62c	56 45 43 54 4f 52 00
>d633	0f 2f 43 4f 55 4e 54 45		envs_cs:        .text 15, "/COUNTED-STRING"
>d63b	44 2d 53 54 52 49 4e 47
>d643	05 2f 48 4f 4c 44		envs_hold:      .text 5, "/HOLD"
>d649	04 2f 50 41 44			envs_pad:       .text 4, "/PAD"
>d64e	11 41 44 44 52 45 53 53		envs_aub:       .text 17, "ADDRESS-UNIT-BITS"
>d656	2d 55 4e 49 54 2d 42 49 54 53
>d660	07 46 4c 4f 4f 52 45 44		envs_floored:   .text 7, "FLOORED"
>d668	08 4d 41 58 2d 43 48 41		envs_max_char:  .text 8, "MAX-CHAR"
>d670	52
>d671	05 4d 41 58 2d 4e		envs_max_n:     .text 5, "MAX-N"
>d677	05 4d 41 58 2d 55		envs_max_u:     .text 5, "MAX-U"
>d67d	12 52 45 54 55 52 4e 2d		envs_rsc:       .text 18, "RETURN-STACK-CELLS"
>d685	53 54 41 43 4b 2d 43 45 4c 4c 53
>d690	0b 53 54 41 43 4b 2d 43		envs_sc:        .text 11, "STACK-CELLS"
>d698	45 4c 4c 53
>d69c	09 57 4f 52 44 4c 49 53		envs_wl:        .text 9, "WORDLISTS"
>d6a4	54 53
>d6a6	05 4d 41 58 2d 44		envs_max_d:     .text 5, "MAX-D"
>d6ac	06 4d 41 58 2d 55 44		envs_max_ud:    .text 6, "MAX-UD"

;******  Return to file: platform/../taliforth.asm

.d6b3					cmpl_subroutine:
.d6b3	48		pha		                pha             ; save LSB of address
.d6b4	a9 20		lda #$20	                lda #$20        ; load opcode for JSR
.d6b6	80 03		bra $d6bb	                bra cmpl_common
.d6b8					cmpl_jump:
.d6b8	48		pha		                pha             ; save LSB of address
.d6b9	a9 4c		lda #$4c	                lda #$4c        ; load opcode for JMP, fall thru to cmpl_common
.d6bb					cmpl_common:
.d6bb	20 c3 d6	jsr $d6c3	                jsr cmpl_a      ; compile opcode
.d6be	68		pla		                pla             ; retrieve address LSB; fall thru to cmpl_word
.d6bf					cmpl_word:
.d6bf	20 c3 d6	jsr $d6c3	                jsr cmpl_a      ; compile LSB of address
.d6c2	98		tya		                tya             ; fall thru for MSB
.d6c3					cmpl_a:
.d6c3	92 00		sta ($00)	                sta (cp)
.d6c5	e6 00		inc $00		                inc cp
.d6c7	d0 02		bne $d6cb	                bne _done
.d6c9	e6 01		inc $01		                inc cp+1
.d6cb					_done:
.d6cb	60		rts		                rts
.d6cc					doconst:
.d6cc	ca		dex		                dex             ; make room for constant
.d6cd	ca		dex		                dex
.d6ce	68		pla		                pla             ; LSB of return address
.d6cf	85 24		sta $24		                sta tmp1
.d6d1	68		pla		                pla             ; MSB of return address
.d6d2	85 25		sta $25		                sta tmp1+1
.d6d4	a0 01		ldy #$01	                ldy #1
.d6d6	b1 24		lda ($24),y	                lda (tmp1),y
.d6d8	95 00		sta $00,x	                sta 0,x
.d6da	c8		iny		                iny
.d6db	b1 24		lda ($24),y	                lda (tmp1),y
.d6dd	95 01		sta $01,x	                sta 1,x
.d6df	60		rts		                rts
.d6e0					dodefer:
.d6e0	68		pla		                pla             ; LSB
.d6e1	85 24		sta $24		                sta tmp1
.d6e3	68		pla		                pla             ; MSB
.d6e4	85 25		sta $25		                sta tmp1+1
.d6e6	a0 01		ldy #$01	                ldy #1
.d6e8	b1 24		lda ($24),y	                lda (tmp1),y
.d6ea	85 26		sta $26		                sta tmp2
.d6ec	c8		iny		                iny
.d6ed	b1 24		lda ($24),y	                lda (tmp1),y
.d6ef	85 27		sta $27		                sta tmp2+1
.d6f1	6c 26 00	jmp ($0026)	                jmp (tmp2)      ; This is actually a jump to the new target
.d6f4					defer_error:
.d6f4	a9 03		lda #$03	                lda #err_defer
.d6f6	4c 26 d8	jmp $d826	                jmp error
.d6f9					dodoes:
.d6f9	7a		ply		                ply             ; LSB
.d6fa	68		pla		                pla             ; MSB
.d6fb	c8		iny		                iny
.d6fc	d0 01		bne $d6ff	                bne +
.d6fe	1a		inc a		                ina
.d6ff					+
.d6ff	84 26		sty $26		                sty tmp2
.d701	85 27		sta $27		                sta tmp2+1
.d703	ca		dex		                dex
.d704	ca		dex		                dex
.d705	7a		ply		                ply
.d706	68		pla		                pla
.d707	c8		iny		                iny
.d708	d0 01		bne $d70b	                bne +
.d70a	1a		inc a		                ina
.d70b					+
.d70b	94 00		sty $00,x	                sty 0,x         ; LSB
.d70d	95 01		sta $01,x	                sta 1,x         ; MSB
.d70f	6c 26 00	jmp ($0026)	                jmp (tmp2)
.d712					dovar:
.d712	7a		ply		                ply             ; LSB
.d713	68		pla		                pla             ; MSB
.d714	c8		iny		                iny
.d715	d0 01		bne $d718	                bne +
.d717	1a		inc a		                ina
.d718					+
.d718	ca		dex		                dex
.d719	ca		dex		                dex
.d71a	95 01		sta $01,x	                sta 1,x
.d71c	98		tya		                tya
.d71d	95 00		sta $00,x	                sta 0,x
.d71f	60		rts		                rts
.d720					byte_to_ascii:
.d720	48		pha		                pha
.d721	4a		lsr a		                lsr             ; convert high nibble first
.d722	4a		lsr a		                lsr
.d723	4a		lsr a		                lsr
.d724	4a		lsr a		                lsr
.d725	20 29 d7	jsr $d729	                jsr _nibble_to_ascii
.d728	68		pla		                pla
.d729					_nibble_to_ascii:
.d729	29 0f		and #$0f	                and #$0F
.d72b	09 30		ora #$30	                ora #'0'
.d72d	c9 3a		cmp #$3a	                cmp #$3A        ; '9+1
.d72f	90 02		bcc $d733	                bcc +
.d731	69 06		adc #$06	                adc #$06
.d733	4c d7 8d	jmp $8dd7	+               jmp emit_a
.d736	60		rts		                rts
.d737					compare_16bit:
.d737	b5 00		lda $00,x	                lda 0,x                 ; LSB of TOS
.d739	d5 02		cmp $02,x	                cmp 2,x                 ; LSB of NOS
.d73b	f0 0a		beq $d747	                beq _equal
.d73d	b5 01		lda $01,x	                lda 1,x                 ; MSB of TOS
.d73f	f5 03		sbc $03,x	                sbc 3,x                 ; MSB of NOS
.d741	09 01		ora #$01	                ora #1                  ; Make zero flag 0 because not equal
.d743	70 08		bvs $d74d	                bvs _overflow
.d745	80 08		bra $d74f	                bra _not_equal
.d747					_equal:
.d747	b5 01		lda $01,x	                lda 1,x                 ; MSB of TOS
.d749	f5 03		sbc $03,x	                sbc 3,x                 ; MSB of NOS
.d74b	50 04		bvc $d751	                bvc _done
.d74d					_overflow:
.d74d	49 80		eor #$80	                eor #$80                ; complement negative flag
.d74f					_not_equal:
.d74f	09 01		ora #$01	                ora #1                  ; if overflow, we can't be eqal
.d751					_done:
.d751	60		rts		                rts
.d752					current_to_dp:
.d752	a0 04		ldy #$04	                ldy #current_offset
.d754	b1 1e		lda ($1e),y	                lda (up),y      ; current is a byte variable
.d756	0a		asl a		                asl             ; turn it into an offset (in cells)
.d757	18		clc		                clc
.d758	69 06		adc #$06	                adc #wordlists_offset   ; add offset to wordlists base.
.d75a	a8		tay		                tay
.d75b	b1 1e		lda ($1e),y	                lda (up),y              ; get the dp for that wordlist.
.d75d	85 02		sta $02		                sta dp
.d75f	c8		iny		                iny
.d760	b1 1e		lda ($1e),y	                lda (up),y
.d762	85 03		sta $03		                sta dp+1
.d764	60		rts		                rts
.d765					dp_to_current:
.d765	a0 04		ldy #$04	                ldy #current_offset
.d767	b1 1e		lda ($1e),y	                lda (up),y      ; current is a byte variable
.d769	0a		asl a		                asl             ; turn it into an offset (in cells)
.d76a	18		clc		                clc
.d76b	69 06		adc #$06	                adc #wordlists_offset   ; add offset to wordlists base.
.d76d	a8		tay		                tay
.d76e	a5 02		lda $02		                lda dp
.d770	91 1e		sta ($1e),y	                sta (up),y              ; get the dp for that wordlist.
.d772	c8		iny		                iny
.d773	a5 03		lda $03		                lda dp+1
.d775	91 1e		sta ($1e),y	                sta (up),y
.d777	60		rts		                rts
.d778					interpret:
.d778					_loop:
.d778	20 c0 98	jsr $98c0	                jsr xt_parse_name       ; ( "string" -- addr u )
.d77b	b5 00		lda $00,x	                lda 0,x
.d77d	15 01		ora $01,x	                ora 1,x
.d77f	f0 70		beq $d7f1	                beq _line_done
.d781	20 99 a3	jsr $a399	                jsr xt_two_dup          ; ( addr u -- addr u addr u )
.d784	20 bc 8f	jsr $8fbc	                jsr xt_find_name        ; ( addr u addr u -- addr u nt|0 )
.d787	b5 00		lda $00,x	                lda 0,x
.d789	15 01		ora $01,x	                ora 1,x
.d78b	d0 28		bne $d7b5	                bne _got_name_token
.d78d	e8		inx		                inx                     ; ( addr u 0 -- addr u )
.d78e	e8		inx		                inx
.d78f	20 6b 96	jsr $966b	                jsr xt_number           ; ( addr u -- u|d )
.d792	a5 16		lda $16		                lda state
.d794	f0 e2		beq $d778	                beq _loop
.d796	a9 20		lda #$20	                lda #$20
.d798	24 20		bit $20		                bit status
.d79a	f0 0d		beq $d7a9	                beq _single_number
.d79c	20 8f a1	jsr $a18f	                jsr xt_swap
.d79f	a0 93		ldy #$93	                ldy #>literal_runtime
.d7a1	a9 79		lda #$79	                lda #<literal_runtime
.d7a3	20 b3 d6	jsr $d6b3	                jsr cmpl_subroutine
.d7a6	20 4f 87	jsr $874f	                jsr xt_comma
.d7a9					_single_number:
.d7a9	a0 93		ldy #$93	                ldy #>literal_runtime
.d7ab	a9 79		lda #$79	                lda #<literal_runtime
.d7ad	20 b3 d6	jsr $d6b3	                jsr cmpl_subroutine
.d7b0	20 4f 87	jsr $874f	                jsr xt_comma
.d7b3	80 c3		bra $d778	                bra _loop
.d7b5					_got_name_token:
.d7b5	b5 00		lda $00,x	                lda 0,x
.d7b7	95 04		sta $04,x	                sta 4,x
.d7b9	b5 01		lda $01,x	                lda 1,x
.d7bb	95 05		sta $05,x	                sta 5,x
.d7bd	e8		inx		                inx
.d7be	e8		inx		                inx
.d7bf	e8		inx		                inx
.d7c0	e8		inx		                inx                     ; ( nt )
.d7c1	b5 00		lda $00,x	                lda 0,x
.d7c3	85 22		sta $22		                sta tmpbranch
.d7c5	b5 01		lda $01,x	                lda 1,x
.d7c7	85 23		sta $23		                sta tmpbranch+1
.d7c9	20 c2 95	jsr $95c2	                jsr xt_name_to_int      ; ( nt - xt )
.d7cc	a5 16		lda $16		                lda state
.d7ce	d0 13		bne $d7e3	                bne _compile
.d7d0	a0 01		ldy #$01	                ldy #1
.d7d2	b1 22		lda ($22),y	                lda (tmpbranch),y
.d7d4	29 01		and #$01	                and #CO                 ; mask everything but Compile Only bit
.d7d6	f0 05		beq $d7dd	                beq _interpret
.d7d8	a9 02		lda #$02	                lda #err_compileonly
.d7da	4c 26 d8	jmp $d826	                jmp error
.d7dd					_interpret:
.d7dd	20 1e 8f	jsr $8f1e	                jsr xt_execute
.d7e0	4c 78 d7	jmp $d778	                jmp _loop
.d7e3					_compile:
.d7e3	a0 01		ldy #$01	                ldy #1
.d7e5	b1 22		lda ($22),y	                lda (tmpbranch),y
.d7e7	29 04		and #$04	                and #IM                 ; Mask all but IM bit
.d7e9	d0 f2		bne $d7dd	                bne _interpret          ; IMMEDIATE word, execute right now
.d7eb	20 ce 87	jsr $87ce	                jsr xt_compile_comma
.d7ee	4c 78 d7	jmp $d778	                jmp _loop
.d7f1					_line_done:
.d7f1	e8		inx		                inx
.d7f2	e8		inx		                inx
.d7f3	e8		inx		                inx
.d7f4	e8		inx		                inx
.d7f5	60		rts		                rts
.d7f6					is_printable:
.d7f6	c9 20		cmp #$20	                cmp #AscSP              ; $20
.d7f8	90 08		bcc $d802	                bcc _done
.d7fa	c9 80		cmp #$80	                cmp #$7F + 1             ; '~'
.d7fc	b0 03		bcs $d801	                bcs _failed
.d7fe	38		sec		                sec
.d7ff	80 01		bra $d802	                bra _done
.d801					_failed:
.d801	18		clc		                clc
.d802					_done:
.d802	60		rts		                rts
.d803					is_whitespace:
.d803	c9 00		cmp #$00	                cmp #00         ; explicit comparison to leave Y untouched
.d805	90 08		bcc $d80f	                bcc _done
.d807	c9 21		cmp #$21	                cmp #AscSP+1
.d809	b0 03		bcs $d80e	                bcs _failed
.d80b	38		sec		                sec
.d80c	80 01		bra $d80f	                bra _done
.d80e					_failed:
.d80e	18		clc		                clc
.d80f					_done:
.d80f	60		rts		                rts
.d810					underflow_1:
.d810	e0 77		cpx #$77	                cpx #dsp0-1
.d812	10 10		bpl $d824	                bpl underflow_error
.d814	60		rts		                rts
.d815					underflow_2:
.d815	e0 75		cpx #$75	                cpx #dsp0-3
.d817	10 0b		bpl $d824	                bpl underflow_error
.d819	60		rts		                rts
.d81a					underflow_3:
.d81a	e0 73		cpx #$73	                cpx #dsp0-5
.d81c	10 06		bpl $d824	                bpl underflow_error
.d81e	60		rts		                rts
.d81f					underflow_4:
.d81f	e0 71		cpx #$71	                cpx #dsp0-7
.d821	10 01		bpl $d824	                bpl underflow_error
.d823	60		rts		                rts
.d824					underflow_error:
.d824	a9 09		lda #$09	                lda #err_underflow      ; fall through to error
.d826					error:
.d826	0a		asl a		                asl
.d827	a8		tay		                tay
.d828	b9 a2 d4	lda $d4a2,y	                lda error_table,y
.d82b	85 28		sta $28		                sta tmp3                ; LSB
.d82d	c8		iny		                iny
.d82e	b9 a2 d4	lda $d4a2,y	                lda error_table,y
.d831	85 29		sta $29		                sta tmp3+1              ; MSB
.d833	20 49 d8	jsr $d849	                jsr print_common
.d836	20 44 89	jsr $8944	                jsr xt_cr
.d839	4c 60 80	jmp $8060	                jmp xt_abort            ; no jsr, as we clobber return stack
.d83c					print_string_no_lf:
.d83c	0a		asl a		                asl
.d83d	a8		tay		                tay
.d83e	b9 a7 d3	lda $d3a7,y	                lda string_table,y
.d841	85 28		sta $28		                sta tmp3                ; LSB
.d843	c8		iny		                iny
.d844	b9 a7 d3	lda $d3a7,y	                lda string_table,y
.d847	85 29		sta $29		                sta tmp3+1              ; MSB
.d849					print_common:
.d849	a0 00		ldy #$00	                ldy #0
.d84b					_loop:
.d84b	b1 28		lda ($28),y	                lda (tmp3),y
.d84d	f0 06		beq $d855	                beq _done               ; strings are zero-terminated
.d84f	20 d7 8d	jsr $8dd7	                jsr emit_a              ; allows vectoring via output
.d852	c8		iny		                iny
.d853	80 f6		bra $d84b	                bra _loop
.d855					_done:
.d855	60		rts		                rts
.d856					print_string:
.d856	20 3c d8	jsr $d83c	                jsr print_string_no_lf
.d859	4c 44 89	jmp $8944	                jmp xt_cr               ; JSR/RTS because never compiled
.d85c					print_u:
.d85c	20 89 a7	jsr $a789	                jsr xt_zero                     ; 0
.d85f	20 3b 93	jsr $933b	                jsr xt_less_number_sign         ; <#
.d862	20 bf 97	jsr $97bf	                jsr xt_number_sign_s            ; #S
.d865	20 9d 97	jsr $979d	                jsr xt_number_sign_greater      ; #>
.d868	4c e4 a4	jmp $a4e4	                jmp xt_type                     ; JSR/RTS because never compiled

;******  Return to file: platform/platform-py65mon.asm

.f010					v_nmi:
.f010					v_reset:
.f010					v_irq:
.f010					kernel_init:
.f010	78		sei		                sei             ; Disable interrupts
.f011	a2 00		ldx #$00	                ldx #0
.f013	bd 2c f0	lda $f02c,x	-               lda s_kernel_id,x
.f016	f0 06		beq $f01e	                beq _done
.f018	20 27 f0	jsr $f027	                jsr kernel_putc
.f01b	e8		inx		                inx
.f01c	80 f5		bra $f013	                bra -
.f01e					_done:
.f01e	4c 00 80	jmp $8000	                jmp forth
.f021					kernel_getc:
.f021					_loop:
.f021	ad 04 f0	lda $f004	                lda $f004
.f024	f0 fb		beq $f021	                beq _loop
.f026	60		rts		                rts
.f027					kernel_putc:
.f027	8d 01 f0	sta $f001	                sta $f001
.f02a	60		rts		                rts
.f02b					platform_bye:
.f02b	00		brk #		                brk
.f02c					s_kernel_id:
>f02c	54 61 6c 69 20 46 6f 72		        .text "Tali Forth 2 default kernel for py65mon (04. Dec 2022)", AscLF, 0
>f034	74 68 20 32 20 64 65 66 61 75 6c 74 20 6b 65 72
>f044	6e 65 6c 20 66 6f 72 20 70 79 36 35 6d 6f 6e 20
>f054	28 30 34 2e 20 44 65 63 20 32 30 32 32 29 0a 00
>fffa	10 f0				.word v_nmi
>fffc	10 f0				.word v_reset
>fffe	10 f0				.word v_irq

;******  End of listing
