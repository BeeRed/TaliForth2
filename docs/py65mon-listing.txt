
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --nostart --list=docs/py65mon-listing.txt --labels=docs/py65mon-labelmap.txt --output taliforth-py65mon.bin platform/platform-py65mon.asm
; Fri Apr 21 14:39:21 2023

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: platform/platform-py65mon.asm

=$0000					ram_start = $0000          ; start of installed 32 KiB of RAM
=32767					ram_end   = $8000-1        ; end of installed RAM
=$0000					zpage     = ram_start      ; begin of Zero Page ($0000-$00ff)
=$7f					zpage_end = $7F            ; end of Zero Page used ($0000-$007f)
=$0100					stack0    = $0100          ; begin of Return Stack ($0100-$01ff)
=31744					hist_buff = ram_end-$03ff  ; begin of history buffers
=$0000					user0     = zpage            ; user and system variables
=$ff					rsp0      = $ff              ; initial Return Stack Pointer (65c02 stack)
=$ff					bsize     = $ff              ; size of input/output buffers
=512					buffer0   = stack0+$100      ; input buffer ($0200-$027f)
=768					cp0       = buffer0+bsize+1  ; Dictionary starts after last buffer
=31744					cp_end    = hist_buff        ; Last RAM byte available for code
=$ff					padoffset = $ff              ; offset from CP to PAD (holds number strings)
=["ed","editor","ramdrive","block","environment?","assembler","wordlist"]
					TALI_OPTIONAL_WORDS := [ "ed", "editor", "ramdrive", "block", "environment?", "assembler", "wordlist" ]

;******  Processing file: platform/../taliforth.asm

.8000					code0:

;******  Processing file: platform/../definitions.asm

=0					cp        = user0+0   ; Compiler Pointer
=2					dp        = user0+2   ; Dictionary Pointer
=4					workword  = user0+4   ; nt (not xt!) of word being compiled, except in
=6					insrc     = user0+6   ; input Source for SOURCE-ID
=8					cib       = user0+8   ; address of current input buffer
=10					ciblen    = user0+10  ; length of current input buffer
=12					toin      = user0+12  ; pointer to CIB (>IN in Forth)
=14					ip        = user0+14  ; Instruction Pointer (current xt)
=16					output    = user0+16  ; vector for EMIT
=18					input     = user0+18  ; vector for KEY
=20					havekey   = user0+20  ; vector for KEY?
=22					state     = user0+22  ; STATE: -1 compile, 0 interpret
=24					base      = user0+24  ; number radix, default decimal
=26					nc_limit  = user0+26  ; limit for Native Compile size
=28					uf_strip  = user0+28  ; flag to strip underflow detection code
=30					up        = user0+30  ; User Pointer (Address of user variables)
=32					status    = user0+32  ; internal status information
=34					tmpbranch = user0+34  ; temporary storage for 0BRANCH, BRANCH only
=36					tmp1      = user0+36  ; temporary storage
=38					tmp2      = user0+38  ; temporary storage
=40					tmp3      = user0+40  ; temporary storage (especially for print)
=42					tmpdsp    = user0+42  ; temporary DSP (X) storage (two bytes)
=44					tmptos    = user0+44  ; temporary TOS storage
=46					editor1   = user0+46  ; temporary for editors
=48					editor2   = user0+48  ; temporary for editors
=50					editor3   = user0+50  ; temporary for editors
=52					tohold    = user0+52  ; pointer for formatted output
=54					scratch   = user0+54  ; 8 byte scratchpad (see UM/MOD)
=120					dsp0      = zpage_end-7    ; initial Data Stack Pointer
=0					blk_offset = 0        ; BLK : UP + 0
=2					scr_offset = 2        ; SCR : UP + 2
=4					current_offset = 4    ; CURRENT (byte) : UP + 4 (Compilation wordlist)
=5					num_wordlists_offset = 5
=6					wordlists_offset = 6  ; WORDLISTS (cells) : UP + 6 to UP + 29
=30					num_order_offset = 30 ; #ORDER (byte) : UP + 30
=31					search_order_offset = 31
=12					max_wordlists = 12    ; Maximum number of wordlists supported
=40					blkbuffer_offset    = 40   ; Address of buffer
=42					buffblocknum_offset = 42   ; Block number current in buffer
=44					buffstatus_offset   = 44   ; Status of buffer (bit 0 = used, bit 1 = dirty)
=46					blockread_offset    = 46   ; Vector to block reading routine
=48					blockwrite_offset   = 48   ; Vector to block writing routine
=$03					AscCC   = $03  ; break (CTRL-c)
=$07					AscBELL = $07  ; bell sound
=$08					AscBS   = $08  ; backspace
=$0a					AscLF   = $0a  ; line feed
=$0d					AscCR   = $0d  ; carriage return
=$1b					AscESC  = $1b  ; escape
=$20					AscSP   = $20  ; space
=$7f					AscDEL  = $7f  ; delete (CTRL-h)
=$10					AscCP   = $10  ; CTRL-p (used to recall previous input history)
=$0e					AscCN   = $0e  ; CTRL-n (used to recall next input history)
=1					CO = 1  ; Compile Only
=2					AN = 2  ; Always Native Compile
=4					IM = 4  ; Immediate Word
=8					NN = 8  ; Never Native Compile
=16					UF = 16 ; Includes Underflow Check (RESERVED)
=32					HC = 32 ; Word has Code Field Area (CFA)
=79					MAX_LINE_LENGTH  = 79      ; assumes 80 character lines

;******  Return to file: platform/../taliforth.asm

.8000					forth:

;******  Processing file: platform/../native_words.asm

.8000					xt_cold:
.8000	d8		cld		                cld
.8001	a9 27		lda #$27	                lda #<kernel_putc
.8003	85 10		sta $10		                sta output
.8005	a9 f0		lda #$f0	                lda #>kernel_putc
.8007	85 11		sta $11		                sta output+1
.8009	a2 21		ldx #$21	                ldx #cold_zp_table_end-cold_zp_table-1
.800b					_load_zp_loop:
.800b	bd c5 80	lda $80c5,x	                lda cold_zp_table,x
.800e	95 00		sta $00,x	                sta zpage,x
.8010	ca		dex		                dex
.8011	d0 f8		bne $800b	                bne _load_zp_loop
.8013	ad c5 80	lda $80c5	                lda cold_zp_table
.8016	85 00		sta $00		                sta zpage
.8018	a2 ff		ldx #$ff	                ldx #rsp0
.801a	9a		txs		                txs
.801b	a2 78		ldx #$78	                ldx #dsp0
.801d	a0 31		ldy #$31	                ldy #cold_user_table_end-cold_user_table-1
.801f	a9 00		lda #$00	                lda #0
.8021					_load_user_vars_loop:
.8021	b9 e7 80	lda $80e7,y	                lda cold_user_table,y
.8024	91 1e		sta ($1e),y	                sta (up),y
.8026	88		dey		                dey
.8027	d0 f8		bne $8021	                bne _load_user_vars_loop
.8029	ad e7 80	lda $80e7	                lda cold_user_table
.802c	92 1e		sta ($1e)	                sta (up)
.802e	20 5d 89	jsr $895d	                jsr xt_cr
.8031	ca		dex		                dex
.8032	ca		dex		                dex
.8033	ca		dex		                dex
.8034	ca		dex		                dex
.8035	a9 65		lda #$65	                lda #<forth_words_start
.8037	95 02		sta $02,x	                sta 2,x
.8039	a9 bb		lda #$bb	                lda #>forth_words_start
.803b	95 03		sta $03,x	                sta 3,x
.803d	a9 36		lda #$36	                lda #<forth_words_end
.803f	38		sec		                sec
.8040	e9 65		sbc #$65	                sbc #<forth_words_start
.8042	95 00		sta $00,x	                sta 0,x
.8044	a9 bc		lda #$bc	                lda #>forth_words_end
.8046	e9 bb		sbc #$bb	                sbc #>forth_words_start
.8048	95 01		sta $01,x	                sta 1,x
.804a	20 cf 90	jsr $90cf	                jsr xt_evaluate
.804d	ca		dex		                dex
.804e	ca		dex		                dex
.804f	ca		dex		                dex
.8050	ca		dex		                dex
.8051	a9 36		lda #$36	                lda #<user_words_start
.8053	95 02		sta $02,x	                sta 2,x
.8055	a9 bc		lda #$bc	                lda #>user_words_start
.8057	95 03		sta $03,x	                sta 3,x
.8059	a9 38		lda #$38	                lda #<user_words_end
.805b	38		sec		                sec
.805c	e9 36		sbc #$36	                sbc #<user_words_start
.805e	95 00		sta $00,x	                sta 0,x
.8060	a9 bc		lda #$bc	                lda #>user_words_end
.8062	e9 bc		sbc #$bc	                sbc #>user_words_start
.8064	95 01		sta $01,x	                sta 1,x
.8066	20 cf 90	jsr $90cf	                jsr xt_evaluate
.8069	9c 00 7c	stz $7c00	                stz hist_buff
.806c	9c 80 7c	stz $7c80	                stz hist_buff+$80
.806f	9c 00 7d	stz $7d00	                stz hist_buff+$100
.8072	9c 80 7d	stz $7d80	                stz hist_buff+$180
.8075	9c 00 7e	stz $7e00	                stz hist_buff+$200
.8078	9c 80 7e	stz $7e80	                stz hist_buff+$280
.807b	9c 00 7f	stz $7f00	                stz hist_buff+$300
.807e	9c 80 7f	stz $7f80	                stz hist_buff+$380
.8081					xt_abort:
.8081	a2 78		ldx #$78	                ldx #dsp0
.8083					xt_quit:
.8083	8a		txa		                txa             ; Save the DSP that we just defined
.8084	a2 ff		ldx #$ff	                ldx #rsp0
.8086	9a		txs		                txs
.8087	aa		tax		                tax             ; Restore the DSP. Dude, seriously.
.8088	64 0e		stz $0e		                stz ip
.808a	64 0f		stz $0f		                stz ip+1
.808c	64 06		stz $06		                stz insrc
.808e	64 07		stz $07		                stz insrc+1
.8090	64 16		stz $16		                stz state
.8092	64 17		stz $17		                stz state+1
.8094					_get_line:
.8094	a9 00		lda #$00	                lda #<buffer0   ; input buffer, this is paranoid
.8096	85 08		sta $08		                sta cib
.8098	a9 02		lda #$02	                lda #>buffer0
.809a	85 09		sta $09		                sta cib+1
.809c	64 0a		stz $0a		                stz ciblen
.809e	64 0b		stz $0b		                stz ciblen+1
.80a0	20 f2 9a	jsr $9af2	                jsr xt_refill           ; ( -- f )
.80a3	b5 00		lda $00,x	                lda 0,x
.80a5	d0 05		bne $80ac	                bne _success
.80a7	a9 06		lda #$06	                lda #err_refill
.80a9	4c 39 d8	jmp $d839	                jmp error
.80ac					_success:
.80ac	e8		inx		                inx                     ; drop
.80ad	e8		inx		                inx
.80ae	20 8b d7	jsr $d78b	                jsr interpret
.80b1	e0 78		cpx #$78	                cpx #dsp0
.80b3	f0 05		beq $80ba	                beq _stack_ok
.80b5	90 03		bcc $80ba	                bcc _stack_ok           ; DSP must always be smaller than DSP0
.80b7	4c 37 d8	jmp $d837	                jmp underflow_error
.80ba					_stack_ok:
.80ba	a5 16		lda $16		                lda state
.80bc	f0 02		beq $80c0	                beq _print
.80be	a9 01		lda #$01	                lda #1                  ; number for "compile" string
.80c0					_print:
.80c0	20 69 d8	jsr $d869	                jsr print_string
.80c3	80 cf		bra $8094	                bra _get_line
.80c5					z_cold:
.80c5					z_abort:
.80c5					z_quit:
.80c5					cold_zp_table:
>80c5	00 08				        .word cp0+256+1024      ; cp moved to make room for user vars and
>80c7	38 bc				        .word dictionary_start  ; dp
>80c9	00 00				        .word 0                 ; workword
>80cb	00 00				        .word 0                 ; insrc (SOURCE-ID is 0 for keyboard)
>80cd	00 02				        .word buffer0           ; cib
>80cf	00 00				        .word 0                 ; ciblen
>80d1	00 00				        .word 0                 ; toin
>80d3	00 00				        .word 0                 ; ip
>80d5	27 f0				        .word kernel_putc       ; output
>80d7	21 f0				        .word kernel_getc       ; input
>80d9	00 00				        .word 0                 ; havekey
>80db	00 00				        .word 0                 ; state (0 = interpret)
>80dd	0a 00				        .word 10                ; base
>80df	14 00				        .word 20                ; nc-limit
>80e1	00 00				        .word 0                 ; uf_strip (off by default)
>80e3	00 03				        .word cp0               ; up (user vars put right at beginning of
>80e5	00 00				        .word 0                 ; status
.80e7					cold_zp_table_end:
.80e7					cold_user_table:
>80e7	00 00				        .word 0                         ; BLK
>80e9	00 00				        .word 0                         ; SCR
>80eb	00				        .byte 0                         ; CURRENT = FORTH-WORDLIST
>80ec	04				        .byte 4                         ; #WORDLISTS (FORTH EDITOR ASSEMBLER ROOT)
>80ed	38 bc				        .word dictionary_start          ; FORTH-WORDLIST
>80ef	80 ca				        .word editor_dictionary_start   ; EDITOR-WORDLIST
>80f1	d0 ca				        .word assembler_dictionary_start ; ASSEMBLER-WORDLIST
>80f3	3f ca				        .word root_dictionary_start     ; ROOT-WORDLIST
>80f5	00 00 00 00 00 00 00 00		        .word 0,0,0,0,0,0,0,0           ; User wordlists
>80fd	00 00 00 00 00 00 00 00
>8105	01				        .byte 1                         ; #ORDER
>8106	00 00 00 00 00 00 00 00		        .byte 0,0,0,0,0,0,0,0,0         ; search-order
>810e	00
>810f	00 04				        .word cp0+256                   ; Address of buffer (right after USER vars)
>8111	00 00				        .word 0                         ; block in buffer
>8113	00 00				        .word 0                         ; buffer status (not in use)
>8115	55 85				        .word xt_block_word_error       ; block-read vector
>8117	55 85				        .word xt_block_word_error       ; block-write vector
.8119					cold_user_table_end:
.8119					xt_abort_quote:
.8119	20 49 9d	jsr $9d49	                jsr xt_s_quote          ; S"
.811c	a0 81		ldy #$81	                ldy #>abort_quote_runtime
.811e	a9 24		lda #$24	                lda #<abort_quote_runtime
.8120	20 c6 d6	jsr $d6c6	                jsr cmpl_subroutine     ; may not be JMP as JSR/RTS
.8123	60		rts		z_abort_quote:  rts
.8124					abort_quote_runtime:
.8124	b5 04		lda $04,x	                lda 4,x
.8126	15 05		ora $05,x	                ora 5,x
.8128	f0 09		beq $8133	                beq _done       ; if FALSE, we're done
.812a	20 f7 a4	jsr $a4f7	                jsr xt_type
.812d	20 5d 89	jsr $895d	                jsr xt_cr
.8130	4c 81 80	jmp $8081	                jmp xt_abort    ; not JSR, so never come back
.8133					_done:
.8133	8a		txa		                txa
.8134	18		clc		                clc
.8135	69 06		adc #$06	                adc #6
.8137	aa		tax		                tax
.8138	60		rts		                rts
.8139					xt_abs:
.8139	20 23 d8	jsr $d823	                jsr underflow_1
.813c	b5 01		lda $01,x	                lda 1,x
.813e	10 0d		bpl $814d	                bpl _done       ; positive number, easy money!
.8140	38		sec		                sec
.8141	a9 00		lda #$00	                lda #0
.8143	f5 00		sbc $00,x	                sbc 0,x         ; LSB
.8145	95 00		sta $00,x	                sta 0,x
.8147	a9 00		lda #$00	                lda #0          ; MSB
.8149	f5 01		sbc $01,x	                sbc 1,x
.814b	95 01		sta $01,x	                sta 1,x
.814d					_done:
.814d	60		rts		z_abs:          rts
.814e					xt_accept:
.814e	20 28 d8	jsr $d828	                jsr underflow_2
.8151	b5 00		lda $00,x	                lda 0,x
.8153	15 01		ora $01,x	                ora 1,x
.8155	d0 09		bne $8160	                bne _not_zero
.8157	e8		inx		                inx
.8158	e8		inx		                inx
.8159	74 00		stz $00,x	                stz 0,x
.815b	74 01		stz $01,x	                stz 1,x
.815d	4c 2c 82	jmp $822c	                jmp accept_done
.8160					_not_zero:
.8160	b5 00		lda $00,x	                lda 0,x         ; number of chars to get in tmp2 ...
.8162	85 26		sta $26		                sta tmp2
.8164	64 27		stz $27		                stz tmp2+1      ; ... but we only accept max 255 chars
.8166	b5 02		lda $02,x	                lda 2,x         ; address of buffer is NOS, to tmp1
.8168	85 24		sta $24		                sta tmp1
.816a	b5 03		lda $03,x	                lda 3,x
.816c	85 25		sta $25		                sta tmp1+1
.816e	e8		inx		                inx
.816f	e8		inx		                inx
.8170	a0 00		ldy #$00	                ldy #0
.8172	a5 20		lda $20		                lda status
.8174	29 f7		and #$f7	                and #$f7
.8176	1a		inc a		               ina
.8177	09 08		ora #$08	                ora #$08
.8179	85 20		sta $20		                sta status
.817b					accept_loop:
.817b	20 32 93	jsr $9332	                jsr key_a
.817e	c9 0a		cmp #$0a	                cmp #AscLF
.8180	f0 20		beq $81a2	                beq _eol
.8182	c9 0d		cmp #$0d	                cmp #AscCR
.8184	f0 1c		beq $81a2	                beq _eol
.8186	c9 08		cmp #$08	                cmp #AscBS
.8188	f0 22		beq $81ac	                beq _backspace
.818a	c9 7f		cmp #$7f	                cmp #AscDEL     ; (CTRL-h)
.818c	f0 1e		beq $81ac	                beq _backspace
.818e	c9 10		cmp #$10	                cmp #AscCP
.8190	f0 36		beq $81c8	                beq _ctrl_p
.8192	c9 0e		cmp #$0e	                cmp #AscCN
.8194	f0 44		beq $81da	                beq _ctrl_n
.8196	91 24		sta ($24),y	                sta (tmp1),y
.8198	c8		iny		                iny
.8199	20 f0 8d	jsr $8df0	                jsr emit_a
.819c	c4 26		cpy $26		                cpy tmp2        ; reached character limit?
.819e	d0 db		bne $817b	                bne accept_loop       ; fall through if buffer limit reached
.81a0	80 03		bra $81a5	                bra _buffer_full
.81a2					_eol:
.81a2	20 18 a1	jsr $a118	                jsr xt_space    ; print final space
.81a5					_buffer_full:
.81a5	94 00		sty $00,x	                sty 0,x         ; Y contains number of chars accepted already
.81a7	74 01		stz $01,x	                stz 1,x         ; we only accept 256 chars
.81a9	4c 2c 82	jmp $822c	                jmp accept_done
.81ac					_backspace:
.81ac	c0 00		cpy #$00	                cpy #0          ; buffer empty?
.81ae	d0 06		bne $81b6	                bne +
.81b0	a9 07		lda #$07	                lda #AscBELL    ; complain and don't delete beyond the start of line
.81b2	20 f0 8d	jsr $8df0	                jsr emit_a
.81b5	c8		iny		                iny
.81b6					+
.81b6	88		dey		                dey
.81b7	a9 08		lda #$08	                lda #AscBS      ; move back one
.81b9	20 f0 8d	jsr $8df0	                jsr emit_a
.81bc	a9 20		lda #$20	                lda #AscSP      ; print a space (rubout)
.81be	20 f0 8d	jsr $8df0	                jsr emit_a
.81c1	a9 08		lda #$08	                lda #AscBS      ; move back over space
.81c3	20 f0 8d	jsr $8df0	                jsr emit_a
.81c6	80 b3		bra $817b	                bra accept_loop
.81c8					_ctrl_p:
.81c8	a5 20		lda $20		                lda status
.81ca	29 07		and #$07	                and #7
.81cc	d0 08		bne $81d6	                bne _ctrl_p_dec
.81ce	a5 20		lda $20		                lda status
.81d0	09 07		ora #$07	                ora #7
.81d2	85 20		sta $20		                sta status
.81d4	80 11		bra $81e7	                bra _recall_history
.81d6					_ctrl_p_dec:
.81d6	c6 20		dec $20		                dec status
.81d8	80 0d		bra $81e7	                bra _recall_history
.81da					_ctrl_n:
.81da	a9 08		lda #$08	                lda #$8
.81dc	24 20		bit $20		                bit status
.81de	d0 07		bne $81e7	                bne _recall_history
.81e0	a5 20		lda $20		                lda status
.81e2	29 f7		and #$f7	                and #$f7
.81e4	1a		inc a		               ina
.81e5	85 20		sta $20		                sta status
.81e7					_recall_history:
.81e7	a9 08		lda #$08	                lda #%00001000
.81e9	14 20		trb $20		                trb status
.81eb	20 47 82	jsr $8247	                jsr accept_total_recall
.81ee	a9 0d		lda #$0d	                lda #AscCR
.81f0	20 f0 8d	jsr $8df0	                jsr emit_a
.81f3					input_clear:
.81f3	c0 00		cpy #$00	                cpy #0
.81f5	f0 08		beq $81ff	                beq input_cleared
.81f7	a9 20		lda #$20	                lda #AscSP
.81f9	20 f0 8d	jsr $8df0	                jsr emit_a
.81fc	88		dey		                dey
.81fd	80 f4		bra $81f3	                bra input_clear
.81ff					input_cleared:
.81ff	a9 0d		lda #$0d	                lda #AscCR
.8201	20 f0 8d	jsr $8df0	                jsr emit_a
.8204	b1 28		lda ($28),y	                lda (tmp3),y
.8206	85 21		sta $21		                sta status+1
.8208	e6 28		inc $28		                inc tmp3
.820a	d0 02		bne $820e	                bne +           ; Increment the upper byte on carry.
.820c	e6 29		inc $29		                inc tmp3+1
.820e					+
.820e	a9 0d		lda #$0d	                lda #AscCR
.8210	20 f0 8d	jsr $8df0	                jsr emit_a
.8213					_history_loop:
.8213	c4 21		cpy $21		                cpy status+1
.8215	d0 03		bne $821a	                bne +
.8217	4c 7b 81	jmp $817b	                jmp accept_loop       ; Needs a long jump
.821a					+
.821a	c4 26		cpy $26		                cpy tmp2
.821c	f0 0a		beq $8228	                beq _hist_filled_buffer
.821e	b1 28		lda ($28),y	                lda (tmp3),y
.8220	91 24		sta ($24),y	                sta (tmp1),y
.8222	20 f0 8d	jsr $8df0	                jsr emit_a
.8225	c8		iny		                iny
.8226	80 eb		bra $8213	                bra _history_loop
.8228					_hist_filled_buffer:
.8228	88		dey		                dey
.8229	4c 7b 81	jmp $817b	                jmp accept_loop
.822c					accept_done:
.822c	20 47 82	jsr $8247	                jsr accept_total_recall
.822f	85 21		sta $21		                sta status+1
.8231	a0 00		ldy #$00	                ldy #0
.8233	91 28		sta ($28),y	                sta (tmp3),y
.8235	e6 28		inc $28		                inc tmp3
.8237	d0 02		bne $823b	                bne +           ; Increment the upper byte on carry.
.8239	e6 29		inc $29		                inc tmp3+1
.823b					+
.823b					_save_history_loop:
.823b	c4 21		cpy $21		                cpy status+1
.823d	f0 07		beq $8246	                beq _save_history_done
.823f	b1 24		lda ($24),y	                lda (tmp1),y
.8241	91 28		sta ($28),y	                sta (tmp3),y
.8243	c8		iny		                iny
.8244	80 f5		bra $823b	                bra _save_history_loop
.8246					_save_history_done:
.8246					z_accept:
.8246	60		rts		                rts
.8247					accept_total_recall:
.8247	a9 00		lda #$00	                lda #<hist_buff
.8249	85 28		sta $28		                sta tmp3
.824b	a9 7c		lda #$7c	                lda #>hist_buff
.824d	85 29		sta $29		                sta tmp3+1
.824f	a5 20		lda $20		                lda status
.8251	6a		ror a		                ror
.8252	29 03		and #$03	                and #3
.8254	18		clc		                clc
.8255	65 29		adc $29		                adc tmp3+1
.8257	85 29		sta $29		                sta tmp3+1
.8259	a5 20		lda $20		                lda status
.825b	6a		ror a		                ror             ; Rotate through carry into msb.
.825c	6a		ror a		                ror
.825d	29 80		and #$80	                and #$80
.825f	18		clc		                clc
.8260	65 28		adc $28		                adc tmp3
.8262	85 28		sta $28		                sta tmp3
.8264	90 02		bcc $8268	                bcc +           ; Increment the upper byte on carry.
.8266	e6 29		inc $29		                inc tmp3+1
.8268					+
.8268	98		tya		                tya
.8269	c9 80		cmp #$80	                cmp #$80
.826b	90 02		bcc $826f	                bcc +
.826d	a9 7f		lda #$7f	                lda #$7F
.826f					+
.826f	60		rts		                rts
.8270					xt_action_of:
.8270	a5 16		lda $16		                lda state
.8272	05 17		ora $17		                ora state+1
.8274	f0 0c		beq $8282	                beq _interpreting
.8276					_compiling:
.8276	20 98 85	jsr $8598	                jsr xt_bracket_tick
.8279	a0 8a		ldy #$8a	                ldy #>xt_defer_fetch
.827b	a9 d9		lda #$d9	                lda #<xt_defer_fetch
.827d	20 c6 d6	jsr $d6c6	                jsr cmpl_subroutine
.8280	80 06		bra $8288	                bra _done
.8282					_interpreting:
.8282	20 05 a2	jsr $a205	                jsr xt_tick
.8285	20 d9 8a	jsr $8ad9	                jsr xt_defer_fetch
.8288					_done:
.8288	60		rts		z_action_of:           rts
.8289					xt_again:
.8289	20 23 d8	jsr $d823	                jsr underflow_1
.828c	a0 00		ldy #$00	                ldy #0
.828e	a9 4c		lda #$4c	                lda #$4C        ; JMP
.8290	91 00		sta ($00),y	                sta (cp),y
.8292	c8		iny		                iny
.8293	b5 00		lda $00,x	                lda 0,x         ; LSB of address
.8295	91 00		sta ($00),y	                sta (cp),y
.8297	c8		iny		                iny
.8298	b5 01		lda $01,x	                lda 1,x         ; MSB of address
.829a	91 00		sta ($00),y	                sta (cp),y
.829c	c8		iny		                iny
.829d	98		tya		                tya
.829e	18		clc		                clc
.829f	65 00		adc $00		                adc cp
.82a1	85 00		sta $00		                sta cp
.82a3	90 02		bcc $82a7	                bcc _done
.82a5	e6 01		inc $01		                inc cp+1
.82a7					_done:
.82a7	e8		inx		                inx
.82a8	e8		inx		                inx
.82a9	60		rts		z_again:        rts
.82aa					xt_align:
.82aa					xt_aligned:
.82aa					z_align:
.82aa	60		rts		z_aligned:      rts             ; stripped out during native compile
.82ab					xt_allot:
.82ab	20 23 d8	jsr $d823	                jsr underflow_1
.82ae	b5 01		lda $01,x	                lda 1,x
.82b0	30 22		bmi $82d4	                bmi _release
.82b2	18		clc		                clc
.82b3	a5 00		lda $00		                lda cp
.82b5	75 00		adc $00,x	                adc 0,x
.82b7	85 00		sta $00		                sta cp
.82b9	a5 01		lda $01		                lda cp+1
.82bb	75 01		adc $01,x	                adc 1,x
.82bd	85 01		sta $01		                sta cp+1
.82bf	a0 00		ldy #$00	                ldy #<cp_end
.82c1	c4 00		cpy $00		                cpy cp
.82c3	a9 7c		lda #$7c	                lda #>cp_end
.82c5	e5 01		sbc $01		                sbc cp+1
.82c7	b0 48		bcs $8311	                bcs _done               ; we're fine.
.82c9	84 00		sty $00		                sty cp                  ; still #<cp_end
.82cb	a9 7c		lda #$7c	                lda #>cp_end
.82cd	85 01		sta $01		                sta cp+1
.82cf	a9 00		lda #$00	                lda #err_allot
.82d1	4c 39 d8	jmp $d839	                jmp error
.82d4					_release:
.82d4	ca		dex		                dex
.82d5	ca		dex		                dex
.82d6	a5 00		lda $00		                lda cp
.82d8	95 00		sta $00,x	                sta 0,x
.82da	a5 01		lda $01		                lda cp+1
.82dc	95 01		sta $01,x	                sta 1,x
.82de	20 dd 99	jsr $99dd	                jsr xt_plus                     ; new CP is now TOS
.82e1	ca		dex		                dex
.82e2	ca		dex		                dex                             ; new CP now NOS
.82e3	a9 00		lda #$00	                lda #<cp0
.82e5	95 00		sta $00,x	                sta 0,x
.82e7	a9 03		lda #$03	                lda #>cp0
.82e9	95 01		sta $01,x	                sta 1,x                         ; CP0 is TOS
.82eb	20 4a d7	jsr $d74a	                jsr compare_16bit               ; still ( CP CP0 )
.82ee	f0 17		beq $8307	                beq _nega_done
.82f0	30 15		bmi $8307	                bmi _nega_done
.82f2	a9 00		lda #$00	                lda #<cp0
.82f4	85 00		sta $00		                sta cp
.82f6	a9 03		lda #$03	                lda #>cp0
.82f8	85 01		sta $01		                sta cp+1
.82fa	a9 38		lda #$38	                lda #<dictionary_start
.82fc	85 02		sta $02		                sta dp
.82fe	a9 bc		lda #$bc	                lda #>dictionary_start
.8300	85 03		sta $03		                sta dp+1
.8302	a9 0a		lda #$0a	                lda #err_negallot
.8304	4c 39 d8	jmp $d839	                jmp error
.8307					_nega_done:
.8307	b5 02		lda $02,x	                lda 2,x
.8309	85 00		sta $00		                sta cp
.830b	b5 03		lda $03,x	                lda 3,x
.830d	85 01		sta $01		                sta cp+1
.830f	e8		inx		                inx
.8310	e8		inx		                inx                     ; drop through to _done
.8311					_done:
.8311	e8		inx		                inx
.8312	e8		inx		                inx
.8313					z_allot:
.8313	60		rts		                rts
.8314					xt_allow_native:
.8314	20 65 d7	jsr $d765	                jsr current_to_dp
.8317	a0 01		ldy #$01	                ldy #1          ; offset for status byte
.8319	b1 02		lda ($02),y	                lda (dp),y
.831b	29 f5		and #$f5	                and #$ff-NN-AN  ; AN and NN flag is clear.
.831d	91 02		sta ($02),y	                sta (dp),y
.831f					z_allow_native:
.831f	60		rts		                rts
.8320					xt_also:
.8320	20 2e 91	jsr $912e	                jsr xt_get_order
.8323	20 8d 98	jsr $988d	                jsr xt_over
.8326	20 a2 a1	jsr $a1a2	                jsr xt_swap
.8329	20 17 98	jsr $9817	                jsr xt_one_plus
.832c	20 15 9d	jsr $9d15	                jsr xt_set_order
.832f	60		rts		z_also:         rts
.8330					xt_always_native:
.8330	20 65 d7	jsr $d765	                jsr current_to_dp
.8333	a0 01		ldy #$01	                ldy #1          ; offset for status byte
.8335	b1 02		lda ($02),y	                lda (dp),y
.8337	09 02		ora #$02	                ora #AN         ; Make sure AN flag is set
.8339	29 f7		and #$f7	                and #$ff-NN     ; and NN flag is clear.
.833b	91 02		sta ($02),y	                sta (dp),y
.833d					z_always_native:
.833d	60		rts		                rts
.833e					xt_and:
.833e	20 28 d8	jsr $d828	                jsr underflow_2
.8341	b5 00		lda $00,x	                lda 0,x
.8343	35 02		and $02,x	                and 2,x
.8345	95 02		sta $02,x	                sta 2,x
.8347	b5 01		lda $01,x	                lda 1,x
.8349	35 03		and $03,x	                and 3,x
.834b	95 03		sta $03,x	                sta 3,x
.834d	e8		inx		                inx
.834e	e8		inx		                inx
.834f	60		rts		z_and:          rts
.8350					xt_at_xy:
.8350	20 28 d8	jsr $d828	                jsr underflow_2
.8353	a5 18		lda $18		                lda base
.8355	48		pha		                pha
.8356	a9 0a		lda #$0a	                lda #10
.8358	85 18		sta $18		                sta base
.835a	a9 1b		lda #$1b	                lda #AscESC
.835c	20 f0 8d	jsr $8df0	                jsr emit_a
.835f	a9 5b		lda #$5b	                lda #$5B        ; ASCII for "["
.8361	20 f0 8d	jsr $8df0	                jsr emit_a
.8364	20 6f d8	jsr $d86f	                jsr print_u
.8367	a9 3b		lda #$3b	                lda #$3B        ; ASCII for ";"
.8369	20 f0 8d	jsr $8df0	                jsr emit_a
.836c	20 6f d8	jsr $d86f	                jsr print_u
.836f	a9 48		lda #$48	                lda #'H'
.8371	20 f0 8d	jsr $8df0	                jsr emit_a
.8374	68		pla		                pla
.8375	85 18		sta $18		                sta base
.8377	60		rts		z_at_xy:        rts
.8378					xt_backslash:
.8378	a5 0a		lda $0a		                lda ciblen
.837a	85 0c		sta $0c		                sta toin
.837c	a5 0b		lda $0b		                lda ciblen+1
.837e	85 0d		sta $0d		                sta toin+1
.8380	60		rts		z_backslash:    rts
.8381					xt_base:
.8381	ca		dex		                dex
.8382	ca		dex		                dex
.8383	a9 18		lda #$18	                lda #<base
.8385	95 00		sta $00,x	                sta 0,x         ; LSB
.8387	74 01		stz $01,x	                stz 1,x         ; MSB is always 0
.8389	60		rts		z_base:         rts
.838a					xt_begin:
.838a	20 6c 91	jsr $916c	                jsr xt_here
.838d	60		rts		z_begin:        rts
.838e					xt_bell:
.838e	a9 07		lda #$07	                lda #7          ; ASCII value for BELl
.8390	20 f0 8d	jsr $8df0	                jsr emit_a
.8393	60		rts		z_bell:         rts
.8394					xt_bl:
.8394	ca		dex		                dex
.8395	ca		dex		                dex
.8396	a9 20		lda #$20	                lda #AscSP
.8398	95 00		sta $00,x	                sta 0,x
.839a	74 01		stz $01,x	                stz 1,x
.839c	60		rts		z_bl:           rts
.839d					xt_blk:
.839d	ca		dex		                dex
.839e	ca		dex		                dex
.839f	18		clc		                clc
.83a0	a5 1e		lda $1e		                lda up
.83a2	69 00		adc #$00	                adc #blk_offset ; Add offset
.83a4	95 00		sta $00,x	                sta 0,x
.83a6	a5 1f		lda $1f		                lda up+1
.83a8	69 00		adc #$00	                adc #0          ; Adding carry
.83aa	95 01		sta $01,x	                sta 1,x
.83ac	60		rts		z_blk:          rts
.83ad					xt_blkbuffer:
.83ad	ca		dex		                dex
.83ae	ca		dex		                dex
.83af	a0 28		ldy #$28	                ldy #blkbuffer_offset
.83b1	b1 1e		lda ($1e),y	                lda (up),y
.83b3	95 00		sta $00,x	                sta 0,x
.83b5	c8		iny		                iny             ; Move along to the next byte
.83b6	b1 1e		lda ($1e),y	                lda (up),y
.83b8	95 01		sta $01,x	                sta 1,x
.83ba	60		rts		z_blkbuffer:    rts
.83bb					xt_block:
.83bb	a0 2a		ldy #$2a	                ldy #buffblocknum_offset
.83bd	b1 1e		lda ($1e),y	                lda (up),y
.83bf	d5 00		cmp $00,x	                cmp 0,x
.83c1	d0 0f		bne $83d2	                bne _not_in_buffer
.83c3	c8		iny		                iny
.83c4	b1 1e		lda ($1e),y	                lda (up),y
.83c6	d5 01		cmp $01,x	                cmp 1,x
.83c8	d0 08		bne $83d2	                bne _not_in_buffer
.83ca	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.83cc	b1 1e		lda ($1e),y	                lda (up),y
.83ce	29 01		and #$01	                and #1          ; Check the in-use flag (bit 0)
.83d0	d0 30		bne $8402	                bne _done       ; It's already in the buffer and in use.
.83d2					_not_in_buffer:
.83d2	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.83d4	b1 1e		lda ($1e),y	                lda (up),y      ; Only bits 0 and 1 are used, so only
.83d6	c9 03		cmp #$03	                cmp #3          ; LSB is needed.
.83d8	d0 0c		bne $83e6	                bne _buffer_available ; Unused or not dirty = available
.83da	20 ad 83	jsr $83ad	                jsr xt_blkbuffer
.83dd	20 9f 85	jsr $859f	                jsr xt_buffblocknum
.83e0	20 7a 8f	jsr $8f7a	                jsr xt_fetch
.83e3	20 5a 85	jsr $855a	                jsr xt_block_write
.83e6					_buffer_available:
.83e6	a0 2a		ldy #$2a	                ldy #buffblocknum_offset
.83e8	b5 00		lda $00,x	                lda 0,x
.83ea	91 1e		sta ($1e),y	                sta (up),y
.83ec	c8		iny		                iny
.83ed	b5 01		lda $01,x	                lda 1,x
.83ef	91 1e		sta ($1e),y	                sta (up),y
.83f1	20 ad 83	jsr $83ad	                jsr xt_blkbuffer
.83f4	20 a2 a1	jsr $a1a2	                jsr xt_swap
.83f7	20 37 85	jsr $8537	                jsr xt_block_read
.83fa	a9 01		lda #$01	                lda #1
.83fc	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.83fe	91 1e		sta ($1e),y	                sta (up),y
.8400	ca		dex		                dex
.8401	ca		dex		                dex
.8402					_done:
.8402	a0 28		ldy #$28	                ldy #blkbuffer_offset
.8404	b1 1e		lda ($1e),y	                lda (up),y
.8406	95 00		sta $00,x	                sta 0,x
.8408	c8		iny		                iny
.8409	b1 1e		lda ($1e),y	                lda (up),y
.840b	95 01		sta $01,x	                sta 1,x
.840d	60		rts		z_block:        rts
.840e					xt_block_ramdrive_init:
.840e	20 23 d8	jsr $d823	                jsr underflow_1
.8411	4c 2c 85	jmp $852c	                jmp _after_ramdrive_code
.8414					_ramdrive_code:
>8414	62 61 73 65 20 40 20 73		        .text "base @ swap decimal"
>841c	77 61 70 20 64 65 63 69 6d 61 6c
>8427	20 31 30 32 34 20 2a		        .text " 1024 *" ; ( Calculate how many bytes are needed for numblocks blocks )
>842e	20 64 75 70			        .text " dup"    ; ( Save a copy for formatting it at the end )
>8432	20 62 75 66 66 65 72 3a		        .text " buffer: ramdrive" ; ( Create ramdrive )
>843a	20 72 61 6d 64 72 69 76 65
>8443	20 3a 20 62 6c 6f 63 6b		        .text " : block-read-ramdrive"  ; ( addr u -- )
>844b	2d 72 65 61 64 2d 72 61 6d 64 72 69 76 65
>8459	20 72 61 6d 64 72 69 76		        .text " ramdrive swap 1024 * + swap 1024 move ;"
>8461	65 20 73 77 61 70 20 31 30 32 34 20 2a 20 2b 20
>8471	73 77 61 70 20 31 30 32 34 20 6d 6f 76 65 20 3b
>8481	20 3a 20 62 6c 6f 63 6b		        .text " : block-write-ramdrive" ; ( addr u -- )
>8489	2d 77 72 69 74 65 2d 72 61 6d 64 72 69 76 65
>8498	20 72 61 6d 64 72 69 76		        .text " ramdrive swap 1024 * + 1024 move ;"
>84a0	65 20 73 77 61 70 20 31 30 32 34 20 2a 20 2b 20
>84b0	31 30 32 34 20 6d 6f 76 65 20 3b
>84bb	20 27 20 62 6c 6f 63 6b		        .text " ' block-read-ramdrive block-read-vector !" ; ( Replace I/O vectors )
>84c3	2d 72 65 61 64 2d 72 61 6d 64 72 69 76 65 20 62
>84d3	6c 6f 63 6b 2d 72 65 61 64 2d 76 65 63 74 6f 72
>84e3	20 21
>84e5	20 27 20 62 6c 6f 63 6b		        .text " ' block-write-ramdrive block-write-vector !"
>84ed	2d 77 72 69 74 65 2d 72 61 6d 64 72 69 76 65 20
>84fd	62 6c 6f 63 6b 2d 77 72 69 74 65 2d 76 65 63 74
>850d	6f 72 20 21
>8511	20 72 61 6d 64 72 69 76		        .text " ramdrive swap blank base !"
>8519	65 20 73 77 61 70 20 62 6c 61 6e 6b 20 62 61 73
>8529	65 20 21
.852c					_after_ramdrive_code:
.852c	20 a3 a0	jsr $a0a3	                jsr sliteral_runtime
>852f	14 84 18 01			.word _ramdrive_code, _after_ramdrive_code-_ramdrive_code
.8533	20 cf 90	jsr $90cf	                jsr xt_evaluate
.8536					z_block_ramdrive_init:
.8536	60		rts		                rts
.8537					xt_block_read:
.8537	a0 2e		ldy #$2e	                ldy #blockread_offset
.8539	b1 1e		lda ($1e),y	                lda (up),y
.853b	85 24		sta $24		                sta tmp1
.853d	c8		iny		                iny
.853e	b1 1e		lda ($1e),y	                lda (up),y
.8540	85 25		sta $25		                sta tmp1+1
.8542	6c 24 00	jmp ($0024)	                jmp (tmp1)
.8545					z_block_read:
.8545					xt_block_read_vector:
.8545	ca		dex		                dex
.8546	ca		dex		                dex
.8547	18		clc		                clc
.8548	a5 1e		lda $1e		                lda up
.854a	69 2e		adc #$2e	                adc #blockread_offset
.854c	95 00		sta $00,x	                sta 0,x
.854e	a5 1f		lda $1f		                lda up+1
.8550	69 00		adc #$00	                adc #0          ; Add carry
.8552	95 01		sta $01,x	                sta 1,x
.8554					z_block_read_vector:
.8554	60		rts		                rts
.8555					xt_block_word_error:
.8555	a9 0c		lda #$0c	                lda #err_blockwords
.8557	4c 39 d8	jmp $d839	                jmp error       ; no RTS needed
.855a					z_block_word_error:
.855a					xt_block_write:
.855a	a0 30		ldy #$30	                ldy #blockwrite_offset
.855c	b1 1e		lda ($1e),y	                lda (up),y
.855e	85 24		sta $24		                sta tmp1
.8560	c8		iny		                iny
.8561	b1 1e		lda ($1e),y	                lda (up),y
.8563	85 25		sta $25		                sta tmp1+1
.8565	6c 24 00	jmp ($0024)	                jmp (tmp1)
.8568					z_block_write:
.8568					xt_block_write_vector:
.8568	ca		dex		                dex
.8569	ca		dex		                dex
.856a	18		clc		                clc
.856b	a5 1e		lda $1e		                lda up
.856d	69 30		adc #$30	                adc #blockwrite_offset
.856f	95 00		sta $00,x	                sta 0,x
.8571	a5 1f		lda $1f		                lda up+1
.8573	69 00		adc #$00	                adc #0          ; Add carry
.8575	95 01		sta $01,x	                sta 1,x
.8577					z_block_write_vector:
.8577	60		rts		                rts
.8578					xt_bounds:
.8578	20 28 d8	jsr $d828	                jsr underflow_2
.857b	18		clc		                clc
.857c	b5 00		lda $00,x	                lda 0,x                 ; LSB u
.857e	b4 02		ldy $02,x	                ldy 2,x                 ; LSB addr
.8580	75 02		adc $02,x	                adc 2,x
.8582	95 02		sta $02,x	                sta 2,x                 ; LSB addr+u
.8584	94 00		sty $00,x	                sty 0,x
.8586	b5 01		lda $01,x	                lda 1,x                 ; MSB u
.8588	b4 03		ldy $03,x	                ldy 3,x                 ; MSB addr
.858a	75 03		adc $03,x	                adc 3,x
.858c	95 03		sta $03,x	                sta 3,x                 ; MSB addr+u
.858e	94 01		sty $01,x	                sty 1,x
.8590	60		rts		z_bounds:       rts
.8591					xt_bracket_char:
.8591	20 2b 86	jsr $862b	                jsr xt_char
.8594	20 84 93	jsr $9384	                jsr xt_literal
.8597	60		rts		z_bracket_char: rts
.8598					xt_bracket_tick:
.8598	20 05 a2	jsr $a205	                jsr xt_tick
.859b	20 84 93	jsr $9384	                jsr xt_literal
.859e	60		rts		z_bracket_tick: rts
.859f					xt_buffblocknum:
.859f	ca		dex		                dex
.85a0	ca		dex		                dex
.85a1	18		clc		                clc
.85a2	a5 1e		lda $1e		                lda up
.85a4	69 2a		adc #$2a	                adc #buffblocknum_offset        ; Add offset
.85a6	95 00		sta $00,x	                sta 0,x
.85a8	a5 1f		lda $1f		                lda up+1
.85aa	69 00		adc #$00	                adc #0                          ; Adding carry
.85ac	95 01		sta $01,x	                sta 1,x
.85ae	60		rts		z_buffblocknum: rts
.85af					xt_buffer:
.85af	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.85b1	b1 1e		lda ($1e),y	                lda (up),y      ; Only bits 0 and 1 are used, so only
.85b3	c9 03		cmp #$03	                cmp #3          ; LSB is needed.
.85b5	d0 0c		bne $85c3	                bne _buffer_available ; Unused or not dirty = available
.85b7	20 ad 83	jsr $83ad	                jsr xt_blkbuffer
.85ba	20 9f 85	jsr $859f	                jsr xt_buffblocknum
.85bd	20 7a 8f	jsr $8f7a	                jsr xt_fetch
.85c0	20 5a 85	jsr $855a	                jsr xt_block_write
.85c3					_buffer_available:
.85c3	a0 2a		ldy #$2a	                ldy #buffblocknum_offset
.85c5	b5 00		lda $00,x	                lda 0,x
.85c7	91 1e		sta ($1e),y	                sta (up),y
.85c9	c8		iny		                iny
.85ca	b5 01		lda $01,x	                lda 1,x
.85cc	91 1e		sta ($1e),y	                sta (up),y
.85ce	a9 01		lda #$01	                lda #1
.85d0	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.85d2	91 1e		sta ($1e),y	                sta (up),y
.85d4					_done:
.85d4	a0 28		ldy #$28	                ldy #blkbuffer_offset
.85d6	b1 1e		lda ($1e),y	                lda (up),y
.85d8	95 00		sta $00,x	                sta 0,x
.85da	c8		iny		                iny
.85db	b1 1e		lda ($1e),y	                lda (up),y
.85dd	95 01		sta $01,x	                sta 1,x
.85df	60		rts		z_buffer:       rts
.85e0					xt_buffer_colon:
.85e0	20 63 89	jsr $8963	                jsr xt_create
.85e3	20 ab 82	jsr $82ab	                jsr xt_allot
.85e6	60		rts		z_buffer_colon: rts
.85e7					xt_buffstatus:
.85e7	ca		dex		                dex
.85e8	ca		dex		                dex
.85e9	18		clc		                clc
.85ea	a5 1e		lda $1e		                lda up
.85ec	69 2c		adc #$2c	                adc #buffstatus_offset  ; Add offset
.85ee	95 00		sta $00,x	                sta 0,x
.85f0	a5 1f		lda $1f		                lda up+1
.85f2	69 00		adc #$00	                adc #0                  ; Adding carry
.85f4	95 01		sta $01,x	                sta 1,x
.85f6	60		rts		z_buffstatus:   rts
.85f7					xt_bye:
.85f7	4c 2b f0	jmp $f02b	                jmp platform_bye
.85fa					z_bye:
.85fa					xt_c_comma:
.85fa	20 23 d8	jsr $d823	                jsr underflow_1
.85fd	b5 00		lda $00,x	                lda 0,x
.85ff	20 d6 d6	jsr $d6d6	                jsr cmpl_a
.8602	e8		inx		                inx
.8603	e8		inx		                inx
.8604	60		rts		z_c_comma:      rts
.8605					xt_c_fetch:
.8605	20 23 d8	jsr $d823	                jsr underflow_1
.8608	a1 00		lda ($00,x)	                lda (0,x)
.860a	95 00		sta $00,x	                sta 0,x
.860c	74 01		stz $01,x	                stz 1,x         ; Ignore LSB
.860e	60		rts		z_c_fetch:      rts
.860f					xt_c_store:
.860f	20 28 d8	jsr $d828	                jsr underflow_2
.8612	b5 02		lda $02,x	                lda 2,x
.8614	81 00		sta ($00,x)	                sta (0,x)
.8616	e8		inx		                inx
.8617	e8		inx		                inx
.8618	e8		inx		                inx
.8619	e8		inx		                inx
.861a	60		rts		z_c_store:      rts
.861b					xt_cell_plus:
.861b	20 23 d8	jsr $d823	                jsr underflow_1
.861e	f6 00		inc $00,x	                inc 0,x
.8620	d0 02		bne $8624	                bne +
.8622	f6 01		inc $01,x	                inc 1,x
.8624					+
.8624	f6 00		inc $00,x	                inc 0,x
.8626	d0 02		bne $862a	                bne _done
.8628	f6 01		inc $01,x	                inc 1,x
.862a					_done:
.862a	60		rts		z_cell_plus:    rts
.862b					xt_char:
.862b	20 d9 98	jsr $98d9	                jsr xt_parse_name
.862e	b5 00		lda $00,x	                lda 0,x
.8630	15 01		ora $01,x	                ora 1,x
.8632	d0 05		bne $8639	                bne _not_empty
.8634	a9 05		lda #$05	                lda #err_noname
.8636	4c 39 d8	jmp $d839	                jmp error
.8639					_not_empty:
.8639	e8		inx		                inx             ; drop number of characters, leave addr
.863a	e8		inx		                inx
.863b	a1 00		lda ($00,x)	                lda (0,x)       ; get character (equivalent to C@)
.863d	95 00		sta $00,x	                sta 0,x
.863f	74 01		stz $01,x	                stz 1,x         ; MSB is always zero
.8641	60		rts		z_char:         rts
.8642					xt_chars:
.8642	20 23 d8	jsr $d823	                jsr underflow_1
.8645	60		rts		z_chars:        rts
.8646					xt_cleave:
.8646	20 28 d8	jsr $d828	                jsr underflow_2
.8649	20 5d 95	jsr $955d	                jsr xt_minus_leading    ; -LEADING ( addr u )
.864c	20 5c 92	jsr $925c	                jsr xt_input_to_r       ; save old imput state
.864f	b5 00		lda $00,x	                lda 0,x         ; u is new ciblen
.8651	85 0a		sta $0a		                sta ciblen
.8653	b5 01		lda $01,x	                lda 1,x
.8655	85 0b		sta $0b		                sta ciblen+1
.8657	b5 02		lda $02,x	                lda 2,x         ; addr is new cib
.8659	85 08		sta $08		                sta cib
.865b	b5 03		lda $03,x	                lda 3,x
.865d	85 09		sta $09		                sta cib+1
.865f	64 0c		stz $0c		                stz toin        ; >IN pointer is zero
.8661	64 0d		stz $0d		                stz toin+1
.8663	20 d9 98	jsr $98d9	                jsr xt_parse_name       ; ( addr u addr-s u-s )
.8666	b5 00		lda $00,x	                lda 0,x
.8668	15 01		ora $01,x	                ora 1,x
.866a	f0 23		beq $868f	                beq _done
.866c	b5 04		lda $04,x	                lda 4,x         ; LSB of original u
.866e	38		sec		                sec
.866f	f5 00		sbc $00,x	                sbc 0,x
.8671	95 04		sta $04,x	                sta 4,x
.8673	b5 05		lda $05,x	                lda 5,x         ; MSB of original u
.8675	f5 01		sbc $01,x	                sbc 1,x
.8677	95 05		sta $05,x	                sta 5,x
.8679	b5 06		lda $06,x	                lda 6,x         ; LSB of original addr
.867b	18		clc		                clc
.867c	75 00		adc $00,x	                adc 0,x
.867e	95 06		sta $06,x	                sta 6,x
.8680	b5 07		lda $07,x	                lda 7,x         ; MSB of original addr
.8682	75 01		adc $01,x	                adc 1,x
.8684	95 07		sta $07,x	                sta 7,x
.8686	20 72 a4	jsr $a472	                jsr xt_two_swap         ; ( addr-s u-s addr u )
.8689	20 5d 95	jsr $955d	                jsr xt_minus_leading
.868c	20 72 a4	jsr $a472	                jsr xt_two_swap         ; ( addr u addr-s u-s )
.868f					_done:
.868f	20 9d 9a	jsr $9a9d	                jsr xt_r_to_input
.8692	60		rts		z_cleave:       rts
.8693					xt_cmove:
.8693	20 2d d8	jsr $d82d	                jsr underflow_3
.8696	b5 02		lda $02,x	                lda 2,x
.8698	85 26		sta $26		                sta tmp2        ; use tmp2 because easier to remember
.869a	b5 03		lda $03,x	                lda 3,x
.869c	85 27		sta $27		                sta tmp2+1
.869e	b5 04		lda $04,x	                lda 4,x
.86a0	85 24		sta $24		                sta tmp1        ; use tmp1 because easier to remember
.86a2	b5 05		lda $05,x	                lda 5,x
.86a4	85 25		sta $25		                sta tmp1+1
.86a6	a0 00		ldy #$00	                ldy #0
.86a8	b5 01		lda $01,x	                lda 1,x         ; number of whole pages to move
.86aa	f0 0f		beq $86bb	                beq _dopartial
.86ac					_page:
.86ac	b1 24		lda ($24),y	                lda (tmp1),y
.86ae	91 26		sta ($26),y	                sta (tmp2),y
.86b0	c8		iny		                iny
.86b1	d0 f9		bne $86ac	                bne _page
.86b3	e6 25		inc $25		                inc tmp1+1
.86b5	e6 27		inc $27		                inc tmp2+1
.86b7	d6 01		dec $01,x	                dec 1,x
.86b9	d0 f1		bne $86ac	                bne _page
.86bb					_dopartial:
.86bb	b5 00		lda $00,x	                lda 0,x         ; length of last page
.86bd	f0 09		beq $86c8	                beq _done
.86bf					_partial:
.86bf	b1 24		lda ($24),y	                lda (tmp1),y
.86c1	91 26		sta ($26),y	                sta (tmp2),y
.86c3	c8		iny		                iny
.86c4	d6 00		dec $00,x	                dec 0,x
.86c6	d0 f7		bne $86bf	                bne _partial
.86c8					_done:
.86c8	8a		txa		                txa
.86c9	18		clc		                clc
.86ca	69 06		adc #$06	                adc #6
.86cc	aa		tax		                tax
.86cd	60		rts		z_cmove:        rts
.86ce					xt_cmove_up:
.86ce	20 2d d8	jsr $d82d	                jsr underflow_3
.86d1	b5 02		lda $02,x	                lda 2,x
.86d3	85 26		sta $26		                sta tmp2        ; use tmp2 because easier to remember
.86d5	b5 03		lda $03,x	                lda 3,x
.86d7	18		clc		                clc
.86d8	75 01		adc $01,x	                adc 1,x
.86da	85 27		sta $27		                sta tmp2+1      ; point to last page of destination
.86dc	b5 04		lda $04,x	                lda 4,x
.86de	85 24		sta $24		                sta tmp1        ; use tmp1 because easier to remember
.86e0	b5 05		lda $05,x	                lda 5,x
.86e2	18		clc		                clc
.86e3	75 01		adc $01,x	                adc 1,x
.86e5	85 25		sta $25		                sta tmp1+1      ; point to last page of source
.86e7	f6 01		inc $01,x	                inc 1,x         ; allows us to use bne with dec 1,x below
.86e9	b4 00		ldy $00,x	                ldy 0,x         ; length of last page
.86eb	f0 0e		beq $86fb	                beq _nopartial
.86ed					_outerloop:
.86ed	88		dey		                dey
.86ee	f0 07		beq $86f7	                beq _finishpage
.86f0					_innerloop:
.86f0	b1 24		lda ($24),y	                lda (tmp1),y
.86f2	91 26		sta ($26),y	                sta (tmp2),y
.86f4	88		dey		                dey
.86f5	d0 f9		bne $86f0	                bne _innerloop
.86f7					_finishpage:
.86f7	b2 24		lda ($24)	                lda (tmp1)      ; handle y = 0 separately
.86f9	92 26		sta ($26)	                sta (tmp2)
.86fb					_nopartial:
.86fb	c6 25		dec $25		                dec tmp1+1      ; back up to previous pages
.86fd	c6 27		dec $27		                dec tmp2+1
.86ff	d6 01		dec $01,x	                dec 1,x
.8701	d0 ea		bne $86ed	                bne _outerloop
.8703					_done:
.8703	8a		txa		                txa
.8704	18		clc		                clc
.8705	69 06		adc #$06	                adc #6
.8707	aa		tax		                tax
.8708	60		rts		z_cmove_up:     rts
.8709					xt_colon:
.8709	a5 16		lda $16		                lda state
.870b	05 17		ora $17		                ora state+1
.870d	f0 05		beq $8714	                beq +
.870f	a9 07		lda #$07	                lda #err_state
.8711	4c 39 d8	jmp $d839	                jmp error
.8714					+
.8714	c6 16		dec $16		                dec state
.8716	c6 17		dec $17		                dec state+1
.8718	a9 40		lda #$40	                lda #%01000000
.871a	04 20		tsb $20		                tsb status
.871c	20 65 d7	jsr $d765	                jsr current_to_dp
.871f	a5 03		lda $03		                lda dp+1            ; CREATE uses a lot of variables
.8721	48		pha		                pha
.8722	a5 02		lda $02		                lda dp
.8724	48		pha		                pha
.8725	a9 80		lda #$80	                lda #%10000000
.8727	04 20		tsb $20		                tsb status
.8729	20 63 89	jsr $8963	                jsr xt_create
.872c	20 65 d7	jsr $d765	                jsr current_to_dp   ; This might be able to be omitted
.872f	a5 02		lda $02		                lda dp
.8731	85 04		sta $04		                sta workword
.8733	a5 03		lda $03		                lda dp+1
.8735	85 05		sta $05		                sta workword+1
.8737	68		pla		                pla
.8738	85 02		sta $02		                sta dp
.873a	68		pla		                pla
.873b	85 03		sta $03		                sta dp+1
.873d	20 78 d7	jsr $d778	                jsr dp_to_current
.8740	a5 00		lda $00		                lda cp
.8742	38		sec		                sec
.8743	e9 03		sbc #$03	                sbc #3
.8745	85 00		sta $00		                sta cp
.8747	b0 02		bcs $874b	                bcs _done
.8749	c6 01		dec $01		                dec cp+1
.874b					_done:
.874b	60		rts		z_colon:        rts
.874c					xt_colon_noname:
.874c	a5 16		lda $16		                lda state
.874e	05 17		ora $17		                ora state+1
.8750	f0 05		beq $8757	                beq +
.8752	a9 07		lda #$07	                lda #err_state
.8754	4c 39 d8	jmp $d839	                jmp error
.8757					+
.8757	c6 16		dec $16		                dec state
.8759	c6 17		dec $17		                dec state+1
.875b	a9 40		lda #$40	                lda #%01000000
.875d	14 20		trb $20		                trb status
.875f	a5 00		lda $00		                lda cp
.8761	85 04		sta $04		                sta workword
.8763	a5 01		lda $01		                lda cp+1
.8765	85 05		sta $05		                sta workword+1
.8767					_done:
.8767	60		rts		z_colon_noname:        rts
.8768					xt_comma:
.8768	20 23 d8	jsr $d823	                jsr underflow_1
.876b	b5 00		lda $00,x	                lda 0,x
.876d	92 00		sta ($00)	                sta (cp)
.876f	e6 00		inc $00		                inc cp
.8771	d0 02		bne $8775	                bne +
.8773	e6 01		inc $01		                inc cp+1
.8775					+
.8775	b5 01		lda $01,x	                lda 1,x
.8777	92 00		sta ($00)	                sta (cp)
.8779	e6 00		inc $00		                inc cp
.877b	d0 02		bne $877f	                bne _done
.877d	e6 01		inc $01		                inc cp+1
.877f					_done:
.877f	e8		inx		                inx
.8780	e8		inx		                inx
.8781	60		rts		z_comma:        rts
.8782					xt_compare:
.8782	20 32 d8	jsr $d832	                jsr underflow_4
.8785	b5 02		lda $02,x	                lda 2,x
.8787	85 26		sta $26		                sta tmp2
.8789	b5 03		lda $03,x	                lda 3,x
.878b	85 27		sta $27		                sta tmp2+1
.878d	b5 06		lda $06,x	                lda 6,x
.878f	85 24		sta $24		                sta tmp1
.8791	b5 07		lda $07,x	                lda 7,x
.8793	85 25		sta $25		                sta tmp1+1
.8795					_compare_loop:
.8795	b5 04		lda $04,x	                lda 4,x
.8797	15 05		ora $05,x	                ora 5,x
.8799	f0 2c		beq $87c7	                beq _str1_done
.879b	b5 00		lda $00,x	                lda 0,x
.879d	15 01		ora $01,x	                ora 1,x
.879f	f0 3a		beq $87db	                beq _greater    ; Str2 empty first
.87a1					_check_letter:
.87a1	b2 24		lda ($24)	                lda (tmp1)
.87a3	d2 26		cmp ($26)	                cmp (tmp2)
.87a5	90 26		bcc $87cd	                bcc _less
.87a7	d0 32		bne $87db	                bne _greater
.87a9					_next_letter:
.87a9	e6 24		inc $24		                inc tmp1
.87ab	d0 02		bne $87af	                bne +
.87ad	e6 25		inc $25		                inc tmp1+1
.87af					+
.87af	e6 26		inc $26		                inc tmp2
.87b1	d0 02		bne $87b5	                bne +
.87b3	e6 27		inc $27		                inc tmp2+1
.87b5					+
.87b5	b5 04		lda $04,x	                lda 4,x
.87b7	d0 02		bne $87bb	                bne +
.87b9	d6 05		dec $05,x	                dec 5,x
.87bb					+
.87bb	d6 04		dec $04,x	                dec 4,x
.87bd	b5 00		lda $00,x	                lda 0,x
.87bf	d0 02		bne $87c3	                bne +
.87c1	d6 01		dec $01,x	                dec 1,x
.87c3					+
.87c3	d6 00		dec $00,x	                dec 0,x
.87c5	80 ce		bra $8795	                bra _compare_loop
.87c7					_str1_done:
.87c7	b5 00		lda $00,x	                lda 0,x
.87c9	15 01		ora $01,x	                ora 1,x
.87cb	f0 08		beq $87d5	                beq _equal      ; Both out of letters
.87cd					_less:
.87cd	a9 ff		lda #$ff	                lda #$FF
.87cf	95 06		sta $06,x	                sta 6,x
.87d1	95 07		sta $07,x	                sta 7,x
.87d3	80 0c		bra $87e1	                bra _done
.87d5					_equal:
.87d5	74 06		stz $06,x	                stz 6,x
.87d7	74 07		stz $07,x	                stz 7,x
.87d9	80 06		bra $87e1	                bra _done
.87db					_greater:
.87db	a9 01		lda #$01	                lda #1
.87dd	95 06		sta $06,x	                sta 6,x
.87df	74 07		stz $07,x	                stz 7,x
.87e1					_done:
.87e1	8a		txa		                txa
.87e2	18		clc		                clc
.87e3	69 06		adc #$06	                adc #6
.87e5	aa		tax		                tax
.87e6	60		rts		z_compare:      rts
.87e7					xt_compile_comma:
.87e7	20 23 d8	jsr $d823	                jsr underflow_1
.87ea	b5 01		lda $01,x	                lda 1,x                 ; MSB
.87ec	48		pha		                pha
.87ed	b5 00		lda $00,x	                lda 0,x
.87ef	48		pha		                pha                     ; LSB
.87f0	20 72 92	jsr $9272	                jsr xt_int_to_name      ; ( xt -- nt )
.87f3	b5 00		lda $00,x	                lda 0,x
.87f5	15 01		ora $01,x	                ora 1,x
.87f7	d0 03		bne $87fc	                bne _check_nt
.87f9	4c e4 88	jmp $88e4	                jmp _compile_as_jump
.87fc					_check_nt:
.87fc	b5 00		lda $00,x	                lda 0,x
.87fe	85 2c		sta $2c		                sta tmptos
.8800	b5 01		lda $01,x	                lda 1,x
.8802	85 2d		sta $2d		                sta tmptos+1
.8804	f6 00		inc $00,x	                inc 0,x
.8806	d0 02		bne $880a	                bne +
.8808	f6 01		inc $01,x	                inc 1,x                 ; ( nt -- nt+1 )
.880a					+
.880a	a1 00		lda ($00,x)	                lda (0,x)
.880c	85 28		sta $28		                sta tmp3                ; keep copy of status byte for NN
.880e	29 02		and #$02	                and #AN                 ; mask all but Always Native (AN) bit
.8810	f0 0d		beq $881f	                beq _compile_check
.8812	a5 2c		lda $2c		                lda tmptos
.8814	95 00		sta $00,x	                sta 0,x
.8816	a5 2d		lda $2d		                lda tmptos+1
.8818	95 01		sta $01,x	                sta 1,x
.881a	20 69 a7	jsr $a769	                jsr xt_wordsize         ; ( nt -- u )
.881d	80 27		bra $8846	                bra _compile_as_code
.881f					_compile_check:
.881f	a5 28		lda $28		                lda tmp3
.8821	29 08		and #$08	                and #NN
.8823	f0 03		beq $8828	                beq _check_size_limit
.8825	4c e4 88	jmp $88e4	                jmp _compile_as_jump    ; too far for BRA
.8828					_check_size_limit:
.8828	a5 2c		lda $2c		                lda tmptos
.882a	95 00		sta $00,x	                sta 0,x
.882c	a5 2d		lda $2d		                lda tmptos+1
.882e	95 01		sta $01,x	                sta 1,x
.8830	20 69 a7	jsr $a769	                jsr xt_wordsize         ; ( nt -- u )
.8833	b5 01		lda $01,x	                lda 1,x
.8835	c5 1b		cmp $1b		                cmp nc_limit+1
.8837	90 0d		bcc $8846	                bcc _compile_as_code    ; user-defined limit MSB
.8839	d0 08		bne $8843	                bne _jumpto_compile_as_jump
.883b	b5 00		lda $00,x	                lda 0,x
.883d	c5 1a		cmp $1a		                cmp nc_limit            ; user-defined limit LSB
.883f	90 05		bcc $8846	                bcc _compile_as_code    ; Allow native compiling for less
.8841	f0 03		beq $8846	                beq _compile_as_code    ; than or equal to the limit.
.8843					_jumpto_compile_as_jump:
.8843	4c e4 88	jmp $88e4	                jmp _compile_as_jump    ; too far for BRA
.8846					_compile_as_code:
.8846	ca		dex		                dex
.8847	ca		dex		                dex                     ; ( -- u ? )
.8848	ca		dex		                dex
.8849	ca		dex		                dex                     ; ( -- u ? ? )
.884a	b5 04		lda $04,x	                lda 4,x
.884c	95 00		sta $00,x	                sta 0,x                 ; LSB of u
.884e	b5 05		lda $05,x	                lda 5,x
.8850	95 01		sta $01,x	                sta 1,x                 ; ( -- u ? u )
.8852	68		pla		                pla
.8853	95 04		sta $04,x	                sta 4,x                 ; LSB of xt
.8855	68		pla		                pla
.8856	95 05		sta $05,x	                sta 5,x                 ; ( -- xt ? u )
.8858	a5 00		lda $00		                lda cp                  ; LSB of cp
.885a	95 02		sta $02,x	                sta 2,x
.885c	a5 01		lda $01		                lda cp+1
.885e	95 03		sta $03,x	                sta 3,x                 ; ( -- xt cp u )
.8860	a0 00		ldy #$00	                ldy #0
.8862					_strip_loop:
.8862	b9 d2 88	lda $88d2,y	                lda _strip_table,y      ; LSB of first word
.8865	d5 04		cmp $04,x	                cmp 4,x                 ; LSB of xt
.8867	d0 07		bne $8870	                bne _next_entry
.8869	b9 d3 88	lda $88d3,y	                lda _strip_table+1,y
.886c	d5 05		cmp $05,x	                cmp 5,x
.886e	f0 0c		beq $887c	                beq _found_entry
.8870					_next_entry:
.8870	b9 d2 88	lda $88d2,y	                lda _strip_table,y      ; pointing to LSB
.8873	19 d3 88	ora $88d3,y	                ora _strip_table+1,y    ; get MSB
.8876	f0 22		beq $889a	                beq _underflow_strip    ; table done, let's get out of here
.8878	c8		iny		                iny
.8879	c8		iny		                iny
.887a	80 e6		bra $8862	                bra _strip_loop
.887c					_found_entry:
.887c	98		tya		                tya
.887d	4a		lsr a		                lsr
.887e	a8		tay		                tay
.887f	b9 de 88	lda $88de,y	                lda _strip_size,y
.8882	85 2c		sta $2c		                sta tmptos              ; save a copy
.8884	18		clc		                clc
.8885	75 04		adc $04,x	                adc 4,x
.8887	95 04		sta $04,x	                sta 4,x
.8889	90 02		bcc $888d	                bcc+
.888b	f6 05		inc $05,x	                inc 5,x                 ; we just care about the carry
.888d					+
.888d	06 2c		asl $2c		                asl tmptos
.888f	38		sec		                sec
.8890	b5 00		lda $00,x	                lda 0,x
.8892	e5 2c		sbc $2c		                sbc tmptos
.8894	95 00		sta $00,x	                sta 0,x
.8896	b0 02		bcs $889a	                bcs +
.8898	d6 01		dec $01,x	                dec 1,x                 ; we just care about the borrow
.889a					+
.889a					_underflow_strip:
.889a	a5 1c		lda $1c		                lda uf_strip
.889c	05 1d		ora $1d		                ora uf_strip+1
.889e	f0 1c		beq $88bc	                beq _specials_done
.88a0	a5 28		lda $28		                lda tmp3
.88a2	29 10		and #$10	                and #UF
.88a4	f0 16		beq $88bc	                beq _specials_done
.88a6	18		clc		                clc
.88a7	b5 04		lda $04,x	                lda 4,x
.88a9	69 03		adc #$03	                adc #3
.88ab	95 04		sta $04,x	                sta 4,x
.88ad	90 02		bcc $88b1	                bcc +
.88af	f6 05		inc $05,x	                inc 5,x                  ; we just care about the carry
.88b1					+
.88b1	38		sec		                sec
.88b2	b5 00		lda $00,x	                lda 0,x
.88b4	e9 03		sbc #$03	                sbc #3
.88b6	95 00		sta $00,x	                sta 0,x
.88b8	b0 02		bcs $88bc	                bcs +
.88ba	d6 01		dec $01,x	                dec 1,x                  ; we just care about the borrow
.88bc					+
.88bc					_specials_done:
.88bc	b5 01		lda $01,x	                lda 1,x                 ; MSB
.88be	48		pha		                pha
.88bf	b5 00		lda $00,x	                lda 0,x                 ; LSB
.88c1	48		pha		                pha
.88c2	20 bc 95	jsr $95bc	                jsr xt_move
.88c5	18		clc		                clc
.88c6	68		pla		                pla                     ; LSB
.88c7	65 00		adc $00		                adc cp
.88c9	85 00		sta $00		                sta cp
.88cb	68		pla		                pla                     ; MSB
.88cc	65 01		adc $01		                adc cp+1
.88ce	85 01		sta $01		                sta cp+1
.88d0	80 2c		bra $88fe	                bra _done
.88d2					_strip_table:
>88d2	8c 9a 77 9a 64 a3		                .word xt_r_from, xt_r_fetch, xt_to_r    ; R>, R@, >R
>88d8	96 a4 1c a4 00 00		                .word xt_two_to_r, xt_two_r_from, 0000  ; 2>R, 2R>, EOL
.88de					_strip_size:
>88de	04 04 04 06 06 00		                .byte 4, 4, 4, 6, 6, 0          ; R>, R@, >R, 2>R, 2R>, EOL
.88e4					_compile_as_jump:
.88e4	a9 20		lda #$20	                lda #$20
.88e6	92 00		sta ($00)	                sta (cp)
.88e8	a0 01		ldy #$01	                ldy #1
.88ea	68		pla		                pla             ; LSB
.88eb	91 00		sta ($00),y	                sta (cp),y
.88ed	c8		iny		                iny
.88ee	68		pla		                pla             ; MSB
.88ef	91 00		sta ($00),y	                sta (cp),y
.88f1	a9 03		lda #$03	                lda #3
.88f3	18		clc		                clc
.88f4	65 00		adc $00		                adc cp
.88f6	85 00		sta $00		                sta cp
.88f8	90 02		bcc $88fc	                bcc +
.88fa	e6 01		inc $01		                inc cp+1
.88fc					+
.88fc	e8		inx		                inx             ; drop xt
.88fd	e8		inx		                inx
.88fe					_done:
.88fe					z_compile_comma:
.88fe	60		rts		                rts
.88ff					xt_compile_only:
.88ff	20 65 d7	jsr $d765	                jsr current_to_dp
.8902	a0 01		ldy #$01	                ldy #1          ; offset for status byte
.8904	b1 02		lda ($02),y	                lda (dp),y
.8906	09 01		ora #$01	                ora #CO        ; make sure bit 7 is set
.8908	91 02		sta ($02),y	                sta (dp),y
.890a	60		rts		z_compile_only: rts
.890b					xt_value:
.890b					xt_constant:
.890b	20 23 d8	jsr $d823	                jsr underflow_1
.890e	20 63 89	jsr $8963	                jsr xt_create
.8911	38		sec		                sec
.8912	a5 00		lda $00		                lda cp
.8914	e9 02		sbc #$02	                sbc #2
.8916	85 24		sta $24		                sta tmp1
.8918	a5 01		lda $01		                lda cp+1
.891a	e9 00		sbc #$00	                sbc #0
.891c	85 25		sta $25		                sta tmp1+1
.891e	a9 df		lda #$df	                lda #<doconst           ; LSB of DOCONST
.8920	92 24		sta ($24)	                sta (tmp1)
.8922	a0 01		ldy #$01	                ldy #1
.8924	a9 d6		lda #$d6	                lda #>doconst           ; MSB of DOCONST
.8926	91 24		sta ($24),y	                sta (tmp1),y
.8928	20 68 87	jsr $8768	                jsr xt_comma            ; drop through to adjust_z
.892b					adjust_z:
.892b	20 35 93	jsr $9335	                jsr xt_latestnt         ; gives us ( -- nt )
.892e	b5 00		lda $00,x	                lda 0,x
.8930	85 24		sta $24		                sta tmp1
.8932	b5 01		lda $01,x	                lda 1,x
.8934	85 25		sta $25		                sta tmp1+1
.8936	a0 06		ldy #$06	                ldy #6
.8938	b1 24		lda ($24),y	                lda (tmp1),y
.893a	18		clc		                clc
.893b	69 02		adc #$02	                adc #2
.893d	91 24		sta ($24),y	                sta (tmp1),y
.893f	c8		iny		                iny
.8940	b1 24		lda ($24),y	                lda (tmp1),y
.8942	69 00		adc #$00	                adc #0                  ; only need carry
.8944	91 24		sta ($24),y	                sta (tmp1),y
.8946	e8		inx		                inx
.8947	e8		inx		                inx
.8948					z_value:
.8948	60		rts		z_constant:     rts
.8949					xt_count:
.8949	20 23 d8	jsr $d823	                jsr underflow_1
.894c	a1 00		lda ($00,x)	                lda (0,x)       ; Get number of characters (255 max)
.894e	a8		tay		                tay
.894f	f6 00		inc $00,x	                inc 0,x         ; LSB
.8951	d0 02		bne $8955	                bne +
.8953	f6 01		inc $01,x	                inc 1,x         ; MSB
.8955	98		tya		+               tya
.8956	ca		dex		                dex
.8957	ca		dex		                dex
.8958	95 00		sta $00,x	                sta 0,x         ; LSB
.895a	74 01		stz $01,x	                stz 1,x         ; MSB, always zero
.895c	60		rts		z_count:        rts
.895d					xt_cr:
.895d	a9 0a		lda #$0a	                lda #AscLF
.895f	20 f0 8d	jsr $8df0	                jsr emit_a
.8962	60		rts		z_cr:           rts
.8963					xt_create:
.8963	20 d9 98	jsr $98d9	                jsr xt_parse_name       ; ( addr u )
.8966	b5 00		lda $00,x	                lda 0,x
.8968	15 01		ora $01,x	                ora 1,x
.896a	d0 05		bne $8971	                bne _got_name
.896c	a9 05		lda #$05	                lda #err_noname
.896e	4c 39 d8	jmp $d839	                jmp error
.8971					_got_name:
.8971	74 01		stz $01,x	                stz 1,x
.8973	20 ac a3	jsr $a3ac	                jsr xt_two_dup          ; ( addr u addr u )
.8976	20 d5 8f	jsr $8fd5	                jsr xt_find_name        ; ( addr u flag ) (non-zero nt as flag)
.8979	b5 00		lda $00,x	                lda 0,x
.897b	15 01		ora $01,x	                ora 1,x
.897d	f0 1e		beq $899d	                beq _new_name           ; We haven't seen this one before.
.897f	e8		inx		                inx                     ; Drop flag (nt) from find-name.
.8980	e8		inx		                inx
.8981	24 20		bit $20		                bit status
.8983	10 08		bpl $898d	                bpl _redefined_name     ; Bit 7 is zero, so print the message.
.8985	a9 80		lda #$80	                lda #$80                ; Set bit 7 to indicate dup
.8987	05 20		ora $20		                ora status
.8989	85 20		sta $20		                sta status
.898b	80 18		bra $89a5	                bra _process_name
.898d					_redefined_name:
.898d	a9 02		lda #$02	                lda #str_redefined
.898f	20 4f d8	jsr $d84f	                jsr print_string_no_lf
.8992	20 ac a3	jsr $a3ac	                jsr xt_two_dup           ; ( addr u addr u )
.8995	20 f7 a4	jsr $a4f7	                jsr xt_type
.8998	20 18 a1	jsr $a118	                jsr xt_space
.899b	80 08		bra $89a5	                bra _process_name
.899d					_new_name:
.899d	e8		inx		                inx                     ; Drop flag (0) from find-name.
.899e	e8		inx		                inx
.899f	a9 7f		lda #$7f	                lda #$7F                ; Clear bit 0 of status to indicate new word.
.89a1	25 20		and $20		                and status
.89a3	85 20		sta $20		                sta status
.89a5					_process_name:
.89a5	b5 00		lda $00,x	                lda 0,x
.89a7	85 26		sta $26		                sta tmp2                ; store length of string in tmp2
.89a9	a5 00		lda $00		                lda cp
.89ab	85 24		sta $24		                sta tmp1
.89ad	a5 01		lda $01		                lda cp+1
.89af	85 25		sta $25		                sta tmp1+1
.89b1	b5 00		lda $00,x	                lda 0,x
.89b3	18		clc		                clc
.89b4	69 08		adc #$08	                adc #8
.89b6	85 28		sta $28		                sta tmp3                ; total header length
.89b8	18		clc		                clc
.89b9	69 03		adc #$03	                adc #3
.89bb	95 00		sta $00,x	                sta 0,x
.89bd	74 01		stz $01,x	                stz 1,x         ; max header size is 255 chars
.89bf	20 ab 82	jsr $82ab	                jsr xt_allot    ; ( addr )
.89c2	20 65 d7	jsr $d765	                jsr current_to_dp
.89c5	a0 00		ldy #$00	                ldy #0
.89c7	a5 26		lda $26		                lda tmp2
.89c9	91 24		sta ($24),y	                sta (tmp1),y
.89cb	a9 08		lda #$08	                lda #NN
.89cd	09 20		ora #$20	                ora #HC
.89cf	c8		iny		                iny
.89d0	91 24		sta ($24),y	                sta (tmp1),y
.89d2	c8		iny		                iny
.89d3	a5 02		lda $02		                lda dp
.89d5	91 24		sta ($24),y	                sta (tmp1),y
.89d7	c8		iny		                iny
.89d8	a5 03		lda $03		                lda dp+1
.89da	91 24		sta ($24),y	                sta (tmp1),y
.89dc	c8		iny		                iny
.89dd	a5 25		lda $25		                lda tmp1+1
.89df	85 03		sta $03		                sta dp+1
.89e1	a5 24		lda $24		                lda tmp1
.89e3	85 02		sta $02		                sta dp
.89e5	18		clc		                clc
.89e6	65 28		adc $28		                adc tmp3        ; add total header length
.89e8	91 24		sta ($24),y	                sta (tmp1),y
.89ea	48		pha		                pha             ; we need this in the next step
.89eb	c8		iny		                iny
.89ec	a5 25		lda $25		                lda tmp1+1
.89ee	69 00		adc #$00	                adc #0          ; only need the carry
.89f0	91 24		sta ($24),y	                sta (tmp1),y
.89f2	c8		iny		                iny
.89f3	68		pla		                pla             ; LSB of "z_" address
.89f4	18		clc		                clc
.89f5	69 03		adc #$03	                adc #3
.89f7	91 24		sta ($24),y	                sta (tmp1),y
.89f9	88		dey		                dey             ; get the MSB of xt back
.89fa	b1 24		lda ($24),y	                lda (tmp1),y
.89fc	69 00		adc #$00	                adc #0          ; only need the carry
.89fe	c8		iny		                iny
.89ff	c8		iny		                iny
.8a00	91 24		sta ($24),y	                sta (tmp1),y
.8a02	c8		iny		                iny
.8a03	b5 00		lda $00,x	                lda 0,x
.8a05	38		sec		                sec
.8a06	e9 08		sbc #$08	                sbc #8
.8a08	85 2c		sta $2c		                sta tmptos
.8a0a	b5 01		lda $01,x	                lda 1,x
.8a0c	e9 00		sbc #$00	                sbc #0          ; only need carry
.8a0e	85 2d		sta $2d		                sta tmptos+1
.8a10					_name_loop:
.8a10	b1 2c		lda ($2c),y	                lda (tmptos),y
.8a12	c9 5b		cmp #$5b	                cmp #$5B         ; ASCII '[' (one past Z)
.8a14	b0 07		bcs $8a1d	                bcs _store_name
.8a16	c9 41		cmp #$41	                cmp #$41        ; ASCII 'A'
.8a18	90 03		bcc $8a1d	                bcc _store_name
.8a1a	18		clc		                clc
.8a1b	69 20		adc #$20	                adc #$20
.8a1d					_store_name:
.8a1d	91 24		sta ($24),y	                sta (tmp1),y
.8a1f	c8		iny		                iny
.8a20	c6 26		dec $26		                dec tmp2
.8a22	d0 ec		bne $8a10	                bne _name_loop
.8a24	a9 20		lda #$20	                lda #$20        ; opcode of JSR
.8a26	91 24		sta ($24),y	                sta (tmp1),y
.8a28	c8		iny		                iny
.8a29	a9 25		lda #$25	                lda #<dovar
.8a2b	91 24		sta ($24),y	                sta (tmp1),y
.8a2d	c8		iny		                iny
.8a2e	a9 d7		lda #$d7	                lda #>dovar
.8a30	91 24		sta ($24),y	                sta (tmp1),y
.8a32	20 78 d7	jsr $d778	                jsr dp_to_current
.8a35	e8		inx		                inx
.8a36	e8		inx		                inx
.8a37	60		rts		z_create:       rts
.8a38					xt_d_minus:
.8a38	20 32 d8	jsr $d832	                jsr underflow_4 ; two double numbers
.8a3b	38		sec		                sec
.8a3c	b5 06		lda $06,x	                lda 6,x         ; LSB of lower word
.8a3e	f5 02		sbc $02,x	                sbc 2,x
.8a40	95 06		sta $06,x	                sta 6,x
.8a42	b5 07		lda $07,x	                lda 7,x         ; MSB of lower word
.8a44	f5 03		sbc $03,x	                sbc 3,x
.8a46	95 07		sta $07,x	                sta 7,x
.8a48	b5 04		lda $04,x	                lda 4,x         ; LSB of upper word
.8a4a	f5 00		sbc $00,x	                sbc 0,x
.8a4c	95 04		sta $04,x	                sta 4,x
.8a4e	b5 05		lda $05,x	                lda 5,x         ; MSB of upper word
.8a50	f5 01		sbc $01,x	                sbc 1,x
.8a52	95 05		sta $05,x	                sta 5,x
.8a54	e8		inx		                inx
.8a55	e8		inx		                inx
.8a56	e8		inx		                inx
.8a57	e8		inx		                inx
.8a58	60		rts		z_d_minus:      rts
.8a59					xt_d_plus:
.8a59	20 32 d8	jsr $d832	                jsr underflow_4 ; two double numbers
.8a5c	18		clc		                clc
.8a5d	b5 02		lda $02,x	                lda 2,x         ; LSB of lower word
.8a5f	75 06		adc $06,x	                adc 6,x
.8a61	95 06		sta $06,x	                sta 6,x
.8a63	b5 03		lda $03,x	                lda 3,x         ; MSB of lower word
.8a65	75 07		adc $07,x	                adc 7,x
.8a67	95 07		sta $07,x	                sta 7,x
.8a69	b5 00		lda $00,x	                lda 0,x         ; LSB of upper word
.8a6b	75 04		adc $04,x	                adc 4,x
.8a6d	95 04		sta $04,x	                sta 4,x
.8a6f	b5 01		lda $01,x	                lda 1,x         ; MSB of upper word
.8a71	75 05		adc $05,x	                adc 5,x
.8a73	95 05		sta $05,x	                sta 5,x
.8a75	e8		inx		                inx
.8a76	e8		inx		                inx
.8a77	e8		inx		                inx
.8a78	e8		inx		                inx
.8a79	60		rts		z_d_plus:       rts
.8a7a					xt_d_to_s:
.8a7a	20 28 d8	jsr $d828	                jsr underflow_2
.8a7d	e8		inx		                inx
.8a7e	e8		inx		                inx
.8a7f	60		rts		z_d_to_s:       rts
.8a80					xt_dabs:
.8a80	20 28 d8	jsr $d828	                jsr underflow_2 ; double number
.8a83	b5 01		lda $01,x	                lda 1,x         ; MSB of high cell
.8a85	10 17		bpl $8a9e	                bpl _done       ; positive, we get off light
.8a87	a0 00		ldy #$00	                ldy #0
.8a89	38		sec		                sec
.8a8a	98		tya		                tya
.8a8b	f5 02		sbc $02,x	                sbc 2,x         ; LSB of low cell
.8a8d	95 02		sta $02,x	                sta 2,x
.8a8f	98		tya		                tya
.8a90	f5 03		sbc $03,x	                sbc 3,x         ; MSB of low cell
.8a92	95 03		sta $03,x	                sta 3,x
.8a94	98		tya		                tya
.8a95	f5 00		sbc $00,x	                sbc 0,x         ; LSB of high cell
.8a97	95 00		sta $00,x	                sta 0,x
.8a99	98		tya		                tya
.8a9a	f5 01		sbc $01,x	                sbc 1,x         ; MSB of high cell
.8a9c	95 01		sta $01,x	                sta 1,x
.8a9e					_done:
.8a9e	60		rts		z_dabs:         rts
.8a9f					xt_decimal:
.8a9f	a9 0a		lda #$0a	                lda #10
.8aa1	85 18		sta $18		                sta base
.8aa3	64 19		stz $19		                stz base+1              ; paranoid
.8aa5	60		rts		z_decimal:      rts
.8aa6					xt_defer:
.8aa6	20 63 89	jsr $8963	                jsr xt_create
.8aa9	a5 00		lda $00		                lda cp          ; LSB
.8aab	38		sec		                sec
.8aac	e9 02		sbc #$02	                sbc #2
.8aae	85 24		sta $24		                sta tmp1
.8ab0	a5 01		lda $01		                lda cp+1        ; MSB
.8ab2	e9 00		sbc #$00	                sbc #0          ; we only care about the borrow
.8ab4	85 25		sta $25		                sta tmp1+1
.8ab6	a0 00		ldy #$00	                ldy #0
.8ab8	a9 f3		lda #$f3	                lda #<dodefer   ; LSB
.8aba	91 24		sta ($24),y	                sta (tmp1),y
.8abc	c8		iny		                iny
.8abd	a9 d6		lda #$d6	                lda #>dodefer   ; MSB
.8abf	91 24		sta ($24),y	                sta (tmp1),y
.8ac1	a9 07		lda #$07	                lda #<defer_error
.8ac3	92 00		sta ($00)	                sta (cp)
.8ac5	e6 00		inc $00		                inc cp
.8ac7	d0 02		bne $8acb	                bne +
.8ac9	e6 01		inc $01		                inc cp+1
.8acb					+
.8acb	a9 d7		lda #$d7	                lda #>defer_error
.8acd	92 00		sta ($00)	                sta (cp)
.8acf	e6 00		inc $00		                inc cp
.8ad1	d0 02		bne $8ad5	                bne +
.8ad3	e6 01		inc $01		                inc cp+1
.8ad5					+
.8ad5	20 2b 89	jsr $892b	                jsr adjust_z    ; adjust header to correct length
.8ad8	60		rts		z_defer:        rts
.8ad9					xt_defer_fetch:
.8ad9	20 81 a2	jsr $a281	                jsr xt_to_body
.8adc	20 7a 8f	jsr $8f7a	                jsr xt_fetch
.8adf	60		rts		z_defer_fetch:  rts
.8ae0					xt_defer_store:
.8ae0	20 81 a2	jsr $a281	                jsr xt_to_body
.8ae3	20 81 a1	jsr $a181	                jsr xt_store
.8ae6	60		rts		z_defer_store:  rts
.8ae7					xt_definitions:
.8ae7	a0 1f		ldy #$1f	                ldy #search_order_offset    ; Transfer byte variable
.8ae9	b1 1e		lda ($1e),y	                lda (up),y                  ; SEARCH_ORDER[0] to
.8aeb	a0 04		ldy #$04	                ldy #current_offset         ; byte variable CURRENT.
.8aed	91 1e		sta ($1e),y	                sta (up),y
.8aef	60		rts		z_definitions:  rts
.8af0					xt_depth:
.8af0	a9 78		lda #$78	                lda #dsp0
.8af2	86 2a		stx $2a		                stx tmpdsp
.8af4	38		sec		                sec
.8af5	e5 2a		sbc $2a		                sbc tmpdsp
.8af7	4a		lsr a		                lsr
.8af8	ca		dex		                dex
.8af9	ca		dex		                dex
.8afa	95 00		sta $00,x	                sta 0,x
.8afc	74 01		stz $01,x	                stz 1,x
.8afe	60		rts		z_depth:        rts
.8aff					xt_digit_question:
.8aff	20 23 d8	jsr $d823	                jsr underflow_1
.8b02	ca		dex		                dex
.8b03	ca		dex		                dex
.8b04	74 00		stz $00,x	                stz 0,x                 ; default flag is failure
.8b06	74 01		stz $01,x	                stz 1,x
.8b08	74 03		stz $03,x	                stz 3,x                 ; paranoid
.8b0a	b5 02		lda $02,x	                lda 2,x
.8b0c	c9 30		cmp #$30	                cmp #'0'
.8b0e	90 23		bcc $8b33	                bcc _done               ; failure flag already set
.8b10	c9 3a		cmp #$3a	                cmp #'9'+1               ; this is actually ":"
.8b12	90 12		bcc $8b26	                bcc _checkbase
.8b14	c9 41		cmp #$41	                cmp #'A'
.8b16	90 1b		bcc $8b33	                bcc _done               ; failure flag is already set
.8b18	c9 61		cmp #$61	                cmp #'a'
.8b1a	90 07		bcc $8b23	                bcc _case_done          ; not lower case, too low
.8b1c	c9 7b		cmp #$7b	                cmp #'z'+1
.8b1e	b0 03		bcs $8b23	                bcs _case_done          ; not lower case, too high
.8b20	18		clc		                clc                     ; just right
.8b21	69 e0		adc #$e0	                adc #$e0                ; offset to upper case (wraps)
.8b23					_case_done:
.8b23	38		sec		                sec
.8b24	e9 07		sbc #$07	                sbc #7                  ; fall through to _checkbase
.8b26					_checkbase:
.8b26	38		sec		                sec
.8b27	e9 30		sbc #$30	                sbc #'0'                 ; this is also the conversion step
.8b29	c5 18		cmp $18		                cmp base
.8b2b	b0 06		bcs $8b33	                bcs _done               ; already have false flag
.8b2d	95 02		sta $02,x	                sta 2,x                 ; put number in NOS
.8b2f	d6 00		dec $00,x	                dec 0,x                 ; set success flag
.8b31	d6 01		dec $01,x	                dec 1,x
.8b33					_done:
.8b33					z_digit_question:
.8b33	60		rts		                rts
.8b34					xt_disasm:
.8b34	20 28 d8	jsr $d828	                jsr underflow_2
.8b37	20 cb ac	jsr $accb	                jsr disassembler
.8b3a	60		rts		z_disasm:       rts
.8b3b					xt_dnegate:
.8b3b	20 28 d8	jsr $d828	                jsr underflow_2 ; double number
.8b3e	a0 00		ldy #$00	     		ldy #0
.8b40	38		sec		                sec
.8b41	98		tya		                tya
.8b42	f5 02		sbc $02,x	                sbc 2,x         ; LSB of low cell
.8b44	95 02		sta $02,x	                sta 2,x
.8b46	98		tya		                tya
.8b47	f5 03		sbc $03,x	                sbc 3,x         ; MSB of low cell
.8b49	95 03		sta $03,x	                sta 3,x
.8b4b	98		tya		                tya
.8b4c	f5 00		sbc $00,x	                sbc 0,x         ; LSB of high cell
.8b4e	95 00		sta $00,x	                sta 0,x
.8b50	98		tya		                tya
.8b51	f5 01		sbc $01,x	                sbc 1,x         ; MSB of high cell
.8b53	95 01		sta $01,x	                sta 1,x
.8b55	60		rts		z_dnegate:      rts
.8b56					xt_question_do:
.8b56	a9 ff		lda #$ff	                lda #$ff                ; -1 is ?DO, jump to common code
.8b58	85 24		sta $24		                sta tmp1
.8b5a	80 02		bra $8b5e	                bra do_common           ; skip flag for DO
.8b5c					xt_do:
.8b5c	64 24		stz $24		                stz tmp1                ; 0 is DO, drop through to DO_COMMON
.8b5e					do_common:
.8b5e	ca		dex		                dex
.8b5f	ca		dex		                dex
.8b60	a5 00		lda $00		                lda cp
.8b62	95 00		sta $00,x	                sta 0,x                 ; LSB
.8b64	a5 01		lda $01		                lda cp+1
.8b66	95 01		sta $01,x	                sta 1,x                 ; MSB   ( limit start here )
.8b68	a9 05		lda #$05	                lda #5                  ; we don't really care about the value,
.8b6a	a8		tay		                tay                     ; so we use 5 to be tricky
.8b6b					_loop:
.8b6b	91 00		sta ($00),y	                sta (CP),y
.8b6d	88		dey		                dey
.8b6e	10 fb		bpl $8b6b	                bpl _loop
.8b70	1a		inc a		                ina             ; we used 5 as a dummy value, this is why
.8b71	18		clc		                clc
.8b72	65 00		adc $00		                adc CP
.8b74	85 00		sta $00		                sta CP
.8b76	90 02		bcc $8b7a	                bcc +
.8b78	e6 01		inc $01		                inc CP+1
.8b7a					+
.8b7a	a5 24		lda $24		                lda tmp1
.8b7c	f0 17		beq $8b95	                beq _compile_do
.8b7e	a0 14		ldy #$14	                ldy #question_do_runtime_end-question_do_runtime
.8b80	5a		phy		                phy             ; save counter to calculate new CP
.8b81					-
.8b81	b9 db 8b	lda $8bdb,y	                lda question_do_runtime,y
.8b84	91 00		sta ($00),y	                sta (cp),y
.8b86	88		dey		                dey
.8b87	10 f8		bpl $8b81	                bpl -
.8b89	68		pla		                pla             ; retrieve counter
.8b8a	18		clc		                clc
.8b8b	65 00		adc $00		                adc cp
.8b8d	85 00		sta $00		                sta cp
.8b8f	a5 01		lda $01		                lda cp+1
.8b91	69 00		adc #$00	                adc #0          ; only care about carry
.8b93	85 01		sta $01		                sta cp+1        ; fall through to _compile_do
.8b95					_compile_do:
.8b95	a0 24		ldy #$24	                ldy #do_runtime_end-do_runtime  ; counter
.8b97	5a		phy		                phy             ; save counter to calculate new CP
.8b98					-
.8b98	b9 b7 8b	lda $8bb7,y	                lda do_runtime,y
.8b9b	91 00		sta ($00),y	                sta (cp),y
.8b9d	88		dey		                dey
.8b9e	10 f8		bpl $8b98	                bpl -
.8ba0	68		pla		                pla             ; retrieve counter
.8ba1	18		clc		                clc
.8ba2	65 00		adc $00		                adc cp
.8ba4	85 00		sta $00		                sta cp
.8ba6	a5 01		lda $01		                lda cp+1
.8ba8	69 00		adc #$00	                adc #0          ; only care about carry
.8baa	85 01		sta $01		                sta cp+1
.8bac	ca		dex		                dex
.8bad	ca		dex		                dex
.8bae	a5 00		lda $00		                lda CP          ; LSB
.8bb0	95 00		sta $00,x	                sta 0,x
.8bb2	a5 01		lda $01		                lda CP+1        ; MSB
.8bb4	95 01		sta $01,x	                sta 1,x
.8bb6					z_question_do:
.8bb6	60		rts		z_do:           rts
.8bb7					do_runtime:
.8bb7	38		sec		                sec
.8bb8	a9 00		lda #$00	                lda #0
.8bba	f5 02		sbc $02,x	                sbc 2,x         ; LSB of limit
.8bbc	95 02		sta $02,x	                sta 2,x         ; save FUFA for later use
.8bbe	a9 80		lda #$80	                lda #$80
.8bc0	f5 03		sbc $03,x	                sbc 3,x         ; MSB of limit
.8bc2	95 03		sta $03,x	                sta 3,x         ; save FUFA for later use
.8bc4	48		pha		                pha             ; FUFA replaces limit on R stack
.8bc5	b5 02		lda $02,x	                lda 2,x         ; LSB of limit
.8bc7	48		pha		                pha
.8bc8	18		clc		                clc
.8bc9	b5 00		lda $00,x	                lda 0,x         ; LSB of original index
.8bcb	75 02		adc $02,x	                adc 2,x         ; add LSB of FUFA
.8bcd	95 00		sta $00,x	                sta 0,x
.8bcf	b5 01		lda $01,x	                lda 1,x         ; MSB of orginal index
.8bd1	75 03		adc $03,x	                adc 3,x         ; add MSB of FUFA
.8bd3	48		pha		                pha
.8bd4	b5 00		lda $00,x	                lda 0,x         ; LSB of index
.8bd6	48		pha		                pha
.8bd7	e8		inx		                inx
.8bd8	e8		inx		                inx
.8bd9	e8		inx		                inx
.8bda	e8		inx		                inx             ; no RTS because this is copied into code
.8bdb					do_runtime_end:
.8bdb					question_do_runtime:
.8bdb	20 ac a3	jsr $a3ac	                jsr xt_two_dup          ; ( n1 n2 n1 n2 )
.8bde	20 c8 8e	jsr $8ec8	                jsr xt_equal            ; ( -- n1 n2 f )
.8be1	b5 00		lda $00,x	                lda 0,x
.8be3	15 01		ora $01,x	                ora 1,x
.8be5	f0 06		beq $8bed	                beq _do_do
.8be7	8a		txa		                txa
.8be8	18		clc		                clc
.8be9	69 06		adc #$06	                adc #6
.8beb	aa		tax		                tax
.8bec	60		rts		                rts
.8bed					_do_do:
.8bed	e8		inx		                inx             ; clear flag from EQUAL off stack
.8bee	e8		inx		                inx             ; no RTS because this is copied into code
.8bef					question_do_runtime_end:
.8bef					xt_does:
.8bef	a0 8b		ldy #$8b	                ldy #>does_runtime
.8bf1	a9 fe		lda #$fe	                lda #<does_runtime
.8bf3	20 c6 d6	jsr $d6c6	                jsr cmpl_subroutine
.8bf6	a0 d7		ldy #$d7	                ldy #>dodoes
.8bf8	a9 0c		lda #$0c	                lda #<dodoes
.8bfa	20 c6 d6	jsr $d6c6	                jsr cmpl_subroutine
.8bfd	60		rts		z_does:         rts
.8bfe					does_runtime:
.8bfe	7a		ply		                ply             ; LSB
.8bff	68		pla		                pla             ; MSB
.8c00	c8		iny		                iny
.8c01	d0 01		bne $8c04	                bne +
.8c03	1a		inc a		                ina
.8c04					+
.8c04	84 24		sty $24		                sty tmp1
.8c06	85 25		sta $25		                sta tmp1+1
.8c08	20 65 d7	jsr $d765	                jsr current_to_dp   ; Grab the DP from the CURRENT wordlist.
.8c0b	a5 02		lda $02		                lda dp
.8c0d	18		clc		                clc
.8c0e	69 04		adc #$04	                adc #4
.8c10	85 26		sta $26		                sta tmp2
.8c12	a5 03		lda $03		                lda dp+1
.8c14	69 00		adc #$00	                adc #0          ; we only care about the carry
.8c16	85 27		sta $27		                sta tmp2+1
.8c18	b2 26		lda ($26)	                lda (tmp2)
.8c1a	18		clc		                clc
.8c1b	69 01		adc #$01	                adc #1
.8c1d	85 28		sta $28		                sta tmp3
.8c1f	a0 01		ldy #$01	                ldy #1
.8c21	b1 26		lda ($26),y	                lda (tmp2),y
.8c23	69 00		adc #$00	                adc #0          ; we only care about the carry
.8c25	85 29		sta $29		                sta tmp3+1
.8c27	a5 24		lda $24		                lda tmp1        ; LSB
.8c29	92 28		sta ($28)	                sta (tmp3)
.8c2b	a5 25		lda $25		                lda tmp1+1
.8c2d	91 28		sta ($28),y	                sta (tmp3),y    ; Y is still 1
.8c2f	60		rts		                rts
.8c30					xt_dot:
.8c30	20 23 d8	jsr $d823	                jsr underflow_1
.8c33	20 a9 8d	jsr $8da9	                jsr xt_dup                      ; ( n n )
.8c36	20 39 81	jsr $8139	                jsr xt_abs                      ; ( n u )
.8c39	20 9c a7	jsr $a79c	                jsr xt_zero                     ; ( n u 0 )
.8c3c	20 54 93	jsr $9354	                jsr xt_less_number_sign         ; ( n u 0 )
.8c3f	20 d8 97	jsr $97d8	                jsr xt_number_sign_s            ; ( n ud )
.8c42	20 51 9b	jsr $9b51	                jsr xt_rot                      ; ( ud n )
.8c45	20 e1 9f	jsr $9fe1	                jsr xt_sign                     ; ( ud )
.8c48	20 b6 97	jsr $97b6	                jsr xt_number_sign_greater      ; ( addr u )
.8c4b	20 f7 a4	jsr $a4f7	                jsr xt_type
.8c4e	20 18 a1	jsr $a118	                jsr xt_space
.8c51	60		rts		z_dot:          rts
.8c52					xt_dot_paren:
.8c52	ca		dex		                dex
.8c53	ca		dex		                dex
.8c54	a9 29		lda #$29	                lda #41     ; Right parenthesis
.8c56	95 00		sta $00,x	                sta 0,x
.8c58	74 01		stz $01,x	                stz 1,x
.8c5a	20 34 99	jsr $9934	                jsr xt_parse
.8c5d	20 f7 a4	jsr $a4f7	                jsr xt_type
.8c60	60		rts		z_dot_paren:    rts
.8c61					xt_dot_quote:
.8c61	20 49 9d	jsr $9d49	                jsr xt_s_quote
.8c64	a0 a4		ldy #$a4	                ldy #>xt_type
.8c66	a9 f7		lda #$f7	                lda #<xt_type
.8c68	20 c6 d6	jsr $d6c6	                jsr cmpl_subroutine
.8c6b	60		rts		z_dot_quote:    rts
.8c6c					xt_dot_r:
.8c6c	20 28 d8	jsr $d828	                jsr underflow_2
.8c6f	20 64 a3	jsr $a364	                jsr xt_to_r
.8c72	20 a9 8d	jsr $8da9	                jsr xt_dup
.8c75	20 39 81	jsr $8139	                jsr xt_abs
.8c78	20 9c a7	jsr $a79c	                jsr xt_zero
.8c7b	20 54 93	jsr $9354	                jsr xt_less_number_sign
.8c7e	20 d8 97	jsr $97d8	                jsr xt_number_sign_s
.8c81	20 51 9b	jsr $9b51	                jsr xt_rot
.8c84	20 e1 9f	jsr $9fe1	                jsr xt_sign
.8c87	20 b6 97	jsr $97b6	                jsr xt_number_sign_greater
.8c8a	20 8c 9a	jsr $9a8c	                jsr xt_r_from
.8c8d	20 8d 98	jsr $988d	                jsr xt_over
.8c90	20 4a 95	jsr $954a	                jsr xt_minus
.8c93	20 1e a1	jsr $a11e	                jsr xt_spaces
.8c96	20 f7 a4	jsr $a4f7	                jsr xt_type
.8c99	60		rts		z_dot_r:        rts
.8c9a					xt_dot_s:
.8c9a	20 f0 8a	jsr $8af0	                jsr xt_depth    ; ( -- u )
.8c9d	a9 3c		lda #$3c	                lda #$3c        ; ASCII for "<"
.8c9f	20 f0 8d	jsr $8df0	                jsr emit_a
.8ca2	b5 00		lda $00,x	                lda 0,x
.8ca4	48		pha		                pha
.8ca5	ca		dex		                dex             ; DUP
.8ca6	ca		dex		                dex
.8ca7	95 00		sta $00,x	                sta 0,x
.8ca9	74 01		stz $01,x	                stz 1,x
.8cab	20 6f d8	jsr $d86f	                jsr print_u
.8cae	a9 3e		lda #$3e	                lda #$3e        ; ASCII for ">"
.8cb0	20 f0 8d	jsr $8df0	                jsr emit_a
.8cb3	a9 20		lda #$20	                lda #AscSP      ; ASCII for SPACE
.8cb5	20 f0 8d	jsr $8df0	                jsr emit_a
.8cb8	e8		inx		                inx
.8cb9	e8		inx		                inx
.8cba	e0 78		cpx #$78	                cpx #dsp0
.8cbc	f0 1e		beq $8cdc	                beq _done
.8cbe					_have_stack:
.8cbe	7a		ply		                ply
.8cbf	a9 77		lda #$77	                lda #dsp0-1     ; go up one to avoid garbage
.8cc1	85 28		sta $28		                sta tmp3
.8cc3	64 29		stz $29		                stz tmp3+1      ; must be zero page on the 65c02
.8cc5					_loop:
.8cc5	ca		dex		                dex
.8cc6	ca		dex		                dex
.8cc7	b2 28		lda ($28)	                lda (tmp3)
.8cc9	95 01		sta $01,x	                sta 1,x
.8ccb	c6 28		dec $28		                dec tmp3
.8ccd	b2 28		lda ($28)	                lda (tmp3)
.8ccf	95 00		sta $00,x	                sta 0,x
.8cd1	c6 28		dec $28		                dec tmp3
.8cd3	5a		phy		                phy
.8cd4	20 30 8c	jsr $8c30	                jsr xt_dot
.8cd7	7a		ply		                ply
.8cd8	88		dey		                dey
.8cd9	d0 ea		bne $8cc5	                bne _loop
.8cdb	48		pha		                pha             ; dummy to balance stack
.8cdc					_done:
.8cdc	68		pla		                pla
.8cdd	60		rts		z_dot_s:        rts
.8cde					xt_d_dot:
.8cde	20 28 d8	jsr $d828	                jsr underflow_2
.8ce1	20 81 a3	jsr $a381	                jsr xt_tuck
.8ce4	20 80 8a	jsr $8a80	                jsr xt_dabs
.8ce7	20 54 93	jsr $9354	                jsr xt_less_number_sign
.8cea	20 d8 97	jsr $97d8	                jsr xt_number_sign_s
.8ced	20 51 9b	jsr $9b51	                jsr xt_rot
.8cf0	20 e1 9f	jsr $9fe1	                jsr xt_sign
.8cf3	20 b6 97	jsr $97b6	                jsr xt_number_sign_greater
.8cf6	20 f7 a4	jsr $a4f7	                jsr xt_type
.8cf9	20 18 a1	jsr $a118	                jsr xt_space
.8cfc	60		rts		z_d_dot:        rts
.8cfd					xt_d_dot_r:
.8cfd	20 2d d8	jsr $d82d	                jsr underflow_3
.8d00	20 64 a3	jsr $a364	                jsr xt_to_r
.8d03	20 81 a3	jsr $a381	                jsr xt_tuck
.8d06	20 80 8a	jsr $8a80	                jsr xt_dabs
.8d09	20 54 93	jsr $9354	                jsr xt_less_number_sign
.8d0c	20 d8 97	jsr $97d8	                jsr xt_number_sign_s
.8d0f	20 51 9b	jsr $9b51	                jsr xt_rot
.8d12	20 e1 9f	jsr $9fe1	                jsr xt_sign
.8d15	20 b6 97	jsr $97b6	                jsr xt_number_sign_greater
.8d18	20 8c 9a	jsr $9a8c	                jsr xt_r_from
.8d1b	20 8d 98	jsr $988d	                jsr xt_over
.8d1e	20 4a 95	jsr $954a	                jsr xt_minus
.8d21	20 1e a1	jsr $a11e	                jsr xt_spaces
.8d24	20 f7 a4	jsr $a4f7	                jsr xt_type
.8d27	60		rts		z_d_dot_r:      rts
.8d28					xt_drop:
.8d28	20 23 d8	jsr $d823	                jsr underflow_1
.8d2b	e8		inx		                inx
.8d2c	e8		inx		                inx
.8d2d	60		rts		z_drop:         rts
.8d2e					xt_dump:
.8d2e	20 28 d8	jsr $d828	                jsr underflow_2
.8d31					_row:
.8d31	a0 10		ldy #$10	                ldy #16
.8d33	64 26		stz $26		                stz tmp2
.8d35	20 5d 89	jsr $895d	                jsr xt_cr
.8d38	b5 03		lda $03,x	                lda 3,x
.8d3a	20 33 d7	jsr $d733	                jsr byte_to_ascii
.8d3d	b5 02		lda $02,x	                lda 2,x
.8d3f	20 33 d7	jsr $d733	                jsr byte_to_ascii
.8d42	20 18 a1	jsr $a118	                jsr xt_space
.8d45	20 18 a1	jsr $a118	                jsr xt_space
.8d48					_loop:
.8d48	b5 00		lda $00,x	                lda 0,x
.8d4a	15 01		ora $01,x	                ora 1,x
.8d4c	f0 39		beq $8d87	                beq _all_printed
.8d4e	a1 02		lda ($02,x)	                lda (2,x)
.8d50	48		pha		                pha                     ; byte_to_ascii destroys A
.8d51	20 33 d7	jsr $d733	                jsr byte_to_ascii
.8d54	20 18 a1	jsr $a118	                jsr xt_space
.8d57	68		pla		                pla
.8d58	20 09 d8	jsr $d809	                jsr is_printable
.8d5b	b0 02		bcs $8d5f	                bcs _printable
.8d5d	a9 2e		lda #$2e	                lda #'.'                 ; Print dot if not printable
.8d5f					_printable:
.8d5f	5a		phy		                phy                     ; save counter
.8d60	a4 26		ldy $26		                ldy tmp2
.8d62	91 00		sta ($00),y	                sta (cp),y
.8d64	e6 26		inc $26		                inc tmp2
.8d66	7a		ply		                ply
.8d67	c0 09		cpy #$09	                cpy #9
.8d69	d0 03		bne $8d6e	                bne _next_char
.8d6b	20 18 a1	jsr $a118	                jsr xt_space
.8d6e					_next_char:
.8d6e	f6 02		inc $02,x	                inc 2,x
.8d70	d0 02		bne $8d74	                bne _counter
.8d72	f6 03		inc $03,x	                inc 3,x
.8d74					_counter:
.8d74	b5 00		lda $00,x	                lda 0,x
.8d76	d0 02		bne $8d7a	                bne +
.8d78	d6 01		dec $01,x	                dec 1,x
.8d7a					+
.8d7a	d6 00		dec $00,x	                dec 0,x
.8d7c	88		dey		                dey
.8d7d	d0 c9		bne $8d48	                bne _loop               ; next byte
.8d7f	20 18 a1	jsr $a118	                jsr xt_space
.8d82	20 95 8d	jsr $8d95	                jsr dump_print_ascii
.8d85	80 aa		bra $8d31	                bra _row                ; new row
.8d87					_all_printed:
.8d87	a5 26		lda $26		                lda tmp2
.8d89	f0 06		beq $8d91	                beq _done
.8d8b	20 18 a1	jsr $a118	                jsr xt_space
.8d8e	20 95 8d	jsr $8d95	                jsr dump_print_ascii
.8d91					_done:
.8d91	20 a4 a3	jsr $a3a4	                jsr xt_two_drop         ; one byte less than 4x INX
.8d94	60		rts		z_dump:         rts
.8d95					dump_print_ascii:
.8d95	a0 00		ldy #$00	                ldy #0
.8d97					_ascii_loop:
.8d97	b1 00		lda ($00),y	                lda (cp),y
.8d99	20 f0 8d	jsr $8df0	                jsr emit_a
.8d9c	c8		iny		                iny
.8d9d	c0 08		cpy #$08	                cpy #8
.8d9f	d0 03		bne $8da4	                bne +
.8da1	20 18 a1	jsr $a118	                jsr xt_space
.8da4					+
.8da4	c6 26		dec $26		                dec tmp2
.8da6	d0 ef		bne $8d97	                bne _ascii_loop
.8da8	60		rts		                rts
.8da9					xt_dup:
.8da9	20 23 d8	jsr $d823	                jsr underflow_1
.8dac	ca		dex		                dex
.8dad	ca		dex		                dex
.8dae	b5 02		lda $02,x	                lda 2,x         ; LSB
.8db0	95 00		sta $00,x	                sta 0,x
.8db2	b5 03		lda $03,x	                lda 3,x         ; MSB
.8db4	95 01		sta $01,x	                sta 1,x
.8db6	60		rts		z_dup:          rts
.8db7					xt_ed:
.8db7	20 76 b5	jsr $b576	                jsr ed6502      ; kept in separate file
.8dba	60		rts		z_ed:           rts
.8dbb					xt_else:
.8dbb					xt_endof:
.8dbb	a0 8d		ldy #$8d	                ldy #>branch_runtime
.8dbd	a9 d5		lda #$d5	                lda #<branch_runtime
.8dbf	20 c6 d6	jsr $d6c6	                jsr cmpl_subroutine
.8dc2	20 6c 91	jsr $916c	                jsr xt_here
.8dc5	20 9c a7	jsr $a79c	                jsr xt_zero
.8dc8	20 68 87	jsr $8768	                jsr xt_comma
.8dcb	20 6c 91	jsr $916c	                jsr xt_here
.8dce	20 51 9b	jsr $9b51	                jsr xt_rot
.8dd1	20 81 a1	jsr $a181	                jsr xt_store
.8dd4					z_else:
.8dd4					z_endof:
.8dd4	60		rts		                rts
.8dd5					branch_runtime:
.8dd5	68		pla		                pla
.8dd6	85 22		sta $22		                sta tmpbranch
.8dd8	68		pla		                pla
.8dd9	85 23		sta $23		                sta tmpbranch+1
.8ddb	a0 01		ldy #$01	                ldy #1
.8ddd	b1 22		lda ($22),y	                lda (tmpbranch),y  ; LSB
.8ddf	85 24		sta $24		                sta tmp1
.8de1	c8		iny		                iny
.8de2	b1 22		lda ($22),y	                lda (tmpbranch),y  ; MSB
.8de4	85 25		sta $25		                sta tmp1+1
.8de6	6c 24 00	jmp ($0024)	                jmp (tmp1)
.8de9					xt_emit:
.8de9	20 23 d8	jsr $d823	                jsr underflow_1
.8dec	b5 00		lda $00,x	                lda 0,x
.8dee	e8		inx		                inx
.8def	e8		inx		                inx
.8df0					emit_a:
.8df0	6c 10 00	jmp ($0010)	                jmp (output)            ; JSR/RTS
.8df3					z_emit:
.8df3					xt_empty_buffers:
.8df3	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.8df5	a9 00		lda #$00	                lda #0
.8df7	91 1e		sta ($1e),y	                sta (up),y      ; Only LSB is used.
.8df9					z_empty_buffers:
.8df9	60		rts		                rts
.8dfa					xt_endcase:
.8dfa	a0 8d		ldy #$8d	                ldy #>xt_drop
.8dfc	a9 28		lda #$28	                lda #<xt_drop
.8dfe	20 c6 d6	jsr $d6c6	                jsr cmpl_subroutine
.8e01					_endcase_loop:
.8e01	b5 00		lda $00,x	                lda 0,x
.8e03	15 01		ora $01,x	                ora 1,x
.8e05	f0 05		beq $8e0c	                beq _done
.8e07	20 b6 a1	jsr $a1b6	                jsr xt_then
.8e0a	80 f5		bra $8e01	                bra _endcase_loop
.8e0c					_done:
.8e0c	e8		inx		                inx
.8e0d	e8		inx		                inx
.8e0e	60		rts		z_endcase:      rts
.8e0f					xt_environment_q:
.8e0f	20 23 d8	jsr $d823	                jsr underflow_1
.8e12	a0 00		ldy #$00	                ldy #00                 ; counter for table
.8e14	5a		phy		                phy
.8e15					_table_loop:
.8e15	20 ac a3	jsr $a3ac	                jsr xt_two_dup          ; ( addr u addr u ) 2DUP does not use Y
.8e18	ca		dex		                dex
.8e19	ca		dex		                dex                     ; ( addr u addr u ? )
.8e1a	b9 8c 8e	lda $8e8c,y	                lda env_table_single,y
.8e1d	95 00		sta $00,x	                sta 0,x
.8e1f	c8		iny		                iny
.8e20	b9 8c 8e	lda $8e8c,y	                lda env_table_single,y
.8e23	95 01		sta $01,x	                sta 1,x                 ; ( addr u addr u addr-t )
.8e25	c8		iny		                iny
.8e26	15 00		ora $00,x	                ora 0,x
.8e28	f0 4d		beq $8e77	                beq _table_done
.8e2a	5a		phy		                phy                     ; save Y, which is used by COUNT
.8e2b	20 49 89	jsr $8949	                jsr xt_count            ; ( addr u addr u addr-s u-s )
.8e2e	20 82 87	jsr $8782	                jsr xt_compare          ; ( addr u f )
.8e31	7a		ply		                ply
.8e32	b5 00		lda $00,x	                lda 0,x
.8e34	15 01		ora $01,x	                ora 1,x
.8e36	f0 04		beq $8e3c	                beq _got_result
.8e38	e8		inx		                inx                     ; DROP, now ( addr u )
.8e39	e8		inx		                inx
.8e3a	80 d9		bra $8e15	                bra _table_loop
.8e3c					_got_result:
.8e3c	e8		inx		                inx                     ; drop flag, now ( addr u )
.8e3d	e8		inx		                inx
.8e3e	88		dey		                dey                     ; go back to index we had
.8e3f	88		dey		                dey
.8e40	68		pla		                pla
.8e41	d0 0d		bne $8e50	                bne _double_result
.8e43	b9 aa 8e	lda $8eaa,y	                lda env_results_single,y
.8e46	95 02		sta $02,x	                sta 2,x
.8e48	c8		iny		                iny
.8e49	b9 aa 8e	lda $8eaa,y	                lda env_results_single,y
.8e4c	95 03		sta $03,x	                sta 3,x                 ; ( res u )
.8e4e	80 1f		bra $8e6f	                bra _set_flag
.8e50					_double_result:
.8e50	ca		dex		                dex                     ; ( addr u ? )
.8e51	ca		dex		                dex
.8e52	98		tya		                tya
.8e53	38		sec		                sec
.8e54	e9 18		sbc #$18	                sbc #24
.8e56	0a		asl a		                asl
.8e57	a8		tay		                tay
.8e58	b9 c0 8e	lda $8ec0,y	                lda env_results_double,y
.8e5b	95 02		sta $02,x	                sta 2,x
.8e5d	c8		iny		                iny
.8e5e	b9 c0 8e	lda $8ec0,y	                lda env_results_double,y
.8e61	95 03		sta $03,x	                sta 3,x                 ; ( res u ? )
.8e63	c8		iny		                iny
.8e64	b9 c0 8e	lda $8ec0,y	                lda env_results_double,y
.8e67	95 04		sta $04,x	                sta 4,x
.8e69	c8		iny		                iny
.8e6a	b9 c0 8e	lda $8ec0,y	                lda env_results_double,y
.8e6d	95 05		sta $05,x	                sta 5,x                 ; ( res res ? )
.8e6f					_set_flag:
.8e6f	a9 ff		lda #$ff	                lda #$ff
.8e71	95 00		sta $00,x	                sta 0,x
.8e73	95 01		sta $01,x	                sta 1,x                 ; ( res f )
.8e75	80 14		bra $8e8b	                bra _done
.8e77					_table_done:
.8e77	68		pla		                pla
.8e78	d0 09		bne $8e83	                bne _no_match
.8e7a	1a		inc a		                ina
.8e7b	48		pha		                pha
.8e7c	8a		txa		                txa
.8e7d	18		clc		                clc
.8e7e	69 06		adc #$06	                adc #6                  ; skip six bytes
.8e80	aa		tax		                tax                     ; ( addr u )
.8e81	80 92		bra $8e15	                bra _table_loop
.8e83					_no_match:
.8e83	8a		txa		                txa
.8e84	18		clc		                clc
.8e85	69 0a		adc #$0a	                adc #10
.8e87	aa		tax		                tax                     ; ( addr ) - not ( 0 ) !
.8e88	20 73 8f	jsr $8f73	                jsr xt_false
.8e8b					_done:
.8e8b					z_environment_q:
.8e8b	60		rts		                rts
.8e8c					env_table_single:
>8e8c	46 d6 56 d6 5c d6 61 d6		        .word envs_cs, envs_hold, envs_pad, envs_aub, envs_floored
>8e94	73 d6
>8e96	7b d6 84 d6 8a d6 90 d6		        .word envs_max_char, envs_max_n, envs_max_u, envs_rsc
>8e9e	a3 d6 af d6 00 00		        .word envs_sc, envs_wl, 0000
.8ea4					env_table_double:
>8ea4	b9 d6 bf d6 00 00		        .word envs_max_d, envs_max_ud, 0000
.8eaa					env_results_single:
>8eaa	ff 7f				        .word $7FFF     ; /COUNTED-STRING
>8eac	ff 00				        .word $00FF     ; /HOLD
>8eae	54 00				        .word $0054     ; /PAD (this is 84 decimal)
>8eb0	08 00				        .word $0008     ; ADDRESS-UNIT-BITS (keep "$" to avoid octal!)
>8eb2	00 00				        .word 0000      ; FLOORED ("FALSE", we have symmetric)
>8eb4	ff 00				        .word $00FF     ; MAX-CHAR
>8eb6	ff 7f				        .word $7FFF     ; MAX-N
>8eb8	ff ff				        .word $FFFF     ; MAX-U
>8eba	80 00				        .word $0080     ; RETURN-STACK-CELLS
>8ebc	20 00				        .word $0020     ; STACK-CELLS (from definitions.asm)
>8ebe	09 00				        .word $0009     ; WORDLISTS
.8ec0					env_results_double:
>8ec0	ff 7f ff ff			        .word $7FFF, $FFFF      ; MAX-D
>8ec4	ff ff ff ff			        .word $FFFF, $FFFF      ; MAX-UD
.8ec8					xt_equal:
.8ec8	20 28 d8	jsr $d828	                jsr underflow_2
.8ecb	b5 00		lda $00,x	                lda 0,x                 ; LSB
.8ecd	d5 02		cmp $02,x	                cmp 2,x
.8ecf	d0 0a		bne $8edb	                bne _false
.8ed1	b5 01		lda $01,x	                lda 1,x                 ; MSB
.8ed3	d5 03		cmp $03,x	                cmp 3,x
.8ed5	d0 04		bne $8edb	                bne _false
.8ed7	a9 ff		lda #$ff	                lda #$ff
.8ed9	80 02		bra $8edd	                bra _done
.8edb	a9 00		lda #$00	_false:         lda #0                  ; drop thru to done
.8edd	95 02		sta $02,x	_done:          sta 2,x
.8edf	95 03		sta $03,x	                sta 3,x
.8ee1	e8		inx		                inx
.8ee2	e8		inx		                inx
.8ee3	60		rts		z_equal:        rts
.8ee4					xt_blank:
.8ee4	ca		dex		                dex
.8ee5	ca		dex		                dex
.8ee6	a9 20		lda #$20	                lda #AscSP
.8ee8	95 00		sta $00,x	                sta 0,x
.8eea	74 01		stz $01,x	                stz 1,x
.8eec	80 06		bra $8ef4	                bra xt_fill     ; skip over code for ERASE
.8eee					xt_erase:
.8eee	ca		dex		                dex
.8eef	ca		dex		                dex
.8ef0	74 00		stz $00,x	                stz 0,x
.8ef2	74 01		stz $01,x	                stz 1,x
.8ef4					xt_fill:
.8ef4	20 2d d8	jsr $d82d	                jsr underflow_3
.8ef7	b5 04		lda $04,x	                lda 4,x         ; LSB
.8ef9	85 24		sta $24		                sta tmp1
.8efb	b5 05		lda $05,x	                lda 5,x
.8efd	85 25		sta $25		                sta tmp1+1
.8eff	b5 02		lda $02,x	                lda 2,x
.8f01	85 26		sta $26		                sta tmp2
.8f03	b5 03		lda $03,x	                lda 3,x
.8f05	85 27		sta $27		                sta tmp2+1
.8f07	b5 00		lda $00,x	                lda 0,x
.8f09	a8		tay		                tay
.8f0a					_loop:
.8f0a	a9 7f		lda #$7f	                lda #>ram_end           ; MSB
.8f0c	c5 25		cmp $25		                cmp tmp1+1
.8f0e	90 21		bcc $8f31	                bcc _done               ; RAM_END < TMP1, so leave
.8f10	d0 06		bne $8f18	                bne _check_counter      ; RAM_END is not smaller and not equal
.8f12	a9 ff		lda #$ff	                lda #<ram_end           ; LSB, because MSBs were equal
.8f14	c5 24		cmp $24		                cmp tmp1
.8f16	90 19		bcc $8f31	                bcc _done               ; RAM_END < TMP1, so leave
.8f18					_check_counter:
.8f18	a5 26		lda $26		                lda tmp2
.8f1a	05 27		ora $27		                ora tmp2+1
.8f1c	f0 13		beq $8f31	                beq _done
.8f1e	98		tya		                tya
.8f1f	92 24		sta ($24)	                sta (tmp1)
.8f21	a5 26		lda $26		                lda tmp2
.8f23	d0 02		bne $8f27	                bne +
.8f25	c6 27		dec $27		                dec tmp2+1
.8f27	c6 26		dec $26		+               dec tmp2
.8f29	e6 24		inc $24		                inc tmp1
.8f2b	d0 dd		bne $8f0a	                bne _loop
.8f2d	e6 25		inc $25		                inc tmp1+1
.8f2f	80 d9		bra $8f0a	                bra _loop
.8f31					_done:
.8f31	8a		txa		                txa
.8f32	18		clc		                clc
.8f33	69 06		adc #$06	                adc #6
.8f35	aa		tax		                tax
.8f36					z_blank:
.8f36					z_erase:
.8f36	60		rts		z_fill:         rts
.8f37					xt_execute:
.8f37	20 23 d8	jsr $d823	                jsr underflow_1
.8f3a	20 3e 8f	jsr $8f3e	                jsr doexecute   ; do not combine to JMP (native coding)
.8f3d	60		rts		z_execute:      rts
.8f3e					doexecute:
.8f3e	b5 00		lda $00,x	                lda 0,x
.8f40	85 0e		sta $0e		                sta ip
.8f42	b5 01		lda $01,x	                lda 1,x
.8f44	85 0f		sta $0f		                sta ip+1
.8f46	e8		inx		                inx
.8f47	e8		inx		                inx
.8f48	6c 0e 00	jmp ($000e)	                jmp (ip)
.8f4b					xt_execute_parsing:
.8f4b	20 2d d8	jsr $d82d	                jsr underflow_3
.8f4e	20 5c 92	jsr $925c	                jsr xt_input_to_r       ; save normal input for later
.8f51	20 68 96	jsr $9668	                jsr xt_not_rote         ; -ROT ( xt addr u )
.8f54	b5 00		lda $00,x	                lda 0,x                 ; TOS is new ciblen
.8f56	85 0a		sta $0a		                sta ciblen
.8f58	b5 01		lda $01,x	                lda 1,x
.8f5a	85 0b		sta $0b		                sta ciblen+1
.8f5c	b5 02		lda $02,x	                lda 2,x                 ; NOS is new cib
.8f5e	85 08		sta $08		                sta cib
.8f60	b5 03		lda $03,x	                lda 3,x
.8f62	85 09		sta $09		                sta cib+1
.8f64	64 0c		stz $0c		                stz toin                ; Set >IN to zero
.8f66	64 0d		stz $0d		                stz toin+1
.8f68	20 a4 a3	jsr $a3a4	                jsr xt_two_drop         ; 2DROP ( xt )
.8f6b	20 37 8f	jsr $8f37	                jsr xt_execute
.8f6e	20 9d 9a	jsr $9a9d	                jsr xt_r_to_input
.8f71					z_execute_parsing:
.8f71	60		rts		                rts
.8f72					xt_exit:
.8f72	60		rts		                rts             ; keep before z_exit
.8f73					z_exit:
.8f73					xt_false:
.8f73	ca		dex		                dex
.8f74	ca		dex		                dex
.8f75	74 00		stz $00,x	                stz 0,x
.8f77	74 01		stz $01,x	                stz 1,x
.8f79	60		rts		z_false:        rts
.8f7a					xt_fetch:
.8f7a	20 23 d8	jsr $d823	                jsr underflow_1
.8f7d	a1 00		lda ($00,x)	                lda (0,x)               ; LSB
.8f7f	a8		tay		                tay
.8f80	f6 00		inc $00,x	                inc 0,x
.8f82	d0 02		bne $8f86	                bne +
.8f84	f6 01		inc $01,x	                inc 1,x
.8f86					+
.8f86	a1 00		lda ($00,x)	                lda (0,x)               ; MSB
.8f88	95 01		sta $01,x	                sta 1,x
.8f8a	94 00		sty $00,x	                sty 0,x
.8f8c	60		rts		z_fetch:        rts
.8f8d					xt_find:
.8f8d	20 23 d8	jsr $d823	                jsr underflow_1
.8f90	b5 01		lda $01,x	                lda 1,x                 ; MSB
.8f92	48		pha		                pha
.8f93	b5 00		lda $00,x	                lda 0,x                 ; LSB
.8f95	48		pha		                pha
.8f96	20 49 89	jsr $8949	                jsr xt_count            ; ( caddr -- addr u )
.8f99	20 d5 8f	jsr $8fd5	                jsr xt_find_name        ; ( addr u -- nt | 0 )
.8f9c	b5 00		lda $00,x	                lda 0,x
.8f9e	15 01		ora $01,x	                ora 1,x
.8fa0	d0 0b		bne $8fad	                bne _found_word
.8fa2	20 73 8f	jsr $8f73	                jsr xt_false            ; ( 0 0 )
.8fa5	68		pla		                pla                     ; LSB of address
.8fa6	95 02		sta $02,x	                sta 2,x
.8fa8	68		pla		                pla
.8fa9	95 03		sta $03,x	                sta 3,x                 ; MSB of address
.8fab	80 27		bra $8fd4	                bra _done               ; ( addr 0 )
.8fad					_found_word:
.8fad	68		pla		                pla
.8fae	68		pla		                pla
.8faf	20 a9 8d	jsr $8da9	                jsr xt_dup              ; ( nt nt )
.8fb2	20 db 95	jsr $95db	                jsr xt_name_to_int      ; ( nt xt )
.8fb5	20 a2 a1	jsr $a1a2	                jsr xt_swap             ; ( xt nt )
.8fb8	a0 00		ldy #$00	                ldy #0                  ; Prepare flag
.8fba	f6 00		inc $00,x	                inc 0,x
.8fbc	d0 02		bne $8fc0	                bne +
.8fbe	f6 01		inc $01,x	                inc 1,x                 ; ( xt nt+1 )
.8fc0					+
.8fc0	a1 00		lda ($00,x)	                lda (0,x)               ; ( xt char )
.8fc2	29 04		and #$04	                and #IM
.8fc4	d0 08		bne $8fce	                bne _immediate          ; bit set, we're immediate
.8fc6	a9 ff		lda #$ff	                lda #$FF                ; We're not immediate, return -1
.8fc8	95 00		sta $00,x	                sta 0,x
.8fca	95 01		sta $01,x	                sta 1,x
.8fcc	80 06		bra $8fd4	                bra _done
.8fce					_immediate:
.8fce	a9 01		lda #$01	                lda #1                  ; We're immediate, return 1
.8fd0	95 00		sta $00,x	                sta 0,x
.8fd2	74 01		stz $01,x	                stz 1,x
.8fd4					_done:
.8fd4	60		rts		z_find:         rts
.8fd5					xt_find_name:
.8fd5	20 28 d8	jsr $d828	                jsr underflow_2
.8fd8	b5 00		lda $00,x	                lda 0,x
.8fda	15 01		ora $01,x	                ora 1,x
.8fdc	d0 03		bne $8fe1	                bne _nonempty
.8fde	4c 7a 90	jmp $907a	                jmp _fail_done
.8fe1					_nonempty:
.8fe1	64 28		stz $28		                stz tmp3                ; Start at the beginning
.8fe3					_wordlist_loop:
.8fe3	a0 1e		ldy #$1e	                ldy #num_order_offset   ; Compare to byte variable #ORDER
.8fe5	a5 28		lda $28		                lda tmp3
.8fe7	d1 1e		cmp ($1e),y	                cmp (up),y              ; Check to see if we are done
.8fe9	d0 03		bne $8fee	                bne _have_string
.8feb	4c 7a 90	jmp $907a	                jmp _fail_done
.8fee					_have_string:
.8fee	18		clc		                clc             ; SEARCH-ORDER is array of bytes.
.8fef	69 1f		adc #$1f	                adc #search_order_offset
.8ff1	a8		tay		                tay
.8ff2	b1 1e		lda ($1e),y	                lda (up),y      ; Get the id byte, which is the offset
.8ff4	0a		asl a		                asl                     ; Turn offset into cells offset.
.8ff5	18		clc		                clc
.8ff6	69 06		adc #$06	                adc #wordlists_offset
.8ff8	a8		tay		                tay
.8ff9	b1 1e		lda ($1e),y	                lda (up),y
.8ffb	85 24		sta $24		                sta tmp1
.8ffd	c8		iny		                iny
.8ffe	b1 1e		lda ($1e),y	                lda (up),y
.9000	85 25		sta $25		                sta tmp1+1
.9002	b5 02		lda $02,x	                lda 2,x                 ; Address of mystery string
.9004	85 26		sta $26		                sta tmp2
.9006	b5 03		lda $03,x	                lda 3,x
.9008	85 27		sta $27		                sta tmp2+1
.900a					_loop:
.900a	b2 24		lda ($24)	                lda (tmp1)
.900c	d5 00		cmp $00,x	                cmp 0,x
.900e	d0 54		bne $9064	                bne _next_entry
.9010					_compare_string:
.9010	b2 26		lda ($26)	                lda (tmp2)      ; first character of mystery string
.9012	c9 5b		cmp #$5b	                cmp #$5B        ; ASCII '[' (one past Z)
.9014	b0 07		bcs $901d	                bcs _compare_first
.9016	c9 41		cmp #$41	                cmp #$41        ; ASCII 'A'
.9018	90 03		bcc $901d	                bcc _compare_first
.901a	18		clc		                clc
.901b	69 20		adc #$20	                adc #$20
.901d					_compare_first:
.901d	a0 08		ldy #$08	                ldy #8          ; Offset in nt to name
.901f	d1 24		cmp ($24),y	                cmp (tmp1),y    ; first character of current word
.9021	d0 41		bne $9064	                bne _next_entry
.9023	b5 00		lda $00,x	                lda 0,x
.9025	3a		dec a		                dea
.9026	f0 2c		beq $9054	                beq _success
.9028	a5 24		lda $24		                lda tmp1
.902a	48		pha		                pha             ; Preserve tmp1 on the return stack.
.902b	18		clc		                clc
.902c	69 08		adc #$08	                adc #8
.902e	85 24		sta $24		                sta tmp1        ; Reusing tmp1 temporarily for string check.
.9030	a5 25		lda $25		                lda tmp1+1
.9032	48		pha		                pha             ; Preserve tmp1+1 on the return stack.
.9033	69 00		adc #$00	                adc #0          ; we only need the carry
.9035	85 25		sta $25		                sta tmp1+1
.9037	b4 00		ldy $00,x	                ldy 0,x         ; index is length of string minus 1
.9039	88		dey		                dey
.903a					_string_loop:
.903a	b1 26		lda ($26),y	                lda (tmp2),y    ; last char of mystery string
.903c	c9 5b		cmp #$5b	                cmp #$5B         ; ASCII '[' (one past Z)
.903e	b0 07		bcs $9047	                bcs _check_char
.9040	c9 41		cmp #$41	                cmp #$41        ; ASCII 'A'
.9042	90 03		bcc $9047	                bcc _check_char
.9044	18		clc		                clc
.9045	69 20		adc #$20	                adc #$20
.9047					_check_char:
.9047	d1 24		cmp ($24),y	                cmp (tmp1),y    ; last char of word we're testing against
.9049	d0 13		bne $905e	                bne _next_entry_tmp1
.904b	88		dey		                dey
.904c	d0 ec		bne $903a	                bne _string_loop
.904e					_success_tmp1:
.904e	68		pla		                pla             ; Restore tmp1 from the return stack.
.904f	85 25		sta $25		                sta tmp1+1
.9051	68		pla		                pla
.9052	85 24		sta $24		                sta tmp1
.9054					_success:
.9054	a5 24		lda $24		                lda tmp1
.9056	95 02		sta $02,x	                sta 2,x
.9058	a5 25		lda $25		                lda tmp1+1
.905a	95 03		sta $03,x	                sta 3,x
.905c	80 20		bra $907e	                bra _done
.905e					_next_entry_tmp1:
.905e	68		pla		                pla             ; Restore tmp1 from the return stack.
.905f	85 25		sta $25		                sta tmp1+1
.9061	68		pla		                pla
.9062	85 24		sta $24		                sta tmp1
.9064					_next_entry:
.9064	a0 02		ldy #$02	                ldy #2
.9066	b1 24		lda ($24),y	                lda (tmp1),y
.9068	48		pha		                pha
.9069	c8		iny		                iny
.906a	b1 24		lda ($24),y	                lda (tmp1),y
.906c	85 25		sta $25		                sta tmp1+1
.906e	68		pla		                pla
.906f	85 24		sta $24		                sta tmp1
.9071	05 25		ora $25		                ora tmp1+1
.9073	d0 95		bne $900a	                bne _loop
.9075	e6 28		inc $28		                inc tmp3
.9077	4c e3 8f	jmp $8fe3	                jmp _wordlist_loop
.907a					_fail_done:
.907a	74 02		stz $02,x	                stz 2,x         ; failure flag
.907c	74 03		stz $03,x	                stz 3,x
.907e					_done:
.907e	e8		inx		                inx
.907f	e8		inx		                inx
.9080	60		rts		z_find_name:    rts
.9081					xt_flush:
.9081	20 b8 9e	jsr $9eb8	                jsr xt_save_buffers
.9084	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.9086	a9 00		lda #$00	                lda #0
.9088	91 1e		sta ($1e),y	                sta (up),y      ; Only LSB is used.
.908a					z_flush:
.908a	60		rts		                rts
.908b					xt_fm_slash_mod:
.908b	20 2d d8	jsr $d82d	                jsr underflow_3
.908e	64 26		stz $26		                stz tmp2        ; default: n is positive
.9090	b5 01		lda $01,x	                lda 1,x         ; MSB of n1
.9092	10 0e		bpl $90a2	                bpl _check_d
.9094	e6 26		inc $26		                inc tmp2        ; set flag to negative for n1
.9096	20 1d 96	jsr $961d	                jsr xt_negate   ; NEGATE
.9099	20 64 a3	jsr $a364	                jsr xt_to_r     ; >R
.909c	20 3b 8b	jsr $8b3b	                jsr xt_dnegate  ; DNEGATE
.909f	20 8c 9a	jsr $9a8c	                jsr xt_r_from   ; R>
.90a2					_check_d:
.90a2	b5 03		lda $03,x	                lda 3,x         ; MSB of high word of d
.90a4	10 0d		bpl $90b3	                bpl _multiply
.90a6	18		clc		                clc
.90a7	b5 00		lda $00,x	                lda 0,x         ; LSB of n1
.90a9	75 02		adc $02,x	                adc 2,x         ; LSB of dh
.90ab	95 02		sta $02,x	                sta 2,x
.90ad	b5 01		lda $01,x	                lda 1,x         ; MSB of n1
.90af	75 03		adc $03,x	                adc 3,x         ; MSB of dh
.90b1	95 03		sta $03,x	                sta 3,x
.90b3					_multiply:
.90b3	20 ae a5	jsr $a5ae	                jsr xt_um_slash_mod     ; ( d n1 -- rem n2 )
.90b6	a5 26		lda $26		                lda tmp2
.90b8	f0 07		beq $90c1	                beq _done
.90ba	e8		inx		                inx             ; pretend that we SWAP
.90bb	e8		inx		                inx
.90bc	20 1d 96	jsr $961d	                jsr xt_negate
.90bf	ca		dex		                dex
.90c0	ca		dex		                dex
.90c1					_done:
.90c1	60		rts		z_fm_slash_mod: rts
.90c2					xt_forth:
.90c2	a0 1f		ldy #$1f	                ldy #search_order_offset
.90c4	a9 00		lda #$00	                lda #0          ; The WID for Forth is 0.
.90c6	91 1e		sta ($1e),y	                sta (up),y
.90c8					z_forth:
.90c8	60		rts		                rts
.90c9					load_evaluate:
.90c9	a9 ff		lda #$ff	                lda #$FF
.90cb	85 24		sta $24		                sta tmp1
.90cd	80 11		bra $90e0	                bra load_evaluate_start
.90cf					xt_evaluate:
.90cf	20 28 d8	jsr $d828	                jsr underflow_2
.90d2	64 24		stz $24		                stz tmp1
.90d4	b5 00		lda $00,x	                lda 0,x
.90d6	15 01		ora $01,x	                ora 1,x
.90d8	d0 06		bne $90e0	                bne evaluate_got_work
.90da	e8		inx		                inx
.90db	e8		inx		                inx
.90dc	e8		inx		                inx
.90dd	e8		inx		                inx
.90de	80 42		bra $9122	                bra evaluate_done
.90e0					load_evaluate_start:
.90e0					evaluate_got_work:
.90e0	a0 01		ldy #$01	                ldy #blk_offset+1
.90e2	b1 1e		lda ($1e),y	                lda (up),y
.90e4	48		pha		                pha
.90e5	88		dey		                dey
.90e6	b1 1e		lda ($1e),y	                lda (up),y
.90e8	48		pha		                pha
.90e9	a5 24		lda $24		                lda tmp1
.90eb	d0 05		bne $90f2	                bne _nozero
.90ed	91 1e		sta ($1e),y	                sta (up),y
.90ef	c8		iny		                iny
.90f0	91 1e		sta ($1e),y	                sta (up),y
.90f2					_nozero:
.90f2	20 5c 92	jsr $925c	                jsr xt_input_to_r
.90f5	a9 ff		lda #$ff	                lda #$ff
.90f7	85 06		sta $06		                sta insrc
.90f9	85 07		sta $07		                sta insrc+1
.90fb	64 0c		stz $0c		                stz toin
.90fd	64 0d		stz $0d		                stz toin+1
.90ff	b5 00		lda $00,x	                lda 0,x
.9101	85 0a		sta $0a		                sta ciblen
.9103	b5 01		lda $01,x	                lda 1,x
.9105	85 0b		sta $0b		                sta ciblen+1
.9107	b5 02		lda $02,x	                lda 2,x
.9109	85 08		sta $08		                sta cib
.910b	b5 03		lda $03,x	                lda 3,x
.910d	85 09		sta $09		                sta cib+1
.910f	e8		inx		                inx             ; A clean stack is a clean mind
.9110	e8		inx		                inx
.9111	e8		inx		                inx
.9112	e8		inx		                inx
.9113	20 8b d7	jsr $d78b	                jsr interpret   ; ( -- )
.9116	20 9d 9a	jsr $9a9d	                jsr xt_r_to_input
.9119	a0 00		ldy #$00	                ldy #blk_offset
.911b	68		pla		                pla
.911c	91 1e		sta ($1e),y	                sta (up),y
.911e	c8		iny		                iny
.911f	68		pla		                pla
.9120	91 1e		sta ($1e),y	                sta (up),y
.9122					evaluate_done:
.9122	60		rts		z_evaluate:     rts
.9123					xt_get_current:
.9123	ca		dex		                dex
.9124	ca		dex		                dex
.9125	a0 04		ldy #$04	                ldy #current_offset
.9127	b1 1e		lda ($1e),y	                lda (up),y
.9129	95 00		sta $00,x	                sta 0,x         ; CURRENT is a byte variable
.912b	74 01		stz $01,x	                stz 1,x         ; so the MSB is zero.
.912d	60		rts		z_get_current:  rts
.912e					xt_get_order:
.912e	a0 1e		ldy #$1e	                ldy #num_order_offset
.9130	b1 1e		lda ($1e),y	                lda (up),y
.9132	85 24		sta $24		                sta tmp1
.9134	f0 16		beq $914c	                beq _done       ; If zero, there are no wordlists.
.9136					_loop:
.9136	c6 24		dec $24		                dec tmp1        ; Count down by bytes.
.9138	a9 1f		lda #$1f	                lda #search_order_offset
.913a	18		clc		                clc
.913b	65 24		adc $24		                adc tmp1
.913d	a8		tay		                tay
.913e	ca		dex		                dex
.913f	ca		dex		                dex
.9140	b1 1e		lda ($1e),y	                lda (up),y
.9142	95 00		sta $00,x	                sta 0,x         ; Search order array is bytes, so
.9144	74 01		stz $01,x	                stz 1,x         ; put a zero in the high byte.
.9146	a9 00		lda #$00	                lda #0
.9148	c5 24		cmp $24		                cmp tmp1
.914a	d0 ea		bne $9136	                bne _loop
.914c					_done:
.914c	ca		dex		                dex
.914d	ca		dex		                dex
.914e	a0 1e		ldy #$1e	                ldy #num_order_offset
.9150	b1 1e		lda ($1e),y	                lda (up),y
.9152	95 00		sta $00,x	                sta 0,x
.9154	74 01		stz $01,x	                stz 1,x         ; We only support 8 wordlists.
.9156	60		rts		z_get_order:    rts
.9157					xt_greater_than:
.9157	20 28 d8	jsr $d828	                jsr underflow_2
.915a	a0 00		ldy #$00	                ldy #0          ; default false
.915c	20 4a d7	jsr $d74a	                jsr compare_16bit
.915f	f0 03		beq $9164	                beq _false
.9161	10 01		bpl $9164	                bpl _false
.9163	88		dey		                dey
.9164					_false:
.9164	98		tya		                tya
.9165	e8		inx		                inx
.9166	e8		inx		                inx
.9167	95 00		sta $00,x	                sta 0,x
.9169	95 01		sta $01,x	                sta 1,x
.916b	60		rts		z_greater_than: rts
.916c					xt_here:
.916c					xt_asm_arrow:
.916c	ca		dex		                dex
.916d	ca		dex		                dex
.916e	a5 00		lda $00		                lda cp
.9170	95 00		sta $00,x	                sta 0,x
.9172	a5 01		lda $01		                lda cp+1
.9174	95 01		sta $01,x	                sta 1,x
.9176					z_asm_arrow:
.9176	60		rts		z_here:         rts
.9177					xt_hex:
.9177	a9 10		lda #$10	                lda #16
.9179	85 18		sta $18		                sta base
.917b	64 19		stz $19		                stz base+1              ; paranoid
.917d	60		rts		z_hex:          rts
.917e					xt_hexstore:
.917e	20 2d d8	jsr $d82d	                jsr underflow_3
.9181	20 a9 8d	jsr $8da9	                jsr xt_dup              ; Save copy of original address
.9184	20 96 a4	jsr $a496	                jsr xt_two_to_r         ; ( addr1 u1 ) ( R: addr2 addr2 )
.9187					_loop:
.9187	b5 00		lda $00,x	                lda 0,x
.9189	15 01		ora $01,x	                ora 1,x
.918b	f0 36		beq $91c3	                beq _done
.918d	20 46 86	jsr $8646	                jsr xt_cleave           ; ( addr1 u1 addr3 u3 ) ( R: addr2 addr2 )
.9190	20 96 a4	jsr $a496	                jsr xt_two_to_r
.9193	20 9c a7	jsr $a79c	                jsr xt_zero
.9196	20 9c a7	jsr $a79c	                jsr xt_zero
.9199	20 1c a4	jsr $a41c	                jsr xt_two_r_from       ; ( addr1 u1 0 0 addr3 u3 ) ( R: addr2 addr2 )
.919c	20 b1 a2	jsr $a2b1	                jsr xt_to_number        ; ( addr1 u1 n n addr4 u4 ) ( R: addr2 addr2 )
.919f	b5 00		lda $00,x	                lda 0,x
.91a1	15 01		ora $01,x	                ora 1,x
.91a3	d0 17		bne $91bc	                bne _have_chars_left
.91a5	20 a4 a3	jsr $a3a4	                jsr xt_two_drop         ; ( addr1 u1 n n ) ( R: addr2 addr2 )
.91a8	20 7a 8a	jsr $8a7a	                jsr xt_d_to_s           ; ( addr1 u1 n ) ( R: addr2 addr2 )
.91ab	20 77 9a	jsr $9a77	                jsr xt_r_fetch          ; ( addr1 u1 n addr2 ) ( R: addr2 addr2 )
.91ae	20 0f 86	jsr $860f	                jsr xt_c_store          ; ( addr1 u1 ) ( R: addr2 addr2 )
.91b1	20 8c 9a	jsr $9a8c	                jsr xt_r_from           ; R>
.91b4	20 17 98	jsr $9817	                jsr xt_one_plus         ; 1+
.91b7	20 64 a3	jsr $a364	                jsr xt_to_r             ; >R ( addr1 u1 ) ( R: addr2+1 addr2 )
.91ba	80 cb		bra $9187	                bra _loop
.91bc					_have_chars_left:
.91bc	8a		txa		                txa
.91bd	18		clc		                clc
.91be	69 08		adc #$08	                adc #8
.91c0	aa		tax		                tax
.91c1	80 c4		bra $9187	                bra _loop
.91c3					_done:
.91c3	e8		inx		                inx
.91c4	e8		inx		                inx
.91c5	e8		inx		                inx
.91c6	e8		inx		                inx                     ; 2DROP
.91c7	20 1c a4	jsr $a41c	                jsr xt_two_r_from       ; ( addr2+n addr2 )
.91ca	20 a2 a1	jsr $a1a2	                jsr xt_swap
.91cd	20 4a 95	jsr $954a	                jsr xt_minus            ; ( n )
.91d0	60		rts		z_hexstore:     rts
.91d1					xt_hold:
.91d1	20 23 d8	jsr $d823	                jsr underflow_1
.91d4	a5 34		lda $34		                lda tohold
.91d6	d0 02		bne $91da	                bne +
.91d8	c6 35		dec $35		                dec tohold+1
.91da					+
.91da	c6 34		dec $34		                dec tohold
.91dc	b5 00		lda $00,x	                lda 0,x
.91de	92 34		sta ($34)	                sta (tohold)
.91e0	e8		inx		                inx
.91e1	e8		inx		                inx
.91e2	60		rts		z_hold:         rts
.91e3					xt_i:
.91e3	ca		dex		                dex
.91e4	ca		dex		                dex
.91e5	86 2a		stx $2a		                stx tmpdsp
.91e7	ba		tsx		                tsx
.91e8	38		sec		                sec
.91e9	bd 01 01	lda $0101,x	                lda $0101,x     ; LSB
.91ec	fd 03 01	sbc $0103,x	                sbc $0103,x
.91ef	a8		tay		                tay
.91f0	bd 02 01	lda $0102,x	                lda $0102,x     ; MSB
.91f3	fd 04 01	sbc $0104,x	                sbc $0104,x
.91f6	a6 2a		ldx $2a		                ldx tmpdsp
.91f8	95 01		sta $01,x	                sta 1,x         ; MSB of de-fudged index
.91fa	94 00		sty $00,x	                sty 0,x         ; LSB of de-fudged index
.91fc	60		rts		z_i:            rts
.91fd					xt_if:
.91fd	a0 92		ldy #$92	                ldy #>zero_branch_runtime
.91ff	a9 0e		lda #$0e	                lda #<zero_branch_runtime
.9201	20 c6 d6	jsr $d6c6	                jsr cmpl_subroutine
.9204	20 6c 91	jsr $916c	                jsr xt_here
.9207	20 9c a7	jsr $a79c	                jsr xt_zero
.920a	20 68 87	jsr $8768	                jsr xt_comma
.920d	60		rts		z_if:           rts
.920e					zero_branch_runtime:
.920e	68		pla		                pla
.920f	85 22		sta $22		                sta tmpbranch
.9211	68		pla		                pla
.9212	85 23		sta $23		                sta tmpbranch+1
.9214	b5 00		lda $00,x	                lda 0,x
.9216	15 01		ora $01,x	                ora 1,x
.9218	f0 0f		beq $9229	                beq _zero
.921a	a5 22		lda $22		                lda tmpbranch   ; LSB
.921c	18		clc		                clc
.921d	69 02		adc #$02	                adc #2
.921f	85 24		sta $24		                sta tmp1
.9221	a5 23		lda $23		                lda tmpbranch+1 ; MSB
.9223	69 00		adc #$00	                adc #0          ; For carry
.9225	85 25		sta $25		                sta tmp1+1
.9227	80 13		bra $923c	                bra _done
.9229					_zero:
.9229	a0 01		ldy #$01	                ldy #1
.922b	b1 22		lda ($22),y	                lda (tmpbranch),y
.922d	85 24		sta $24		                sta tmp1
.922f	c8		iny		                iny
.9230	b1 22		lda ($22),y	                lda (tmpbranch),y
.9232	85 25		sta $25		                sta tmp1+1
.9234	a5 24		lda $24		                lda tmp1
.9236	d0 02		bne $923a	                bne +
.9238	c6 25		dec $25		                dec tmp1+1
.923a					+
.923a	c6 24		dec $24		                dec tmp1
.923c					_done:
.923c	a5 25		lda $25		                lda tmp1+1
.923e	48		pha		                pha             ; MSB first
.923f	a5 24		lda $24		                lda tmp1
.9241	48		pha		                pha
.9242	e8		inx		                inx
.9243	e8		inx		                inx
.9244	60		rts		                rts
.9245					xt_immediate:
.9245	20 65 d7	jsr $d765	                jsr current_to_dp
.9248	a0 01		ldy #$01	                ldy #1          ; offset for status byte
.924a	b1 02		lda ($02),y	                lda (dp),y
.924c	09 04		ora #$04	                ora #IM        ; make sure bit 7 is set
.924e	91 02		sta ($02),y	                sta (dp),y
.9250	60		rts		z_immediate:    rts
.9251					xt_input:
.9251	ca		dex		                dex
.9252	ca		dex		                dex
.9253	a9 12		lda #$12	                lda #<input
.9255	95 00		sta $00,x	                sta 0,x
.9257	a9 00		lda #$00	                lda #>input
.9259	95 01		sta $01,x	                sta 1,x
.925b	60		rts		z_input:        rts
.925c					xt_input_to_r:
.925c	68		pla		                pla
.925d	85 24		sta $24		                sta tmp1
.925f	68		pla		                pla
.9260	85 25		sta $25		                sta tmp1+1
.9262	a0 07		ldy #$07	                ldy #7
.9264					_loop:
.9264	b9 06 00	lda $0006,y	                lda insrc,y     ; insrc+7 is toin+1
.9267	48		pha		                pha
.9268	88		dey		                dey
.9269	10 f9		bpl $9264	                bpl _loop
.926b	a5 25		lda $25		                lda tmp1+1
.926d	48		pha		                pha
.926e	a5 24		lda $24		                lda tmp1
.9270	48		pha		                pha
.9271	60		rts		z_input_to_r: 	rts
.9272					xt_int_to_name:
.9272	20 23 d8	jsr $d823	                jsr underflow_1
.9275	ca		dex		                dex
.9276	ca		dex		                dex
.9277	74 00		stz $00,x	                stz 0,x
.9279	74 01		stz $01,x	                stz 1,x
.927b					_wordlist_loop:
.927b	b5 00		lda $00,x	                lda 0,x                 ; Get the current wordlist.
.927d	0a		asl a		                asl                     ; Turn offset into cells offset.
.927e	18		clc		                clc
.927f	69 06		adc #$06	                adc #wordlists_offset
.9281	a8		tay		                tay
.9282	b1 1e		lda ($1e),y	                lda (up),y              ; Save the DP for this wordlist
.9284	85 26		sta $26		                sta tmp2                ; into tmp2
.9286	c8		iny		                iny
.9287	b1 1e		lda ($1e),y	                lda (up),y
.9289	85 27		sta $27		                sta tmp2+1
.928b	a5 26		lda $26		                lda tmp2
.928d	05 27		ora $27		                ora tmp2+1
.928f	f0 38		beq $92c9	                beq _next_wordlist
.9291	b5 02		lda $02,x	                lda 2,x         ; Target xt is now behind wordlist id.
.9293	85 28		sta $28		                sta tmp3        ; Save target xt in tmp3
.9295	b5 03		lda $03,x	                lda 3,x
.9297	85 29		sta $29		                sta tmp3+1
.9299					_loop:
.9299	a0 04		ldy #$04	                ldy #4          ; xt is four bytes down
.929b	b1 26		lda ($26),y	                lda (tmp2),y    ; LSB of xt of current nt
.929d	c5 28		cmp $28		                cmp tmp3
.929f	d0 07		bne $92a8	                bne _no_match
.92a1	c8		iny		                iny
.92a2	b1 26		lda ($26),y	                lda (tmp2),y    ; MSB of xt of current nt
.92a4	c5 29		cmp $29		                cmp tmp3+1
.92a6	f0 32		beq $92da	                beq _match
.92a8					_no_match:
.92a8	18		clc		                clc
.92a9	a5 26		lda $26		                lda tmp2
.92ab	69 02		adc #$02	                adc #2
.92ad	85 26		sta $26		                sta tmp2
.92af	a5 27		lda $27		                lda tmp2+1
.92b1	69 00		adc #$00	                adc #0          ; only care about carry
.92b3	85 27		sta $27		                sta tmp2+1
.92b5	a0 00		ldy #$00	                ldy #0
.92b7	b1 26		lda ($26),y	                lda (tmp2),y
.92b9	48		pha		                pha
.92ba	c8		iny		                iny
.92bb	11 26		ora ($26),y	                ora (tmp2),y
.92bd	f0 09		beq $92c8	                beq _zero
.92bf	b1 26		lda ($26),y	                lda (tmp2),y
.92c1	85 27		sta $27		                sta tmp2+1
.92c3	68		pla		                pla
.92c4	85 26		sta $26		                sta tmp2
.92c6	80 d1		bra $9299	                bra _loop
.92c8					_zero:
.92c8	68		pla		                pla             ; Leftover from above loop
.92c9					_next_wordlist:
.92c9	b5 00		lda $00,x	                lda 0,x
.92cb	1a		inc a		                ina
.92cc	95 00		sta $00,x	                sta 0,x
.92ce	c9 0c		cmp #$0c	                cmp #max_wordlists
.92d0	d0 a9		bne $927b	                bne _wordlist_loop
.92d2	e8		inx		                inx
.92d3	e8		inx		                inx
.92d4	74 00		stz $00,x	                stz 0,x
.92d6	74 01		stz $01,x	                stz 1,x
.92d8	80 0a		bra $92e4	                bra z_int_to_name
.92da					_match:
.92da	e8		inx		                inx
.92db	e8		inx		                inx
.92dc	a5 26		lda $26		                lda tmp2
.92de	95 00		sta $00,x	                sta 0,x
.92e0	a5 27		lda $27		                lda tmp2+1
.92e2	95 01		sta $01,x	                sta 1,x
.92e4	60		rts		z_int_to_name:  rts
.92e5					xt_invert:
.92e5	20 23 d8	jsr $d823	                jsr underflow_1
.92e8	a9 ff		lda #$ff	                lda #$FF
.92ea	55 00		eor $00,x	                eor 0,x         ; LSB
.92ec	95 00		sta $00,x	                sta 0,x
.92ee	a9 ff		lda #$ff	                lda #$FF
.92f0	55 01		eor $01,x	                eor 1,x         ; MSB
.92f2	95 01		sta $01,x	                sta 1,x
.92f4	60		rts		z_invert:       rts
.92f5					xt_is:
.92f5	a5 16		lda $16		                lda state
.92f7	05 17		ora $17		                ora state+1
.92f9	f0 0c		beq $9307	                beq _interpreting
.92fb					_compiling:
.92fb	20 98 85	jsr $8598	                jsr xt_bracket_tick
.92fe	a0 8a		ldy #$8a	                ldy #>xt_defer_store
.9300	a9 e0		lda #$e0	                lda #<xt_defer_store
.9302	20 c6 d6	jsr $d6c6	                jsr cmpl_subroutine
.9305	80 06		bra $930d	                bra _done
.9307					_interpreting:
.9307	20 05 a2	jsr $a205	                jsr xt_tick
.930a	20 e0 8a	jsr $8ae0	                jsr xt_defer_store
.930d					_done:
.930d	60		rts		z_is:           rts
.930e					xt_j:
.930e	ca		dex		                dex
.930f	ca		dex		                dex
.9310	86 2a		stx $2a		                stx tmpdsp
.9312	ba		tsx		                tsx
.9313	38		sec		                sec
.9314	bd 07 01	lda $0107,x	                lda $0107,x     ; LSB
.9317	fd 09 01	sbc $0109,x	                sbc $0109,x
.931a	a8		tay		                tay
.931b	bd 08 01	lda $0108,x	                lda $0108,x     ; MSB
.931e	fd 0a 01	sbc $010a,x	                sbc $010A,x
.9321	a6 2a		ldx $2a		                ldx tmpdsp
.9323	95 01		sta $01,x	                sta 1,x         ; MSB of de-fudged index
.9325	94 00		sty $00,x	                sty 0,x         ; LSB of de-fudged index
.9327	60		rts		z_j:            rts
.9328					xt_key:
.9328	20 32 93	jsr $9332	                jsr key_a               ; returns char in A
.932b	ca		dex		                dex
.932c	ca		dex		                dex
.932d	95 00		sta $00,x	                sta 0,x
.932f	74 01		stz $01,x	                stz 1,x
.9331	60		rts		z_key:          rts
.9332					key_a:
.9332	6c 12 00	jmp ($0012)	                jmp (input)             ; JSR/RTS
.9335					xt_latestnt:
.9335	ca		dex		                dex
.9336	ca		dex		                dex
.9337	20 65 d7	jsr $d765	                jsr current_to_dp
.933a	a5 02		lda $02		                lda dp
.933c	95 00		sta $00,x	                sta 0,x
.933e	a5 03		lda $03		                lda dp+1
.9340	95 01		sta $01,x	                sta 1,x
.9342	60		rts		z_latestnt:     rts
.9343					xt_latestxt:
.9343	20 35 93	jsr $9335	                jsr xt_latestnt         ; ( nt )
.9346	20 db 95	jsr $95db	                jsr xt_name_to_int      ; ( xt )
.9349	60		rts		z_latestxt:     rts
.934a					xt_leave:
.934a	68		pla		                pla
.934b	68		pla		                pla
.934c	68		pla		                pla
.934d	68		pla		                pla
.934e	60		rts		                rts             ; this must be compiled, so keep before z_leave
.934f					z_leave:
.934f					xt_left_bracket:
.934f	64 16		stz $16		                stz state
.9351	64 17		stz $17		                stz state+1
.9353	60		rts		z_left_bracket: rts
.9354					xt_less_number_sign:
.9354	20 9b 98	jsr $989b	                jsr xt_pad      ; ( addr )
.9357	b5 00		lda $00,x	                lda 0,x
.9359	85 34		sta $34		                sta tohold
.935b	b5 01		lda $01,x	                lda 1,x
.935d	85 35		sta $35		                sta tohold+1
.935f	e8		inx		                inx
.9360	e8		inx		                inx
.9361					z_less_number_sign:
.9361	60		rts		                rts
.9362					xt_less_than:
.9362	20 28 d8	jsr $d828	                jsr underflow_2
.9365	a0 00		ldy #$00	                ldy #0          ; default false
.9367	20 4a d7	jsr $d74a	                jsr compare_16bit
.936a	f0 03		beq $936f	                beq _false
.936c	30 01		bmi $936f	                bmi _false
.936e	88		dey		                dey
.936f					_false:
.936f	98		tya		                tya
.9370	e8		inx		                inx
.9371	e8		inx		                inx
.9372	95 00		sta $00,x	                sta 0,x
.9374	95 01		sta $01,x	                sta 1,x
.9376	60		rts		z_less_than:    rts
.9377					xt_list:
.9377	20 23 d8	jsr $d823	                jsr underflow_1
.937a	20 d3 9e	jsr $9ed3	                jsr xt_scr
.937d	20 81 a1	jsr $a181	                jsr xt_store
.9380	20 3a a8	jsr $a83a	                jsr xt_editor_l
.9383	60		rts		z_list:         rts
.9384					xt_literal:
.9384	20 23 d8	jsr $d823	                jsr underflow_1
.9387	a0 93		ldy #$93	                ldy #>literal_runtime
.9389	a9 92		lda #$92	                lda #<literal_runtime
.938b	20 c6 d6	jsr $d6c6	                jsr cmpl_subroutine
.938e	20 68 87	jsr $8768	                jsr xt_comma
.9391	60		rts		z_literal:      rts
.9392					literal_runtime:
.9392	ca		dex		                dex
.9393	ca		dex		                dex
.9394	68		pla		                pla             ; LSB
.9395	85 24		sta $24		                sta tmp1
.9397	68		pla		                pla             ; MSB
.9398	85 25		sta $25		                sta tmp1+1
.939a	a0 01		ldy #$01	                ldy #1
.939c	b1 24		lda ($24),y	                lda (tmp1),y    ; LSB
.939e	95 00		sta $00,x	                sta 0,x
.93a0	c8		iny		                iny
.93a1	b1 24		lda ($24),y	                lda (tmp1),y    ; MSB
.93a3	95 01		sta $01,x	                sta 1,x
.93a5	98		tya		                tya
.93a6	18		clc		                clc
.93a7	65 24		adc $24		                adc tmp1
.93a9	a8		tay		                tay
.93aa	a5 25		lda $25		                lda tmp1+1
.93ac	69 00		adc #$00	                adc #0
.93ae	48		pha		                pha
.93af	5a		phy		                phy
.93b0	60		rts		                rts
.93b1					xt_load:
.93b1	20 23 d8	jsr $d823	                jsr underflow_1
.93b4	a0 01		ldy #$01	                ldy #blk_offset+1
.93b6	b1 1e		lda ($1e),y	                lda (up),y
.93b8	48		pha		                pha
.93b9	88		dey		                dey
.93ba	b1 1e		lda ($1e),y	                lda (up),y
.93bc	48		pha		                pha
.93bd	b5 00		lda $00,x	                lda 0,x
.93bf	91 1e		sta ($1e),y	                sta (up),y
.93c1	c8		iny		                iny
.93c2	b5 01		lda $01,x	                lda 1,x
.93c4	91 1e		sta ($1e),y	                sta (up),y
.93c6	20 bb 83	jsr $83bb	                jsr xt_block
.93c9	ca		dex		                dex
.93ca	ca		dex		                dex
.93cb	a9 04		lda #$04	                lda #4
.93cd	95 01		sta $01,x	                sta 1,x
.93cf	74 00		stz $00,x	                stz 0,x
.93d1	20 c9 90	jsr $90c9	                jsr load_evaluate
.93d4	a0 00		ldy #$00	                ldy #blk_offset
.93d6	68		pla		                pla
.93d7	91 1e		sta ($1e),y	                sta (up),y
.93d9	c8		iny		                iny
.93da	68		pla		                pla
.93db	91 1e		sta ($1e),y	                sta (up),y
.93dd	88		dey		                dey
.93de	11 1e		ora ($1e),y	                ora (up),y
.93e0	f0 12		beq $93f4	                beq _done
.93e2	ca		dex		                dex
.93e3	ca		dex		                dex
.93e4	a0 00		ldy #$00	                ldy #blk_offset
.93e6	b1 1e		lda ($1e),y	                lda (up),y
.93e8	95 00		sta $00,x	                sta 0,x
.93ea	c8		iny		                iny
.93eb	b1 1e		lda ($1e),y	                lda (up),y
.93ed	95 01		sta $01,x	                sta 1,x
.93ef	20 bb 83	jsr $83bb	                jsr xt_block
.93f2	e8		inx		                inx
.93f3	e8		inx		                inx
.93f4					_done:
.93f4	60		rts		z_load:         rts
.93f5					xt_loop:
.93f5	a0 98		ldy #$98	                ldy #>xt_one
.93f7	a9 02		lda #$02	                lda #<xt_one
.93f9	20 c6 d6	jsr $d6c6	                jsr cmpl_subroutine     ; drop through to +LOOP
.93fc					xt_plus_loop:
.93fc	a0 11		ldy #$11	                ldy #plus_loop_runtime_end-plus_loop_runtime
.93fe	5a		phy		                phy             ; save counter to adjust CP
.93ff					-
.93ff	b9 63 94	lda $9463,y	                lda plus_loop_runtime,y
.9402	91 00		sta ($00),y	                sta (cp),y
.9404	88		dey		                dey
.9405	10 f8		bpl $93ff	                bpl -
.9407	68		pla		                pla
.9408	18		clc		                clc
.9409	65 00		adc $00		                adc cp
.940b	85 00		sta $00		                sta cp
.940d	a5 01		lda $01		                lda cp+1
.940f	69 00		adc #$00	                adc #0          ; only need carry
.9411	85 01		sta $01		                sta cp+1
.9413	20 68 87	jsr $8768	                jsr xt_comma
.9416	a9 68		lda #$68	                lda #$68                ; opcode for PLA
.9418	a0 06		ldy #$06	                ldy #6
.941a					-
.941a	91 00		sta ($00),y	                sta (cp),y
.941c	88		dey		                dey
.941d	10 fb		bpl $941a	                bpl -
.941f	a9 06		lda #$06	                lda #6
.9421	18		clc		                clc
.9422	65 00		adc $00		                adc cp
.9424	85 00		sta $00		                sta cp
.9426	a5 01		lda $01		                lda cp+1
.9428	69 00		adc #$00	                adc #0                  ; only need carry
.942a	85 01		sta $01		                sta cp+1
.942c	b5 00		lda $00,x	                lda 0,x
.942e	85 24		sta $24		                sta tmp1
.9430	b5 01		lda $01,x	                lda 1,x
.9432	85 25		sta $25		                sta tmp1+1
.9434	e8		inx		                inx
.9435	e8		inx		                inx
.9436	a5 00		lda $00		                lda cp
.9438	38		sec		                sec
.9439	e9 01		sbc #$01	                sbc #1
.943b	85 26		sta $26		                sta tmp2
.943d	a5 01		lda $01		                lda cp+1
.943f	e9 00		sbc #$00	                sbc #0
.9441	85 27		sta $27		                sta tmp2+1
.9443	a0 00		ldy #$00	                ldy #0
.9445	a9 a9		lda #$a9	                lda #$A9        ; opcode for LDA immediate
.9447	91 24		sta ($24),y	                sta (tmp1),y
.9449	c8		iny		                iny
.944a	a5 27		lda $27		                lda tmp2+1      ; MSB
.944c	91 24		sta ($24),y	                sta (tmp1),y
.944e	c8		iny		                iny
.944f	a9 48		lda #$48	                lda #$48        ; Opcode for PHA
.9451	91 24		sta ($24),y	                sta (tmp1),y
.9453	c8		iny		                iny
.9454	a9 a9		lda #$a9	                lda #$A9        ; opcode for LDA immediate
.9456	91 24		sta ($24),y	                sta (tmp1),y
.9458	c8		iny		                iny
.9459	a5 26		lda $26		                lda tmp2        ; LSB
.945b	91 24		sta ($24),y	                sta (tmp1),y
.945d	c8		iny		                iny
.945e	a9 48		lda #$48	                lda #$48        ; Opcode for PHA
.9460	91 24		sta ($24),y	                sta (tmp1),y
.9462					z_loop:
.9462	60		rts		z_plus_loop:    rts
.9463					plus_loop_runtime:
.9463	18		clc		                clc
.9464	68		pla		                pla             ; LSB of index
.9465	75 00		adc $00,x	                adc 0,x         ; LSB of step
.9467	a8		tay		                tay             ; temporary storage of LSB
.9468	b8		clv		                clv
.9469	68		pla		                pla             ; MSB of index
.946a	75 01		adc $01,x	                adc 1,x         ; MSB of step
.946c	48		pha		                pha             ; put MSB of index back on stack
.946d	98		tya		                tya             ; put LSB of index back on stack
.946e	48		pha		                pha
.946f	e8		inx		                inx             ; dump step from TOS
.9470	e8		inx		                inx
.9471	70 03		bvs $9476	                bvs _hack+3     ; skip over JMP instruction
.9473					_hack:
>9473	4c				                .byte $4C
.9474					plus_loop_runtime_end:
.9474					xt_lshift:
.9474	20 28 d8	jsr $d828	                jsr underflow_2
.9477	b5 00		lda $00,x	                lda 0,x
.9479	29 0f		and #$0f	                and #%00001111
.947b	f0 08		beq $9485	                beq _done
.947d	a8		tay		                tay
.947e					_loop:
.947e	16 02		asl $02,x	                asl 2,x
.9480	36 03		rol $03,x	                rol 3,x
.9482	88		dey		                dey
.9483	d0 f9		bne $947e	                bne _loop
.9485					_done:
.9485	e8		inx		                inx
.9486	e8		inx		                inx
.9487	60		rts		z_lshift:       rts
.9488					xt_m_star:
.9488	20 28 d8	jsr $d828	                jsr underflow_2
.948b	b5 01		lda $01,x	                lda 1,x         ; MSB of n1
.948d	55 03		eor $03,x	                eor 3,x         ; MSB of n2
.948f	48		pha		                pha
.9490	20 39 81	jsr $8139	                jsr xt_abs
.9493	20 a2 a1	jsr $a1a2	                jsr xt_swap
.9496	20 39 81	jsr $8139	                jsr xt_abs
.9499	20 f0 a5	jsr $a5f0	                jsr xt_um_star          ; ( d )
.949c	68		pla		                pla
.949d	10 03		bpl $94a2	                bpl _done
.949f	20 3b 8b	jsr $8b3b	                jsr xt_dnegate
.94a2					_done:
.94a2	60		rts		z_m_star:       rts
.94a3					xt_marker:
.94a3	20 65 d7	jsr $d765	                jsr current_to_dp
.94a6	a5 02		lda $02		                lda dp
.94a8	48		pha		                pha
.94a9	a5 03		lda $03		                lda dp+1
.94ab	48		pha		                pha
.94ac	a5 00		lda $00		                lda cp
.94ae	48		pha		                pha
.94af	a5 01		lda $01		                lda cp+1
.94b1	48		pha		                pha
.94b2	20 63 89	jsr $8963	                jsr xt_create
.94b5	a5 00		lda $00		                lda cp          ; LSB
.94b7	38		sec		                sec
.94b8	e9 02		sbc #$02	                sbc #2
.94ba	85 00		sta $00		                sta cp
.94bc	a5 01		lda $01		                lda cp+1        ; MSB
.94be	e9 00		sbc #$00	                sbc #0          ; we only care about the borrow
.94c0	85 01		sta $01		                sta cp+1
.94c2	a0 94		ldy #$94	                ldy #>marker_runtime
.94c4	a9 e1		lda #$e1	                lda #<marker_runtime
.94c6	20 d2 d6	jsr $d6d2	                jsr cmpl_word
.94c9	7a		ply		                ply                     ; MSB
.94ca	68		pla		                pla                     ; LSB
.94cb	20 d2 d6	jsr $d6d2	                jsr cmpl_word
.94ce	7a		ply		                ply                     ; MSB
.94cf	68		pla		                pla                     ; LSB
.94d0	20 d2 d6	jsr $d6d2	                jsr cmpl_word
.94d3	a0 04		ldy #$04	                ldy #4                  ; Start at CURRENT
.94d5					_marker_loop:
.94d5	b1 1e		lda ($1e),y	                lda (up),y
.94d7	20 d6 d6	jsr $d6d6	                jsr cmpl_a
.94da	c8		iny		                iny
.94db	98		tya		                tya
.94dc	c9 28		cmp #$28	                cmp #40                 ; One past the end of the search order.
.94de	d0 f5		bne $94d5	                bne _marker_loop
.94e0	60		rts		z_marker:       rts
.94e1					marker_runtime:
.94e1	68		pla		                pla
.94e2	85 24		sta $24		                sta tmp1        ; LSB of address
.94e4	68		pla		                pla
.94e5	85 25		sta $25		                sta tmp1+1      ; MSB of address
.94e7	e6 24		inc $24		                inc tmp1
.94e9	d0 02		bne $94ed	                bne +
.94eb	e6 25		inc $25		                inc tmp1+1
.94ed					+
.94ed	a0 00		ldy #$00	                ldy #0
.94ef	b1 24		lda ($24),y	                lda (tmp1),y
.94f1	85 00		sta $00		                sta cp
.94f3	c8		iny		                iny
.94f4	b1 24		lda ($24),y	                lda (tmp1),y
.94f6	85 01		sta $01		                sta cp+1
.94f8	c8		iny		                iny
.94f9	b1 24		lda ($24),y	                lda (tmp1),y
.94fb	85 02		sta $02		                sta dp
.94fd	c8		iny		                iny
.94fe	b1 24		lda ($24),y	                lda (tmp1),y
.9500	85 03		sta $03		                sta dp+1
.9502	a0 04		ldy #$04	                ldy #4
.9504					_marker_restore_loop:
.9504	b1 24		lda ($24),y	                lda (tmp1), y
.9506	91 1e		sta ($1e),y	                sta (up), y
.9508	c8		iny		                iny
.9509	98		tya		                tya
.950a	c9 28		cmp #$28	                cmp #40                 ; One past the end of the search order.
.950c	d0 f6		bne $9504	                bne _marker_restore_loop
.950e	20 78 d7	jsr $d778	                jsr dp_to_current       ; Move the CURRENT DP back.
.9511	60		rts		                rts
.9512					xt_max:
.9512	20 28 d8	jsr $d828	                jsr underflow_2
.9515	b5 00		lda $00,x	                lda 0,x         ; LSB of TOS
.9517	d5 02		cmp $02,x	                cmp 2,x         ; LSB of NOS, this sets the carry
.9519	b5 01		lda $01,x	                lda 1,x         ; MSB of TOS
.951b	f5 03		sbc $03,x	                sbc 3,x         ; MSB of NOS
.951d	50 02		bvc $9521	                bvc _no_overflow
.951f	49 80		eor #$80	                eor #$80        ; complement negative flag
.9521					_no_overflow:
.9521	30 08		bmi $952b	                bmi _keep_nos
.9523	b5 00		lda $00,x	                lda 0,x
.9525	95 02		sta $02,x	                sta 2,x
.9527	b5 01		lda $01,x	                lda 1,x
.9529	95 03		sta $03,x	                sta 3,x
.952b					_keep_nos:
.952b	e8		inx		                inx
.952c	e8		inx		                inx
.952d	60		rts		z_max:          rts
.952e					xt_min:
.952e	20 28 d8	jsr $d828	                jsr underflow_2
.9531	b5 00		lda $00,x	                lda 0,x         ; LSB of TOS
.9533	d5 02		cmp $02,x	                cmp 2,x         ; LSB of NOS, this sets carry
.9535	b5 01		lda $01,x	                lda 1,x         ; MSB of TOS
.9537	f5 03		sbc $03,x	                sbc 3,x         ; MSB of NOS
.9539	50 02		bvc $953d	                bvc _no_overflow
.953b	49 80		eor #$80	                eor #$80
.953d					_no_overflow:
.953d	10 08		bpl $9547	                bpl _keep_nos
.953f	b5 00		lda $00,x	                lda 0,x
.9541	95 02		sta $02,x	                sta 2,x
.9543	b5 01		lda $01,x	                lda 1,x
.9545	95 03		sta $03,x	                sta 3,x
.9547					_keep_nos:
.9547	e8		inx		                inx
.9548	e8		inx		                inx
.9549	60		rts		z_min:          rts
.954a					xt_minus:
.954a	20 28 d8	jsr $d828	                jsr underflow_2
.954d	38		sec		                sec
.954e	b5 02		lda $02,x	                lda 2,x         ; LSB
.9550	f5 00		sbc $00,x	                sbc 0,x
.9552	95 02		sta $02,x	                sta 2,x
.9554	b5 03		lda $03,x	                lda 3,x         ; MSB
.9556	f5 01		sbc $01,x	                sbc 1,x
.9558	95 03		sta $03,x	                sta 3,x
.955a	e8		inx		                inx
.955b	e8		inx		                inx
.955c	60		rts		z_minus:        rts
.955d					xt_minus_leading:
.955d	20 28 d8	jsr $d828	                jsr underflow_2
.9560					_loop:
.9560	b5 00		lda $00,x	                lda 0,x
.9562	15 01		ora $01,x	                ora 1,x
.9564	f0 0f		beq $9575	                beq _done
.9566	a1 02		lda ($02,x)	                lda (2,x)               ; get first character
.9568	20 16 d8	jsr $d816	                jsr is_whitespace
.956b	90 08		bcc $9575	                bcc _done
.956d	20 02 98	jsr $9802	                jsr xt_one              ; ( addr u 1 )
.9570	20 13 a0	jsr $a013	                jsr xt_slash_string     ; ( addr+ u-1 )
.9573	80 eb		bra $9560	                bra _loop
.9575					_done:
.9575					z_minus_leading:
.9575	60		rts		                rts
.9576					xt_minus_trailing:
.9576	20 28 d8	jsr $d828	                jsr underflow_2
.9579	b5 00		lda $00,x	                lda 0,x         ; LSB of n
.957b	15 01		ora $01,x	                ora 1,x         ; MSB of n
.957d	f0 33		beq $95b2	                beq _done
.957f	18		clc		                clc
.9580	b5 02		lda $02,x	                lda 2,x         ; LSB of addr
.9582	75 00		adc $00,x	                adc 0,x
.9584	85 24		sta $24		                sta tmp1
.9586	b5 03		lda $03,x	                lda 3,x         ; MSB of addr
.9588	75 01		adc $01,x	                adc 1,x
.958a	85 25		sta $25		                sta tmp1+1
.958c	a5 24		lda $24		                lda tmp1
.958e	d0 02		bne $9592	                bne +
.9590	c6 25		dec $25		                dec tmp1+1
.9592					+
.9592	c6 24		dec $24		                dec tmp1
.9594					_loop:
.9594	b2 24		lda ($24)	                lda (tmp1)
.9596	c9 20		cmp #$20	                cmp #AscSP
.9598	d0 18		bne $95b2	                bne _done
.959a	a5 24		lda $24		                lda tmp1
.959c	d0 02		bne $95a0	                bne +
.959e	c6 25		dec $25		                dec tmp1+1
.95a0					+
.95a0	c6 24		dec $24		                dec tmp1
.95a2	b5 00		lda $00,x	                lda 0,x
.95a4	d0 02		bne $95a8	                bne +
.95a6	d6 01		dec $01,x	                dec 1,x
.95a8					+
.95a8	d6 00		dec $00,x	                dec 0,x
.95aa	b5 00		lda $00,x	                lda 0,x
.95ac	15 01		ora $01,x	                ora 1,x
.95ae	f0 02		beq $95b2	                beq _done       ; Count has reached zero - we're done!
.95b0	80 e2		bra $9594	                bra _loop
.95b2					_done:
.95b2					z_minus_trailing:
.95b2	60		rts		                rts
.95b3					xt_mod:
.95b3	20 28 d8	jsr $d828	                jsr underflow_2
.95b6	20 fb 9f	jsr $9ffb	                jsr xt_slash_mod
.95b9	e8		inx		                inx             ; DROP
.95ba	e8		inx		                inx
.95bb					z_mod:
.95bb	60		rts		                rts
.95bc					xt_move:
.95bc	b5 03		lda $03,x	                lda 3,x                 ; MSB of addr2
.95be	d5 05		cmp $05,x	                cmp 5,x                 ; MSB of addr1
.95c0	f0 05		beq $95c7	                beq _lsb                ; wasn't helpful, move to LSB
.95c2	b0 0e		bcs $95d2	                bcs _to_move_up         ; we want CMOVE>
.95c4	4c 93 86	jmp $8693	                jmp xt_cmove            ; JSR/RTS
.95c7					_lsb:
.95c7	b5 02		lda $02,x	                lda 2,x                 ; LSB of addr2
.95c9	d5 04		cmp $04,x	                cmp 4,x                 ; LSB of addr1
.95cb	f0 08		beq $95d5	                beq _equal              ; LSB is equal as well
.95cd	b0 03		bcs $95d2	                bcs _to_move_up         ; we want CMOVE>
.95cf	4c 93 86	jmp $8693	                jmp xt_cmove            ; JSR/RTS
.95d2					_to_move_up:
.95d2	4c ce 86	jmp $86ce	                jmp xt_cmove_up         ; JSR/RTS
.95d5					_equal:
.95d5	8a		txa		                txa
.95d6	18		clc		                clc
.95d7	69 06		adc #$06	                adc #6
.95d9	aa		tax		                tax
.95da	60		rts		z_move:         rts
.95db					xt_name_to_int:
.95db	20 23 d8	jsr $d823	                jsr underflow_1
.95de	b5 00		lda $00,x	                lda 0,x
.95e0	18		clc		                clc
.95e1	69 04		adc #$04	                adc #4
.95e3	85 28		sta $28		                sta tmp3
.95e5	b5 01		lda $01,x	                lda 1,x
.95e7	90 01		bcc $95ea	                bcc _done
.95e9	1a		inc a		                ina
.95ea					_done:
.95ea	85 29		sta $29		                sta tmp3+1
.95ec	a0 00		ldy #$00	                ldy #0
.95ee	b1 28		lda ($28),y	                lda (tmp3),y
.95f0	95 00		sta $00,x	                sta 0,x
.95f2	c8		iny		                iny
.95f3	b1 28		lda ($28),y	                lda (tmp3),y
.95f5	95 01		sta $01,x	                sta 1,x
.95f7	60		rts		z_name_to_int:  rts
.95f8					xt_name_to_string:
.95f8	20 23 d8	jsr $d823	                jsr underflow_1
.95fb	ca		dex		                dex
.95fc	ca		dex		                dex
.95fd	a1 02		lda ($02,x)	                lda (2,x)
.95ff	95 00		sta $00,x	                sta 0,x
.9601	74 01		stz $01,x	                stz 1,x
.9603	b5 02		lda $02,x	                lda 2,x         ; LSB
.9605	18		clc		                clc
.9606	69 08		adc #$08	                adc #8
.9608	a8		tay		                tay
.9609	b5 03		lda $03,x	                lda 3,x         ; MSB
.960b	69 00		adc #$00	                adc #0          ; just need carry
.960d	95 03		sta $03,x	                sta 3,x
.960f	94 02		sty $02,x	                sty 2,x
.9611					z_name_to_string:
.9611	60		rts		                rts
.9612					xt_nc_limit:
.9612	ca		dex		                dex
.9613	ca		dex		                dex
.9614	a9 1a		lda #$1a	                lda #<nc_limit
.9616	95 00		sta $00,x	                sta 0,x
.9618	a9 00		lda #$00	                lda #>nc_limit
.961a	95 01		sta $01,x	                sta 1,x
.961c	60		rts		z_nc_limit:     rts
.961d					xt_negate:
.961d	20 23 d8	jsr $d823	                jsr underflow_1
.9620	a9 00		lda #$00	        	lda #0
.9622	38		sec		                sec
.9623	f5 00		sbc $00,x	                sbc 0,x         ; LSB
.9625	95 00		sta $00,x	                sta 0,x
.9627	a9 00		lda #$00	                lda #0
.9629	f5 01		sbc $01,x	                sbc 1,x         ; MSB
.962b	95 01		sta $01,x	                sta 1,x
.962d	60		rts		z_negate:       rts
.962e					xt_never_native:
.962e	20 65 d7	jsr $d765	                jsr current_to_dp
.9631	a0 01		ldy #$01	                ldy #1          ; offset for status byte
.9633	b1 02		lda ($02),y	                lda (dp),y
.9635	09 08		ora #$08	                ora #NN         ; Make sure NN flag is set
.9637	29 fd		and #$fd	                and #$ff-AN     ; and AN flag is clear.
.9639	91 02		sta ($02),y	                sta (dp),y
.963b					z_never_native:
.963b	60		rts		                rts
.963c					xt_nip:
.963c	20 28 d8	jsr $d828	                jsr underflow_2
.963f	b5 00		lda $00,x	                lda 0,x         ; LSB
.9641	95 02		sta $02,x	                sta 2,x
.9643	b5 01		lda $01,x	                lda 1,x         ; MSB
.9645	95 03		sta $03,x	                sta 3,x
.9647	e8		inx		                inx
.9648	e8		inx		                inx
.9649	60		rts		z_nip:          rts
.964a					xt_not_equals:
.964a	20 28 d8	jsr $d828	                jsr underflow_2
.964d	a0 00		ldy #$00	                ldy #0                  ; default is true
.964f	b5 00		lda $00,x	                lda 0,x                 ; LSB
.9651	d5 02		cmp $02,x	                cmp 2,x
.9653	d0 0a		bne $965f	                bne _not_equal
.9655	b5 01		lda $01,x	                lda 1,x                 ; MSB
.9657	d5 03		cmp $03,x	                cmp 3,x
.9659	d0 04		bne $965f	                bne _not_equal
.965b	a9 ff		lda #$ff	                lda #$FF
.965d	80 01		bra $9660	                bra _done
.965f					_not_equal:
.965f	88		dey		                dey                     ; drop thru to done
.9660					_done:
.9660	98		tya		                tya
.9661	e8		inx		                inx
.9662	e8		inx		                inx
.9663	95 00		sta $00,x	                sta 0,x
.9665	95 01		sta $01,x	                sta 1,x
.9667	60		rts		z_not_equals:   rts
.9668					xt_not_rote:
.9668	20 2d d8	jsr $d82d	                jsr underflow_3
.966b	b4 01		ldy $01,x	                ldy 1,x         ; MSB first
.966d	b5 03		lda $03,x	                lda 3,x
.966f	95 01		sta $01,x	                sta 1,x
.9671	b5 05		lda $05,x	                lda 5,x
.9673	95 03		sta $03,x	                sta 3,x
.9675	94 05		sty $05,x	                sty 5,x
.9677	b4 00		ldy $00,x	                ldy 0,x         ; LSB second
.9679	b5 02		lda $02,x	                lda 2,x
.967b	95 00		sta $00,x	                sta 0,x
.967d	b5 04		lda $04,x	                lda 4,x
.967f	95 02		sta $02,x	                sta 2,x
.9681	94 04		sty $04,x	                sty 4,x
.9683	60		rts		z_not_rote:     rts
.9684					xt_number:
.9684	20 28 d8	jsr $d828	                jsr underflow_2
.9687	64 2a		stz $2a		                stz tmpdsp      ; flag for double
.9689	64 2b		stz $2b		                stz tmpdsp+1    ; flag for minus
.968b	a5 18		lda $18		                lda base
.968d	48		pha		                pha
.968e	20 ac a3	jsr $a3ac	                jsr xt_two_dup
.9691	a1 02		lda ($02,x)	                lda (2,x)
.9693					_check_dec:
.9693	c9 23		cmp #$23	                cmp #$23        ; ASCII for "#"
.9695	d0 04		bne $969b	                bne _check_hex
.9697	a9 0a		lda #$0a	                lda #$0A
.9699	80 42		bra $96dd	                bra _base_changed
.969b					_check_hex:
.969b	c9 24		cmp #$24	                cmp #$24        ; ASCII for "$"
.969d	d0 04		bne $96a3	                bne _check_binary
.969f	a9 10		lda #$10	                lda #$10
.96a1	80 3a		bra $96dd	                bra _base_changed
.96a3					_check_binary:
.96a3	c9 25		cmp #$25	                cmp #$25        ; ASCII for "%"
.96a5	d0 04		bne $96ab	                bne _check_char
.96a7	a9 02		lda #$02	                lda #$02
.96a9	80 32		bra $96dd	                bra _base_changed
.96ab					_check_char:
.96ab	c9 27		cmp #$27	                cmp #$27        ; ASCII for "'"
.96ad	d0 3a		bne $96e9	                bne _check_minus
.96af	b5 00		lda $00,x	                lda 0,x         ; Get the length
.96b1	c9 03		cmp #$03	                cmp #$03
.96b3	d0 26		bne $96db	                bne _not_a_char
.96b5	b5 01		lda $01,x	                lda 1,x
.96b7	d0 22		bne $96db	                bne _not_a_char ; No compare needed to check for non-zero.
.96b9	b5 02		lda $02,x	                lda 2,x         ; LSB of address
.96bb	18		clc		                clc
.96bc	69 02		adc #$02	                adc #2          ; length of string
.96be	85 2c		sta $2c		                sta tmptos
.96c0	b5 03		lda $03,x	                lda 3,x
.96c2	69 00		adc #$00	                adc #0          ; only need carry
.96c4	85 2d		sta $2d		                sta tmptos+1
.96c6	b2 2c		lda ($2c)	                lda (tmptos)
.96c8	c9 27		cmp #$27	                cmp #$27        ; ASCII for "'"
.96ca	d0 0f		bne $96db	                bne _not_a_char
.96cc	f6 02		inc $02,x	                inc 2,x
.96ce	d0 02		bne $96d2	                bne +
.96d0	f6 03		inc $03,x	                inc 3,x
.96d2					+
.96d2	a1 02		lda ($02,x)	                lda (2,x)
.96d4	95 02		sta $02,x	                sta 2,x
.96d6	74 03		stz $03,x	                stz 3,x
.96d8	4c 59 97	jmp $9759	                jmp _drop_original_string ; Single flag will drop the TOS for us.
.96db					_not_a_char:
.96db	80 5a		bra $9737	                bra _number_error
.96dd					_base_changed:
.96dd	85 18		sta $18		                sta base        ; Switch to the new base
.96df	f6 02		inc $02,x	                inc 2,x         ; start one character later
.96e1	d0 02		bne $96e5	                bne +
.96e3	f6 03		inc $03,x	                inc 3,x
.96e5					+
.96e5	d6 00		dec $00,x	                dec 0,x         ; decrease string length by one
.96e7	a1 02		lda ($02,x)	                lda (2,x)       ; Load the first char again
.96e9					_check_minus:
.96e9	c9 2d		cmp #$2d	                cmp #$2D        ; ASCII for "-"
.96eb	d0 0a		bne $96f7	                bne _check_dot
.96ed	c6 2b		dec $2b		                dec tmpdsp+1
.96ef	f6 02		inc $02,x	                inc 2,x         ; start one character later
.96f1	d0 02		bne $96f5	                bne +
.96f3	f6 03		inc $03,x	                inc 3,x
.96f5					+
.96f5	d6 00		dec $00,x	                dec 0,x         ; decrease string length by one
.96f7					_check_dot:
.96f7	b5 02		lda $02,x	                lda 2,x         ; LSB of address
.96f9	18		clc		                clc
.96fa	75 00		adc $00,x	                adc 0,x         ; length of string
.96fc	85 2c		sta $2c		                sta tmptos
.96fe	b5 03		lda $03,x	                lda 3,x
.9700	69 00		adc #$00	                adc #0          ; only need carry
.9702	85 2d		sta $2d		                sta tmptos+1
.9704	a5 2c		lda $2c		                lda tmptos
.9706	d0 02		bne $970a	                bne +
.9708	c6 2d		dec $2d		                dec tmptos+1
.970a					+
.970a	c6 2c		dec $2c		                dec tmptos
.970c	b2 2c		lda ($2c)	                lda (tmptos)
.970e	c9 2e		cmp #$2e	                cmp #'.'
.9710	d0 04		bne $9716	                bne _main
.9712	c6 2a		dec $2a		                dec tmpdsp
.9714	d6 00		dec $00,x	                dec 0,x
.9716					_main:
.9716	ca		dex		                dex
.9717	ca		dex		                dex
.9718	ca		dex		                dex
.9719	ca		dex		                dex
.971a	b5 04		lda $04,x	                lda 4,x         ; LSB of length
.971c	95 00		sta $00,x	                sta 0,x
.971e	74 01		stz $01,x	                stz 1,x         ; MSB, max length 255 chars
.9720	b5 06		lda $06,x	                lda 6,x         ; LSB of address
.9722	95 02		sta $02,x	                sta 2,x
.9724	b5 07		lda $07,x	                lda 7,x         ; MSB of address
.9726	95 03		sta $03,x	                sta 3,x
.9728	74 04		stz $04,x	                stz 4,x         ; clear space for ud
.972a	74 05		stz $05,x	                stz 5,x
.972c	74 06		stz $06,x	                stz 6,x
.972e	74 07		stz $07,x	                stz 7,x
.9730	20 b1 a2	jsr $a2b1	                jsr xt_to_number        ; (ud addr u -- ud addr u )
.9733	b5 00		lda $00,x	                lda 0,x
.9735	f0 1e		beq $9755	                beq _all_converted
.9737					_number_error:
.9737	20 a4 a3	jsr $a3a4	                jsr xt_two_drop ; >NUMBER modified addr u
.973a	20 a4 a3	jsr $a3a4	                jsr xt_two_drop ; ud   (partially converted number)
.973d	a9 3e		lda #$3e	                lda #$3E        ; ASCII for ">"
.973f	20 f0 8d	jsr $8df0	                jsr emit_a
.9742	20 f7 a4	jsr $a4f7	                jsr xt_type
.9745	a9 3c		lda #$3c	                lda #$3C        ; ASCII for "<"
.9747	20 f0 8d	jsr $8df0	                jsr emit_a
.974a	20 18 a1	jsr $a118	                jsr xt_space
.974d	68		pla		                pla
.974e	85 18		sta $18		                sta base
.9750	a9 08		lda #$08	                lda #err_syntax
.9752	4c 39 d8	jmp $d839	                jmp error
.9755					_all_converted:
.9755	e8		inx		                inx ; Drop the current addr u
.9756	e8		inx		                inx
.9757	e8		inx		                inx
.9758	e8		inx		                inx
.9759					_drop_original_string:
.9759	20 72 a4	jsr $a472	                jsr xt_two_swap  ; Drop the original addr u
.975c	20 a4 a3	jsr $a3a4	                jsr xt_two_drop  ; (was saved for unknown word error message)
.975f	a5 2a		lda $2a		                lda tmpdsp      ; flag for double
.9761	f0 0d		beq $9770	                beq _single
.9763	a9 20		lda #$20	                lda #%00100000
.9765	04 20		tsb $20		                tsb status
.9767	a5 2b		lda $2b		                lda tmpdsp+1
.9769	f0 12		beq $977d	                beq _done       ; no minus, all done
.976b	20 3b 8b	jsr $8b3b	                jsr xt_dnegate
.976e	80 0d		bra $977d	                bra _done
.9770					_single:
.9770	e8		inx		                inx
.9771	e8		inx		                inx
.9772	a9 20		lda #$20	                lda #%00100000
.9774	14 20		trb $20		                trb status
.9776	a5 2b		lda $2b		                lda tmpdsp+1
.9778	f0 03		beq $977d	                beq _done       ; no minus, all done
.977a	20 1d 96	jsr $961d	                jsr xt_negate
.977d					_done:
.977d	68		pla		                pla
.977e	85 18		sta $18		                sta base
.9780	60		rts		z_number:       rts
.9781					xt_number_sign:
.9781	20 28 d8	jsr $d828	                jsr underflow_2         ; double number
.9784	20 81 83	jsr $8381	                jsr xt_base
.9787	20 7a 8f	jsr $8f7a	                jsr xt_fetch            ; ( ud1 base )
.978a	20 64 a3	jsr $a364	                jsr xt_to_r             ; >r
.978d	20 9c a7	jsr $a79c	                jsr xt_zero             ; 0
.9790	20 77 9a	jsr $9a77	                jsr xt_r_fetch          ; r@
.9793	20 ae a5	jsr $a5ae	                jsr xt_um_slash_mod     ; um/mod
.9796	20 51 9b	jsr $9b51	                jsr xt_rot              ; rot
.9799	20 51 9b	jsr $9b51	                jsr xt_rot              ; rot
.979c	20 8c 9a	jsr $9a8c	                jsr xt_r_from           ; r>
.979f	20 ae a5	jsr $a5ae	                jsr xt_um_slash_mod     ; um/mod
.97a2	20 51 9b	jsr $9b51	                jsr xt_rot              ; rot
.97a5	20 51 9b	jsr $9b51	                jsr xt_rot              ; ( ud rem )
.97a8	b5 00		lda $00,x	                lda 0,x
.97aa	a8		tay		                tay
.97ab	b9 17 d4	lda $d417,y	                lda s_abc_upper,y
.97ae	95 00		sta $00,x	                sta 0,x
.97b0	74 01		stz $01,x	                stz 1,x                 ; paranoid; now ( ud char )
.97b2	20 d1 91	jsr $91d1	                jsr xt_hold
.97b5					z_number_sign:
.97b5	60		rts		                rts
.97b6					xt_number_sign_greater:
.97b6	20 28 d8	jsr $d828	                jsr underflow_2         ; double number
.97b9	a5 34		lda $34		                lda tohold
.97bb	95 00		sta $00,x	                sta 0,x         ; LSB of tohold
.97bd	95 02		sta $02,x	                sta 2,x
.97bf	a5 35		lda $35		                lda tohold+1
.97c1	95 01		sta $01,x	                sta 1,x         ; MSB of addr
.97c3	95 03		sta $03,x	                sta 3,x         ; ( addr addr )
.97c5	20 9b 98	jsr $989b	                jsr xt_pad      ; ( addr addr pad )
.97c8	38		sec		                sec
.97c9	b5 00		lda $00,x	                lda 0,x         ; LSB of pad address
.97cb	f5 02		sbc $02,x	                sbc 2,x
.97cd	95 02		sta $02,x	                sta 2,x
.97cf	b5 01		lda $01,x	                lda 1,x         ; MSB, which should always be zero
.97d1	f5 03		sbc $03,x	                sbc 3,x
.97d3	95 03		sta $03,x	                sta 3,x         ; ( addr u pad )
.97d5	e8		inx		                inx
.97d6	e8		inx		                inx
.97d7					z_number_sign_greater:
.97d7	60		rts		                rts
.97d8					xt_number_sign_s:
.97d8	20 28 d8	jsr $d828	                jsr underflow_2
.97db					_loop:
.97db	20 81 97	jsr $9781	                jsr xt_number_sign
.97de	b5 00		lda $00,x	                lda 0,x
.97e0	15 01		ora $01,x	                ora 1,x
.97e2	15 02		ora $02,x	                ora 2,x
.97e4	15 03		ora $03,x	                ora 3,x
.97e6	d0 f3		bne $97db	                bne _loop
.97e8					z_number_sign_s:
.97e8	60		rts		                rts
.97e9					xt_of:
.97e9	a0 98		ldy #$98	                ldy #>xt_over
.97eb	a9 8d		lda #$8d	                lda #<xt_over
.97ed	20 c6 d6	jsr $d6c6	                jsr cmpl_subroutine
.97f0	a0 8e		ldy #$8e	                ldy #>xt_equal
.97f2	a9 c8		lda #$c8	                lda #<xt_equal
.97f4	20 c6 d6	jsr $d6c6	                jsr cmpl_subroutine
.97f7	20 fd 91	jsr $91fd	                jsr xt_if
.97fa	a0 8d		ldy #$8d	                ldy #>xt_drop
.97fc	a9 28		lda #$28	                lda #<xt_drop
.97fe	20 c6 d6	jsr $d6c6	                jsr cmpl_subroutine
.9801	60		rts		z_of:           rts
.9802					xt_editor_wordlist:
.9802					xt_one:
.9802	ca		dex		                dex
.9803	ca		dex		                dex
.9804	a9 01		lda #$01	                lda #1
.9806	95 00		sta $00,x	                sta 0,x
.9808	74 01		stz $01,x	                stz 1,x
.980a					z_editor_wordlist:
.980a					z_one:
.980a	60		rts		                rts
.980b					xt_one_minus:
.980b	20 23 d8	jsr $d823	                jsr underflow_1
.980e	b5 00		lda $00,x	                lda 0,x
.9810	d0 02		bne $9814	                bne +
.9812	d6 01		dec $01,x	                dec 1,x
.9814					+
.9814	d6 00		dec $00,x	                dec 0,x
.9816	60		rts		z_one_minus:    rts
.9817					xt_char_plus:
.9817					xt_one_plus:
.9817	20 23 d8	jsr $d823	                jsr underflow_1
.981a	f6 00		inc $00,x	                inc 0,x
.981c	d0 02		bne $9820	                bne _done
.981e	f6 01		inc $01,x	                inc 1,x
.9820					_done:
.9820					z_char_plus:
.9820	60		rts		z_one_plus:     rts
.9821					xt_only:
.9821	ca		dex		                dex
.9822	ca		dex		                dex
.9823	a9 ff		lda #$ff	                lda #$FF
.9825	95 00		sta $00,x	                sta 0,x
.9827	95 01		sta $01,x	                sta 1,x
.9829	20 15 9d	jsr $9d15	                jsr xt_set_order
.982c	60		rts		z_only:         rts
.982d					xt_or:
.982d	20 28 d8	jsr $d828	                jsr underflow_2
.9830	b5 00		lda $00,x	                lda 0,x
.9832	15 02		ora $02,x	                ora 2,x
.9834	95 02		sta $02,x	                sta 2,x
.9836	b5 01		lda $01,x	                lda 1,x
.9838	15 03		ora $03,x	                ora 3,x
.983a	95 03		sta $03,x	                sta 3,x
.983c	e8		inx		                inx
.983d	e8		inx		                inx
.983e	60		rts		z_or:           rts
.983f					xt_order:
.983f	20 5d 89	jsr $895d	                jsr xt_cr
.9842	20 2e 91	jsr $912e	                jsr xt_get_order        ; ( wid_n ... wid_1 n )
.9845	b5 00		lda $00,x	                lda 0,x                 ; assumes no more than 255 wordlists
.9847	f0 1e		beq $9867	                beq _drop_done
.9849					_have_wordlists:
.9849	a8		tay		                tay
.984a					_loop:
.984a	e8		inx		                inx
.984b	e8		inx		                inx                     ; DROP, now ( wid_n ... wid_1 )
.984c	b5 00		lda $00,x	                lda 0,x
.984e	5a		phy		                phy
.984f	20 6a 98	jsr $986a	                jsr order_print_wid_string   ; internal helper function
.9852	7a		ply		                ply
.9853	88		dey		                dey
.9854	d0 f4		bne $984a	                bne _loop
.9856	20 18 a1	jsr $a118	                jsr xt_space
.9859	20 18 a1	jsr $a118	                jsr xt_space
.985c	20 23 91	jsr $9123	                jsr xt_get_current      ; ( wid )
.985f	b5 00		lda $00,x	                lda 0,x
.9861	20 6a 98	jsr $986a	                jsr order_print_wid_string
.9864	20 5d 89	jsr $895d	                jsr xt_cr
.9867					_drop_done:
.9867	e8		inx		                inx
.9868	e8		inx		                inx
.9869					z_order:
.9869	60		rts		                rts
.986a					order_print_wid_string:
.986a	c9 04		cmp #$04	                cmp #4
.986c	90 09		bcc $9877	                bcc _output_string      ; less than 4, print a real string
.986e	ca		dex		                dex
.986f	ca		dex		                dex
.9870	95 00		sta $00,x	                sta 0,x
.9872	74 01		stz $01,x	                stz 1,x
.9874	4c 22 a5	jmp $a522	                jmp xt_u_dot            ; JSR/RTS as this routine is not compiled
.9877					_output_string:
.9877	a8		tay		                tay
.9878	b9 7e 98	lda $987e,y	                lda _wid_data,y
.987b	4c 4f d8	jmp $d84f	                jmp print_string_no_lf  ; JSR/RTS as this routine is not compiled
.987e					_wid_data:
>987e	03				        .byte str_wid_forth            ; WID 0: "Forth"
>987f	06				        .byte str_wid_editor           ; WID 1: "Editor"
>9880	07				        .byte str_wid_assembler        ; WID 2: "Assembler"
>9881	08				        .byte str_wid_root             ; WID 3: "Root"
.9882					xt_output:
.9882	ca		dex		                dex
.9883	ca		dex		                dex
.9884	a9 10		lda #$10	                lda #<output
.9886	95 00		sta $00,x	                sta 0,x
.9888	a9 00		lda #$00	                lda #>output
.988a	95 01		sta $01,x	                sta 1,x
.988c	60		rts		z_output:       rts
.988d					xt_over:
.988d	20 28 d8	jsr $d828	                jsr underflow_2
.9890	ca		dex		                dex
.9891	ca		dex		                dex
.9892	b5 04		lda $04,x	                lda 4,x         ; LSB
.9894	95 00		sta $00,x	                sta 0,x
.9896	b5 05		lda $05,x	                lda 5,x         ; MSB
.9898	95 01		sta $01,x	                sta 1,x
.989a	60		rts		z_over:         rts
.989b					xt_pad:
.989b	ca		dex		                dex
.989c	ca		dex		                dex
.989d	a5 00		lda $00		                lda cp
.989f	18		clc		                clc
.98a0	69 ff		adc #$ff	                adc #padoffset  ; assumes padoffset one byte in size
.98a2	95 00		sta $00,x	                sta 0,x
.98a4	a5 01		lda $01		                lda cp+1
.98a6	69 00		adc #$00	                adc #0          ; only need carry
.98a8	95 01		sta $01,x	                sta 1,x
.98aa	60		rts		z_pad:          rts
.98ab					xt_page:
.98ab	a9 1b		lda #$1b	                lda #AscESC
.98ad	20 f0 8d	jsr $8df0	                jsr emit_a
.98b0	a9 5b		lda #$5b	                lda #$5B        ; ASCII for "["
.98b2	20 f0 8d	jsr $8df0	                jsr emit_a
.98b5	a9 32		lda #$32	                lda #'2'
.98b7	20 f0 8d	jsr $8df0	                jsr emit_a
.98ba	a9 4a		lda #$4a	                lda #'J'
.98bc	20 f0 8d	jsr $8df0	                jsr emit_a
.98bf	20 9c a7	jsr $a79c	                jsr xt_zero
.98c2	20 9c a7	jsr $a79c	                jsr xt_zero
.98c5	20 50 83	jsr $8350	                jsr xt_at_xy
.98c8	60		rts		z_page:         rts
.98c9					xt_paren:
.98c9	ca		dex		                dex
.98ca	ca		dex		                dex
.98cb	a9 29		lda #$29	                lda #41     ; Right parenthesis
.98cd	95 00		sta $00,x	                sta 0,x
.98cf	74 01		stz $01,x	                stz 1,x
.98d1	20 34 99	jsr $9934	                jsr xt_parse
.98d4	e8		inx		                inx
.98d5	e8		inx		                inx
.98d6	e8		inx		                inx
.98d7	e8		inx		                inx
.98d8	60		rts		z_paren:        rts
.98d9					xt_parse_name:
.98d9	a5 0a		lda $0a		                lda ciblen              ; LSB of counter
.98db	38		sec		                sec
.98dc	e5 0c		sbc $0c		                sbc toin
.98de	85 24		sta $24		                sta tmp1
.98e0	a5 0b		lda $0b		                lda ciblen+1            ; MSB
.98e2	e5 0d		sbc $0d		                sbc toin+1
.98e4	85 25		sta $25		                sta tmp1+1
.98e6	a5 24		lda $24		                lda tmp1
.98e8	05 25		ora $25		                ora tmp1+1
.98ea	f0 28		beq $9914	                beq _empty_line
.98ec	a5 08		lda $08		                lda cib
.98ee	18		clc		                clc
.98ef	65 0c		adc $0c		                adc toin
.98f1	85 26		sta $26		                sta tmp2                ; LSB of first character
.98f3	a5 09		lda $09		                lda cib+1
.98f5	65 0d		adc $0d		                adc toin+1
.98f7	85 27		sta $27		                sta tmp2+1              ; MSB
.98f9					_skip_loop:
.98f9	b2 26		lda ($26)	                lda (tmp2)              ; work copy of cib
.98fb	20 16 d8	jsr $d816	                jsr is_whitespace
.98fe	90 1f		bcc $991f	                bcc _char_found
.9900	e6 26		inc $26		                inc tmp2
.9902	d0 02		bne $9906	                bne +
.9904	e6 27		inc $27		                inc tmp2+1
.9906					+
.9906	a5 24		lda $24		                lda tmp1
.9908	d0 02		bne $990c	                bne +
.990a	c6 25		dec $25		                dec tmp1+1
.990c	c6 24		dec $24		+               dec tmp1
.990e	a5 24		lda $24		                lda tmp1
.9910	05 25		ora $25		                ora tmp1+1
.9912	d0 e5		bne $98f9	                bne _skip_loop          ; fall through if empty line
.9914					_empty_line:
.9914	ca		dex		                dex
.9915	ca		dex		                dex
.9916	ca		dex		                dex
.9917	ca		dex		                dex
.9918	74 00		stz $00,x	                stz 0,x                 ; TOS is zero
.991a	74 01		stz $01,x	                stz 1,x
.991c	4c cb 99	jmp $99cb	                jmp z_parse_name        ; skip over PARSE
.991f					_char_found:
.991f	a5 26		lda $26		                lda tmp2
.9921	38		sec		                sec
.9922	e5 08		sbc $08		                sbc cib
.9924	85 0c		sta $0c		                sta toin
.9926	a5 27		lda $27		                lda tmp2+1
.9928	e5 09		sbc $09		                sbc cib+1
.992a	85 0d		sta $0d		                sta toin+1
.992c	ca		dex		                dex
.992d	ca		dex		                dex
.992e	a9 20		lda #$20	                lda #AscSP
.9930	95 00		sta $00,x	                sta 0,x
.9932	74 01		stz $01,x	                stz 1,x                 ; paranoid, now ( "name" c )
.9934					xt_parse:
.9934	20 23 d8	jsr $d823	                jsr underflow_1
.9937	a5 0a		lda $0a		                lda ciblen
.9939	05 0b		ora $0b		                ora ciblen+1
.993b	f0 0c		beq $9949	                beq _abort_parse
.993d	a5 0d		lda $0d		                lda toin+1              ; MSB
.993f	c5 0b		cmp $0b		                cmp ciblen+1
.9941	90 0e		bcc $9951	                bcc _go_parse           ; unsigned comparison
.9943	a5 0c		lda $0c		                lda toin                ; LSB
.9945	c5 0a		cmp $0a		                cmp ciblen
.9947	90 08		bcc $9951	                bcc _go_parse
.9949					_abort_parse:
.9949	ca		dex		                dex
.994a	ca		dex		                dex
.994b	74 00		stz $00,x	                stz 0,x
.994d	74 01		stz $01,x	                stz 1,x
.994f	80 7a		bra $99cb	                bra _done
.9951					_go_parse:
.9951	b5 00		lda $00,x	                lda 0,x
.9953	85 2c		sta $2c		                sta tmptos
.9955	ca		dex		                dex
.9956	ca		dex		                dex
.9957	a5 08		lda $08		                lda cib
.9959	18		clc		                clc
.995a	65 0c		adc $0c		                adc toin        ; LSB
.995c	85 24		sta $24		                sta tmp1
.995e	85 26		sta $26		                sta tmp2
.9960	95 02		sta $02,x	                sta 2,x
.9962	a5 09		lda $09		                lda cib+1
.9964	65 0d		adc $0d		                adc toin+1      ; MSB
.9966	85 25		sta $25		                sta tmp1+1
.9968	85 27		sta $27		                sta tmp2+1
.996a	95 03		sta $03,x	                sta 3,x
.996c	a5 08		lda $08		                lda cib
.996e	18		clc		                clc
.996f	65 0a		adc $0a		                adc ciblen
.9971	85 28		sta $28		                sta tmp3
.9973	a5 09		lda $09		                lda cib+1
.9975	65 0b		adc $0b		                adc ciblen+1
.9977	85 29		sta $29		                sta tmp3+1
.9979	64 2d		stz $2d		                stz tmptos+1
.997b					_loop:
.997b	a5 26		lda $26		                lda tmp2
.997d	c5 28		cmp $28		                cmp tmp3
.997f	d0 06		bne $9987	                bne _not_empty
.9981	a5 27		lda $27		                lda tmp2+1
.9983	c5 29		cmp $29		                cmp tmp3+1
.9985	f0 1d		beq $99a4	                beq _eol
.9987					_not_empty:
.9987	b2 26		lda ($26)	                lda (tmp2)
.9989	a4 2c		ldy $2c		                ldy tmptos
.998b	c0 20		cpy #$20	                cpy #AscSP
.998d	d0 07		bne $9996	                bne _not_whitespace
.998f	20 16 d8	jsr $d816	                jsr is_whitespace
.9992	90 02		bcc $9996	                bcc _not_whitespace
.9994	80 0c		bra $99a2	                bra _found_delimiter
.9996					_not_whitespace:
.9996	c5 2c		cmp $2c		                cmp tmptos
.9998	f0 08		beq $99a2	                beq _found_delimiter
.999a	e6 26		inc $26		                inc tmp2
.999c	d0 dd		bne $997b	                bne _loop
.999e	e6 27		inc $27		                inc tmp2+1
.99a0	80 d9		bra $997b	                bra _loop
.99a2					_found_delimiter:
.99a2	e6 2d		inc $2d		                inc tmptos+1
.99a4					_eol:
.99a4	a5 26		lda $26		                lda tmp2
.99a6	38		sec		                sec
.99a7	e5 24		sbc $24		                sbc tmp1
.99a9	95 00		sta $00,x	                sta 0,x
.99ab	a5 27		lda $27		                lda tmp2+1
.99ad	e5 25		sbc $25		                sbc tmp1+1
.99af	95 01		sta $01,x	                sta 1,x
.99b1	a5 26		lda $26		                lda tmp2
.99b3	38		sec		                sec
.99b4	e5 08		sbc $08		                sbc cib
.99b6	85 0c		sta $0c		                sta toin
.99b8	a5 27		lda $27		                lda tmp2+1
.99ba	e5 09		sbc $09		                sbc cib+1
.99bc	85 0d		sta $0d		                sta toin+1
.99be	a5 0c		lda $0c		                lda toin
.99c0	18		clc		                clc
.99c1	65 2d		adc $2d		                adc tmptos+1
.99c3	85 0c		sta $0c		                sta toin
.99c5	a5 0d		lda $0d		                lda toin+1
.99c7	69 00		adc #$00	                adc #0          ; we only need the carry
.99c9	85 0d		sta $0d		                sta toin+1
.99cb					_done:
.99cb					z_parse_name:
.99cb	60		rts		z_parse:        rts
.99cc					xt_pick:
.99cc	16 00		asl $00,x	                asl 0,x         ; we assume u < 128 (stack is small)
.99ce	8a		txa		                txa
.99cf	75 00		adc $00,x	                adc 0,x
.99d1	a8		tay		                tay
.99d2	b9 02 00	lda $0002,y	                lda 0002,y
.99d5	95 00		sta $00,x	                sta 0,x
.99d7	b9 03 00	lda $0003,y	                lda 0003,y
.99da	95 01		sta $01,x	                sta 1,x
.99dc	60		rts		z_pick:         rts
.99dd					xt_plus:
.99dd	20 28 d8	jsr $d828	                jsr underflow_2
.99e0	18		clc		                clc
.99e1	b5 00		lda $00,x	                lda 0,x         ; LSB
.99e3	75 02		adc $02,x	                adc 2,x
.99e5	95 02		sta $02,x	                sta 2,x
.99e7	b5 01		lda $01,x	                lda 1,x         ; MSB. No CLC, conserve carry bit
.99e9	75 03		adc $03,x	                adc 3,x
.99eb	95 03		sta $03,x	                sta 3,x
.99ed	e8		inx		                inx
.99ee	e8		inx		                inx
.99ef	60		rts		z_plus:         rts
.99f0					xt_plus_store:
.99f0	20 28 d8	jsr $d828	                jsr underflow_2
.99f3	b5 00		lda $00,x	                lda 0,x
.99f5	85 24		sta $24		                sta tmp1
.99f7	b5 01		lda $01,x	                lda 1,x
.99f9	85 25		sta $25		                sta tmp1+1
.99fb	a0 00		ldy #$00	                ldy #0          ; LSB
.99fd	b1 24		lda ($24),y	                lda (tmp1),y
.99ff	18		clc		                clc
.9a00	75 02		adc $02,x	                adc 2,x
.9a02	91 24		sta ($24),y	                sta (tmp1),y
.9a04	c8		iny		                iny             ; MSB
.9a05	b1 24		lda ($24),y	                lda (tmp1),y
.9a07	75 03		adc $03,x	                adc 3,x
.9a09	91 24		sta ($24),y	                sta (tmp1),y
.9a0b	e8		inx		                inx
.9a0c	e8		inx		                inx
.9a0d	e8		inx		                inx
.9a0e	e8		inx		                inx
.9a0f	60		rts		z_plus_store:   rts
.9a10					xt_postpone:
.9a10	20 d9 98	jsr $98d9	                jsr xt_parse_name               ; ( -- addr n )
.9a13	b5 00		lda $00,x	                lda 0,x
.9a15	15 01		ora $01,x	                ora 1,x
.9a17	d0 05		bne $9a1e	                bne +
.9a19	a9 05		lda #$05	                lda #err_noname
.9a1b	4c 39 d8	jmp $d839	                jmp error
.9a1e					+
.9a1e	20 d5 8f	jsr $8fd5	                jsr xt_find_name                ; ( -- nt | 0 )
.9a21	d0 05		bne $9a28	                bne +
.9a23	a9 05		lda #$05	                lda #err_noname
.9a25	4c 39 d8	jmp $d839	                jmp error
.9a28					+
.9a28	b5 00		lda $00,x	                lda 0,x
.9a2a	85 24		sta $24		                sta tmp1
.9a2c	b5 01		lda $01,x	                lda 1,x
.9a2e	85 25		sta $25		                sta tmp1+1
.9a30	20 db 95	jsr $95db	                jsr xt_name_to_int              ; ( nt -- xt )
.9a33	e6 24		inc $24		                inc tmp1
.9a35	d0 02		bne $9a39	                bne +
.9a37	e6 25		inc $25		                inc tmp1+1
.9a39					+
.9a39	b2 24		lda ($24)	                lda (tmp1)
.9a3b	29 04		and #$04	                and #IM         ; mask all but Intermediate flag
.9a3d	f0 05		beq $9a44	                beq _not_immediate
.9a3f	20 e7 87	jsr $87e7	                jsr xt_compile_comma
.9a42	80 0a		bra $9a4e	                bra _done
.9a44					_not_immediate:
.9a44	20 84 93	jsr $9384	                jsr xt_literal
.9a47	a0 87		ldy #$87	                ldy #>xt_compile_comma
.9a49	a9 e7		lda #$e7	                lda #<xt_compile_comma
.9a4b	20 c6 d6	jsr $d6c6	                jsr cmpl_subroutine
.9a4e					_done:
.9a4e	60		rts		z_postpone:     rts
.9a4f					xt_previous:
.9a4f	20 2e 91	jsr $912e	                jsr xt_get_order
.9a52	20 3c 96	jsr $963c	                jsr xt_nip
.9a55	20 0b 98	jsr $980b	                jsr xt_one_minus
.9a58	20 15 9d	jsr $9d15	                jsr xt_set_order
.9a5b	60		rts		z_previous:     rts
.9a5c					xt_question:
.9a5c	20 7a 8f	jsr $8f7a	                jsr xt_fetch
.9a5f	20 30 8c	jsr $8c30	                jsr xt_dot
.9a62	60		rts		z_question:     rts
.9a63					xt_question_dup:
.9a63	20 23 d8	jsr $d823	                jsr underflow_1
.9a66	b5 00		lda $00,x	                lda 0,x
.9a68	15 01		ora $01,x	                ora 1,x
.9a6a	f0 0a		beq $9a76	                beq _done
.9a6c	ca		dex		                dex
.9a6d	ca		dex		                dex
.9a6e	b5 02		lda $02,x	                lda 2,x
.9a70	95 00		sta $00,x	                sta 0,x
.9a72	b5 03		lda $03,x	                lda 3,x
.9a74	95 01		sta $01,x	                sta 1,x
.9a76					_done:
.9a76	60		rts		z_question_dup: rts
.9a77					xt_r_fetch:
.9a77	7a		ply		                ply             ; LSB
.9a78	84 24		sty $24		                sty tmp1
.9a7a	7a		ply		                ply             ; MSB
.9a7b	ca		dex		                dex
.9a7c	ca		dex		                dex
.9a7d	68		pla		                pla             ; LSB
.9a7e	95 00		sta $00,x	                sta 0,x
.9a80	68		pla		                pla             ; MSB
.9a81	95 01		sta $01,x	                sta 1,x
.9a83	48		pha		                pha
.9a84	b5 00		lda $00,x	                lda 0,x
.9a86	48		pha		                pha
.9a87	5a		phy		                phy             ; MSB
.9a88	a4 24		ldy $24		                ldy tmp1
.9a8a	5a		phy		                phy             ; LSB
.9a8b	60		rts		z_r_fetch:      rts
.9a8c					xt_r_from:
.9a8c	68		pla		                pla             ; LSB
.9a8d	85 2c		sta $2c		                sta tmptos
.9a8f	7a		ply		                ply             ; MSB
.9a90	ca		dex		                dex
.9a91	ca		dex		                dex
.9a92	68		pla		                pla             ; LSB
.9a93	95 00		sta $00,x	                sta 0,x
.9a95	68		pla		                pla             ; MSB
.9a96	95 01		sta $01,x	                sta 1,x
.9a98	5a		phy		                phy             ; MSB
.9a99	a5 2c		lda $2c		                lda tmptos
.9a9b	48		pha		                pha             ; LSB
.9a9c	60		rts		z_r_from:       rts
.9a9d					xt_r_to_input:
.9a9d	68		pla		                pla
.9a9e	85 24		sta $24		                sta tmp1
.9aa0	68		pla		                pla
.9aa1	85 25		sta $25		                sta tmp1+1
.9aa3	a0 00		ldy #$00	                ldy #0
.9aa5					_loop:
.9aa5	68		pla		                pla
.9aa6	99 06 00	sta $0006,y	                sta insrc,y
.9aa9	c8		iny		                iny
.9aaa	c0 08		cpy #$08	                cpy #8
.9aac	d0 f7		bne $9aa5	                bne _loop
.9aae	a5 25		lda $25		                lda tmp1+1
.9ab0	48		pha		                pha
.9ab1	a5 24		lda $24		                lda tmp1
.9ab3	48		pha		                pha
.9ab4	60		rts		z_r_to_input: 	rts
.9ab5					xt_recurse:
.9ab5	a0 00		ldy #$00	                ldy #0
.9ab7	a9 20		lda #$20	                lda #$20        ; opcode for JSR
.9ab9	91 00		sta ($00),y	                sta (cp),y
.9abb	c8		iny		                iny
.9abc	24 20		bit $20		                bit status
.9abe	70 0c		bvs $9acc	                bvs _nt_in_workword
.9ac0	a5 04		lda $04		                lda workword
.9ac2	91 00		sta ($00),y	                sta (cp),y
.9ac4	c8		iny		                iny
.9ac5	a5 05		lda $05		                lda workword+1
.9ac7	91 00		sta ($00),y	                sta (cp),y
.9ac9	c8		iny		                iny
.9aca	80 1b		bra $9ae7	                bra _update_cp
.9acc					_nt_in_workword:
.9acc	a5 04		lda $04		                lda workword            ; LSB
.9ace	18		clc		                clc
.9acf	69 04		adc #$04	                adc #4
.9ad1	85 24		sta $24		                sta tmp1
.9ad3	a5 05		lda $05		                lda workword+1          ; MSB
.9ad5	69 00		adc #$00	                adc #0
.9ad7	85 25		sta $25		                sta tmp1+1
.9ad9	b2 24		lda ($24)	                lda (tmp1)
.9adb	91 00		sta ($00),y	                sta (cp),y
.9add	5a		phy		                phy
.9ade	a0 01		ldy #$01	                ldy #1
.9ae0	b1 24		lda ($24),y	                lda (tmp1),y
.9ae2	7a		ply		                ply
.9ae3	c8		iny		                iny
.9ae4	91 00		sta ($00),y	                sta (cp),y
.9ae6	c8		iny		                iny
.9ae7					_update_cp:
.9ae7	98		tya		                tya
.9ae8	18		clc		                clc
.9ae9	65 00		adc $00		                adc cp
.9aeb	85 00		sta $00		                sta cp
.9aed	90 02		bcc $9af1	                bcc _done
.9aef	e6 01		inc $01		                inc cp+1
.9af1					_done:
.9af1	60		rts		z_recurse:      rts
.9af2					xt_refill:
.9af2	a5 06		lda $06		                lda insrc               ; cheat: We only check LSB
.9af4	d0 2d		bne $9b23	                bne _src_not_kbd
.9af6	ca		dex		                dex
.9af7	ca		dex		                dex
.9af8	ca		dex		                dex
.9af9	ca		dex		                dex
.9afa	a5 08		lda $08		                lda cib                 ; address of CIB is NOS
.9afc	95 02		sta $02,x	                sta 2,x
.9afe	a5 09		lda $09		                lda cib+1
.9b00	95 03		sta $03,x	                sta 3,x
.9b02	64 0a		stz $0a		                stz ciblen              ; go in with empty buffer
.9b04	64 0b		stz $0b		                stz ciblen+1
.9b06	a9 ff		lda #$ff	                lda #bsize              ; max number of chars is TOS
.9b08	95 00		sta $00,x	                sta 0,x
.9b0a	74 01		stz $01,x	                stz 1,x                 ; cheat: We only accept max 255
.9b0c	20 4e 81	jsr $814e	                jsr xt_accept           ; ( addr n1 -- n2)
.9b0f	b5 00		lda $00,x	                lda 0,x
.9b11	85 0a		sta $0a		                sta ciblen
.9b13	b5 01		lda $01,x	                lda 1,x
.9b15	85 0b		sta $0b		                sta ciblen+1            ; though we only accept 255 chars
.9b17	64 0c		stz $0c		                stz toin
.9b19	64 0d		stz $0d		                stz toin+1
.9b1b	a9 ff		lda #$ff	                lda #$FF                ; overwrite with TRUE flag
.9b1d	95 00		sta $00,x	                sta 0,x
.9b1f	95 01		sta $01,x	                sta 1,x
.9b21	80 10		bra $9b33	                bra _done
.9b23					_src_not_kbd:
.9b23	1a		inc a		                ina
.9b24	d0 08		bne $9b2e	                bne _src_not_string
.9b26	ca		dex		                dex
.9b27	ca		dex		                dex
.9b28	74 00		stz $00,x	                stz 0,x
.9b2a	74 01		stz $01,x	                stz 1,x
.9b2c	80 05		bra $9b33	                bra z_refill
.9b2e					_src_not_string:
.9b2e	a9 01		lda #$01	                lda #err_badsource
.9b30	4c 39 d8	jmp $d839	                jmp error
.9b33					_done:
.9b33	60		rts		z_refill:       rts
.9b34					xt_repeat:
.9b34	20 89 82	jsr $8289	                jsr xt_again
.9b37	20 6c 91	jsr $916c	                jsr xt_here
.9b3a	20 a2 a1	jsr $a1a2	                jsr xt_swap
.9b3d	20 81 a1	jsr $a181	                jsr xt_store
.9b40	60		rts		z_repeat:       rts
.9b41					xt_right_bracket:
.9b41	a9 ff		lda #$ff	                lda #$FF
.9b43	85 16		sta $16		                sta state
.9b45	85 17		sta $17		                sta state+1
.9b47					z_right_bracket:
.9b47	60		rts		                rts
.9b48					xt_root_wordlist:
.9b48	ca		dex		                dex             ; The WID for the Root wordlist is 3.
.9b49	ca		dex		                dex
.9b4a	a9 03		lda #$03	                lda #3
.9b4c	95 00		sta $00,x	                sta 0,x
.9b4e	74 01		stz $01,x	                stz 1,x
.9b50					z_root_wordlist:
.9b50	60		rts		                rts
.9b51					xt_rot:
.9b51	20 2d d8	jsr $d82d	                jsr underflow_3
.9b54	b4 05		ldy $05,x	                ldy 5,x         ; MSB first
.9b56	b5 03		lda $03,x	                lda 3,x
.9b58	95 05		sta $05,x	                sta 5,x
.9b5a	b5 01		lda $01,x	                lda 1,x
.9b5c	95 03		sta $03,x	                sta 3,x
.9b5e	94 01		sty $01,x	                sty 1,x
.9b60	b4 04		ldy $04,x	                ldy 4,x         ; LSB next
.9b62	b5 02		lda $02,x	                lda 2,x
.9b64	95 04		sta $04,x	                sta 4,x
.9b66	b5 00		lda $00,x	                lda 0,x
.9b68	95 02		sta $02,x	                sta 2,x
.9b6a	94 00		sty $00,x	                sty 0,x
.9b6c	60		rts		z_rot:          rts
.9b6d					xt_rshift:
.9b6d	20 28 d8	jsr $d828	                jsr underflow_2
.9b70	b5 00		lda $00,x	                lda 0,x
.9b72	29 0f		and #$0f	                and #%00001111
.9b74	f0 08		beq $9b7e	                beq _done               ; if 0 shifts, quit
.9b76	a8		tay		                tay
.9b77					_loop:
.9b77	56 03		lsr $03,x	                lsr 3,x
.9b79	76 02		ror $02,x	                ror 2,x
.9b7b	88		dey		                dey
.9b7c	d0 f9		bne $9b77	                bne _loop
.9b7e					_done:
.9b7e	e8		inx		                inx
.9b7f	e8		inx		                inx
.9b80	60		rts		z_rshift:       rts
.9b81					xt_s_backslash_quote:
.9b81	a9 ff		lda #$ff	                lda #$FF
.9b83	85 26		sta $26		                sta tmp2
.9b85	64 27		stz $27		                stz tmp2+1
.9b87	20 4d 9d	jsr $9d4d	                jsr s_quote_start
.9b8a					_done:
.9b8a					z_s_backslash_quote:
.9b8a	60		rts		                rts
.9b8b					convert_hex_value:
.9b8b	c9 41		cmp #$41	        cmp #'A'
.9b8d	90 07		bcc $9b96	        bcc _digit
.9b8f	29 df		and #$df	        and #$DF                ; Make it uppercase.
.9b91	38		sec		        sec
.9b92	e9 37		sbc #$37	        sbc #'7'                 ; gives value 10 for 'A'
.9b94	80 03		bra $9b99	        bra _done
.9b96					_digit:
.9b96	38		sec		        sec
.9b97	e9 30		sbc #$30	        sbc #'0'
.9b99					_done:
.9b99	60		rts		        rts
.9b9a					xt_search_wordlist:
.9b9a	20 2d d8	jsr $d82d	                jsr underflow_3
.9b9d	a5 1e		lda $1e		                lda up
.9b9f	18		clc		                clc
.9ba0	69 06		adc #$06	                adc #wordlists_offset
.9ba2	85 26		sta $26		                sta tmp2
.9ba4	a5 1f		lda $1f		                lda up+1
.9ba6	69 00		adc #$00	                adc #0          ; Adding carry
.9ba8	85 27		sta $27		                sta tmp2+1
.9baa	b5 00		lda $00,x	                lda 0,x
.9bac	0a		asl a		                asl             ; Convert wid to offset in cells (x2)
.9bad	65 26		adc $26		                adc tmp2
.9baf	85 26		sta $26		                sta tmp2
.9bb1	90 02		bcc $9bb5	                bcc +
.9bb3	e6 27		inc $27		                inc tmp2+1      ; Propagate carry if needed.
.9bb5					+
.9bb5	e8		inx		                inx
.9bb6	e8		inx		                inx
.9bb7	b5 00		lda $00,x	                lda 0,x
.9bb9	15 01		ora $01,x	                ora 1,x
.9bbb	d0 03		bne $9bc0	                bne _check_wordlist
.9bbd	4c 78 9c	jmp $9c78	                jmp _done
.9bc0					_check_wordlist:
.9bc0	a5 26		lda $26		                lda tmp2
.9bc2	05 27		ora $27		                ora tmp2+1
.9bc4	d0 03		bne $9bc9	                bne _have_string
.9bc6	4c 78 9c	jmp $9c78	                jmp _done
.9bc9					_have_string:
.9bc9	b2 26		lda ($26)	                lda (tmp2)              ; nt of first word in Dictionary
.9bcb	85 24		sta $24		                sta tmp1
.9bcd	e6 26		inc $26		                inc tmp2                ; Move to the upper byte
.9bcf	d0 02		bne $9bd3	                bne +
.9bd1	e6 27		inc $27		                inc tmp2+1
.9bd3					+
.9bd3	b2 26		lda ($26)	                lda (tmp2)
.9bd5	85 25		sta $25		                sta tmp1+1
.9bd7	b5 02		lda $02,x	                lda 2,x                 ; Address of mystery string
.9bd9	85 26		sta $26		                sta tmp2
.9bdb	b5 03		lda $03,x	                lda 3,x
.9bdd	85 27		sta $27		                sta tmp2+1
.9bdf					_loop:
.9bdf	b2 24		lda ($24)	                lda (tmp1)
.9be1	d5 00		cmp $00,x	                cmp 0,x
.9be3	d0 7b		bne $9c60	                bne _next_entry
.9be5					_compare_string:
.9be5	b2 26		lda ($26)	                lda (tmp2)      ; first character of mystery string
.9be7	c9 5b		cmp #$5b	                cmp #$5B        ; ASCII '[' (one past Z)
.9be9	b0 07		bcs $9bf2	                bcs _compare_first
.9beb	c9 41		cmp #$41	                cmp #$41        ; ASCII 'A'
.9bed	90 03		bcc $9bf2	                bcc _compare_first
.9bef	18		clc		                clc
.9bf0	69 20		adc #$20	                adc #$20
.9bf2					_compare_first:
.9bf2	a0 08		ldy #$08	                ldy #8          ; Offset in nt to name
.9bf4	d1 24		cmp ($24),y	                cmp (tmp1),y    ; first character of current word
.9bf6	d0 68		bne $9c60	                bne _next_entry
.9bf8	b5 00		lda $00,x	                lda 0,x
.9bfa	3a		dec a		                dea
.9bfb	f0 2c		beq $9c29	                beq _success
.9bfd	a5 24		lda $24		                lda tmp1
.9bff	48		pha		                pha             ; Preserve tmp1 on the return stack.
.9c00	18		clc		                clc
.9c01	69 08		adc #$08	                adc #8
.9c03	85 24		sta $24		                sta tmp1        ; Reusing tmp1 temporarily for string check.
.9c05	a5 25		lda $25		                lda tmp1+1
.9c07	48		pha		                pha             ; Preserve tmp1+1 on the return stack.
.9c08	69 00		adc #$00	                adc #0          ; we only need the carry
.9c0a	85 25		sta $25		                sta tmp1+1
.9c0c	b4 00		ldy $00,x	                ldy 0,x         ; index is length of string minus 1
.9c0e	88		dey		                dey
.9c0f					_string_loop:
.9c0f	b1 26		lda ($26),y	                lda (tmp2),y    ; last char of mystery string
.9c11	c9 5b		cmp #$5b	                cmp #$5B         ; ASCII '[' (one past Z)
.9c13	b0 07		bcs $9c1c	                bcs _check_char
.9c15	c9 41		cmp #$41	                cmp #$41        ; ASCII 'A'
.9c17	90 03		bcc $9c1c	                bcc _check_char
.9c19	18		clc		                clc
.9c1a	69 20		adc #$20	                adc #$20
.9c1c					_check_char:
.9c1c	d1 24		cmp ($24),y	                cmp (tmp1),y    ; last char of word we're testing against
.9c1e	d0 3a		bne $9c5a	                bne _next_entry_tmp1
.9c20	88		dey		                dey
.9c21	d0 ec		bne $9c0f	                bne _string_loop
.9c23					_success_tmp1:
.9c23	68		pla		                pla             ; Restore tmp1 from the return stack.
.9c24	85 25		sta $25		                sta tmp1+1
.9c26	68		pla		                pla
.9c27	85 24		sta $24		                sta tmp1
.9c29					_success:
.9c29	e8		inx		                inx
.9c2a	e8		inx		                inx
.9c2b	a5 24		lda $24		                lda tmp1
.9c2d	95 00		sta $00,x	                sta 0,x
.9c2f	a5 25		lda $25		                lda tmp1+1
.9c31	95 01		sta $01,x	                sta 1,x
.9c33	20 a9 8d	jsr $8da9	                jsr xt_dup              ; ( nt nt )
.9c36	20 db 95	jsr $95db	                jsr xt_name_to_int      ; ( nt xt )
.9c39	20 a2 a1	jsr $a1a2	                jsr xt_swap             ; ( xt nt )
.9c3c	a0 00		ldy #$00	                ldy #0                  ; Prepare flag
.9c3e	f6 00		inc $00,x	                inc 0,x
.9c40	d0 02		bne $9c44	                bne +
.9c42	f6 01		inc $01,x	                inc 1,x                 ; ( xt nt+1 )
.9c44					+
.9c44	a1 00		lda ($00,x)	                lda (0,x)               ; ( xt char )
.9c46	29 04		and #$04	                and #IM
.9c48	d0 08		bne $9c52	                bne _immediate          ; bit set, we're immediate
.9c4a	a9 ff		lda #$ff	                lda #$FF                ; We're not immediate, return -1
.9c4c	95 00		sta $00,x	                sta 0,x
.9c4e	95 01		sta $01,x	                sta 1,x
.9c50	80 28		bra $9c7a	                bra _done_nodrop
.9c52					_immediate:
.9c52	a9 01		lda #$01	                lda #1                  ; We're immediate, return 1
.9c54	95 00		sta $00,x	                sta 0,x
.9c56	74 01		stz $01,x	                stz 1,x
.9c58	80 20		bra $9c7a	                bra _done_nodrop
.9c5a					_next_entry_tmp1:
.9c5a	68		pla		                pla             ; Restore tmp1 from the return stack.
.9c5b	85 25		sta $25		                sta tmp1+1
.9c5d	68		pla		                pla
.9c5e	85 24		sta $24		                sta tmp1
.9c60					_next_entry:
.9c60	a0 02		ldy #$02	                ldy #2
.9c62	b1 24		lda ($24),y	                lda (tmp1),y
.9c64	48		pha		                pha
.9c65	c8		iny		                iny
.9c66	b1 24		lda ($24),y	                lda (tmp1),y
.9c68	85 25		sta $25		                sta tmp1+1
.9c6a	68		pla		                pla
.9c6b	85 24		sta $24		                sta tmp1
.9c6d	05 25		ora $25		                ora tmp1+1
.9c6f	f0 03		beq $9c74	                beq _fail_done
.9c71	4c df 9b	jmp $9bdf	                jmp _loop
.9c74					_fail_done:
.9c74	74 02		stz $02,x	                stz 2,x         ; failure flag
.9c76	74 03		stz $03,x	                stz 3,x
.9c78					_done:
.9c78	e8		inx		                inx
.9c79	e8		inx		                inx
.9c7a					_done_nodrop:
.9c7a					z_search_wordlist:
.9c7a	60		rts		                rts
.9c7b					xt_see:
.9c7b	20 d9 98	jsr $98d9	                jsr xt_parse_name       ; ( addr u )
.9c7e	20 d5 8f	jsr $8fd5	                jsr xt_find_name        ; ( nt | 0 )
.9c81	b5 00		lda $00,x	                lda 0,x
.9c83	15 01		ora $01,x	                ora 1,x
.9c85	d0 05		bne $9c8c	                bne +
.9c87	a9 05		lda #$05	                lda #err_noname
.9c89	4c 39 d8	jmp $d839	                jmp error
.9c8c					+
.9c8c	20 5d 89	jsr $895d	                jsr xt_cr
.9c8f	a5 18		lda $18		                lda base
.9c91	48		pha		                pha
.9c92	20 77 91	jsr $9177	                jsr xt_hex
.9c95	a9 0a		lda #$0a	                lda #str_see_nt
.9c97	20 4f d8	jsr $d84f	                jsr print_string_no_lf
.9c9a	20 a9 8d	jsr $8da9	                jsr xt_dup              ; ( nt nt )
.9c9d	20 22 a5	jsr $a522	                jsr xt_u_dot
.9ca0	20 18 a1	jsr $a118	                jsr xt_space            ; ( nt )
.9ca3	20 a9 8d	jsr $8da9	                jsr xt_dup              ; ( nt nt )
.9ca6	20 db 95	jsr $95db	                jsr xt_name_to_int      ; ( nt xt )
.9ca9	a9 0b		lda #$0b	                lda #str_see_xt
.9cab	20 4f d8	jsr $d84f	                jsr print_string_no_lf
.9cae	20 a9 8d	jsr $8da9	                jsr xt_dup              ; ( nt xt xt )
.9cb1	20 22 a5	jsr $a522	                jsr xt_u_dot
.9cb4	20 5d 89	jsr $895d	                jsr xt_cr               ; ( nt xt )
.9cb7	a9 09		lda #$09	                lda #str_see_flags
.9cb9	20 4f d8	jsr $d84f	                jsr print_string_no_lf
.9cbc	20 8d 98	jsr $988d	                jsr xt_over             ; ( nt xt nt )
.9cbf	20 17 98	jsr $9817	                jsr xt_one_plus         ; ( nt xt nt+1 )
.9cc2	20 7a 8f	jsr $8f7a	                jsr xt_fetch            ; ( nt xt flags )
.9cc5	b5 00		lda $00,x	                lda 0,x
.9cc7	a0 06		ldy #$06	                ldy #6                  ; Not all bits are used
.9cc9					_flag_loop:
.9cc9	48		pha		                pha
.9cca	29 01		and #$01	                and #%00000001
.9ccc	18		clc		                clc
.9ccd	69 30		adc #$30	                adc #$30                ; ASCII "0"
.9ccf	20 f0 8d	jsr $8df0	                jsr emit_a
.9cd2	20 18 a1	jsr $a118	                jsr xt_space
.9cd5	68		pla		                pla
.9cd6	6a		ror a		                ror                     ; Next flag
.9cd7	88		dey		                dey
.9cd8	d0 ef		bne $9cc9	                bne _flag_loop
.9cda	20 5d 89	jsr $895d	                jsr xt_cr
.9cdd	e8		inx		                inx
.9cde	e8		inx		                inx                     ; ( nt xt )
.9cdf	a9 0c		lda #$0c	                lda #str_see_size
.9ce1	20 4f d8	jsr $d84f	                jsr print_string_no_lf
.9ce4	20 a2 a1	jsr $a1a2	                jsr xt_swap             ; ( xt nt )
.9ce7	20 69 a7	jsr $a769	                jsr xt_wordsize         ; ( xt u )
.9cea	20 a9 8d	jsr $8da9	                jsr xt_dup              ; ( xt u u ) for DUMP and DISASM
.9ced	20 9f 8a	jsr $8a9f	                jsr xt_decimal
.9cf0	20 22 a5	jsr $a522	                jsr xt_u_dot            ; ( xt u )
.9cf3	20 77 91	jsr $9177	                jsr xt_hex
.9cf6	20 5d 89	jsr $895d	                jsr xt_cr
.9cf9	20 ac a3	jsr $a3ac	                jsr xt_two_dup          ; ( xt u xt u )
.9cfc	20 2e 8d	jsr $8d2e	                jsr xt_dump
.9cff	20 5d 89	jsr $895d	                jsr xt_cr
.9d02	20 34 8b	jsr $8b34	                jsr xt_disasm
.9d05	68		pla		                pla
.9d06	85 18		sta $18		                sta base
.9d08	60		rts		z_see:          rts
.9d09					xt_set_current:
.9d09	20 23 d8	jsr $d823	                jsr underflow_1
.9d0c	a0 04		ldy #$04	                ldy #current_offset
.9d0e	b5 00		lda $00,x	                lda 0,x         ; CURRENT is byte variable
.9d10	91 1e		sta ($1e),y	                sta (up),y      ; so only the LSB is used.
.9d12	e8		inx		                inx
.9d13	e8		inx		                inx
.9d14	60		rts		z_set_current:  rts
.9d15					xt_set_order:
.9d15	a9 ff		lda #$ff	                lda #$FF
.9d17	d5 01		cmp $01,x	                cmp 1,x
.9d19	d0 12		bne $9d2d	                bne _start
.9d1b	d5 00		cmp $00,x	                cmp 0,x
.9d1d	d0 0e		bne $9d2d	                bne _start
.9d1f	ca		dex		                dex             ; Make room for the count.
.9d20	ca		dex		                dex
.9d21	74 03		stz $03,x	                stz 3,x         ; ROOT-WORDLIST is 3
.9d23	a9 03		lda #$03	                lda #3
.9d25	95 02		sta $02,x	                sta 2,x
.9d27	74 01		stz $01,x	                stz 1,x         ; Count is 1.
.9d29	a9 01		lda #$01	                lda #1
.9d2b	95 00		sta $00,x	                sta 0,x
.9d2d					_start:
.9d2d	a0 1e		ldy #$1e	                ldy #num_order_offset
.9d2f	b5 00		lda $00,x	                lda 0,x
.9d31	91 1e		sta ($1e),y	                sta (up),y      ; #ORDER is a byte variable.
.9d33	85 24		sta $24		                sta tmp1        ; Save a copy for zero check and looping.
.9d35	e8		inx		                inx             ; Drop the count off the data stack.
.9d36	e8		inx		                inx
.9d37	a5 24		lda $24		                lda tmp1
.9d39	f0 0d		beq $9d48	                beq _done       ; If zero, there are no wordlists.
.9d3b	a0 1f		ldy #$1f	                ldy #search_order_offset
.9d3d					_loop:
.9d3d	b5 00		lda $00,x	                lda 0,x         ; The search order is a byte array
.9d3f	91 1e		sta ($1e),y	                sta (up),y      ; so only save the LSB
.9d41	c8		iny		                iny
.9d42	e8		inx		                inx
.9d43	e8		inx		                inx
.9d44	c6 24		dec $24		                dec tmp1
.9d46	d0 f5		bne $9d3d	                bne _loop
.9d48					_done:
.9d48	60		rts		z_set_order:    rts
.9d49					xt_s_quote:
.9d49	64 26		stz $26		                stz tmp2
.9d4b	64 27		stz $27		                stz tmp2+1
.9d4d					s_quote_start:
.9d4d	ca		dex		                dex
.9d4e	ca		dex		                dex
.9d4f	ca		dex		                dex
.9d50	ca		dex		                dex
.9d51	a9 4c		lda #$4c	                lda #$4C
.9d53	20 d6 d6	jsr $d6d6	                jsr cmpl_a
.9d56	20 d6 d6	jsr $d6d6	                jsr cmpl_a
.9d59	20 d6 d6	jsr $d6d6	                jsr cmpl_a
.9d5c	a5 00		lda $00		                lda cp
.9d5e	95 02		sta $02,x	                sta 2,x
.9d60	a5 01		lda $01		                lda cp+1
.9d62	95 03		sta $03,x	                sta 3,x
.9d64					_savechars_loop:
.9d64	a5 0d		lda $0d		                lda toin+1              ; MSB
.9d66	c5 0b		cmp $0b		                cmp ciblen+1
.9d68	90 2a		bcc $9d94	                bcc _input_fine         ; unsigned comparison
.9d6a	a5 0c		lda $0c		                lda toin                ; LSB
.9d6c	c5 0a		cmp $0a		                cmp ciblen
.9d6e	90 24		bcc $9d94	                bcc _input_fine
.9d70	a5 26		lda $26		                lda tmp2
.9d72	48		pha		                pha
.9d73	a5 27		lda $27		                lda tmp2+1
.9d75	48		pha		                pha
.9d76	a5 28		lda $28		                lda tmp3    ; Only tmp3 used, so don't bother with tmp3+1
.9d78	48		pha		                pha
.9d79	20 f2 9a	jsr $9af2	                jsr xt_refill           ; ( -- f )
.9d7c	68		pla		                pla
.9d7d	85 28		sta $28		                sta tmp3
.9d7f	68		pla		                pla
.9d80	85 27		sta $27		                sta tmp2+1
.9d82	68		pla		                pla
.9d83	85 26		sta $26		                sta tmp2
.9d85	b5 00		lda $00,x	                lda 0,x
.9d87	15 01		ora $01,x	                ora 1,x
.9d89	d0 05		bne $9d90	                bne _refill_ok
.9d8b	a9 06		lda #$06	                lda #err_refill
.9d8d	4c 39 d8	jmp $d839	                jmp error
.9d90					_refill_ok:
.9d90	e8		inx		                inx
.9d91	e8		inx		                inx
.9d92	80 d0		bra $9d64	                bra _savechars_loop
.9d94					_input_fine:
.9d94	a5 08		lda $08		                lda cib
.9d96	18		clc		                clc
.9d97	65 0c		adc $0c		                adc toin        ; LSB
.9d99	85 24		sta $24		                sta tmp1
.9d9b	a5 09		lda $09		                lda cib+1
.9d9d	65 0d		adc $0d		                adc toin+1      ; MSB
.9d9f	85 25		sta $25		                sta tmp1+1
.9da1	b2 24		lda ($24)	                lda (tmp1)
.9da3	24 26		bit $26		                bit tmp2
.9da5	30 03		bmi $9daa	                bmi _handle_escapes    ; Only checking bit 7
.9da7	4c 62 9e	jmp $9e62	                jmp _regular_char
.9daa					_handle_escapes:
.9daa	24 27		bit $27		                bit tmp2+1
.9dac	30 03		bmi $9db1	                bmi _escaped
.9dae	4c 58 9e	jmp $9e58	                jmp _not_escaped
.9db1					_escaped:
.9db1	70 22		bvs $9dd5	                bvs _check_esc_chars
.9db3	a9 01		lda #$01	                lda #1
.9db5	24 27		bit $27		                bit tmp2+1
.9db7	d0 10		bne $9dc9	                bne _esc_x_second_digit
.9db9	e6 27		inc $27		                inc tmp2+1  ; Adjust flag for second digit next time.
.9dbb	b2 24		lda ($24)	                lda (tmp1)  ; Get the char again.
.9dbd	20 8b 9b	jsr $9b8b	                jsr convert_hex_value
.9dc0	0a		asl a		                asl
.9dc1	0a		asl a		                asl
.9dc2	0a		asl a		                asl
.9dc3	0a		asl a		                asl
.9dc4	85 28		sta $28		                sta tmp3    ; Save it for later.
.9dc6	4c 69 9e	jmp $9e69	                jmp _next_character
.9dc9					_esc_x_second_digit:
.9dc9	64 27		stz $27		                stz tmp2+1
.9dcb	b2 24		lda ($24)	                lda (tmp1)
.9dcd	20 8b 9b	jsr $9b8b	                jsr convert_hex_value
.9dd0	05 28		ora $28		                ora tmp3
.9dd2	4c 66 9e	jmp $9e66	                jmp _save_character
.9dd5					_check_esc_chars:
.9dd5	64 27		stz $27		                stz tmp2+1
.9dd7					_check_esc_a:
.9dd7	c9 61		cmp #$61	                cmp #'a'
.9dd9	d0 05		bne $9de0	                bne _check_esc_b
.9ddb	a9 07		lda #$07	                lda #7
.9ddd	4c 66 9e	jmp $9e66	                jmp _save_character
.9de0					_check_esc_b:
.9de0	c9 62		cmp #$62	                cmp #'b'
.9de2	d0 05		bne $9de9	                bne _check_esc_e
.9de4	a9 08		lda #$08	                lda #8
.9de6	4c 66 9e	jmp $9e66	                jmp _save_character
.9de9					_check_esc_e:
.9de9	c9 65		cmp #$65	                cmp #'e'
.9deb	d0 04		bne $9df1	                bne _check_esc_f
.9ded	a9 1b		lda #$1b	                lda #27
.9def	80 75		bra $9e66	                bra _save_character
.9df1					_check_esc_f:
.9df1	c9 66		cmp #$66	                cmp #'f'
.9df3	d0 04		bne $9df9	                bne _check_esc_l
.9df5	a9 0c		lda #$0c	                lda #12
.9df7	80 6d		bra $9e66	                bra _save_character
.9df9					_check_esc_l:
.9df9	c9 6c		cmp #$6c	                cmp #'l'
.9dfb	d0 04		bne $9e01	                bne _check_esc_m
.9dfd	a9 0a		lda #$0a	                lda #10
.9dff	80 65		bra $9e66	                bra _save_character
.9e01					_check_esc_m:
.9e01	c9 6d		cmp #$6d	                cmp #'m'
.9e03	d0 09		bne $9e0e	                bne _check_esc_n
.9e05	a9 0d		lda #$0d	                lda #13
.9e07	20 d6 d6	jsr $d6d6	                jsr cmpl_a
.9e0a	a9 0a		lda #$0a	                lda #10
.9e0c	80 58		bra $9e66	                bra _save_character
.9e0e					_check_esc_n:
.9e0e	c9 6e		cmp #$6e	                cmp #'n'
.9e10	d0 04		bne $9e16	                bne _check_esc_q
.9e12	a9 0a		lda #$0a	                lda #10
.9e14	80 50		bra $9e66	                bra _save_character
.9e16					_check_esc_q:
.9e16	c9 71		cmp #$71	                cmp #'q'
.9e18	d0 04		bne $9e1e	                bne _check_esc_r
.9e1a	a9 22		lda #$22	                lda #34
.9e1c	80 48		bra $9e66	                bra _save_character
.9e1e					_check_esc_r:
.9e1e	c9 72		cmp #$72	                cmp #'r'
.9e20	d0 04		bne $9e26	                bne _check_esc_t
.9e22	a9 0d		lda #$0d	                lda #13
.9e24	80 40		bra $9e66	                bra _save_character
.9e26					_check_esc_t:
.9e26	c9 74		cmp #$74	                cmp #'t'
.9e28	d0 04		bne $9e2e	                bne _check_esc_v
.9e2a	a9 09		lda #$09	                lda #9
.9e2c	80 38		bra $9e66	                bra _save_character
.9e2e					_check_esc_v:
.9e2e	c9 76		cmp #$76	                cmp #'v'
.9e30	d0 04		bne $9e36	                bne _check_esc_z
.9e32	a9 0b		lda #$0b	                lda #11
.9e34	80 30		bra $9e66	                bra _save_character
.9e36					_check_esc_z:
.9e36	c9 7a		cmp #$7a	                cmp #'z'
.9e38	d0 04		bne $9e3e	                bne _check_esc_quote
.9e3a	a9 00		lda #$00	                lda #0
.9e3c	80 28		bra $9e66	                bra _save_character
.9e3e					_check_esc_quote:
.9e3e	c9 22		cmp #$22	                cmp #$22
.9e40	d0 04		bne $9e46	                bne _check_esc_x
.9e42	a9 22		lda #$22	                lda #34
.9e44	80 20		bra $9e66	                bra _save_character
.9e46					_check_esc_x:
.9e46	c9 78		cmp #$78	                cmp #'x'
.9e48	d0 06		bne $9e50	                bne _check_esc_backslash
.9e4a	a9 be		lda #$be	                lda #$BE        ; Clear bits 6 and 0
.9e4c	85 27		sta $27		                sta tmp2+1
.9e4e	80 19		bra $9e69	                bra _next_character
.9e50					_check_esc_backslash:
.9e50	c9 5c		cmp #$5c	                cmp #$5C
.9e52	d0 04		bne $9e58	                bne _not_escaped
.9e54	a9 5c		lda #$5c	                lda #92
.9e56	80 0e		bra $9e66	                bra _save_character
.9e58					_not_escaped:
.9e58	c9 5c		cmp #$5c	                cmp #$5C        ; The backslash char
.9e5a	d0 06		bne $9e62	                bne _regular_char
.9e5c	a9 ff		lda #$ff	                lda #$FF
.9e5e	85 27		sta $27		                sta tmp2+1
.9e60	80 07		bra $9e69	                bra _next_character
.9e62					_regular_char:
.9e62	c9 22		cmp #$22	                cmp #$22        ; ASCII for "
.9e64	f0 0c		beq $9e72	                beq _found_string_end
.9e66					_save_character:
.9e66	20 d6 d6	jsr $d6d6	                jsr cmpl_a
.9e69					_next_character:
.9e69	e6 0c		inc $0c		                inc toin
.9e6b	d0 02		bne $9e6f	                bne _savechars_loop_longjump
.9e6d	e6 0d		inc $0d		                inc toin+1
.9e6f					_savechars_loop_longjump:
.9e6f	4c 64 9d	jmp $9d64	                jmp _savechars_loop
.9e72					_found_string_end:
.9e72	e6 0c		inc $0c		                inc toin
.9e74	d0 02		bne $9e78	                bne +
.9e76	e6 0d		inc $0d		                inc toin+1
.9e78					+
.9e78	a5 00		lda $00		                lda cp
.9e7a	38		sec		                sec
.9e7b	f5 02		sbc $02,x	                sbc 2,x
.9e7d	95 00		sta $00,x	                sta 0,x         ; LSB
.9e7f	a5 01		lda $01		                lda cp+1
.9e81	f5 03		sbc $03,x	                sbc 3,x
.9e83	95 01		sta $01,x	                sta 1,x         ; MSB
.9e85	b5 02		lda $02,x	                lda 2,x
.9e87	38		sec		                sec
.9e88	e9 02		sbc #$02	                sbc #2
.9e8a	85 24		sta $24		                sta tmp1
.9e8c	b5 03		lda $03,x	                lda 3,x
.9e8e	e9 00		sbc #$00	                sbc #0          ; Propagate borrow
.9e90	85 25		sta $25		                sta tmp1+1
.9e92	a5 00		lda $00		                lda cp
.9e94	92 24		sta ($24)	                sta (tmp1)
.9e96	a0 01		ldy #$01	                ldy #1
.9e98	a5 01		lda $01		                lda cp+1
.9e9a	91 24		sta ($24),y	                sta (tmp1),y
.9e9c	a5 16		lda $16		                lda state
.9e9e	05 17		ora $17		                ora state+1             ; paranoid
.9ea0	f0 03		beq $9ea5	                beq _done
.9ea2	20 89 a0	jsr $a089	                jsr sliteral_const_str         ; ( addr u -- )
.9ea5					_done:
.9ea5	60		rts		z_s_quote:      rts
.9ea6					xt_s_to_d:
.9ea6	20 23 d8	jsr $d823	                jsr underflow_1
.9ea9	ca		dex		                dex
.9eaa	ca		dex		                dex
.9eab	74 00		stz $00,x	                stz 0,x
.9ead	74 01		stz $01,x	                stz 1,x
.9eaf	b5 03		lda $03,x	                lda 3,x
.9eb1	10 04		bpl $9eb7	                bpl _done
.9eb3	d6 00		dec $00,x	                dec 0,x
.9eb5	d6 01		dec $01,x	                dec 1,x
.9eb7					_done:
.9eb7	60		rts		z_s_to_d:       rts
.9eb8					xt_save_buffers:
.9eb8	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.9eba	b1 1e		lda ($1e),y	                lda (up),y      ; Only bits 0 and 1 are used, so only
.9ebc	c9 03		cmp #$03	                cmp #3          ; LSB is needed.
.9ebe	d0 12		bne $9ed2	                bne _done       ; Either not used or not dirty = done!
.9ec0	20 ad 83	jsr $83ad	                jsr xt_blkbuffer
.9ec3	20 9f 85	jsr $859f	                jsr xt_buffblocknum
.9ec6	20 7a 8f	jsr $8f7a	                jsr xt_fetch
.9ec9	20 5a 85	jsr $855a	                jsr xt_block_write
.9ecc	a9 01		lda #$01	                lda #1
.9ece	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.9ed0	91 1e		sta ($1e),y	                sta (up),y
.9ed2					_done:
.9ed2	60		rts		z_save_buffers: rts
.9ed3					xt_scr:
.9ed3	ca		dex		                dex
.9ed4	ca		dex		                dex
.9ed5	18		clc		                clc
.9ed6	a5 1e		lda $1e		                lda up
.9ed8	69 02		adc #$02	                adc #scr_offset ; Add offset
.9eda	95 00		sta $00,x	                sta 0,x
.9edc	a5 1f		lda $1f		                lda up+1
.9ede	69 00		adc #$00	                adc #0          ; Adding carry
.9ee0	95 01		sta $01,x	                sta 1,x
.9ee2	60		rts		z_scr:          rts
.9ee3					xt_search:
.9ee3	20 32 d8	jsr $d832	                jsr underflow_4
.9ee6	b5 00		lda $00,x	                lda 0,x
.9ee8	15 01		ora $01,x	                ora 1,x
.9eea	d0 0b		bne $9ef7	                bne _start_search
.9eec	e8		inx		                inx             ; Remove u2
.9eed	e8		inx		                inx
.9eee	a9 ff		lda #$ff	                lda #$FF        ; Turn addr2 into a true flag
.9ef0	95 00		sta $00,x	                sta 0,x
.9ef2	95 01		sta $01,x	                sta 1,x
.9ef4	4c 81 9f	jmp $9f81	                jmp z_search
.9ef7					_start_search:
.9ef7	20 9c a7	jsr $a79c	                jsr xt_zero
.9efa					_search_loop:
.9efa	18		clc		                clc
.9efb	b5 00		lda $00,x	                lda 0,x
.9efd	75 02		adc $02,x	                adc 2,x
.9eff	85 24		sta $24		                sta tmp1
.9f01	b5 01		lda $01,x	                lda 1,x
.9f03	75 03		adc $03,x	                adc 3,x
.9f05	d5 07		cmp $07,x	                cmp 7,x
.9f07	90 12		bcc $9f1b	                bcc _init_comparison ; Obviously less
.9f09	d0 06		bne $9f11	                bne _not_found
.9f0b	b5 06		lda $06,x	                lda 6,x
.9f0d	c5 24		cmp $24		                cmp tmp1
.9f0f	b0 0a		bcs $9f1b	                bcs _init_comparison
.9f11					_not_found:
.9f11	e8		inx		                inx             ; Remove offset
.9f12	e8		inx		                inx
.9f13	e8		inx		                inx             ; Remove u2
.9f14	e8		inx		                inx
.9f15	74 00		stz $00,x	                stz 0,x         ; Turn addr2 into a false flag
.9f17	74 01		stz $01,x	                stz 1,x
.9f19	80 66		bra $9f81	                bra z_search
.9f1b					_init_comparison:
.9f1b	18		clc		                clc
.9f1c	b5 08		lda $08,x	                lda 8,x
.9f1e	75 00		adc $00,x	                adc 0,x
.9f20	85 24		sta $24		                sta tmp1
.9f22	b5 09		lda $09,x	                lda 9,x
.9f24	75 01		adc $01,x	                adc 1,x
.9f26	85 25		sta $25		                sta tmp1+1
.9f28	b5 04		lda $04,x	                lda 4,x
.9f2a	85 26		sta $26		                sta tmp2
.9f2c	b5 05		lda $05,x	                lda 5,x
.9f2e	85 27		sta $27		                sta tmp2+1
.9f30	b5 02		lda $02,x	                lda 2,x
.9f32	85 28		sta $28		                sta tmp3
.9f34	b5 03		lda $03,x	                lda 3,x
.9f36	85 29		sta $29		                sta tmp3+1
.9f38					_comparison_loop:
.9f38	b2 24		lda ($24)	                lda (tmp1)
.9f3a	d2 26		cmp ($26)	                cmp (tmp2)
.9f3c	f0 05		beq $9f43	                beq _letters_match
.9f3e	20 17 98	jsr $9817	                jsr xt_one_plus
.9f41	80 b7		bra $9efa	                bra _search_loop
.9f43					_letters_match:
.9f43	e6 24		inc $24		                inc tmp1
.9f45	d0 02		bne $9f49	                bne +
.9f47	e6 25		inc $25		                inc tmp1+1
.9f49					+
.9f49	e6 26		inc $26		                inc tmp2
.9f4b	d0 02		bne $9f4f	                bne +
.9f4d	e6 27		inc $27		                inc tmp2+1
.9f4f					+
.9f4f	a5 28		lda $28		                lda tmp3
.9f51	d0 02		bne $9f55	                bne +
.9f53	c6 29		dec $29		                dec tmp3+1
.9f55					+
.9f55	c6 28		dec $28		                dec tmp3
.9f57	a5 28		lda $28		                lda tmp3
.9f59	05 29		ora $29		                ora tmp3+1
.9f5b	d0 db		bne $9f38	                bne _comparison_loop ; Check the next letter
.9f5d	18		clc		                clc
.9f5e	b5 00		lda $00,x	                lda 0,x
.9f60	75 08		adc $08,x	                adc 8,x
.9f62	95 08		sta $08,x	                sta 8,x
.9f64	b5 01		lda $01,x	                lda 1,x
.9f66	75 09		adc $09,x	                adc 9,x
.9f68	95 09		sta $09,x	                sta 9,x
.9f6a	38		sec		                sec
.9f6b	b5 06		lda $06,x	                lda 6,x
.9f6d	f5 00		sbc $00,x	                sbc 0,x
.9f6f	95 06		sta $06,x	                sta 6,x
.9f71	b5 07		lda $07,x	                lda 7,x
.9f73	f5 01		sbc $01,x	                sbc 1,x
.9f75	95 07		sta $07,x	                sta 7,x
.9f77	e8		inx		                inx             ; drop offset
.9f78	e8		inx		                inx
.9f79	e8		inx		                inx             ; drop u2
.9f7a	e8		inx		                inx
.9f7b	a9 ff		lda #$ff	                lda #$FF
.9f7d	95 00		sta $00,x	                sta 0,x         ; Turn addr2 into a true flag.
.9f7f	95 01		sta $01,x	                sta 1,x
.9f81	60		rts		z_search:       rts
.9f82					xt_semicolon:
.9f82	24 20		bit $20		                bit status
.9f84	70 11		bvs $9f97	                bvs _colonword
.9f86	a9 60		lda #$60	                lda #$60                ; opcode for RTS
.9f88	20 d6 d6	jsr $d6d6	                jsr cmpl_a
.9f8b	ca		dex		                dex
.9f8c	ca		dex		                dex
.9f8d	a5 04		lda $04		                lda workword
.9f8f	95 00		sta $00,x	                sta 0,x
.9f91	a5 05		lda $05		                lda workword+1
.9f93	95 01		sta $01,x	                sta 1,x
.9f95	80 45		bra $9fdc	                bra _semicolon_done
.9f97					_colonword:
.9f97	a0 06		ldy #$06	                ldy #6
.9f99	a5 00		lda $00		                lda cp
.9f9b	91 04		sta ($04),y	                sta (workword),y
.9f9d	c8		iny		                iny
.9f9e	a5 01		lda $01		                lda cp+1
.9fa0	91 04		sta ($04),y	                sta (workword),y
.9fa2	a9 60		lda #$60	                lda #$60                ; opcode for RTS
.9fa4	20 d6 d6	jsr $d6d6	                jsr cmpl_a
.9fa7	24 20		bit $20		                bit status
.9fa9	10 26		bpl $9fd1	                bpl _new_word   ; Bit 7 is clear = new word
.9fab	ca		dex		                dex
.9fac	ca		dex		                dex
.9fad	ca		dex		                dex
.9fae	ca		dex		                dex
.9faf	b2 04		lda ($04)	                lda (workword)
.9fb1	95 00		sta $00,x	                sta 0,x
.9fb3	74 01		stz $01,x	                stz 1,x
.9fb5	a5 04		lda $04		                lda workword
.9fb7	18		clc		                clc
.9fb8	69 08		adc #$08	                adc #8
.9fba	95 02		sta $02,x	                sta 2,x
.9fbc	a5 05		lda $05		                lda workword+1
.9fbe	69 00		adc #$00	                adc #0                  ; only want carry
.9fc0	95 03		sta $03,x	                sta 3,x
.9fc2	a9 02		lda #$02	                lda #str_redefined       ; address of string "redefined"
.9fc4	20 4f d8	jsr $d84f	                jsr print_string_no_lf
.9fc7	20 f7 a4	jsr $a4f7	                jsr xt_type
.9fca	20 18 a1	jsr $a118	                jsr xt_space
.9fcd	a9 80		lda #$80	                lda #%10000000
.9fcf	14 20		trb $20		                trb status
.9fd1					_new_word:
.9fd1	a5 04		lda $04		                lda workword
.9fd3	85 02		sta $02		                sta dp
.9fd5	a5 05		lda $05		                lda workword+1
.9fd7	85 03		sta $03		                sta dp+1
.9fd9	20 78 d7	jsr $d778	                jsr dp_to_current       ; Save the updated DP to the
.9fdc					_semicolon_done:
.9fdc	64 16		stz $16		                stz state
.9fde	64 17		stz $17		                stz state+1
.9fe0	60		rts		z_semicolon:    rts
.9fe1					xt_sign:
.9fe1	20 23 d8	jsr $d823	                jsr underflow_1
.9fe4	b5 01		lda $01,x	                lda 1,x         ; check MSB of TOS
.9fe6	30 04		bmi $9fec	                bmi _minus
.9fe8	e8		inx		                inx
.9fe9	e8		inx		                inx
.9fea	80 09		bra $9ff5	                bra _done
.9fec					_minus:
.9fec	a9 2d		lda #$2d	                lda #$2D        ; ASCII for "-"
.9fee	95 00		sta $00,x	                sta 0,x         ; overwrite TOS
.9ff0	74 01		stz $01,x	                stz 1,x         ; paranoid
.9ff2	20 d1 91	jsr $91d1	                jsr xt_hold
.9ff5					_done:
.9ff5	60		rts		z_sign:         rts
.9ff6					xt_slash:
.9ff6	a9 00		lda #$00	                lda #0
.9ff8	48		pha		                pha
.9ff9	80 03		bra $9ffe	                bra slashmod_common
.9ffb					xt_slash_mod:
.9ffb	a9 ff		lda #$ff	                lda #$FF
.9ffd	48		pha		                pha             ; falls through to _common
.9ffe					slashmod_common:
.9ffe	20 64 a3	jsr $a364	                jsr xt_to_r             ; >R
.a001	20 a6 9e	jsr $9ea6	                jsr xt_s_to_d           ; S>D
.a004	20 8c 9a	jsr $9a8c	                jsr xt_r_from           ; R>
.a007	20 cf a0	jsr $a0cf	                jsr xt_sm_slash_rem     ; SM/REM
.a00a	68		pla		                pla
.a00b	d0 05		bne $a012	                bne _done
.a00d	20 a2 a1	jsr $a1a2	                jsr xt_swap
.a010	e8		inx		                inx             ; DROP
.a011	e8		inx		                inx
.a012					_done:
.a012					z_slash_mod:
.a012	60		rts		z_slash:        rts
.a013					xt_slash_string:
.a013	20 2d d8	jsr $d82d	                jsr underflow_3
.a016	18		clc		                clc             ; 3OS+TOS
.a017	b5 00		lda $00,x	                lda 0,x
.a019	75 04		adc $04,x	                adc 4,x
.a01b	95 04		sta $04,x	                sta 4,x
.a01d	b5 01		lda $01,x	                lda 1,x
.a01f	75 05		adc $05,x	                adc 5,x
.a021	95 05		sta $05,x	                sta 5,x
.a023	38		sec		                sec             ; NOS-TOS
.a024	b5 02		lda $02,x	                lda 2,x
.a026	f5 00		sbc $00,x	                sbc 0,x
.a028	95 02		sta $02,x	                sta 2,x
.a02a	b5 03		lda $03,x	                lda 3,x
.a02c	f5 01		sbc $01,x	                sbc 1,x
.a02e	95 03		sta $03,x	                sta 3,x
.a030	e8		inx		                inx
.a031	e8		inx		                inx
.a032	60		rts		z_slash_string: rts
.a033					xt_sliteral:
.a033	20 28 d8	jsr $d828	                jsr underflow_2
.a036	a9 4c		lda #$4c	                lda #$4C
.a038	20 d6 d6	jsr $d6d6	                jsr cmpl_a
.a03b	20 d6 d6	jsr $d6d6	                jsr cmpl_a
.a03e	20 d6 d6	jsr $d6d6	                jsr cmpl_a
.a041	8a		txa		                txa
.a042	38		sec		                sec
.a043	e9 06		sbc #$06	                sbc #6
.a045	aa		tax		                tax
.a046	b5 08		lda $08,x	                lda 8,x
.a048	95 04		sta $04,x	                sta 4,x
.a04a	b5 09		lda $09,x	                lda 9,x
.a04c	95 05		sta $05,x	                sta 5,x
.a04e	b5 06		lda $06,x	                lda 6,x
.a050	95 00		sta $00,x	                sta 0,x
.a052	b5 07		lda $07,x	                lda 7,x
.a054	95 01		sta $01,x	                sta 1,x
.a056	a5 00		lda $00		                lda cp
.a058	95 08		sta $08,x	                sta 8,x
.a05a	95 02		sta $02,x	                sta 2,x
.a05c	a5 01		lda $01		                lda cp+1
.a05e	95 09		sta $09,x	                sta 9,x
.a060	95 03		sta $03,x	                sta 3,x
.a062	20 bc 95	jsr $95bc	                jsr xt_move
.a065	18		clc		                clc
.a066	a5 00		lda $00		                lda cp
.a068	75 00		adc $00,x	                adc 0,x
.a06a	85 00		sta $00		                sta cp
.a06c	a5 01		lda $01		                lda cp+1
.a06e	75 01		adc $01,x	                adc 1,x
.a070	85 01		sta $01		                sta cp+1
.a072	b5 02		lda $02,x	                lda 2,x
.a074	38		sec		                sec
.a075	e9 02		sbc #$02	                sbc #2
.a077	85 24		sta $24		                sta tmp1
.a079	b5 03		lda $03,x	                lda 3,x
.a07b	e9 00		sbc #$00	                sbc #0          ; Propagate borrow
.a07d	85 25		sta $25		                sta tmp1+1
.a07f	a5 00		lda $00		                lda cp
.a081	92 24		sta ($24)	                sta (tmp1)
.a083	a0 01		ldy #$01	                ldy #1
.a085	a5 01		lda $01		                lda cp+1
.a087	91 24		sta ($24),y	                sta (tmp1),y
.a089					sliteral_const_str:
.a089	a0 a0		ldy #$a0	                ldy #>sliteral_runtime
.a08b	a9 a3		lda #$a3	                lda #<sliteral_runtime
.a08d	20 c6 d6	jsr $d6c6	                jsr cmpl_subroutine
.a090	b4 03		ldy $03,x	                ldy 3,x                ; address MSB
.a092	b5 02		lda $02,x	                lda 2,x                ; address LSB
.a094	20 d2 d6	jsr $d6d2	                jsr cmpl_word
.a097	b4 01		ldy $01,x	                ldy 1,x                ; length MSB
.a099	b5 00		lda $00,x	                lda 0,x                ; length LSB
.a09b	20 d2 d6	jsr $d6d2	                jsr cmpl_word
.a09e	e8		inx		                inx
.a09f	e8		inx		                inx
.a0a0	e8		inx		                inx
.a0a1	e8		inx		                inx
.a0a2	60		rts		z_sliteral:     rts
.a0a3					sliteral_runtime:
.a0a3	ca		dex		                dex
.a0a4	ca		dex		                dex
.a0a5	ca		dex		                dex
.a0a6	ca		dex		                dex
.a0a7	68		pla		                pla
.a0a8	85 24		sta $24		                sta tmp1        ; LSB of address
.a0aa	68		pla		                pla
.a0ab	85 25		sta $25		                sta tmp1+1      ; MSB of address
.a0ad	a0 01		ldy #$01	                ldy #1          ; adjust for JSR/RTS mechanics on 65c02
.a0af	b1 24		lda ($24),y	                lda (tmp1),y
.a0b1	95 02		sta $02,x	                sta 2,x         ; LSB of address
.a0b3	c8		iny		                iny
.a0b4	b1 24		lda ($24),y	                lda (tmp1),y
.a0b6	95 03		sta $03,x	                sta 3,x         ; MSB of address
.a0b8	c8		iny		                iny
.a0b9	b1 24		lda ($24),y	                lda (tmp1),y
.a0bb	95 00		sta $00,x	                sta 0,x         ; LSB of length
.a0bd	c8		iny		                iny
.a0be	b1 24		lda ($24),y	                lda (tmp1),y
.a0c0	95 01		sta $01,x	                sta 1,x         ; MSB of length
.a0c2	18		clc		                clc
.a0c3	a5 24		lda $24		                lda tmp1
.a0c5	69 04		adc #$04	                adc #4
.a0c7	a8		tay		                tay             ; LSB
.a0c8	a5 25		lda $25		                lda tmp1+1
.a0ca	69 00		adc #$00	                adc #0          ; we only need carry
.a0cc	48		pha		                pha             ; MSB
.a0cd	5a		phy		                phy
.a0ce	60		rts		                rts
.a0cf					xt_sm_slash_rem:
.a0cf	20 2d d8	jsr $d82d	                jsr underflow_3 ; contains double number
.a0d2	b5 03		lda $03,x	                lda 3,x
.a0d4	48		pha		                pha
.a0d5	b5 01		lda $01,x	                lda 1,x
.a0d7	55 03		eor $03,x	                eor 3,x
.a0d9	48		pha		                pha
.a0da	20 39 81	jsr $8139	                jsr xt_abs
.a0dd	e8		inx		                inx             ; pretend we pushed n1 to R
.a0de	e8		inx		                inx
.a0df	20 80 8a	jsr $8a80	                jsr xt_dabs
.a0e2	ca		dex		                dex
.a0e3	ca		dex		                dex
.a0e4	20 ae a5	jsr $a5ae	                jsr xt_um_slash_mod     ; UM/MOD
.a0e7	68		pla		                pla
.a0e8	10 03		bpl $a0ed	                bpl +
.a0ea	20 1d 96	jsr $961d	                jsr xt_negate
.a0ed					+
.a0ed	68		pla		                pla
.a0ee	10 07		bpl $a0f7	                bpl _done
.a0f0	e8		inx		                inx             ; pretend we pushed quotient to R
.a0f1	e8		inx		                inx
.a0f2	20 1d 96	jsr $961d	                jsr xt_negate
.a0f5	ca		dex		                dex
.a0f6	ca		dex		                dex
.a0f7					_done:
.a0f7	60		rts		z_sm_slash_rem: rts
.a0f8					xt_source:
.a0f8	ca		dex		                dex
.a0f9	ca		dex		                dex
.a0fa	a5 08		lda $08		                lda cib
.a0fc	95 00		sta $00,x	                sta 0,x
.a0fe	a5 09		lda $09		                lda cib+1
.a100	95 01		sta $01,x	                sta 1,x
.a102	ca		dex		                dex
.a103	ca		dex		                dex
.a104	a5 0a		lda $0a		                lda ciblen
.a106	95 00		sta $00,x	                sta 0,x
.a108	a5 0b		lda $0b		                lda ciblen+1
.a10a	95 01		sta $01,x	                sta 1,x
.a10c	60		rts		z_source:       rts
.a10d					xt_source_id:
.a10d	ca		dex		                dex
.a10e	ca		dex		                dex
.a10f	a5 06		lda $06		                lda insrc
.a111	95 00		sta $00,x	                sta 0,x
.a113	a5 07		lda $07		                lda insrc+1
.a115	95 01		sta $01,x	                sta 1,x
.a117	60		rts		z_source_id:    rts
.a118					xt_space:
.a118	a9 20		lda #$20	                lda #AscSP
.a11a	20 f0 8d	jsr $8df0	                jsr emit_a
.a11d	60		rts		z_space:        rts
.a11e					xt_spaces:
.a11e	20 23 d8	jsr $d823	                jsr underflow_1
.a121	b5 00		lda $00,x	                lda 0,x
.a123	15 01		ora $01,x	                ora 1,x
.a125	f0 2a		beq $a151	                beq _done
.a127	b4 01		ldy $01,x	                ldy 1,x
.a129	d0 0c		bne $a137	                bne _lots_of_spaces
.a12b	b4 00		ldy $00,x	                ldy 0,x
.a12d					_quick_loop:
.a12d	a9 20		lda #$20	                lda #AscSP
.a12f	20 f0 8d	jsr $8df0	                jsr emit_a
.a132	88		dey		                dey
.a133	f0 1c		beq $a151	                beq _done
.a135	80 f6		bra $a12d	                bra _quick_loop
.a137					_lots_of_spaces:
.a137	b4 00		ldy $00,x	                ldy 0,x
.a139					_first_slow_loop:
.a139	f0 08		beq $a143	                beq _slow_outer_loop
.a13b	a9 20		lda #$20	                lda #AscSP
.a13d	20 f0 8d	jsr $8df0	                jsr emit_a
.a140	88		dey		                dey
.a141	80 f6		bra $a139	                bra _first_slow_loop
.a143					_slow_outer_loop:
.a143	a0 00		ldy #$00	                ldy #00
.a145					_slow_inner_loop:
.a145	a9 20		lda #$20	                lda #AscSP
.a147	20 f0 8d	jsr $8df0	                jsr emit_a
.a14a	88		dey		                dey
.a14b	d0 f8		bne $a145	                bne _slow_inner_loop
.a14d	d6 01		dec $01,x	                dec 1,x
.a14f	d0 f2		bne $a143	                bne _slow_outer_loop
.a151					_done:
.a151	e8		inx		                inx             ; drop
.a152	e8		inx		                inx
.a153	60		rts		z_spaces:       rts
.a154					xt_star:
.a154	20 28 d8	jsr $d828	                jsr underflow_2
.a157	20 f0 a5	jsr $a5f0	                jsr xt_um_star
.a15a	e8		inx		                inx
.a15b	e8		inx		                inx
.a15c	60		rts		z_star:         rts
.a15d					xt_star_slash:
.a15d	20 66 a1	jsr $a166	                jsr xt_star_slash_mod
.a160	20 a2 a1	jsr $a1a2	                jsr xt_swap
.a163	e8		inx		                inx
.a164	e8		inx		                inx
.a165					z_star_slash:
.a165	60		rts		                rts
.a166					xt_star_slash_mod:
.a166	20 2d d8	jsr $d82d	                jsr underflow_3
.a169	20 64 a3	jsr $a364	                jsr xt_to_r
.a16c	20 88 94	jsr $9488	                jsr xt_m_star
.a16f	20 8c 9a	jsr $9a8c	                jsr xt_r_from
.a172	20 cf a0	jsr $a0cf	                jsr xt_sm_slash_rem
.a175					z_star_slash_mod:
.a175	60		rts		                rts
.a176					xt_state:
.a176	ca		dex		                dex
.a177	ca		dex		                dex
.a178	a9 16		lda #$16	                lda #<state
.a17a	95 00		sta $00,x	                sta 0,x
.a17c	a9 00		lda #$00	                lda #>state
.a17e	95 01		sta $01,x	                sta 1,x
.a180	60		rts		z_state:        rts
.a181					xt_store:
.a181	20 28 d8	jsr $d828	                jsr underflow_2
.a184	b5 02		lda $02,x	                lda 2,x         ; LSB
.a186	81 00		sta ($00,x)	                sta (0,x)
.a188	f6 00		inc $00,x	                inc 0,x
.a18a	d0 02		bne $a18e	                bne +
.a18c	f6 01		inc $01,x	                inc 1,x
.a18e					+
.a18e	b5 03		lda $03,x	                lda 3,x         ; MSB
.a190	81 00		sta ($00,x)	                sta (0,x)
.a192	e8		inx		                inx             ; 2DROP
.a193	e8		inx		                inx
.a194	e8		inx		                inx
.a195	e8		inx		                inx
.a196	60		rts		z_store:        rts
.a197					xt_strip_underflow:
.a197	ca		dex		                dex
.a198	ca		dex		                dex
.a199	a9 1c		lda #$1c	                lda #<uf_strip
.a19b	95 00		sta $00,x	                sta 0,x
.a19d	a9 00		lda #$00	                lda #>uf_strip
.a19f	95 01		sta $01,x	                sta 1,x
.a1a1					z_strip_underflow:
.a1a1	60		rts		                rts
.a1a2					xt_swap:
.a1a2	20 28 d8	jsr $d828	                jsr underflow_2
.a1a5	b5 00		lda $00,x	                lda 0,x         ; LSB
.a1a7	b4 02		ldy $02,x	                ldy 2,x
.a1a9	95 02		sta $02,x	                sta 2,x
.a1ab	94 00		sty $00,x	                sty 0,x
.a1ad	b5 01		lda $01,x	                lda 1,x         ; MSB
.a1af	b4 03		ldy $03,x	                ldy 3,x
.a1b1	95 03		sta $03,x	                sta 3,x
.a1b3	94 01		sty $01,x	                sty 1,x
.a1b5	60		rts		z_swap:         rts
.a1b6					xt_then:
.a1b6	20 6c 91	jsr $916c	                jsr xt_here
.a1b9	20 a2 a1	jsr $a1a2	                jsr xt_swap
.a1bc	20 81 a1	jsr $a181	                jsr xt_store
.a1bf	60		rts		z_then:         rts
.a1c0					xt_thru:
.a1c0	20 28 d8	jsr $d828	                jsr underflow_2
.a1c3	b5 01		lda $01,x	                lda 1,x
.a1c5	48		pha		                pha
.a1c6	b5 00		lda $00,x	                lda 0,x
.a1c8	48		pha		                pha
.a1c9	e8		inx		                inx
.a1ca	e8		inx		                inx
.a1cb					_thru_loop:
.a1cb	b5 01		lda $01,x	                lda 1,x
.a1cd	48		pha		                pha
.a1ce	b5 00		lda $00,x	                lda 0,x
.a1d0	48		pha		                pha
.a1d1	20 b1 93	jsr $93b1	                jsr xt_load
.a1d4	68		pla		                pla
.a1d5	85 24		sta $24		                sta tmp1
.a1d7	68		pla		                pla
.a1d8	85 25		sta $25		                sta tmp1+1
.a1da	68		pla		                pla
.a1db	85 26		sta $26		                sta tmp2
.a1dd	68		pla		                pla
.a1de	85 27		sta $27		                sta tmp2+1
.a1e0	c5 25		cmp $25		                cmp tmp1+1
.a1e2	d0 08		bne $a1ec	                bne _next_screen
.a1e4	a5 26		lda $26		                lda tmp2        ; Compare the LSB
.a1e6	c5 24		cmp $24		                cmp tmp1
.a1e8	d0 02		bne $a1ec	                bne _next_screen
.a1ea	80 18		bra $a204	                bra _done       ; We just did the last screen.
.a1ec					_next_screen:
.a1ec	a5 27		lda $27		                lda tmp2+1
.a1ee	48		pha		                pha
.a1ef	a5 26		lda $26		                lda tmp2
.a1f1	48		pha		                pha
.a1f2	e6 24		inc $24		                inc tmp1
.a1f4	d0 02		bne $a1f8	                bne +
.a1f6	e6 25		inc $25		                inc tmp1+1
.a1f8					+
.a1f8	ca		dex		                dex
.a1f9	ca		dex		                dex
.a1fa	a5 24		lda $24		                lda tmp1
.a1fc	95 00		sta $00,x	                sta 0,x
.a1fe	a5 25		lda $25		                lda tmp1+1
.a200	95 01		sta $01,x	                sta 1,x
.a202	80 c7		bra $a1cb	                bra _thru_loop
.a204					_done:
.a204	60		rts		z_thru:         rts
.a205					xt_tick:
.a205	20 d9 98	jsr $98d9	                jsr xt_parse_name       ; ( -- addr u )
.a208	b5 00		lda $00,x	                lda 0,x
.a20a	15 01		ora $01,x	                ora 1,x
.a20c	d0 05		bne $a213	                bne +
.a20e	a9 05		lda #$05	                lda #err_noname
.a210	4c 39 d8	jmp $d839	                jmp error
.a213					+
.a213	20 d5 8f	jsr $8fd5	                jsr xt_find_name        ; ( addr u -- nt )
.a216	b5 00		lda $00,x	                lda 0,x
.a218	15 01		ora $01,x	                ora 1,x
.a21a	d0 05		bne $a221	                bne +
.a21c	a9 08		lda #$08	                lda #err_syntax
.a21e	4c 39 d8	jmp $d839	                jmp error
.a221					+
.a221	20 db 95	jsr $95db	                jsr xt_name_to_int      ; ( nt -- xt )
.a224	60		rts		z_tick:         rts
.a225					xt_to:
.a225	20 05 a2	jsr $a205	                jsr xt_tick             ; ( [n] xt )
.a228	b5 00		lda $00,x	                lda 0,x                 ; LSB
.a22a	18		clc		                clc
.a22b	69 03		adc #$03	                adc #3
.a22d	85 24		sta $24		                sta tmp1
.a22f	b5 01		lda $01,x	                lda 1,x                 ; MSB
.a231	69 00		adc #$00	                adc #0                  ; we just want the carry
.a233	85 25		sta $25		                sta tmp1+1
.a235	e8		inx		                inx
.a236	e8		inx		                inx                     ; ( [n] )
.a237	a5 16		lda $16		                lda state
.a239	05 17		ora $17		                ora state+1
.a23b	f0 34		beq $a271	                beq _interpret
.a23d	a0 00		ldy #$00	                ldy #$00                ; Code for LDA 0,X
.a23f	a9 b5		lda #$b5	                lda #$B5
.a241	20 d2 d6	jsr $d6d2	                jsr cmpl_word
.a244	a9 8d		lda #$8d	                lda #$8D                ; Code for STA abs
.a246	20 d6 d6	jsr $d6d6	                jsr cmpl_a
.a249	a4 25		ldy $25		                ldy tmp1+1              ; MSB goes in Y
.a24b	a5 24		lda $24		                lda tmp1
.a24d	20 d2 d6	jsr $d6d2	                jsr cmpl_word
.a250	a0 01		ldy #$01	                ldy #$01                ; Code for LDA 1,X
.a252	a9 b5		lda #$b5	                lda #$B5
.a254	20 d2 d6	jsr $d6d2	                jsr cmpl_word
.a257	a9 8d		lda #$8d	                lda #$8D                ; Code for STA abs
.a259	20 d6 d6	jsr $d6d6	                jsr cmpl_a
.a25c	e6 24		inc $24		                inc tmp1                ; Calculate MSB
.a25e	d0 02		bne $a262	                bne +
.a260	e6 25		inc $25		                inc tmp1+1
.a262					+
.a262	a4 25		ldy $25		                ldy tmp1+1              ; MSB goes in Y
.a264	a5 24		lda $24		                lda tmp1
.a266	20 d2 d6	jsr $d6d2	                jsr cmpl_word
.a269	a0 e8		ldy #$e8	                ldy #$E8                ; Code for INX
.a26b	98		tya		                tya
.a26c	20 d2 d6	jsr $d6d2	                jsr cmpl_word
.a26f	80 0f		bra $a280	                bra _done
.a271					_interpret:
.a271	20 23 d8	jsr $d823	                jsr underflow_1
.a274	b5 00		lda $00,x	                lda 0,x
.a276	92 24		sta ($24)	                sta (tmp1)              ; LSB
.a278	a0 01		ldy #$01	                ldy #1
.a27a	b5 01		lda $01,x	                lda 1,x                 ; MSB
.a27c	91 24		sta ($24),y	                sta (tmp1),y            ; fall through to common
.a27e	e8		inx		                inx                     ; DROP
.a27f	e8		inx		                inx
.a280					_done:
.a280	60		rts		z_to:           rts
.a281					xt_to_body:
.a281	20 23 d8	jsr $d823	                jsr underflow_1
.a284	20 a9 8d	jsr $8da9	                jsr xt_dup              ; ( xt xt )
.a287	20 72 92	jsr $9272	                jsr xt_int_to_name      ; ( xt nt )
.a28a	f6 00		inc $00,x	                inc 0,x
.a28c	d0 02		bne $a290	                bne +
.a28e	f6 01		inc $01,x	                inc 1,x
.a290					+
.a290	a1 00		lda ($00,x)	                lda (0,x)               ; get status byte
.a292	29 20		and #$20	                and #HC
.a294	f0 0d		beq $a2a3	                beq _no_cfa
.a296	18		clc		                clc
.a297	b5 02		lda $02,x	                lda 2,x         ; LSB
.a299	69 03		adc #$03	                adc #3
.a29b	95 02		sta $02,x	                sta 2,x
.a29d	b5 03		lda $03,x	                lda 3,x         ; MSB
.a29f	69 00		adc #$00	                adc #0          ; we conly care about the carry
.a2a1	95 03		sta $03,x	                sta 3,x         ; Fall through to _no_cfa
.a2a3					_no_cfa:
.a2a3	e8		inx		                inx             ; get rid of the nt
.a2a4	e8		inx		                inx
.a2a5					_done:
.a2a5	60		rts		z_to_body:      rts
.a2a6					xt_to_in:
.a2a6	ca		dex		                dex
.a2a7	ca		dex		                dex
.a2a8	a9 0c		lda #$0c	                lda #<toin
.a2aa	95 00		sta $00,x	                sta 0,x
.a2ac	a9 00		lda #$00	                lda #>toin      ; paranoid, should be zero
.a2ae	95 01		sta $01,x	                sta 1,x
.a2b0	60		rts		z_to_in:        rts
.a2b1					xt_to_number:
.a2b1	20 32 d8	jsr $d832	                jsr underflow_4
.a2b4	b5 06		lda $06,x	                lda 6,x         ; ud-lo LSB
.a2b6	85 36		sta $36		                sta scratch
.a2b8	b5 07		lda $07,x	                lda 7,x         ; ud-lo MSB
.a2ba	85 37		sta $37		                sta scratch+1
.a2bc	b5 04		lda $04,x	                lda 4,x         ; ud-hi LSB
.a2be	85 38		sta $38		                sta scratch+2
.a2c0	b5 05		lda $05,x	                lda 5,x         ; ud-hi MSB
.a2c2	85 39		sta $39		                sta scratch+3
.a2c4	ca		dex		                dex
.a2c5	ca		dex		                dex
.a2c6					_loop:
.a2c6	a1 04		lda ($04,x)	                lda (4,x)
.a2c8	95 00		sta $00,x	                sta 0,x                 ; ( ud-lo ud-hi addr u char )
.a2ca	74 01		stz $01,x	                stz 1,x                 ; paranoid
.a2cc	20 ff 8a	jsr $8aff	                jsr xt_digit_question   ; ( char -- n -1 | char 0 )
.a2cf	b5 00		lda $00,x	                lda 0,x
.a2d1	d0 04		bne $a2d7	                bne _digit_ok
.a2d3	e8		inx		                inx
.a2d4	e8		inx		                inx
.a2d5	80 67		bra $a33e	                bra _done       ; ( ud-lo ud-hi addr u char )
.a2d7					_digit_ok:
.a2d7	b5 02		lda $02,x	                lda 2,x
.a2d9	85 3a		sta $3a		                sta scratch+4
.a2db	b5 03		lda $03,x	                lda 3,x
.a2dd	85 3b		sta $3b		                sta scratch+5
.a2df	a5 38		lda $38		                lda scratch+2
.a2e1	95 02		sta $02,x	                sta 2,x         ; NOS
.a2e3	a5 39		lda $39		                lda scratch+3
.a2e5	95 03		sta $03,x	                sta 3,x
.a2e7	a5 18		lda $18		                lda base
.a2e9	95 00		sta $00,x	                sta 0,x         ; TOS
.a2eb	74 01		stz $01,x	                stz 1,x         ; now ( ud-lo ud-hi addr u ud-hi base)
.a2ed	20 f0 a5	jsr $a5f0	                jsr xt_um_star  ; ( ud-lo ud-hi addr u ud-hi-lo ud-hi-hi )
.a2f0	b5 02		lda $02,x	                lda 2,x         ; ud-hi-lo
.a2f2	85 3c		sta $3c		                sta scratch+6
.a2f4	b5 03		lda $03,x	                lda 3,x
.a2f6	85 3d		sta $3d		                sta scratch+7
.a2f8	a5 36		lda $36		                lda scratch
.a2fa	95 02		sta $02,x	                sta 2,x
.a2fc	a5 37		lda $37		                lda scratch+1
.a2fe	95 03		sta $03,x	                sta 3,x         ; ( ud-lo ud-hi addr u ud-lo ud-hi-hi )
.a300	a5 18		lda $18		                lda base
.a302	95 00		sta $00,x	                sta 0,x
.a304	74 01		stz $01,x	                stz 1,x         ; ( ud-lo ud-hi addr u ud-lo base )
.a306	20 f0 a5	jsr $a5f0	                jsr xt_um_star  ; ( ud-lo ud-hi addr u ud-lo-lo ud-lo-hi )
.a309	b5 00		lda $00,x	                lda 0,x
.a30b	85 38		sta $38		                sta scratch+2
.a30d	b5 01		lda $01,x	                lda 1,x
.a30f	85 39		sta $39		                sta scratch+3
.a311	b5 02		lda $02,x	                lda 2,x
.a313	85 36		sta $36		                sta scratch
.a315	b5 03		lda $03,x	                lda 3,x
.a317	85 37		sta $37		                sta scratch+1
.a319	18		clc		                clc
.a31a	a5 36		lda $36		                lda scratch     ; ud-lo LSB
.a31c	65 3a		adc $3a		                adc scratch+4   ; n LSB
.a31e	85 36		sta $36		                sta scratch     ; this is the new ud-lo
.a320	a5 37		lda $37		                lda scratch+1   ; ud-lo MSB
.a322	65 3b		adc $3b		                adc scratch+5   ; n MSB
.a324	85 37		sta $37		                sta scratch+1
.a326	a5 38		lda $38		                lda scratch+2   ; LSB
.a328	65 3c		adc $3c		                adc scratch+6
.a32a	85 38		sta $38		                sta scratch+2   ; this is the new ud-hi
.a32c	a5 39		lda $39		                lda scratch+3   ; MSB
.a32e	65 3d		adc $3d		                adc scratch+7
.a330	85 39		sta $39		                sta scratch+3
.a332	e8		inx		                inx
.a333	e8		inx		                inx             ; ( ud-lo ud-hi addr u ud-lo-lo )
.a334	f6 04		inc $04,x	                inc 4,x
.a336	d0 02		bne $a33a	                bne +
.a338	f6 05		inc $05,x	                inc 5,x
.a33a					+
.a33a	d6 02		dec $02,x	                dec 2,x
.a33c	d0 88		bne $a2c6	                bne _loop
.a33e					_done:
.a33e	e8		inx		                inx
.a33f	e8		inx		                inx             ; ( ud-lo ud-hi addr u )
.a340	a5 36		lda $36		                lda scratch     ; new ud-lo
.a342	95 06		sta $06,x	                sta 6,x
.a344	a5 37		lda $37		                lda scratch+1
.a346	95 07		sta $07,x	                sta 7,x
.a348	a5 38		lda $38		                lda scratch+2
.a34a	95 04		sta $04,x	                sta 4,x
.a34c	a5 39		lda $39		                lda scratch+3
.a34e	95 05		sta $05,x	                sta 5,x
.a350	60		rts		z_to_number:    rts
.a351					xt_to_order:
.a351	20 64 a3	jsr $a364	                jsr xt_to_r
.a354	20 2e 91	jsr $912e	                jsr xt_get_order
.a357	20 8c 9a	jsr $9a8c	                jsr xt_r_from
.a35a	20 a2 a1	jsr $a1a2	                jsr xt_swap
.a35d	20 17 98	jsr $9817	                jsr xt_one_plus
.a360	20 15 9d	jsr $9d15	                jsr xt_set_order
.a363	60		rts		z_to_order:     rts
.a364					xt_to_r:
.a364	68		pla		                pla             ; LSB
.a365	85 2c		sta $2c		                sta tmptos
.a367	7a		ply		                ply             ; MSB
.a368	20 23 d8	jsr $d823	                jsr underflow_1
.a36b	b5 01		lda $01,x	                lda 1,x         ; MSB
.a36d	48		pha		                pha
.a36e	b5 00		lda $00,x	                lda 0,x         ; LSB
.a370	48		pha		                pha
.a371	e8		inx		                inx
.a372	e8		inx		                inx
.a373	5a		phy		                phy             ; MSB
.a374	a5 2c		lda $2c		                lda tmptos
.a376	48		pha		                pha             ; LSB
.a377	60		rts		z_to_r:         rts
.a378					xt_true:
.a378	ca		dex		                dex
.a379	ca		dex		                dex
.a37a	a9 ff		lda #$ff	                lda #$FF
.a37c	95 00		sta $00,x	                sta 0,x
.a37e	95 01		sta $01,x	                sta 1,x
.a380	60		rts		z_true:         rts
.a381					xt_tuck:
.a381	20 28 d8	jsr $d828	                jsr underflow_2
.a384	ca		dex		                dex
.a385	ca		dex		                dex
.a386	b4 04		ldy $04,x	                ldy 4,x         ; LSB
.a388	b5 02		lda $02,x	                lda 2,x
.a38a	95 04		sta $04,x	                sta 4,x
.a38c	94 02		sty $02,x	                sty 2,x
.a38e	95 00		sta $00,x	                sta 0,x
.a390	b4 05		ldy $05,x	                ldy 5,x         ; MSB
.a392	b5 03		lda $03,x	                lda 3,x
.a394	95 05		sta $05,x	                sta 5,x
.a396	94 03		sty $03,x	                sty 3,x         ; bba
.a398	95 01		sta $01,x	                sta 1,x         ; baa
.a39a	60		rts		z_tuck:         rts
.a39b					xt_assembler_wordlist:
.a39b					xt_two:
.a39b	ca		dex		                dex
.a39c	ca		dex		                dex
.a39d	a9 02		lda #$02	                lda #2
.a39f	95 00		sta $00,x	                sta 0,x
.a3a1	74 01		stz $01,x	                stz 1,x
.a3a3					z_assembler_wordlist:
.a3a3	60		rts		z_two:          rts
.a3a4					xt_two_drop:
.a3a4	20 28 d8	jsr $d828	                jsr underflow_2
.a3a7	e8		inx		                inx
.a3a8	e8		inx		                inx
.a3a9	e8		inx		                inx
.a3aa	e8		inx		                inx
.a3ab	60		rts		z_two_drop:     rts
.a3ac					xt_two_dup:
.a3ac	20 28 d8	jsr $d828	                jsr underflow_2
.a3af	ca		dex		                dex
.a3b0	ca		dex		                dex
.a3b1	ca		dex		                dex
.a3b2	ca		dex		                dex
.a3b3	b5 04		lda $04,x	                lda 4,x         ; TOS
.a3b5	95 00		sta $00,x	                sta 0,x
.a3b7	b5 05		lda $05,x	                lda 5,x
.a3b9	95 01		sta $01,x	                sta 1,x
.a3bb	b5 06		lda $06,x	                lda 6,x         ; NOS
.a3bd	95 02		sta $02,x	                sta 2,x
.a3bf	b5 07		lda $07,x	                lda 7,x
.a3c1	95 03		sta $03,x	                sta 3,x
.a3c3	60		rts		z_two_dup:      rts
.a3c4					xt_two_fetch:
.a3c4	20 23 d8	jsr $d823	                jsr underflow_1
.a3c7	b5 00		lda $00,x	                lda 0,x
.a3c9	85 24		sta $24		                sta tmp1
.a3cb	b4 01		ldy $01,x	                ldy 1,x
.a3cd	84 25		sty $25		                sty tmp1+1
.a3cf	ca		dex		                dex             ; reuse one stack element
.a3d0	ca		dex		                dex
.a3d1	b2 24		lda ($24)	                lda (tmp1)      ; copy LSB
.a3d3	95 00		sta $00,x	                sta 0,x
.a3d5	a0 01		ldy #$01	                ldy #1          ; copy next
.a3d7	b1 24		lda ($24),y	                lda (tmp1),y
.a3d9	95 01		sta $01,x	                sta 1,x
.a3db	c8		iny		                iny             ; copy next
.a3dc	b1 24		lda ($24),y	                lda (tmp1),y
.a3de	95 02		sta $02,x	                sta 2,x
.a3e0	c8		iny		                iny             ; copy next
.a3e1	b1 24		lda ($24),y	                lda (tmp1),y
.a3e3	95 03		sta $03,x	                sta 3,x
.a3e5	60		rts		z_two_fetch:    rts
.a3e6					xt_two_over:
.a3e6	20 32 d8	jsr $d832	                jsr underflow_4
.a3e9	ca		dex		                dex
.a3ea	ca		dex		                dex
.a3eb	ca		dex		                dex
.a3ec	ca		dex		                dex
.a3ed	b5 08		lda $08,x	                lda 8,x
.a3ef	95 00		sta $00,x	                sta 0,x
.a3f1	b5 09		lda $09,x	                lda 9,x
.a3f3	95 01		sta $01,x	                sta 1,x
.a3f5	b5 0a		lda $0a,x	                lda 10,x
.a3f7	95 02		sta $02,x	                sta 2,x
.a3f9	b5 0b		lda $0b,x	                lda 11,x
.a3fb	95 03		sta $03,x	                sta 3,x
.a3fd	60		rts		z_two_over:     rts
.a3fe					xt_two_r_fetch:
.a3fe	ca		dex		                dex
.a3ff	ca		dex		                dex
.a400	ca		dex		                dex
.a401	ca		dex		                dex
.a402	8a		txa		                txa
.a403	ba		tsx		                tsx
.a404	da		phx		                phx             ; 65c02 has no TXY, so do it the hard way
.a405	7a		ply		                ply
.a406	aa		tax		                tax
.a407	b9 03 01	lda $0103,y	                lda $0103,y     ; LSB of top entry
.a40a	95 00		sta $00,x	                sta 0,x
.a40c	b9 04 01	lda $0104,y	                lda $0104,y     ; MSB of top entry
.a40f	95 01		sta $01,x	                sta 1,x
.a411	b9 05 01	lda $0105,y	                lda $0105,y     ; LSB of bottom entry
.a414	95 02		sta $02,x	                sta 2,x
.a416	b9 06 01	lda $0106,y	                lda $0106,y     ; MSB of top entry
.a419	95 03		sta $03,x	                sta 3,x
.a41b	60		rts		z_two_r_fetch:  rts
.a41c					xt_two_r_from:
.a41c	68		pla		                pla                     ; LSB
.a41d	85 24		sta $24		                sta tmp1
.a41f	68		pla		                pla                     ; MSB
.a420	85 25		sta $25		                sta tmp1+1
.a422	ca		dex		                dex
.a423	ca		dex		                dex
.a424	ca		dex		                dex
.a425	ca		dex		                dex
.a426	68		pla		                pla                     ; LSB
.a427	95 00		sta $00,x	                sta 0,x
.a429	68		pla		                pla                     ; MSB
.a42a	95 01		sta $01,x	                sta 1,x
.a42c	68		pla		                pla                     ; LSB
.a42d	95 02		sta $02,x	                sta 2,x
.a42f	68		pla		                pla                     ; MSB
.a430	95 03		sta $03,x	                sta 3,x
.a432	a5 25		lda $25		                lda tmp1+1              ; MSB
.a434	48		pha		                pha
.a435	a5 24		lda $24		                lda tmp1                ; LSB
.a437	48		pha		                pha
.a438	60		rts		z_two_r_from:   rts
.a439					xt_two_slash:
.a439	20 23 d8	jsr $d823	                jsr underflow_1
.a43c	b5 01		lda $01,x	                lda 1,x
.a43e	0a		asl a		                asl                     ; save the sign
.a43f	76 01		ror $01,x	                ror 1,x
.a441	76 00		ror $00,x	                ror 0,x
.a443	60		rts		z_two_slash:    rts
.a444					xt_two_star:
.a444					xt_cells:
.a444	20 23 d8	jsr $d823	                jsr underflow_1
.a447	16 00		asl $00,x	                asl 0,x
.a449	36 01		rol $01,x	                rol 1,x
.a44b					z_cells:
.a44b	60		rts		z_two_star:     rts
.a44c					xt_two_store:
.a44c	20 2d d8	jsr $d82d	                jsr underflow_3
.a44f	b5 00		lda $00,x	                lda 0,x
.a451	85 24		sta $24		                sta tmp1
.a453	b4 01		ldy $01,x	                ldy 1,x
.a455	84 25		sty $25		                sty tmp1+1
.a457	e8		inx		                inx
.a458	e8		inx		                inx
.a459	b5 00		lda $00,x	                lda 0,x         ; copy MSB
.a45b	92 24		sta ($24)	                sta (tmp1)
.a45d	b5 01		lda $01,x	                lda 1,x         ; copy next
.a45f	a0 01		ldy #$01	                ldy #1
.a461	91 24		sta ($24),y	                sta (tmp1),y
.a463	b5 02		lda $02,x	                lda 2,x         ; copy next
.a465	c8		iny		                iny
.a466	91 24		sta ($24),y	                sta (tmp1),y
.a468	b5 03		lda $03,x	                lda 3,x         ; copy MSB
.a46a	c8		iny		                iny
.a46b	91 24		sta ($24),y	                sta (tmp1),y
.a46d	e8		inx		                inx             ; 2DROP
.a46e	e8		inx		                inx
.a46f	e8		inx		                inx
.a470	e8		inx		                inx
.a471	60		rts		z_two_store:    rts
.a472					xt_two_swap:
.a472	20 32 d8	jsr $d832	                jsr underflow_4
.a475	b5 00		lda $00,x	                lda 0,x
.a477	b4 04		ldy $04,x	                ldy 4,x
.a479	95 04		sta $04,x	                sta 4,x
.a47b	94 00		sty $00,x	                sty 0,x
.a47d	b5 01		lda $01,x	                lda 1,x
.a47f	b4 05		ldy $05,x	                ldy 5,x
.a481	95 05		sta $05,x	                sta 5,x
.a483	94 01		sty $01,x	                sty 1,x
.a485	b5 02		lda $02,x	                lda 2,x
.a487	b4 06		ldy $06,x	                ldy 6,x
.a489	95 06		sta $06,x	                sta 6,x
.a48b	94 02		sty $02,x	                sty 2,x
.a48d	b5 03		lda $03,x	                lda 3,x
.a48f	b4 07		ldy $07,x	                ldy 7,x
.a491	95 07		sta $07,x	                sta 7,x
.a493	94 03		sty $03,x	                sty 3,x
.a495	60		rts		z_two_swap:     rts
.a496					xt_two_to_r:
.a496	68		pla		                pla             ; LSB
.a497	85 24		sta $24		                sta tmp1
.a499	68		pla		                pla             ; MSB
.a49a	85 25		sta $25		                sta tmp1+1
.a49c	20 28 d8	jsr $d828	                jsr underflow_2
.a49f	b5 03		lda $03,x	                lda 3,x         ; MSB
.a4a1	48		pha		                pha
.a4a2	b5 02		lda $02,x	                lda 2,x         ; LSB
.a4a4	48		pha		                pha
.a4a5	b5 01		lda $01,x	                lda 1,x         ; MSB
.a4a7	48		pha		                pha
.a4a8	b5 00		lda $00,x	                lda 0,x         ; LSB
.a4aa	48		pha		                pha
.a4ab	e8		inx		                inx
.a4ac	e8		inx		                inx
.a4ad	e8		inx		                inx
.a4ae	e8		inx		                inx
.a4af	a5 25		lda $25		                lda tmp1+1      ; MSB
.a4b1	48		pha		                pha
.a4b2	a5 24		lda $24		                lda tmp1        ; LSB
.a4b4	48		pha		                pha
.a4b5	60		rts		z_two_to_r:     rts
.a4b6					xt_two_constant:
.a4b6	20 28 d8	jsr $d828	                jsr underflow_2
.a4b9	20 63 89	jsr $8963	                jsr xt_create
.a4bc	20 a2 a1	jsr $a1a2	                jsr xt_swap
.a4bf	20 68 87	jsr $8768	                jsr xt_comma
.a4c2	20 68 87	jsr $8768	                jsr xt_comma
.a4c5	20 fe 8b	jsr $8bfe	                jsr does_runtime    ; does> turns into these two routines.
.a4c8	20 0c d7	jsr $d70c	                jsr dodoes
.a4cb	20 a9 8d	jsr $8da9	                jsr xt_dup
.a4ce	20 7a 8f	jsr $8f7a	                jsr xt_fetch
.a4d1	20 a2 a1	jsr $a1a2	                jsr xt_swap
.a4d4	20 1b 86	jsr $861b	                jsr xt_cell_plus
.a4d7	20 7a 8f	jsr $8f7a	                jsr xt_fetch
.a4da	60		rts		z_two_constant: rts
.a4db					xt_two_literal:
.a4db	20 28 d8	jsr $d828	                jsr underflow_2 ; double number
.a4de	20 a2 a1	jsr $a1a2	                jsr xt_swap
.a4e1	20 84 93	jsr $9384	                jsr xt_literal
.a4e4	20 84 93	jsr $9384	                jsr xt_literal
.a4e7	60		rts		z_two_literal:  rts
.a4e8					xt_two_variable:
.a4e8	20 63 89	jsr $8963	                jsr xt_create
.a4eb	ca		dex		                dex
.a4ec	ca		dex		                dex
.a4ed	a9 04		lda #$04	                lda #4
.a4ef	95 00		sta $00,x	                sta 0,x
.a4f1	74 01		stz $01,x	                stz 1,x
.a4f3	20 ab 82	jsr $82ab	                jsr xt_allot
.a4f6	60		rts		z_two_variable: rts
.a4f7					xt_type:
.a4f7	20 28 d8	jsr $d828	                jsr underflow_2
.a4fa	b5 02		lda $02,x	                lda 2,x
.a4fc	85 24		sta $24		                sta tmp1
.a4fe	b5 03		lda $03,x	                lda 3,x
.a500	85 25		sta $25		                sta tmp1+1
.a502					_loop:
.a502	b5 00		lda $00,x	                lda 0,x
.a504	15 01		ora $01,x	                ora 1,x
.a506	f0 15		beq $a51d	                beq _done
.a508	b2 24		lda ($24)	                lda (tmp1)
.a50a	20 f0 8d	jsr $8df0	                jsr emit_a      ; avoids stack foolery
.a50d	e6 24		inc $24		                inc tmp1
.a50f	d0 02		bne $a513	                bne +
.a511	e6 25		inc $25		                inc tmp1+1
.a513					+
.a513	b5 00		lda $00,x	                lda 0,x
.a515	d0 02		bne $a519	                bne +
.a517	d6 01		dec $01,x	                dec 1,x
.a519					+
.a519	d6 00		dec $00,x	                dec 0,x
.a51b	80 e5		bra $a502	                bra _loop
.a51d					_done:
.a51d	e8		inx		                inx
.a51e	e8		inx		                inx
.a51f	e8		inx		                inx
.a520	e8		inx		                inx
.a521	60		rts		z_type:         rts
.a522					xt_u_dot:
.a522	20 23 d8	jsr $d823	                jsr underflow_1
.a525	20 6f d8	jsr $d86f	                jsr print_u
.a528	a9 20		lda #$20	                lda #AscSP
.a52a	20 f0 8d	jsr $8df0	                jsr emit_a
.a52d	60		rts		z_u_dot:        rts
.a52e					xt_u_dot_r:
.a52e	20 28 d8	jsr $d828	                jsr underflow_2
.a531	20 64 a3	jsr $a364	                jsr xt_to_r
.a534	20 9c a7	jsr $a79c	                jsr xt_zero
.a537	20 54 93	jsr $9354	                jsr xt_less_number_sign
.a53a	20 d8 97	jsr $97d8	                jsr xt_number_sign_s
.a53d	20 b6 97	jsr $97b6	                jsr xt_number_sign_greater
.a540	20 8c 9a	jsr $9a8c	                jsr xt_r_from
.a543	20 8d 98	jsr $988d	                jsr xt_over
.a546	20 4a 95	jsr $954a	                jsr xt_minus
.a549	20 1e a1	jsr $a11e	                jsr xt_spaces
.a54c	20 f7 a4	jsr $a4f7	                jsr xt_type
.a54f	60		rts		z_u_dot_r:      rts
.a550					xt_u_greater_than:
.a550	20 28 d8	jsr $d828	                jsr underflow_2
.a553	b5 00		lda $00,x	                lda 0,x
.a555	d5 02		cmp $02,x	                cmp 2,x
.a557	b5 01		lda $01,x	                lda 1,x
.a559	f5 03		sbc $03,x	                sbc 3,x
.a55b	e8		inx		                inx
.a55c	e8		inx		                inx
.a55d	a9 00		lda #$00	                lda #0
.a55f	69 ff		adc #$ff	                adc #$ff
.a561	95 00		sta $00,x	                sta 0,x         ; store flag
.a563	95 01		sta $01,x	                sta 1,x
.a565	60		rts		z_u_greater_than:    rts
.a566					xt_u_less_than:
.a566	20 28 d8	jsr $d828	                jsr underflow_2
.a569	b5 02		lda $02,x	                lda 2,x
.a56b	d5 00		cmp $00,x	                cmp 0,x
.a56d	b5 03		lda $03,x	                lda 3,x
.a56f	f5 01		sbc $01,x	                sbc 1,x
.a571	e8		inx		                inx
.a572	e8		inx		                inx
.a573	a9 00		lda #$00	                lda #0
.a575	69 ff		adc #$ff	                adc #$ff
.a577	95 00		sta $00,x	                sta 0,x         ; store flag
.a579	95 01		sta $01,x	                sta 1,x
.a57b	60		rts		z_u_less_than:    rts
.a57c					xt_ud_dot:
.a57c	20 28 d8	jsr $d828	                jsr underflow_2 ; double number
.a57f	20 54 93	jsr $9354	                jsr xt_less_number_sign
.a582	20 d8 97	jsr $97d8	                jsr xt_number_sign_s
.a585	20 b6 97	jsr $97b6	                jsr xt_number_sign_greater
.a588	20 f7 a4	jsr $a4f7	                jsr xt_type
.a58b	20 18 a1	jsr $a118	                jsr xt_space
.a58e	60		rts		z_ud_dot:        rts
.a58f					xt_ud_dot_r:
.a58f	20 2d d8	jsr $d82d	                jsr underflow_3
.a592	20 64 a3	jsr $a364	                jsr xt_to_r
.a595	20 54 93	jsr $9354	                jsr xt_less_number_sign
.a598	20 d8 97	jsr $97d8	                jsr xt_number_sign_s
.a59b	20 b6 97	jsr $97b6	                jsr xt_number_sign_greater
.a59e	20 8c 9a	jsr $9a8c	                jsr xt_r_from
.a5a1	20 8d 98	jsr $988d	                jsr xt_over
.a5a4	20 4a 95	jsr $954a	                jsr xt_minus
.a5a7	20 1e a1	jsr $a11e	                jsr xt_spaces
.a5aa	20 f7 a4	jsr $a4f7	                jsr xt_type
.a5ad	60		rts		z_ud_dot_r:      rts
.a5ae					xt_um_slash_mod:
.a5ae	20 2d d8	jsr $d82d	                jsr underflow_3
.a5b1	b5 00		lda $00,x	                lda 0,x
.a5b3	15 01		ora $01,x	                ora 1,x
.a5b5	d0 05		bne $a5bc	                bne _not_zero
.a5b7	a9 04		lda #$04	                lda #err_divzero
.a5b9	4c 39 d8	jmp $d839	                jmp error
.a5bc					_not_zero:
.a5bc	a9 11		lda #$11	                lda #17
.a5be	85 2c		sta $2c		                sta tmptos
.a5c0					_loop:
.a5c0	36 04		rol $04,x	                rol 4,x
.a5c2	36 05		rol $05,x	                rol 5,x
.a5c4	c6 2c		dec $2c		                dec tmptos
.a5c6	f0 22		beq $a5ea	                beq _done
.a5c8	36 02		rol $02,x	                rol 2,x
.a5ca	36 03		rol $03,x	                rol 3,x
.a5cc	64 24		stz $24		                stz tmp1        ; store the bit we got from hi cell (MSB)
.a5ce	26 24		rol $24		                rol tmp1
.a5d0	38		sec		                sec
.a5d1	b5 02		lda $02,x	                lda 2,x
.a5d3	f5 00		sbc $00,x	                sbc 0,x
.a5d5	85 25		sta $25		                sta tmp1+1
.a5d7	b5 03		lda $03,x	                lda 3,x
.a5d9	f5 01		sbc $01,x	                sbc 1,x
.a5db	a8		tay		                tay
.a5dc	a5 24		lda $24		                lda tmp1
.a5de	e9 00		sbc #$00	                sbc #0
.a5e0	90 de		bcc $a5c0	                bcc _loop
.a5e2	a5 25		lda $25		                lda tmp1+1
.a5e4	95 02		sta $02,x	                sta 2,x
.a5e6	94 03		sty $03,x	                sty 3,x         ; used as temp storage
.a5e8	80 d6		bra $a5c0	                bra _loop
.a5ea					_done:
.a5ea	e8		inx		                inx
.a5eb	e8		inx		                inx
.a5ec	20 a2 a1	jsr $a1a2	                jsr xt_swap
.a5ef	60		rts		z_um_slash_mod: rts
.a5f0					xt_um_star:
.a5f0	20 28 d8	jsr $d828	                jsr underflow_2
.a5f3	18		clc		                clc
.a5f4	b5 00		lda $00,x	                lda 0,x         ; copy TOS to tmp2
.a5f6	e9 00		sbc #$00	                sbc #0
.a5f8	85 26		sta $26		                sta tmp2
.a5fa	b5 01		lda $01,x	                lda 1,x
.a5fc	e9 00		sbc #$00	                sbc #0
.a5fe	90 31		bcc $a631	                bcc _zero       ; is TOS zero?
.a600	85 27		sta $27		                sta tmp2+1
.a602	a9 00		lda #$00	                lda #0
.a604	85 24		sta $24		                sta tmp1
.a606	86 28		stx $28		                stx tmp3        ; tested for exit from outer loop
.a608	ca		dex		                dex
.a609	ca		dex		                dex
.a60a					_outer_loop:
.a60a	a0 08		ldy #$08	                ldy #8          ; counter inner loop
.a60c	56 04		lsr $04,x	                lsr 4,x         ; think "2,x" then later "3,x"
.a60e					_inner_loop:
.a60e	90 0c		bcc $a61c	                bcc _no_add
.a610	85 25		sta $25		                sta tmp1+1      ; save time, don't CLC
.a612	a5 24		lda $24		                lda tmp1
.a614	65 26		adc $26		                adc tmp2
.a616	85 24		sta $24		                sta tmp1
.a618	a5 25		lda $25		                lda tmp1+1
.a61a	65 27		adc $27		                adc tmp2+1
.a61c					_no_add:
.a61c	6a		ror a		                ror
.a61d	66 24		ror $24		                ror tmp1
.a61f	76 04		ror $04,x	                ror 4,x         ; think "2,x" then later "3,x"
.a621	88		dey		                dey
.a622	d0 ea		bne $a60e	                bne _inner_loop ; go back for one more shift?
.a624	e8		inx		                inx
.a625	e4 28		cpx $28		                cpx tmp3
.a627	d0 e1		bne $a60a	                bne _outer_loop ; go back for eight more shifts?
.a629	95 01		sta $01,x	                sta 1,x
.a62b	a5 24		lda $24		                lda tmp1
.a62d	95 00		sta $00,x	                sta 0,x
.a62f	80 04		bra $a635	                bra _done
.a631					_zero:
.a631	74 02		stz $02,x	                stz 2,x
.a633	74 03		stz $03,x	                stz 3,x
.a635					_done:
.a635	60		rts		z_um_star:      rts
.a636					xt_unloop:
.a636	68		pla		                pla
.a637	68		pla		                pla
.a638	68		pla		                pla
.a639	68		pla		                pla
.a63a	68		pla		                pla
.a63b	68		pla		                pla
.a63c	60		rts		z_unloop:       rts
.a63d					xt_until:
.a63d	a0 92		ldy #$92	                ldy #>zero_branch_runtime
.a63f	a9 0e		lda #$0e	                lda #<zero_branch_runtime
.a641	20 c6 d6	jsr $d6c6	                jsr cmpl_subroutine
.a644	20 68 87	jsr $8768	                jsr xt_comma
.a647	60		rts		z_until:        rts
.a648					xt_unused:
.a648	ca		dex		                dex
.a649	ca		dex		                dex
.a64a	a9 00		lda #$00	                lda #<cp_end
.a64c	38		sec		                sec
.a64d	e5 00		sbc $00		                sbc cp
.a64f	95 00		sta $00,x	                sta 0,x
.a651	a9 7c		lda #$7c	                lda #>cp_end
.a653	e5 01		sbc $01		                sbc cp+1
.a655	95 01		sta $01,x	                sta 1,x
.a657	60		rts		z_unused:       rts
.a658					xt_update:
.a658	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.a65a	b1 1e		lda ($1e),y	                lda (up),y
.a65c	09 02		ora #$02	                ora #2          ; Turn on dirty flag (bit 2)
.a65e	91 1e		sta ($1e),y	                sta (up),y
.a660	60		rts		z_update:       rts
.a661					xt_useraddr:
.a661	ca		dex		                dex
.a662	ca		dex		                dex
.a663	a9 1e		lda #$1e	                lda #<up
.a665	95 00		sta $00,x	                sta 0,x
.a667	a9 00		lda #$00	                lda #>up
.a669	95 01		sta $01,x	                sta 1,x
.a66b	60		rts		z_useraddr:     rts
.a66c					xt_variable:
.a66c	20 63 89	jsr $8963	                jsr xt_create
.a66f	a9 00		lda #$00	                lda #0
.a671	92 00		sta ($00)	                sta (cp)
.a673	e6 00		inc $00		                inc cp
.a675	d0 02		bne $a679	                bne +
.a677	e6 01		inc $01		                inc cp+1
.a679					+
.a679	92 00		sta ($00)	                sta (cp)
.a67b	e6 00		inc $00		                inc cp
.a67d	d0 02		bne $a681	                bne +
.a67f	e6 01		inc $01		                inc cp+1
.a681					+
.a681	20 2b 89	jsr $892b	                jsr adjust_z
.a684	60		rts		z_variable:     rts
.a685					xt_while:
.a685	a0 92		ldy #$92	                ldy #>zero_branch_runtime
.a687	a9 0e		lda #$0e	                lda #<zero_branch_runtime
.a689	20 c6 d6	jsr $d6c6	                jsr cmpl_subroutine
.a68c	20 6c 91	jsr $916c	                jsr xt_here
.a68f	20 9c a7	jsr $a79c	                jsr xt_zero
.a692	20 68 87	jsr $8768	                jsr xt_comma
.a695	20 a2 a1	jsr $a1a2	                jsr xt_swap
.a698	60		rts		z_while:        rts
.a699					xt_within:
.a699	20 2d d8	jsr $d82d	                jsr underflow_3
.a69c	20 8d 98	jsr $988d	                jsr xt_over
.a69f	20 4a 95	jsr $954a	                jsr xt_minus
.a6a2	20 64 a3	jsr $a364	                jsr xt_to_r
.a6a5	20 4a 95	jsr $954a	                jsr xt_minus
.a6a8	20 8c 9a	jsr $9a8c	                jsr xt_r_from
.a6ab	20 66 a5	jsr $a566	                jsr xt_u_less_than
.a6ae	60		rts		z_within:       rts
.a6af					xt_word:
.a6af	20 23 d8	jsr $d823	                jsr underflow_1
.a6b2	a4 0c		ldy $0c		                ldy toin                ; >IN
.a6b4					_loop:
.a6b4	c4 0a		cpy $0a		                cpy ciblen              ; quit if end of input
.a6b6	f0 09		beq $a6c1	                beq _found_char
.a6b8	b1 08		lda ($08),y	                lda (cib),y
.a6ba	d5 00		cmp $00,x	                cmp 0,x                 ; ASCII of delimiter
.a6bc	d0 03		bne $a6c1	                bne _found_char
.a6be	c8		iny		                iny
.a6bf	80 f3		bra $a6b4	                bra _loop
.a6c1					_found_char:
.a6c1	84 0c		sty $0c		                sty toin
.a6c3	20 34 99	jsr $9934	                jsr xt_parse            ; Returns ( addr u )
.a6c6	b5 00		lda $00,x	                lda 0,x
.a6c8	92 00		sta ($00)	                sta (cp)                ; Save length of string
.a6ca	48		pha		                pha                     ; Keep copy of length for later
.a6cb	20 a9 8d	jsr $8da9	                jsr xt_dup              ; ( addr u u )
.a6ce	a5 00		lda $00		                lda cp
.a6d0	18		clc		                clc
.a6d1	69 01		adc #$01	                adc #1
.a6d3	95 02		sta $02,x	                sta 2,x                 ; LSB of CP
.a6d5	a5 01		lda $01		                lda cp+1
.a6d7	69 00		adc #$00	                adc #0
.a6d9	95 03		sta $03,x	                sta 3,x                 ; ( addr cp+1 u )
.a6db	20 bc 95	jsr $95bc	                jsr xt_move
.a6de	ca		dex		                dex
.a6df	ca		dex		                dex
.a6e0	a5 00		lda $00		                lda cp
.a6e2	95 00		sta $00,x	                sta 0,x
.a6e4	a5 01		lda $01		                lda cp+1
.a6e6	95 01		sta $01,x	                sta 1,x
.a6e8	68		pla		                pla                     ; length of string
.a6e9	18		clc		                clc
.a6ea	65 00		adc $00		                adc cp
.a6ec	85 00		sta $00		                sta cp
.a6ee	a5 01		lda $01		                lda cp+1
.a6f0	69 00		adc #$00	                adc #0                  ; we only need the carry
.a6f2	85 01		sta $01		                sta cp+1
.a6f4	60		rts		z_word:         rts
.a6f5					xt_wordlist:
.a6f5	a0 05		ldy #$05	                ldy #num_wordlists_offset
.a6f7	b1 1e		lda ($1e),y	                lda (up),y      ; This is a byte variable, so only
.a6f9	c9 0c		cmp #$0c	                cmp #max_wordlists
.a6fb	d0 05		bne $a702	                bne _ok
.a6fd	a9 0b		lda #$0b	                lda #err_wordlist
.a6ff	4c 39 d8	jmp $d839	                jmp error
.a702					_ok:
.a702	1a		inc a		                ina             ; Increment the wordlist#
.a703	91 1e		sta ($1e),y	                sta (up),y      ; Save it into byte variable #wordlists
.a705	ca		dex		                dex             ; and put it on the stack.
.a706	ca		dex		                dex
.a707	95 00		sta $00,x	                sta 0,x
.a709	74 01		stz $01,x	                stz 1,x         ; 12 is the max, so upper byte is always zero.
.a70b	60		rts		z_wordlist:     rts
.a70c					xt_words:
.a70c	20 5d 89	jsr $895d	                jsr xt_cr
.a70f	a9 00		lda #$00	                lda #0
.a711	48		pha		                pha
.a712	ca		dex		                dex                     ; Make room on the stack for
.a713	ca		dex		                dex                     ; a dictionary pointer.
.a714	64 28		stz $28		                stz tmp3                ; Start at the beginning of
.a716					_wordlist_loop:
.a716	a0 1e		ldy #$1e	                ldy #num_order_offset   ; Check against byte variable #ORDER.
.a718	a5 28		lda $28		                lda tmp3
.a71a	d1 1e		cmp ($1e),y	                cmp (up),y              ; See if we are done.
.a71c	d0 02		bne $a720	                bne _have_wordlist
.a71e	80 45		bra $a765	                bra _words_done
.a720					_have_wordlist:
.a720	18		clc		                clc                     ; Index into byte array SEARCH-ORDER.
.a721	69 1f		adc #$1f	                adc #search_order_offset
.a723	a8		tay		                tay
.a724	b1 1e		lda ($1e),y	                lda (up),y              ; Get the index into array WORDLISTS
.a726	0a		asl a		                asl                     ; Turn offset into cells offset.
.a727	18		clc		                clc
.a728	69 06		adc #$06	                adc #wordlists_offset
.a72a	a8		tay		                tay
.a72b	b1 1e		lda ($1e),y	                lda (up),y              ; Save the DP for this wordlist
.a72d	95 00		sta $00,x	                sta 0,x                 ; on the stack. ( nt )
.a72f	c8		iny		                iny
.a730	b1 1e		lda ($1e),y	                lda (up),y
.a732	95 01		sta $01,x	                sta 1,x
.a734					_loop:
.a734	20 a9 8d	jsr $8da9	                jsr xt_dup              ; ( nt nt )
.a737	20 f8 95	jsr $95f8	                jsr xt_name_to_string   ; ( nt addr u )
.a73a	68		pla		                pla
.a73b	18		clc		                clc
.a73c	75 00		adc $00,x	                adc 0,x
.a73e	1a		inc a		                ina                     ; don't forget the space between words
.a73f	c9 4f		cmp #$4f	                cmp #MAX_LINE_LENGTH    ; usually 79
.a741	90 06		bcc $a749	                bcc +
.a743	20 5d 89	jsr $895d	                jsr xt_cr
.a746	b5 00		lda $00,x	                lda 0,x                 ; After going to next line, start
.a748	1a		inc a		                ina                     ; with length of this word.
.a749					+
.a749	48		pha		                pha
.a74a	20 f7 a4	jsr $a4f7	                jsr xt_type             ; ( nt )
.a74d	a9 20		lda #$20	                lda #AscSP
.a74f	20 f0 8d	jsr $8df0	                jsr emit_a
.a752	20 17 98	jsr $9817	                jsr xt_one_plus         ; 1+
.a755	20 17 98	jsr $9817	                jsr xt_one_plus         ; 1+
.a758	20 7a 8f	jsr $8f7a	                jsr xt_fetch            ; @ ( nt+1 )
.a75b	b5 00		lda $00,x	                lda 0,x
.a75d	15 01		ora $01,x	                ora 1,x
.a75f	d0 d3		bne $a734	                bne _loop
.a761	e6 28		inc $28		                inc tmp3
.a763	80 b1		bra $a716	                bra _wordlist_loop
.a765					_words_done:
.a765	68		pla		                pla                     ; dump counter
.a766	e8		inx		                inx
.a767	e8		inx		                inx
.a768	60		rts		z_words:        rts
.a769					xt_wordsize:
.a769	20 23 d8	jsr $d823	                jsr underflow_1
.a76c	b5 00		lda $00,x	                lda 0,x
.a76e	85 24		sta $24		                sta tmp1
.a770	b5 01		lda $01,x	                lda 1,x
.a772	85 25		sta $25		                sta tmp1+1
.a774	a0 06		ldy #$06	                ldy #6
.a776	b1 24		lda ($24),y	                lda (tmp1),y    ; LSB of z
.a778	88		dey		                dey
.a779	88		dey		                dey
.a77a	38		sec		                sec
.a77b	f1 24		sbc ($24),y	                sbc (tmp1),y    ; LSB of xt
.a77d	95 00		sta $00,x	                sta 0,x
.a77f	a0 07		ldy #$07	                ldy #7
.a781	b1 24		lda ($24),y	                lda (tmp1),y    ; MSB of z
.a783	88		dey		                dey
.a784	88		dey		                dey
.a785	f1 24		sbc ($24),y	                sbc (tmp1),y    ; MSB of xt
.a787	95 01		sta $01,x	                sta 1,x
.a789	60		rts		z_wordsize:     rts
.a78a					xt_xor:
.a78a	20 28 d8	jsr $d828	                jsr underflow_2
.a78d	b5 00		lda $00,x	                lda 0,x
.a78f	55 02		eor $02,x	                eor 2,x
.a791	95 02		sta $02,x	                sta 2,x
.a793	b5 01		lda $01,x	                lda 1,x
.a795	55 03		eor $03,x	                eor 3,x
.a797	95 03		sta $03,x	                sta 3,x
.a799	e8		inx		                inx
.a79a	e8		inx		                inx
.a79b	60		rts		z_xor:          rts
.a79c					xt_case:
.a79c					xt_forth_wordlist:
.a79c					xt_zero:
.a79c	ca		dex		                dex             ; push
.a79d	ca		dex		                dex
.a79e	74 00		stz $00,x	                stz 0,x
.a7a0	74 01		stz $01,x	                stz 1,x
.a7a2					z_case:
.a7a2					z_forth_wordlist:
.a7a2					z_zero:
.a7a2	60		rts		                rts
.a7a3					xt_zero_equal:
.a7a3	20 23 d8	jsr $d823	                jsr underflow_1
.a7a6	b5 00		lda $00,x	                lda 0,x
.a7a8	15 01		ora $01,x	                ora 1,x
.a7aa	f0 04		beq $a7b0	                beq _zero
.a7ac	a9 00		lda #$00	                lda #0
.a7ae	80 02		bra $a7b2	                bra _store
.a7b0					_zero:
.a7b0	a9 ff		lda #$ff	                lda #$ff
.a7b2					_store:
.a7b2	95 00		sta $00,x	                sta 0,x
.a7b4	95 01		sta $01,x	                sta 1,x
.a7b6	60		rts		z_zero_equal:   rts
.a7b7					xt_zero_greater:
.a7b7	20 23 d8	jsr $d823	                jsr underflow_1
.a7ba	a0 00		ldy #$00	                ldy #0          ; Default is FALSE (TOS is negative)
.a7bc	b5 01		lda $01,x	                lda 1,x         ; MSB
.a7be	30 05		bmi $a7c5	                bmi _done       ; TOS is negative, keep FLASE
.a7c0	15 00		ora $00,x	                ora 0,x
.a7c2	f0 01		beq $a7c5	                beq _done       ; TOS is zero, keep FALSE
.a7c4	88		dey		                dey             ; TOS is postive, make true
.a7c5					_done:
.a7c5	98		tya		                tya
.a7c6	95 00		sta $00,x	                sta 0,x
.a7c8	95 01		sta $01,x	                sta 1,x
.a7ca	60		rts		z_zero_greater: rts
.a7cb					xt_zero_less:
.a7cb	20 23 d8	jsr $d823	                jsr underflow_1
.a7ce	a0 00		ldy #$00	                ldy #0          ; Default is FALSE (TOS positive)
.a7d0	b5 01		lda $01,x	                lda 1,x         ; MSB
.a7d2	10 01		bpl $a7d5	                bpl _done       ; TOS is positive, so keep FALSE
.a7d4	88		dey		                dey             ; TOS is negative, make TRUE
.a7d5					_done:
.a7d5	98		tya		                tya
.a7d6	95 00		sta $00,x	                sta 0,x
.a7d8	95 01		sta $01,x	                sta 1,x
.a7da	60		rts		z_zero_less:    rts
.a7db					xt_zero_unequal:
.a7db	20 23 d8	jsr $d823	                jsr underflow_1
.a7de	a0 00		ldy #$00	                ldy #0          ; default false
.a7e0	b5 00		lda $00,x	                lda 0,x
.a7e2	15 01		ora $01,x	                ora 1,x
.a7e4	f0 01		beq $a7e7	                beq _got_zero
.a7e6	88		dey		                dey
.a7e7					_got_zero:
.a7e7	98		tya		                tya
.a7e8	95 00		sta $00,x	                sta 0,x
.a7ea	95 01		sta $01,x	                sta 1,x
.a7ec	60		rts		z_zero_unequal: rts
.a7ed					xt_editor_screen_helper:
.a7ed	20 a9 8d	jsr $8da9	                jsr xt_dup
.a7f0	20 d3 9e	jsr $9ed3	                jsr xt_scr
.a7f3	20 81 a1	jsr $a181	                jsr xt_store
.a7f6	20 af 85	jsr $85af	                jsr xt_buffer
.a7f9					z_editor_screen_helper:
.a7f9	60		rts		                rts
.a7fa					xt_editor_enter_screen:
.a7fa	20 ed a7	jsr $a7ed	                jsr xt_editor_screen_helper
.a7fd	20 28 8d	jsr $8d28	                jsr xt_drop
.a800	64 2e		stz $2e		                stz editor1
.a802					_prompt_loop:
.a802	ca		dex		                dex
.a803	ca		dex		                dex
.a804	a5 2e		lda $2e		                lda editor1
.a806	95 00		sta $00,x	                sta 0,x
.a808	74 01		stz $01,x	                stz 1,x
.a80a	20 cf a8	jsr $a8cf	                jsr xt_editor_o
.a80d	e6 2e		inc $2e		                inc editor1
.a80f	a9 10		lda #$10	                lda #16
.a811	c5 2e		cmp $2e		                cmp editor1
.a813	d0 ed		bne $a802	                bne _prompt_loop
.a815					z_editor_enter_screen:
.a815	60		rts		                rts
.a816					xt_editor_erase_screen:
.a816	20 ed a7	jsr $a7ed	                jsr xt_editor_screen_helper
.a819	ca		dex		                dex
.a81a	ca		dex		                dex
.a81b	74 00		stz $00,x	                stz 0,x
.a81d	a9 04		lda #$04	                lda #4          ; 4 in MSB makes 1024 ($400).
.a81f	95 01		sta $01,x	                sta 1,x
.a821	20 e4 8e	jsr $8ee4	                jsr xt_blank
.a824	20 58 a6	jsr $a658	                jsr xt_update
.a827					z_editor_erase_screen:
.a827	60		rts		                rts
.a828					xt_editor_el:
.a828	20 b6 a8	jsr $a8b6	                jsr xt_editor_line
.a82b	ca		dex		                dex
.a82c	ca		dex		                dex
.a82d	a9 40		lda #$40	                lda #64
.a82f	95 00		sta $00,x	                sta 0,x
.a831	74 01		stz $01,x	                stz 1,x
.a833	20 e4 8e	jsr $8ee4	                jsr xt_blank
.a836	20 58 a6	jsr $a658	                jsr xt_update
.a839	60		rts		z_editor_el:    rts
.a83a					xt_editor_l:
.a83a	ca		dex		                dex             ; Put SCR on the stack.
.a83b	ca		dex		                dex
.a83c	a0 02		ldy #$02	                ldy #scr_offset
.a83e	b1 1e		lda ($1e),y	                lda (up),y
.a840	95 00		sta $00,x	                sta 0,x
.a842	c8		iny		                iny
.a843	b1 1e		lda ($1e),y	                lda (up),y
.a845	95 01		sta $01,x	                sta 1,x
.a847	20 bb 83	jsr $83bb	                jsr xt_block    ; Get the current screen.
.a84a	20 5d 89	jsr $895d	                jsr xt_cr
.a84d	80 08		bra $a857	                bra _after_screen_msg
.a84f					_screen_msg:
>a84f	53 63 72 65 65 6e 20 23		                .text "Screen #"
.a857					_after_screen_msg:
.a857	20 a3 a0	jsr $a0a3	                jsr sliteral_runtime
>a85a	4f a8 08 00			                .word _screen_msg, _after_screen_msg-_screen_msg
.a85e	20 f7 a4	jsr $a4f7	                jsr xt_type
.a861	20 d3 9e	jsr $9ed3	                jsr xt_scr
.a864	20 7a 8f	jsr $8f7a	                jsr xt_fetch
.a867	ca		dex		                dex
.a868	ca		dex		                dex
.a869	a9 04		lda #$04	                lda #4          ; four spaces
.a86b	95 00		sta $00,x	                sta 0,x
.a86d	74 01		stz $01,x	                stz 1,x
.a86f	20 2e a5	jsr $a52e	                jsr xt_u_dot_r
.a872	64 28		stz $28		                stz tmp3
.a874					_line_loop:
.a874	20 5d 89	jsr $895d	                jsr xt_cr
.a877	ca		dex		                dex
.a878	ca		dex		                dex
.a879	ca		dex		                dex
.a87a	ca		dex		                dex
.a87b	74 03		stz $03,x	                stz 3,x
.a87d	a5 28		lda $28		                lda tmp3
.a87f	95 02		sta $02,x	                sta 2,x
.a881	74 01		stz $01,x	                stz 1,x
.a883	a9 02		lda #$02	                lda #2
.a885	95 00		sta $00,x	                sta 0,x
.a887	20 2e a5	jsr $a52e	                jsr xt_u_dot_r
.a88a	20 18 a1	jsr $a118	                jsr xt_space
.a88d	20 a9 8d	jsr $8da9	                jsr xt_dup
.a890	ca		dex		                dex
.a891	ca		dex		                dex
.a892	a9 40		lda #$40	                lda #64
.a894	95 00		sta $00,x	                sta 0,x
.a896	74 01		stz $01,x	                stz 1,x
.a898	20 f7 a4	jsr $a4f7	                jsr xt_type
.a89b	18		clc		                clc
.a89c	a9 40		lda #$40	                lda #64
.a89e	75 00		adc $00,x	                adc 0,x
.a8a0	95 00		sta $00,x	                sta 0,x
.a8a2	b5 01		lda $01,x	                lda 1,x
.a8a4	69 00		adc #$00	                adc #0      ; Add carry
.a8a6	95 01		sta $01,x	                sta 1,x
.a8a8	e6 28		inc $28		                inc tmp3
.a8aa	a5 28		lda $28		                lda tmp3
.a8ac	c9 10		cmp #$10	                cmp #16
.a8ae	d0 c4		bne $a874	                bne _line_loop
.a8b0	20 5d 89	jsr $895d	                jsr xt_cr
.a8b3	e8		inx		                inx
.a8b4	e8		inx		                inx
.a8b5	60		rts		z_editor_l:            rts
.a8b6					xt_editor_line:
.a8b6	20 23 d8	jsr $d823	                jsr underflow_1
.a8b9	a0 06		ldy #$06	                ldy #6          ; *64 is same as left shift 6 times.
.a8bb					_shift_tos_left:
.a8bb	16 00		asl $00,x	                asl 0,x         ; Shift TOS to the left
.a8bd	36 01		rol $01,x	                rol 1,x         ; ROL brings MSb from lower byte.
.a8bf	88		dey		                dey
.a8c0	d0 f9		bne $a8bb	                bne _shift_tos_left
.a8c2	20 d3 9e	jsr $9ed3	                jsr xt_scr
.a8c5	20 7a 8f	jsr $8f7a	                jsr xt_fetch
.a8c8	20 bb 83	jsr $83bb	                jsr xt_block
.a8cb	20 dd 99	jsr $99dd	                jsr xt_plus
.a8ce	60		rts		z_editor_line:  rts
.a8cf					xt_editor_o:
.a8cf	20 5d 89	jsr $895d	                jsr xt_cr
.a8d2	20 a9 8d	jsr $8da9	                jsr xt_dup
.a8d5	20 9b a3	jsr $a39b	                jsr xt_two
.a8d8	20 2e a5	jsr $a52e	                jsr xt_u_dot_r
.a8db	20 18 a1	jsr $a118	                jsr xt_space
.a8de	a9 2a		lda #$2a	                lda #42         ; ASCII for *
.a8e0	20 f0 8d	jsr $8df0	                jsr emit_a
.a8e3	20 18 a1	jsr $a118	                jsr xt_space
.a8e6	20 b6 a8	jsr $a8b6	                jsr xt_editor_line
.a8e9	20 a9 8d	jsr $8da9	                jsr xt_dup      ; Save a copy of the line address for later.
.a8ec	ca		dex		                dex
.a8ed	ca		dex		                dex
.a8ee	a9 40		lda #$40	                lda #64         ; chars/line
.a8f0	95 00		sta $00,x	                sta 0,x
.a8f2	74 01		stz $01,x	                stz 1,x
.a8f4	20 4e 81	jsr $814e	                jsr xt_accept
.a8f7	20 a9 8d	jsr $8da9	                jsr xt_dup
.a8fa	20 68 96	jsr $9668	                jsr xt_not_rote ; -rot
.a8fd	20 dd 99	jsr $99dd	                jsr xt_plus
.a900	ca		dex		                dex
.a901	ca		dex		                dex
.a902	a9 40		lda #$40	                lda #64         ; chars/line
.a904	95 00		sta $00,x	                sta 0,x
.a906	74 01		stz $01,x	                stz 1,x
.a908	20 51 9b	jsr $9b51	                jsr xt_rot
.a90b	20 4a 95	jsr $954a	                jsr xt_minus
.a90e	20 e4 8e	jsr $8ee4	                jsr xt_blank
.a911	20 58 a6	jsr $a658	                jsr xt_update
.a914	60		rts		z_editor_o:     rts

;******  Return to file: platform/../taliforth.asm


;******  Processing file: platform/../assembler.asm

.a915					assembler:
.a915					xt_asm_adc_h:
.a915	a9 69		lda #$69	                lda #$69
.a917	4c 70 ac	jmp $ac70	                jmp asm_common
.a91a					z_asm_adc_h:
.a91a					xt_asm_adc_x:
.a91a	a9 7d		lda #$7d	                lda #$7D
.a91c	4c 70 ac	jmp $ac70	                jmp asm_common
.a91f					z_asm_adc_x:
.a91f					xt_asm_adc_y:
.a91f	a9 79		lda #$79	                lda #$79
.a921	4c 70 ac	jmp $ac70	                jmp asm_common
.a924					z_asm_adc_y:
.a924					xt_asm_adc_z:
.a924	a9 65		lda #$65	                lda #$65
.a926	4c 70 ac	jmp $ac70	                jmp asm_common
.a929					z_asm_adc_z:
.a929					xt_asm_adc_zi:
.a929	a9 72		lda #$72	                lda #$72
.a92b	4c 70 ac	jmp $ac70	                jmp asm_common
.a92e					z_asm_adc_zi:
.a92e					xt_asm_adc_ziy:
.a92e	a9 71		lda #$71	                lda #$71
.a930	4c 70 ac	jmp $ac70	                jmp asm_common
.a933					z_asm_adc_ziy:
.a933					xt_asm_adc_zx:
.a933	a9 75		lda #$75	                lda #$75
.a935	4c 70 ac	jmp $ac70	                jmp asm_common
.a938					z_asm_adc_zx:
.a938					xt_asm_adc_zxi:
.a938	a9 61		lda #$61	                lda #$61
.a93a	4c 70 ac	jmp $ac70	                jmp asm_common
.a93d					z_asm_adc_zxi:
.a93d					xt_asm_and:
.a93d	a9 2d		lda #$2d	                lda #$2D
.a93f	4c 70 ac	jmp $ac70	                jmp asm_common
.a942					z_asm_and:
.a942					xt_asm_and_h:
.a942	a9 29		lda #$29	                lda #$29
.a944	4c 70 ac	jmp $ac70	                jmp asm_common
.a947					z_asm_and_h:
.a947					xt_asm_and_x:
.a947	a9 3d		lda #$3d	                lda #$3D
.a949	4c 70 ac	jmp $ac70	                jmp asm_common
.a94c					z_asm_and_x:
.a94c					xt_asm_and_y:
.a94c	a9 39		lda #$39	                lda #$39
.a94e	4c 70 ac	jmp $ac70	                jmp asm_common
.a951					z_asm_and_y:
.a951					xt_asm_and_z:
.a951	a9 25		lda #$25	                lda #$25
.a953	4c 70 ac	jmp $ac70	                jmp asm_common
.a956					z_asm_and_z:
.a956					xt_asm_and_zi:
.a956	a9 32		lda #$32	                lda #$32
.a958	4c 70 ac	jmp $ac70	                jmp asm_common
.a95b					z_asm_and_zi:
.a95b					xt_asm_and_ziy:
.a95b	a9 31		lda #$31	                lda #$31
.a95d	4c 70 ac	jmp $ac70	                jmp asm_common
.a960					z_asm_and_ziy:
.a960					xt_asm_and_zx:
.a960	a9 35		lda #$35	                lda #$35
.a962	4c 70 ac	jmp $ac70	                jmp asm_common
.a965					z_asm_and_zx:
.a965					xt_asm_and_zxi:
.a965	a9 21		lda #$21	                lda #$21
.a967	4c 70 ac	jmp $ac70	                jmp asm_common
.a96a					z_asm_and_zxi:
.a96a					xt_asm_asl:
.a96a	a9 0e		lda #$0e	                lda #$0E
.a96c	4c 70 ac	jmp $ac70	                jmp asm_common
.a96f					z_asm_asl:
.a96f					xt_asm_asl_a:
.a96f	a9 0a		lda #$0a	                lda #$0A
.a971	4c 70 ac	jmp $ac70	                jmp asm_common
.a974					z_asm_asl_a:
.a974					xt_asm_asl_x:
.a974	a9 1e		lda #$1e	                lda #$1E
.a976	4c 70 ac	jmp $ac70	                jmp asm_common
.a979					z_asm_asl_x:
.a979					xt_asm_asl_z:
.a979	a9 06		lda #$06	                lda #$06
.a97b	4c 70 ac	jmp $ac70	                jmp asm_common
.a97e					z_asm_asl_z:
.a97e					xt_asm_asl_zx:
.a97e	a9 16		lda #$16	                lda #$16
.a980	4c 70 ac	jmp $ac70	                jmp asm_common
.a983					z_asm_asl_zx:
.a983					xt_asm_bcc:
.a983	a9 90		lda #$90	                lda #$90
.a985	4c 70 ac	jmp $ac70	                jmp asm_common
.a988					z_asm_bcc:
.a988					xt_asm_bcs:
.a988	a9 b0		lda #$b0	                lda #$B0
.a98a	a0 02		ldy #$02	                ldy #2
.a98c	4c 70 ac	jmp $ac70	                jmp asm_common
.a98f					z_asm_bcs:
.a98f					xt_asm_beq:
.a98f	a9 f0		lda #$f0	                lda #$F0
.a991	4c 70 ac	jmp $ac70	                jmp asm_common
.a994					z_asm_beq:
.a994					xt_asm_bit:
.a994	a9 2c		lda #$2c	                lda #$2C
.a996	4c 70 ac	jmp $ac70	                jmp asm_common
.a999					z_asm_bit:
.a999					xt_asm_bit_h:
.a999	a9 89		lda #$89	                lda #$89
.a99b	4c 70 ac	jmp $ac70	                jmp asm_common
.a99e					z_asm_bit_h:
.a99e					xt_asm_bit_x:
.a99e	a9 3c		lda #$3c	                lda #$3C
.a9a0	4c 70 ac	jmp $ac70	                jmp asm_common
.a9a3					z_asm_bit_x:
.a9a3					xt_asm_bit_z:
.a9a3	a9 24		lda #$24	                lda #$24
.a9a5	4c 70 ac	jmp $ac70	                jmp asm_common
.a9a8					z_asm_bit_z:
.a9a8					xt_asm_bit_zx:
.a9a8	a9 34		lda #$34	                lda #$34
.a9aa	4c 70 ac	jmp $ac70	                jmp asm_common
.a9ad					z_asm_bit_zx:
.a9ad					xt_asm_bmi:
.a9ad	a9 30		lda #$30	                lda #$30
.a9af	4c 70 ac	jmp $ac70	                jmp asm_common
.a9b2					z_asm_bmi:
.a9b2					xt_asm_bne:
.a9b2	a9 d0		lda #$d0	                lda #$D0
.a9b4	4c 70 ac	jmp $ac70	                jmp asm_common
.a9b7					z_asm_bne:
.a9b7					xt_asm_bpl:
.a9b7	a9 10		lda #$10	                lda #$10
.a9b9	4c 70 ac	jmp $ac70	                jmp asm_common
.a9bc					z_asm_bpl:
.a9bc					xt_asm_bra:
.a9bc	a9 80		lda #$80	                lda #$80
.a9be	4c 70 ac	jmp $ac70	                jmp asm_common
.a9c1					z_asm_bra:
.a9c1					xt_asm_brk:
.a9c1	a9 00		lda #$00	                lda #$00
.a9c3	4c 70 ac	jmp $ac70	                jmp asm_common
.a9c6					z_asm_brk:
.a9c6					xt_asm_bvc:
.a9c6	a9 50		lda #$50	                lda #$50
.a9c8	4c 70 ac	jmp $ac70	                jmp asm_common
.a9cb					z_asm_bvc:
.a9cb					xt_asm_bvs:
.a9cb	a9 70		lda #$70	                lda #$70
.a9cd	4c 70 ac	jmp $ac70	                jmp asm_common
.a9d0					z_asm_bvs:
.a9d0					xt_asm_clc:
.a9d0	a9 18		lda #$18	                lda #$18
.a9d2	4c 70 ac	jmp $ac70	                jmp asm_common
.a9d5					z_asm_clc:
.a9d5					xt_asm_cld:
.a9d5	a9 d8		lda #$d8	                lda #$D8
.a9d7	4c 70 ac	jmp $ac70	                jmp asm_common
.a9da					z_asm_cld:
.a9da					xt_asm_cli:
.a9da	a9 58		lda #$58	                lda #$58
.a9dc	4c 70 ac	jmp $ac70	                jmp asm_common
.a9df					z_asm_cli:
.a9df					xt_asm_clv:
.a9df	a9 b8		lda #$b8	                lda #$B8
.a9e1	4c 70 ac	jmp $ac70	                jmp asm_common
.a9e4					z_asm_clv:
.a9e4					xt_asm_cmp:
.a9e4	a9 cd		lda #$cd	                lda #$CD
.a9e6	4c 70 ac	jmp $ac70	                jmp asm_common
.a9e9					z_asm_cmp:
.a9e9					xt_asm_cmp_h:
.a9e9	a9 c9		lda #$c9	                lda #$C9
.a9eb	4c 70 ac	jmp $ac70	                jmp asm_common
.a9ee					z_asm_cmp_h:
.a9ee					xt_asm_cmp_x:
.a9ee	a9 dd		lda #$dd	                lda #$DD
.a9f0	4c 70 ac	jmp $ac70	                jmp asm_common
.a9f3					z_asm_cmp_x:
.a9f3					xt_asm_cmp_y:
.a9f3	a9 d9		lda #$d9	                lda #$D9
.a9f5	4c 70 ac	jmp $ac70	                jmp asm_common
.a9f8					z_asm_cmp_y:
.a9f8					xt_asm_cmp_z:
.a9f8	a9 c5		lda #$c5	                lda #$C5
.a9fa	4c 70 ac	jmp $ac70	                jmp asm_common
.a9fd					z_asm_cmp_z:
.a9fd					xt_asm_cmp_zi:
.a9fd	a9 d2		lda #$d2	                lda #$D2
.a9ff	4c 70 ac	jmp $ac70	                jmp asm_common
.aa02					z_asm_cmp_zi:
.aa02					xt_asm_cmp_ziy:
.aa02	a9 d1		lda #$d1	                lda #$D1
.aa04	4c 70 ac	jmp $ac70	                jmp asm_common
.aa07					z_asm_cmp_ziy:
.aa07					xt_asm_cmp_zx:
.aa07	a9 d5		lda #$d5	                lda #$D5
.aa09	4c 70 ac	jmp $ac70	                jmp asm_common
.aa0c					z_asm_cmp_zx:
.aa0c					xt_asm_cmp_zxi:
.aa0c	a9 c1		lda #$c1	                lda #$C1
.aa0e	4c 70 ac	jmp $ac70	                jmp asm_common
.aa11					z_asm_cmp_zxi:
.aa11					xt_asm_cpx:
.aa11	a9 ec		lda #$ec	                lda #$EC
.aa13	4c 70 ac	jmp $ac70	                jmp asm_common
.aa16					z_asm_cpx:
.aa16					xt_asm_cpx_h:
.aa16	a9 e0		lda #$e0	                lda #$E0
.aa18	4c 70 ac	jmp $ac70	                jmp asm_common
.aa1b					z_asm_cpx_h:
.aa1b					xt_asm_cpx_z:
.aa1b	a9 e4		lda #$e4	                lda #$E4
.aa1d	4c 70 ac	jmp $ac70	                jmp asm_common
.aa20					z_asm_cpx_z:
.aa20					xt_asm_cpy:
.aa20	a9 cc		lda #$cc	                lda #$CC
.aa22	a0 03		ldy #$03	                ldy #3
.aa24	4c 70 ac	jmp $ac70	                jmp asm_common
.aa27					z_asm_cpy:
.aa27					xt_asm_cpy_h:
.aa27	a9 c0		lda #$c0	                lda #$C0
.aa29	4c 70 ac	jmp $ac70	                jmp asm_common
.aa2c					z_asm_cpy_h:
.aa2c					xt_asm_cpy_z:
.aa2c	a9 c4		lda #$c4	                lda #$C4
.aa2e	4c 70 ac	jmp $ac70	                jmp asm_common
.aa31					z_asm_cpy_z:
.aa31					xt_asm_dec:
.aa31	a9 ce		lda #$ce	                lda #$CE
.aa33	4c 70 ac	jmp $ac70	                jmp asm_common
.aa36					z_asm_dec:
.aa36					xt_asm_dec_a:
.aa36	a9 3a		lda #$3a	                lda #$3A
.aa38	4c 70 ac	jmp $ac70	                jmp asm_common
.aa3b					z_asm_dec_a:
.aa3b					xt_asm_dec_x:
.aa3b	a9 de		lda #$de	                lda #$DE
.aa3d	4c 70 ac	jmp $ac70	                jmp asm_common
.aa40					z_asm_dec_x:
.aa40					xt_asm_dec_z:
.aa40	a9 c6		lda #$c6	                lda #$C6
.aa42	4c 70 ac	jmp $ac70	                jmp asm_common
.aa45					z_asm_dec_z:
.aa45					xt_asm_dec_zx:
.aa45	a9 d6		lda #$d6	                lda #$D6
.aa47	4c 70 ac	jmp $ac70	                jmp asm_common
.aa4a					z_asm_dec_zx:
.aa4a					xt_asm_dex:
.aa4a	a9 ca		lda #$ca	                lda #$CA
.aa4c	4c 70 ac	jmp $ac70	                jmp asm_common
.aa4f					z_asm_dex:
.aa4f					xt_asm_dey:
.aa4f	a9 88		lda #$88	                lda #$88
.aa51	4c 70 ac	jmp $ac70	                jmp asm_common
.aa54					z_asm_dey:
.aa54					xt_asm_eor:
.aa54	a9 4d		lda #$4d	                lda #$4D
.aa56	4c 70 ac	jmp $ac70	                jmp asm_common
.aa59					z_asm_eor:
.aa59					xt_asm_eor_h:
.aa59	a9 49		lda #$49	                lda #$49
.aa5b	4c 70 ac	jmp $ac70	                jmp asm_common
.aa5e					z_asm_eor_h:
.aa5e					xt_asm_eor_x:
.aa5e	a9 5d		lda #$5d	                lda #$5D
.aa60	4c 70 ac	jmp $ac70	                jmp asm_common
.aa63					z_asm_eor_x:
.aa63					xt_asm_eor_y:
.aa63	a9 59		lda #$59	                lda #$59
.aa65	4c 70 ac	jmp $ac70	                jmp asm_common
.aa68					z_asm_eor_y:
.aa68					xt_asm_eor_z:
.aa68	a9 45		lda #$45	                lda #$45
.aa6a	4c 70 ac	jmp $ac70	                jmp asm_common
.aa6d					z_asm_eor_z:
.aa6d					xt_asm_eor_zi:
.aa6d	a9 52		lda #$52	                lda #$52
.aa6f	4c 70 ac	jmp $ac70	                jmp asm_common
.aa72					z_asm_eor_zi:
.aa72					xt_asm_eor_ziy:
.aa72	a9 51		lda #$51	                lda #$51
.aa74	4c 70 ac	jmp $ac70	                jmp asm_common
.aa77					z_asm_eor_ziy:
.aa77					xt_asm_eor_zx:
.aa77	a9 55		lda #$55	                lda #$55
.aa79	4c 70 ac	jmp $ac70	                jmp asm_common
.aa7c					z_asm_eor_zx:
.aa7c					xt_asm_eor_zxi:
.aa7c	a9 41		lda #$41	                lda #$41
.aa7e	4c 70 ac	jmp $ac70	                jmp asm_common
.aa81					z_asm_eor_zxi:
.aa81					xt_asm_inc:
.aa81	a9 ee		lda #$ee	                lda #$EE
.aa83	4c 70 ac	jmp $ac70	                jmp asm_common
.aa86					z_asm_inc:
.aa86					xt_asm_inc_a:
.aa86	a9 1a		lda #$1a	                lda #$1A
.aa88	4c 70 ac	jmp $ac70	                jmp asm_common
.aa8b					z_asm_inc_a:
.aa8b					xt_asm_inc_x:
.aa8b	a9 fe		lda #$fe	                lda #$FE
.aa8d	4c 70 ac	jmp $ac70	                jmp asm_common
.aa90					z_asm_inc_x:
.aa90					xt_asm_inc_z:
.aa90	a9 e6		lda #$e6	                lda #$E6
.aa92	4c 70 ac	jmp $ac70	                jmp asm_common
.aa95					z_asm_inc_z:
.aa95					xt_asm_inc_zx:
.aa95	a9 f6		lda #$f6	                lda #$F6
.aa97	4c 70 ac	jmp $ac70	                jmp asm_common
.aa9a					z_asm_inc_zx:
.aa9a					xt_asm_inx:
.aa9a	a9 e8		lda #$e8	                lda #$E8
.aa9c	4c 70 ac	jmp $ac70	                jmp asm_common
.aa9f					z_asm_inx:
.aa9f					xt_asm_iny:
.aa9f	a9 c8		lda #$c8	                lda #$C8
.aaa1	4c 70 ac	jmp $ac70	                jmp asm_common
.aaa4					z_asm_iny:
.aaa4					xt_asm_jmp:
.aaa4	a9 4c		lda #$4c	                lda #$4C
.aaa6	4c 70 ac	jmp $ac70	                jmp asm_common
.aaa9					z_asm_jmp:
.aaa9					xt_asm_jmp_i:
.aaa9	a9 6c		lda #$6c	                lda #$6C
.aaab	4c 70 ac	jmp $ac70	                jmp asm_common
.aaae					z_asm_jmp_i:
.aaae					xt_asm_jmp_xi:
.aaae	a9 7c		lda #$7c	                lda #$7C
.aab0	4c 70 ac	jmp $ac70	                jmp asm_common
.aab3					z_asm_jmp_xi:
.aab3					xt_asm_jsr:
.aab3	a9 20		lda #$20	                lda #$20
.aab5	4c 70 ac	jmp $ac70	                jmp asm_common
.aab8					z_asm_jsr:
.aab8					xt_asm_lda:
.aab8	a9 ad		lda #$ad	                lda #$AD
.aaba	4c 70 ac	jmp $ac70	                jmp asm_common
.aabd					z_asm_lda:
.aabd					xt_asm_lda_h:
.aabd	a9 a9		lda #$a9	                lda #$A9
.aabf	4c 70 ac	jmp $ac70	                jmp asm_common
.aac2					z_asm_lda_h:
.aac2					xt_asm_lda_x:
.aac2	a9 bd		lda #$bd	                lda #$BD
.aac4	4c 70 ac	jmp $ac70	                jmp asm_common
.aac7					z_asm_lda_x:
.aac7					xt_asm_lda_y:
.aac7	a9 b9		lda #$b9	                lda #$B9
.aac9	4c 70 ac	jmp $ac70	                jmp asm_common
.aacc					z_asm_lda_y:
.aacc					xt_asm_lda_z:
.aacc	a9 a5		lda #$a5	                lda #$A5
.aace	4c 70 ac	jmp $ac70	                jmp asm_common
.aad1					z_asm_lda_z:
.aad1					xt_asm_lda_zi:
.aad1	a9 b2		lda #$b2	                lda #$B2
.aad3	4c 70 ac	jmp $ac70	                jmp asm_common
.aad6					z_asm_lda_zi:
.aad6					xt_asm_lda_ziy:
.aad6	a9 b1		lda #$b1	                lda #$B1
.aad8	4c 70 ac	jmp $ac70	                jmp asm_common
.aadb					z_asm_lda_ziy:
.aadb					xt_asm_lda_zx:
.aadb	a9 b5		lda #$b5	                lda #$B5
.aadd	4c 70 ac	jmp $ac70	                jmp asm_common
.aae0					z_asm_lda_zx:
.aae0					xt_asm_lda_zxi:
.aae0	a9 a1		lda #$a1	                lda #$A1
.aae2	4c 70 ac	jmp $ac70	                jmp asm_common
.aae5					z_asm_lda_zxi:
.aae5					xt_asm_ldx:
.aae5	a9 ae		lda #$ae	                lda #$AE
.aae7	4c 70 ac	jmp $ac70	                jmp asm_common
.aaea					z_asm_ldx:
.aaea					xt_asm_ldx_h:
.aaea	a9 a2		lda #$a2	                lda #$A2
.aaec	4c 70 ac	jmp $ac70	                jmp asm_common
.aaef					z_asm_ldx_h:
.aaef					xt_asm_ldx_y:
.aaef	a9 be		lda #$be	                lda #$BE
.aaf1	4c 70 ac	jmp $ac70	                jmp asm_common
.aaf4					z_asm_ldx_y:
.aaf4					xt_asm_ldx_z:
.aaf4	a9 a6		lda #$a6	                lda #$A6
.aaf6	4c 70 ac	jmp $ac70	                jmp asm_common
.aaf9					z_asm_ldx_z:
.aaf9					xt_asm_ldx_zy:
.aaf9	a9 b6		lda #$b6	                lda #$B6
.aafb	4c 70 ac	jmp $ac70	                jmp asm_common
.aafe					z_asm_ldx_zy:
.aafe					xt_asm_ldy:
.aafe	a9 ac		lda #$ac	                lda #$AC
.ab00	4c 70 ac	jmp $ac70	                jmp asm_common
.ab03					z_asm_ldy:
.ab03					xt_asm_ldy_h:
.ab03	a9 a0		lda #$a0	                lda #$A0
.ab05	4c 70 ac	jmp $ac70	                jmp asm_common
.ab08					z_asm_ldy_h:
.ab08					xt_asm_ldy_x:
.ab08	a9 bc		lda #$bc	                lda #$BC
.ab0a	4c 70 ac	jmp $ac70	                jmp asm_common
.ab0d					z_asm_ldy_x:
.ab0d					xt_asm_ldy_z:
.ab0d	a9 a4		lda #$a4	                lda #$A4
.ab0f	4c 70 ac	jmp $ac70	                jmp asm_common
.ab12					z_asm_ldy_z:
.ab12					xt_asm_ldy_zx:
.ab12	a9 b4		lda #$b4	                lda #$B4
.ab14	4c 70 ac	jmp $ac70	                jmp asm_common
.ab17					z_asm_ldy_zx:
.ab17					xt_asm_lsr:
.ab17	a9 4e		lda #$4e	                lda #$4E
.ab19	4c 70 ac	jmp $ac70	                jmp asm_common
.ab1c					z_asm_lsr:
.ab1c					xt_asm_lsr_a:
.ab1c	a9 4a		lda #$4a	                lda #$4A
.ab1e	4c 70 ac	jmp $ac70	                jmp asm_common
.ab21					z_asm_lsr_a:
.ab21					xt_asm_lsr_x:
.ab21	a9 5e		lda #$5e	                lda #$5E
.ab23	4c 70 ac	jmp $ac70	                jmp asm_common
.ab26					z_asm_lsr_x:
.ab26					xt_asm_lsr_z:
.ab26	a9 46		lda #$46	                lda #$46
.ab28	4c 70 ac	jmp $ac70	                jmp asm_common
.ab2b					z_asm_lsr_z:
.ab2b					xt_asm_lsr_zx:
.ab2b	a9 56		lda #$56	                lda #$56
.ab2d	4c 70 ac	jmp $ac70	                jmp asm_common
.ab30					z_asm_lsr_zx:
.ab30					xt_asm_nop:
.ab30	a9 ea		lda #$ea	                lda #$EA
.ab32	4c 70 ac	jmp $ac70	                jmp asm_common
.ab35					z_asm_nop:
.ab35					xt_asm_ora:
.ab35	a9 0d		lda #$0d	                lda #$0D
.ab37	4c 70 ac	jmp $ac70	                jmp asm_common
.ab3a					z_asm_ora:
.ab3a					xt_asm_ora_h:
.ab3a	a9 09		lda #$09	                lda #$09
.ab3c	4c 70 ac	jmp $ac70	                jmp asm_common
.ab3f					z_asm_ora_h:
.ab3f					xt_asm_ora_x:
.ab3f	a9 1d		lda #$1d	                lda #$1D
.ab41	4c 70 ac	jmp $ac70	                jmp asm_common
.ab44					z_asm_ora_x:
.ab44					xt_asm_ora_y:
.ab44	a9 19		lda #$19	                lda #$19
.ab46	4c 70 ac	jmp $ac70	                jmp asm_common
.ab49					z_asm_ora_y:
.ab49					xt_asm_ora_z:
.ab49	a9 05		lda #$05	                lda #$05
.ab4b	4c 70 ac	jmp $ac70	                jmp asm_common
.ab4e					z_asm_ora_z:
.ab4e					xt_asm_ora_zi:
.ab4e	a9 12		lda #$12	                lda #$12
.ab50	a0 02		ldy #$02	                ldy #2
.ab52	4c 70 ac	jmp $ac70	                jmp asm_common
.ab55					z_asm_ora_zi:
.ab55					xt_asm_ora_ziy:
.ab55	a9 11		lda #$11	                lda #$11
.ab57	4c 70 ac	jmp $ac70	                jmp asm_common
.ab5a					z_asm_ora_ziy:
.ab5a					xt_asm_ora_zx:
.ab5a	a9 15		lda #$15	                lda #$15
.ab5c	4c 70 ac	jmp $ac70	                jmp asm_common
.ab5f					z_asm_ora_zx:
.ab5f					xt_asm_ora_zxi:
.ab5f	a9 01		lda #$01	                lda #$01
.ab61	4c 70 ac	jmp $ac70	                jmp asm_common
.ab64					z_asm_ora_zxi:
.ab64					xt_asm_pha:
.ab64	a9 48		lda #$48	                lda #$48
.ab66	4c 70 ac	jmp $ac70	                jmp asm_common
.ab69					z_asm_pha:
.ab69					xt_asm_php:
.ab69	a9 08		lda #$08	                lda #$08
.ab6b	4c 70 ac	jmp $ac70	                jmp asm_common
.ab6e					z_asm_php:
.ab6e					xt_asm_phx:
.ab6e	a9 da		lda #$da	                lda #$DA
.ab70	4c 70 ac	jmp $ac70	                jmp asm_common
.ab73					z_asm_phx:
.ab73					xt_asm_phy:
.ab73	a9 5a		lda #$5a	                lda #$5A
.ab75	4c 70 ac	jmp $ac70	                jmp asm_common
.ab78					z_asm_phy:
.ab78					xt_asm_pla:
.ab78	a9 68		lda #$68	                lda #$68
.ab7a	4c 70 ac	jmp $ac70	                jmp asm_common
.ab7d					z_asm_pla:
.ab7d					xt_asm_plp:
.ab7d	a9 28		lda #$28	                lda #$28
.ab7f	4c 70 ac	jmp $ac70	                jmp asm_common
.ab82					z_asm_plp:
.ab82					xt_asm_plx:
.ab82	a9 fa		lda #$fa	                lda #$FA
.ab84	4c 70 ac	jmp $ac70	                jmp asm_common
.ab87					z_asm_plx:
.ab87					xt_asm_ply:
.ab87	a9 7a		lda #$7a	                lda #$7A
.ab89	4c 70 ac	jmp $ac70	                jmp asm_common
.ab8c					z_asm_ply:
.ab8c					xt_asm_rol:
.ab8c	a9 2e		lda #$2e	                lda #$2E
.ab8e	4c 70 ac	jmp $ac70	                jmp asm_common
.ab91					z_asm_rol:
.ab91					xt_asm_rol_a:
.ab91	a9 2a		lda #$2a	                lda #$2A
.ab93	4c 70 ac	jmp $ac70	                jmp asm_common
.ab96					z_asm_rol_a:
.ab96					xt_asm_rol_x:
.ab96	a9 3e		lda #$3e	                lda #$3E
.ab98	4c 70 ac	jmp $ac70	                jmp asm_common
.ab9b					z_asm_rol_x:
.ab9b					xt_asm_rol_z:
.ab9b	a9 26		lda #$26	                lda #$26
.ab9d	4c 70 ac	jmp $ac70	                jmp asm_common
.aba0					z_asm_rol_z:
.aba0					xt_asm_rol_zx:
.aba0	a9 36		lda #$36	                lda #$36
.aba2	4c 70 ac	jmp $ac70	                jmp asm_common
.aba5					z_asm_rol_zx:
.aba5					xt_asm_ror:
.aba5	a9 6e		lda #$6e	                lda #$6E
.aba7	4c 70 ac	jmp $ac70	                jmp asm_common
.abaa					z_asm_ror:
.abaa					xt_asm_ror_a:
.abaa	a9 6a		lda #$6a	                lda #$6A
.abac	4c 70 ac	jmp $ac70	                jmp asm_common
.abaf					z_asm_ror_a:
.abaf					xt_asm_ror_x:
.abaf	a9 7e		lda #$7e	                lda #$7E
.abb1	4c 70 ac	jmp $ac70	                jmp asm_common
.abb4					z_asm_ror_x:
.abb4					xt_asm_ror_z:
.abb4	a9 66		lda #$66	                lda #$66
.abb6	4c 70 ac	jmp $ac70	                jmp asm_common
.abb9					z_asm_ror_z:
.abb9					xt_asm_ror_zx:
.abb9	a9 76		lda #$76	                lda #$76
.abbb	4c 70 ac	jmp $ac70	                jmp asm_common
.abbe					z_asm_ror_zx:
.abbe					xt_asm_rti:
.abbe	a9 40		lda #$40	                lda #$40
.abc0	4c 70 ac	jmp $ac70	                jmp asm_common
.abc3					z_asm_rti:
.abc3					xt_asm_rts:
.abc3	a9 60		lda #$60	                lda #$60
.abc5	4c 70 ac	jmp $ac70	                jmp asm_common
.abc8					z_asm_rts:
.abc8					xt_asm_sbc:
.abc8	a9 ed		lda #$ed	                lda #$ED
.abca	4c 70 ac	jmp $ac70	                jmp asm_common
.abcd					z_asm_sbc:
.abcd					xt_asm_sbc_h:
.abcd	a9 e9		lda #$e9	                lda #$E9
.abcf	4c 70 ac	jmp $ac70	                jmp asm_common
.abd2					z_asm_sbc_h:
.abd2					xt_asm_sbc_x:
.abd2	a9 fd		lda #$fd	                lda #$FD
.abd4	4c 70 ac	jmp $ac70	                jmp asm_common
.abd7					z_asm_sbc_x:
.abd7					xt_asm_sbc_y:
.abd7	a9 f9		lda #$f9	                lda #$F9
.abd9	4c 70 ac	jmp $ac70	                jmp asm_common
.abdc					z_asm_sbc_y:
.abdc					xt_asm_sbc_z:
.abdc	a9 e5		lda #$e5	                lda #$E5
.abde	4c 70 ac	jmp $ac70	                jmp asm_common
.abe1					z_asm_sbc_z:
.abe1					xt_asm_sbc_zi:
.abe1	a9 f2		lda #$f2	                lda #$F2
.abe3	4c 70 ac	jmp $ac70	                jmp asm_common
.abe6					z_asm_sbc_zi:
.abe6					xt_asm_sbc_ziy:
.abe6	a9 f1		lda #$f1	                lda #$F1
.abe8	4c 70 ac	jmp $ac70	                jmp asm_common
.abeb					z_asm_sbc_ziy:
.abeb					xt_asm_sbc_zx:
.abeb	a9 f5		lda #$f5	                lda #$F5
.abed	4c 70 ac	jmp $ac70	                jmp asm_common
.abf0					z_asm_sbc_zx:
.abf0					xt_asm_sbc_zxi:
.abf0	a9 e1		lda #$e1	                lda #$E1
.abf2	80 7c		bra $ac70	                bra asm_common  ; <-- limit for BRA instead of JMP
.abf4					z_asm_sbc_zxi:
.abf4					xt_asm_sec:
.abf4	a9 38		lda #$38	                lda #$38
.abf6	80 78		bra $ac70	                bra asm_common
.abf8					z_asm_sec:
.abf8					xt_asm_sed:
.abf8	a9 f8		lda #$f8	                lda #$F8
.abfa	80 74		bra $ac70	                bra asm_common
.abfc					z_asm_sed:
.abfc					xt_asm_sei:
.abfc	a9 78		lda #$78	                lda #$78
.abfe	80 70		bra $ac70	                bra asm_common
.ac00					z_asm_sei:
.ac00					xt_asm_sta:
.ac00	a9 8d		lda #$8d	                lda #$8D
.ac02	80 6c		bra $ac70	                bra asm_common
.ac04					z_asm_sta:
.ac04					xt_asm_sta_x:
.ac04	a9 9d		lda #$9d	                lda #$9D
.ac06	80 68		bra $ac70	                bra asm_common
.ac08					z_asm_sta_x:
.ac08					xt_asm_sta_y:
.ac08	a9 99		lda #$99	                lda #$99
.ac0a	80 64		bra $ac70	                bra asm_common
.ac0c					z_asm_sta_y:
.ac0c					xt_asm_sta_z:
.ac0c	a9 85		lda #$85	                lda #$85
.ac0e	80 60		bra $ac70	                bra asm_common
.ac10					z_asm_sta_z:
.ac10					xt_asm_sta_zi:
.ac10	a9 92		lda #$92	                lda #$92
.ac12	80 5c		bra $ac70	                bra asm_common
.ac14					z_asm_sta_zi:
.ac14					xt_asm_sta_ziy:
.ac14	a9 91		lda #$91	                lda #$91
.ac16	80 58		bra $ac70	                bra asm_common
.ac18					z_asm_sta_ziy:
.ac18					xt_asm_sta_zx:
.ac18	a9 95		lda #$95	                lda #$95
.ac1a	80 54		bra $ac70	                bra asm_common
.ac1c					z_asm_sta_zx:
.ac1c					xt_asm_sta_zxi:
.ac1c	a9 81		lda #$81	                lda #$81
.ac1e	80 50		bra $ac70	                bra asm_common
.ac20					z_asm_sta_zxi:
.ac20					xt_asm_stx:
.ac20	a9 8e		lda #$8e	                lda #$8E
.ac22	80 4c		bra $ac70	                bra asm_common
.ac24					z_asm_stx:
.ac24					xt_asm_stx_z:
.ac24	a9 86		lda #$86	                lda #$86
.ac26	80 48		bra $ac70	                bra asm_common
.ac28					z_asm_stx_z:
.ac28					xt_asm_stx_zy:
.ac28	a9 96		lda #$96	                lda #$96
.ac2a	80 44		bra $ac70	                bra asm_common
.ac2c					z_asm_stx_zy:
.ac2c					xt_asm_sty:
.ac2c	a9 8c		lda #$8c	                lda #$8C
.ac2e	80 40		bra $ac70	                bra asm_common
.ac30					z_asm_sty:
.ac30					xt_asm_sty_z:
.ac30	a9 84		lda #$84	                lda #$84
.ac32	80 3c		bra $ac70	                bra asm_common
.ac34					z_asm_sty_z:
.ac34					xt_asm_sty_zx:
.ac34	a9 94		lda #$94	                lda #$94
.ac36	80 38		bra $ac70	                bra asm_common
.ac38					z_asm_sty_zx:
.ac38					xt_asm_stz:
.ac38	a9 9c		lda #$9c	                lda #$9C
.ac3a	80 34		bra $ac70	                bra asm_common
.ac3c					z_asm_stz:
.ac3c					xt_asm_stz_x:
.ac3c	a9 9e		lda #$9e	                lda #$9E
.ac3e	80 30		bra $ac70	                bra asm_common
.ac40					z_asm_stz_x:
.ac40					xt_asm_stz_z:
.ac40	a9 64		lda #$64	                lda #$64
.ac42	80 2c		bra $ac70	                bra asm_common
.ac44					z_asm_stz_z:
.ac44					xt_asm_stz_zx:
.ac44	a9 74		lda #$74	                lda #$74
.ac46	80 28		bra $ac70	                bra asm_common
.ac48					z_asm_stz_zx:
.ac48					xt_asm_tax:
.ac48	a9 aa		lda #$aa	                lda #$AA
.ac4a	80 24		bra $ac70	                bra asm_common
.ac4c					z_asm_tax:
.ac4c					xt_asm_tay:
.ac4c	a9 a8		lda #$a8	                lda #$A8
.ac4e	80 20		bra $ac70	                bra asm_common
.ac50					z_asm_tay:
.ac50					xt_asm_trb:
.ac50	a9 1c		lda #$1c	                lda #$1C
.ac52	80 1c		bra $ac70	                bra asm_common
.ac54					z_asm_trb:
.ac54					xt_asm_trb_z:
.ac54	a9 14		lda #$14	                lda #$14
.ac56	80 18		bra $ac70	                bra asm_common
.ac58					z_asm_trb_z:
.ac58					xt_asm_tsb:
.ac58	a9 0c		lda #$0c	                lda #$0C
.ac5a	80 14		bra $ac70	                bra asm_common
.ac5c					z_asm_tsb:
.ac5c					xt_asm_tsb_z:
.ac5c	a9 04		lda #$04	                lda #$04
.ac5e	80 10		bra $ac70	                bra asm_common
.ac60					z_asm_tsb_z:
.ac60					xt_asm_tsx:
.ac60	a9 ba		lda #$ba	                lda #$BA
.ac62	80 0c		bra $ac70	                bra asm_common
.ac64					z_asm_tsx:
.ac64					xt_asm_txa:
.ac64	a9 8a		lda #$8a	                lda #$8A
.ac66	80 08		bra $ac70	                bra asm_common
.ac68					z_asm_txa:
.ac68					xt_asm_txs:
.ac68	a9 9a		lda #$9a	                lda #$9A
.ac6a	80 04		bra $ac70	                bra asm_common
.ac6c					z_asm_txs:
.ac6c					xt_asm_tya:
.ac6c	a9 98		lda #$98	                lda #$98
.ac6e	80 00		bra $ac70	                bra asm_common
.ac70					z_asm_tya:
.ac70					asm_common:
.ac70	a8		tay		                tay
.ac71	20 d6 d6	jsr $d6d6	                jsr cmpl_a
.ac74	a9 dc		lda #$dc	                lda #<oc_index_table
.ac76	85 26		sta $26		                sta tmp2
.ac78	a9 ae		lda #$ae	                lda #>oc_index_table
.ac7a	85 27		sta $27		                sta tmp2+1
.ac7c	98		tya		                tya             ; retrieve opcode
.ac7d	0a		asl a		                asl             ; times two for offset
.ac7e	90 02		bcc $ac82	                bcc +
.ac80	e6 27		inc $27		                inc tmp2+1
.ac82					+
.ac82	a8		tay		                tay             ; use Y as the index
.ac83	b1 26		lda ($26),y	                lda (tmp2),y    ; LSB
.ac85	85 28		sta $28		                sta tmp3
.ac87	c8		iny		                iny
.ac88	b1 26		lda ($26),y	                lda (tmp2),y    ; MSB
.ac8a	85 29		sta $29		                sta tmp3+1
.ac8c	b2 28		lda ($28)	                lda (tmp3)      ; get "lengths byte"
.ac8e	2a		rol a		                rol
.ac8f	2a		rol a		                rol
.ac90	2a		rol a		                rol             ; Three times because we go through Carry
.ac91	29 03		and #$03	                and #%00000011
.ac93	a8		tay		                tay
.ac94	88		dey		                dey
.ac95	f0 12		beq $aca9	                beq _done
.ac97	20 23 d8	jsr $d823	                jsr underflow_1
.ac9a	b5 00		lda $00,x	                lda 0,x
.ac9c	20 d6 d6	jsr $d6d6	                jsr cmpl_a      ; does not use Y
.ac9f	88		dey		                dey
.aca0	f0 05		beq $aca7	                beq _done_drop
.aca2	b5 01		lda $01,x	                lda 1,x
.aca4	20 d6 d6	jsr $d6d6	                jsr cmpl_a      ; Fall through to _done_drop
.aca7					_done_drop:
.aca7	e8		inx		                inx
.aca8	e8		inx		                inx             ; Fall through to _done
.aca9					_done:
.aca9	60		rts		                rts             ; Returns to original caller
.acaa					xt_asm_push_a:
.acaa	a0 00		ldy #$00	                ldy #0
.acac					_loop:
.acac	b9 ba ac	lda $acba,y	                lda asm_push_a_data,y
.acaf	c9 ff		cmp #$ff	                cmp #$FF
.acb1	f0 06		beq $acb9	                beq _done
.acb3	20 d6 d6	jsr $d6d6	                jsr cmpl_a      ; does not change Y
.acb6	c8		iny		                iny
.acb7	80 f3		bra $acac	                bra _loop
.acb9					_done:
.acb9					z_asm_push_a:
.acb9	60		rts		                rts
.acba					asm_push_a_data:
>acba	ca ca 95 00 74 01		        .byte $CA, $CA, $95, 00, $74, $01
>acc0	ff				        .byte $FF               ; terminator
.acc1					xt_asm_back_jump:
.acc1					z_asm_back_jump:
.acc1	60		rts		                rts
.acc2					xt_asm_back_branch:
.acc2	20 6c 91	jsr $916c	                jsr xt_here             ; ( addr-l addr-h )
.acc5	20 4a 95	jsr $954a	                jsr xt_minus            ; ( offset )
.acc8	3a		dec a		                dea
.acc9	3a		dec a		                dea
.acca					z_asm_back_branch:
.acca	60		rts		                rts
.accb					assembler_end:

;******  Return to file: platform/../taliforth.asm


;******  Processing file: platform/../disassembler.asm

.accb					disassembler:
.accb	20 5d 89	jsr $895d	                jsr xt_cr       ; ( addr u )
.acce					_byte_loop:
.acce	20 8d 98	jsr $988d	                jsr xt_over     ; ( addr u addr )
.acd1	20 22 a5	jsr $a522	                jsr xt_u_dot    ; ( addr u )
.acd4	20 18 a1	jsr $a118	                jsr xt_space
.acd7	a9 dc		lda #$dc	                lda #<oc_index_table
.acd9	85 26		sta $26		                sta tmp2
.acdb	a9 ae		lda #$ae	                lda #>oc_index_table
.acdd	85 27		sta $27		                sta tmp2+1
.acdf	a1 02		lda ($02,x)	                lda (2,x)       ; get opcode that addr points to
.ace1	85 36		sta $36		                sta scratch     ; Save opcode
.ace3	0a		asl a		                asl             ; multiply by two for offset
.ace4	90 02		bcc $ace8	                bcc +
.ace6	e6 27		inc $27		                inc tmp2+1      ; we're on second page
.ace8					+
.ace8	a8		tay		                tay             ; use Y as the index
.ace9	b1 26		lda ($26),y	                lda (tmp2),y    ; LSB
.aceb	85 28		sta $28		                sta tmp3
.aced	48		pha		                pha
.acee	c8		iny		                iny
.acef	b1 26		lda ($26),y	                lda (tmp2),y    ; MSB
.acf1	85 29		sta $29		                sta tmp3+1
.acf3	48		pha		                pha
.acf4	b2 28		lda ($28)	                lda (tmp3)
.acf6	a8		tay		                tay                     ; save copy of lengths byte
.acf7	10 3c		bpl $ad35	                bpl _no_operand         ; bit 7 clear, single-byte instruction
.acf9	20 9c a7	jsr $a79c	                jsr xt_zero             ; ( addr u 0 ) ZERO does not use Y
.acfc	f6 04		inc $04,x	                inc 4,x
.acfe	d0 02		bne $ad02	                bne +
.ad00	f6 05		inc $05,x	                inc 5,x                 ; ( addr+1 u 0 )
.ad02					+
.ad02	b5 02		lda $02,x	                lda 2,x
.ad04	d0 02		bne $ad08	                bne +
.ad06	d6 03		dec $03,x	                dec 3,x
.ad08					+
.ad08	d6 02		dec $02,x	                dec 2,x                 ; ( addr+1 u-1 0 )
.ad0a	a1 04		lda ($04,x)	                lda (4,x)
.ad0c	95 00		sta $00,x	                sta 0,x                 ; LSB of operand ( addr+1 u-1 LSB )
.ad0e	85 37		sta $37		                sta scratch+1           ; Save a copy in the scratch buffer
.ad10	98		tya		                tya                     ; retrieve copy of lengths byte
.ad11	2a		rol a		                rol                     ; shift bit 6 to bit 7
.ad12	10 14		bpl $ad28	                bpl _print_operand
.ad14	f6 04		inc $04,x	                inc 4,x
.ad16	d0 02		bne $ad1a	                bne +
.ad18	f6 05		inc $05,x	                inc 5,x                 ; ( addr+2 u-1 LSB )
.ad1a					+
.ad1a	b5 02		lda $02,x	                lda 2,x
.ad1c	d0 02		bne $ad20	                bne +
.ad1e	d6 03		dec $03,x	                dec 3,x
.ad20					+
.ad20	d6 02		dec $02,x	                dec 2,x                 ; ( addr+2 u-2 LSB )
.ad22	a1 04		lda ($04,x)	                lda (4,x)
.ad24	95 01		sta $01,x	                sta 1,x                 ; MSB of operand ( addr+2 u-2 opr )
.ad26	85 38		sta $38		                sta scratch+2           ; Save a copy in the scratch buffer
.ad28					_print_operand:
.ad28	ca		dex		                dex
.ad29	ca		dex		                dex
.ad2a	a9 05		lda #$05	                lda #5
.ad2c	95 00		sta $00,x	                sta 0,x
.ad2e	74 01		stz $01,x	                stz 1,x                 ; ( addr+n u-n opr 5 )
.ad30	20 2e a5	jsr $a52e	                jsr xt_u_dot_r          ; U.R ( addr+n u-n )
.ad33	80 0b		bra $ad40	                bra _print_mnemonic
.ad35					_no_operand:
.ad35	ca		dex		                dex
.ad36	ca		dex		                dex
.ad37	a9 05		lda #$05	                lda #5
.ad39	95 00		sta $00,x	                sta 0,x
.ad3b	74 01		stz $01,x	                stz 1,x                 ; ( addr u 5 )
.ad3d	20 1e a1	jsr $a11e	                jsr xt_spaces           ; ( addr u )
.ad40					_print_mnemonic:
.ad40	20 18 a1	jsr $a118	                jsr xt_space
.ad43	ca		dex		                dex
.ad44	ca		dex		                dex                     ; ( addr u ? )
.ad45	68		pla		                pla                     ; MSB
.ad46	95 01		sta $01,x	                sta 1,x                 ; ( addr u MSB )
.ad48	68		pla		                pla                     ; LSB
.ad49	95 00		sta $00,x	                sta 0,x                 ; ( addr u addr-o )
.ad4b	20 49 89	jsr $8949	                jsr xt_count            ; ( addr u addr-o u-o )
.ad4e	74 01		stz $01,x	                stz 1,x                 ; paranoid
.ad50	b5 00		lda $00,x	                lda 0,x
.ad52	29 07		and #$07	                and #%00000111          ; ( addr u addr-o u-o )
.ad54	95 00		sta $00,x	                sta 0,x
.ad56	20 f7 a4	jsr $a4f7	                jsr xt_type             ; ( addr u )
.ad59	a5 36		lda $36		                lda scratch
.ad5b	c9 20		cmp #$20	                cmp #$20
.ad5d	d0 59		bne $adb8	                bne _not_jsr
.ad5f	ca		dex		                dex
.ad60	ca		dex		                dex
.ad61	a9 05		lda #$05	                lda #5
.ad63	95 00		sta $00,x	                sta 0,x
.ad65	74 01		stz $01,x	                stz 1,x
.ad67	20 1e a1	jsr $a11e	                jsr xt_spaces
.ad6a	a9 92		lda #$92	                lda #<literal_runtime
.ad6c	c5 37		cmp $37		                cmp scratch+1
.ad6e	d0 0c		bne $ad7c	                bne _not_literal
.ad70	a9 93		lda #$93	                lda #>literal_runtime
.ad72	c5 38		cmp $38		                cmp scratch+2
.ad74	d0 06		bne $ad7c	                bne _not_literal
.ad76	20 6e ae	jsr $ae6e	                jsr disasm_literal
.ad79	4c e5 ad	jmp $ade5	                jmp _printing_done
.ad7c					_not_literal:
.ad7c	a9 a3		lda #$a3	                lda #<sliteral_runtime
.ad7e	c5 37		cmp $37		                cmp scratch+1
.ad80	d0 0c		bne $ad8e	                bne _not_sliteral
.ad82	a9 a0		lda #$a0	                lda #>sliteral_runtime
.ad84	c5 38		cmp $38		                cmp scratch+2
.ad86	d0 06		bne $ad8e	                bne _not_sliteral
.ad88	20 2b ae	jsr $ae2b	                jsr disasm_sliteral
.ad8b	4c e5 ad	jmp $ade5	                jmp _printing_done
.ad8e					_not_sliteral:
.ad8e	a9 0e		lda #$0e	                lda #<zero_branch_runtime
.ad90	c5 37		cmp $37		                cmp scratch+1
.ad92	d0 0c		bne $ada0	                bne _not_0branch
.ad94	a9 92		lda #$92	                lda #>zero_branch_runtime
.ad96	c5 38		cmp $38		                cmp scratch+2
.ad98	d0 06		bne $ada0	                bne _not_0branch
.ad9a	20 62 ae	jsr $ae62	                jsr disasm_0branch
.ad9d	4c e5 ad	jmp $ade5	                jmp _printing_done
.ada0					_not_0branch
.ada0	a9 d5		lda #$d5	                lda #<branch_runtime
.ada2	c5 37		cmp $37		                cmp scratch+1
.ada4	d0 0c		bne $adb2	                bne _not_branch
.ada6	a9 8d		lda #$8d	                lda #>branch_runtime
.ada8	c5 38		cmp $38		                cmp scratch+2
.adaa	d0 06		bne $adb2	                bne _not_branch
.adac	20 67 ae	jsr $ae67	                jsr disasm_branch
.adaf	4c e5 ad	jmp $ade5	                jmp _printing_done
.adb2					_not_branch
.adb2	20 8c ae	jsr $ae8c	                jsr disasm_jsr
.adb5	4c e5 ad	jmp $ade5	                jmp _printing_done
.adb8					_not_jsr:
.adb8	c9 4c		cmp #$4c	                cmp #$4C
.adba	d0 29		bne $ade5	                bne _printing_done
.adbc	a5 37		lda $37		                lda scratch+1   ; Copy the pointer.
.adbe	85 39		sta $39		                sta scratch+3
.adc0	a5 38		lda $38		                lda scratch+2
.adc2	85 3a		sta $3a		                sta scratch+4
.adc4	b2 39		lda ($39)	                lda (scratch+3)
.adc6	c9 20		cmp #$20	                cmp #$20 ; check for JSR
.adc8	d0 1b		bne $ade5	                bne _printing_done
.adca	e6 39		inc $39		                inc scratch+3
.adcc	d0 02		bne $add0	                bne +
.adce	e6 3a		inc $3a		                inc scratch+4
.add0					+
.add0	b2 39		lda ($39)	                lda (scratch+3)
.add2	c9 a3		cmp #$a3	                cmp #<sliteral_runtime
.add4	d0 0f		bne $ade5	                bne _printing_done
.add6	e6 39		inc $39		                inc scratch+3
.add8	d0 02		bne $addc	                bne +
.adda	e6 3a		inc $3a		                inc scratch+4
.addc					+
.addc	b2 39		lda ($39)	                lda (scratch+3)
.adde	c9 a0		cmp #$a0	                cmp #>sliteral_runtime
.ade0	d0 03		bne $ade5	                bne _printing_done
.ade2	20 01 ae	jsr $ae01	                jsr disasm_sliteral_jump
.ade5					_printing_done:
.ade5	20 5d 89	jsr $895d	                jsr xt_cr
.ade8	f6 02		inc $02,x	                inc 2,x
.adea	d0 02		bne $adee	                bne +
.adec	f6 03		inc $03,x	                inc 3,x                 ; ( addr+1 u )
.adee					+
.adee	20 0b 98	jsr $980b	                jsr xt_one_minus        ; ( addr+1 u-1 )
.adf1	b5 00		lda $00,x	                lda 0,x                 ; All done?
.adf3	15 01		ora $01,x	                ora 1,x
.adf5	f0 07		beq $adfe	                beq _done
.adf7	b5 01		lda $01,x	                lda 1,x                 ; Catch mid-instruction ranges
.adf9	30 03		bmi $adfe	                bmi _done
.adfb	4c ce ac	jmp $acce	                jmp _byte_loop          ; out of range for BRA
.adfe					_done:
.adfe	4c a4 a3	jmp $a3a4	                jmp xt_two_drop         ; JSR/RTS
.ae01					disasm_sliteral_jump:
.ae01	20 a2 a1	jsr $a1a2	                jsr xt_swap
.ae04	ca		dex		                dex
.ae05	ca		dex		                dex
.ae06	a5 37		lda $37		                lda scratch+1
.ae08	95 00		sta $00,x	                sta 0,x
.ae0a	a5 38		lda $38		                lda scratch+2
.ae0c	95 01		sta $01,x	                sta 1,x
.ae0e	20 a2 a1	jsr $a1a2	                jsr xt_swap
.ae11	20 4a 95	jsr $954a	                jsr xt_minus
.ae14	20 0b 98	jsr $980b	                jsr xt_one_minus
.ae17	20 4a 95	jsr $954a	                jsr xt_minus
.ae1a	ca		dex		                dex
.ae1b	ca		dex		                dex
.ae1c	a5 37		lda $37		                lda scratch+1
.ae1e	95 00		sta $00,x	                sta 0,x
.ae20	a5 38		lda $38		                lda scratch+2
.ae22	95 01		sta $01,x	                sta 1,x
.ae24	20 0b 98	jsr $980b	                jsr xt_one_minus
.ae27	20 a2 a1	jsr $a1a2	                jsr xt_swap ; ( new_addr new_n )
.ae2a	60		rts		                rts
.ae2b					disasm_sliteral:
.ae2b	a9 53		lda #$53	                lda #'S'
.ae2d	20 f0 8d	jsr $8df0	                jsr emit_a ; Print S before LITERAL so it becomes SLITERAL
.ae30	a9 0d		lda #$0d	                lda #str_disasm_lit     ; "LITERAL "
.ae32	20 4f d8	jsr $d84f	                jsr print_string_no_lf
.ae35	20 a2 a1	jsr $a1a2	                jsr xt_swap             ; switch to (u addr)
.ae38	20 17 98	jsr $9817	                jsr xt_one_plus
.ae3b	20 a9 8d	jsr $8da9	                jsr xt_dup
.ae3e	20 7a 8f	jsr $8f7a	                jsr xt_fetch
.ae41	20 22 a5	jsr $a522	                jsr xt_u_dot            ; Print the address of the string
.ae44	20 9b a3	jsr $a39b	                jsr xt_two
.ae47	20 dd 99	jsr $99dd	                jsr xt_plus
.ae4a	20 a9 8d	jsr $8da9	                jsr xt_dup
.ae4d	20 5c 9a	jsr $9a5c	                jsr xt_question         ; Print the length of the string
.ae50	20 17 98	jsr $9817	                jsr xt_one_plus
.ae53	20 a2 a1	jsr $a1a2	                jsr xt_swap            ; ( addr+4 u )
.ae56	ca		dex		                dex
.ae57	ca		dex		                dex
.ae58	a9 04		lda #$04	                lda #4
.ae5a	95 00		sta $00,x	                sta 0,x
.ae5c	74 01		stz $01,x	                stz 1,x
.ae5e	20 4a 95	jsr $954a	                jsr xt_minus            ; ( addr+4 u-4 )
.ae61	60		rts		                rts
.ae62					disasm_0branch:
.ae62	a9 30		lda #$30	                lda #'0'
.ae64	20 f0 8d	jsr $8df0	                jsr emit_a ; Print 0 before BRANCH so it becomes 0BRANCH
.ae67					disasm_branch:
.ae67	a9 0f		lda #$0f	                lda #str_disasm_bra
.ae69	20 4f d8	jsr $d84f	                jsr print_string_no_lf ; "BRANCH "
.ae6c	80 05		bra $ae73	                bra disasm_print_literal
.ae6e					disasm_literal:
.ae6e	a9 0d		lda #$0d	                lda #str_disasm_lit
.ae70	20 4f d8	jsr $d84f	                jsr print_string_no_lf ; "LITERAL "
.ae73					disasm_print_literal:
.ae73	20 a2 a1	jsr $a1a2	                jsr xt_swap ; switch to (u addr)
.ae76	20 17 98	jsr $9817	                jsr xt_one_plus
.ae79	20 a9 8d	jsr $8da9	                jsr xt_dup
.ae7c	20 5c 9a	jsr $9a5c	                jsr xt_question ; Print the value at the adress
.ae7f	20 17 98	jsr $9817	                jsr xt_one_plus
.ae82	20 a2 a1	jsr $a1a2	                jsr xt_swap ; (addr+2 u)
.ae85	20 0b 98	jsr $980b	                jsr xt_one_minus
.ae88	20 0b 98	jsr $980b	                jsr xt_one_minus ; (addr+2 u-2)
.ae8b	60		rts		                rts
.ae8c					disasm_jsr:
.ae8c	ca		dex		                dex
.ae8d	ca		dex		                dex
.ae8e	a5 37		lda $37		                lda scratch+1
.ae90	95 00		sta $00,x	                sta 0,x
.ae92	a5 38		lda $38		                lda scratch+2
.ae94	95 01		sta $01,x	                sta 1,x
.ae96	20 72 92	jsr $9272	                jsr xt_int_to_name
.ae99	b5 00		lda $00,x	                lda 0,x
.ae9b	15 01		ora $01,x	                ora 1,x
.ae9d	f0 07		beq $aea6	                beq _disasm_no_nt
.ae9f	20 f8 95	jsr $95f8	                jsr xt_name_to_string
.aea2	20 f7 a4	jsr $a4f7	                jsr xt_type
.aea5	60		rts		                rts
.aea6					_disasm_no_nt:
.aea6	20 28 8d	jsr $8d28	                jsr xt_drop ; the 0 indicating no name token
.aea9	ca		dex		                dex
.aeaa	ca		dex		                dex
.aeab	a5 37		lda $37		                lda scratch+1
.aead	95 00		sta $00,x	                sta 0,x
.aeaf	a5 38		lda $38		                lda scratch+2
.aeb1	95 01		sta $01,x	                sta 1,x
.aeb3	ca		dex		                dex
.aeb4	ca		dex		                dex
.aeb5	a9 23		lda #$23	                lda #<underflow_1
.aeb7	95 00		sta $00,x	                sta 0,x
.aeb9	a9 d8		lda #$d8	                lda #>underflow_1
.aebb	95 01		sta $01,x	                sta 1,x
.aebd	20 4a d7	jsr $d74a	                jsr compare_16bit
.aec0	f0 02		beq $aec4	                beq _disasm_jsr_uflow_check_upper
.aec2	b0 14		bcs $aed8	                bcs _disasm_jsr_unknown
.aec4					_disasm_jsr_uflow_check_upper:
.aec4	a9 32		lda #$32	                lda #<underflow_4
.aec6	95 00		sta $00,x	                sta 0,x
.aec8	a9 d8		lda #$d8	                lda #>underflow_4
.aeca	95 01		sta $01,x	                sta 1,x
.aecc	20 4a d7	jsr $d74a	                jsr compare_16bit
.aecf	f0 02		beq $aed3	                beq _disasm_jsr_soc
.aed1	90 05		bcc $aed8	                bcc _disasm_jsr_unknown
.aed3					_disasm_jsr_soc:
.aed3	a9 0e		lda #$0e	                lda #str_disasm_sdc
.aed5	20 4f d8	jsr $d84f	                jsr print_string_no_lf  ; "STACK DEPTH CHECK"
.aed8					_disasm_jsr_unknown:
.aed8	20 a4 a3	jsr $a3a4	                jsr xt_two_drop
.aedb	60		rts		                rts
.aedc					oc_index_table:
>aedc	dc b0 e0 b0 74 b5 74 b5		        .word oc00, oc01, oc__, oc__, oc04, oc05, oc06, oc__
>aee4	e8 b0 ee b0 f4 b0 74 b5
>aeec	fa b0 fe b0 04 b1 74 b5		        .word oc08, oc09, oc0a, oc__, oc0c, oc0d, oc0e, oc0f
>aef4	0a b1 0e b1 12 b1 16 b1
>aefc	1b b1 1f b1 27 b1 74 b5		        .word oc10, oc11, oc12, oc__, oc14, oc15, oc16, oc17
>af04	2e b1 34 b1 3b b1 42 b1
>af0c	49 b1 4d b1 53 b1 74 b5		        .word oc18, oc19, oc1a, oc__, oc1c, oc1d, oc__, oc1f
>af14	59 b1 5d b1 74 b5 63 b1
>af1c	69 b1 6d b1 74 b5 74 b5		        .word oc20, oc21, oc__, oc__, oc24, oc25, oc26, oc27
>af24	75 b1 7b b1 81 b1 87 b1
>af2c	8e b1 92 b1 98 b1 74 b5		        .word oc28, oc29, oc2a, oc__, oc2c, oc2d, oc2e, oc2f
>af34	9e b1 a2 b1 a7 b1 ab b1
>af3c	b0 b1 b4 b1 bc b1 74 b5		        .word oc30, oc31, oc32, oc__, oc34, oc35, oc36, oc37
>af44	c3 b1 cb b1 d2 b1 d9 b1
>af4c	e0 b1 e4 b1 ea b1 74 b5		        .word oc38, oc39, oc3a, oc__, oc3c, oc3d, oc3e, oc0f
>af54	f0 b1 f6 b1 fc b1 16 b1
>af5c	07 b2 0b b2 74 b5 74 b5		        .word oc40, oc41, oc__, oc__, oc__, oc45, oc46, oc47
>af64	74 b5 13 b2 19 b2 1f b2
>af6c	26 b2 2a b2 30 b2 74 b5		        .word oc48, oc49, oc4a, oc__, oc4c, oc4d, oc4e, oc4f
>af74	36 b2 3a b2 3e b2 42 b2
>af7c	47 b2 4b b2 53 b2 74 b5		        .word oc50, oc51, oc52, oc__, oc__, oc55, oc56, oc57
>af84	74 b5 5a b2 61 b2 68 b2
>af8c	6f b2 73 b2 79 b2 74 b5		        .word oc58, oc59, oc5a, oc__, oc__, oc__, oc5e, oc5f
>af94	74 b5 74 b5 83 b2 89 b2
>af9c	8e b2 92 b2 74 b5 74 b5		        .word oc60, oc61, oc__, oc__, oc64, oc65, oc66, oc67
>afa4	9a b2 a0 b2 a6 b2 ac b2
>afac	b3 b2 b7 b2 bd b2 74 b5		        .word oc68, oc69, oc6a, oc__, oc6c, oc6d, oc6e, oc6f
>afb4	c3 b2 c9 b2 cd b2 d1 b2
>afbc	d6 b2 da b2 e2 b2 74 b5		        .word oc70, oc71, oc72, oc__, oc74, oc75, oc76, oc77
>afc4	e9 b2 f0 b2 f7 b2 fe b2
>afcc	05 b3 09 b3 0f b3 74 b5		        .word oc78, oc79, oc7a, oc__, oc7c, oc7d, oc7e, oc7f
>afd4	13 b3 1a b3 20 b3 26 b3
>afdc	2b b3 2f b3 74 b5 74 b5		        .word oc80, oc81, oc__, oc__, oc84, oc85, oc86, oc__
>afe4	37 b3 3d b3 43 b3 74 b5
>afec	49 b3 4d b3 53 b3 74 b5		        .word oc88, oc89, oc8a, oc__, oc8c, oc8d, oc8e, oc8f
>aff4	57 b3 5b b3 5f b3 63 b3
>affc	68 b3 6c b3 74 b3 74 b5		        .word oc90, oc91, oc92, oc__, oc94, oc95, oc96, oc97
>b004	7b b3 82 b3 89 b3 90 b3
>b00c	97 b3 9b b3 a1 b3 74 b5		        .word oc98, oc99, oc9a, oc__, oc9c, oc9d, oc9e, oc9f
>b014	a5 b3 a9 b3 af b3 b5 b3
>b01c	ba b3 c0 b3 c8 b3 74 b5		        .word oca0, oca1, oca2, oc__, oca4, oca5, oca6, oca7
>b024	ce b3 d4 b3 da b3 e0 b3
>b02c	e7 b3 eb b3 f1 b3 74 b5		        .word oca8, oca9, ocaa, oc__, ocac, ocad, ocae, ocaf
>b034	f5 b3 f9 b3 fd b3 01 b4
>b03c	06 b4 0a b4 12 b4 74 b5		        .word ocb0, ocb1, ocb2, oc__, ocb4, ocb5, ocb6, ocb7
>b044	19 b4 20 b4 27 b4 2e b4
>b04c	35 b4 39 b4 3f b4 74 b5		        .word ocb8, ocb9, ocba, oc__, ocbc, ocbd, ocbe, ocbf
>b054	43 b4 49 b4 4f b4 55 b4
>b05c	5a b4 60 b4 74 b5 74 b5		        .word occ0, occ1, oc__, oc__, occ4, occ5, occ6, occ7
>b064	68 b4 6e b4 74 b4 7a b4
>b06c	81 b4 85 b4 8b b4 74 b5		        .word occ8, occ9, occa, oc__, occc, occd, occe, occf
>b074	8f b4 93 b4 97 b4 9b b4
>b07c	a0 b4 a4 b4 ac b4 74 b5		        .word ocd0, ocd1, ocd2, oc__, oc__, ocd5, ocd6, ocd7
>b084	74 b5 b3 b4 ba b4 c1 b4
>b08c	c8 b4 cc b4 d2 b4 74 b5		        .word ocd8, ocd9, ocda, oc__, oc__, ocdd, ocde, ocdf
>b094	74 b5 d6 b4 dc b4 e2 b4
>b09c	e7 b4 ed b4 74 b5 74 b5		        .word oce0, oce1, oc__, oc__, oce4, oce5, oce6, oce7
>b0a4	f5 b4 fb b4 01 b5 07 b5
>b0ac	0e b5 12 b5 18 b5 74 b5		        .word oce8, oce9, ocea, oc__, ocec, oced, ocee, ocef
>b0b4	1c b5 20 b5 24 b5 28 b5
>b0bc	2d b5 31 b5 39 b5 74 b5		        .word ocf0, ocf1, ocf2, oc__, oc__, ocf5, ocf6, ocf7
>b0c4	74 b5 40 b5 47 b5 4e b5
>b0cc	55 b5 59 b5 5f b5 74 b5		        .word ocf8, ocf9, ocfa, oc__, oc__, ocfd, ocfe, ocff
>b0d4	74 b5 63 b5 69 b5 6f b5
.b0dc					oc_table:
>b0dc	83 62 72 6b				oc00:	.text 2*64+3, "brk"              ; enforce the signature byte
>b0e0	87 6f 72 61 2e 7a 78 69			oc01:	.text 2*64+7, "ora.zxi"
>b0e8	85 74 73 62 2e 7a		        oc04:   .text 2*64+5, "tsb.z"
>b0ee	85 6f 72 61 2e 7a			oc05:	.text 2*64+5, "ora.z"
>b0f4	85 61 73 6c 2e 7a			oc06:	.text 2*64+5, "asl.z"
>b0fa	43 70 68 70				oc08:	.text 1*64+3, "php"
>b0fe	85 6f 72 61 2e 23			oc09:	.text 2*64+5, "ora.#"
>b104	45 61 73 6c 2e 61			oc0a:	.text 1*64+5, "asl.a"
>b10a	c3 74 73 62				oc0c:	.text 3*64+3, "tsb"
>b10e	c3 6f 72 61				oc0d:	.text 3*64+3, "ora"
>b112	c3 61 73 6c				oc0e:	.text 3*64+3, "asl"
>b116	c4 62 62 72 30				oc0f:	.text 3*64+4, "bbr0"
>b11b	83 62 70 6c				oc10:	.text 2*64+3, "bpl"
>b11f	87 6f 72 61 2e 7a 69 79			oc11:	.text 2*64+7, "ora.ziy"
>b127	86 6f 72 61 2e 7a 69			oc12:	.text 2*64+6, "ora.zi"
>b12e	85 74 72 62 2e 7a			oc14:	.text 2*64+5, "trb.z"
>b134	86 6f 72 61 2e 7a 78			oc15:	.text 2*64+6, "ora.zx"
>b13b	86 61 73 6c 2e 7a 78			oc16:	.text 2*64+6, "asl.zx"
>b142	86 72 6d 62 31 2e 7a			oc17:	.text 2*64+6, "rmb1.z"
>b149	43 63 6c 63				oc18:	.text 1*64+3, "clc"
>b14d	c5 6f 72 61 2e 79			oc19:	.text 3*64+5, "ora.y"
>b153	45 69 6e 63 2e 61			oc1a:	.text 1*64+5, "inc.a"
>b159	c3 74 72 62				oc1c:	.text 3*64+3, "trb"
>b15d	c5 6f 72 61 2e 78			oc1d:	.text 3*64+5, "ora.x"
>b163	c5 61 73 6c 2e 78			oc1f:	.text 3*64+5, "asl.x"
>b169	c3 6a 73 72				oc20:	.text 3*64+3, "jsr"
>b16d	87 61 6e 64 2e 7a 78 69			oc21:	.text 2*64+7, "and.zxi"
>b175	85 62 69 74 2e 7a			oc24:	.text 2*64+5, "bit.z"
>b17b	85 61 6e 64 2e 7a			oc25:	.text 2*64+5, "and.z"
>b181	85 72 6f 6c 2e 7a			oc26:	.text 2*64+5, "rol.z"
>b187	86 72 6d 62 32 2e 7a			oc27:	.text 2*64+6, "rmb2.z"
>b18e	43 70 6c 70				oc28:	.text 1*64+3, "plp"
>b192	85 61 6e 64 2e 23			oc29:	.text 2*64+5, "and.#"
>b198	45 72 6f 6c 2e 61			oc2a:	.text 1*64+5, "rol.a"
>b19e	c3 62 69 74				oc2c:	.text 3*64+3, "bit"
>b1a2	c4 61 6e 64 2e				oc2d:	.text 3*64+4, "and."
>b1a7	c3 72 6f 6c				oc2e:	.text 3*64+3, "rol"
>b1ab	c4 62 62 72 32				oc2f:	.text 3*64+4, "bbr2"
>b1b0	83 62 6d 69				oc30:	.text 2*64+3, "bmi"
>b1b4	87 61 6e 64 2e 7a 69 79			oc31:	.text 2*64+7, "and.ziy"
>b1bc	86 61 6e 64 2e 7a 69			oc32:	.text 2*64+6, "and.zi"
>b1c3	87 62 69 74 2e 7a 78 69			oc34:	.text 2*64+7, "bit.zxi"
>b1cb	86 61 6e 64 2e 7a 78			oc35:	.text 2*64+6, "and.zx"
>b1d2	86 72 6f 6c 2e 7a 78			oc36:	.text 2*64+6, "rol.zx"
>b1d9	86 72 6d 62 33 2e 7a			oc37:	.text 2*64+6, "rmb3.z"
>b1e0	43 73 65 63				oc38:	.text 1*64+3, "sec"
>b1e4	c5 61 6e 64 2e 79			oc39:	.text 3*64+5, "and.y"
>b1ea	45 64 65 63 2e 61			oc3a:	.text 1*64+5, "dec.a"
>b1f0	c5 62 69 74 2e 78			oc3c:	.text 3*64+5, "bit.x"
>b1f6	c5 61 6e 64 2e 78			oc3d:	.text 3*64+5, "and.x"
>b1fc	c5 72 6f 6c 2e 78			oc3e:	.text 3*64+5, "rol.x"
>b202	c4 62 62 72 33				oc3f:	.text 3*64+4, "bbr3"
>b207	43 72 74 69				oc40:	.text 1*64+3, "rti"
>b20b	87 65 6f 72 2e 7a 78 69			oc41:	.text 2*64+7, "eor.zxi"
>b213	85 65 6f 72 2e 7a			oc45:	.text 2*64+5, "eor.z"
>b219	85 6c 73 72 2e 7a			oc46:	.text 2*64+5, "lsr.z"
>b21f	86 72 62 6d 34 2e 7a			oc47:	.text 2*64+6, "rbm4.z"
>b226	43 70 68 61				oc48:	.text 1*64+3, "pha"
>b22a	85 65 6f 72 2e 23			oc49:	.text 2*64+5, "eor.#"
>b230	45 6c 73 72 2e 61			oc4a:	.text 1*64+5, "lsr.a"
>b236	c3 6a 6d 70				oc4c:	.text 3*64+3, "jmp"
>b23a	c3 65 6f 72				oc4d:	.text 3*64+3, "eor"
>b23e	c3 6c 73 72				oc4e:	.text 3*64+3, "lsr"
>b242	c4 62 62 72 34				oc4f:	.text 3*64+4, "bbr4"
>b247	83 62 76 63				oc50:	.text 2*64+3, "bvc"
>b24b	87 65 6f 72 2e 7a 69 79			oc51:	.text 2*64+7, "eor.ziy"
>b253	86 65 6f 72 2e 7a 69			oc52:	.text 2*64+6, "eor.zi"
>b25a	86 65 6f 72 2e 7a 78			oc55:	.text 2*64+6, "eor.zx"
>b261	86 6c 73 72 2e 7a 78			oc56:	.text 2*64+6, "lsr.zx"
>b268	86 72 62 6d 35 2e 7a			oc57:	.text 2*64+6, "rbm5.z"
>b26f	43 63 6c 69				oc58:	.text 1*64+3, "cli"
>b273	c5 65 6f 72 2e 79			oc59:	.text 3*64+5, "eor.y"
>b279	43 70 68 79				oc5a:	.text 1*64+3, "phy"
>b27d	c5 65 6f 72 2e 78			oc5d:	.text 3*64+5, "eor.x"
>b283	c5 6c 73 72 2e 78			oc5e:	.text 3*64+5, "lsr.x"
>b289	c4 62 62 72 35				oc5f:	.text 3*64+4, "bbr5"
>b28e	43 72 74 73				oc60:	.text 1*64+3, "rts"
>b292	87 61 64 63 2e 7a 78 69			oc61:	.text 2*64+7, "adc.zxi"
>b29a	85 73 74 7a 2e 7a			oc64:	.text 2*64+5, "stz.z"
>b2a0	85 61 64 63 2e 7a			oc65:	.text 2*64+5, "adc.z"
>b2a6	85 72 6f 72 2e 7a			oc66:	.text 2*64+5, "ror.z"
>b2ac	86 72 6d 62 36 2e 7a			oc67:	.text 2*64+6, "rmb6.z"
>b2b3	43 70 6c 61				oc68:	.text 1*64+3, "pla"
>b2b7	85 61 64 63 2e 23			oc69:	.text 2*64+5, "adc.#"
>b2bd	45 72 6f 72 2e 61			oc6a:	.text 1*64+5, "ror.a"
>b2c3	c5 6a 6d 70 2e 69			oc6c:	.text 3*64+5, "jmp.i"
>b2c9	c3 61 64 63				oc6d:	.text 3*64+3, "adc"
>b2cd	c3 72 6f 72				oc6e:	.text 3*64+3, "ror"
>b2d1	c4 62 62 72 36				oc6f:	.text 3*64+4, "bbr6"
>b2d6	83 62 76 73				oc70:	.text 2*64+3, "bvs"
>b2da	87 61 64 63 2e 7a 69 79			oc71:	.text 2*64+7, "adc.ziy"
>b2e2	86 61 64 63 2e 7a 69			oc72:	.text 2*64+6, "adc.zi"
>b2e9	86 73 74 7a 2e 7a 78			oc74:	.text 2*64+6, "stz.zx"
>b2f0	86 61 64 63 2e 7a 78			oc75:	.text 2*64+6, "adc.zx"
>b2f7	86 72 6f 72 2e 7a 78			oc76:	.text 2*64+6, "ror.zx"
>b2fe	86 72 6d 62 37 2e 7a			oc77:	.text 2*64+6, "rmb7.z"
>b305	43 73 65 69				oc78:	.text 1*64+3, "sei"
>b309	c5 61 64 63 2e 79			oc79:	.text 3*64+5, "adc.y"
>b30f	43 70 6c 79				oc7a:	.text 1*64+3, "ply"
>b313	c6 6a 6d 70 2e 78 69			oc7c:	.text 3*64+6, "jmp.xi"
>b31a	c5 61 64 63 2e 78			oc7d:	.text 3*64+5, "adc.x"
>b320	c5 72 6f 72 2e 78			oc7e:	.text 3*64+5, "ror.x"
>b326	c4 62 62 72 37				oc7f:	.text 3*64+4, "bbr7"
>b32b	83 62 72 61				oc80:	.text 2*64+3, "bra"
>b32f	87 73 74 61 2e 7a 78 69			oc81:	.text 2*64+7, "sta.zxi"
>b337	85 73 74 79 2e 7a			oc84:	.text 2*64+5, "sty.z"
>b33d	85 73 74 61 2e 7a			oc85:	.text 2*64+5, "sta.z"
>b343	85 73 74 78 2e 7a			oc86:	.text 2*64+5, "stx.z"
>b349	43 64 65 79				oc88:	.text 1*64+3, "dey"
>b34d	85 62 69 74 2e 23			oc89:	.text 2*64+5, "bit.#"
>b353	43 74 78 61				oc8a:	.text 1*64+3, "txa"
>b357	c3 73 74 79				oc8c:	.text 3*64+3, "sty"
>b35b	c3 73 74 61				oc8d:	.text 3*64+3, "sta"
>b35f	c3 73 74 78				oc8e:	.text 3*64+3, "stx"
>b363	c4 62 62 73 30				oc8f:	.text 3*64+4, "bbs0"
>b368	83 62 63 63				oc90:	.text 2*64+3, "bcc"
>b36c	87 73 74 61 2e 7a 69 79			oc91:	.text 2*64+7, "sta.ziy"
>b374	86 73 74 61 2e 7a 69			oc92:	.text 2*64+6, "sta.zi"
>b37b	86 73 74 79 2e 7a 78			oc94:	.text 2*64+6, "sty.zx"
>b382	86 73 74 61 2e 7a 78			oc95:	.text 2*64+6, "sta.zx"
>b389	86 73 74 78 2e 7a 79			oc96:	.text 2*64+6, "stx.zy"
>b390	86 73 6d 62 31 2e 7a			oc97:	.text 2*64+6, "smb1.z"
>b397	43 74 79 61				oc98:	.text 1*64+3, "tya"
>b39b	c5 73 74 61 2e 79			oc99:	.text 3*64+5, "sta.y"
>b3a1	43 74 78 73				oc9a:	.text 1*64+3, "txs"
>b3a5	c3 73 74 7a				oc9c:	.text 3*64+3, "stz"
>b3a9	c5 73 74 61 2e 78			oc9d:	.text 3*64+5, "sta.x"
>b3af	c5 73 74 7a 2e 78			oc9e:	.text 3*64+5, "stz.x"
>b3b5	c4 62 62 73 31				oc9f:	.text 3*64+4, "bbs1"
>b3ba	85 6c 64 79 2e 23			oca0:	.text 2*64+5, "ldy.#"
>b3c0	87 6c 64 61 2e 7a 78 69			oca1:	.text 2*64+7, "lda.zxi"
>b3c8	85 6c 64 78 2e 23			oca2:	.text 2*64+5, "ldx.#"
>b3ce	85 6c 64 79 2e 7a			oca4:	.text 2*64+5, "ldy.z"
>b3d4	85 6c 64 61 2e 7a			oca5:	.text 2*64+5, "lda.z"
>b3da	85 6c 64 78 2e 7a			oca6:	.text 2*64+5, "ldx.z"
>b3e0	86 73 6d 62 32 2e 7a			oca7:	.text 2*64+6, "smb2.z"
>b3e7	43 74 61 79				oca8:	.text 1*64+3, "tay"
>b3eb	85 6c 64 61 2e 23			oca9:	.text 2*64+5, "lda.#"
>b3f1	43 74 61 78				ocaa:	.text 1*64+3, "tax"
>b3f5	c3 6c 64 79				ocac:	.text 3*64+3, "ldy"
>b3f9	c3 6c 64 61				ocad:	.text 3*64+3, "lda"
>b3fd	c3 6c 64 78				ocae:	.text 3*64+3, "ldx"
>b401	c4 62 62 73 32				ocaf:	.text 3*64+4, "bbs2"
>b406	83 62 63 73				ocb0:	.text 2*64+3, "bcs"
>b40a	87 6c 64 61 2e 7a 69 79			ocb1:	.text 2*64+7, "lda.ziy"
>b412	86 6c 64 61 2e 7a 69			ocb2:	.text 2*64+6, "lda.zi"
>b419	86 6c 64 79 2e 7a 78			ocb4:	.text 2*64+6, "ldy.zx"
>b420	86 6c 64 61 2e 7a 78			ocb5:	.text 2*64+6, "lda.zx"
>b427	86 6c 64 78 2e 7a 79			ocb6:	.text 2*64+6, "ldx.zy"
>b42e	86 73 6d 62 33 2e 7a			ocb7:	.text 2*64+6, "smb3.z"
>b435	43 63 6c 76				ocb8:	.text 1*64+3, "clv"
>b439	c5 6c 64 61 2e 79			ocb9:	.text 3*64+5, "lda.y"
>b43f	43 74 73 78				ocba:	.text 1*64+3, "tsx"
>b443	c5 6c 64 79 2e 78			ocbc:	.text 3*64+5, "ldy.x"
>b449	c5 6c 64 61 2e 78			ocbd:	.text 3*64+5, "lda.x"
>b44f	c5 6c 64 78 2e 79			ocbe:	.text 3*64+5, "ldx.y"
>b455	c4 62 62 73 34				ocbf:	.text 3*64+4, "bbs4"
>b45a	85 63 70 79 2e 23			occ0:	.text 2*64+5, "cpy.#"
>b460	87 63 6d 70 2e 7a 78 69			occ1:	.text 2*64+7, "cmp.zxi"
>b468	85 63 70 79 2e 7a			occ4:	.text 2*64+5, "cpy.z"
>b46e	85 63 6d 70 2e 7a			occ5:	.text 2*64+5, "cmp.z"
>b474	85 64 65 63 2e 7a			occ6:	.text 2*64+5, "dec.z"
>b47a	86 73 6d 62 34 2e 7a			occ7:	.text 2*64+6, "smb4.z"
>b481	43 69 6e 79				occ8:	.text 1*64+3, "iny"
>b485	85 63 6d 70 2e 23			occ9:	.text 2*64+5, "cmp.#"
>b48b	43 64 65 78				occa:	.text 1*64+3, "dex"
>b48f	c3 63 70 79				occc:	.text 3*64+3, "cpy"
>b493	c3 63 6d 70				occd:	.text 3*64+3, "cmp"
>b497	c3 64 65 63				occe:	.text 3*64+3, "dec"
>b49b	c4 62 62 73 34				occf:	.text 3*64+4, "bbs4"
>b4a0	83 62 6e 65				ocd0:	.text 2*64+3, "bne"
>b4a4	87 63 6d 70 2e 7a 69 79			ocd1:	.text 2*64+7, "cmp.ziy"
>b4ac	86 63 6d 70 2e 7a 69			ocd2:	.text 2*64+6, "cmp.zi"
>b4b3	86 63 6d 70 2e 7a 78			ocd5:	.text 2*64+6, "cmp.zx"
>b4ba	86 64 65 63 2e 7a 78			ocd6:	.text 2*64+6, "dec.zx"
>b4c1	86 73 6d 62 35 2e 7a			ocd7:	.text 2*64+6, "smb5.z"
>b4c8	43 63 6c 64				ocd8:	.text 1*64+3, "cld"
>b4cc	c5 63 6d 70 2e 79			ocd9:	.text 3*64+5, "cmp.y"
>b4d2	43 70 68 78				ocda:	.text 1*64+3, "phx"
>b4d6	c5 63 6d 70 2e 78			ocdd:	.text 3*64+5, "cmp.x"
>b4dc	c5 64 65 63 2e 78			ocde:	.text 3*64+5, "dec.x"
>b4e2	c4 62 62 73 35				ocdf:	.text 3*64+4, "bbs5"
>b4e7	85 63 70 78 2e 23			oce0:	.text 2*64+5, "cpx.#"
>b4ed	87 73 62 63 2e 7a 78 69			oce1:	.text 2*64+7, "sbc.zxi"
>b4f5	85 63 70 78 2e 7a			oce4:	.text 2*64+5, "cpx.z"
>b4fb	85 73 62 63 2e 7a			oce5:	.text 2*64+5, "sbc.z"
>b501	85 69 6e 63 2e 7a			oce6:	.text 2*64+5, "inc.z"
>b507	86 73 6d 62 36 2e 7a			oce7:	.text 2*64+6, "smb6.z"
>b50e	43 69 6e 78				oce8:	.text 1*64+3, "inx"
>b512	85 73 62 63 2e 23			oce9:	.text 2*64+5, "sbc.#"
>b518	43 6e 6f 70				ocea:	.text 1*64+3, "nop"
>b51c	c3 63 70 78				ocec:	.text 3*64+3, "cpx"
>b520	c3 73 62 63				oced:	.text 3*64+3, "sbc"
>b524	c3 69 6e 63				ocee:	.text 3*64+3, "inc"
>b528	c4 62 62 73 36				ocef:	.text 3*64+4, "bbs6"
>b52d	83 62 65 71				ocf0:	.text 2*64+3, "beq"
>b531	87 73 62 63 2e 7a 69 79			ocf1:	.text 2*64+7, "sbc.ziy"
>b539	86 73 62 63 2e 7a 69			ocf2:	.text 2*64+6, "sbc.zi"
>b540	86 73 62 63 2e 7a 78			ocf5:	.text 2*64+6, "sbc.zx"
>b547	86 69 6e 63 2e 7a 78			ocf6:	.text 2*64+6, "inc.zx"
>b54e	86 73 6d 62 37 2e 7a			ocf7:	.text 2*64+6, "smb7.z"
>b555	43 73 65 64				ocf8:	.text 1*64+3, "sed"
>b559	c5 73 62 63 2e 79			ocf9:	.text 3*64+5, "sbc.y"
>b55f	43 70 6c 78				ocfa:	.text 1*64+3, "plx"
>b563	c5 73 62 63 2e 78			ocfd:	.text 3*64+5, "sbc.x"
>b569	c5 69 6e 63 2e 78			ocfe:	.text 3*64+5, "inc.x"
>b56f	c4 62 62 73 37				ocff:	.text 3*64+4, "bbs7"
>b574	01 3f					oc__:	.text 1, "?"
.b576					disassembler_end:

;******  Return to file: platform/../taliforth.asm


;******  Processing file: platform/../ed.asm

=46					ed_head  = editor1  ; pointer to first list element (addr) (2 bytes)
=48					ed_cur   = editor2  ; current line number (1 is first line) (2 bytes)
=50					ed_flags = editor3  ; Flags used by ed, where
.b576					ed6502:
.b576	a5 18		lda $18		                lda base
.b578	85 33		sta $33		                sta editor3+1
.b57a	a9 0a		lda #$0a	                lda #10
.b57c	85 18		sta $18		                sta base
.b57e	64 2e		stz $2e		                stz ed_head
.b580	64 2f		stz $2f		                stz ed_head+1
.b582	64 30		stz $30		                stz ed_cur
.b584	64 31		stz $31		                stz ed_cur+1
.b586	64 32		stz $32		                stz ed_flags
.b588	20 9c a7	jsr $a79c	                jsr xt_zero
.b58b	20 9c a7	jsr $a79c	                jsr xt_zero             ; ( addr-t u-t )
.b58e	20 5d 89	jsr $895d	                jsr xt_cr
.b591					ed_input_loop:
.b591	a9 81		lda #$81	                lda #%10000001
.b593	14 32		trb $32		                trb ed_flags
.b595	20 70 ba	jsr $ba70	                jsr ed_get_input
.b598	a5 0a		lda $0a		                lda ciblen
.b59a	d0 1f		bne $b5bb	                bne _command_mode
.b59c	ca		dex		                dex
.b59d	ca		dex		                dex                     ; ( addr-t u-t ? )
.b59e	a5 30		lda $30		                lda ed_cur
.b5a0	95 00		sta $00,x	                sta 0,x
.b5a2	a5 31		lda $31		                lda ed_cur+1
.b5a4	95 01		sta $01,x	                sta 1,x                 ; ( addr-t u-t u )
.b5a6	a9 80		lda #$80	                lda #%10000000
.b5a8	04 32		tsb $32		                tsb ed_flags
.b5aa	20 17 98	jsr $9817	                jsr xt_one_plus         ; ( addr-t u-t u+1 )
.b5ad	20 8c ba	jsr $ba8c	                jsr ed_is_valid_line
.b5b0	b0 03		bcs $b5b5	                bcs +
.b5b2	4c 60 ba	jmp $ba60	                jmp ed_error_1drop
.b5b5					+
.b5b5	20 9c a7	jsr $a79c	                jsr xt_zero             ; ( addr-t u-t u+1 0 )
.b5b8	4c 86 b6	jmp $b686	                jmp _line_number_only_from_external
.b5bb					_command_mode:
.b5bb	20 9c a7	jsr $a79c	                jsr xt_zero             ; parameter 1 is NOS ( addr-t u-t 0 )
.b5be	20 9c a7	jsr $a79c	                jsr xt_zero             ; parameter 2 is TOS ( addr-t u-t 0 0 )
.b5c1					_prefix_dot:
.b5c1	b2 08		lda ($08)	                lda (cib)
.b5c3	c9 2e		cmp #$2e	                cmp #$2e                ; ASCII '.'
.b5c5	d0 3a		bne $b601	                bne _prefix_dollar
.b5c7	20 81 ba	jsr $ba81	                jsr ed_have_text
.b5ca	a5 30		lda $30		                lda ed_cur
.b5cc	95 02		sta $02,x	                sta 2,x
.b5ce	a5 31		lda $31		                lda ed_cur+1
.b5d0	95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t cur 0 )
.b5d2	a9 80		lda #$80	                lda #%10000000
.b5d4	04 32		tsb $32		                tsb ed_flags
.b5d6	a5 0a		lda $0a		                lda ciblen
.b5d8	3a		dec a		                dea                     ; sets Z if A was 1
.b5d9	d0 03		bne $b5de	                bne +
.b5db	4c 86 b6	jmp $b686	                jmp _line_number_only_from_external
.b5de					+
.b5de	ca		dex		                dex
.b5df	ca		dex		                dex
.b5e0	ca		dex		                dex
.b5e1	ca		dex		                dex
.b5e2	a5 08		lda $08		                lda cib
.b5e4	95 02		sta $02,x	                sta 2,x
.b5e6	a5 09		lda $09		                lda cib+1
.b5e8	95 03		sta $03,x	                sta 3,x
.b5ea	a5 0a		lda $0a		                lda ciblen
.b5ec	95 00		sta $00,x	                sta 0,x
.b5ee	a5 0b		lda $0b		                lda ciblen+1
.b5f0	95 01		sta $01,x	                sta 1,x
.b5f2	20 0b 98	jsr $980b	                jsr xt_one_minus        ; ( addr-t u-t para1 0 addr u-1 )
.b5f5	20 a2 a1	jsr $a1a2	                jsr xt_swap             ; ( addr-t u-t para1 0 u-1 addr )
.b5f8	20 17 98	jsr $9817	                jsr xt_one_plus         ; ( addr-t u-t para1 0 u-1 addr+1 )
.b5fb	20 a2 a1	jsr $a1a2	                jsr xt_swap             ; ( addr-t u-t para1 0 addr+1 u-1 )
.b5fe	4c de b6	jmp $b6de	                jmp _check_for_para2
.b601					_prefix_dollar:
.b601	b2 08		lda ($08)	                lda (cib)
.b603	c9 24		cmp #$24	                cmp #'$'
.b605	d0 1c		bne $b623	                bne _prefix_percent
.b607	20 81 ba	jsr $ba81	                jsr ed_have_text
.b60a	e8		inx		                inx
.b60b	e8		inx		                inx                     ; ( addr-t u-t 0 )
.b60c	20 ae ba	jsr $baae	                jsr ed_last_line          ; ( addr-t u-t 0 para1 )
.b60f	20 a2 a1	jsr $a1a2	                jsr xt_swap             ; SWAP ( addr-t u-t para1 0 )
.b612	a9 80		lda #$80	                lda #%10000000
.b614	04 32		tsb $32		                tsb ed_flags
.b616	a5 0a		lda $0a		                lda ciblen
.b618	3a		dec a		                dea                     ; sets Z if A was 1
.b619	d0 03		bne $b61e	                bne +
.b61b	4c 86 b6	jmp $b686	                jmp _line_number_only_from_external
.b61e					+
.b61e	a0 01		ldy #$01	                ldy #01
.b620	4c 5a b7	jmp $b75a	                jmp _check_command
.b623					_prefix_percent:
.b623	b2 08		lda ($08)	                lda (cib)
.b625	c9 25		cmp #$25	                cmp #$25                ; ASCII '%'
.b627	f0 04		beq $b62d	                beq _whole_text
.b629	c9 2c		cmp #$2c	                cmp #$2c                ; ASCII ','
.b62b	d0 17		bne $b644	                bne _prefix_semicolon
.b62d					_whole_text:
.b62d	20 81 ba	jsr $ba81	                jsr ed_have_text
.b630	a9 01		lda #$01	                lda #01
.b632	95 02		sta $02,x	                sta 2,x                 ; LSB of NOS is para 1
.b634	74 03		stz $03,x	                stz 3,x                 ; ( addr-t u-t para1 0 )
.b636					_semicolon_entry:
.b636	e8		inx		                inx
.b637	e8		inx		                inx                     ; DROP ( addr-t u-t para1 )
.b638	20 ae ba	jsr $baae	                jsr ed_last_line          ; ( addr-t u-t para1 para2 )
.b63b	a9 80		lda #$80	                lda #%10000000
.b63d	04 32		tsb $32		                tsb ed_flags
.b63f	a0 01		ldy #$01	                ldy #01
.b641	4c 5a b7	jmp $b75a	                jmp _check_command
.b644					_prefix_semicolon:
.b644	b2 08		lda ($08)	                lda (cib)
.b646	c9 3b		cmp #$3b	                cmp #$3b                ; ASCII ';'
.b648	d0 0d		bne $b657	                bne _prefix_number
.b64a	20 81 ba	jsr $ba81	                jsr ed_have_text
.b64d	a5 30		lda $30		                lda ed_cur
.b64f	95 02		sta $02,x	                sta 2,x
.b651	a5 31		lda $31		                lda ed_cur+1
.b653	95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t cur 0 )
.b655	80 df		bra $b636	                bra _semicolon_entry
.b657					_prefix_number:
.b657	20 9c a7	jsr $a79c	                jsr xt_zero
.b65a	20 9c a7	jsr $a79c	                jsr xt_zero             ; ( addr-t u-t 0 0 0 0 )
.b65d	ca		dex		                dex
.b65e	ca		dex		                dex
.b65f	ca		dex		                dex
.b660	ca		dex		                dex                     ; ( addr-t u-t 0 0 0 0 ? ? )
.b661	a5 08		lda $08		                lda cib
.b663	95 02		sta $02,x	                sta 2,x
.b665	a5 09		lda $09		                lda cib+1
.b667	95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t 0 0 0 0 cib ? )
.b669	a5 0a		lda $0a		                lda ciblen
.b66b	95 00		sta $00,x	                sta 0,x
.b66d	a5 0b		lda $0b		                lda ciblen+1
.b66f	95 01		sta $01,x	                sta 1,x                 ; ( addr-t u-t 0 0 0 0 cib ciblen )
.b671	20 b1 a2	jsr $a2b1	                jsr xt_to_number        ; ( addr-t u-t 0 0 ud addr2 u2 )
.b674	b5 00		lda $00,x	                lda 0,x
.b676	15 01		ora $01,x	                ora 1,x
.b678	d0 24		bne $b69e	                bne _have_unconverted_chars
.b67a	e8		inx		                inx
.b67b	e8		inx		                inx
.b67c	e8		inx		                inx
.b67d	e8		inx		                inx                     ; 2DROP ( addr-t u-t 0 0 ud )
.b67e	20 7a 8a	jsr $8a7a	                jsr xt_d_to_s           ; D>S ( addr-t u-t 0 0 u )
.b681	20 68 96	jsr $9668	                jsr xt_not_rote         ; -ROT ( addr-t u-t u 0 0 )
.b684	e8		inx		                inx
.b685	e8		inx		                inx                     ; ( addr-t u-t u 0 ) drop through
.b686					_line_number_only_from_external:
.b686	20 a2 a1	jsr $a1a2	                jsr xt_swap             ; ( addr-t u-t 0 u )
.b689	20 8c ba	jsr $ba8c	                jsr ed_is_valid_line
.b68c	b0 03		bcs $b691	                bcs +
.b68e	4c 5e ba	jmp $ba5e	                jmp ed_error_2drop
.b691					+
.b691	20 a2 a1	jsr $a1a2	                jsr xt_swap             ; ( addr-t u-t u 0 )
.b694	20 1b bb	jsr $bb1b	                jsr ed_para1_to_cur
.b697	a9 80		lda #$80	                lda #%10000000
.b699	04 32		tsb $32		                tsb ed_flags
.b69b	4c 39 b9	jmp $b939	                jmp ed_cmd_p_from_external
.b69e					_have_unconverted_chars:
.b69e	20 a9 8d	jsr $8da9	                jsr xt_dup              ; ( addr-t u-t 0 0 ud addr2 u2 u2 )
.b6a1	ca		dex		                dex
.b6a2	ca		dex		                dex                     ; ( addr-t u-t 0 0 ud addr2 u2 u2 ? )
.b6a3	a5 0a		lda $0a		                lda ciblen
.b6a5	95 00		sta $00,x	                sta 0,x
.b6a7	a5 0b		lda $0b		                lda ciblen+1
.b6a9	95 01		sta $01,x	                sta 1,x                 ; ( addr-t u-t 0 0 ud addr2 u2 u2 ciblen )
.b6ab	20 c8 8e	jsr $8ec8	                jsr xt_equal            ; ( addr-t u-t 0 0 ud addr2 u2 f )
.b6ae	b5 00		lda $00,x	                lda 0,x
.b6b0	15 01		ora $01,x	                ora 1,x
.b6b2	f0 0e		beq $b6c2	                beq _no_command_yet
.b6b4	8a		txa		                txa
.b6b5	18		clc		                clc
.b6b6	69 0a		adc #$0a	                adc #10
.b6b8	aa		tax		                tax                     ; ( addr-t u-t 0 0 )
.b6b9	a9 80		lda #$80	                lda #%10000000
.b6bb	14 32		trb $32		                trb ed_flags
.b6bd	a0 00		ldy #$00	                ldy #00
.b6bf	4c 5a b7	jmp $b75a	                jmp _check_command
.b6c2					_no_command_yet:
.b6c2	e8		inx		                inx
.b6c3	e8		inx		                inx                     ; ( ... 0 0 ud addr2 u2 )
.b6c4	20 64 a3	jsr $a364	                jsr xt_to_r             ; >R ( ... 0 0 ud addr2 ) (R: u2)
.b6c7	20 68 96	jsr $9668	                jsr xt_not_rote         ; -ROT ( ... 0 0 addr2 ud ) (R: u2)
.b6ca	20 7a 8a	jsr $8a7a	                jsr xt_d_to_s           ; D>S  ( ... 0 0 addr2 para1 ) (R: u2)
.b6cd	b5 00		lda $00,x	                lda 0,x                 ; LSB
.b6cf	95 06		sta $06,x	                sta 6,x
.b6d1	b5 01		lda $01,x	                lda 1,x                 ; MSB
.b6d3	95 07		sta $07,x	                sta 7,x                 ; ( ... para1 0 addr2 para1 ) (R: u2)
.b6d5	e8		inx		                inx
.b6d6	e8		inx		                inx                     ; ( addr-t u-t para1 0 addr2 ) (R: u2)
.b6d7	20 8c 9a	jsr $9a8c	                jsr xt_r_from           ; R> ( addr-t u-t para1 0 addr2 u2 ) fall through
.b6da	a9 80		lda #$80	                lda #%10000000
.b6dc	04 32		tsb $32		                tsb ed_flags
.b6de					_check_for_para2:
.b6de	a1 02		lda ($02,x)	                lda (2,x)
.b6e0	c9 2c		cmp #$2c	                cmp #$2c                ; ASCII code for ',' (comma)
.b6e2	f0 0d		beq $b6f1	                beq _got_comma
.b6e4	38		sec		                sec
.b6e5	a5 0a		lda $0a		                lda ciblen
.b6e7	f5 00		sbc $00,x	                sbc 0,x
.b6e9	a8		tay		                tay
.b6ea	e8		inx		                inx
.b6eb	e8		inx		                inx
.b6ec	e8		inx		                inx
.b6ed	e8		inx		                inx                     ; 2DROP ( addr-t u-t para1 0 )
.b6ee	4c 5a b7	jmp $b75a	                jmp _check_command
.b6f1					_got_comma:
.b6f1	f6 02		inc $02,x	                inc 2,x
.b6f3	d0 02		bne $b6f7	                bne +
.b6f5	f6 03		inc $03,x	                inc 3,x                 ; ( addr-t u-t para1 0 addr2+1 u2 )
.b6f7					+
.b6f7	b5 01		lda $01,x	                lda 1,x
.b6f9	f0 02		beq $b6fd	                beq +
.b6fb	d6 01		dec $01,x	                dec 1,x
.b6fd					+
.b6fd	d6 00		dec $00,x	                dec 0,x                 ; ( addr-t u-t para1 0 addr2+1 u2-1 )
.b6ff	a1 02		lda ($02,x)	                lda (2,x)
.b701	c9 24		cmp #$24	                cmp #$24                ; ASCII for '$'
.b703	d0 14		bne $b719	                bne _para2_not_dollar
.b705	38		sec		                sec
.b706	a5 0a		lda $0a		                lda ciblen
.b708	f5 02		sbc $02,x	                sbc 2,x
.b70a	a8		tay		                tay
.b70b	c8		iny		                iny
.b70c	5a		phy		                phy
.b70d	8a		txa		                txa
.b70e	18		clc		                clc
.b70f	69 06		adc #$06	                adc #06
.b711	aa		tax		                tax                     ; ( addr-t u-t para1 )
.b712	20 ae ba	jsr $baae	                jsr ed_last_line          ; ( addr-t u-t para1 para2 )
.b715	7a		ply		                ply
.b716	4c 5a b7	jmp $b75a	                jmp _check_command
.b719					_para2_not_dollar:
.b719	20 64 a3	jsr $a364	                jsr xt_to_r             ; >R ( ... para1 0 addr2+1 ) (R: u2-1)
.b71c	20 9c a7	jsr $a79c	                jsr xt_zero             ; 0 ( ... para1 0 addr2+1 0 ) (R: u2-1)
.b71f	20 9c a7	jsr $a79c	                jsr xt_zero             ; 0 ( ... para1 0 addr2+1 0 0 ) (R: u2-1)
.b722	20 51 9b	jsr $9b51	                jsr xt_rot              ; ROT ( ... para1 0 0 0 addr2+1 ) (R: u2-1)
.b725	20 8c 9a	jsr $9a8c	                jsr xt_r_from           ; R> ( ... para1 0 0 0 addr2+1 u2-1)
.b728	20 a9 8d	jsr $8da9	                jsr xt_dup              ; DUP ( ... para1 0 0 0 addr2+1 u2-1 u2-1)
.b72b	20 64 a3	jsr $a364	                jsr xt_to_r             ; >R ( ... para1 0 0 0 addr2+1 u2-1 ) (R: u2-1)
.b72e	20 b1 a2	jsr $a2b1	                jsr xt_to_number        ; >NUMBER ( ... para1 0 ud addr3 u3 ) (R: u2-1)
.b731	20 a9 8d	jsr $8da9	                jsr xt_dup              ; DUP ( ... para1 0 ud addr3 u3 u3 ) (R: u2-1)
.b734	20 8c 9a	jsr $9a8c	                jsr xt_r_from           ; R> ( ... para1 0 ud addr3 u3 u3 u2-1 )
.b737	20 c8 8e	jsr $8ec8	                jsr xt_equal            ; = ( ... para1 0 ud addr3 u3 f )
.b73a	b5 00		lda $00,x	                lda 0,x
.b73c	15 01		ora $01,x	                ora 1,x
.b73e	f0 08		beq $b748	                beq _second_number
.b740	8a		txa		                txa
.b741	18		clc		                clc
.b742	69 0c		adc #$0c	                adc #12
.b744	aa		tax		                tax                     ; back to ( addr-t u-t )
.b745	4c 62 ba	jmp $ba62	                jmp ed_error
.b748					_second_number:
.b748	e8		inx		                inx
.b749	e8		inx		                inx                     ; ( addr-t u-t para1 0 ud addr3 u3 )
.b74a	38		sec		                sec
.b74b	a5 0a		lda $0a		                lda ciblen
.b74d	f5 00		sbc $00,x	                sbc 0,x
.b74f	48		pha		                pha
.b750	20 a4 a3	jsr $a3a4	                jsr xt_two_drop         ; 2DROP ( addr-t u-t para1 0 ud )
.b753	20 7a 8a	jsr $8a7a	                jsr xt_d_to_s           ; D>S  ( addr-t u-t para1 0 para2 )
.b756	20 3c 96	jsr $963c	                jsr xt_nip              ; NIP ( addr-t u-t para1 para2 )
.b759	7a		ply		                ply
.b75a					_check_command:
.b75a	24 32		bit $32		                bit ed_flags
.b75c	30 08		bmi $b766	                bmi _check_command_have_arg
.b75e	a5 30		lda $30		                lda ed_cur
.b760	95 02		sta $02,x	                sta 2,x
.b762	a5 31		lda $31		                lda ed_cur+1
.b764	95 03		sta $03,x	                sta 3,x
.b766					_check_command_have_arg:
.b766	b1 08		lda ($08),y	                lda (cib),y             ; get mystery char from input
.b768	85 24		sta $24		                sta tmp1
.b76a	da		phx		                phx
.b76b	a2 00		ldx #$00	                ldx #00
.b76d					_cmd_loop:
.b76d	bd 46 bb	lda $bb46,x	                lda ed_cmd_list,x
.b770	f0 07		beq $b779	                beq _illegal_command    ; zero marks end of list
.b772	c5 24		cmp $24		                cmp tmp1
.b774	f0 07		beq $b77d	                beq _found_cmd
.b776	e8		inx		                inx
.b777	80 f4		bra $b76d	                bra _cmd_loop
.b779					_illegal_command:
.b779	fa		plx		                plx
.b77a	4c 5e ba	jmp $ba5e	                jmp ed_error_2drop
.b77d					_found_cmd:
.b77d	8a		txa		                txa
.b77e	0a		asl a		                asl
.b77f	aa		tax		                tax                     ; X * 2 for table
.b780	7c 51 bb	jmp ($bb51,x)	                jmp (ed_cmd_table,x)
.b783					ed_next_command:
.b783	e8		inx		                inx
.b784	e8		inx		                inx
.b785	e8		inx		                inx
.b786	e8		inx		                inx                     ; ( addr-t u-t ) Fall through
.b787					_next_command_empty:
.b787	4c 91 b5	jmp $b591	                jmp ed_input_loop
.b78a					ed_all_done:
.b78a	64 0a		stz $0a		                stz ciblen
.b78c	64 0b		stz $0b		                stz ciblen+1
.b78e	20 a4 a3	jsr $a3a4	                jsr xt_two_drop                 ; 2DROP ( addr-t u-t )
.b791	a5 33		lda $33		                lda editor3+1
.b793	85 18		sta $18		                sta base
.b795	60		rts		                rts
.b796					ed_cmd_a:
.b796	fa		plx		                plx
.b797	e8		inx		                inx
.b798	e8		inx		                inx                     ;  DROP ( addr-t u-t para1 )
.b799					ed_entry_cmd_i:
.b799					ed_cmd_a_have_para:
.b799	20 e4 ba	jsr $bae4	                jsr ed_num_to_addr        ;  ( addr-t u-t addr1 )
.b79c	20 5d 89	jsr $895d	                jsr xt_cr
.b79f					_next_string_loop:
.b79f	20 70 ba	jsr $ba70	                jsr ed_get_input
.b7a2	b2 08		lda ($08)	                lda (cib)
.b7a4	c9 2e		cmp #$2e	                cmp #$2e                ; ASCII for '.'
.b7a6	d0 16		bne $b7be	                bne _add_line
.b7a8	a4 0a		ldy $0a		                ldy ciblen
.b7aa	c0 01		cpy #$01	                cpy #01
.b7ac	d0 10		bne $b7be	                bne _add_line
.b7ae	a4 0b		ldy $0b		                ldy ciblen+1
.b7b0	d0 0c		bne $b7be	                bne _add_line
.b7b2	e8		inx		                inx
.b7b3	e8		inx		                inx
.b7b4	a9 40		lda #$40	                lda #%01000000
.b7b6	04 32		tsb $32		                tsb ed_flags
.b7b8	20 5d 89	jsr $895d	                jsr xt_cr
.b7bb	4c 91 b5	jmp $b591	                jmp ed_input_loop
.b7be					_add_line:
.b7be	20 a9 8d	jsr $8da9	                jsr xt_dup              ; DUP ( addr-t u-t addr1 addr1 )
.b7c1	20 6c 91	jsr $916c	                jsr xt_here             ; HERE ( addr-t u-t addr1 addr1 here )
.b7c4	20 a2 a1	jsr $a1a2	                jsr xt_swap             ; SWAP ( addr-t u-t addr1 here addr1 )
.b7c7	20 7a 8f	jsr $8f7a	                jsr xt_fetch            ; @  ( addr-t u-t addr1 here addr2 )
.b7ca	20 68 87	jsr $8768	                jsr xt_comma            ; ,  ( addr-t u-t addr1 here )
.b7cd	20 81 a3	jsr $a381	                jsr xt_tuck             ; TUCK ( addr-t u-t here addr1 here )
.b7d0	20 a2 a1	jsr $a1a2	                jsr xt_swap             ; SWAP ( addr-t u-t here here addr1 )
.b7d3	20 81 a1	jsr $a181	                jsr xt_store            ; ! ( addr-t u-t here )
.b7d6	20 6c 91	jsr $916c	                jsr xt_here             ; HERE ( addr-t u-t here here2)
.b7d9	a5 00		lda $00		                lda cp
.b7db	18		clc		                clc
.b7dc	69 04		adc #$04	                adc #04
.b7de	85 00		sta $00		                sta cp
.b7e0	90 02		bcc $b7e4	                bcc +
.b7e2	e6 01		inc $01		                inc cp+1
.b7e4					+
.b7e4	e6 30		inc $30		                inc ed_cur
.b7e6	d0 02		bne $b7ea	                bne +
.b7e8	e6 31		inc $31		                inc ed_cur+1
.b7ea					+
.b7ea	20 6c 91	jsr $916c	                jsr xt_here     ; HERE ( addr-t u-t here here2 here3 )
.b7ed	20 a9 8d	jsr $8da9	                jsr xt_dup      ; DUP ( addr-t u-t here here2 here3 here3 )
.b7f0	ca		dex		                dex
.b7f1	ca		dex		                dex             ; ( addr-t u-t here here2 here3 here3 ? )
.b7f2	a5 08		lda $08		                lda cib
.b7f4	95 00		sta $00,x	                sta 0,x
.b7f6	a5 09		lda $09		                lda cib+1
.b7f8	95 01		sta $01,x	                sta 1,x         ; ( addr-t u-t here here2 here3 here3 cib )
.b7fa	20 a2 a1	jsr $a1a2	                jsr xt_swap     ; SWAP ( addr-t u-t here here2 here3 cib here3 )
.b7fd	ca		dex		                dex
.b7fe	ca		dex		                dex             ; ( addr-t u-t here here2 here3 cib here3 ? )
.b7ff	a5 0a		lda $0a		                lda ciblen
.b801	95 00		sta $00,x	                sta 0,x
.b803	a5 0b		lda $0b		                lda ciblen+1
.b805	95 01		sta $01,x	                sta 1,x         ; ( addr-t u-t here here2 here3 cib here3 ciblen )
.b807	20 bc 95	jsr $95bc	                jsr xt_move     ; ( addr-t u-t here here2 here3 )
.b80a	18		clc		                clc
.b80b	a5 00		lda $00		                lda cp
.b80d	65 0a		adc $0a		                adc ciblen
.b80f	85 00		sta $00		                sta cp
.b811	90 06		bcc $b819	                bcc +
.b813	a5 01		lda $01		                lda cp+1
.b815	65 0b		adc $0b		                adc ciblen+1
.b817	85 01		sta $01		                sta cp+1
.b819					+
.b819	20 8d 98	jsr $988d	                jsr xt_over             ; OVER ( addr-t u-t here here2 here3 here2 )
.b81c	20 81 a1	jsr $a181	                jsr xt_store            ; ! ( addr-t u-t here here2 )
.b81f	20 17 98	jsr $9817	                jsr xt_one_plus         ; 1+
.b822	20 17 98	jsr $9817	                jsr xt_one_plus         ; 1+ ( addr-t u-t here here2+2 )
.b825	20 a9 8d	jsr $8da9	                jsr xt_dup              ; DUP ( addr-t u-t here here2+2 here2+2 )
.b828	a5 0a		lda $0a		                lda ciblen
.b82a	95 02		sta $02,x	                sta 2,x
.b82c	a5 0b		lda $0b		                lda ciblen+1
.b82e	95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t here ciblen here2+2 )
.b830	20 81 a1	jsr $a181	                jsr xt_store            ; ! ( addr-t u-t here )
.b833	20 5d 89	jsr $895d	                jsr xt_cr
.b836	4c 9f b7	jmp $b79f	                jmp _next_string_loop
.b839					ed_cmd_d:
.b839	fa		plx		                plx
.b83a	20 81 ba	jsr $ba81	                jsr ed_have_text
.b83d	20 d6 ba	jsr $bad6	                jsr ed_no_line_zero
.b840	b5 00		lda $00,x	                lda 0,x
.b842	15 01		ora $01,x	                ora 1,x
.b844	d0 08		bne $b84e	                bne +
.b846	20 8d 98	jsr $988d	                jsr xt_over             ; ( addr-t u-t para1 0 para1 )
.b849	20 8b b8	jsr $b88b	                jsr _cmd_d_common       ; ( addr-t u-t para1 0 )
.b84c	80 33		bra $b881	                bra _cmd_d_done
.b84e					+
.b84e	20 8c ba	jsr $ba8c	                jsr ed_is_valid_line      ; result is in C flag
.b851	b0 03		bcs $b856	                bcs _cmd_d_loop
.b853	4c 5e ba	jmp $ba5e	                jmp ed_error_2drop
.b856					_cmd_d_loop:
.b856	20 ac a3	jsr $a3ac	                jsr xt_two_dup          ; 2DUP ( addr-t u-t para1 para2 para1 para2 )
.b859	20 57 91	jsr $9157	                jsr xt_greater_than     ; > ( addr-t u-t para1 para2 f )
.b85c	b5 00		lda $00,x	                lda 0,x
.b85e	15 01		ora $01,x	                ora 1,x
.b860	d0 0d		bne $b86f	                bne _cmd_d_done_with_flag
.b862	e8		inx		                inx
.b863	e8		inx		                inx                     ; Get rid of the flag from >
.b864	20 a9 8d	jsr $8da9	                jsr xt_dup              ; DUP ( addr-t u-t para1 para2 para2 )
.b867	20 8b b8	jsr $b88b	                jsr _cmd_d_common       ; ( addr-t u-t para1 para2 )
.b86a	20 0b 98	jsr $980b	                jsr xt_one_minus        ; 1- ( addr-t u-t para1 para2-1 )
.b86d	80 e7		bra $b856	                bra _cmd_d_loop
.b86f					_cmd_d_done_with_flag:
.b86f	e8		inx		                inx                     ; ( addr-t u-t para1 para2 )
.b870	e8		inx		                inx
.b871	b5 02		lda $02,x	                lda 2,x
.b873	d0 02		bne $b877	                bne +
.b875	d6 03		dec $03,x	                dec 3,x
.b877					+
.b877	d6 02		dec $02,x	                dec 2,x
.b879	b5 02		lda $02,x	                lda 2,x
.b87b	85 30		sta $30		                sta ed_cur
.b87d	b5 03		lda $03,x	                lda 3,x
.b87f	85 31		sta $31		                sta ed_cur+1            ; drop through to _cmd_d_done
.b881					_cmd_d_done:
.b881	a9 40		lda #$40	                lda #%01000000
.b883	04 32		tsb $32		                tsb ed_flags
.b885	20 5d 89	jsr $895d	                jsr xt_cr
.b888	4c 83 b7	jmp $b783	                jmp ed_next_command
.b88b					_cmd_d_common:
.b88b	20 a9 8d	jsr $8da9	                jsr xt_dup              ; DUP ( addr-t u-t u u )
.b88e	20 e4 ba	jsr $bae4	                jsr ed_num_to_addr        ; ( addr-t u-t u addr )
.b891	20 7a 8f	jsr $8f7a	                jsr xt_fetch            ; @ ( addr-t u-t u addr1 )
.b894	20 a2 a1	jsr $a1a2	                jsr xt_swap             ; SWAP ( addr-t u-t addr1 u )
.b897	20 0b 98	jsr $980b	                jsr xt_one_minus        ; 1- ( addr-t u-t addr1 u-1 )
.b89a	20 e4 ba	jsr $bae4	                jsr ed_num_to_addr        ; ( addr-t u-t addr1 addr-1 )
.b89d	20 81 a1	jsr $a181	                jsr xt_store            ; ! ( addr-t u-t )
.b8a0	60		rts		                rts
.b8a1					ed_cmd_equ:
.b8a1	fa		plx		                plx
.b8a2	a5 2e		lda $2e		                lda ed_head
.b8a4	05 2f		ora $2f		                ora ed_head+1
.b8a6	d0 08		bne $b8b0	                bne _cmd_equ_have_text
.b8a8	ca		dex		                dex
.b8a9	ca		dex		                dex
.b8aa	74 00		stz $00,x	                stz 0,x
.b8ac	74 01		stz $01,x	                stz 1,x                 ; ( addr-t u-t para1 para2 0 )
.b8ae	80 21		bra $b8d1	                bra _cmd_equ_done
.b8b0					_cmd_equ_have_text:
.b8b0	20 d6 ba	jsr $bad6	                jsr ed_no_line_zero
.b8b3	24 32		bit $32		                bit ed_flags
.b8b5	30 0c		bmi $b8c3	                bmi _cmd_equ_have_para
.b8b7	ca		dex		                dex
.b8b8	ca		dex		                dex                     ; ( addr-t u-t para1 para2 ? )
.b8b9	a5 30		lda $30		                lda ed_cur
.b8bb	95 00		sta $00,x	                sta 0,x
.b8bd	a5 31		lda $31		                lda ed_cur+1
.b8bf	95 01		sta $01,x	                sta 1,x
.b8c1	80 0e		bra $b8d1	                bra _cmd_equ_done       ; ( addr-t u-t para1 para2 cur )
.b8c3					_cmd_equ_have_para:
.b8c3	b5 00		lda $00,x	                lda 0,x
.b8c5	15 01		ora $01,x	                ora 1,x
.b8c7	d0 05		bne $b8ce	                bne _cmd_equ_two_paras
.b8c9	20 8d 98	jsr $988d	                jsr xt_over             ; ( addr-t u-t para1 para2 para1)
.b8cc	80 03		bra $b8d1	                bra _cmd_equ_done
.b8ce					_cmd_equ_two_paras:
.b8ce	20 a9 8d	jsr $8da9	                jsr xt_dup              ; ( addr-t u-t para1 para2 para2) drop through
.b8d1					_cmd_equ_done:
.b8d1	20 5d 89	jsr $895d	                jsr xt_cr               ; number goes on new line
.b8d4	20 22 a5	jsr $a522	                jsr xt_u_dot            ; ( addr-t u-t para1 para2 )
.b8d7	20 5d 89	jsr $895d	                jsr xt_cr
.b8da	4c 83 b7	jmp $b783	                jmp ed_next_command
.b8dd					ed_cmd_f:
.b8dd	fa		plx		                plx
.b8de	24 32		bit $32		                bit ed_flags
.b8e0	30 17		bmi $b8f9	                bmi _cmd_f_have_para
.b8e2	20 5d 89	jsr $895d	                jsr xt_cr
.b8e5	20 64 a3	jsr $a364	                jsr xt_to_r             ; >R   ( addr-t u-t 0 ) ( R: 0 )
.b8e8	20 51 9b	jsr $9b51	                jsr xt_rot              ; ROT  ( u-t 0 addr-t ) ( R: 0 )
.b8eb	20 a9 8d	jsr $8da9	                jsr xt_dup              ; DUP  ( u-t 0 addr-t addr-t ) ( R: 0 )
.b8ee	20 22 a5	jsr $a522	                jsr xt_u_dot            ; U.   ( u-t 0 addr-t ) ( R: 0 )
.b8f1	20 68 96	jsr $9668	                jsr xt_not_rote         ; -ROT ( addr-t u-t 0 ) ( R: 0 )
.b8f4	20 8c 9a	jsr $9a8c	                jsr xt_r_from           ; R>   ( addr-t u-t 0 0 )
.b8f7	80 11		bra $b90a	                bra _cmd_f_done
.b8f9					_cmd_f_have_para:
.b8f9	20 8d 98	jsr $988d	                jsr xt_over
.b8fc	20 5d 89	jsr $895d	                jsr xt_cr
.b8ff	20 22 a5	jsr $a522	                jsr xt_u_dot
.b902	b5 02		lda $02,x	                lda 2,x
.b904	95 06		sta $06,x	                sta 6,x
.b906	b5 03		lda $03,x	                lda 3,x
.b908	95 07		sta $07,x	                sta 7,x                 ; fall through to _cmd_f_done
.b90a					_cmd_f_done:
.b90a	20 5d 89	jsr $895d	                jsr xt_cr
.b90d	4c 83 b7	jmp $b783	                jmp ed_next_command
.b910					ed_cmd_i:
.b910	fa		plx		                plx
.b911	e8		inx		                inx
.b912	e8		inx		                inx                     ;  DROP ( addr-t u-t para1 )
.b913	24 32		bit $32		                bit ed_flags
.b915	30 08		bmi $b91f	                bmi _cmd_i_have_para
.b917	a5 30		lda $30		                lda ed_cur
.b919	95 00		sta $00,x	                sta 0,x
.b91b	a5 31		lda $31		                lda ed_cur+1
.b91d	95 01		sta $01,x	                sta 1,x                 ;  ( addr-t u-t cur ) drop through
.b91f					_cmd_i_have_para:
.b91f	b5 00		lda $00,x	                lda 0,x
.b921	15 01		ora $01,x	                ora 1,x
.b923	f0 09		beq $b92e	                beq _cmd_i_done
.b925	20 0b 98	jsr $980b	                jsr xt_one_minus        ; 1-  ( addr-t u-t para1-1 )
.b928	20 9c a7	jsr $a79c	                jsr xt_zero             ; 0   ( addr-t u-t para1-1 0 )
.b92b	20 12 95	jsr $9512	                jsr xt_max              ; MAX ( addr-t u-t para1-1 | 0 )
.b92e					_cmd_i_done:
.b92e	4c 99 b7	jmp $b799	                jmp ed_entry_cmd_i
.b931					ed_cmd_n:
.b931	fa		plx		                plx
.b932	a9 01		lda #$01	                lda #%00000001
.b934	04 32		tsb $32		                tsb ed_flags
.b936	80 05		bra $b93d	                bra ed_cmd_p_entry_for_cmd_n
.b938					ed_cmd_p:
.b938	fa		plx		                plx
.b939					ed_cmd_p_from_external:
.b939	a9 01		lda #$01	                lda #%00000001
.b93b	14 32		trb $32		                trb ed_flags
.b93d					ed_cmd_p_entry_for_cmd_n:
.b93d	20 81 ba	jsr $ba81	                jsr ed_have_text
.b940	20 d6 ba	jsr $bad6	                jsr ed_no_line_zero
.b943	20 5d 89	jsr $895d	                jsr xt_cr
.b946	b5 00		lda $00,x	                lda 0,x
.b948	15 01		ora $01,x	                ora 1,x
.b94a	d0 10		bne $b95c	                bne _cmd_p_loop
.b94c	b5 02		lda $02,x	                lda 2,x
.b94e	85 30		sta $30		                sta ed_cur
.b950	b5 03		lda $03,x	                lda 3,x
.b952	85 31		sta $31		                sta ed_cur+1
.b954	20 8d 98	jsr $988d	                jsr xt_over             ; OVER ( addr-t u-t para1 para2 para1 )
.b957	20 85 b9	jsr $b985	                jsr _cmd_p_common       ; ( addr-t u-t para1 para2 )
.b95a	80 26		bra $b982	                bra _cmd_p_all_done
.b95c					_cmd_p_loop:
.b95c	20 ac a3	jsr $a3ac	                jsr xt_two_dup          ; 2DUP ( addr-t u-t para1 para2 para1 para2 )
.b95f	20 57 91	jsr $9157	                jsr xt_greater_than     ; > ( addr-t u-t para1 para2 f )
.b962	b5 00		lda $00,x	                lda 0,x
.b964	15 01		ora $01,x	                ora 1,x
.b966	d0 10		bne $b978	                bne _cmd_p_done
.b968	e8		inx		                inx
.b969	e8		inx		                inx                     ; Get rid of the flag from >
.b96a	20 8d 98	jsr $988d	                jsr xt_over             ; ( addr-t u-t para1 para2 para1 )
.b96d	20 85 b9	jsr $b985	                jsr _cmd_p_common       ; ( addr-t u-t para1 para2 )
.b970	f6 02		inc $02,x	                inc 2,x
.b972	d0 02		bne $b976	                bne +
.b974	f6 03		inc $03,x	                inc 3,x
.b976					+
.b976	80 e4		bra $b95c	                bra _cmd_p_loop
.b978					_cmd_p_done:
.b978	e8		inx		                inx
.b979	e8		inx		                inx                     ; fall through to _cmp_p_all_done
.b97a	b5 00		lda $00,x	                lda 0,x
.b97c	85 30		sta $30		                sta ed_cur
.b97e	b5 01		lda $01,x	                lda 1,x
.b980	85 31		sta $31		                sta ed_cur+1
.b982					_cmd_p_all_done:
.b982	4c 83 b7	jmp $b783	                jmp ed_next_command
.b985					_cmd_p_common:
.b985	a5 32		lda $32		                lda ed_flags
.b987	4a		lsr a		                lsr                     ; bit 0 now in carry
.b988	90 0b		bcc $b995	                bcc _cmd_p_common_no_num
.b98a	20 a9 8d	jsr $8da9	                jsr xt_dup              ; DUP ( addr-t u-t para1 para1 )
.b98d	20 22 a5	jsr $a522	                jsr xt_u_dot            ; U. ( addr-t u-t para1 )
.b990	a9 09		lda #$09	                lda #$09                 ; ASCII for Tab
.b992	20 f0 8d	jsr $8df0	                jsr emit_a
.b995					_cmd_p_common_no_num:
.b995	20 e4 ba	jsr $bae4	                jsr ed_num_to_addr        ; ( addr-t u-t addr )
.b998	20 24 bb	jsr $bb24	                jsr ed_print_addr
.b99b	60		rts		                rts
.b99c					ed_cmd_q:
.b99c	fa		plx		                plx
.b99d	24 32		bit $32		                bit ed_flags            ; bit 6 is change flag
.b99f	50 03		bvc $b9a4	                bvc +
.b9a1	4c 5e ba	jmp $ba5e	                jmp ed_error_2drop
.b9a4					+
.b9a4	4c 8a b7	jmp $b78a	                jmp ed_all_done            ; can't fall thru because of PLX
.b9a7					ed_cmd_qq:
.b9a7	fa		plx		                plx
.b9a8	4c 8a b7	jmp $b78a	                jmp ed_all_done
.b9ab					ed_cmd_w:
.b9ab	fa		plx		                plx
.b9ac	20 81 ba	jsr $ba81	                jsr ed_have_text
.b9af	24 32		bit $32		                bit ed_flags
.b9b1	30 13		bmi $b9c6	                bmi _cmd_w_have_para
.b9b3	b5 06		lda $06,x	                lda 6,x
.b9b5	15 07		ora $07,x	                ora 7,x
.b9b7	d0 03		bne $b9bc	                bne +
.b9b9	4c 5e ba	jmp $ba5e	                jmp ed_error_2drop
.b9bc					+
.b9bc	b5 06		lda $06,x	                lda 6,x
.b9be	95 02		sta $02,x	                sta 2,x
.b9c0	b5 07		lda $07,x	                lda 7,x
.b9c2	95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t addr-t ? )
.b9c4	80 08		bra $b9ce	                bra _cmd_w_para_ready
.b9c6					_cmd_w_have_para:
.b9c6	b5 02		lda $02,x	                lda 2,x
.b9c8	95 06		sta $06,x	                sta 6,x
.b9ca	b5 03		lda $03,x	                lda 3,x
.b9cc	95 07		sta $07,x	                sta 7,x                 ; drop through to _cmd_w_para_ready
.b9ce					_cmd_w_para_ready:
.b9ce	a9 2e		lda #$2e	                lda #<ed_head
.b9d0	95 00		sta $00,x	                sta 0,x
.b9d2	a9 00		lda #$00	                lda #>ed_head
.b9d4	95 01		sta $01,x	                sta 1,x                 ; ( addr-t u-t addr-t addr-h )
.b9d6	20 8d 98	jsr $988d	                jsr xt_over             ; OVER ( addr-t u-t addr-t addr-h addr-t )
.b9d9	20 64 a3	jsr $a364	                jsr xt_to_r             ; >R ( addr-t u-t addr-t addr-h ) ( R: addr-t )
.b9dc					_cmd_w_loop:
.b9dc	20 7a 8f	jsr $8f7a	                jsr xt_fetch            ; @ ( addr-t u-t addr-t addr1 ) ( R: addr-t )
.b9df	b5 00		lda $00,x	                lda 0,x
.b9e1	15 01		ora $01,x	                ora 1,x
.b9e3	f0 55		beq $ba3a	                beq _cmd_w_eol
.b9e5	20 ac a3	jsr $a3ac	                jsr xt_two_dup          ; 2DUP ( addr-t addr-1 addr-t addr-1 ) ( R: addr-t addr-1 addr-t )
.b9e8	20 96 a4	jsr $a496	                jsr xt_two_to_r         ; 2>R  ( addr-t addr-1 ) (R: ... )
.b9eb	20 17 98	jsr $9817	                jsr xt_one_plus         ; 1+ ( addr-t addr1+1 ) (R: ... )
.b9ee	20 17 98	jsr $9817	                jsr xt_one_plus         ; 1+ ( addr-t addr1+2 ) (R: ... )
.b9f1	20 a9 8d	jsr $8da9	                jsr xt_dup              ; DUP ( addr-t addr1+2 addr1+2 ) ( R: ... )
.b9f4	20 7a 8f	jsr $8f7a	                jsr xt_fetch            ; @ ( addr-t addr1+2 addr-s ) ( R: ... )
.b9f7	20 a2 a1	jsr $a1a2	                jsr xt_swap             ; SWAP ( addr-t addr-s addr1+2 ) ( R: ... )
.b9fa	20 17 98	jsr $9817	                jsr xt_one_plus         ; 1+ ( addr-t addr-s addr1+1 ) (R: ... )
.b9fd	20 17 98	jsr $9817	                jsr xt_one_plus         ; 1+ ( addr-t addr-s addr1+2 ) (R: ... )
.ba00	20 7a 8f	jsr $8f7a	                jsr xt_fetch            ; @ ( addr-t addr-s u-s ) ( R: ... )
.ba03	20 68 96	jsr $9668	                jsr xt_not_rote         ; -ROT ( u-s addr-t addr-s ) ( R: ... )
.ba06	20 a2 a1	jsr $a1a2	                jsr xt_swap             ; SWAP ( u-s addr-s addr-t ) ( R: ... )
.ba09	20 51 9b	jsr $9b51	                jsr xt_rot              ; ROT (addr-s addr-t u-s ) ( R: ... )
.ba0c	20 a9 8d	jsr $8da9	                jsr xt_dup              ; DUP (addr-s addr-t u-s u-s ) ( R: ... )
.ba0f	20 64 a3	jsr $a364	                jsr xt_to_r             ; >R (addr-s addr-t u-s ) ( R: ... u-s )
.ba12	20 bc 95	jsr $95bc	                jsr xt_move             ; MOVE ( )( R: addr-t addr-1 addr-t )
.ba15	20 8c 9a	jsr $9a8c	                jsr xt_r_from           ; R> ( u-s )  ( R: addr-t addr-h addr-t )
.ba18	20 1c a4	jsr $a41c	                jsr xt_two_r_from       ; 2R> ( u-s addr-t addr-h ) ( R: addr-t )
.ba1b	20 68 96	jsr $9668	                jsr xt_not_rote         ; -ROT ( addr-h u-s addr-t ) ( R: addr-t )
.ba1e	20 dd 99	jsr $99dd	                jsr xt_plus             ; + ( addr-h addr-t1 ) ( R: addr-t )
.ba21	20 a9 8d	jsr $8da9	                jsr xt_dup              ; DUP ( addr-h addr-t1 addr-t1 ) ( R: addr-t )
.ba24	ca		dex		                dex
.ba25	ca		dex		                dex                     ; ( addr-h addr-t1 addr-t1 ? ) ( R: addr-t )
.ba26	a9 0a		lda #$0a	                lda #AscLF              ; ASCII for LF
.ba28	95 00		sta $00,x	                sta 0,x
.ba2a	74 01		stz $01,x	                stz 1,x                 ; ( addr-h addr-t1 addr-t1 c ) ( R: addr-t )
.ba2c	20 a2 a1	jsr $a1a2	                jsr xt_swap             ; SWAP ( addr-h addr-t1 c addr-t1 ) ( R: addr-t )
.ba2f	20 81 a1	jsr $a181	                jsr xt_store            ; ! ( addr-h addr-t1 ) ( R: addr-t )
.ba32	20 17 98	jsr $9817	                jsr xt_one_plus         ; 1+ ( addr-h addr-t1+1 ) ( R: addr-t )
.ba35	20 a2 a1	jsr $a1a2	                jsr xt_swap             ; SWAP ( addr-t1+1 addr-h ) ( R: addr-t )
.ba38	80 a2		bra $b9dc	                bra _cmd_w_loop
.ba3a					_cmd_w_eol:
.ba3a	20 a2 a1	jsr $a1a2	                jsr xt_swap             ; SWAP ( addr-t u-t addr-n addr-tn ) ( R: addr-t )
.ba3d	20 8c 9a	jsr $9a8c	                jsr xt_r_from           ; R> ( addr-t u-t addr-n addr-tn addr-t )
.ba40	20 4a 95	jsr $954a	                jsr xt_minus            ; - ( addr-t u-t addr-n u )
.ba43	b5 00		lda $00,x	                lda 0,x
.ba45	95 04		sta $04,x	                sta 4,x
.ba47	b5 01		lda $01,x	                lda 1,x
.ba49	95 05		sta $05,x	                sta 5,x                 ; ( addr-t u addr-n u )
.ba4b	20 5d 89	jsr $895d	                jsr xt_cr
.ba4e	20 a9 8d	jsr $8da9	                jsr xt_dup              ; DUP ( addr-t u addr-n u u )
.ba51	20 22 a5	jsr $a522	                jsr xt_u_dot            ; U. ( addr-t u addr-n u )
.ba54	20 5d 89	jsr $895d	                jsr xt_cr
.ba57	a9 40		lda #$40	                lda #%01000000
.ba59	14 32		trb $32		                trb ed_flags
.ba5b	4c 83 b7	jmp $b783	                jmp ed_next_command
.ba5e					ed_error_2drop:
.ba5e	e8		inx		                inx
.ba5f	e8		inx		                inx                     ; drop through to _error_1drop
.ba60					ed_error_1drop:
.ba60	e8		inx		                inx
.ba61	e8		inx		                inx                     ; drop through to _error
.ba62					ed_error:
.ba62	20 5d 89	jsr $895d	                jsr xt_cr
.ba65	a9 3f		lda #$3f	                lda #'?'
.ba67	20 f0 8d	jsr $8df0	                jsr emit_a
.ba6a	20 5d 89	jsr $895d	                jsr xt_cr
.ba6d	4c 91 b5	jmp $b591	                jmp ed_input_loop
.ba70					ed_get_input:
.ba70	20 f2 9a	jsr $9af2	                jsr xt_refill           ;  ( addr-t u-t f )
.ba73	b5 00		lda $00,x	                lda 0,x
.ba75	15 01		ora $01,x	                ora 1,x
.ba77	d0 05		bne $ba7e	                bne +
.ba79	7a		ply		                ply
.ba7a	7a		ply		                ply
.ba7b	4c 60 ba	jmp $ba60	                jmp ed_error_1drop
.ba7e					+
.ba7e	e8		inx		                inx
.ba7f	e8		inx		                inx
.ba80	60		rts		                rts
.ba81					ed_have_text:
.ba81	a5 2e		lda $2e		                lda ed_head
.ba83	05 2f		ora $2f		                ora ed_head+1
.ba85	d0 04		bne $ba8b	                bne +
.ba87	7a		ply		                ply
.ba88	7a		ply		                ply
.ba89	80 d7		bra $ba62	                bra ed_error
.ba8b					+
.ba8b	60		rts		                rts
.ba8c					ed_is_valid_line:
.ba8c	38		sec		                sec                             ; default is legal line number
.ba8d	b5 00		lda $00,x	                lda 0,x
.ba8f	15 01		ora $01,x	                ora 1,x
.ba91	f0 19		beq $baac	                beq _is_valid_line_nope_zero    ; ( n )
.ba93	20 a9 8d	jsr $8da9	                jsr xt_dup                      ; DUP ( n n )
.ba96	20 ae ba	jsr $baae	                jsr ed_last_line                  ; ( n n last )
.ba99	20 a2 a1	jsr $a1a2	                jsr xt_swap                     ; SWAP ( n last n )
.ba9c	20 62 93	jsr $9362	                jsr xt_less_than                ; < ( n f )
.ba9f	b5 00		lda $00,x	                lda 0,x                         ; 0 flag is good
.baa1	15 01		ora $01,x	                ora 1,x
.baa3	d0 05		bne $baaa	                bne _is_valid_line_too_small
.baa5	e8		inx		                inx
.baa6	e8		inx		                inx                     ; DROP flag ( n )
.baa7	38		sec		                sec                     ; Who knows what's happened to C by now
.baa8	80 03		bra $baad	                bra _is_valid_line_done ; only one exit from this routine
.baaa					_is_valid_line_too_small:
.baaa	e8		inx		                inx
.baab	e8		inx		                inx                     ; drop through to _is_valid_line_zero
.baac					_is_valid_line_nope_zero:
.baac	18		clc		                clc                     ; drop through to _is_valid_line_done
.baad					_is_valid_line_done:
.baad	60		rts		                rts
.baae					ed_last_line:
.baae	64 24		stz $24		                stz tmp1
.bab0	64 25		stz $25		                stz tmp1+1
.bab2	ca		dex		                dex
.bab3	ca		dex		                dex                     ; ( ? )
.bab4	a9 2e		lda #$2e	                lda #<ed_head
.bab6	95 00		sta $00,x	                sta 0,x
.bab8	a9 00		lda #$00	                lda #>ed_head
.baba	95 01		sta $01,x	                sta 1,x                 ; ( addr )
.babc					_last_line_loop:
.babc	20 7a 8f	jsr $8f7a	                jsr xt_fetch            ; ( addr | 0 )
.babf	b5 00		lda $00,x	                lda 0,x
.bac1	15 01		ora $01,x	                ora 1,x
.bac3	f0 08		beq $bacd	                beq _last_line_done
.bac5	e6 24		inc $24		                inc tmp1
.bac7	d0 02		bne $bacb	                bne +
.bac9	e6 25		inc $25		                inc tmp1+1
.bacb					+
.bacb	80 ef		bra $babc	                bra _last_line_loop
.bacd					_last_line_done:
.bacd	a5 24		lda $24		                lda tmp1
.bacf	95 00		sta $00,x	                sta 0,x
.bad1	a5 25		lda $25		                lda tmp1+1
.bad3	95 01		sta $01,x	                sta 1,x                 ; ( u )
.bad5	60		rts		                rts
.bad6					ed_no_line_zero:
.bad6	b5 02		lda $02,x	                lda 2,x
.bad8	15 03		ora $03,x	                ora 3,x
.bada	d0 07		bne $bae3	                bne _no_line_zero_done
.badc	24 32		bit $32		                bit ed_flags
.bade	10 03		bpl $bae3	                bpl _no_line_zero_done
.bae0	4c 5e ba	jmp $ba5e	                jmp ed_error_2drop
.bae3					_no_line_zero_done:
.bae3	60		rts		                rts
.bae4					ed_num_to_addr:
.bae4	ca		dex		                dex
.bae5	ca		dex		                dex                     ; ( u ? )
.bae6	a9 2e		lda #$2e	                lda #<ed_head
.bae8	95 00		sta $00,x	                sta 0,x
.baea	a9 00		lda #$00	                lda #>ed_head
.baec	95 01		sta $01,x	                sta 1,x                 ; ( u addr-h )
.baee	b5 02		lda $02,x	                lda 2,x
.baf0	15 03		ora $03,x	                ora 3,x
.baf2	d0 05		bne $baf9	                bne _num_to_addr_loop
.baf4	20 3c 96	jsr $963c	                jsr xt_nip              ; ( addr-h )
.baf7	80 21		bra $bb1a	                bra _num_to_addr_done
.baf9					_num_to_addr_loop:
.baf9	20 7a 8f	jsr $8f7a	                jsr xt_fetch            ; @ ( u addr1 )
.bafc	b5 00		lda $00,x	                lda 0,x
.bafe	15 01		ora $01,x	                ora 1,x
.bb00	d0 05		bne $bb07	                bne +
.bb02	20 3c 96	jsr $963c	                jsr xt_nip              ; NIP ( addr1 )
.bb05	80 13		bra $bb1a	                bra _num_to_addr_done
.bb07					+
.bb07	20 a2 a1	jsr $a1a2	                jsr xt_swap             ; SWAP ( addr1 u )
.bb0a	20 0b 98	jsr $980b	                jsr xt_one_minus        ; 1- ( addr1 u-1 )
.bb0d	b5 00		lda $00,x	                lda 0,x
.bb0f	15 01		ora $01,x	                ora 1,x
.bb11	f0 05		beq $bb18	                beq _num_to_addr_finished
.bb13	20 a2 a1	jsr $a1a2	                jsr xt_swap             ; SWAP ( u-1 addr1 )
.bb16	80 e1		bra $baf9	                bra _num_to_addr_loop
.bb18					_num_to_addr_finished:
.bb18	e8		inx		                inx
.bb19	e8		inx		                inx                     ; ( addr )
.bb1a					_num_to_addr_done:
.bb1a	60		rts		                rts
.bb1b					ed_para1_to_cur:
.bb1b	b5 02		lda $02,x	                lda 2,x
.bb1d	85 30		sta $30		                sta ed_cur
.bb1f	b5 03		lda $03,x	                lda 3,x
.bb21	85 31		sta $31		                sta ed_cur+1
.bb23	60		rts		                rts
.bb24					ed_print_addr:
.bb24	20 17 98	jsr $9817	                jsr xt_one_plus
.bb27	20 17 98	jsr $9817	                jsr xt_one_plus         ; ( addr+2 )
.bb2a	20 a9 8d	jsr $8da9	                jsr xt_dup              ; ( addr+2 addr+2 )
.bb2d	20 17 98	jsr $9817	                jsr xt_one_plus
.bb30	20 17 98	jsr $9817	                jsr xt_one_plus         ; ( addr+2 addr+4 )
.bb33	20 7a 8f	jsr $8f7a	                jsr xt_fetch            ; ( addr+2 u-s )
.bb36	20 a2 a1	jsr $a1a2	                jsr xt_swap             ; ( u-s addr+2 )
.bb39	20 7a 8f	jsr $8f7a	                jsr xt_fetch            ; ( u-s addr-s )
.bb3c	20 a2 a1	jsr $a1a2	                jsr xt_swap             ; ( addr-s u-s )
.bb3f	20 f7 a4	jsr $a4f7	                jsr xt_type
.bb42	20 5d 89	jsr $895d	                jsr xt_cr
.bb45	60		rts		                rts
>bb46	61 66 69 64 70 6e 3d 77		ed_cmd_list:    .text "afidpn=wqQ", 0
>bb4e	71 51 00
.bb51					ed_cmd_table:
>bb51	96 b7 dd b8 10 b9 39 b8		                .word ed_cmd_a, ed_cmd_f, ed_cmd_i, ed_cmd_d, ed_cmd_p, ed_cmd_n
>bb59	38 b9 31 b9
>bb5d	a1 b8 ab b9 9c b9 a7 b9		                .word ed_cmd_equ, ed_cmd_w, ed_cmd_q, ed_cmd_qq
.bb65					ed6502_end:

;******  Return to file: platform/../taliforth.asm

.bb65					forth_words_start:
>bb65	20 63 72 20 2e 28 20 54		.binary "forth_words.asc"
>bb6d	61 6c 69 20 46 6f 72 74 68 20 32 20 66 6f 72 20
>bb7d	74 68 65 20 36 35 63 30 32 29 20 63 72 20 2e 28
>bb8d	20 56 65 72 73 69 6f 6e 20 31 2e 30 20 30 34 2e
>bb9d	20 44 65 63 20 32 30 32 32 20 29 20 63 72 20 2e
>bbad	28 20 43 6f 70 79 72 69 67 68 74 20 32 30 31 34
>bbbd	2d 32 30 32 32 20 53 63 6f 74 20 57 2e 20 53 74
>bbcd	65 76 65 6e 73 6f 6e 2c 20 53 61 6d 20 43 6f 6c
>bbdd	77 65 6c 6c 29 20 63 72 20 2e 28 20 54 61 6c 69
>bbed	20 46 6f 72 74 68 20 32 20 63 6f 6d 65 73 20 77
>bbfd	69 74 68 20 61 62 73 6f 6c 75 74 65 6c 79 20 4e
>bc0d	4f 20 57 41 52 52 41 4e 54 59 29 20 63 72 20 2e
>bc1d	28 20 54 79 70 65 20 27 62 79 65 27 20 74 6f 20
>bc2d	65 78 69 74 29 20 63 72 20
.bc36					forth_words_end:
.bc36					user_words_start:
>bc36	20 20				.binary "user_words.asc"
.bc38					user_words_end:

;******  Processing file: platform/../headers.asm

.bc38					dictionary_start:
.bc38					nt_drop:
>bc38	04 10				        .byte 4, UF
>bc3a	44 bc 28 8d 2d 8d		        .word nt_dup, xt_drop, z_drop
>bc40	64 72 6f 70			        .text "drop"
.bc44					nt_dup:
>bc44	03 10				        .byte 3, UF
>bc46	4f bc a9 8d b6 8d		        .word nt_swap, xt_dup, z_dup
>bc4c	64 75 70			        .text "dup"
.bc4f					nt_swap:
>bc4f	04 10				        .byte 4, UF
>bc51	5b bc a2 a1 b5 a1		        .word nt_store, xt_swap, z_swap
>bc57	73 77 61 70			        .text "swap"
.bc5b					nt_store:
>bc5b	01 10				        .byte 1, UF
>bc5d	64 bc 81 a1 96 a1		        .word nt_fetch, xt_store, z_store
>bc63	21				        .text "!"
.bc64					nt_fetch:
>bc64	01 10				        .byte 1, UF
>bc66	6d bc 7a 8f 8c 8f		        .word nt_over, xt_fetch, z_fetch
>bc6c	40				        .text "@"
.bc6d					nt_over:
>bc6d	04 10				        .byte 4, UF
>bc6f	79 bc 8d 98 9a 98		        .word nt_to_r, xt_over, z_over
>bc75	6f 76 65 72			        .text "over"
.bc79					nt_to_r:
>bc79	02 11				        .byte 2, CO+UF ; native is special case
>bc7b	83 bc 64 a3 77 a3		        .word nt_r_from, xt_to_r, z_to_r
>bc81	3e 72				        .text ">r"
.bc83					nt_r_from:
>bc83	02 01				        .byte 2, CO    ; native is special case
>bc85	8d bc 8c 9a 9c 9a		        .word nt_r_fetch, xt_r_from, z_r_from
>bc8b	72 3e				        .text "r>"
.bc8d					nt_r_fetch:
>bc8d	02 01				        .byte 2, CO    ; native is special case
>bc8f	97 bc 77 9a 8b 9a		        .word nt_nip, xt_r_fetch, z_r_fetch
>bc95	72 40				        .text "r@"
.bc97					nt_nip:
>bc97	03 10				        .byte 3, UF
>bc99	a2 bc 3c 96 49 96		        .word nt_rot, xt_nip, z_nip
>bc9f	6e 69 70			        .text "nip"
.bca2					nt_rot:
>bca2	03 10				        .byte 3, UF
>bca4	ad bc 51 9b 6c 9b		        .word nt_not_rote, xt_rot, z_rot
>bcaa	72 6f 74			        .text "rot"
.bcad					nt_not_rote:
>bcad	04 10				        .byte 4, UF
>bcaf	b9 bc 68 96 83 96		        .word nt_tuck, xt_not_rote, z_not_rote
>bcb5	2d 72 6f 74			        .text "-rot"
.bcb9					nt_tuck:
>bcb9	04 10				        .byte 4, UF
>bcbb	c5 bc 81 a3 9a a3		        .word nt_comma, xt_tuck, z_tuck
>bcc1	74 75 63 6b			        .text "tuck"
.bcc5					nt_comma:
>bcc5	01 10				        .byte 1, UF
>bcc7	ce bc 68 87 81 87		        .word nt_c_fetch, xt_comma, z_comma
>bccd	2c				        .text ","
.bcce					nt_c_fetch:
>bcce	02 10				        .byte 2, UF
>bcd0	d8 bc 05 86 0e 86		        .word nt_c_store, xt_c_fetch, z_c_fetch
>bcd6	63 40				        .text "c@"
.bcd8					nt_c_store:
>bcd8	02 10				        .byte 2, UF
>bcda	e2 bc 0f 86 1a 86		        .word nt_plus_store, xt_c_store, z_c_store
>bce0	63 21				        .text "c!"
.bce2					nt_plus_store:
>bce2	02 10				        .byte 2, UF
>bce4	ec bc f0 99 0f 9a		        .word nt_execute, xt_plus_store, z_plus_store
>bcea	2b 21				        .text "+!"
.bcec					nt_execute:
>bcec	07 10				        .byte 7, UF
>bcee	fb bc 37 8f 3d 8f		        .word nt_emit, xt_execute, z_execute
>bcf4	65 78 65 63 75 74 65		        .text "execute"
.bcfb					nt_emit:
>bcfb	04 18				        .byte 4, NN+UF
>bcfd	07 bd e9 8d f3 8d		        .word nt_type, xt_emit, z_emit
>bd03	65 6d 69 74			        .text "emit"
.bd07					nt_type:
>bd07	04 10				        .byte 4, UF
>bd09	13 bd f7 a4 21 a5		        .word nt_dot, xt_type, z_type
>bd0f	74 79 70 65			        .text "type"
.bd13					nt_dot:
>bd13	01 10				        .byte 1, UF
>bd15	1c bd 30 8c 51 8c		        .word nt_u_dot, xt_dot, z_dot
>bd1b	2e				        .text "."
.bd1c					nt_u_dot:
>bd1c	02 10				        .byte 2, UF
>bd1e	26 bd 22 a5 2d a5		        .word nt_u_dot_r, xt_u_dot, z_u_dot
>bd24	75 2e				        .text "u."
.bd26					nt_u_dot_r:
>bd26	03 10				        .byte 3, UF
>bd28	31 bd 2e a5 4f a5		        .word nt_dot_r, xt_u_dot_r, z_u_dot_r
>bd2e	75 2e 72			        .text "u.r"
.bd31					nt_dot_r:
>bd31	02 10				        .byte 2, UF
>bd33	3b bd 6c 8c 99 8c		        .word nt_d_dot, xt_dot_r, z_dot_r
>bd39	2e 72				        .text ".r"
.bd3b					nt_d_dot:
>bd3b	02 10				        .byte 2, UF
>bd3d	45 bd de 8c fc 8c		        .word nt_d_dot_r, xt_d_dot, z_d_dot
>bd43	64 2e				        .text "d."
.bd45					nt_d_dot_r:
>bd45	03 10				        .byte 3, UF
>bd47	50 bd fd 8c 27 8d		        .word nt_ud_dot, xt_d_dot_r, z_d_dot_r
>bd4d	64 2e 72			        .text "d.r"
.bd50					nt_ud_dot:
>bd50	03 10				        .byte 3, UF
>bd52	5b bd 7c a5 8e a5		        .word nt_ud_dot_r, xt_ud_dot, z_ud_dot
>bd58	75 64 2e			        .text "ud."
.bd5b					nt_ud_dot_r:
>bd5b	04 10				        .byte 4, UF
>bd5d	67 bd 8f a5 ad a5		        .word nt_question, xt_ud_dot_r, z_ud_dot_r
>bd63	75 64 2e 72			        .text "ud.r"
.bd67					nt_question:
>bd67	01 00				        .byte 1, 0
>bd69	70 bd 5c 9a 62 9a		        .word nt_false, xt_question, z_question
>bd6f	3f				        .text "?"
.bd70					nt_false:
>bd70	05 00				        .byte 5, 0
>bd72	7d bd 73 8f 79 8f		        .word nt_true, xt_false, z_false
>bd78	66 61 6c 73 65			        .text "false"
.bd7d					nt_true:
>bd7d	04 00				        .byte 4, 0
>bd7f	89 bd 78 a3 80 a3		        .word nt_space, xt_true, z_true
>bd85	74 72 75 65			        .text "true"
.bd89					nt_space:
>bd89	05 00				        .byte 5, 0
>bd8b	96 bd 18 a1 1d a1		        .word nt_zero, xt_space, z_space
>bd91	73 70 61 63 65			        .text "space"
.bd96					nt_zero:
>bd96	01 00				        .byte 1, 0
>bd98	9f bd 9c a7 a2 a7		        .word nt_one, xt_zero, z_zero
>bd9e	30				        .text "0"
.bd9f					nt_one:
>bd9f	01 00				        .byte 1, 0
>bda1	a8 bd 02 98 0a 98		        .word nt_two, xt_one, z_one
>bda7	31				        .text "1"
.bda8					nt_two:
>bda8	01 00				        .byte 1, 0
>bdaa	b1 bd 9b a3 a3 a3		        .word nt_two_dup, xt_two, z_two
>bdb0	32				        .text "2"
.bdb1					nt_two_dup:
>bdb1	04 10				        .byte 4, UF
>bdb3	bd bd ac a3 c3 a3		        .word nt_question_dup, xt_two_dup, z_two_dup
>bdb9	32 64 75 70			        .text "2dup"
.bdbd					nt_question_dup:
>bdbd	04 10				        .byte 4, UF
>bdbf	c9 bd 63 9a 76 9a		        .word nt_plus, xt_question_dup, z_question_dup
>bdc5	3f 64 75 70			        .text "?dup"
.bdc9					nt_plus:
>bdc9	01 10				        .byte 1, UF
>bdcb	d2 bd dd 99 ef 99		        .word nt_minus, xt_plus, z_plus
>bdd1	2b				        .text "+"
.bdd2					nt_minus:
>bdd2	01 10				        .byte 1, UF
>bdd4	db bd 4a 95 5c 95		        .word nt_one_minus, xt_minus, z_minus
>bdda	2d				        .text "-"
.bddb					nt_one_minus:
>bddb	02 10				        .byte 2, UF
>bddd	e5 bd 0b 98 16 98		        .word nt_one_plus, xt_one_minus, z_one_minus
>bde3	31 2d				        .text "1-"
.bde5					nt_one_plus:
>bde5	02 10				        .byte 2, UF
>bde7	ef bd 17 98 20 98		        .word nt_two_star, xt_one_plus, z_one_plus
>bded	31 2b				        .text "1+"
.bdef					nt_two_star:
>bdef	02 10				        .byte 2, UF
>bdf1	f9 bd 44 a4 4b a4		        .word nt_two_slash, xt_two_star, z_two_star
>bdf7	32 2a				        .text "2*"
.bdf9					nt_two_slash:
>bdf9	02 10				        .byte 2, UF
>bdfb	03 be 39 a4 43 a4		        .word nt_abs, xt_two_slash, z_two_slash
>be01	32 2f				        .text "2/"
.be03					nt_abs:
>be03	03 10				        .byte 3, UF
>be05	0e be 39 81 4d 81		        .word nt_dabs, xt_abs, z_abs
>be0b	61 62 73			        .text "abs"
.be0e					nt_dabs:
>be0e	04 10				        .byte 4, UF
>be10	1a be 80 8a 9e 8a		        .word nt_and, xt_dabs, z_dabs
>be16	64 61 62 73			        .text "dabs"
.be1a					nt_and:
>be1a	03 10				        .byte 3, UF
>be1c	25 be 3e 83 4f 83		        .word nt_or, xt_and, z_and
>be22	61 6e 64			        .text "and"
.be25					nt_or:
>be25	02 10				        .byte 2, UF
>be27	2f be 2d 98 3e 98		        .word nt_xor, xt_or, z_or
>be2d	6f 72				        .text "or"
.be2f					nt_xor:
>be2f	03 10				        .byte 3, UF
>be31	3a be 8a a7 9b a7		        .word nt_rshift, xt_xor, z_xor
>be37	78 6f 72			        .text "xor"
.be3a					nt_rshift:
>be3a	06 10				        .byte 6, UF
>be3c	48 be 6d 9b 80 9b		        .word nt_lshift, xt_rshift, z_rshift
>be42	72 73 68 69 66 74		        .text "rshift"
.be48					nt_lshift:
>be48	06 10				        .byte 6, UF
>be4a	56 be 74 94 87 94		        .word nt_pick, xt_lshift, z_lshift
>be50	6c 73 68 69 66 74		        .text "lshift"
.be56					nt_pick:
>be56	04 00				        .byte 4, 0    ; underflow check is complicated, leave off here
>be58	62 be cc 99 dc 99		        .word nt_char, xt_pick, z_pick
>be5e	70 69 63 6b			        .text "pick"
.be62					nt_char:
>be62	04 00				        .byte 4, 0
>be64	6e be 2b 86 41 86		        .word nt_bracket_char, xt_char, z_char
>be6a	63 68 61 72			        .text "char"
.be6e					nt_bracket_char:
>be6e	06 05				        .byte 6, CO+IM
>be70	7c be 91 85 97 85		        .word nt_char_plus, xt_bracket_char, z_bracket_char
>be76	5b 63 68 61 72 5d		        .text "[char]"
.be7c					nt_char_plus:
>be7c	05 00				        .byte 5, 0
>be7e	89 be 17 98 20 98		        .word nt_chars, xt_one_plus, z_one_plus ; same as 1+
>be84	63 68 61 72 2b			        .text "char+"
.be89					nt_chars:
>be89	05 12				        .byte 5, AN+UF   ; deleted during compile
>be8b	96 be 42 86 45 86		        .word nt_cells, xt_chars, z_chars
>be91	63 68 61 72 73			        .text "chars"
.be96					nt_cells:
>be96	05 00				        .byte 5, 0
>be98	a3 be 44 a4 4b a4		        .word nt_cell_plus, xt_two_star, z_two_star  ; same as 2*
>be9e	63 65 6c 6c 73			        .text "cells"
.bea3					nt_cell_plus:
>bea3	05 10				        .byte 5, UF
>bea5	b0 be 1b 86 2a 86		        .word nt_here, xt_cell_plus, z_cell_plus
>beab	63 65 6c 6c 2b			        .text "cell+"
.beb0					nt_here:
>beb0	04 00				        .byte 4, 0
>beb2	bc be 6c 91 76 91		        .word nt_equal, xt_here, z_here
>beb8	68 65 72 65			        .text "here"
.bebc					nt_equal:
>bebc	01 10				        .byte 1, UF
>bebe	c5 be c8 8e e3 8e		        .word nt_not_equals, xt_equal, z_equal
>bec4	3d				        .text "="
.bec5					nt_not_equals:
>bec5	02 10				        .byte 2, UF
>bec7	cf be 4a 96 67 96		        .word nt_less_than, xt_not_equals, z_not_equals
>becd	3c 3e				        .text "<>"
.becf					nt_less_than:
>becf	01 10				        .byte 1, UF
>bed1	d8 be 62 93 76 93		        .word nt_u_less_than, xt_less_than, z_less_than
>bed7	3c				        .text "<"
.bed8					nt_u_less_than:
>bed8	02 10				        .byte 2, UF
>beda	e2 be 66 a5 7b a5		        .word nt_u_greater_than, xt_u_less_than, z_u_less_than
>bee0	75 3c				        .text "u<"
.bee2					nt_u_greater_than:
>bee2	02 10				        .byte 2, UF
>bee4	ec be 50 a5 65 a5		        .word nt_greater_than, xt_u_greater_than, z_u_greater_than
>beea	75 3e				        .text "u>"
.beec					nt_greater_than:
>beec	01 10				        .byte 1, UF
>beee	f5 be 57 91 6b 91		        .word nt_zero_equal, xt_greater_than, z_greater_than
>bef4	3e				        .text ">"
.bef5					nt_zero_equal:
>bef5	02 10				        .byte 2, UF
>bef7	ff be a3 a7 b6 a7		        .word nt_zero_unequal, xt_zero_equal, z_zero_equal
>befd	30 3d				        .text "0="
.beff					nt_zero_unequal:
>beff	03 10				        .byte 3, UF
>bf01	0a bf db a7 ec a7		        .word nt_zero_greater, xt_zero_unequal, z_zero_unequal
>bf07	30 3c 3e			        .text "0<>"
.bf0a					nt_zero_greater:
>bf0a	02 10				        .byte 2, UF
>bf0c	14 bf b7 a7 ca a7		        .word nt_zero_less, xt_zero_greater, z_zero_greater
>bf12	30 3e				        .text "0>"
.bf14					nt_zero_less:
>bf14	02 10				        .byte 2, UF
>bf16	1e bf cb a7 da a7		        .word nt_min, xt_zero_less, z_zero_less
>bf1c	30 3c				        .text "0<"
.bf1e					nt_min:
>bf1e	03 10				        .byte 3, UF
>bf20	29 bf 2e 95 49 95		        .word nt_max, xt_min, z_min
>bf26	6d 69 6e			        .text "min"
.bf29					nt_max:
>bf29	03 10				        .byte 3, UF
>bf2b	34 bf 12 95 2d 95		        .word nt_two_drop, xt_max, z_max
>bf31	6d 61 78			        .text "max"
.bf34					nt_two_drop:
>bf34	05 10				        .byte 5, UF
>bf36	41 bf a4 a3 ab a3		        .word nt_two_swap, xt_two_drop, z_two_drop
>bf3c	32 64 72 6f 70			        .text "2drop"
.bf41					nt_two_swap:
>bf41	05 10				        .byte 5, UF
>bf43	4e bf 72 a4 95 a4		        .word nt_two_over, xt_two_swap, z_two_swap
>bf49	32 73 77 61 70			        .text "2swap"
.bf4e					nt_two_over:
>bf4e	05 10				        .byte 5, UF
>bf50	5b bf e6 a3 fd a3		        .word nt_two_store, xt_two_over, z_two_over
>bf56	32 6f 76 65 72			        .text "2over"
.bf5b					nt_two_store:
>bf5b	02 10				        .byte 2, UF
>bf5d	65 bf 4c a4 71 a4		        .word nt_two_fetch, xt_two_store, z_two_store
>bf63	32 21				        .text "2!"
.bf65					nt_two_fetch:
>bf65	02 10				        .byte 2, UF
>bf67	6f bf c4 a3 e5 a3		        .word nt_two_variable, xt_two_fetch, z_two_fetch
>bf6d	32 40				        .text "2@"
.bf6f					nt_two_variable:
>bf6f	09 00				        .byte 9, 0
>bf71	80 bf e8 a4 f6 a4		        .word nt_two_constant, xt_two_variable, z_two_variable
>bf77	32 76 61 72 69 61 62 6c		        .text "2variable"
>bf7f	65
.bf80					nt_two_constant:
>bf80	09 10				        .byte 9, UF
>bf82	91 bf b6 a4 da a4		        .word nt_two_literal, xt_two_constant, z_two_constant
>bf88	32 63 6f 6e 73 74 61 6e		        .text "2constant"
>bf90	74
.bf91					nt_two_literal:
>bf91	08 14				        .byte 8, UF+IM
>bf93	a1 bf db a4 e7 a4		        .word nt_two_r_fetch, xt_two_literal, z_two_literal
>bf99	32 6c 69 74 65 72 61 6c		        .text "2literal"
.bfa1					nt_two_r_fetch:
>bfa1	03 09				        .byte 3, CO+NN          ; native is special case, leave NN for now
>bfa3	ac bf fe a3 1b a4		        .word nt_two_r_from, xt_two_r_fetch, z_two_r_fetch
>bfa9	32 72 40			        .text "2r@"
.bfac					nt_two_r_from:
>bfac	03 01				        .byte 3, CO             ; native is special case
>bfae	b7 bf 1c a4 38 a4		        .word nt_two_to_r, xt_two_r_from, z_two_r_from
>bfb4	32 72 3e			        .text "2r>"
.bfb7					nt_two_to_r:
>bfb7	03 11				        .byte 3, CO+UF          ; native is special case
>bfb9	c2 bf 96 a4 b5 a4		        .word nt_invert, xt_two_to_r, z_two_to_r
>bfbf	32 3e 72			        .text "2>r"
.bfc2					nt_invert:
>bfc2	06 10				        .byte 6, UF
>bfc4	d0 bf e5 92 f4 92		        .word nt_negate, xt_invert, z_invert
>bfca	69 6e 76 65 72 74		        .text "invert"
.bfd0					nt_negate:
>bfd0	06 10				        .byte 6, UF
>bfd2	de bf 1d 96 2d 96		        .word nt_dnegate, xt_negate, z_negate
>bfd8	6e 65 67 61 74 65		        .text "negate"
.bfde					nt_dnegate:
>bfde	07 10				        .byte 7, UF
>bfe0	ed bf 3b 8b 55 8b		        .word nt_c_comma, xt_dnegate, z_dnegate
>bfe6	64 6e 65 67 61 74 65		        .text "dnegate"
.bfed					nt_c_comma:
>bfed	02 10				        .byte 2, UF
>bfef	f7 bf fa 85 04 86		        .word nt_bounds, xt_c_comma, z_c_comma
>bff5	63 2c				        .text "c,"
.bff7					nt_bounds:
>bff7	06 10				        .byte 6, UF
>bff9	05 c0 78 85 90 85		        .word nt_spaces, xt_bounds, z_bounds
>bfff	62 6f 75 6e 64 73		        .text "bounds"
.c005					nt_spaces:
>c005	06 10				        .byte 6, UF
>c007	13 c0 1e a1 53 a1		        .word nt_bl, xt_spaces, z_spaces
>c00d	73 70 61 63 65 73		        .text "spaces"
.c013					nt_bl:
>c013	02 00				        .byte 2, 0
>c015	1d c0 94 83 9c 83		        .word nt_minus_trailing, xt_bl, z_bl
>c01b	62 6c				        .text "bl"
.c01d					nt_minus_trailing:
>c01d	09 10				        .byte 9, UF
>c01f	2e c0 76 95 b2 95		        .word nt_minus_leading, xt_minus_trailing, z_minus_trailing
>c025	2d 74 72 61 69 6c 69 6e		        .text "-trailing"
>c02d	67
.c02e					nt_minus_leading:
>c02e	08 10				        .byte 8, UF
>c030	3e c0 5d 95 75 95		        .word nt_slash_string, xt_minus_leading, z_minus_leading
>c036	2d 6c 65 61 64 69 6e 67		        .text "-leading"
.c03e					nt_slash_string:
>c03e	07 10				        .byte 7, UF
>c040	4d c0 13 a0 32 a0		        .word nt_refill, xt_slash_string, z_slash_string
>c046	2f 73 74 72 69 6e 67		        .text "/string"
.c04d					nt_refill:
>c04d	06 00				        .byte 6, 0
>c04f	5b c0 f2 9a 33 9b		        .word nt_accept, xt_refill, z_refill
>c055	72 65 66 69 6c 6c		        .text "refill"
.c05b					nt_accept:
>c05b	06 18				        .byte 6, UF+NN
>c05d	69 c0 4e 81 46 82		        .word nt_input_to_r, xt_accept, z_accept
>c063	61 63 63 65 70 74		        .text "accept"
.c069					nt_input_to_r:
>c069	07 08				        .byte 7, NN
>c06b	78 c0 5c 92 71 92		        .word nt_r_to_input, xt_input_to_r, z_input_to_r
>c071	69 6e 70 75 74 3e 72		        .text "input>r"
.c078					nt_r_to_input:
>c078	07 08				        .byte 7, NN
>c07a	87 c0 9d 9a b4 9a		        .word nt_unused, xt_r_to_input, z_r_to_input
>c080	72 3e 69 6e 70 75 74		        .text "r>input"
.c087					nt_unused:
>c087	06 00				        .byte 6, 0
>c089	95 c0 48 a6 57 a6		        .word nt_depth, xt_unused, z_unused
>c08f	75 6e 75 73 65 64		        .text "unused"
.c095					nt_depth:
>c095	05 00				        .byte 5, 0
>c097	a2 c0 f0 8a fe 8a		        .word nt_key, xt_depth, z_depth
>c09d	64 65 70 74 68			        .text "depth"
.c0a2					nt_key:
>c0a2	03 00				        .byte 3, 0
>c0a4	ad c0 28 93 31 93		        .word nt_allot, xt_key, z_key
>c0aa	6b 65 79			        .text "key"
.c0ad					nt_allot:
>c0ad	05 10				        .byte 5, UF
>c0af	ba c0 ab 82 13 83		        .word nt_create, xt_allot, z_allot
>c0b5	61 6c 6c 6f 74			        .text "allot"
.c0ba					nt_create:
>c0ba	06 00				        .byte 6, 0
>c0bc	c8 c0 63 89 37 8a		        .word nt_does, xt_create, z_create
>c0c2	63 72 65 61 74 65		        .text "create"
.c0c8					nt_does:
>c0c8	05 05				        .byte 5, CO+IM
>c0ca	d5 c0 ef 8b fd 8b		        .word nt_variable, xt_does, z_does
>c0d0	64 6f 65 73 3e			        .text "does>"
.c0d5					nt_variable:
>c0d5	08 00				        .byte 8, 0
>c0d7	e5 c0 6c a6 84 a6		        .word nt_constant, xt_variable, z_variable
>c0dd	76 61 72 69 61 62 6c 65		        .text "variable"
.c0e5					nt_constant:
>c0e5	08 10				        .byte 8, UF
>c0e7	f5 c0 0b 89 48 89		        .word nt_value, xt_constant, z_constant
>c0ed	63 6f 6e 73 74 61 6e 74		        .text "constant"
.c0f5					nt_value:
>c0f5	05 10				        .byte 5, UF
>c0f7	02 c1 0b 89 48 89		        .word nt_to, xt_constant, z_constant
>c0fd	76 61 6c 75 65			        .text "value"
.c102					nt_to:
>c102	02 0c				        .byte 2, NN+IM
>c104	0c c1 25 a2 80 a2		        .word nt_s_to_d, xt_to, z_to
>c10a	74 6f				        .text "to"
.c10c					nt_s_to_d:
>c10c	03 10				        .byte 3, UF
>c10e	17 c1 a6 9e b7 9e		        .word nt_d_to_s, xt_s_to_d, z_s_to_d
>c114	73 3e 64			        .text "s>d"
.c117					nt_d_to_s:
>c117	03 10				        .byte 3, UF
>c119	22 c1 7a 8a 7f 8a		        .word nt_d_minus, xt_d_to_s, z_d_to_s
>c11f	64 3e 73			        .text "d>s"
.c122					nt_d_minus:
>c122	02 10				        .byte 2, UF
>c124	2c c1 38 8a 58 8a		        .word nt_d_plus, xt_d_minus, z_d_minus
>c12a	64 2d				        .text "d-"
.c12c					nt_d_plus:
>c12c	02 10				        .byte 2, UF
>c12e	36 c1 59 8a 79 8a		        .word nt_erase, xt_d_plus, z_d_plus
>c134	64 2b				        .text "d+"
.c136					nt_erase:
>c136	05 00				        .byte 5, 0      ; underflow checked by FILL
>c138	43 c1 ee 8e 36 8f		        .word nt_blank, xt_erase, z_erase
>c13e	65 72 61 73 65			        .text "erase"
.c143					nt_blank:
>c143	05 00				        .byte 5, 0     ; underflow checked by FILL
>c145	50 c1 e4 8e 36 8f		        .word nt_fill, xt_blank, z_blank
>c14b	62 6c 61 6e 6b			        .text "blank"
.c150					nt_fill:
>c150	04 10				        .byte 4, UF
>c152	5c c1 f4 8e 36 8f		        .word nt_find_name, xt_fill, z_fill
>c158	66 69 6c 6c			        .text "fill"
.c15c					nt_find_name:
>c15c	09 10				        .byte 9, UF
>c15e	6d c1 d5 8f 80 90		        .word nt_tick, xt_find_name, z_find_name
>c164	66 69 6e 64 2d 6e 61 6d		        .text "find-name"
>c16c	65
.c16d					nt_tick:
>c16d	01 00				        .byte 1, 0
>c16f	76 c1 05 a2 24 a2		        .word nt_bracket_tick, xt_tick, z_tick
>c175	27				        .text "'"
.c176					nt_bracket_tick:
>c176	03 05				        .byte 3, CO+IM
>c178	81 c1 98 85 9e 85		        .word nt_name_to_int, xt_bracket_tick, z_bracket_tick
>c17e	5b 27 5d			        .text "[']"
.c181					nt_name_to_int:
>c181	08 10				        .byte 8, UF
>c183	91 c1 db 95 f7 95		        .word nt_int_to_name, xt_name_to_int, z_name_to_int
>c189	6e 61 6d 65 3e 69 6e 74		        .text "name>int"
.c191					nt_int_to_name:
>c191	08 10				        .byte 8, UF
>c193	a1 c1 72 92 e4 92		        .word nt_name_to_string, xt_int_to_name, z_int_to_name
>c199	69 6e 74 3e 6e 61 6d 65		        .text "int>name"
.c1a1					nt_name_to_string:
>c1a1	0b 10				        .byte 11, UF
>c1a3	b4 c1 f8 95 11 96		        .word nt_to_body, xt_name_to_string, z_name_to_string
>c1a9	6e 61 6d 65 3e 73 74 72		        .text "name>string"
>c1b1	69 6e 67
.c1b4					nt_to_body:
>c1b4	05 10				        .byte 5, UF
>c1b6	c1 c1 81 a2 a5 a2		        .word nt_defer, xt_to_body, z_to_body
>c1bc	3e 62 6f 64 79			        .text ">body"
.c1c1					nt_defer:
>c1c1	05 00				        .byte 5, 0
>c1c3	ce c1 a6 8a d8 8a		        .word nt_latestxt, xt_defer, z_defer
>c1c9	64 65 66 65 72			        .text "defer"
.c1ce					nt_latestxt:
>c1ce	08 00				        .byte 8, 0
>c1d0	de c1 43 93 49 93		        .word nt_latestnt, xt_latestxt, z_latestxt
>c1d6	6c 61 74 65 73 74 78 74		        .text "latestxt"
.c1de					nt_latestnt:
>c1de	08 00				        .byte 8, 0
>c1e0	ee c1 35 93 42 93		        .word nt_parse_name, xt_latestnt, z_latestnt
>c1e6	6c 61 74 65 73 74 6e 74		        .text "latestnt"
.c1ee					nt_parse_name:
>c1ee	0a 08				        .byte 10, NN
>c1f0	00 c2 d9 98 cb 99		        .word nt_parse, xt_parse_name, z_parse_name
>c1f6	70 61 72 73 65 2d 6e 61		        .text "parse-name"
>c1fe	6d 65
.c200					nt_parse:
>c200	05 10				        .byte 5, UF
>c202	0d c2 34 99 cb 99		        .word nt_execute_parsing, xt_parse, z_parse
>c208	70 61 72 73 65			        .text "parse"
.c20d					nt_execute_parsing:
>c20d	0f 10				        .byte 15, UF
>c20f	24 c2 4b 8f 71 8f		        .word nt_source, xt_execute_parsing, z_execute_parsing
>c215	65 78 65 63 75 74 65 2d		        .text "execute-parsing"
>c21d	70 61 72 73 69 6e 67
.c224					nt_source:
>c224	06 00				        .byte 6, 0
>c226	32 c2 f8 a0 0c a1		        .word nt_source_id, xt_source, z_source
>c22c	73 6f 75 72 63 65		        .text "source"
.c232					nt_source_id:
>c232	09 00				        .byte 9, 0
>c234	43 c2 0d a1 17 a1		        .word nt_colon, xt_source_id, z_source_id
>c23a	73 6f 75 72 63 65 2d 69		        .text "source-id"
>c242	64
.c243					nt_colon:
>c243	01 00				        .byte 1, 0
>c245	4c c2 09 87 4b 87		        .word nt_semicolon, xt_colon, z_colon
>c24b	3a				        .text ":"
.c24c					nt_semicolon:
>c24c	01 05				        .byte 1, CO+IM
>c24e	55 c2 82 9f e0 9f		        .word nt_colon_noname, xt_semicolon, z_semicolon
>c254	3b				        .text ";"
.c255					nt_colon_noname:
>c255	07 00				        .byte 7, 0
>c257	64 c2 4c 87 67 87		        .word nt_compile_comma, xt_colon_noname, z_colon_noname
>c25d	3a 6e 6f 6e 61 6d 65		        .text ":noname"
.c264					nt_compile_comma:
>c264	08 18				        .byte 8, UF+NN
>c266	74 c2 e7 87 fe 88		        .word nt_left_bracket, xt_compile_comma, z_compile_comma
>c26c	63 6f 6d 70 69 6c 65 2c		        .text "compile,"
.c274					nt_left_bracket:
>c274	01 05				        .byte 1, IM+CO
>c276	7d c2 4f 93 53 93		        .word nt_right_bracket, xt_left_bracket, z_left_bracket
>c27c	5b				        .text "["
.c27d					nt_right_bracket:
>c27d	01 04				        .byte 1, IM
>c27f	86 c2 41 9b 47 9b		        .word nt_literal, xt_right_bracket, z_right_bracket
>c285	5d				        .text "]"
.c286					nt_literal:
>c286	07 15				        .byte 7, IM+CO+UF
>c288	95 c2 84 93 91 93		        .word nt_sliteral, xt_literal, z_literal
>c28e	6c 69 74 65 72 61 6c		        .text "literal"
.c295					nt_sliteral:
>c295	08 15				        .byte 8, CO+IM+UF
>c297	a5 c2 33 a0 a2 a0		        .word nt_dot_quote, xt_sliteral, z_sliteral
>c29d	73 6c 69 74 65 72 61 6c		        .text "sliteral"
.c2a5					nt_dot_quote:
>c2a5	02 05				        .byte 2, CO+IM
>c2a7	af c2 61 8c 6b 8c		        .word nt_s_quote, xt_dot_quote, z_dot_quote
>c2ad	2e 22				        .text ".", $22
.c2af					nt_s_quote:
>c2af	02 0c				        .byte 2, IM+NN
>c2b1	b9 c2 49 9d a5 9e		        .word nt_s_backslash_quote, xt_s_quote, z_s_quote
>c2b7	73 22				        .text "s", $22
.c2b9					nt_s_backslash_quote:
>c2b9	03 04				        .byte 3, IM
>c2bb	c4 c2 81 9b 8a 9b		        .word nt_postpone, xt_s_backslash_quote, z_s_backslash_quote
>c2c1	73 5c 22			        .text "s", $5C, $22
.c2c4					nt_postpone:
>c2c4	08 05				        .byte 8, IM+CO
>c2c6	d4 c2 10 9a 4e 9a		        .word nt_immediate, xt_postpone, z_postpone
>c2cc	70 6f 73 74 70 6f 6e 65		        .text "postpone"
.c2d4					nt_immediate:
>c2d4	09 00				        .byte 9, 0
>c2d6	e5 c2 45 92 50 92		        .word nt_compile_only, xt_immediate, z_immediate
>c2dc	69 6d 6d 65 64 69 61 74		        .text "immediate"
>c2e4	65
.c2e5					nt_compile_only:
>c2e5	0c 00				        .byte 12, 0
>c2e7	f9 c2 ff 88 0a 89		        .word nt_never_native, xt_compile_only, z_compile_only
>c2ed	63 6f 6d 70 69 6c 65 2d		        .text "compile-only"
>c2f5	6f 6e 6c 79
.c2f9					nt_never_native:
>c2f9	0c 00				        .byte 12, 0
>c2fb	0d c3 2e 96 3b 96		        .word nt_always_native, xt_never_native, z_never_native
>c301	6e 65 76 65 72 2d 6e 61		        .text "never-native"
>c309	74 69 76 65
.c30d					nt_always_native:
>c30d	0d 00				        .byte 13, 0
>c30f	22 c3 30 83 3d 83		        .word nt_allow_native, xt_always_native, z_always_native
>c315	61 6c 77 61 79 73 2d 6e		        .text "always-native"
>c31d	61 74 69 76 65
.c322					nt_allow_native:
>c322	0c 00				        .byte 12, 0
>c324	36 c3 14 83 1f 83		        .word nt_nc_limit, xt_allow_native, z_allow_native
>c32a	61 6c 6c 6f 77 2d 6e 61		        .text "allow-native"
>c332	74 69 76 65
.c336					nt_nc_limit:
>c336	08 00				        .byte 8, 0
>c338	46 c3 12 96 1c 96		        .word nt_strip_underflow, xt_nc_limit, z_nc_limit
>c33e	6e 63 2d 6c 69 6d 69 74		        .text "nc-limit"
.c346					nt_strip_underflow:
>c346	0f 00				        .byte 15, 0
>c348	5d c3 97 a1 a1 a1		        .word nt_abort, xt_strip_underflow, z_strip_underflow
>c34e	73 74 72 69 70 2d 75 6e		        .text "strip-underflow"
>c356	64 65 72 66 6c 6f 77
.c35d					nt_abort:
>c35d	05 00				        .byte 5, 0
>c35f	6a c3 81 80 c5 80		        .word nt_abort_quote, xt_abort, z_abort
>c365	61 62 6f 72 74			        .text "abort"
.c36a					nt_abort_quote:
>c36a	06 0d				        .byte 6, CO+IM+NN
>c36c	78 c3 19 81 23 81		        .word nt_do, xt_abort_quote, z_abort_quote
>c372	61 62 6f 72 74 22		        .text "abort", $22
.c378					nt_do:
>c378	02 0d				        .byte 2, CO+IM+NN
>c37a	82 c3 5c 8b b6 8b		        .word nt_question_do, xt_do, z_do
>c380	64 6f				        .text "do"
.c382					nt_question_do:
>c382	03 0d				        .byte 3, CO+IM+NN
>c384	8d c3 56 8b b6 8b		        .word nt_i, xt_question_do, z_question_do
>c38a	3f 64 6f			        .text "?do"
.c38d					nt_i:
>c38d	01 03				        .byte 1, AN+CO
>c38f	96 c3 e3 91 fc 91		        .word nt_j, xt_i, z_i
>c395	69				        .text "i"
.c396					nt_j:
>c396	01 03				        .byte 1, AN+CO
>c398	9f c3 0e 93 27 93		        .word nt_loop, xt_j, z_j
>c39e	6a				        .text "j"
.c39f					nt_loop:
>c39f	04 05				        .byte 4, CO+IM
>c3a1	ab c3 f5 93 62 94		        .word nt_plus_loop, xt_loop, z_loop
>c3a7	6c 6f 6f 70			        .text "loop"
.c3ab					nt_plus_loop:
>c3ab	05 05				        .byte 5, CO+IM
>c3ad	b8 c3 fc 93 62 94		        .word nt_exit, xt_plus_loop, z_plus_loop
>c3b3	2b 6c 6f 6f 70			        .text "+loop"
.c3b8					nt_exit:
>c3b8	04 03				        .byte 4, AN+CO
>c3ba	c4 c3 72 8f 73 8f		        .word nt_unloop, xt_exit, z_exit
>c3c0	65 78 69 74			        .text "exit"
.c3c4					nt_unloop:
>c3c4	06 03				        .byte 6, AN+CO
>c3c6	d2 c3 36 a6 3c a6		        .word nt_leave, xt_unloop, z_unloop
>c3cc	75 6e 6c 6f 6f 70		        .text "unloop"
.c3d2					nt_leave:
>c3d2	05 03				        .byte 5, AN+CO
>c3d4	df c3 4a 93 4f 93		        .word nt_recurse, xt_leave, z_leave
>c3da	6c 65 61 76 65			        .text "leave"
.c3df					nt_recurse:
>c3df	07 0d				        .byte 7, CO+IM+NN
>c3e1	ee c3 b5 9a f1 9a		        .word nt_quit, xt_recurse, z_recurse
>c3e7	72 65 63 75 72 73 65		        .text "recurse"
.c3ee					nt_quit:
>c3ee	04 00				        .byte 4, 0
>c3f0	fa c3 83 80 c5 80		        .word nt_begin, xt_quit, z_quit
>c3f6	71 75 69 74			        .text "quit"
.c3fa					nt_begin:
>c3fa	05 07				        .byte 5, AN+CO+IM
>c3fc	07 c4 8a 83 8d 83		        .word nt_again, xt_begin, z_begin
>c402	62 65 67 69 6e			        .text "begin"
.c407					nt_again:
>c407	05 17				        .byte 5, AN+CO+IM+UF
>c409	14 c4 89 82 a9 82		        .word nt_state, xt_again, z_again
>c40f	61 67 61 69 6e			        .text "again"
.c414					nt_state:
>c414	05 00				        .byte 5, 0
>c416	21 c4 76 a1 80 a1		        .word nt_evaluate, xt_state, z_state
>c41c	73 74 61 74 65			        .text "state"
.c421					nt_evaluate:
>c421	08 10				        .byte 8, UF
>c423	31 c4 cf 90 22 91		        .word nt_base, xt_evaluate, z_evaluate
>c429	65 76 61 6c 75 61 74 65		        .text "evaluate"
.c431					nt_base:
>c431	04 00				        .byte 4, 0
>c433	3d c4 81 83 89 83		        .word nt_digit_question, xt_base, z_base
>c439	62 61 73 65			        .text "base"
.c43d					nt_digit_question:
>c43d	06 10				        .byte 6, UF
>c43f	4b c4 ff 8a 33 8b		        .word nt_number, xt_digit_question, z_digit_question
>c445	64 69 67 69 74 3f		        .text "digit?"
.c44b					nt_number:
>c44b	06 10				        .byte 6, UF
>c44d	59 c4 84 96 80 97		        .word nt_to_number, xt_number, z_number
>c453	6e 75 6d 62 65 72		        .text "number"
.c459					nt_to_number:
>c459	07 10				        .byte 7, UF
>c45b	68 c4 b1 a2 50 a3		        .word nt_hex, xt_to_number, z_to_number
>c461	3e 6e 75 6d 62 65 72		        .text ">number"
.c468					nt_hex:
>c468	03 00				        .byte 3, 0
>c46a	73 c4 77 91 7d 91		        .word nt_decimal, xt_hex, z_hex
>c470	68 65 78			        .text "hex"
.c473					nt_decimal:
>c473	07 00				        .byte 7, 0
>c475	82 c4 9f 8a a5 8a		        .word nt_count, xt_decimal, z_decimal
>c47b	64 65 63 69 6d 61 6c		        .text "decimal"
.c482					nt_count:
>c482	05 10				        .byte 5, UF
>c484	8f c4 49 89 5c 89		        .word nt_m_star, xt_count, z_count
>c48a	63 6f 75 6e 74			        .text "count"
.c48f					nt_m_star:
>c48f	02 10				        .byte 2, UF
>c491	99 c4 88 94 a2 94		        .word nt_um_star, xt_m_star, z_m_star
>c497	6d 2a				        .text "m*"
.c499					nt_um_star:
>c499	03 10				        .byte 3, UF
>c49b	a4 c4 f0 a5 35 a6		        .word nt_star, xt_um_star, z_um_star
>c4a1	75 6d 2a			        .text "um*"
.c4a4					nt_star:
>c4a4	01 10				        .byte 1, UF
>c4a6	ad c4 54 a1 5c a1		        .word nt_um_slash_mod, xt_star, z_star
>c4ac	2a				        .text "*"
.c4ad					nt_um_slash_mod:
>c4ad	06 10				        .byte 6, UF
>c4af	bb c4 ae a5 ef a5		        .word nt_sm_slash_rem, xt_um_slash_mod, z_um_slash_mod
>c4b5	75 6d 2f 6d 6f 64		        .text "um/mod"
.c4bb					nt_sm_slash_rem:
>c4bb	06 10				        .byte 6, UF
>c4bd	c9 c4 cf a0 f7 a0		        .word nt_fm_slash_mod, xt_sm_slash_rem, z_sm_slash_rem
>c4c3	73 6d 2f 72 65 6d		        .text "sm/rem"
.c4c9					nt_fm_slash_mod:
>c4c9	06 10				        .byte 6, UF
>c4cb	d7 c4 8b 90 c1 90		        .word nt_slash, xt_fm_slash_mod, z_fm_slash_mod
>c4d1	66 6d 2f 6d 6f 64		        .text "fm/mod"
.c4d7					nt_slash:
>c4d7	01 10				        .byte 1, UF
>c4d9	e0 c4 f6 9f 12 a0		        .word nt_slash_mod, xt_slash, z_slash
>c4df	2f				        .text "/"
.c4e0					nt_slash_mod:
>c4e0	04 10				        .byte 4, UF
>c4e2	ec c4 fb 9f 12 a0		        .word nt_mod, xt_slash_mod, z_slash_mod
>c4e8	2f 6d 6f 64			        .text "/mod"
.c4ec					nt_mod:
>c4ec	03 10				        .byte 3, UF
>c4ee	f7 c4 b3 95 bb 95		        .word nt_star_slash_mod, xt_mod, z_mod
>c4f4	6d 6f 64			        .text "mod"
.c4f7					nt_star_slash_mod:
>c4f7	05 10				        .byte 5, UF
>c4f9	04 c5 66 a1 75 a1		        .word nt_star_slash, xt_star_slash_mod, z_star_slash_mod
>c4ff	2a 2f 6d 6f 64			        .text "*/mod"
.c504					nt_star_slash:
>c504	02 10				        .byte 2, UF
>c506	0e c5 5d a1 65 a1		        .word nt_backslash, xt_star_slash, z_star_slash
>c50c	2a 2f				        .text "*/"
.c50e					nt_backslash:
>c50e	01 04				        .byte 1, IM
>c510	17 c5 78 83 80 83		        .word nt_move, xt_backslash, z_backslash
>c516	5c				        .byte $5c
.c517					nt_move:
>c517	04 18				        .byte 4, NN+UF
>c519	23 c5 bc 95 da 95		        .word nt_cmove_up, xt_move, z_move
>c51f	6d 6f 76 65			        .text "move"
.c523					nt_cmove_up:
>c523	06 10				        .byte 6, UF
>c525	31 c5 ce 86 08 87		        .word nt_cmove, xt_cmove_up, z_cmove_up
>c52b	63 6d 6f 76 65 3e		        .text "cmove>"
.c531					nt_cmove:
>c531	05 10				        .byte 5, UF
>c533	3e c5 93 86 cd 86		        .word nt_pad, xt_cmove, z_cmove
>c539	63 6d 6f 76 65			        .text "cmove"
.c53e					nt_pad:
>c53e	03 00				        .byte 3, 0
>c540	49 c5 9b 98 aa 98		        .word nt_cleave, xt_pad, z_pad
>c546	70 61 64			        .text "pad"
.c549					nt_cleave:
>c549	06 10				        .byte 6, UF
>c54b	57 c5 46 86 92 86		        .word nt_hexstore, xt_cleave, z_cleave
>c551	63 6c 65 61 76 65		        .text "cleave"
.c557					nt_hexstore:
>c557	08 10				        .byte 8, UF
>c559	67 c5 7e 91 d0 91		        .word nt_within, xt_hexstore, z_hexstore
>c55f	68 65 78 73 74 6f 72 65		        .text "hexstore"
.c567					nt_within:
>c567	06 10				        .byte 6, UF
>c569	75 c5 99 a6 ae a6		        .word nt_to_in, xt_within, z_within
>c56f	77 69 74 68 69 6e		        .text "within"
.c575					nt_to_in:
>c575	03 00				        .byte 3, 0
>c577	80 c5 a6 a2 b0 a2		        .word nt_less_number_sign, xt_to_in, z_to_in
>c57d	3e 69 6e			        .text ">in"
.c580					nt_less_number_sign:
>c580	02 00				        .byte 2, 0
>c582	8a c5 54 93 61 93		        .word nt_number_sign, xt_less_number_sign, z_less_number_sign
>c588	3c 23				        .text "<#"
.c58a					nt_number_sign:
>c58a	01 10				        .byte 1, UF
>c58c	93 c5 81 97 b5 97		        .word nt_number_sign_s, xt_number_sign, z_number_sign
>c592	23				        .text "#"
.c593					nt_number_sign_s:
>c593	02 10				        .byte 2, UF
>c595	9d c5 d8 97 e8 97		        .word nt_number_sign_greater, xt_number_sign_s, z_number_sign_s
>c59b	23 73				        .text "#s"
.c59d					nt_number_sign_greater:
>c59d	02 10				        .byte 2, UF
>c59f	a7 c5 b6 97 d7 97		        .word nt_hold, xt_number_sign_greater, z_number_sign_greater
>c5a5	23 3e				        .text "#>"
.c5a7					nt_hold:
>c5a7	04 10				        .byte 4, UF
>c5a9	b3 c5 d1 91 e2 91		        .word nt_sign, xt_hold, z_hold
>c5af	68 6f 6c 64			        .text "hold"
.c5b3					nt_sign:
>c5b3	04 10				        .byte 4, UF
>c5b5	bf c5 e1 9f f5 9f		        .word nt_output, xt_sign, z_sign
>c5bb	73 69 67 6e			        .text "sign"
.c5bf					nt_output:
>c5bf	06 00				        .byte 6, 0
>c5c1	cd c5 82 98 8c 98		        .word nt_input, xt_output, z_output
>c5c7	6f 75 74 70 75 74		        .text "output"
.c5cd					nt_input:
>c5cd	05 00				        .byte 5, 0
>c5cf	da c5 51 92 5b 92		        .word nt_cr, xt_input, z_input
>c5d5	69 6e 70 75 74			        .text "input"
.c5da					nt_cr:
>c5da	02 00				        .byte 2, 0
>c5dc	e4 c5 5d 89 62 89		        .word nt_page, xt_cr, z_cr
>c5e2	63 72				        .text "cr"
.c5e4					nt_page:
>c5e4	04 00				        .byte 4, 0
>c5e6	f0 c5 ab 98 c8 98		        .word nt_at_xy, xt_page, z_page
>c5ec	70 61 67 65			        .text "page"
.c5f0					nt_at_xy:
>c5f0	05 10				        .byte 5, UF
>c5f2	fd c5 50 83 77 83		        .word nt_marker, xt_at_xy, z_at_xy
>c5f8	61 74 2d 78 79			        .text "at-xy"
.c5fd					nt_marker:
>c5fd	06 04				        .byte 6, IM
>c5ff	0b c6 a3 94 e0 94		        .word nt_words, xt_marker, z_marker
>c605	6d 61 72 6b 65 72		        .text "marker"
.c60b					nt_words:
>c60b	05 00				        .byte 5, 0
>c60d	18 c6 0c a7 68 a7		        .word nt_wordsize, xt_words, z_words
>c613	77 6f 72 64 73			        .text "words"
.c618					nt_wordsize:
>c618	08 10				        .byte 8, UF
>c61a	28 c6 69 a7 89 a7		        .word nt_aligned, xt_wordsize, z_wordsize
>c620	77 6f 72 64 73 69 7a 65		        .text "wordsize"
.c628					nt_aligned:
>c628	07 00				        .byte 7, 0
>c62a	37 c6 aa 82 aa 82		        .word nt_align, xt_align, z_align
>c630	61 6c 69 67 6e 65 64		        .text "aligned"
.c637					nt_align:
>c637	05 00				        .byte 5, 0
>c639	44 c6 aa 82 aa 82		        .word nt_bell, xt_align, z_align
>c63f	61 6c 69 67 6e			        .text "align"
.c644					nt_bell:
>c644	04 00				        .byte 4, 0
>c646	50 c6 8e 83 93 83		        .word nt_dump, xt_bell, z_bell
>c64c	62 65 6c 6c			        .text "bell"
.c650					nt_dump:
>c650	04 10				        .byte 4, UF
>c652	5c c6 2e 8d 94 8d		        .word nt_dot_s, xt_dump, z_dump
>c658	64 75 6d 70			        .text "dump"
.c65c					nt_dot_s:
>c65c	02 00				        .byte 2, 0
>c65e	66 c6 9a 8c dd 8c		        .word nt_disasm, xt_dot_s, z_dot_s
>c664	2e 73				        .text ".s"
.c666					nt_disasm:
>c666	06 10				        .byte 6, UF
>c668	74 c6 34 8b 3a 8b		        .word nt_compare, xt_disasm, z_disasm
>c66e	64 69 73 61 73 6d		        .text "disasm"
.c674					nt_compare:
>c674	07 10				        .byte 7, UF
>c676	83 c6 82 87 e6 87		        .word nt_search, xt_compare, z_compare
>c67c	63 6f 6d 70 61 72 65		        .text "compare"
.c683					nt_search:
>c683	06 18				        .byte 6, UF+NN
>c685	91 c6 e3 9e 81 9f		        .word +, xt_search, z_search
>c68b	73 65 61 72 63 68		        .text "search"
.c691					+
.c691					nt_environment_q:
>c691	0c 10				        .byte 12, UF
>c693	a5 c6 0f 8e 8b 8e		        .word +, xt_environment_q, z_environment_q
>c699	65 6e 76 69 72 6f 6e 6d		        .text "environment?"
>c6a1	65 6e 74 3f
.c6a5					+
.c6a5					nt_find:
>c6a5	04 10				        .byte 4, UF
>c6a7	b1 c6 8d 8f d4 8f		        .word nt_word, xt_find, z_find
>c6ad	66 69 6e 64			        .text "find"
.c6b1					nt_word:
>c6b1	04 10				        .byte 4, UF
>c6b3	bd c6 af a6 f4 a6		        .word nt_paren, xt_word, z_word
>c6b9	77 6f 72 64			        .text "word"
.c6bd					nt_paren:
>c6bd	01 04				        .byte 1, IM
>c6bf	c6 c6 c9 98 d8 98		        .word nt_dot_paren, xt_paren, z_paren
>c6c5	28				        .text "("
.c6c6					nt_dot_paren:
>c6c6	02 04				        .byte 2, IM
>c6c8	d0 c6 52 8c 60 8c		        .word nt_if, xt_dot_paren, z_dot_paren
>c6ce	2e 28				        .text ".("
.c6d0					nt_if:
>c6d0	02 0d				        .byte 2, IM+CO+NN
>c6d2	da c6 fd 91 0d 92		        .word nt_then, xt_if, z_if
>c6d8	69 66				        .text "if"
.c6da					nt_then:
>c6da	04 0d				        .byte 4, IM+CO+NN
>c6dc	e6 c6 b6 a1 bf a1		        .word nt_else, xt_then, z_then
>c6e2	74 68 65 6e			        .text "then"
.c6e6					nt_else:
>c6e6	04 0d				        .byte 4, IM+CO+NN
>c6e8	f2 c6 bb 8d d4 8d		        .word nt_repeat, xt_else, z_else
>c6ee	65 6c 73 65			        .text "else"
.c6f2					nt_repeat:
>c6f2	06 0d				        .byte 6, IM+CO+NN
>c6f4	00 c7 34 9b 40 9b		        .word nt_until, xt_repeat, z_repeat
>c6fa	72 65 70 65 61 74		        .text "repeat"
.c700					nt_until:
>c700	05 0d				        .byte 5, IM+CO+NN
>c702	0d c7 3d a6 47 a6		        .word nt_while, xt_until, z_until
>c708	75 6e 74 69 6c			        .text "until"
.c70d					nt_while:
>c70d	05 0d				        .byte 5, IM+CO+NN
>c70f	1a c7 85 a6 98 a6		        .word nt_case, xt_while, z_while
>c715	77 68 69 6c 65			        .text "while"
.c71a					nt_case:
>c71a	04 0d				        .byte 4, IM+CO+NN
>c71c	26 c7 9c a7 a2 a7		        .word nt_of, xt_case, z_case    ; shares code with ZERO
>c722	63 61 73 65			        .text "case"
.c726					nt_of:
>c726	02 0d				        .byte 2, IM+CO+NN
>c728	30 c7 e9 97 01 98		        .word nt_endof, xt_of, z_of
>c72e	6f 66				        .text "of"
.c730					nt_endof:
>c730	05 0d				        .byte 5, IM+CO+NN
>c732	3d c7 bb 8d d4 8d		        .word nt_endcase, xt_endof, z_endof ; shares code with ELSE
>c738	65 6e 64 6f 66			        .text "endof"
.c73d					nt_endcase:
>c73d	07 0d				        .byte 7, IM+CO+NN
>c73f	4c c7 fa 8d 0e 8e		        .word nt_defer_fetch, xt_endcase, z_endcase
>c745	65 6e 64 63 61 73 65		        .text "endcase"
.c74c					nt_defer_fetch:
>c74c	06 00				        .byte 6, 0
>c74e	5a c7 d9 8a df 8a		        .word nt_defer_store, xt_defer_fetch, z_defer_fetch
>c754	64 65 66 65 72 40		        .text "defer@"
.c75a					nt_defer_store:
>c75a	06 00				        .byte 6, 0
>c75c	68 c7 e0 8a e6 8a		        .word nt_is, xt_defer_store, z_defer_store
>c762	64 65 66 65 72 21		        .text "defer!"
.c768					nt_is:
>c768	02 04				        .byte 2, IM
>c76a	72 c7 f5 92 0d 93		        .word nt_action_of, xt_is, z_is
>c770	69 73				        .text "is"
.c772					nt_action_of:
>c772	09 04				        .byte 9, IM
>c774	83 c7 70 82 88 82		        .word nt_useraddr, xt_action_of, z_action_of
>c77a	61 63 74 69 6f 6e 2d 6f		        .text "action-of"
>c782	66
.c783					nt_useraddr:
>c783	08 00				        .byte 8, 0
>c785	93 c7 61 a6 6b a6		        .word nt_buffer_colon, xt_useraddr, z_useraddr
>c78b	75 73 65 72 61 64 64 72		        .text "useraddr"
.c793					nt_buffer_colon:
>c793	07 00				        .byte 7, 0
>c795	a2 c7 e0 85 e6 85		        .word +, xt_buffer_colon, z_buffer_colon
>c79b	62 75 66 66 65 72 3a		        .text "buffer:"
.c7a2					+
.c7a2					nt_buffstatus:
>c7a2	0a 00				        .byte 10, 0
>c7a4	b4 c7 e7 85 f6 85		        .word nt_buffblocknum, xt_buffstatus, z_buffstatus
>c7aa	62 75 66 66 73 74 61 74		        .text "buffstatus"
>c7b2	75 73
.c7b4					nt_buffblocknum:
>c7b4	0c 00				        .byte 12, 0
>c7b6	c8 c7 9f 85 ae 85		        .word nt_blkbuffer, xt_buffblocknum, z_buffblocknum
>c7bc	62 75 66 66 62 6c 6f 63		        .text "buffblocknum"
>c7c4	6b 6e 75 6d
.c7c8					nt_blkbuffer:
>c7c8	09 00				        .byte 9, 0
>c7ca	d9 c7 ad 83 ba 83		        .word nt_scr, xt_blkbuffer, z_blkbuffer
>c7d0	62 6c 6b 62 75 66 66 65		        .text "blkbuffer"
>c7d8	72
.c7d9					nt_scr:
>c7d9	03 00				        .byte 3, 0
>c7db	e4 c7 d3 9e e2 9e		        .word nt_blk, xt_scr, z_scr
>c7e1	73 63 72			        .text "scr"
.c7e4					nt_blk:
>c7e4	03 00				        .byte 3, 0
>c7e6	ef c7 9d 83 ac 83		        .word nt_block_write, xt_blk, z_blk
>c7ec	62 6c 6b			        .text "blk"
.c7ef					nt_block_write:
>c7ef	0b 08				        .byte 11, NN ; Deferred words need the HC (Code Field) flag.
>c7f1	02 c8 5a 85 68 85		        .word nt_block_write_vector, xt_block_write, z_block_write
>c7f7	62 6c 6f 63 6b 2d 77 72		        .text "block-write"
>c7ff	69 74 65
.c802					nt_block_write_vector:
>c802	12 08				        .byte 18, NN ; Deferred words need the HC (Code Field) flag.
>c804	1c c8 68 85 77 85		        .word nt_block_read, xt_block_write_vector, z_block_write_vector
>c80a	62 6c 6f 63 6b 2d 77 72		        .text "block-write-vector"
>c812	69 74 65 2d 76 65 63 74 6f 72
.c81c					nt_block_read:
>c81c	0a 28				        .byte 10, HC+NN ; Deferred words need the HC (Code Field) flag.
>c81e	2e c8 37 85 45 85		        .word nt_block_read_vector, xt_block_read, z_block_read
>c824	62 6c 6f 63 6b 2d 72 65		        .text "block-read"
>c82c	61 64
.c82e					nt_block_read_vector:
>c82e	11 28				        .byte 17, HC+NN ; Deferred words need the HC (Code Field) flag.
>c830	47 c8 45 85 54 85		        .word nt_save_buffers, xt_block_read_vector, z_block_read_vector
>c836	62 6c 6f 63 6b 2d 72 65		        .text "block-read-vector"
>c83e	61 64 2d 76 65 63 74 6f 72
.c847					nt_save_buffers:
>c847	0c 00				        .byte 12, 0
>c849	5b c8 b8 9e d2 9e		        .word nt_block, xt_save_buffers, z_save_buffers
>c84f	73 61 76 65 2d 62 75 66		        .text "save-buffers"
>c857	66 65 72 73
.c85b					nt_block:
>c85b	05 00				        .byte 5, 0
>c85d	68 c8 bb 83 0d 84		        .word nt_update, xt_block, z_block
>c863	62 6c 6f 63 6b			        .text "block"
.c868					nt_update:
>c868	06 00				        .byte 6, 0
>c86a	76 c8 58 a6 60 a6		        .word nt_buffer, xt_update, z_update
>c870	75 70 64 61 74 65		        .text "update"
.c876					nt_buffer:
>c876	06 00				        .byte 6, 0
>c878	84 c8 af 85 df 85		        .word nt_empty_buffers, xt_buffer, z_buffer
>c87e	62 75 66 66 65 72		        .text "buffer"
.c884					nt_empty_buffers:
>c884	0d 00				        .byte 13, 0
>c886	99 c8 f3 8d f9 8d		        .word nt_flush, xt_empty_buffers, z_empty_buffers
>c88c	65 6d 70 74 79 2d 62 75		        .text "empty-buffers"
>c894	66 66 65 72 73
.c899					nt_flush:
>c899	05 00				        .byte 5, 0
>c89b	a6 c8 81 90 8a 90		        .word nt_load, xt_flush, z_flush
>c8a1	66 6c 75 73 68			        .text "flush"
.c8a6					nt_load:
>c8a6	04 10				        .byte 4, UF
>c8a8	b2 c8 b1 93 f4 93		        .word nt_thru, xt_load, z_load
>c8ae	6c 6f 61 64			        .text "load"
.c8b2					nt_thru:
>c8b2	04 10				        .byte 4, UF
>c8b4	be c8 c0 a1 04 a2		        .word nt_list, xt_thru, z_thru
>c8ba	74 68 72 75			        .text "thru"
.c8be					nt_list:
>c8be	04 10				        .byte 4, UF
>c8c0	ca c8 77 93 83 93		        .word +, xt_list, z_list
>c8c6	6c 69 73 74			        .text "list"
.c8ca					+
.c8ca					nt_block_ramdrive_init:
>c8ca	13 10				        .byte 19, UF
>c8cc	e5 c8 0e 84 36 85		        .word +, xt_block_ramdrive_init, z_block_ramdrive_init
>c8d2	62 6c 6f 63 6b 2d 72 61		        .text "block-ramdrive-init"
>c8da	6d 64 72 69 76 65 2d 69 6e 69 74
.c8e5					+
.c8e5					nt_definitions:
>c8e5	0b 00				        .byte 11, 0
>c8e7	f8 c8 e7 8a ef 8a		        .word nt_wordlist, xt_definitions, z_definitions
>c8ed	64 65 66 69 6e 69 74 69		        .text "definitions"
>c8f5	6f 6e 73
.c8f8					nt_wordlist:
>c8f8	08 00				        .byte 8, 0
>c8fa	08 c9 f5 a6 0b a7		        .word nt_search_wordlist, xt_wordlist, z_wordlist
>c900	77 6f 72 64 6c 69 73 74		        .text "wordlist"
.c908					nt_search_wordlist:
>c908	0f 10				        .byte 15, UF
>c90a	1f c9 9a 9b 7a 9c		        .word nt_set_current, xt_search_wordlist, z_search_wordlist
>c910	73 65 61 72 63 68 2d 77		        .text "search-wordlist"
>c918	6f 72 64 6c 69 73 74
.c91f					nt_set_current:
>c91f	0b 10				        .byte 11, UF
>c921	32 c9 09 9d 14 9d		        .word nt_get_current, xt_set_current, z_set_current
>c927	73 65 74 2d 63 75 72 72		        .text "set-current"
>c92f	65 6e 74
.c932					nt_get_current:
>c932	0b 00				        .byte 11, 0
>c934	45 c9 23 91 2d 91		        .word nt_set_order, xt_get_current, z_get_current
>c93a	67 65 74 2d 63 75 72 72		        .text "get-current"
>c942	65 6e 74
.c945					nt_set_order:
>c945	09 00				        .byte 9, 0
>c947	56 c9 15 9d 48 9d		        .word nt_get_order, xt_set_order, z_set_order
>c94d	73 65 74 2d 6f 72 64 65		        .text "set-order"
>c955	72
.c956					nt_get_order:
>c956	09 00				        .byte 9, 0
>c958	67 c9 2e 91 56 91		        .word nt_root_wordlist, xt_get_order, z_get_order
>c95e	67 65 74 2d 6f 72 64 65		        .text "get-order"
>c966	72
.c967					nt_root_wordlist:
>c967	0d 00				        .byte 13, 0
>c969	7c c9 48 9b 50 9b		        .word +, xt_root_wordlist, z_root_wordlist
>c96f	72 6f 6f 74 2d 77 6f 72		        .text "root-wordlist"
>c977	64 6c 69 73 74
.c97c					+
.c97c					nt_assembler_wordlist:
>c97c	12 00				        .byte 18, 0
>c97e	96 c9 9b a3 a3 a3		        .word +, xt_assembler_wordlist, z_assembler_wordlist
>c984	61 73 73 65 6d 62 6c 65		        .text "assembler-wordlist"
>c98c	72 2d 77 6f 72 64 6c 69 73 74
.c996					+
.c996					nt_editor_wordlist:
>c996	0f 00				        .byte 15, 0
>c998	ad c9 02 98 0a 98		        .word +, xt_editor_wordlist, z_editor_wordlist
>c99e	65 64 69 74 6f 72 2d 77		        .text "editor-wordlist"
>c9a6	6f 72 64 6c 69 73 74
.c9ad					+
.c9ad					nt_forth_wordlist:
>c9ad	0e 00				        .byte 14, 0
>c9af	c3 c9 9c a7 a2 a7		        .word nt_only, xt_forth_wordlist, z_forth_wordlist
>c9b5	66 6f 72 74 68 2d 77 6f		        .text "forth-wordlist"
>c9bd	72 64 6c 69 73 74
.c9c3					nt_only:
>c9c3	04 00				        .byte 4, 0
>c9c5	cf c9 21 98 2c 98		        .word nt_also, xt_only, z_only
>c9cb	6f 6e 6c 79			        .text "only"
.c9cf					nt_also:
>c9cf	04 00				        .byte 4, 0
>c9d1	db c9 20 83 2f 83		        .word nt_previous, xt_also, z_also
>c9d7	61 6c 73 6f			        .text "also"
.c9db					nt_previous:
>c9db	08 00				        .byte 8, 0
>c9dd	eb c9 4f 9a 5b 9a		        .word nt_to_order, xt_previous, z_previous
>c9e3	70 72 65 76 69 6f 75 73		        .text "previous"
.c9eb					nt_to_order:
>c9eb	06 00				        .byte 6, 0
>c9ed	f9 c9 51 a3 63 a3		        .word nt_order, xt_to_order, z_to_order
>c9f3	3e 6f 72 64 65 72		        .text ">order"
.c9f9					nt_order:
>c9f9	05 00				        .byte 5, 0
>c9fb	06 ca 3f 98 69 98		        .word nt_forth, xt_order, z_order
>ca01	6f 72 64 65 72			        .text "order"
.ca06					nt_forth:
>ca06	05 00				        .byte 5, 0
>ca08	13 ca c2 90 c8 90		        .word +, xt_forth, z_forth
>ca0e	66 6f 72 74 68			        .text "forth"
.ca13					+
>ca13	03 08				nt_see: .byte 3, NN
>ca15	1e ca 7b 9c 08 9d		        .word +, xt_see, z_see
>ca1b	73 65 65			        .text "see"
.ca1e					+
.ca1e					nt_ed:
>ca1e	02 08				        .byte 2, NN
>ca20	28 ca b7 8d ba 8d		        .word +, xt_ed, z_ed
>ca26	65 64				        .text "ed"
.ca28					+
.ca28					nt_cold:
>ca28	04 00				        .byte 4, 0
>ca2a	34 ca 00 80 c5 80		        .word nt_bye, xt_cold, z_cold
>ca30	63 6f 6c 64			        .text "cold"
.ca34					nt_bye:
>ca34	03				        .byte 3         ; length of word strings
>ca35	00				        .byte 0         ; status byte
>ca36	00 00				        .word 0000      ; next word in Dictionary, 0000 signals end
>ca38	f7 85				        .word xt_bye    ; start of code block (xt of this word)
>ca3a	fa 85				        .word z_bye     ; end of code (RTS)
>ca3c	62 79 65			        .text "bye"     ; word name, always lower case, not zero-terminated
.ca3f					root_dictionary_start:
.ca3f					nt_root_set_order:
>ca3f	09 00				        .byte 9, 0
>ca41	50 ca 15 9d 48 9d		        .word nt_root_forth, xt_set_order, z_set_order
>ca47	73 65 74 2d 6f 72 64 65		        .text "set-order"
>ca4f	72
.ca50					nt_root_forth:
>ca50	05 00				        .byte 5, 0
>ca52	5d ca c2 90 c8 90		        .word nt_root_forth_wordlist, xt_forth, z_forth
>ca58	66 6f 72 74 68			        .text "forth"
.ca5d					nt_root_forth_wordlist:
>ca5d	0e 00				        .byte 14, 0
>ca5f	73 ca 9c a7 a2 a7		        .word nt_root_words, xt_forth_wordlist, z_forth_wordlist
>ca65	66 6f 72 74 68 2d 77 6f		        .text "forth-wordlist"
>ca6d	72 64 6c 69 73 74
.ca73					nt_root_words:
>ca73	05 00				        .byte 5, 0
>ca75	00 00 0c a7 68 a7		        .word 0000, xt_words, z_words
>ca7b	77 6f 72 64 73			        .text "words"
.ca80					editor_dictionary_start:
.ca80					nt_editor_o:
>ca80	01 00				        .byte 1, 0
>ca82	89 ca cf a8 14 a9		        .word nt_editor_line, xt_editor_o, z_editor_o
>ca88	6f				        .text "o"
.ca89					nt_editor_line:
>ca89	04 10				        .byte 4, UF
>ca8b	95 ca b6 a8 ce a8		        .word nt_editor_l, xt_editor_line, z_editor_line
>ca91	6c 69 6e 65			        .text "line"
.ca95					nt_editor_l:
>ca95	01 00				        .byte 1, 0
>ca97	9e ca 3a a8 b5 a8		        .word nt_editor_el, xt_editor_l, z_editor_l
>ca9d	6c				        .text "l"
.ca9e					nt_editor_el:
>ca9e	02 00				        .byte 2, 0
>caa0	a8 ca 28 a8 39 a8		        .word nt_editor_erase_screen, xt_editor_el, z_editor_el
>caa6	65 6c				        .text "el"
.caa8					nt_editor_erase_screen:
>caa8	0c 00				        .byte 12, 0
>caaa	bc ca 16 a8 27 a8		        .word nt_editor_enter_screen, xt_editor_erase_screen, z_editor_erase_screen
>cab0	65 72 61 73 65 2d 73 63		        .text "erase-screen"
>cab8	72 65 65 6e
.cabc					nt_editor_enter_screen:
>cabc	0c 00				        .byte 12, 0
>cabe	00 00 fa a7 15 a8		        .word 0000, xt_editor_enter_screen, z_editor_enter_screen
>cac4	65 6e 74 65 72 2d 73 63		        .text "enter-screen"
>cacc	72 65 65 6e
.cad0					assembler_dictionary_start:
.cad0					nt_asm_adc_h:
>cad0	05 0c						.byte 5, IM+NN
>cad2	dd ca				                .word nt_asm_adc_x
>cad4	15 a9 1a a9					.word xt_asm_adc_h, z_asm_adc_h
>cad8	61 64 63 2e 23					.text "adc.#"
.cadd					nt_asm_adc_x:
>cadd	05 0c						.byte 5, IM+NN
>cadf	ea ca				                .word nt_asm_adc_y
>cae1	1a a9 1f a9					.word xt_asm_adc_x, z_asm_adc_x
>cae5	61 64 63 2e 78					.text "adc.x"
.caea					nt_asm_adc_y:
>caea	05 0c						.byte 5, IM+NN
>caec	f7 ca				                .word nt_asm_adc_z
>caee	1f a9 24 a9					.word xt_asm_adc_y, z_asm_adc_y
>caf2	61 64 63 2e 79					.text "adc.y"
.caf7					nt_asm_adc_z:
>caf7	05 0c						.byte 5, IM+NN
>caf9	04 cb				                .word nt_asm_adc_zi
>cafb	24 a9 29 a9					.word xt_asm_adc_z, z_asm_adc_z
>caff	61 64 63 2e 7a					.text "adc.z"
.cb04					nt_asm_adc_zi:
>cb04	06 0c						.byte 6, IM+NN
>cb06	12 cb				                .word nt_asm_adc_ziy
>cb08	29 a9 2e a9					.word xt_asm_adc_zi, z_asm_adc_zi
>cb0c	61 64 63 2e 7a 69				.text "adc.zi"
.cb12					nt_asm_adc_ziy:
>cb12	07 0c						.byte 7, IM+NN
>cb14	21 cb				                .word nt_asm_adc_zx
>cb16	2e a9 33 a9					.word xt_asm_adc_ziy, z_asm_adc_ziy
>cb1a	61 64 63 2e 7a 69 79				.text "adc.ziy"
.cb21					nt_asm_adc_zx:
>cb21	06 0c						.byte 6, IM+NN
>cb23	2f cb				                .word nt_asm_adc_zxi
>cb25	33 a9 38 a9					.word xt_asm_adc_zx, z_asm_adc_zx
>cb29	61 64 63 2e 7a 78				.text "adc.zx"
.cb2f					nt_asm_adc_zxi:
>cb2f	07 0c						.byte 7, IM+NN
>cb31	3e cb				                .word nt_asm_and
>cb33	38 a9 3d a9					.word xt_asm_adc_zxi, z_asm_adc_zxi
>cb37	61 64 63 2e 7a 78 69				.text "adc.zxi"
.cb3e					nt_asm_and:
>cb3e	04 0c						.byte 4, IM+NN
>cb40	4a cb				                .word nt_asm_and_h
>cb42	3d a9 42 a9					.word xt_asm_and, z_asm_and
>cb46	61 6e 64 2e					.text "and."
.cb4a					nt_asm_and_h:
>cb4a	05 0c						.byte 5, IM+NN
>cb4c	57 cb				                .word nt_asm_and_x
>cb4e	42 a9 47 a9					.word xt_asm_and_h, z_asm_and_h
>cb52	61 6e 64 2e 23					.text "and.#"
.cb57					nt_asm_and_x:
>cb57	05 0c						.byte 5, IM+NN
>cb59	64 cb				                .word nt_asm_and_y
>cb5b	47 a9 4c a9					.word xt_asm_and_x, z_asm_and_x
>cb5f	61 6e 64 2e 78					.text "and.x"
.cb64					nt_asm_and_y:
>cb64	05 0c						.byte 5, IM+NN
>cb66	71 cb				                .word nt_asm_and_z
>cb68	4c a9 51 a9					.word xt_asm_and_y, z_asm_and_y
>cb6c	61 6e 64 2e 79					.text "and.y"
.cb71					nt_asm_and_z:
>cb71	05 0c						.byte 5, IM+NN
>cb73	7e cb				                .word nt_asm_and_zi
>cb75	51 a9 56 a9					.word xt_asm_and_z, z_asm_and_z
>cb79	61 6e 64 2e 7a					.text "and.z"
.cb7e					nt_asm_and_zi:
>cb7e	06 0c						.byte 6, IM+NN
>cb80	8c cb				                .word nt_asm_and_ziy
>cb82	56 a9 5b a9					.word xt_asm_and_zi, z_asm_and_zi
>cb86	61 6e 64 2e 7a 69				.text "and.zi"
.cb8c					nt_asm_and_ziy:
>cb8c	07 0c						.byte 7, IM+NN
>cb8e	9b cb				                .word nt_asm_and_zx
>cb90	5b a9 60 a9					.word xt_asm_and_ziy, z_asm_and_ziy
>cb94	61 6e 64 2e 7a 69 79				.text "and.ziy"
.cb9b					nt_asm_and_zx:
>cb9b	06 0c						.byte 6, IM+NN
>cb9d	a9 cb				                .word nt_asm_and_zxi
>cb9f	60 a9 65 a9					.word xt_asm_and_zx, z_asm_and_zx
>cba3	61 6e 64 2e 7a 78				.text "and.zx"
.cba9					nt_asm_and_zxi:
>cba9	07 0c						.byte 7, IM+NN
>cbab	b8 cb				                .word nt_asm_asl
>cbad	65 a9 6a a9					.word xt_asm_and_zxi, z_asm_and_zxi
>cbb1	61 6e 64 2e 7a 78 69				.text "and.zxi"
.cbb8					nt_asm_asl:
>cbb8	03 0c						.byte 3, IM+NN
>cbba	c3 cb				                .word nt_asm_asl_a
>cbbc	6a a9 6f a9					.word xt_asm_asl, z_asm_asl
>cbc0	61 73 6c					.text "asl"
.cbc3					nt_asm_asl_a:
>cbc3	05 0c						.byte 5, IM+NN
>cbc5	d0 cb				                .word nt_asm_asl_x
>cbc7	6f a9 74 a9					.word xt_asm_asl_a, z_asm_asl_a
>cbcb	61 73 6c 2e 61					.text "asl.a"
.cbd0					nt_asm_asl_x:
>cbd0	05 0c						.byte 5, IM+NN
>cbd2	dd cb				                .word nt_asm_asl_z
>cbd4	74 a9 79 a9					.word xt_asm_asl_x, z_asm_asl_x
>cbd8	61 73 6c 2e 78					.text "asl.x"
.cbdd					nt_asm_asl_z:
>cbdd	05 0c						.byte 5, IM+NN
>cbdf	ea cb				                .word nt_asm_asl_zx
>cbe1	79 a9 7e a9					.word xt_asm_asl_z, z_asm_asl_z
>cbe5	61 73 6c 2e 7a					.text "asl.z"
.cbea					nt_asm_asl_zx:
>cbea	06 0c						.byte 6, IM+NN
>cbec	f8 cb				                .word nt_asm_bcc
>cbee	7e a9 83 a9					.word xt_asm_asl_zx, z_asm_asl_zx
>cbf2	61 73 6c 2e 7a 78				.text "asl.zx"
.cbf8					nt_asm_bcc:
>cbf8	03 0c						.byte 3, IM+NN
>cbfa	03 cc				                .word nt_asm_bcs
>cbfc	83 a9 88 a9					.word xt_asm_bcc, z_asm_bcc
>cc00	62 63 63					.text "bcc"
.cc03					nt_asm_bcs:
>cc03	03 0c						.byte 3, IM+NN
>cc05	0e cc				                .word nt_asm_beq
>cc07	88 a9 8f a9					.word xt_asm_bcs, z_asm_bcs
>cc0b	62 63 73					.text "bcs"
.cc0e					nt_asm_beq:
>cc0e	03 0c						.byte 3, IM+NN
>cc10	19 cc				                .word nt_asm_bit
>cc12	8f a9 94 a9					.word xt_asm_beq, z_asm_beq
>cc16	62 65 71					.text "beq"
.cc19					nt_asm_bit:
>cc19	03 0c						.byte 3, IM+NN
>cc1b	24 cc				                .word nt_asm_bit_h
>cc1d	94 a9 99 a9					.word xt_asm_bit, z_asm_bit
>cc21	62 69 74					.text "bit"
.cc24					nt_asm_bit_h:
>cc24	05 0c						.byte 5, IM+NN
>cc26	31 cc				                .word nt_asm_bit_x
>cc28	99 a9 9e a9					.word xt_asm_bit_h, z_asm_bit_h
>cc2c	62 69 74 2e 23					.text "bit.#"
.cc31					nt_asm_bit_x:
>cc31	05 0c						.byte 5, IM+NN
>cc33	3e cc				                .word nt_asm_bit_z
>cc35	9e a9 a3 a9					.word xt_asm_bit_x, z_asm_bit_x
>cc39	62 69 74 2e 78					.text "bit.x"
.cc3e					nt_asm_bit_z:
>cc3e	05 0c						.byte 5, IM+NN
>cc40	4b cc				                .word nt_asm_bit_zx
>cc42	a3 a9 a8 a9					.word xt_asm_bit_z, z_asm_bit_z
>cc46	62 69 74 2e 7a					.text "bit.z"
.cc4b					nt_asm_bit_zx:
>cc4b	06 0c						.byte 6, IM+NN
>cc4d	59 cc				                .word nt_asm_bmi
>cc4f	a8 a9 ad a9					.word xt_asm_bit_zx, z_asm_bit_zx
>cc53	62 69 74 2e 7a 78				.text "bit.zx"
.cc59					nt_asm_bmi:
>cc59	03 0c						.byte 3, IM+NN
>cc5b	64 cc				                .word nt_asm_bne
>cc5d	ad a9 b2 a9					.word xt_asm_bmi, z_asm_bmi
>cc61	62 6d 69					.text "bmi"
.cc64					nt_asm_bne:
>cc64	03 0c						.byte 3, IM+NN
>cc66	6f cc				                .word nt_asm_bpl
>cc68	b2 a9 b7 a9					.word xt_asm_bne, z_asm_bne
>cc6c	62 6e 65					.text "bne"
.cc6f					nt_asm_bpl:
>cc6f	03 0c						.byte 3, IM+NN
>cc71	7a cc				                .word nt_asm_bra
>cc73	b7 a9 bc a9					.word xt_asm_bpl, z_asm_bpl
>cc77	62 70 6c					.text "bpl"
.cc7a					nt_asm_bra:
>cc7a	03 0c						.byte 3, IM+NN
>cc7c	85 cc				                .word nt_asm_brk
>cc7e	bc a9 c1 a9					.word xt_asm_bra, z_asm_bra
>cc82	62 72 61					.text "bra"
.cc85					nt_asm_brk:
>cc85	03 0c						.byte 3, IM+NN
>cc87	90 cc				                .word nt_asm_bvc
>cc89	c1 a9 c6 a9					.word xt_asm_brk, z_asm_brk
>cc8d	62 72 6b					.text "brk"
.cc90					nt_asm_bvc:
>cc90	03 0c						.byte 3, IM+NN
>cc92	9b cc				                .word nt_asm_bvs
>cc94	c6 a9 cb a9					.word xt_asm_bvc, z_asm_bvc
>cc98	62 76 63					.text "bvc"
.cc9b					nt_asm_bvs:
>cc9b	03 0c						.byte 3, IM+NN
>cc9d	a6 cc				                .word nt_asm_clc
>cc9f	cb a9 d0 a9					.word xt_asm_bvs, z_asm_bvs
>cca3	62 76 73					.text "bvs"
.cca6					nt_asm_clc:
>cca6	03 0c						.byte 3, IM+NN
>cca8	b1 cc				                .word nt_asm_cld
>ccaa	d0 a9 d5 a9					.word xt_asm_clc, z_asm_clc
>ccae	63 6c 63					.text "clc"
.ccb1					nt_asm_cld:
>ccb1	03 0c						.byte 3, IM+NN
>ccb3	bc cc				                .word nt_asm_cli
>ccb5	d5 a9 da a9					.word xt_asm_cld, z_asm_cld
>ccb9	63 6c 64					.text "cld"
.ccbc					nt_asm_cli:
>ccbc	03 0c						.byte 3, IM+NN
>ccbe	c7 cc				                .word nt_asm_clv
>ccc0	da a9 df a9					.word xt_asm_cli, z_asm_cli
>ccc4	63 6c 69					.text "cli"
.ccc7					nt_asm_clv:
>ccc7	03 0c						.byte 3, IM+NN
>ccc9	d2 cc				                .word nt_asm_cmp
>cccb	df a9 e4 a9					.word xt_asm_clv, z_asm_clv
>cccf	63 6c 76					.text "clv"
.ccd2					nt_asm_cmp:
>ccd2	03 0c						.byte 3, IM+NN
>ccd4	dd cc				                .word nt_asm_cmp_h
>ccd6	e4 a9 e9 a9					.word xt_asm_cmp, z_asm_cmp
>ccda	63 6d 70					.text "cmp"
.ccdd					nt_asm_cmp_h:
>ccdd	05 0c						.byte 5, IM+NN
>ccdf	ea cc				                .word nt_asm_cmp_x
>cce1	e9 a9 ee a9					.word xt_asm_cmp_h, z_asm_cmp_h
>cce5	63 6d 70 2e 23					.text "cmp.#"
.ccea					nt_asm_cmp_x:
>ccea	05 0c						.byte 5, IM+NN
>ccec	f7 cc				                .word nt_asm_cmp_y
>ccee	ee a9 f3 a9					.word xt_asm_cmp_x, z_asm_cmp_x
>ccf2	63 6d 70 2e 78					.text "cmp.x"
.ccf7					nt_asm_cmp_y:
>ccf7	05 0c						.byte 5, IM+NN
>ccf9	04 cd				                .word nt_asm_cmp_z
>ccfb	f3 a9 f8 a9					.word xt_asm_cmp_y, z_asm_cmp_y
>ccff	63 6d 70 2e 79					.text "cmp.y"
.cd04					nt_asm_cmp_z:
>cd04	05 0c						.byte 5, IM+NN
>cd06	11 cd				                .word nt_asm_cmp_zi
>cd08	f8 a9 fd a9					.word xt_asm_cmp_z, z_asm_cmp_z
>cd0c	63 6d 70 2e 7a					.text "cmp.z"
.cd11					nt_asm_cmp_zi:
>cd11	06 0c						.byte 6, IM+NN
>cd13	1f cd				                .word nt_asm_cmp_ziy
>cd15	fd a9 02 aa					.word xt_asm_cmp_zi, z_asm_cmp_zi
>cd19	63 6d 70 2e 7a 69				.text "cmp.zi"
.cd1f					nt_asm_cmp_ziy:
>cd1f	07 0c						.byte 7, IM+NN
>cd21	2e cd				                .word nt_asm_cmp_zx
>cd23	02 aa 07 aa					.word xt_asm_cmp_ziy, z_asm_cmp_ziy
>cd27	63 6d 70 2e 7a 69 79				.text "cmp.ziy"
.cd2e					nt_asm_cmp_zx:
>cd2e	06 0c						.byte 6, IM+NN
>cd30	3c cd				                .word nt_asm_cmp_zxi
>cd32	07 aa 0c aa					.word xt_asm_cmp_zx, z_asm_cmp_zx
>cd36	63 6d 70 2e 7a 78				.text "cmp.zx"
.cd3c					nt_asm_cmp_zxi:
>cd3c	07 0c						.byte 7, IM+NN
>cd3e	4b cd				                .word nt_asm_cpx
>cd40	0c aa 11 aa					.word xt_asm_cmp_zxi, z_asm_cmp_zxi
>cd44	63 6d 70 2e 7a 78 69				.text "cmp.zxi"
.cd4b					nt_asm_cpx:
>cd4b	03 0c						.byte 3, IM+NN
>cd4d	56 cd				                .word nt_asm_cpx_h
>cd4f	11 aa 16 aa					.word xt_asm_cpx, z_asm_cpx
>cd53	63 70 78					.text "cpx"
.cd56					nt_asm_cpx_h:
>cd56	05 0c						.byte 5, IM+NN
>cd58	63 cd				                .word nt_asm_cpx_z
>cd5a	16 aa 1b aa					.word xt_asm_cpx_h, z_asm_cpx_h
>cd5e	63 70 78 2e 23					.text "cpx.#"
.cd63					nt_asm_cpx_z:
>cd63	05 0c						.byte 5, IM+NN
>cd65	70 cd				                .word nt_asm_cpy
>cd67	1b aa 20 aa					.word xt_asm_cpx_z, z_asm_cpx_z
>cd6b	63 70 78 2e 7a					.text "cpx.z"
.cd70					nt_asm_cpy:
>cd70	03 0c						.byte 3, IM+NN
>cd72	7b cd				                .word nt_asm_cpy_h
>cd74	20 aa 27 aa					.word xt_asm_cpy, z_asm_cpy
>cd78	63 70 79					.text "cpy"
.cd7b					nt_asm_cpy_h:
>cd7b	05 0c						.byte 5, IM+NN
>cd7d	88 cd				                .word nt_asm_cpy_z
>cd7f	27 aa 2c aa					.word xt_asm_cpy_h, z_asm_cpy_h
>cd83	63 70 79 2e 23					.text "cpy.#"
.cd88					nt_asm_cpy_z:
>cd88	05 0c						.byte 5, IM+NN
>cd8a	95 cd				                .word nt_asm_dec
>cd8c	2c aa 31 aa					.word xt_asm_cpy_z, z_asm_cpy_z
>cd90	63 70 79 2e 7a					.text "cpy.z"
.cd95					nt_asm_dec:
>cd95	03 0c						.byte 3, IM+NN
>cd97	a0 cd				                .word nt_asm_dec_a
>cd99	31 aa 36 aa					.word xt_asm_dec, z_asm_dec
>cd9d	64 65 63					.text "dec"
.cda0					nt_asm_dec_a:
>cda0	05 0c						.byte 5, IM+NN
>cda2	ad cd				                .word nt_asm_dec_x
>cda4	36 aa 3b aa					.word xt_asm_dec_a, z_asm_dec_a
>cda8	64 65 63 2e 61					.text "dec.a"
.cdad					nt_asm_dec_x:
>cdad	05 0c						.byte 5, IM+NN
>cdaf	ba cd				                .word nt_asm_dec_z
>cdb1	3b aa 40 aa					.word xt_asm_dec_x, z_asm_dec_x
>cdb5	64 65 63 2e 78					.text "dec.x"
.cdba					nt_asm_dec_z:
>cdba	05 0c						.byte 5, IM+NN
>cdbc	c7 cd				                .word nt_asm_dec_zx
>cdbe	40 aa 45 aa					.word xt_asm_dec_z, z_asm_dec_z
>cdc2	64 65 63 2e 7a					.text "dec.z"
.cdc7					nt_asm_dec_zx:
>cdc7	06 0c						.byte 6, IM+NN
>cdc9	d5 cd				                .word nt_asm_dex
>cdcb	45 aa 4a aa					.word xt_asm_dec_zx, z_asm_dec_zx
>cdcf	64 65 63 2e 7a 78				.text "dec.zx"
.cdd5					nt_asm_dex:
>cdd5	03 0c						.byte 3, IM+NN
>cdd7	e0 cd				                .word nt_asm_dey
>cdd9	4a aa 4f aa					.word xt_asm_dex, z_asm_dex
>cddd	64 65 78					.text "dex"
.cde0					nt_asm_dey:
>cde0	03 0c						.byte 3, IM+NN
>cde2	eb cd				                .word nt_asm_eor
>cde4	4f aa 54 aa					.word xt_asm_dey, z_asm_dey
>cde8	64 65 79					.text "dey"
.cdeb					nt_asm_eor:
>cdeb	03 0c						.byte 3, IM+NN
>cded	f6 cd				                .word nt_asm_eor_h
>cdef	54 aa 59 aa					.word xt_asm_eor, z_asm_eor
>cdf3	65 6f 72					.text "eor"
.cdf6					nt_asm_eor_h:
>cdf6	05 0c						.byte 5, IM+NN
>cdf8	03 ce				                .word nt_asm_eor_x
>cdfa	59 aa 5e aa					.word xt_asm_eor_h, z_asm_eor_h
>cdfe	65 6f 72 2e 23					.text "eor.#"
.ce03					nt_asm_eor_x:
>ce03	05 0c						.byte 5, IM+NN
>ce05	10 ce				                .word nt_asm_eor_y
>ce07	5e aa 63 aa					.word xt_asm_eor_x, z_asm_eor_x
>ce0b	65 6f 72 2e 78					.text "eor.x"
.ce10					nt_asm_eor_y:
>ce10	05 0c						.byte 5, IM+NN
>ce12	1d ce				                .word nt_asm_eor_z
>ce14	63 aa 68 aa					.word xt_asm_eor_y, z_asm_eor_y
>ce18	65 6f 72 2e 79					.text "eor.y"
.ce1d					nt_asm_eor_z:
>ce1d	05 0c						.byte 5, IM+NN
>ce1f	2a ce				                .word nt_asm_eor_zi
>ce21	68 aa 6d aa					.word xt_asm_eor_z, z_asm_eor_z
>ce25	65 6f 72 2e 7a					.text "eor.z"
.ce2a					nt_asm_eor_zi:
>ce2a	06 0c						.byte 6, IM+NN
>ce2c	38 ce				                .word nt_asm_eor_ziy
>ce2e	6d aa 72 aa					.word xt_asm_eor_zi, z_asm_eor_zi
>ce32	65 6f 72 2e 7a 69				.text "eor.zi"
.ce38					nt_asm_eor_ziy:
>ce38	07 0c						.byte 7, IM+NN
>ce3a	47 ce				                .word nt_asm_eor_zx
>ce3c	72 aa 77 aa					.word xt_asm_eor_ziy, z_asm_eor_ziy
>ce40	65 6f 72 2e 7a 69 79				.text "eor.ziy"
.ce47					nt_asm_eor_zx:
>ce47	06 0c						.byte 6, IM+NN
>ce49	55 ce				                .word nt_asm_eor_zxi
>ce4b	77 aa 7c aa					.word xt_asm_eor_zx, z_asm_eor_zx
>ce4f	65 6f 72 2e 7a 78				.text "eor.zx"
.ce55					nt_asm_eor_zxi:
>ce55	07 0c						.byte 7, IM+NN
>ce57	64 ce				                .word nt_asm_inc
>ce59	7c aa 81 aa					.word xt_asm_eor_zxi, z_asm_eor_zxi
>ce5d	65 6f 72 2e 7a 78 69				.text "eor.zxi"
.ce64					nt_asm_inc:
>ce64	03 0c						.byte 3, IM+NN
>ce66	6f ce				                .word nt_asm_inc_a
>ce68	81 aa 86 aa					.word xt_asm_inc, z_asm_inc
>ce6c	69 6e 63					.text "inc"
.ce6f					nt_asm_inc_a:
>ce6f	05 0c						.byte 5, IM+NN
>ce71	7c ce				                .word nt_asm_inc_x
>ce73	86 aa 8b aa					.word xt_asm_inc_a, z_asm_inc_a
>ce77	69 6e 63 2e 61					.text "inc.a"
.ce7c					nt_asm_inc_x:
>ce7c	05 0c						.byte 5, IM+NN
>ce7e	89 ce				                .word nt_asm_inc_z
>ce80	8b aa 90 aa					.word xt_asm_inc_x, z_asm_inc_x
>ce84	69 6e 63 2e 78					.text "inc.x"
.ce89					nt_asm_inc_z:
>ce89	05 0c						.byte 5, IM+NN
>ce8b	96 ce				                .word nt_asm_inc_zx
>ce8d	90 aa 95 aa					.word xt_asm_inc_z, z_asm_inc_z
>ce91	69 6e 63 2e 7a					.text "inc.z"
.ce96					nt_asm_inc_zx:
>ce96	06 0c						.byte 6, IM+NN
>ce98	a4 ce				                .word nt_asm_inx
>ce9a	95 aa 9a aa					.word xt_asm_inc_zx, z_asm_inc_zx
>ce9e	69 6e 63 2e 7a 78				.text "inc.zx"
.cea4					nt_asm_inx:
>cea4	03 0c						.byte 3, IM+NN
>cea6	af ce				                .word nt_asm_iny
>cea8	9a aa 9f aa					.word xt_asm_inx, z_asm_inx
>ceac	69 6e 78					.text "inx"
.ceaf					nt_asm_iny:
>ceaf	03 0c						.byte 3, IM+NN
>ceb1	ba ce				                .word nt_asm_jmp
>ceb3	9f aa a4 aa					.word xt_asm_iny, z_asm_iny
>ceb7	69 6e 79					.text "iny"
.ceba					nt_asm_jmp:
>ceba	03 0c						.byte 3, IM+NN
>cebc	c5 ce				                .word nt_asm_jmp_i
>cebe	a4 aa a9 aa					.word xt_asm_jmp, z_asm_jmp
>cec2	6a 6d 70					.text "jmp"
.cec5					nt_asm_jmp_i:
>cec5	05 0c						.byte 5, IM+NN
>cec7	d2 ce				                .word nt_asm_jmp_xi
>cec9	a9 aa ae aa					.word xt_asm_jmp_i, z_asm_jmp_i
>cecd	6a 6d 70 2e 69					.text "jmp.i"
.ced2					nt_asm_jmp_xi:
>ced2	06 0c						.byte 6, IM+NN
>ced4	e0 ce				                .word nt_asm_jsr
>ced6	ae aa b3 aa					.word xt_asm_jmp_xi, z_asm_jmp_xi
>ceda	6a 6d 70 2e 78 69				.text "jmp.xi"
.cee0					nt_asm_jsr:
>cee0	03 0c						.byte 3, IM+NN
>cee2	eb ce				                .word nt_asm_lda
>cee4	b3 aa b8 aa					.word xt_asm_jsr, z_asm_jsr
>cee8	6a 73 72					.text "jsr"
.ceeb					nt_asm_lda:
>ceeb	03 0c						.byte 3, IM+NN
>ceed	f6 ce				                .word nt_asm_lda_h
>ceef	b8 aa bd aa					.word xt_asm_lda, z_asm_lda
>cef3	6c 64 61					.text "lda"
.cef6					nt_asm_lda_h:
>cef6	05 0c						.byte 5, IM+NN
>cef8	03 cf				                .word nt_asm_lda_x
>cefa	bd aa c2 aa					.word xt_asm_lda_h, z_asm_lda_h
>cefe	6c 64 61 2e 23					.text "lda.#"
.cf03					nt_asm_lda_x:
>cf03	05 0c						.byte 5, IM+NN
>cf05	10 cf				                .word nt_asm_lda_y
>cf07	c2 aa c7 aa					.word xt_asm_lda_x, z_asm_lda_x
>cf0b	6c 64 61 2e 78					.text "lda.x"
.cf10					nt_asm_lda_y:
>cf10	05 0c						.byte 5, IM+NN
>cf12	1d cf				                .word nt_asm_lda_z
>cf14	c7 aa cc aa					.word xt_asm_lda_y, z_asm_lda_y
>cf18	6c 64 61 2e 79					.text "lda.y"
.cf1d					nt_asm_lda_z:
>cf1d	05 0c						.byte 5, IM+NN
>cf1f	2a cf				                .word nt_asm_lda_zi
>cf21	cc aa d1 aa					.word xt_asm_lda_z, z_asm_lda_z
>cf25	6c 64 61 2e 7a					.text "lda.z"
.cf2a					nt_asm_lda_zi:
>cf2a	06 0c						.byte 6, IM+NN
>cf2c	38 cf				                .word nt_asm_lda_ziy
>cf2e	d1 aa d6 aa					.word xt_asm_lda_zi, z_asm_lda_zi
>cf32	6c 64 61 2e 7a 69				.text "lda.zi"
.cf38					nt_asm_lda_ziy:
>cf38	07 0c						.byte 7, IM+NN
>cf3a	47 cf				                .word nt_asm_lda_zx
>cf3c	d6 aa db aa					.word xt_asm_lda_ziy, z_asm_lda_ziy
>cf40	6c 64 61 2e 7a 69 79				.text "lda.ziy"
.cf47					nt_asm_lda_zx:
>cf47	06 0c						.byte 6, IM+NN
>cf49	55 cf				                .word nt_asm_lda_zxi
>cf4b	db aa e0 aa					.word xt_asm_lda_zx, z_asm_lda_zx
>cf4f	6c 64 61 2e 7a 78				.text "lda.zx"
.cf55					nt_asm_lda_zxi:
>cf55	07 0c						.byte 7, IM+NN
>cf57	64 cf				                .word nt_asm_ldx
>cf59	e0 aa e5 aa					.word xt_asm_lda_zxi, z_asm_lda_zxi
>cf5d	6c 64 61 2e 7a 78 69				.text "lda.zxi"
.cf64					nt_asm_ldx:
>cf64	03 0c						.byte 3, IM+NN
>cf66	6f cf				                .word nt_asm_ldx_h
>cf68	e5 aa ea aa					.word xt_asm_ldx, z_asm_ldx
>cf6c	6c 64 78					.text "ldx"
.cf6f					nt_asm_ldx_h:
>cf6f	05 0c						.byte 5, IM+NN
>cf71	7c cf				                .word nt_asm_ldx_y
>cf73	ea aa ef aa					.word xt_asm_ldx_h, z_asm_ldx_h
>cf77	6c 64 78 2e 23					.text "ldx.#"
.cf7c					nt_asm_ldx_y:
>cf7c	05 0c						.byte 5, IM+NN
>cf7e	89 cf				                .word nt_asm_ldx_z
>cf80	ef aa f4 aa					.word xt_asm_ldx_y, z_asm_ldx_y
>cf84	6c 64 78 2e 79					.text "ldx.y"
.cf89					nt_asm_ldx_z:
>cf89	05 0c						.byte 5, IM+NN
>cf8b	96 cf				                .word nt_asm_ldx_zy
>cf8d	f4 aa f9 aa					.word xt_asm_ldx_z, z_asm_ldx_z
>cf91	6c 64 78 2e 7a					.text "ldx.z"
.cf96					nt_asm_ldx_zy:
>cf96	06 0c						.byte 6, IM+NN
>cf98	a4 cf				                .word nt_asm_ldy
>cf9a	f9 aa fe aa					.word xt_asm_ldx_zy, z_asm_ldx_zy
>cf9e	6c 64 78 2e 7a 79				.text "ldx.zy"
.cfa4					nt_asm_ldy:
>cfa4	03 0c						.byte 3, IM+NN
>cfa6	af cf				                .word nt_asm_ldy_h
>cfa8	fe aa 03 ab					.word xt_asm_ldy, z_asm_ldy
>cfac	6c 64 79					.text "ldy"
.cfaf					nt_asm_ldy_h:
>cfaf	05 0c						.byte 5, IM+NN
>cfb1	bc cf				                .word nt_asm_ldy_x
>cfb3	03 ab 08 ab					.word xt_asm_ldy_h, z_asm_ldy_h
>cfb7	6c 64 79 2e 23					.text "ldy.#"
.cfbc					nt_asm_ldy_x:
>cfbc	05 0c						.byte 5, IM+NN
>cfbe	c9 cf				                .word nt_asm_ldy_z
>cfc0	08 ab 0d ab					.word xt_asm_ldy_x, z_asm_ldy_x
>cfc4	6c 64 79 2e 78					.text "ldy.x"
.cfc9					nt_asm_ldy_z:
>cfc9	05 0c						.byte 5, IM+NN
>cfcb	d6 cf				                .word nt_asm_ldy_zx
>cfcd	0d ab 12 ab					.word xt_asm_ldy_z, z_asm_ldy_z
>cfd1	6c 64 79 2e 7a					.text "ldy.z"
.cfd6					nt_asm_ldy_zx:
>cfd6	06 0c						.byte 6, IM+NN
>cfd8	e4 cf				                .word nt_asm_lsr
>cfda	12 ab 17 ab					.word xt_asm_ldy_zx, z_asm_ldy_zx
>cfde	6c 64 79 2e 7a 78				.text "ldy.zx"
.cfe4					nt_asm_lsr:
>cfe4	03 0c						.byte 3, IM+NN
>cfe6	ef cf				                .word nt_asm_lsr_a
>cfe8	17 ab 1c ab					.word xt_asm_lsr, z_asm_lsr
>cfec	6c 73 72					.text "lsr"
.cfef					nt_asm_lsr_a:
>cfef	05 0c						.byte 5, IM+NN
>cff1	fc cf				                .word nt_asm_lsr_x
>cff3	1c ab 21 ab					.word xt_asm_lsr_a, z_asm_lsr_a
>cff7	6c 73 72 2e 61					.text "lsr.a"
.cffc					nt_asm_lsr_x:
>cffc	05 0c						.byte 5, IM+NN
>cffe	09 d0				                .word nt_asm_lsr_z
>d000	21 ab 26 ab					.word xt_asm_lsr_x, z_asm_lsr_x
>d004	6c 73 72 2e 78					.text "lsr.x"
.d009					nt_asm_lsr_z:
>d009	05 0c						.byte 5, IM+NN
>d00b	16 d0				                .word nt_asm_lsr_zx
>d00d	26 ab 2b ab					.word xt_asm_lsr_z, z_asm_lsr_z
>d011	6c 73 72 2e 7a					.text "lsr.z"
.d016					nt_asm_lsr_zx:
>d016	06 0c						.byte 6, IM+NN
>d018	24 d0				                .word nt_asm_nop
>d01a	2b ab 30 ab					.word xt_asm_lsr_zx, z_asm_lsr_zx
>d01e	6c 73 72 2e 7a 78				.text "lsr.zx"
.d024					nt_asm_nop:
>d024	03 0c						.byte 3, IM+NN
>d026	2f d0				                .word nt_asm_ora
>d028	30 ab 35 ab					.word xt_asm_nop, z_asm_nop
>d02c	6e 6f 70					.text "nop"
.d02f					nt_asm_ora:
>d02f	03 0c						.byte 3, IM+NN
>d031	3a d0				                .word nt_asm_ora_h
>d033	35 ab 3a ab					.word xt_asm_ora, z_asm_ora
>d037	6f 72 61					.text "ora"
.d03a					nt_asm_ora_h:
>d03a	05 0c						.byte 5, IM+NN
>d03c	47 d0				                .word nt_asm_ora_x
>d03e	3a ab 3f ab					.word xt_asm_ora_h, z_asm_ora_h
>d042	6f 72 61 2e 23					.text "ora.#"
.d047					nt_asm_ora_x:
>d047	05 0c						.byte 5, IM+NN
>d049	54 d0				                .word nt_asm_ora_y
>d04b	3f ab 44 ab					.word xt_asm_ora_x, z_asm_ora_x
>d04f	6f 72 61 2e 78					.text "ora.x"
.d054					nt_asm_ora_y:
>d054	05 0c						.byte 5, IM+NN
>d056	61 d0				                .word nt_asm_ora_z
>d058	44 ab 49 ab					.word xt_asm_ora_y, z_asm_ora_y
>d05c	6f 72 61 2e 79					.text "ora.y"
.d061					nt_asm_ora_z:
>d061	05 0c						.byte 5, IM+NN
>d063	6e d0				                .word nt_asm_ora_zi
>d065	49 ab 4e ab					.word xt_asm_ora_z, z_asm_ora_z
>d069	6f 72 61 2e 7a					.text "ora.z"
.d06e					nt_asm_ora_zi:
>d06e	06 0c						.byte 6, IM+NN
>d070	7c d0				                .word nt_asm_ora_ziy
>d072	4e ab 55 ab					.word xt_asm_ora_zi, z_asm_ora_zi
>d076	6f 72 61 2e 7a 69				.text "ora.zi"
.d07c					nt_asm_ora_ziy:
>d07c	07 0c						.byte 7, IM+NN
>d07e	8b d0				                .word nt_asm_ora_zx
>d080	55 ab 5a ab					.word xt_asm_ora_ziy, z_asm_ora_ziy
>d084	6f 72 61 2e 7a 69 79				.text "ora.ziy"
.d08b					nt_asm_ora_zx:
>d08b	06 0c						.byte 6, IM+NN
>d08d	99 d0				                .word nt_asm_ora_zxi
>d08f	5a ab 5f ab					.word xt_asm_ora_zx, z_asm_ora_zx
>d093	6f 72 61 2e 7a 78				.text "ora.zx"
.d099					nt_asm_ora_zxi:
>d099	07 0c						.byte 7, IM+NN
>d09b	a8 d0				                .word nt_asm_pha
>d09d	5f ab 64 ab					.word xt_asm_ora_zxi, z_asm_ora_zxi
>d0a1	6f 72 61 2e 7a 78 69				.text "ora.zxi"
.d0a8					nt_asm_pha:
>d0a8	03 0c						.byte 3, IM+NN
>d0aa	b3 d0				                .word nt_asm_php
>d0ac	64 ab 69 ab					.word xt_asm_pha, z_asm_pha
>d0b0	70 68 61					.text "pha"
.d0b3					nt_asm_php:
>d0b3	03 0c						.byte 3, IM+NN
>d0b5	be d0				                .word nt_asm_phx
>d0b7	69 ab 6e ab					.word xt_asm_php, z_asm_php
>d0bb	70 68 70					.text "php"
.d0be					nt_asm_phx:
>d0be	03 0c						.byte 3, IM+NN
>d0c0	c9 d0				                .word nt_asm_phy
>d0c2	6e ab 73 ab					.word xt_asm_phx, z_asm_phx
>d0c6	70 68 78					.text "phx"
.d0c9					nt_asm_phy:
>d0c9	03 0c						.byte 3, IM+NN
>d0cb	d4 d0				                .word nt_asm_pla
>d0cd	73 ab 78 ab					.word xt_asm_phy, z_asm_phy
>d0d1	70 68 79					.text "phy"
.d0d4					nt_asm_pla:
>d0d4	03 0c						.byte 3, IM+NN
>d0d6	df d0				                .word nt_asm_plp
>d0d8	78 ab 7d ab					.word xt_asm_pla, z_asm_pla
>d0dc	70 6c 61					.text "pla"
.d0df					nt_asm_plp:
>d0df	03 0c						.byte 3, IM+NN
>d0e1	ea d0				                .word nt_asm_plx
>d0e3	7d ab 82 ab					.word xt_asm_plp, z_asm_plp
>d0e7	70 6c 70					.text "plp"
.d0ea					nt_asm_plx:
>d0ea	03 0c						.byte 3, IM+NN
>d0ec	f5 d0				                .word nt_asm_ply
>d0ee	82 ab 87 ab					.word xt_asm_plx, z_asm_plx
>d0f2	70 6c 78					.text "plx"
.d0f5					nt_asm_ply:
>d0f5	03 0c						.byte 3, IM+NN
>d0f7	00 d1				                .word nt_asm_rol
>d0f9	87 ab 8c ab					.word xt_asm_ply, z_asm_ply
>d0fd	70 6c 79					.text "ply"
.d100					nt_asm_rol:
>d100	03 0c						.byte 3, IM+NN
>d102	0b d1				                .word nt_asm_rol_a
>d104	8c ab 91 ab					.word xt_asm_rol, z_asm_rol
>d108	72 6f 6c					.text "rol"
.d10b					nt_asm_rol_a:
>d10b	05 0c						.byte 5, IM+NN
>d10d	18 d1				                .word nt_asm_rol_x
>d10f	91 ab 96 ab					.word xt_asm_rol_a, z_asm_rol_a
>d113	72 6f 6c 2e 61					.text "rol.a"
.d118					nt_asm_rol_x:
>d118	05 0c						.byte 5, IM+NN
>d11a	25 d1				                .word nt_asm_rol_z
>d11c	96 ab 9b ab					.word xt_asm_rol_x, z_asm_rol_x
>d120	72 6f 6c 2e 78					.text "rol.x"
.d125					nt_asm_rol_z:
>d125	05 0c						.byte 5, IM+NN
>d127	32 d1				                .word nt_asm_rol_zx
>d129	9b ab a0 ab					.word xt_asm_rol_z, z_asm_rol_z
>d12d	72 6f 6c 2e 7a					.text "rol.z"
.d132					nt_asm_rol_zx:
>d132	06 0c						.byte 6, IM+NN
>d134	40 d1				                .word nt_asm_ror
>d136	a0 ab a5 ab					.word xt_asm_rol_zx, z_asm_rol_zx
>d13a	72 6f 6c 2e 7a 78				.text "rol.zx"
.d140					nt_asm_ror:
>d140	03 0c						.byte 3, IM+NN
>d142	4b d1				                .word nt_asm_ror_a
>d144	a5 ab aa ab					.word xt_asm_ror, z_asm_ror
>d148	72 6f 72					.text "ror"
.d14b					nt_asm_ror_a:
>d14b	05 0c						.byte 5, IM+NN
>d14d	58 d1				                .word nt_asm_ror_x
>d14f	aa ab af ab					.word xt_asm_ror_a, z_asm_ror_a
>d153	72 6f 72 2e 61					.text "ror.a"
.d158					nt_asm_ror_x:
>d158	05 0c						.byte 5, IM+NN
>d15a	65 d1				                .word nt_asm_ror_z
>d15c	af ab b4 ab					.word xt_asm_ror_x, z_asm_ror_x
>d160	72 6f 72 2e 78					.text "ror.x"
.d165					nt_asm_ror_z:
>d165	05 0c						.byte 5, IM+NN
>d167	72 d1				                .word nt_asm_ror_zx
>d169	b4 ab b9 ab					.word xt_asm_ror_z, z_asm_ror_z
>d16d	72 6f 72 2e 7a					.text "ror.z"
.d172					nt_asm_ror_zx:
>d172	06 0c						.byte 6, IM+NN
>d174	80 d1				                .word nt_asm_rti
>d176	b9 ab be ab					.word xt_asm_ror_zx, z_asm_ror_zx
>d17a	72 6f 72 2e 7a 78				.text "ror.zx"
.d180					nt_asm_rti:
>d180	03 0c						.byte 3, IM+NN
>d182	8b d1				                .word nt_asm_rts
>d184	be ab c3 ab					.word xt_asm_rti, z_asm_rti
>d188	72 74 69					.text "rti"
.d18b					nt_asm_rts:
>d18b	03 0c						.byte 3, IM+NN
>d18d	96 d1				                .word nt_asm_sbc
>d18f	c3 ab c8 ab					.word xt_asm_rts, z_asm_rts
>d193	72 74 73					.text "rts"
.d196					nt_asm_sbc:
>d196	03 0c						.byte 3, IM+NN
>d198	a1 d1				                .word nt_asm_sbc_h
>d19a	c8 ab cd ab					.word xt_asm_sbc, z_asm_sbc
>d19e	73 62 63					.text "sbc"
.d1a1					nt_asm_sbc_h:
>d1a1	05 0c						.byte 5, IM+NN
>d1a3	ae d1				                .word nt_asm_sbc_x
>d1a5	cd ab d2 ab					.word xt_asm_sbc_h, z_asm_sbc_h
>d1a9	73 62 63 2e 23					.text "sbc.#"
.d1ae					nt_asm_sbc_x:
>d1ae	05 0c						.byte 5, IM+NN
>d1b0	bb d1				                .word nt_asm_sbc_y
>d1b2	d2 ab d7 ab					.word xt_asm_sbc_x, z_asm_sbc_x
>d1b6	73 62 63 2e 78					.text "sbc.x"
.d1bb					nt_asm_sbc_y:
>d1bb	05 0c						.byte 5, IM+NN
>d1bd	c8 d1				                .word nt_asm_sbc_z
>d1bf	d7 ab dc ab					.word xt_asm_sbc_y, z_asm_sbc_y
>d1c3	73 62 63 2e 79					.text "sbc.y"
.d1c8					nt_asm_sbc_z:
>d1c8	05 0c						.byte 5, IM+NN
>d1ca	d5 d1				                .word nt_asm_sbc_zi
>d1cc	dc ab e1 ab					.word xt_asm_sbc_z, z_asm_sbc_z
>d1d0	73 62 63 2e 7a					.text "sbc.z"
.d1d5					nt_asm_sbc_zi:
>d1d5	06 0c						.byte 6, IM+NN
>d1d7	e3 d1				                .word nt_asm_sbc_ziy
>d1d9	e1 ab e6 ab					.word xt_asm_sbc_zi, z_asm_sbc_zi
>d1dd	73 62 63 2e 7a 69				.text "sbc.zi"
.d1e3					nt_asm_sbc_ziy:
>d1e3	07 0c						.byte 7, IM+NN
>d1e5	f2 d1				                .word nt_asm_sbc_zx
>d1e7	e6 ab eb ab					.word xt_asm_sbc_ziy, z_asm_sbc_ziy
>d1eb	73 62 63 2e 7a 69 79				.text "sbc.ziy"
.d1f2					nt_asm_sbc_zx:
>d1f2	06 0c						.byte 6, IM+NN
>d1f4	00 d2				                .word nt_asm_sbc_zxi
>d1f6	eb ab f0 ab					.word xt_asm_sbc_zx, z_asm_sbc_zx
>d1fa	73 62 63 2e 7a 78				.text "sbc.zx"
.d200					nt_asm_sbc_zxi:
>d200	07 0c						.byte 7, IM+NN
>d202	0f d2				                .word nt_asm_sec
>d204	f0 ab f4 ab					.word xt_asm_sbc_zxi, z_asm_sbc_zxi
>d208	73 62 63 2e 7a 78 69				.text "sbc.zxi"
.d20f					nt_asm_sec:
>d20f	03 0c						.byte 3, IM+NN
>d211	1a d2				                .word nt_asm_sed
>d213	f4 ab f8 ab					.word xt_asm_sec, z_asm_sec
>d217	73 65 63					.text "sec"
.d21a					nt_asm_sed:
>d21a	03 0c						.byte 3, IM+NN
>d21c	25 d2				                .word nt_asm_sei
>d21e	f8 ab fc ab					.word xt_asm_sed, z_asm_sed
>d222	73 65 64					.text "sed"
.d225					nt_asm_sei:
>d225	03 0c						.byte 3, IM+NN
>d227	30 d2				                .word nt_asm_sta
>d229	fc ab 00 ac					.word xt_asm_sei, z_asm_sei
>d22d	73 65 69					.text "sei"
.d230					nt_asm_sta:
>d230	03 0c						.byte 3, IM+NN
>d232	3b d2				                .word nt_asm_sta_x
>d234	00 ac 04 ac					.word xt_asm_sta, z_asm_sta
>d238	73 74 61					.text "sta"
.d23b					nt_asm_sta_x:
>d23b	05 0c						.byte 5, IM+NN
>d23d	48 d2				                .word nt_asm_sta_y
>d23f	04 ac 08 ac					.word xt_asm_sta_x, z_asm_sta_x
>d243	73 74 61 2e 78					.text "sta.x"
.d248					nt_asm_sta_y:
>d248	05 0c						.byte 5, IM+NN
>d24a	55 d2				                .word nt_asm_sta_z
>d24c	08 ac 0c ac					.word xt_asm_sta_y, z_asm_sta_y
>d250	73 74 61 2e 79					.text "sta.y"
.d255					nt_asm_sta_z:
>d255	05 0c						.byte 5, IM+NN
>d257	62 d2				                .word nt_asm_sta_zi
>d259	0c ac 10 ac					.word xt_asm_sta_z, z_asm_sta_z
>d25d	73 74 61 2e 7a					.text "sta.z"
.d262					nt_asm_sta_zi:
>d262	06 0c						.byte 6, IM+NN
>d264	70 d2				                .word nt_asm_sta_ziy
>d266	10 ac 14 ac					.word xt_asm_sta_zi, z_asm_sta_zi
>d26a	73 74 61 2e 7a 69				.text "sta.zi"
.d270					nt_asm_sta_ziy:
>d270	07 0c						.byte 7, IM+NN
>d272	7f d2				                .word nt_asm_sta_zx
>d274	14 ac 18 ac					.word xt_asm_sta_ziy, z_asm_sta_ziy
>d278	73 74 61 2e 7a 69 79				.text "sta.ziy"
.d27f					nt_asm_sta_zx:
>d27f	06 0c						.byte 6, IM+NN
>d281	8d d2				                .word nt_asm_sta_zxi
>d283	18 ac 1c ac					.word xt_asm_sta_zx, z_asm_sta_zx
>d287	73 74 61 2e 7a 78				.text "sta.zx"
.d28d					nt_asm_sta_zxi:
>d28d	07 0c						.byte 7, IM+NN
>d28f	9c d2				                .word nt_asm_stx
>d291	1c ac 20 ac					.word xt_asm_sta_zxi, z_asm_sta_zxi
>d295	73 74 61 2e 7a 78 69				.text "sta.zxi"
.d29c					nt_asm_stx:
>d29c	03 0c						.byte 3, IM+NN
>d29e	a7 d2				                .word nt_asm_stx_z
>d2a0	20 ac 24 ac					.word xt_asm_stx, z_asm_stx
>d2a4	73 74 78					.text "stx"
.d2a7					nt_asm_stx_z:
>d2a7	05 0c						.byte 5, IM+NN
>d2a9	b4 d2				                .word nt_asm_stx_zy
>d2ab	24 ac 28 ac					.word xt_asm_stx_z, z_asm_stx_z
>d2af	73 74 78 2e 7a					.text "stx.z"
.d2b4					nt_asm_stx_zy:
>d2b4	06 0c						.byte 6, IM+NN
>d2b6	c2 d2				                .word nt_asm_sty
>d2b8	28 ac 2c ac					.word xt_asm_stx_zy, z_asm_stx_zy
>d2bc	73 74 78 2e 7a 79				.text "stx.zy"
.d2c2					nt_asm_sty:
>d2c2	03 0c						.byte 3, IM+NN
>d2c4	cd d2				                .word nt_asm_sty_z
>d2c6	2c ac 30 ac					.word xt_asm_sty, z_asm_sty
>d2ca	73 74 79					.text "sty"
.d2cd					nt_asm_sty_z:
>d2cd	05 0c						.byte 5, IM+NN
>d2cf	da d2				                .word nt_asm_sty_zx
>d2d1	30 ac 34 ac					.word xt_asm_sty_z, z_asm_sty_z
>d2d5	73 74 79 2e 7a					.text "sty.z"
.d2da					nt_asm_sty_zx:
>d2da	06 0c						.byte 6, IM+NN
>d2dc	e8 d2				                .word nt_asm_stz
>d2de	34 ac 38 ac					.word xt_asm_sty_zx, z_asm_sty_zx
>d2e2	73 74 79 2e 7a 78				.text "sty.zx"
.d2e8					nt_asm_stz:
>d2e8	03 0c						.byte 3, IM+NN
>d2ea	f3 d2				                .word nt_asm_stz_x
>d2ec	38 ac 3c ac					.word xt_asm_stz, z_asm_stz
>d2f0	73 74 7a					.text "stz"
.d2f3					nt_asm_stz_x:
>d2f3	05 0c						.byte 5, IM+NN
>d2f5	00 d3				                .word nt_asm_stz_z
>d2f7	3c ac 40 ac					.word xt_asm_stz_x, z_asm_stz_x
>d2fb	73 74 7a 2e 78					.text "stz.x"
.d300					nt_asm_stz_z:
>d300	05 0c						.byte 5, IM+NN
>d302	0d d3				                .word nt_asm_stz_zx
>d304	40 ac 44 ac					.word xt_asm_stz_z, z_asm_stz_z
>d308	73 74 7a 2e 7a					.text "stz.z"
.d30d					nt_asm_stz_zx:
>d30d	06 0c						.byte 6, IM+NN
>d30f	1b d3				                .word nt_asm_tax
>d311	44 ac 48 ac					.word xt_asm_stz_zx, z_asm_stz_zx
>d315	73 74 7a 2e 7a 78				.text "stz.zx"
.d31b					nt_asm_tax:
>d31b	03 0c						.byte 3, IM+NN
>d31d	26 d3				                .word nt_asm_tay
>d31f	48 ac 4c ac					.word xt_asm_tax, z_asm_tax
>d323	74 61 78					.text "tax"
.d326					nt_asm_tay:
>d326	03 0c						.byte 3, IM+NN
>d328	31 d3				                .word nt_asm_trb
>d32a	4c ac 50 ac					.word xt_asm_tay, z_asm_tay
>d32e	74 61 79					.text "tay"
.d331					nt_asm_trb:
>d331	03 0c						.byte 3, IM+NN
>d333	3c d3				                .word nt_asm_trb_z
>d335	50 ac 54 ac					.word xt_asm_trb, z_asm_trb
>d339	74 72 62					.text "trb"
.d33c					nt_asm_trb_z:
>d33c	05 0c						.byte 5, IM+NN
>d33e	49 d3				                .word nt_asm_tsb
>d340	54 ac 58 ac					.word xt_asm_trb_z, z_asm_trb_z
>d344	74 72 62 2e 7a					.text "trb.z"
.d349					nt_asm_tsb:
>d349	03 0c						.byte 3, IM+NN
>d34b	54 d3				                .word nt_asm_tsb_z
>d34d	58 ac 5c ac					.word xt_asm_tsb, z_asm_tsb
>d351	74 73 62					.text "tsb"
.d354					nt_asm_tsb_z:
>d354	05 0c						.byte 5, IM+NN
>d356	61 d3				                .word nt_asm_tsx
>d358	5c ac 60 ac					.word xt_asm_tsb_z, z_asm_tsb_z
>d35c	74 73 62 2e 7a					.text "tsb.z"
.d361					nt_asm_tsx:
>d361	03 0c						.byte 3, IM+NN
>d363	6c d3				                .word nt_asm_txa
>d365	60 ac 64 ac					.word xt_asm_tsx, z_asm_tsx
>d369	74 73 78					.text "tsx"
.d36c					nt_asm_txa:
>d36c	03 0c						.byte 3, IM+NN
>d36e	77 d3				                .word nt_asm_txs
>d370	64 ac 68 ac					.word xt_asm_txa, z_asm_txa
>d374	74 78 61					.text "txa"
.d377					nt_asm_txs:
>d377	03 0c						.byte 3, IM+NN
>d379	82 d3				                .word nt_asm_tya
>d37b	68 ac 6c ac					.word xt_asm_txs, z_asm_txs
>d37f	74 78 73					.text "txs"
.d382					nt_asm_tya:
>d382	03 0c						.byte 3, IM+NN
>d384	8d d3				                .word nt_asm_arrow
>d386	6c ac 70 ac					.word xt_asm_tya, z_asm_tya
>d38a	74 79 61					.text "tya"
.d38d					nt_asm_arrow:
>d38d	03 04				                .byte 3, IM
>d38f	98 d3				                .word nt_asm_back_jump
>d391	6c 91 76 91			                .word xt_asm_arrow, z_asm_arrow
>d395	2d 2d 3e			                .text "-->"
.d398					nt_asm_back_jump:
>d398	02 04				                .byte 2, IM
>d39a	a2 d3				                .word nt_asm_back_branch
>d39c	c1 ac c1 ac			                .word xt_asm_back_jump, z_asm_back_jump
>d3a0	3c 6a				                .text "<j"
.d3a2					nt_asm_back_branch:
>d3a2	02 04				                .byte 2, IM
>d3a4	ac d3				                .word nt_asm_push_a
>d3a6	c2 ac ca ac			                .word xt_asm_back_branch, z_asm_back_branch
>d3aa	3c 62				                .text "<b"
.d3ac					nt_asm_push_a:
>d3ac	06 0c				                .byte 6, IM+NN
>d3ae	00 00				                .word 0000
>d3b0	aa ac b9 ac			                .word xt_asm_push_a, z_asm_push_a
>d3b4	70 75 73 68 2d 61		                .text "push-a"

;******  Return to file: platform/../taliforth.asm


;******  Processing file: platform/../strings.asm

=0					str_ok             =  0
=1					str_compile        =  1
=2					str_redefined      =  2
=3					str_wid_forth      =  3
=4					str_abc_lower      =  4
=5					str_abc_upper      =  5
=6					str_wid_editor     =  6
=7					str_wid_assembler  =  7
=8					str_wid_root       =  8
=9					str_see_flags      =  9
=10					str_see_nt         = 10
=11					str_see_xt         = 11
=12					str_see_size       = 12
=13					str_disasm_lit     = 13
=14					str_disasm_sdc     = 14
=15					str_disasm_bra     = 15
.d3ba					string_table:
>d3ba	da d3 de d3 e8 d3 4e d4		        .word s_ok, s_compiled, s_redefined, s_wid_forth, s_abc_lower ; 0-4
>d3c2	f3 d3
>d3c4	17 d4 46 d4 3b d4 55 d4		        .word s_abc_upper, s_wid_editor, s_wid_asm, s_wid_root        ; 5-8
>d3cc	5b d4 77 d4 7c d4 81 d4		        .word s_see_flags, s_see_nt, s_see_xt, s_see_size             ; 9-12
>d3d4	92 d4 9b d4 ad d4		        .word s_disasm_lit, s_disasm_sdc, s_disasm_bra                ; 13-15
>d3da	20 6f 6b 00			s_ok:         .text " ok", 0         ; note space at beginning
>d3de	20 63 6f 6d 70 69 6c 65		s_compiled:   .text " compiled", 0   ; note space at beginning
>d3e6	64 00
>d3e8	72 65 64 65 66 69 6e 65		s_redefined:  .text "redefined ", 0  ; note space at end
>d3f0	64 20 00
>d3f3	30 31 32 33 34 35 36 37		s_abc_lower:  .text "0123456789abcdefghijklmnopqrstuvwxyz"
>d3fb	38 39 61 62 63 64 65 66 67 68 69 6a 6b 6c 6d 6e
>d40b	6f 70 71 72 73 74 75 76 77 78 79 7a
>d417	30 31 32 33 34 35 36 37		s_abc_upper:  .text "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
>d41f	38 39 41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e
>d42f	4f 50 51 52 53 54 55 56 57 58 59 5a
>d43b	41 73 73 65 6d 62 6c 65		s_wid_asm:    .text "Assembler ", 0  ; Wordlist ID 2, note space at end
>d443	72 20 00
>d446	45 64 69 74 6f 72 20 00		s_wid_editor: .text "Editor ", 0     ; Wordlist ID 1, note space at end
>d44e	46 6f 72 74 68 20 00		s_wid_forth:  .text "Forth ", 0      ; Wordlist ID 0, note space at end
>d455	52 6f 6f 74 20 00		s_wid_root:   .text "Root ", 0       ; Wordlist ID 3, note space at end
>d45b	66 6c 61 67 73 20 28 43		s_see_flags:  .text "flags (CO AN IM NN UF HC): ", 0
>d463	4f 20 41 4e 20 49 4d 20 4e 4e 20 55 46 20 48 43
>d473	29 3a 20 00
>d477	6e 74 3a 20 00			s_see_nt:     .text "nt: ", 0
>d47c	78 74 3a 20 00			s_see_xt:     .text "xt: ", 0
>d481	73 69 7a 65 20 28 64 65		s_see_size:   .text "size (decimal): ", 0
>d489	63 69 6d 61 6c 29 3a 20 00
>d492	4c 49 54 45 52 41 4c 20		s_disasm_lit: .text "LITERAL ", 0
>d49a	00
>d49b	53 54 41 43 4b 20 44 45		s_disasm_sdc: .text "STACK DEPTH CHECK", 0
>d4a3	50 54 48 20 43 48 45 43 4b 00
>d4ad	42 52 41 4e 43 48 20 00		s_disasm_bra: .text "BRANCH ",0
=0					err_allot        = 0
=1					err_badsource    = 1
=2					err_compileonly  = 2
=3					err_defer        = 3
=4					err_divzero      = 4
=5					err_noname       = 5
=6					err_refill       = 6
=7					err_state        = 7
=8					err_syntax       = 8
=9					err_underflow    = 9
=10					err_negallot     = 10
=11					err_wordlist     = 11
=12					err_blockwords   = 12
.d4b5					error_table:
>d4b5	cf d4 f0 d4 10 d5 31 d5		        .word es_allot, es_badsource, es_compileonly, es_defer  ;  0-3
>d4bd	4e d5 5f d5 6f d5 9d d5		        .word es_divzero, es_noname, es_refill, es_state        ;  4-7
>d4c5	b5 d5 c4 d5 d4 d5 f0 d5		        .word es_syntax, es_underflow, es_negallot, es_wordlist ;  8-11
>d4cd	07 d6				        .word es_blockwords                                    ; 12
>d4cf	41 4c 4c 4f 54 20 75 73		es_allot:       .text "ALLOT using all available memory", 0
>d4d7	69 6e 67 20 61 6c 6c 20 61 76 61 69 6c 61 62 6c
>d4e7	65 20 6d 65 6d 6f 72 79 00
>d4f0	49 6c 6c 65 67 61 6c 20		es_badsource:   .text "Illegal SOURCE-ID during REFILL", 0
>d4f8	53 4f 55 52 43 45 2d 49 44 20 64 75 72 69 6e 67
>d508	20 52 45 46 49 4c 4c 00
>d510	49 6e 74 65 72 70 72 65		es_compileonly: .text "Interpreting a compile-only word", 0
>d518	74 69 6e 67 20 61 20 63 6f 6d 70 69 6c 65 2d 6f
>d528	6e 6c 79 20 77 6f 72 64 00
>d531	44 45 46 45 52 65 64 20		es_defer:       .text "DEFERed word not defined yet", 0
>d539	77 6f 72 64 20 6e 6f 74 20 64 65 66 69 6e 65 64
>d549	20 79 65 74 00
>d54e	44 69 76 69 73 69 6f 6e		es_divzero:     .text "Division by zero", 0
>d556	20 62 79 20 7a 65 72 6f 00
>d55f	50 61 72 73 69 6e 67 20		es_noname:      .text "Parsing failure", 0
>d567	66 61 69 6c 75 72 65 00
>d56f	51 55 49 54 20 63 6f 75		es_refill:      .text "QUIT could not get input (REFILL returned -1)", 0
>d577	6c 64 20 6e 6f 74 20 67 65 74 20 69 6e 70 75 74
>d587	20 28 52 45 46 49 4c 4c 20 72 65 74 75 72 6e 65
>d597	64 20 2d 31 29 00
>d59d	41 6c 72 65 61 64 79 20		es_state:       .text "Already in compile mode", 0
>d5a5	69 6e 20 63 6f 6d 70 69 6c 65 20 6d 6f 64 65 00
>d5b5	55 6e 64 65 66 69 6e 65		es_syntax:      .text "Undefined word", 0
>d5bd	64 20 77 6f 72 64 00
>d5c4	53 74 61 63 6b 20 75 6e		es_underflow:   .text "Stack underflow", 0
>d5cc	64 65 72 66 6c 6f 77 00
>d5d4	4d 61 78 20 6d 65 6d 6f		es_negallot:    .text "Max memory freed with ALLOT", 0
>d5dc	72 79 20 66 72 65 65 64 20 77 69 74 68 20 41 4c
>d5ec	4c 4f 54 00
>d5f0	4e 6f 20 77 6f 72 64 6c		es_wordlist:    .text "No wordlists available", 0
>d5f8	69 73 74 73 20 61 76 61 69 6c 61 62 6c 65 00
>d607	50 6c 65 61 73 65 20 61		es_blockwords:  .text "Please assign vectors BLOCK-READ-VECTOR and BLOCK-WRITE-VECTOR",0
>d60f	73 73 69 67 6e 20 76 65 63 74 6f 72 73 20 42 4c
>d61f	4f 43 4b 2d 52 45 41 44 2d 56 45 43 54 4f 52 20
>d62f	61 6e 64 20 42 4c 4f 43 4b 2d 57 52 49 54 45 2d
>d63f	56 45 43 54 4f 52 00
>d646	0f 2f 43 4f 55 4e 54 45		envs_cs:        .text 15, "/COUNTED-STRING"
>d64e	44 2d 53 54 52 49 4e 47
>d656	05 2f 48 4f 4c 44		envs_hold:      .text 5, "/HOLD"
>d65c	04 2f 50 41 44			envs_pad:       .text 4, "/PAD"
>d661	11 41 44 44 52 45 53 53		envs_aub:       .text 17, "ADDRESS-UNIT-BITS"
>d669	2d 55 4e 49 54 2d 42 49 54 53
>d673	07 46 4c 4f 4f 52 45 44		envs_floored:   .text 7, "FLOORED"
>d67b	08 4d 41 58 2d 43 48 41		envs_max_char:  .text 8, "MAX-CHAR"
>d683	52
>d684	05 4d 41 58 2d 4e		envs_max_n:     .text 5, "MAX-N"
>d68a	05 4d 41 58 2d 55		envs_max_u:     .text 5, "MAX-U"
>d690	12 52 45 54 55 52 4e 2d		envs_rsc:       .text 18, "RETURN-STACK-CELLS"
>d698	53 54 41 43 4b 2d 43 45 4c 4c 53
>d6a3	0b 53 54 41 43 4b 2d 43		envs_sc:        .text 11, "STACK-CELLS"
>d6ab	45 4c 4c 53
>d6af	09 57 4f 52 44 4c 49 53		envs_wl:        .text 9, "WORDLISTS"
>d6b7	54 53
>d6b9	05 4d 41 58 2d 44		envs_max_d:     .text 5, "MAX-D"
>d6bf	06 4d 41 58 2d 55 44		envs_max_ud:    .text 6, "MAX-UD"

;******  Return to file: platform/../taliforth.asm

.d6c6					cmpl_subroutine:
.d6c6	48		pha		                pha             ; save LSB of address
.d6c7	a9 20		lda #$20	                lda #$20        ; load opcode for JSR
.d6c9	80 03		bra $d6ce	                bra cmpl_common
.d6cb					cmpl_jump:
.d6cb	48		pha		                pha             ; save LSB of address
.d6cc	a9 4c		lda #$4c	                lda #$4c        ; load opcode for JMP, fall thru to cmpl_common
.d6ce					cmpl_common:
.d6ce	20 d6 d6	jsr $d6d6	                jsr cmpl_a      ; compile opcode
.d6d1	68		pla		                pla             ; retrieve address LSB; fall thru to cmpl_word
.d6d2					cmpl_word:
.d6d2	20 d6 d6	jsr $d6d6	                jsr cmpl_a      ; compile LSB of address
.d6d5	98		tya		                tya             ; fall thru for MSB
.d6d6					cmpl_a:
.d6d6	92 00		sta ($00)	                sta (cp)
.d6d8	e6 00		inc $00		                inc cp
.d6da	d0 02		bne $d6de	                bne _done
.d6dc	e6 01		inc $01		                inc cp+1
.d6de					_done:
.d6de	60		rts		                rts
.d6df					doconst:
.d6df	ca		dex		                dex             ; make room for constant
.d6e0	ca		dex		                dex
.d6e1	68		pla		                pla             ; LSB of return address
.d6e2	85 24		sta $24		                sta tmp1
.d6e4	68		pla		                pla             ; MSB of return address
.d6e5	85 25		sta $25		                sta tmp1+1
.d6e7	a0 01		ldy #$01	                ldy #1
.d6e9	b1 24		lda ($24),y	                lda (tmp1),y
.d6eb	95 00		sta $00,x	                sta 0,x
.d6ed	c8		iny		                iny
.d6ee	b1 24		lda ($24),y	                lda (tmp1),y
.d6f0	95 01		sta $01,x	                sta 1,x
.d6f2	60		rts		                rts
.d6f3					dodefer:
.d6f3	68		pla		                pla             ; LSB
.d6f4	85 24		sta $24		                sta tmp1
.d6f6	68		pla		                pla             ; MSB
.d6f7	85 25		sta $25		                sta tmp1+1
.d6f9	a0 01		ldy #$01	                ldy #1
.d6fb	b1 24		lda ($24),y	                lda (tmp1),y
.d6fd	85 26		sta $26		                sta tmp2
.d6ff	c8		iny		                iny
.d700	b1 24		lda ($24),y	                lda (tmp1),y
.d702	85 27		sta $27		                sta tmp2+1
.d704	6c 26 00	jmp ($0026)	                jmp (tmp2)      ; This is actually a jump to the new target
.d707					defer_error:
.d707	a9 03		lda #$03	                lda #err_defer
.d709	4c 39 d8	jmp $d839	                jmp error
.d70c					dodoes:
.d70c	7a		ply		                ply             ; LSB
.d70d	68		pla		                pla             ; MSB
.d70e	c8		iny		                iny
.d70f	d0 01		bne $d712	                bne +
.d711	1a		inc a		                ina
.d712					+
.d712	84 26		sty $26		                sty tmp2
.d714	85 27		sta $27		                sta tmp2+1
.d716	ca		dex		                dex
.d717	ca		dex		                dex
.d718	7a		ply		                ply
.d719	68		pla		                pla
.d71a	c8		iny		                iny
.d71b	d0 01		bne $d71e	                bne +
.d71d	1a		inc a		                ina
.d71e					+
.d71e	94 00		sty $00,x	                sty 0,x         ; LSB
.d720	95 01		sta $01,x	                sta 1,x         ; MSB
.d722	6c 26 00	jmp ($0026)	                jmp (tmp2)
.d725					dovar:
.d725	7a		ply		                ply             ; LSB
.d726	68		pla		                pla             ; MSB
.d727	c8		iny		                iny
.d728	d0 01		bne $d72b	                bne +
.d72a	1a		inc a		                ina
.d72b					+
.d72b	ca		dex		                dex
.d72c	ca		dex		                dex
.d72d	95 01		sta $01,x	                sta 1,x
.d72f	98		tya		                tya
.d730	95 00		sta $00,x	                sta 0,x
.d732	60		rts		                rts
.d733					byte_to_ascii:
.d733	48		pha		                pha
.d734	4a		lsr a		                lsr             ; convert high nibble first
.d735	4a		lsr a		                lsr
.d736	4a		lsr a		                lsr
.d737	4a		lsr a		                lsr
.d738	20 3c d7	jsr $d73c	                jsr _nibble_to_ascii
.d73b	68		pla		                pla
.d73c					_nibble_to_ascii:
.d73c	29 0f		and #$0f	                and #$0F
.d73e	09 30		ora #$30	                ora #'0'
.d740	c9 3a		cmp #$3a	                cmp #$3A        ; '9+1
.d742	90 02		bcc $d746	                bcc +
.d744	69 06		adc #$06	                adc #$06
.d746	4c f0 8d	jmp $8df0	+               jmp emit_a
.d749	60		rts		                rts
.d74a					compare_16bit:
.d74a	b5 00		lda $00,x	                lda 0,x                 ; LSB of TOS
.d74c	d5 02		cmp $02,x	                cmp 2,x                 ; LSB of NOS
.d74e	f0 0a		beq $d75a	                beq _equal
.d750	b5 01		lda $01,x	                lda 1,x                 ; MSB of TOS
.d752	f5 03		sbc $03,x	                sbc 3,x                 ; MSB of NOS
.d754	09 01		ora #$01	                ora #1                  ; Make zero flag 0 because not equal
.d756	70 08		bvs $d760	                bvs _overflow
.d758	80 08		bra $d762	                bra _not_equal
.d75a					_equal:
.d75a	b5 01		lda $01,x	                lda 1,x                 ; MSB of TOS
.d75c	f5 03		sbc $03,x	                sbc 3,x                 ; MSB of NOS
.d75e	50 04		bvc $d764	                bvc _done
.d760					_overflow:
.d760	49 80		eor #$80	                eor #$80                ; complement negative flag
.d762					_not_equal:
.d762	09 01		ora #$01	                ora #1                  ; if overflow, we can't be eqal
.d764					_done:
.d764	60		rts		                rts
.d765					current_to_dp:
.d765	a0 04		ldy #$04	                ldy #current_offset
.d767	b1 1e		lda ($1e),y	                lda (up),y      ; current is a byte variable
.d769	0a		asl a		                asl             ; turn it into an offset (in cells)
.d76a	18		clc		                clc
.d76b	69 06		adc #$06	                adc #wordlists_offset   ; add offset to wordlists base.
.d76d	a8		tay		                tay
.d76e	b1 1e		lda ($1e),y	                lda (up),y              ; get the dp for that wordlist.
.d770	85 02		sta $02		                sta dp
.d772	c8		iny		                iny
.d773	b1 1e		lda ($1e),y	                lda (up),y
.d775	85 03		sta $03		                sta dp+1
.d777	60		rts		                rts
.d778					dp_to_current:
.d778	a0 04		ldy #$04	                ldy #current_offset
.d77a	b1 1e		lda ($1e),y	                lda (up),y      ; current is a byte variable
.d77c	0a		asl a		                asl             ; turn it into an offset (in cells)
.d77d	18		clc		                clc
.d77e	69 06		adc #$06	                adc #wordlists_offset   ; add offset to wordlists base.
.d780	a8		tay		                tay
.d781	a5 02		lda $02		                lda dp
.d783	91 1e		sta ($1e),y	                sta (up),y              ; get the dp for that wordlist.
.d785	c8		iny		                iny
.d786	a5 03		lda $03		                lda dp+1
.d788	91 1e		sta ($1e),y	                sta (up),y
.d78a	60		rts		                rts
.d78b					interpret:
.d78b					_loop:
.d78b	20 d9 98	jsr $98d9	                jsr xt_parse_name       ; ( "string" -- addr u )
.d78e	b5 00		lda $00,x	                lda 0,x
.d790	15 01		ora $01,x	                ora 1,x
.d792	f0 70		beq $d804	                beq _line_done
.d794	20 ac a3	jsr $a3ac	                jsr xt_two_dup          ; ( addr u -- addr u addr u )
.d797	20 d5 8f	jsr $8fd5	                jsr xt_find_name        ; ( addr u addr u -- addr u nt|0 )
.d79a	b5 00		lda $00,x	                lda 0,x
.d79c	15 01		ora $01,x	                ora 1,x
.d79e	d0 28		bne $d7c8	                bne _got_name_token
.d7a0	e8		inx		                inx                     ; ( addr u 0 -- addr u )
.d7a1	e8		inx		                inx
.d7a2	20 84 96	jsr $9684	                jsr xt_number           ; ( addr u -- u|d )
.d7a5	a5 16		lda $16		                lda state
.d7a7	f0 e2		beq $d78b	                beq _loop
.d7a9	a9 20		lda #$20	                lda #$20
.d7ab	24 20		bit $20		                bit status
.d7ad	f0 0d		beq $d7bc	                beq _single_number
.d7af	20 a2 a1	jsr $a1a2	                jsr xt_swap
.d7b2	a0 93		ldy #$93	                ldy #>literal_runtime
.d7b4	a9 92		lda #$92	                lda #<literal_runtime
.d7b6	20 c6 d6	jsr $d6c6	                jsr cmpl_subroutine
.d7b9	20 68 87	jsr $8768	                jsr xt_comma
.d7bc					_single_number:
.d7bc	a0 93		ldy #$93	                ldy #>literal_runtime
.d7be	a9 92		lda #$92	                lda #<literal_runtime
.d7c0	20 c6 d6	jsr $d6c6	                jsr cmpl_subroutine
.d7c3	20 68 87	jsr $8768	                jsr xt_comma
.d7c6	80 c3		bra $d78b	                bra _loop
.d7c8					_got_name_token:
.d7c8	b5 00		lda $00,x	                lda 0,x
.d7ca	95 04		sta $04,x	                sta 4,x
.d7cc	b5 01		lda $01,x	                lda 1,x
.d7ce	95 05		sta $05,x	                sta 5,x
.d7d0	e8		inx		                inx
.d7d1	e8		inx		                inx
.d7d2	e8		inx		                inx
.d7d3	e8		inx		                inx                     ; ( nt )
.d7d4	b5 00		lda $00,x	                lda 0,x
.d7d6	85 22		sta $22		                sta tmpbranch
.d7d8	b5 01		lda $01,x	                lda 1,x
.d7da	85 23		sta $23		                sta tmpbranch+1
.d7dc	20 db 95	jsr $95db	                jsr xt_name_to_int      ; ( nt - xt )
.d7df	a5 16		lda $16		                lda state
.d7e1	d0 13		bne $d7f6	                bne _compile
.d7e3	a0 01		ldy #$01	                ldy #1
.d7e5	b1 22		lda ($22),y	                lda (tmpbranch),y
.d7e7	29 01		and #$01	                and #CO                 ; mask everything but Compile Only bit
.d7e9	f0 05		beq $d7f0	                beq _interpret
.d7eb	a9 02		lda #$02	                lda #err_compileonly
.d7ed	4c 39 d8	jmp $d839	                jmp error
.d7f0					_interpret:
.d7f0	20 37 8f	jsr $8f37	                jsr xt_execute
.d7f3	4c 8b d7	jmp $d78b	                jmp _loop
.d7f6					_compile:
.d7f6	a0 01		ldy #$01	                ldy #1
.d7f8	b1 22		lda ($22),y	                lda (tmpbranch),y
.d7fa	29 04		and #$04	                and #IM                 ; Mask all but IM bit
.d7fc	d0 f2		bne $d7f0	                bne _interpret          ; IMMEDIATE word, execute right now
.d7fe	20 e7 87	jsr $87e7	                jsr xt_compile_comma
.d801	4c 8b d7	jmp $d78b	                jmp _loop
.d804					_line_done:
.d804	e8		inx		                inx
.d805	e8		inx		                inx
.d806	e8		inx		                inx
.d807	e8		inx		                inx
.d808	60		rts		                rts
.d809					is_printable:
.d809	c9 20		cmp #$20	                cmp #AscSP              ; $20
.d80b	90 08		bcc $d815	                bcc _done
.d80d	c9 80		cmp #$80	                cmp #$7F + 1             ; '~'
.d80f	b0 03		bcs $d814	                bcs _failed
.d811	38		sec		                sec
.d812	80 01		bra $d815	                bra _done
.d814					_failed:
.d814	18		clc		                clc
.d815					_done:
.d815	60		rts		                rts
.d816					is_whitespace:
.d816	c9 00		cmp #$00	                cmp #00         ; explicit comparison to leave Y untouched
.d818	90 08		bcc $d822	                bcc _done
.d81a	c9 21		cmp #$21	                cmp #AscSP+1
.d81c	b0 03		bcs $d821	                bcs _failed
.d81e	38		sec		                sec
.d81f	80 01		bra $d822	                bra _done
.d821					_failed:
.d821	18		clc		                clc
.d822					_done:
.d822	60		rts		                rts
.d823					underflow_1:
.d823	e0 77		cpx #$77	                cpx #dsp0-1
.d825	10 10		bpl $d837	                bpl underflow_error
.d827	60		rts		                rts
.d828					underflow_2:
.d828	e0 75		cpx #$75	                cpx #dsp0-3
.d82a	10 0b		bpl $d837	                bpl underflow_error
.d82c	60		rts		                rts
.d82d					underflow_3:
.d82d	e0 73		cpx #$73	                cpx #dsp0-5
.d82f	10 06		bpl $d837	                bpl underflow_error
.d831	60		rts		                rts
.d832					underflow_4:
.d832	e0 71		cpx #$71	                cpx #dsp0-7
.d834	10 01		bpl $d837	                bpl underflow_error
.d836	60		rts		                rts
.d837					underflow_error:
.d837	a9 09		lda #$09	                lda #err_underflow      ; fall through to error
.d839					error:
.d839	0a		asl a		                asl
.d83a	a8		tay		                tay
.d83b	b9 b5 d4	lda $d4b5,y	                lda error_table,y
.d83e	85 28		sta $28		                sta tmp3                ; LSB
.d840	c8		iny		                iny
.d841	b9 b5 d4	lda $d4b5,y	                lda error_table,y
.d844	85 29		sta $29		                sta tmp3+1              ; MSB
.d846	20 5c d8	jsr $d85c	                jsr print_common
.d849	20 5d 89	jsr $895d	                jsr xt_cr
.d84c	4c 81 80	jmp $8081	                jmp xt_abort            ; no jsr, as we clobber return stack
.d84f					print_string_no_lf:
.d84f	0a		asl a		                asl
.d850	a8		tay		                tay
.d851	b9 ba d3	lda $d3ba,y	                lda string_table,y
.d854	85 28		sta $28		                sta tmp3                ; LSB
.d856	c8		iny		                iny
.d857	b9 ba d3	lda $d3ba,y	                lda string_table,y
.d85a	85 29		sta $29		                sta tmp3+1              ; MSB
.d85c					print_common:
.d85c	a0 00		ldy #$00	                ldy #0
.d85e					_loop:
.d85e	b1 28		lda ($28),y	                lda (tmp3),y
.d860	f0 06		beq $d868	                beq _done               ; strings are zero-terminated
.d862	20 f0 8d	jsr $8df0	                jsr emit_a              ; allows vectoring via output
.d865	c8		iny		                iny
.d866	80 f6		bra $d85e	                bra _loop
.d868					_done:
.d868	60		rts		                rts
.d869					print_string:
.d869	20 4f d8	jsr $d84f	                jsr print_string_no_lf
.d86c	4c 5d 89	jmp $895d	                jmp xt_cr               ; JSR/RTS because never compiled
.d86f					print_u:
.d86f	20 9c a7	jsr $a79c	                jsr xt_zero                     ; 0
.d872	20 54 93	jsr $9354	                jsr xt_less_number_sign         ; <#
.d875	20 d8 97	jsr $97d8	                jsr xt_number_sign_s            ; #S
.d878	20 b6 97	jsr $97b6	                jsr xt_number_sign_greater      ; #>
.d87b	4c f7 a4	jmp $a4f7	                jmp xt_type                     ; JSR/RTS because never compiled

;******  Return to file: platform/platform-py65mon.asm

.f010					v_nmi:
.f010					v_reset:
.f010					v_irq:
.f010					kernel_init:
.f010	78		sei		                sei             ; Disable interrupts
.f011	a2 00		ldx #$00	                ldx #0
.f013	bd 2c f0	lda $f02c,x	-               lda s_kernel_id,x
.f016	f0 06		beq $f01e	                beq _done
.f018	20 27 f0	jsr $f027	                jsr kernel_putc
.f01b	e8		inx		                inx
.f01c	80 f5		bra $f013	                bra -
.f01e					_done:
.f01e	4c 00 80	jmp $8000	                jmp forth
.f021					kernel_getc:
.f021					_loop:
.f021	ad 04 f0	lda $f004	                lda $f004
.f024	f0 fb		beq $f021	                beq _loop
.f026	60		rts		                rts
.f027					kernel_putc:
.f027	8d 01 f0	sta $f001	                sta $f001
.f02a	60		rts		                rts
.f02b					platform_bye:
.f02b	00		brk #		                brk
.f02c					s_kernel_id:
>f02c	54 61 6c 69 20 46 6f 72		        .text "Tali Forth 2 default kernel for py65mon (04. Dec 2022)", AscLF, 0
>f034	74 68 20 32 20 64 65 66 61 75 6c 74 20 6b 65 72
>f044	6e 65 6c 20 66 6f 72 20 70 79 36 35 6d 6f 6e 20
>f054	28 30 34 2e 20 44 65 63 20 32 30 32 32 29 0a 00
>fffa	10 f0				.word v_nmi
>fffc	10 f0				.word v_reset
>fffe	10 f0				.word v_irq

;******  End of listing
