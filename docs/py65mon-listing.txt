
; 64tass Turbo Assembler Macro V1.57.2900 listing file
; 64tass --nostart --list=docs/py65mon-listing.txt --labels=docs/py65mon-labelmap.txt --output taliforth-py65mon.bin platform/platform-py65mon.asm
; Sat Mar 23 13:41:07 2024

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: platform/platform-py65mon.asm

=$0000					ram_start = $0000          ; start of installed 32 KiB of RAM
=32767					ram_end   = $8000-1        ; end of installed RAM
=$0000					zpage     = ram_start      ; begin of Zero Page ($0000-$00ff)
=$7f					zpage_end = $7F            ; end of Zero Page used ($0000-$007f)
=$0100					stack0    = $0100          ; begin of Return Stack ($0100-$01ff)
=31744					hist_buff = ram_end-$03ff  ; begin of history buffers
=$0000					user0     = zpage            ; TaliForth2 system variables
=$ff					rsp0      = $ff              ; initial Return Stack Pointer (65c02 stack)
=$ff					bsize     = $ff              ; size of input/output buffers
=512					buffer0   = stack0+$100      ; input buffer ($0200-$027f)
=768					cp0       = buffer0+bsize+1  ; Dictionary starts after last buffer
=31744					cp_end    = hist_buff        ; Last RAM byte available for code
=$ff					padoffset = $ff              ; offset from CP to PAD (holds number strings)
=					TALI_OPTIONAL_WORDS := [ "ed", "editor", "ramdrive", "block", "environment?", "assembler", "disassembler", "wordlist" ]
=["lf"]					TALI_OPTION_CR_EOL := [ "lf" ]
=1					TALI_OPTION_HISTORY := 1
=0					TALI_OPTION_TERSE := 0

;******  Processing file: platform/../taliforth.asm

.8000					code0:

;******  Processing file: platform/../definitions.asm

=0					cp        = user0+0   ; Compiler Pointer
=2					dp        = user0+2   ; Dictionary Pointer
=4					workword  = user0+4   ; nt (not xt!) of word being compiled, except in
=6					insrc     = user0+6   ; input Source for SOURCE-ID
=8					cib       = user0+8   ; address of current input buffer
=10					ciblen    = user0+10  ; length of current input buffer
=12					toin      = user0+12  ; pointer to CIB (>IN in Forth)
=14					ip        = user0+14  ; Instruction Pointer (current xt)
=16					output    = user0+16  ; vector for EMIT
=18					input     = user0+18  ; vector for KEY
=20					havekey   = user0+20  ; vector for KEY?
=22					state     = user0+22  ; STATE: -1 compile, 0 interpret
=24					base      = user0+24  ; number radix, default decimal
=26					nc_limit  = user0+26  ; limit for Native Compile size
=28					uf_strip  = user0+28  ; flag to strip underflow detection code
=30					up        = user0+30  ; User Pointer (Address of user variables)
=32					status    = user0+32  ; internal status information
=34					tmpbranch = user0+34  ; temporary storage for 0BRANCH, BRANCH only
=36					tmp1      = user0+36  ; temporary storage
=38					tmp2      = user0+38  ; temporary storage
=40					tmp3      = user0+40  ; temporary storage (especially for print)
=42					tmpdsp    = user0+42  ; temporary DSP (X) storage (two bytes)
=44					tmptos    = user0+44  ; temporary TOS storage
=46					editor1   = user0+46  ; temporary for editors
=48					editor2   = user0+48  ; temporary for editors
=50					editor3   = user0+50  ; temporary for editors
=52					tohold    = user0+52  ; pointer for formatted output
=54					scratch   = user0+54  ; 8 byte scratchpad (see UM/MOD)
=120					dsp0      = zpage_end-7    ; initial Data Stack Pointer
=0					blk_offset = 0        ; BLK : UP + 0
=2					scr_offset = 2        ; SCR : UP + 2
=4					current_offset = 4    ; CURRENT (byte) : UP + 4 (Compilation wordlist)
=5					num_wordlists_offset = 5
=6					wordlists_offset = 6  ; WORDLISTS (cells) : UP + 6 to UP + 29
=30					num_order_offset = 30 ; #ORDER (byte) : UP + 30
=31					search_order_offset = 31
=12					max_wordlists = 12    ; Maximum number of wordlists supported
=40					blkbuffer_offset    = 40   ; Address of buffer
=42					buffblocknum_offset = 42   ; Block number current in buffer
=44					buffstatus_offset   = 44   ; Status of buffer (bit 0 = used, bit 1 = dirty)
=46					blockread_offset    = 46   ; Vector to block reading routine
=48					blockwrite_offset   = 48   ; Vector to block writing routine
=$03					AscCC   = $03  ; break (CTRL-c)
=$07					AscBELL = $07  ; bell sound
=$08					AscBS   = $08  ; backspace
=$0a					AscLF   = $0a  ; line feed
=$0d					AscCR   = $0d  ; carriage return
=$1b					AscESC  = $1b  ; escape
=$20					AscSP   = $20  ; space
=$7f					AscDEL  = $7f  ; delete (CTRL-h)
=$10					AscCP   = $10  ; CTRL-p (used to recall previous input history)
=$0e					AscCN   = $0e  ; CTRL-n (used to recall next input history)
=1					CO = 1  ; Compile Only
=2					AN = 2  ; Always Native Compile
=4					IM = 4  ; Immediate Word
=8					NN = 8  ; Never Native Compile
=16					UF = 16 ; Includes Underflow Check (RESERVED)
=32					HC = 32 ; Word has Code Field Area (CFA)
=79					MAX_LINE_LENGTH  = 79      ; assumes 80 character lines

;******  Return to file: platform/../taliforth.asm

.8000					forth:

;******  Processing file: platform/../native_words.asm

.8000					xt_cold:
.8000	d8		cld		                cld
.8001	a9 27		lda #$27	                lda #<kernel_putc
.8003	85 10		sta $10		                sta output
.8005	a9 f0		lda #$f0	                lda #>kernel_putc
.8007	85 11		sta $11		                sta output+1
.8009	a2 21		ldx #$21	                ldx #cold_zp_table_end-cold_zp_table-1
.800b					_load_zp_loop:
.800b	bd ad 80	lda $80ad,x	                lda cold_zp_table,x
.800e	95 00		sta $00,x	                sta zpage,x
.8010	ca		dex		                dex
.8011	d0 f8		bne $800b	                bne _load_zp_loop
.8013	ad ad 80	lda $80ad	                lda cold_zp_table
.8016	85 00		sta $00		                sta zpage
.8018	a2 ff		ldx #$ff	                ldx #rsp0
.801a	9a		txs		                txs
.801b	a2 78		ldx #$78	                ldx #dsp0
.801d	a0 33		ldy #$33	                ldy #cold_user_table_end-cold_user_table-1
.801f	a9 00		lda #$00	                lda #0
.8021					_load_user_vars_loop:
.8021	b9 cf 80	lda $80cf,y	                lda cold_user_table,y
.8024	91 1e		sta ($1e),y	                sta (up),y
.8026	88		dey		                dey
.8027	d0 f8		bne $8021	                bne _load_user_vars_loop
.8029	ad cf 80	lda $80cf	                lda cold_user_table
.802c	92 1e		sta ($1e)	                sta (up)
.802e	20 6f 89	jsr $896f	                jsr xt_cr
.8031	ca		dex		                dex
.8032	ca		dex		                dex
.8033	ca		dex		                dex
.8034	ca		dex		                dex
.8035	a9 3f		lda #$3f	                lda #<forth_words_start
.8037	95 02		sta $02,x	                sta 2,x
.8039	a9 bb		lda #$bb	                lda #>forth_words_start
.803b	95 03		sta $03,x	                sta 3,x
.803d	a9 d3		lda #$d3	                lda #<(user_words_end-forth_words_start)
.803f	95 00		sta $00,x	                sta 0,x
.8041	a9 00		lda #$00	                lda #>(user_words_end-forth_words_start)
.8043	95 01		sta $01,x	                sta 1,x
.8045	20 e1 90	jsr $90e1	                jsr xt_evaluate
.8048	9c 00 7c	stz $7c00	                stz hist_buff
.804b	9c 80 7c	stz $7c80	                stz hist_buff+$80
.804e	9c 00 7d	stz $7d00	                stz hist_buff+$100
.8051	9c 80 7d	stz $7d80	                stz hist_buff+$180
.8054	9c 00 7e	stz $7e00	                stz hist_buff+$200
.8057	9c 80 7e	stz $7e80	                stz hist_buff+$280
.805a	9c 00 7f	stz $7f00	                stz hist_buff+$300
.805d	9c 80 7f	stz $7f80	                stz hist_buff+$380
.8060					xt_abort:
.8060	a2 78		ldx #$78	                ldx #dsp0
.8062					xt_quit:
.8062	8a		txa		                txa             ; Save the DSP that we just defined
.8063	a2 ff		ldx #$ff	                ldx #rsp0
.8065	9a		txs		                txs
.8066	aa		tax		                tax             ; Restore the DSP. Dude, seriously.
.8067	64 0e		stz $0e		                stz ip
.8069	64 0f		stz $0f		                stz ip+1
.806b	64 06		stz $06		                stz insrc
.806d	64 07		stz $07		                stz insrc+1
.806f	a9 00		lda #$00	                lda #0
.8071	a0 00		ldy #$00	                ldy #blk_offset
.8073	91 1e		sta ($1e),y	                sta (up),y
.8075	c8		iny		                iny
.8076	91 1e		sta ($1e),y	                sta (up),y
.8078	64 16		stz $16		                stz state
.807a	64 17		stz $17		                stz state+1
.807c					_get_line:
.807c	a9 00		lda #$00	                lda #<buffer0   ; input buffer, this is paranoid
.807e	85 08		sta $08		                sta cib
.8080	a9 02		lda #$02	                lda #>buffer0
.8082	85 09		sta $09		                sta cib+1
.8084	64 0a		stz $0a		                stz ciblen
.8086	64 0b		stz $0b		                stz ciblen+1
.8088	20 04 9b	jsr $9b04	                jsr xt_refill           ; ( -- f )
.808b	b5 00		lda $00,x	                lda 0,x
.808d	d0 05		bne $8094	                bne _success
.808f	a9 06		lda #$06	                lda #err_refill
.8091	4c 02 d8	jmp $d802	                jmp error
.8094					_success:
.8094	e8		inx		                inx                     ; drop
.8095	e8		inx		                inx
.8096	20 54 d7	jsr $d754	                jsr interpret
.8099	e0 78		cpx #$78	                cpx #dsp0
.809b	f0 05		beq $80a2	                beq _stack_ok
.809d	90 03		bcc $80a2	                bcc _stack_ok           ; DSP must always be smaller than DSP0
.809f	4c 00 d8	jmp $d800	                jmp underflow_error
.80a2					_stack_ok:
.80a2	a5 16		lda $16		                lda state
.80a4	f0 02		beq $80a8	                beq _print
.80a6	a9 01		lda #$01	                lda #1                  ; number for "compile" string
.80a8					_print:
.80a8	20 53 d8	jsr $d853	                jsr print_string
.80ab	80 cf		bra $807c	                bra _get_line
.80ad					z_cold:
.80ad					z_abort:
.80ad					z_quit:
.80ad					cold_zp_table:
>80ad	00 08				        .word cp0+256+1024      ; cp moved to make room for user vars and
>80af	12 bc				        .word dictionary_start  ; dp
>80b1	00 00				        .word 0                 ; workword
>80b3	00 00				        .word 0                 ; insrc (SOURCE-ID is 0 for keyboard)
>80b5	00 02				        .word buffer0           ; cib
>80b7	00 00				        .word 0                 ; ciblen
>80b9	00 00				        .word 0                 ; toin
>80bb	00 00				        .word 0                 ; ip
>80bd	27 f0				        .word kernel_putc       ; output
>80bf	21 f0				        .word kernel_getc       ; input
>80c1	00 00				        .word 0                 ; havekey
>80c3	00 00				        .word 0                 ; state (0 = interpret)
>80c5	0a 00				        .word 10                ; base
>80c7	14 00				        .word 20                ; nc-limit
>80c9	00 00				        .word 0                 ; uf_strip (off by default)
>80cb	00 03				        .word cp0               ; up (user vars put right at beginning of
>80cd	00 00				        .word 0                 ; status
.80cf					cold_zp_table_end:
.80cf					cold_user_table:
>80cf	00 00				        .word 0                         ;  0 BLK
>80d1	00 00				        .word 0                         ;  2 SCR
>80d3	00				        .byte 0                         ;  4 CURRENT = FORTH-WORDLIST
>80d4	04				        .byte 4                         ;  5 #WORDLISTS (FORTH EDITOR ASSEMBLER ROOT)
>80d5	12 bc				        .word dictionary_start          ;  6 FORTH-WORDLIST
>80d7	5a ca				        .word editor_dictionary_start   ;  8 EDITOR-WORDLIST
>80d9	aa ca				        .word assembler_dictionary_start ; a ASSEMBLER-WORDLIST
>80db	19 ca				        .word root_dictionary_start     ;  c ROOT-WORDLIST
>80dd	00 00 00 00 00 00 00 00		        .word 0,0,0,0,0,0,0,0           ;  e User wordlists
>80e5	00 00 00 00 00 00 00 00
>80ed	01				        .byte 1                         ; 1e #ORDER
>80ee	00 00 00 00 00 00 00 00		        .byte 0,0,0,0,0,0,0,0,0         ; 1f search-order
>80f6	00
>80f7	00 04				        .word cp0+256                   ; 28 Address of buffer (right after USER vars)
>80f9	00 00				        .word 0                         ; 2a block in buffer
>80fb	00 00				        .word 0                         ; 2c buffer status (not in use)
>80fd	67 85				        .word xt_block_word_error       ; 2e block-read vector
>80ff	67 85				        .word xt_block_word_error       ; 30 block-write vector
>8101	00 00				        .word 0                         ; 32 'COLD
.8103					cold_user_table_end:
.8103					xt_abort_quote:
.8103	20 5b 9d	jsr $9d5b	                jsr xt_s_quote          ; S"
.8106	a0 81		ldy #$81	                ldy #>abort_quote_runtime
.8108	a9 0e		lda #$0e	                lda #<abort_quote_runtime
.810a	20 8f d6	jsr $d68f	                jsr cmpl_subroutine     ; may not be JMP as JSR/RTS
.810d	60		rts		z_abort_quote:  rts
.810e					abort_quote_runtime:
.810e	b5 04		lda $04,x	                lda 4,x
.8110	15 05		ora $05,x	                ora 5,x
.8112	f0 09		beq $811d	                beq _done       ; if FALSE, we're done
.8114	20 e0 a4	jsr $a4e0	                jsr xt_type
.8117	20 6f 89	jsr $896f	                jsr xt_cr
.811a	4c 60 80	jmp $8060	                jmp xt_abort    ; not JSR, so never come back
.811d					_done:
.811d	8a		txa		                txa
.811e	18		clc		                clc
.811f	69 06		adc #$06	                adc #6
.8121	aa		tax		                tax
.8122	60		rts		                rts
.8123					xt_abs:
.8123	20 ec d7	jsr $d7ec	                jsr underflow_1
.8126	b5 01		lda $01,x	                lda 1,x
.8128	10 0d		bpl $8137	                bpl _done       ; positive number, easy money!
.812a	38		sec		                sec
.812b	a9 00		lda #$00	                lda #0
.812d	f5 00		sbc $00,x	                sbc 0,x         ; LSB
.812f	95 00		sta $00,x	                sta 0,x
.8131	a9 00		lda #$00	                lda #0          ; MSB
.8133	f5 01		sbc $01,x	                sbc 1,x
.8135	95 01		sta $01,x	                sta 1,x
.8137					_done:
.8137	60		rts		z_abs:          rts
.8138					xt_accept:
.8138	20 f1 d7	jsr $d7f1	                jsr underflow_2
.813b	b5 00		lda $00,x	                lda 0,x
.813d	15 01		ora $01,x	                ora 1,x
.813f	d0 09		bne $814a	                bne _not_zero
.8141	e8		inx		                inx
.8142	e8		inx		                inx
.8143	74 00		stz $00,x	                stz 0,x
.8145	74 01		stz $01,x	                stz 1,x
.8147	4c 16 82	jmp $8216	                jmp accept_done
.814a					_not_zero:
.814a	b5 00		lda $00,x	                lda 0,x         ; number of chars to get in tmp2 ...
.814c	85 26		sta $26		                sta tmp2
.814e	64 27		stz $27		                stz tmp2+1      ; ... but we only accept max 255 chars
.8150	b5 02		lda $02,x	                lda 2,x         ; address of buffer is NOS, to tmp1
.8152	85 24		sta $24		                sta tmp1
.8154	b5 03		lda $03,x	                lda 3,x
.8156	85 25		sta $25		                sta tmp1+1
.8158	e8		inx		                inx
.8159	e8		inx		                inx
.815a	a0 00		ldy #$00	                ldy #0
.815c	a5 20		lda $20		                lda status
.815e	29 f7		and #$f7	                and #$f7
.8160	1a		inc a		               ina
.8161	09 08		ora #$08	                ora #$08
.8163	85 20		sta $20		                sta status
.8165					accept_loop:
.8165	20 44 93	jsr $9344	                jsr key_a
.8168	c9 0a		cmp #$0a	                cmp #AscLF
.816a	f0 20		beq $818c	                beq _eol
.816c	c9 0d		cmp #$0d	                cmp #AscCR
.816e	f0 1c		beq $818c	                beq _eol
.8170	c9 08		cmp #$08	                cmp #AscBS
.8172	f0 22		beq $8196	                beq _backspace
.8174	c9 7f		cmp #$7f	                cmp #AscDEL     ; (CTRL-h)
.8176	f0 1e		beq $8196	                beq _backspace
.8178	c9 10		cmp #$10	                cmp #AscCP
.817a	f0 36		beq $81b2	                beq _ctrl_p
.817c	c9 0e		cmp #$0e	                cmp #AscCN
.817e	f0 44		beq $81c4	                beq _ctrl_n
.8180	91 24		sta ($24),y	                sta (tmp1),y
.8182	c8		iny		                iny
.8183	20 02 8e	jsr $8e02	                jsr emit_a
.8186	c4 26		cpy $26		                cpy tmp2        ; reached character limit?
.8188	d0 db		bne $8165	                bne accept_loop       ; fall through if buffer limit reached
.818a	80 03		bra $818f	                bra _buffer_full
.818c					_eol:
.818c	20 fb a0	jsr $a0fb	                jsr xt_space    ; print final space
.818f					_buffer_full:
.818f	94 00		sty $00,x	                sty 0,x         ; Y contains number of chars accepted already
.8191	74 01		stz $01,x	                stz 1,x         ; we only accept 256 chars
.8193	4c 16 82	jmp $8216	                jmp accept_done
.8196					_backspace:
.8196	c0 00		cpy #$00	                cpy #0          ; buffer empty?
.8198	d0 06		bne $81a0	                bne +
.819a	a9 07		lda #$07	                lda #AscBELL    ; complain and don't delete beyond the start of line
.819c	20 02 8e	jsr $8e02	                jsr emit_a
.819f	c8		iny		                iny
.81a0					+
.81a0	88		dey		                dey
.81a1	a9 08		lda #$08	                lda #AscBS      ; move back one
.81a3	20 02 8e	jsr $8e02	                jsr emit_a
.81a6	a9 20		lda #$20	                lda #AscSP      ; print a space (rubout)
.81a8	20 02 8e	jsr $8e02	                jsr emit_a
.81ab	a9 08		lda #$08	                lda #AscBS      ; move back over space
.81ad	20 02 8e	jsr $8e02	                jsr emit_a
.81b0	80 b3		bra $8165	                bra accept_loop
.81b2					_ctrl_p:
.81b2	a5 20		lda $20		                lda status
.81b4	29 07		and #$07	                and #7
.81b6	d0 08		bne $81c0	                bne _ctrl_p_dec
.81b8	a5 20		lda $20		                lda status
.81ba	09 07		ora #$07	                ora #7
.81bc	85 20		sta $20		                sta status
.81be	80 11		bra $81d1	                bra _recall_history
.81c0					_ctrl_p_dec:
.81c0	c6 20		dec $20		                dec status
.81c2	80 0d		bra $81d1	                bra _recall_history
.81c4					_ctrl_n:
.81c4	a9 08		lda #$08	                lda #$8
.81c6	24 20		bit $20		                bit status
.81c8	d0 07		bne $81d1	                bne _recall_history
.81ca	a5 20		lda $20		                lda status
.81cc	29 f7		and #$f7	                and #$f7
.81ce	1a		inc a		               ina
.81cf	85 20		sta $20		                sta status
.81d1					_recall_history:
.81d1	a9 08		lda #$08	                lda #%00001000
.81d3	14 20		trb $20		                trb status
.81d5	20 31 82	jsr $8231	                jsr accept_total_recall
.81d8	a9 0d		lda #$0d	                lda #AscCR
.81da	20 02 8e	jsr $8e02	                jsr emit_a
.81dd					input_clear:
.81dd	c0 00		cpy #$00	                cpy #0
.81df	f0 08		beq $81e9	                beq input_cleared
.81e1	a9 20		lda #$20	                lda #AscSP
.81e3	20 02 8e	jsr $8e02	                jsr emit_a
.81e6	88		dey		                dey
.81e7	80 f4		bra $81dd	                bra input_clear
.81e9					input_cleared:
.81e9	a9 0d		lda #$0d	                lda #AscCR
.81eb	20 02 8e	jsr $8e02	                jsr emit_a
.81ee	b1 28		lda ($28),y	                lda (tmp3),y
.81f0	85 21		sta $21		                sta status+1
.81f2	e6 28		inc $28		                inc tmp3
.81f4	d0 02		bne $81f8	                bne +           ; Increment the upper byte on carry.
.81f6	e6 29		inc $29		                inc tmp3+1
.81f8					+
.81f8	a9 0d		lda #$0d	                lda #AscCR
.81fa	20 02 8e	jsr $8e02	                jsr emit_a
.81fd					_history_loop:
.81fd	c4 21		cpy $21		                cpy status+1
.81ff	d0 03		bne $8204	                bne +
.8201	4c 65 81	jmp $8165	                jmp accept_loop       ; Needs a long jump
.8204					+
.8204	c4 26		cpy $26		                cpy tmp2
.8206	f0 0a		beq $8212	                beq _hist_filled_buffer
.8208	b1 28		lda ($28),y	                lda (tmp3),y
.820a	91 24		sta ($24),y	                sta (tmp1),y
.820c	20 02 8e	jsr $8e02	                jsr emit_a
.820f	c8		iny		                iny
.8210	80 eb		bra $81fd	                bra _history_loop
.8212					_hist_filled_buffer:
.8212	88		dey		                dey
.8213	4c 65 81	jmp $8165	                jmp accept_loop
.8216					accept_done:
.8216	20 31 82	jsr $8231	                jsr accept_total_recall
.8219	85 21		sta $21		                sta status+1
.821b	a0 00		ldy #$00	                ldy #0
.821d	91 28		sta ($28),y	                sta (tmp3),y
.821f	e6 28		inc $28		                inc tmp3
.8221	d0 02		bne $8225	                bne +           ; Increment the upper byte on carry.
.8223	e6 29		inc $29		                inc tmp3+1
.8225					+
.8225					_save_history_loop:
.8225	c4 21		cpy $21		                cpy status+1
.8227	f0 07		beq $8230	                beq _save_history_done
.8229	b1 24		lda ($24),y	                lda (tmp1),y
.822b	91 28		sta ($28),y	                sta (tmp3),y
.822d	c8		iny		                iny
.822e	80 f5		bra $8225	                bra _save_history_loop
.8230					_save_history_done:
.8230					z_accept:
.8230	60		rts		                rts
.8231					accept_total_recall:
.8231	a9 00		lda #$00	                lda #<hist_buff
.8233	85 28		sta $28		                sta tmp3
.8235	a9 7c		lda #$7c	                lda #>hist_buff
.8237	85 29		sta $29		                sta tmp3+1
.8239	a5 20		lda $20		                lda status
.823b	6a		ror a		                ror
.823c	29 03		and #$03	                and #3
.823e	18		clc		                clc
.823f	65 29		adc $29		                adc tmp3+1
.8241	85 29		sta $29		                sta tmp3+1
.8243	a5 20		lda $20		                lda status
.8245	6a		ror a		                ror             ; Rotate through carry into msb.
.8246	6a		ror a		                ror
.8247	29 80		and #$80	                and #$80
.8249	18		clc		                clc
.824a	65 28		adc $28		                adc tmp3
.824c	85 28		sta $28		                sta tmp3
.824e	90 02		bcc $8252	                bcc +           ; Increment the upper byte on carry.
.8250	e6 29		inc $29		                inc tmp3+1
.8252					+
.8252	98		tya		                tya
.8253	c9 80		cmp #$80	                cmp #$80
.8255	90 02		bcc $8259	                bcc +
.8257	a9 7f		lda #$7f	                lda #$7F
.8259					+
.8259	60		rts		                rts
.825a					xt_action_of:
.825a	a5 16		lda $16		                lda state
.825c	05 17		ora $17		                ora state+1
.825e	f0 0c		beq $826c	                beq _interpreting
.8260					_compiling:
.8260	20 aa 85	jsr $85aa	                jsr xt_bracket_tick
.8263	a0 8a		ldy #$8a	                ldy #>xt_defer_fetch
.8265	a9 eb		lda #$eb	                lda #<xt_defer_fetch
.8267	20 8f d6	jsr $d68f	                jsr cmpl_subroutine
.826a	80 06		bra $8272	                bra _done
.826c					_interpreting:
.826c	20 ee a1	jsr $a1ee	                jsr xt_tick
.826f	20 eb 8a	jsr $8aeb	                jsr xt_defer_fetch
.8272					_done:
.8272	60		rts		z_action_of:           rts
.8273					xt_again:
.8273	20 ec d7	jsr $d7ec	                jsr underflow_1
.8276	a0 00		ldy #$00	                ldy #0
.8278	a9 4c		lda #$4c	                lda #$4C        ; JMP
.827a	91 00		sta ($00),y	                sta (cp),y
.827c	c8		iny		                iny
.827d	b5 00		lda $00,x	                lda 0,x         ; LSB of address
.827f	91 00		sta ($00),y	                sta (cp),y
.8281	c8		iny		                iny
.8282	b5 01		lda $01,x	                lda 1,x         ; MSB of address
.8284	91 00		sta ($00),y	                sta (cp),y
.8286	c8		iny		                iny
.8287	98		tya		                tya
.8288	18		clc		                clc
.8289	65 00		adc $00		                adc cp
.828b	85 00		sta $00		                sta cp
.828d	90 02		bcc $8291	                bcc _done
.828f	e6 01		inc $01		                inc cp+1
.8291					_done:
.8291	e8		inx		                inx
.8292	e8		inx		                inx
.8293	60		rts		z_again:        rts
.8294					xt_align:
.8294					xt_aligned:
.8294					z_align:
.8294	60		rts		z_aligned:      rts             ; stripped out during native compile
.8295					xt_allot:
.8295	20 ec d7	jsr $d7ec	                jsr underflow_1
.8298	b5 01		lda $01,x	                lda 1,x
.829a	30 22		bmi $82be	                bmi _release
.829c	18		clc		                clc
.829d	a5 00		lda $00		                lda cp
.829f	75 00		adc $00,x	                adc 0,x
.82a1	85 00		sta $00		                sta cp
.82a3	a5 01		lda $01		                lda cp+1
.82a5	75 01		adc $01,x	                adc 1,x
.82a7	85 01		sta $01		                sta cp+1
.82a9	a0 00		ldy #$00	                ldy #<cp_end
.82ab	c4 00		cpy $00		                cpy cp
.82ad	a9 7c		lda #$7c	                lda #>cp_end
.82af	e5 01		sbc $01		                sbc cp+1
.82b1	b0 48		bcs $82fb	                bcs _done               ; we're fine.
.82b3	84 00		sty $00		                sty cp                  ; still #<cp_end
.82b5	a9 7c		lda #$7c	                lda #>cp_end
.82b7	85 01		sta $01		                sta cp+1
.82b9	a9 00		lda #$00	                lda #err_allot
.82bb	4c 02 d8	jmp $d802	                jmp error
.82be					_release:
.82be	ca		dex		                dex
.82bf	ca		dex		                dex
.82c0	a5 00		lda $00		                lda cp
.82c2	95 00		sta $00,x	                sta 0,x
.82c4	a5 01		lda $01		                lda cp+1
.82c6	95 01		sta $01,x	                sta 1,x
.82c8	20 ef 99	jsr $99ef	                jsr xt_plus                     ; new CP is now TOS
.82cb	ca		dex		                dex
.82cc	ca		dex		                dex                             ; new CP now NOS
.82cd	a9 00		lda #$00	                lda #<cp0
.82cf	95 00		sta $00,x	                sta 0,x
.82d1	a9 03		lda #$03	                lda #>cp0
.82d3	95 01		sta $01,x	                sta 1,x                         ; CP0 is TOS
.82d5	20 13 d7	jsr $d713	                jsr compare_16bit               ; still ( CP CP0 )
.82d8	f0 17		beq $82f1	                beq _nega_done
.82da	30 15		bmi $82f1	                bmi _nega_done
.82dc	a9 00		lda #$00	                lda #<cp0
.82de	85 00		sta $00		                sta cp
.82e0	a9 03		lda #$03	                lda #>cp0
.82e2	85 01		sta $01		                sta cp+1
.82e4	a9 12		lda #$12	                lda #<dictionary_start
.82e6	85 02		sta $02		                sta dp
.82e8	a9 bc		lda #$bc	                lda #>dictionary_start
.82ea	85 03		sta $03		                sta dp+1
.82ec	a9 0a		lda #$0a	                lda #err_negallot
.82ee	4c 02 d8	jmp $d802	                jmp error
.82f1					_nega_done:
.82f1	b5 02		lda $02,x	                lda 2,x
.82f3	85 00		sta $00		                sta cp
.82f5	b5 03		lda $03,x	                lda 3,x
.82f7	85 01		sta $01		                sta cp+1
.82f9	e8		inx		                inx
.82fa	e8		inx		                inx                     ; drop through to _done
.82fb					_done:
.82fb	e8		inx		                inx
.82fc	e8		inx		                inx
.82fd					z_allot:
.82fd	60		rts		                rts
.82fe					xt_allow_native:
.82fe	20 2e d7	jsr $d72e	                jsr current_to_dp
.8301	a0 01		ldy #$01	                ldy #1          ; offset for status byte
.8303	b1 02		lda ($02),y	                lda (dp),y
.8305	29 f5		and #$f5	                and #$ff-NN-AN  ; AN and NN flag is clear.
.8307	91 02		sta ($02),y	                sta (dp),y
.8309					z_allow_native:
.8309	60		rts		                rts
.830a					xt_also:
.830a	20 40 91	jsr $9140	                jsr xt_get_order
.830d	20 9f 98	jsr $989f	                jsr xt_over
.8310	20 8b a1	jsr $a18b	                jsr xt_swap
.8313	20 29 98	jsr $9829	                jsr xt_one_plus
.8316	20 27 9d	jsr $9d27	                jsr xt_set_order
.8319	60		rts		z_also:         rts
.831a					xt_always_native:
.831a	20 2e d7	jsr $d72e	                jsr current_to_dp
.831d	a0 01		ldy #$01	                ldy #1          ; offset for status byte
.831f	b1 02		lda ($02),y	                lda (dp),y
.8321	09 02		ora #$02	                ora #AN         ; Make sure AN flag is set
.8323	29 f7		and #$f7	                and #$ff-NN     ; and NN flag is clear.
.8325	91 02		sta ($02),y	                sta (dp),y
.8327					z_always_native:
.8327	60		rts		                rts
.8328					xt_and:
.8328	20 f1 d7	jsr $d7f1	                jsr underflow_2
.832b	b5 00		lda $00,x	                lda 0,x
.832d	35 02		and $02,x	                and 2,x
.832f	95 02		sta $02,x	                sta 2,x
.8331	b5 01		lda $01,x	                lda 1,x
.8333	35 03		and $03,x	                and 3,x
.8335	95 03		sta $03,x	                sta 3,x
.8337	e8		inx		                inx
.8338	e8		inx		                inx
.8339	60		rts		z_and:          rts
.833a					xt_at_xy:
.833a	20 f1 d7	jsr $d7f1	                jsr underflow_2
.833d	a5 18		lda $18		                lda base
.833f	48		pha		                pha
.8340	a9 0a		lda #$0a	                lda #10
.8342	85 18		sta $18		                sta base
.8344	a9 1b		lda #$1b	                lda #AscESC
.8346	20 02 8e	jsr $8e02	                jsr emit_a
.8349	a9 5b		lda #$5b	                lda #$5B        ; ASCII for "["
.834b	20 02 8e	jsr $8e02	                jsr emit_a
.834e	20 29 98	jsr $9829	                jsr xt_one_plus ; AT-XY is zero based, but ANSI is 1 based
.8351	20 59 d8	jsr $d859	                jsr print_u
.8354	a9 3b		lda #$3b	                lda #$3B        ; ASCII for ";"
.8356	20 02 8e	jsr $8e02	                jsr emit_a
.8359	20 29 98	jsr $9829	                jsr xt_one_plus ; AT-XY is zero based, but ANSI is 1 based
.835c	20 59 d8	jsr $d859	                jsr print_u
.835f	a9 48		lda #$48	                lda #'H'
.8361	20 02 8e	jsr $8e02	                jsr emit_a
.8364	68		pla		                pla
.8365	85 18		sta $18		                sta base
.8367	60		rts		z_at_xy:        rts
.8368					xt_backslash:
.8368	a0 00		ldy #$00	                ldy #blk_offset
.836a	b1 1e		lda ($1e),y	                lda (up),y
.836c	c8		iny		                iny
.836d	11 1e		ora ($1e),y	                ora (up),y
.836f	f0 19		beq $838a	                beq backslash_not_block
.8371	a5 0c		lda $0c		                lda toin
.8373	29 3f		and #$3f	                and #$3F
.8375	f0 1b		beq $8392	                beq z_backslash
.8377	c9 01		cmp #$01	                cmp #$01
.8379	f0 17		beq $8392	                beq z_backslash
.837b	a5 0c		lda $0c		                lda toin
.837d	29 c0		and #$c0	                and #$C0        ; Clear lower bits to move to beginning of line.
.837f	18		clc		                clc             ; Add $40 (64 decimal) to move to next line.
.8380	69 40		adc #$40	                adc #$40
.8382	85 0c		sta $0c		                sta toin
.8384	90 0c		bcc $8392	                bcc z_backslash
.8386	e6 0d		inc $0d		                inc toin+1
.8388	80 08		bra $8392	                bra z_backslash
.838a					backslash_not_block:
.838a	a5 0a		lda $0a		                lda ciblen
.838c	85 0c		sta $0c		                sta toin
.838e	a5 0b		lda $0b		                lda ciblen+1
.8390	85 0d		sta $0d		                sta toin+1
.8392	60		rts		z_backslash:    rts
.8393					xt_base:
.8393	ca		dex		                dex
.8394	ca		dex		                dex
.8395	a9 18		lda #$18	                lda #<base
.8397	95 00		sta $00,x	                sta 0,x         ; LSB
.8399	74 01		stz $01,x	                stz 1,x         ; MSB is always 0
.839b	60		rts		z_base:         rts
.839c					xt_begin:
.839c	20 7e 91	jsr $917e	                jsr xt_here
.839f	60		rts		z_begin:        rts
.83a0					xt_bell:
.83a0	a9 07		lda #$07	                lda #7          ; ASCII value for BELl
.83a2	20 02 8e	jsr $8e02	                jsr emit_a
.83a5	60		rts		z_bell:         rts
.83a6					xt_bl:
.83a6	ca		dex		                dex
.83a7	ca		dex		                dex
.83a8	a9 20		lda #$20	                lda #AscSP
.83aa	95 00		sta $00,x	                sta 0,x
.83ac	74 01		stz $01,x	                stz 1,x
.83ae	60		rts		z_bl:           rts
.83af					xt_blk:
.83af	ca		dex		                dex
.83b0	ca		dex		                dex
.83b1	18		clc		                clc
.83b2	a5 1e		lda $1e		                lda up
.83b4	69 00		adc #$00	                adc #blk_offset ; Add offset
.83b6	95 00		sta $00,x	                sta 0,x
.83b8	a5 1f		lda $1f		                lda up+1
.83ba	69 00		adc #$00	                adc #0          ; Adding carry
.83bc	95 01		sta $01,x	                sta 1,x
.83be	60		rts		z_blk:          rts
.83bf					xt_blkbuffer:
.83bf	ca		dex		                dex
.83c0	ca		dex		                dex
.83c1	a0 28		ldy #$28	                ldy #blkbuffer_offset
.83c3	b1 1e		lda ($1e),y	                lda (up),y
.83c5	95 00		sta $00,x	                sta 0,x
.83c7	c8		iny		                iny             ; Move along to the next byte
.83c8	b1 1e		lda ($1e),y	                lda (up),y
.83ca	95 01		sta $01,x	                sta 1,x
.83cc	60		rts		z_blkbuffer:    rts
.83cd					xt_block:
.83cd	a0 2a		ldy #$2a	                ldy #buffblocknum_offset
.83cf	b1 1e		lda ($1e),y	                lda (up),y
.83d1	d5 00		cmp $00,x	                cmp 0,x
.83d3	d0 0f		bne $83e4	                bne _not_in_buffer
.83d5	c8		iny		                iny
.83d6	b1 1e		lda ($1e),y	                lda (up),y
.83d8	d5 01		cmp $01,x	                cmp 1,x
.83da	d0 08		bne $83e4	                bne _not_in_buffer
.83dc	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.83de	b1 1e		lda ($1e),y	                lda (up),y
.83e0	29 01		and #$01	                and #1          ; Check the in-use flag (bit 0)
.83e2	d0 30		bne $8414	                bne _done       ; It's already in the buffer and in use.
.83e4					_not_in_buffer:
.83e4	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.83e6	b1 1e		lda ($1e),y	                lda (up),y      ; Only bits 0 and 1 are used, so only
.83e8	c9 03		cmp #$03	                cmp #3          ; LSB is needed.
.83ea	d0 0c		bne $83f8	                bne _buffer_available ; Unused or not dirty = available
.83ec	20 bf 83	jsr $83bf	                jsr xt_blkbuffer
.83ef	20 b1 85	jsr $85b1	                jsr xt_buffblocknum
.83f2	20 8c 8f	jsr $8f8c	                jsr xt_fetch
.83f5	20 6c 85	jsr $856c	                jsr xt_block_write
.83f8					_buffer_available:
.83f8	a0 2a		ldy #$2a	                ldy #buffblocknum_offset
.83fa	b5 00		lda $00,x	                lda 0,x
.83fc	91 1e		sta ($1e),y	                sta (up),y
.83fe	c8		iny		                iny
.83ff	b5 01		lda $01,x	                lda 1,x
.8401	91 1e		sta ($1e),y	                sta (up),y
.8403	20 bf 83	jsr $83bf	                jsr xt_blkbuffer
.8406	20 8b a1	jsr $a18b	                jsr xt_swap
.8409	20 49 85	jsr $8549	                jsr xt_block_read
.840c	a9 01		lda #$01	                lda #1
.840e	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.8410	91 1e		sta ($1e),y	                sta (up),y
.8412	ca		dex		                dex
.8413	ca		dex		                dex
.8414					_done:
.8414	a0 28		ldy #$28	                ldy #blkbuffer_offset
.8416	b1 1e		lda ($1e),y	                lda (up),y
.8418	95 00		sta $00,x	                sta 0,x
.841a	c8		iny		                iny
.841b	b1 1e		lda ($1e),y	                lda (up),y
.841d	95 01		sta $01,x	                sta 1,x
.841f	60		rts		z_block:        rts
.8420					xt_block_ramdrive_init:
.8420	20 ec d7	jsr $d7ec	                jsr underflow_1
.8423	4c 3e 85	jmp $853e	                jmp _after_ramdrive_code
.8426					_ramdrive_code:
>8426	62 61 73 65 20 40 20 73		        .text "base @ swap decimal"
>842e	77 61 70 20 64 65 63 69 6d 61 6c
>8439	20 31 30 32 34 20 2a		        .text " 1024 *" ; ( Calculate how many bytes are needed for numblocks blocks )
>8440	20 64 75 70			        .text " dup"    ; ( Save a copy for formatting it at the end )
>8444	20 62 75 66 66 65 72 3a		        .text " buffer: ramdrive" ; ( Create ramdrive )
>844c	20 72 61 6d 64 72 69 76 65
>8455	20 3a 20 62 6c 6f 63 6b		        .text " : block-read-ramdrive"  ; ( addr u -- )
>845d	2d 72 65 61 64 2d 72 61 6d 64 72 69 76 65
>846b	20 72 61 6d 64 72 69 76		        .text " ramdrive swap 1024 * + swap 1024 move ;"
>8473	65 20 73 77 61 70 20 31 30 32 34 20 2a 20 2b 20
>8483	73 77 61 70 20 31 30 32 34 20 6d 6f 76 65 20 3b
>8493	20 3a 20 62 6c 6f 63 6b		        .text " : block-write-ramdrive" ; ( addr u -- )
>849b	2d 77 72 69 74 65 2d 72 61 6d 64 72 69 76 65
>84aa	20 72 61 6d 64 72 69 76		        .text " ramdrive swap 1024 * + 1024 move ;"
>84b2	65 20 73 77 61 70 20 31 30 32 34 20 2a 20 2b 20
>84c2	31 30 32 34 20 6d 6f 76 65 20 3b
>84cd	20 27 20 62 6c 6f 63 6b		        .text " ' block-read-ramdrive block-read-vector !" ; ( Replace I/O vectors )
>84d5	2d 72 65 61 64 2d 72 61 6d 64 72 69 76 65 20 62
>84e5	6c 6f 63 6b 2d 72 65 61 64 2d 76 65 63 74 6f 72
>84f5	20 21
>84f7	20 27 20 62 6c 6f 63 6b		        .text " ' block-write-ramdrive block-write-vector !"
>84ff	2d 77 72 69 74 65 2d 72 61 6d 64 72 69 76 65 20
>850f	62 6c 6f 63 6b 2d 77 72 69 74 65 2d 76 65 63 74
>851f	6f 72 20 21
>8523	20 72 61 6d 64 72 69 76		        .text " ramdrive swap blank base !"
>852b	65 20 73 77 61 70 20 62 6c 61 6e 6b 20 62 61 73
>853b	65 20 21
.853e					_after_ramdrive_code:
.853e	20 86 a0	jsr $a086	                jsr sliteral_runtime
>8541	26 84 18 01			.word _ramdrive_code, _after_ramdrive_code-_ramdrive_code
.8545	20 e1 90	jsr $90e1	                jsr xt_evaluate
.8548					z_block_ramdrive_init:
.8548	60		rts		                rts
.8549					xt_block_read:
.8549	a0 2e		ldy #$2e	                ldy #blockread_offset
.854b	b1 1e		lda ($1e),y	                lda (up),y
.854d	85 24		sta $24		                sta tmp1
.854f	c8		iny		                iny
.8550	b1 1e		lda ($1e),y	                lda (up),y
.8552	85 25		sta $25		                sta tmp1+1
.8554	6c 24 00	jmp ($0024)	                jmp (tmp1)
.8557					z_block_read:
.8557					xt_block_read_vector:
.8557	ca		dex		                dex
.8558	ca		dex		                dex
.8559	18		clc		                clc
.855a	a5 1e		lda $1e		                lda up
.855c	69 2e		adc #$2e	                adc #blockread_offset
.855e	95 00		sta $00,x	                sta 0,x
.8560	a5 1f		lda $1f		                lda up+1
.8562	69 00		adc #$00	                adc #0          ; Add carry
.8564	95 01		sta $01,x	                sta 1,x
.8566					z_block_read_vector:
.8566	60		rts		                rts
.8567					xt_block_word_error:
.8567	a9 0c		lda #$0c	                lda #err_blockwords
.8569	4c 02 d8	jmp $d802	                jmp error       ; no RTS needed
.856c					z_block_word_error:
.856c					xt_block_write:
.856c	a0 30		ldy #$30	                ldy #blockwrite_offset
.856e	b1 1e		lda ($1e),y	                lda (up),y
.8570	85 24		sta $24		                sta tmp1
.8572	c8		iny		                iny
.8573	b1 1e		lda ($1e),y	                lda (up),y
.8575	85 25		sta $25		                sta tmp1+1
.8577	6c 24 00	jmp ($0024)	                jmp (tmp1)
.857a					z_block_write:
.857a					xt_block_write_vector:
.857a	ca		dex		                dex
.857b	ca		dex		                dex
.857c	18		clc		                clc
.857d	a5 1e		lda $1e		                lda up
.857f	69 30		adc #$30	                adc #blockwrite_offset
.8581	95 00		sta $00,x	                sta 0,x
.8583	a5 1f		lda $1f		                lda up+1
.8585	69 00		adc #$00	                adc #0          ; Add carry
.8587	95 01		sta $01,x	                sta 1,x
.8589					z_block_write_vector:
.8589	60		rts		                rts
.858a					xt_bounds:
.858a	20 f1 d7	jsr $d7f1	                jsr underflow_2
.858d	18		clc		                clc
.858e	b5 00		lda $00,x	                lda 0,x                 ; LSB u
.8590	b4 02		ldy $02,x	                ldy 2,x                 ; LSB addr
.8592	75 02		adc $02,x	                adc 2,x
.8594	95 02		sta $02,x	                sta 2,x                 ; LSB addr+u
.8596	94 00		sty $00,x	                sty 0,x
.8598	b5 01		lda $01,x	                lda 1,x                 ; MSB u
.859a	b4 03		ldy $03,x	                ldy 3,x                 ; MSB addr
.859c	75 03		adc $03,x	                adc 3,x
.859e	95 03		sta $03,x	                sta 3,x                 ; MSB addr+u
.85a0	94 01		sty $01,x	                sty 1,x
.85a2	60		rts		z_bounds:       rts
.85a3					xt_bracket_char:
.85a3	20 3d 86	jsr $863d	                jsr xt_char
.85a6	20 96 93	jsr $9396	                jsr xt_literal
.85a9	60		rts		z_bracket_char: rts
.85aa					xt_bracket_tick:
.85aa	20 ee a1	jsr $a1ee	                jsr xt_tick
.85ad	20 96 93	jsr $9396	                jsr xt_literal
.85b0	60		rts		z_bracket_tick: rts
.85b1					xt_buffblocknum:
.85b1	ca		dex		                dex
.85b2	ca		dex		                dex
.85b3	18		clc		                clc
.85b4	a5 1e		lda $1e		                lda up
.85b6	69 2a		adc #$2a	                adc #buffblocknum_offset        ; Add offset
.85b8	95 00		sta $00,x	                sta 0,x
.85ba	a5 1f		lda $1f		                lda up+1
.85bc	69 00		adc #$00	                adc #0                          ; Adding carry
.85be	95 01		sta $01,x	                sta 1,x
.85c0	60		rts		z_buffblocknum: rts
.85c1					xt_buffer:
.85c1	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.85c3	b1 1e		lda ($1e),y	                lda (up),y      ; Only bits 0 and 1 are used, so only
.85c5	c9 03		cmp #$03	                cmp #3          ; LSB is needed.
.85c7	d0 0c		bne $85d5	                bne _buffer_available ; Unused or not dirty = available
.85c9	20 bf 83	jsr $83bf	                jsr xt_blkbuffer
.85cc	20 b1 85	jsr $85b1	                jsr xt_buffblocknum
.85cf	20 8c 8f	jsr $8f8c	                jsr xt_fetch
.85d2	20 6c 85	jsr $856c	                jsr xt_block_write
.85d5					_buffer_available:
.85d5	a0 2a		ldy #$2a	                ldy #buffblocknum_offset
.85d7	b5 00		lda $00,x	                lda 0,x
.85d9	91 1e		sta ($1e),y	                sta (up),y
.85db	c8		iny		                iny
.85dc	b5 01		lda $01,x	                lda 1,x
.85de	91 1e		sta ($1e),y	                sta (up),y
.85e0	a9 01		lda #$01	                lda #1
.85e2	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.85e4	91 1e		sta ($1e),y	                sta (up),y
.85e6					_done:
.85e6	a0 28		ldy #$28	                ldy #blkbuffer_offset
.85e8	b1 1e		lda ($1e),y	                lda (up),y
.85ea	95 00		sta $00,x	                sta 0,x
.85ec	c8		iny		                iny
.85ed	b1 1e		lda ($1e),y	                lda (up),y
.85ef	95 01		sta $01,x	                sta 1,x
.85f1	60		rts		z_buffer:       rts
.85f2					xt_buffer_colon:
.85f2	20 75 89	jsr $8975	                jsr xt_create
.85f5	20 95 82	jsr $8295	                jsr xt_allot
.85f8	60		rts		z_buffer_colon: rts
.85f9					xt_buffstatus:
.85f9	ca		dex		                dex
.85fa	ca		dex		                dex
.85fb	18		clc		                clc
.85fc	a5 1e		lda $1e		                lda up
.85fe	69 2c		adc #$2c	                adc #buffstatus_offset  ; Add offset
.8600	95 00		sta $00,x	                sta 0,x
.8602	a5 1f		lda $1f		                lda up+1
.8604	69 00		adc #$00	                adc #0                  ; Adding carry
.8606	95 01		sta $01,x	                sta 1,x
.8608	60		rts		z_buffstatus:   rts
.8609					xt_bye:
.8609	4c 2b f0	jmp $f02b	                jmp platform_bye
.860c					z_bye:
.860c					xt_c_comma:
.860c	20 ec d7	jsr $d7ec	                jsr underflow_1
.860f	b5 00		lda $00,x	                lda 0,x
.8611	20 9f d6	jsr $d69f	                jsr cmpl_a
.8614	e8		inx		                inx
.8615	e8		inx		                inx
.8616	60		rts		z_c_comma:      rts
.8617					xt_c_fetch:
.8617	20 ec d7	jsr $d7ec	                jsr underflow_1
.861a	a1 00		lda ($00,x)	                lda (0,x)
.861c	95 00		sta $00,x	                sta 0,x
.861e	74 01		stz $01,x	                stz 1,x         ; Ignore LSB
.8620	60		rts		z_c_fetch:      rts
.8621					xt_c_store:
.8621	20 f1 d7	jsr $d7f1	                jsr underflow_2
.8624	b5 02		lda $02,x	                lda 2,x
.8626	81 00		sta ($00,x)	                sta (0,x)
.8628	e8		inx		                inx
.8629	e8		inx		                inx
.862a	e8		inx		                inx
.862b	e8		inx		                inx
.862c	60		rts		z_c_store:      rts
.862d					xt_cell_plus:
.862d	20 ec d7	jsr $d7ec	                jsr underflow_1
.8630	f6 00		inc $00,x	                inc 0,x
.8632	d0 02		bne $8636	                bne +
.8634	f6 01		inc $01,x	                inc 1,x
.8636					+
.8636	f6 00		inc $00,x	                inc 0,x
.8638	d0 02		bne $863c	                bne _done
.863a	f6 01		inc $01,x	                inc 1,x
.863c					_done:
.863c	60		rts		z_cell_plus:    rts
.863d					xt_char:
.863d	20 eb 98	jsr $98eb	                jsr xt_parse_name
.8640	b5 00		lda $00,x	                lda 0,x
.8642	15 01		ora $01,x	                ora 1,x
.8644	d0 05		bne $864b	                bne _not_empty
.8646	a9 05		lda #$05	                lda #err_noname
.8648	4c 02 d8	jmp $d802	                jmp error
.864b					_not_empty:
.864b	e8		inx		                inx             ; drop number of characters, leave addr
.864c	e8		inx		                inx
.864d	a1 00		lda ($00,x)	                lda (0,x)       ; get character (equivalent to C@)
.864f	95 00		sta $00,x	                sta 0,x
.8651	74 01		stz $01,x	                stz 1,x         ; MSB is always zero
.8653	60		rts		z_char:         rts
.8654					xt_chars:
.8654	20 ec d7	jsr $d7ec	                jsr underflow_1
.8657	60		rts		z_chars:        rts
.8658					xt_cleave:
.8658	20 f1 d7	jsr $d7f1	                jsr underflow_2
.865b	20 6f 95	jsr $956f	                jsr xt_minus_leading    ; -LEADING ( addr u )
.865e	20 6e 92	jsr $926e	                jsr xt_input_to_r       ; save old imput state
.8661	b5 00		lda $00,x	                lda 0,x         ; u is new ciblen
.8663	85 0a		sta $0a		                sta ciblen
.8665	b5 01		lda $01,x	                lda 1,x
.8667	85 0b		sta $0b		                sta ciblen+1
.8669	b5 02		lda $02,x	                lda 2,x         ; addr is new cib
.866b	85 08		sta $08		                sta cib
.866d	b5 03		lda $03,x	                lda 3,x
.866f	85 09		sta $09		                sta cib+1
.8671	64 0c		stz $0c		                stz toin        ; >IN pointer is zero
.8673	64 0d		stz $0d		                stz toin+1
.8675	20 eb 98	jsr $98eb	                jsr xt_parse_name       ; ( addr u addr-s u-s )
.8678	b5 00		lda $00,x	                lda 0,x
.867a	15 01		ora $01,x	                ora 1,x
.867c	f0 23		beq $86a1	                beq _done
.867e	b5 04		lda $04,x	                lda 4,x         ; LSB of original u
.8680	38		sec		                sec
.8681	f5 00		sbc $00,x	                sbc 0,x
.8683	95 04		sta $04,x	                sta 4,x
.8685	b5 05		lda $05,x	                lda 5,x         ; MSB of original u
.8687	f5 01		sbc $01,x	                sbc 1,x
.8689	95 05		sta $05,x	                sta 5,x
.868b	b5 06		lda $06,x	                lda 6,x         ; LSB of original addr
.868d	18		clc		                clc
.868e	75 00		adc $00,x	                adc 0,x
.8690	95 06		sta $06,x	                sta 6,x
.8692	b5 07		lda $07,x	                lda 7,x         ; MSB of original addr
.8694	75 01		adc $01,x	                adc 1,x
.8696	95 07		sta $07,x	                sta 7,x
.8698	20 5b a4	jsr $a45b	                jsr xt_two_swap         ; ( addr-s u-s addr u )
.869b	20 6f 95	jsr $956f	                jsr xt_minus_leading
.869e	20 5b a4	jsr $a45b	                jsr xt_two_swap         ; ( addr u addr-s u-s )
.86a1					_done:
.86a1	20 af 9a	jsr $9aaf	                jsr xt_r_to_input
.86a4	60		rts		z_cleave:       rts
.86a5					xt_cmove:
.86a5	20 f6 d7	jsr $d7f6	                jsr underflow_3
.86a8	b5 02		lda $02,x	                lda 2,x
.86aa	85 26		sta $26		                sta tmp2        ; use tmp2 because easier to remember
.86ac	b5 03		lda $03,x	                lda 3,x
.86ae	85 27		sta $27		                sta tmp2+1
.86b0	b5 04		lda $04,x	                lda 4,x
.86b2	85 24		sta $24		                sta tmp1        ; use tmp1 because easier to remember
.86b4	b5 05		lda $05,x	                lda 5,x
.86b6	85 25		sta $25		                sta tmp1+1
.86b8	a0 00		ldy #$00	                ldy #0
.86ba	b5 01		lda $01,x	                lda 1,x         ; number of whole pages to move
.86bc	f0 0f		beq $86cd	                beq _dopartial
.86be					_page:
.86be	b1 24		lda ($24),y	                lda (tmp1),y
.86c0	91 26		sta ($26),y	                sta (tmp2),y
.86c2	c8		iny		                iny
.86c3	d0 f9		bne $86be	                bne _page
.86c5	e6 25		inc $25		                inc tmp1+1
.86c7	e6 27		inc $27		                inc tmp2+1
.86c9	d6 01		dec $01,x	                dec 1,x
.86cb	d0 f1		bne $86be	                bne _page
.86cd					_dopartial:
.86cd	b5 00		lda $00,x	                lda 0,x         ; length of last page
.86cf	f0 09		beq $86da	                beq _done
.86d1					_partial:
.86d1	b1 24		lda ($24),y	                lda (tmp1),y
.86d3	91 26		sta ($26),y	                sta (tmp2),y
.86d5	c8		iny		                iny
.86d6	d6 00		dec $00,x	                dec 0,x
.86d8	d0 f7		bne $86d1	                bne _partial
.86da					_done:
.86da	8a		txa		                txa
.86db	18		clc		                clc
.86dc	69 06		adc #$06	                adc #6
.86de	aa		tax		                tax
.86df	60		rts		z_cmove:        rts
.86e0					xt_cmove_up:
.86e0	20 f6 d7	jsr $d7f6	                jsr underflow_3
.86e3	b5 02		lda $02,x	                lda 2,x
.86e5	85 26		sta $26		                sta tmp2        ; use tmp2 because easier to remember
.86e7	b5 03		lda $03,x	                lda 3,x
.86e9	18		clc		                clc
.86ea	75 01		adc $01,x	                adc 1,x
.86ec	85 27		sta $27		                sta tmp2+1      ; point to last page of destination
.86ee	b5 04		lda $04,x	                lda 4,x
.86f0	85 24		sta $24		                sta tmp1        ; use tmp1 because easier to remember
.86f2	b5 05		lda $05,x	                lda 5,x
.86f4	18		clc		                clc
.86f5	75 01		adc $01,x	                adc 1,x
.86f7	85 25		sta $25		                sta tmp1+1      ; point to last page of source
.86f9	f6 01		inc $01,x	                inc 1,x         ; allows us to use bne with dec 1,x below
.86fb	b4 00		ldy $00,x	                ldy 0,x         ; length of last page
.86fd	f0 0e		beq $870d	                beq _nopartial
.86ff					_outerloop:
.86ff	88		dey		                dey
.8700	f0 07		beq $8709	                beq _finishpage
.8702					_innerloop:
.8702	b1 24		lda ($24),y	                lda (tmp1),y
.8704	91 26		sta ($26),y	                sta (tmp2),y
.8706	88		dey		                dey
.8707	d0 f9		bne $8702	                bne _innerloop
.8709					_finishpage:
.8709	b2 24		lda ($24)	                lda (tmp1)      ; handle y = 0 separately
.870b	92 26		sta ($26)	                sta (tmp2)
.870d					_nopartial:
.870d	c6 25		dec $25		                dec tmp1+1      ; back up to previous pages
.870f	c6 27		dec $27		                dec tmp2+1
.8711	d6 01		dec $01,x	                dec 1,x
.8713	d0 ea		bne $86ff	                bne _outerloop
.8715					_done:
.8715	8a		txa		                txa
.8716	18		clc		                clc
.8717	69 06		adc #$06	                adc #6
.8719	aa		tax		                tax
.871a	60		rts		z_cmove_up:     rts
.871b					xt_colon:
.871b	a5 16		lda $16		                lda state
.871d	05 17		ora $17		                ora state+1
.871f	f0 05		beq $8726	                beq +
.8721	a9 07		lda #$07	                lda #err_state
.8723	4c 02 d8	jmp $d802	                jmp error
.8726					+
.8726	c6 16		dec $16		                dec state
.8728	c6 17		dec $17		                dec state+1
.872a	a9 40		lda #$40	                lda #%01000000
.872c	04 20		tsb $20		                tsb status
.872e	20 2e d7	jsr $d72e	                jsr current_to_dp
.8731	a5 03		lda $03		                lda dp+1            ; CREATE uses a lot of variables
.8733	48		pha		                pha
.8734	a5 02		lda $02		                lda dp
.8736	48		pha		                pha
.8737	a9 80		lda #$80	                lda #%10000000
.8739	04 20		tsb $20		                tsb status
.873b	20 75 89	jsr $8975	                jsr xt_create
.873e	20 2e d7	jsr $d72e	                jsr current_to_dp   ; This might be able to be omitted
.8741	a5 02		lda $02		                lda dp
.8743	85 04		sta $04		                sta workword
.8745	a5 03		lda $03		                lda dp+1
.8747	85 05		sta $05		                sta workword+1
.8749	68		pla		                pla
.874a	85 02		sta $02		                sta dp
.874c	68		pla		                pla
.874d	85 03		sta $03		                sta dp+1
.874f	20 41 d7	jsr $d741	                jsr dp_to_current
.8752	a5 00		lda $00		                lda cp
.8754	38		sec		                sec
.8755	e9 03		sbc #$03	                sbc #3
.8757	85 00		sta $00		                sta cp
.8759	b0 02		bcs $875d	                bcs _done
.875b	c6 01		dec $01		                dec cp+1
.875d					_done:
.875d	60		rts		z_colon:        rts
.875e					xt_colon_noname:
.875e	a5 16		lda $16		                lda state
.8760	05 17		ora $17		                ora state+1
.8762	f0 05		beq $8769	                beq +
.8764	a9 07		lda #$07	                lda #err_state
.8766	4c 02 d8	jmp $d802	                jmp error
.8769					+
.8769	c6 16		dec $16		                dec state
.876b	c6 17		dec $17		                dec state+1
.876d	a9 40		lda #$40	                lda #%01000000
.876f	14 20		trb $20		                trb status
.8771	a5 00		lda $00		                lda cp
.8773	85 04		sta $04		                sta workword
.8775	a5 01		lda $01		                lda cp+1
.8777	85 05		sta $05		                sta workword+1
.8779					_done:
.8779	60		rts		z_colon_noname:        rts
.877a					xt_comma:
.877a	20 ec d7	jsr $d7ec	                jsr underflow_1
.877d	b5 00		lda $00,x	                lda 0,x
.877f	92 00		sta ($00)	                sta (cp)
.8781	e6 00		inc $00		                inc cp
.8783	d0 02		bne $8787	                bne +
.8785	e6 01		inc $01		                inc cp+1
.8787					+
.8787	b5 01		lda $01,x	                lda 1,x
.8789	92 00		sta ($00)	                sta (cp)
.878b	e6 00		inc $00		                inc cp
.878d	d0 02		bne $8791	                bne _done
.878f	e6 01		inc $01		                inc cp+1
.8791					_done:
.8791	e8		inx		                inx
.8792	e8		inx		                inx
.8793	60		rts		z_comma:        rts
.8794					xt_compare:
.8794	20 fb d7	jsr $d7fb	                jsr underflow_4
.8797	b5 02		lda $02,x	                lda 2,x
.8799	85 26		sta $26		                sta tmp2
.879b	b5 03		lda $03,x	                lda 3,x
.879d	85 27		sta $27		                sta tmp2+1
.879f	b5 06		lda $06,x	                lda 6,x
.87a1	85 24		sta $24		                sta tmp1
.87a3	b5 07		lda $07,x	                lda 7,x
.87a5	85 25		sta $25		                sta tmp1+1
.87a7					_compare_loop:
.87a7	b5 04		lda $04,x	                lda 4,x
.87a9	15 05		ora $05,x	                ora 5,x
.87ab	f0 2c		beq $87d9	                beq _str1_done
.87ad	b5 00		lda $00,x	                lda 0,x
.87af	15 01		ora $01,x	                ora 1,x
.87b1	f0 3a		beq $87ed	                beq _greater    ; Str2 empty first
.87b3					_check_letter:
.87b3	b2 24		lda ($24)	                lda (tmp1)
.87b5	d2 26		cmp ($26)	                cmp (tmp2)
.87b7	90 26		bcc $87df	                bcc _less
.87b9	d0 32		bne $87ed	                bne _greater
.87bb					_next_letter:
.87bb	e6 24		inc $24		                inc tmp1
.87bd	d0 02		bne $87c1	                bne +
.87bf	e6 25		inc $25		                inc tmp1+1
.87c1					+
.87c1	e6 26		inc $26		                inc tmp2
.87c3	d0 02		bne $87c7	                bne +
.87c5	e6 27		inc $27		                inc tmp2+1
.87c7					+
.87c7	b5 04		lda $04,x	                lda 4,x
.87c9	d0 02		bne $87cd	                bne +
.87cb	d6 05		dec $05,x	                dec 5,x
.87cd					+
.87cd	d6 04		dec $04,x	                dec 4,x
.87cf	b5 00		lda $00,x	                lda 0,x
.87d1	d0 02		bne $87d5	                bne +
.87d3	d6 01		dec $01,x	                dec 1,x
.87d5					+
.87d5	d6 00		dec $00,x	                dec 0,x
.87d7	80 ce		bra $87a7	                bra _compare_loop
.87d9					_str1_done:
.87d9	b5 00		lda $00,x	                lda 0,x
.87db	15 01		ora $01,x	                ora 1,x
.87dd	f0 08		beq $87e7	                beq _equal      ; Both out of letters
.87df					_less:
.87df	a9 ff		lda #$ff	                lda #$FF
.87e1	95 06		sta $06,x	                sta 6,x
.87e3	95 07		sta $07,x	                sta 7,x
.87e5	80 0c		bra $87f3	                bra _done
.87e7					_equal:
.87e7	74 06		stz $06,x	                stz 6,x
.87e9	74 07		stz $07,x	                stz 7,x
.87eb	80 06		bra $87f3	                bra _done
.87ed					_greater:
.87ed	a9 01		lda #$01	                lda #1
.87ef	95 06		sta $06,x	                sta 6,x
.87f1	74 07		stz $07,x	                stz 7,x
.87f3					_done:
.87f3	8a		txa		                txa
.87f4	18		clc		                clc
.87f5	69 06		adc #$06	                adc #6
.87f7	aa		tax		                tax
.87f8	60		rts		z_compare:      rts
.87f9					xt_compile_comma:
.87f9	20 ec d7	jsr $d7ec	                jsr underflow_1
.87fc	b5 01		lda $01,x	                lda 1,x                 ; MSB
.87fe	48		pha		                pha
.87ff	b5 00		lda $00,x	                lda 0,x
.8801	48		pha		                pha                     ; LSB
.8802	20 84 92	jsr $9284	                jsr xt_int_to_name      ; ( xt -- nt )
.8805	b5 00		lda $00,x	                lda 0,x
.8807	15 01		ora $01,x	                ora 1,x
.8809	d0 03		bne $880e	                bne _check_nt
.880b	4c f6 88	jmp $88f6	                jmp _compile_as_jump
.880e					_check_nt:
.880e	b5 00		lda $00,x	                lda 0,x
.8810	85 2c		sta $2c		                sta tmptos
.8812	b5 01		lda $01,x	                lda 1,x
.8814	85 2d		sta $2d		                sta tmptos+1
.8816	f6 00		inc $00,x	                inc 0,x
.8818	d0 02		bne $881c	                bne +
.881a	f6 01		inc $01,x	                inc 1,x                 ; ( nt -- nt+1 )
.881c					+
.881c	a1 00		lda ($00,x)	                lda (0,x)
.881e	85 28		sta $28		                sta tmp3                ; keep copy of status byte for NN
.8820	29 02		and #$02	                and #AN                 ; mask all but Always Native (AN) bit
.8822	f0 0d		beq $8831	                beq _compile_check
.8824	a5 2c		lda $2c		                lda tmptos
.8826	95 00		sta $00,x	                sta 0,x
.8828	a5 2d		lda $2d		                lda tmptos+1
.882a	95 01		sta $01,x	                sta 1,x
.882c	20 52 a7	jsr $a752	                jsr xt_wordsize         ; ( nt -- u )
.882f	80 27		bra $8858	                bra _compile_as_code
.8831					_compile_check:
.8831	a5 28		lda $28		                lda tmp3
.8833	29 08		and #$08	                and #NN
.8835	f0 03		beq $883a	                beq _check_size_limit
.8837	4c f6 88	jmp $88f6	                jmp _compile_as_jump    ; too far for BRA
.883a					_check_size_limit:
.883a	a5 2c		lda $2c		                lda tmptos
.883c	95 00		sta $00,x	                sta 0,x
.883e	a5 2d		lda $2d		                lda tmptos+1
.8840	95 01		sta $01,x	                sta 1,x
.8842	20 52 a7	jsr $a752	                jsr xt_wordsize         ; ( nt -- u )
.8845	b5 01		lda $01,x	                lda 1,x
.8847	c5 1b		cmp $1b		                cmp nc_limit+1
.8849	90 0d		bcc $8858	                bcc _compile_as_code    ; user-defined limit MSB
.884b	d0 08		bne $8855	                bne _jumpto_compile_as_jump
.884d	b5 00		lda $00,x	                lda 0,x
.884f	c5 1a		cmp $1a		                cmp nc_limit            ; user-defined limit LSB
.8851	90 05		bcc $8858	                bcc _compile_as_code    ; Allow native compiling for less
.8853	f0 03		beq $8858	                beq _compile_as_code    ; than or equal to the limit.
.8855					_jumpto_compile_as_jump:
.8855	4c f6 88	jmp $88f6	                jmp _compile_as_jump    ; too far for BRA
.8858					_compile_as_code:
.8858	ca		dex		                dex
.8859	ca		dex		                dex                     ; ( -- u ? )
.885a	ca		dex		                dex
.885b	ca		dex		                dex                     ; ( -- u ? ? )
.885c	b5 04		lda $04,x	                lda 4,x
.885e	95 00		sta $00,x	                sta 0,x                 ; LSB of u
.8860	b5 05		lda $05,x	                lda 5,x
.8862	95 01		sta $01,x	                sta 1,x                 ; ( -- u ? u )
.8864	68		pla		                pla
.8865	95 04		sta $04,x	                sta 4,x                 ; LSB of xt
.8867	68		pla		                pla
.8868	95 05		sta $05,x	                sta 5,x                 ; ( -- xt ? u )
.886a	a5 00		lda $00		                lda cp                  ; LSB of cp
.886c	95 02		sta $02,x	                sta 2,x
.886e	a5 01		lda $01		                lda cp+1
.8870	95 03		sta $03,x	                sta 3,x                 ; ( -- xt cp u )
.8872	a0 00		ldy #$00	                ldy #0
.8874					_strip_loop:
.8874	b9 e4 88	lda $88e4,y	                lda _strip_table,y      ; LSB of first word
.8877	d5 04		cmp $04,x	                cmp 4,x                 ; LSB of xt
.8879	d0 07		bne $8882	                bne _next_entry
.887b	b9 e5 88	lda $88e5,y	                lda _strip_table+1,y
.887e	d5 05		cmp $05,x	                cmp 5,x
.8880	f0 0c		beq $888e	                beq _found_entry
.8882					_next_entry:
.8882	b9 e4 88	lda $88e4,y	                lda _strip_table,y      ; pointing to LSB
.8885	19 e5 88	ora $88e5,y	                ora _strip_table+1,y    ; get MSB
.8888	f0 22		beq $88ac	                beq _underflow_strip    ; table done, let's get out of here
.888a	c8		iny		                iny
.888b	c8		iny		                iny
.888c	80 e6		bra $8874	                bra _strip_loop
.888e					_found_entry:
.888e	98		tya		                tya
.888f	4a		lsr a		                lsr
.8890	a8		tay		                tay
.8891	b9 f0 88	lda $88f0,y	                lda _strip_size,y
.8894	85 2c		sta $2c		                sta tmptos              ; save a copy
.8896	18		clc		                clc
.8897	75 04		adc $04,x	                adc 4,x
.8899	95 04		sta $04,x	                sta 4,x
.889b	90 02		bcc $889f	                bcc+
.889d	f6 05		inc $05,x	                inc 5,x                 ; we just care about the carry
.889f					+
.889f	06 2c		asl $2c		                asl tmptos
.88a1	38		sec		                sec
.88a2	b5 00		lda $00,x	                lda 0,x
.88a4	e5 2c		sbc $2c		                sbc tmptos
.88a6	95 00		sta $00,x	                sta 0,x
.88a8	b0 02		bcs $88ac	                bcs +
.88aa	d6 01		dec $01,x	                dec 1,x                 ; we just care about the borrow
.88ac					+
.88ac					_underflow_strip:
.88ac	a5 1c		lda $1c		                lda uf_strip
.88ae	05 1d		ora $1d		                ora uf_strip+1
.88b0	f0 1c		beq $88ce	                beq _specials_done
.88b2	a5 28		lda $28		                lda tmp3
.88b4	29 10		and #$10	                and #UF
.88b6	f0 16		beq $88ce	                beq _specials_done
.88b8	18		clc		                clc
.88b9	b5 04		lda $04,x	                lda 4,x
.88bb	69 03		adc #$03	                adc #3
.88bd	95 04		sta $04,x	                sta 4,x
.88bf	90 02		bcc $88c3	                bcc +
.88c1	f6 05		inc $05,x	                inc 5,x                  ; we just care about the carry
.88c3					+
.88c3	38		sec		                sec
.88c4	b5 00		lda $00,x	                lda 0,x
.88c6	e9 03		sbc #$03	                sbc #3
.88c8	95 00		sta $00,x	                sta 0,x
.88ca	b0 02		bcs $88ce	                bcs +
.88cc	d6 01		dec $01,x	                dec 1,x                  ; we just care about the borrow
.88ce					+
.88ce					_specials_done:
.88ce	b5 01		lda $01,x	                lda 1,x                 ; MSB
.88d0	48		pha		                pha
.88d1	b5 00		lda $00,x	                lda 0,x                 ; LSB
.88d3	48		pha		                pha
.88d4	20 ce 95	jsr $95ce	                jsr xt_move
.88d7	18		clc		                clc
.88d8	68		pla		                pla                     ; LSB
.88d9	65 00		adc $00		                adc cp
.88db	85 00		sta $00		                sta cp
.88dd	68		pla		                pla                     ; MSB
.88de	65 01		adc $01		                adc cp+1
.88e0	85 01		sta $01		                sta cp+1
.88e2	80 2c		bra $8910	                bra _done
.88e4					_strip_table:
>88e4	9e 9a 89 9a 4d a3		                .word xt_r_from, xt_r_fetch, xt_to_r    ; R>, R@, >R
>88ea	7f a4 05 a4 00 00		                .word xt_two_to_r, xt_two_r_from, 0000  ; 2>R, 2R>, EOL
.88f0					_strip_size:
>88f0	04 04 04 06 06 00		                .byte 4, 4, 4, 6, 6, 0          ; R>, R@, >R, 2>R, 2R>, EOL
.88f6					_compile_as_jump:
.88f6	a9 20		lda #$20	                lda #$20
.88f8	92 00		sta ($00)	                sta (cp)
.88fa	a0 01		ldy #$01	                ldy #1
.88fc	68		pla		                pla             ; LSB
.88fd	91 00		sta ($00),y	                sta (cp),y
.88ff	c8		iny		                iny
.8900	68		pla		                pla             ; MSB
.8901	91 00		sta ($00),y	                sta (cp),y
.8903	a9 03		lda #$03	                lda #3
.8905	18		clc		                clc
.8906	65 00		adc $00		                adc cp
.8908	85 00		sta $00		                sta cp
.890a	90 02		bcc $890e	                bcc +
.890c	e6 01		inc $01		                inc cp+1
.890e					+
.890e	e8		inx		                inx             ; drop xt
.890f	e8		inx		                inx
.8910					_done:
.8910					z_compile_comma:
.8910	60		rts		                rts
.8911					xt_compile_only:
.8911	20 2e d7	jsr $d72e	                jsr current_to_dp
.8914	a0 01		ldy #$01	                ldy #1          ; offset for status byte
.8916	b1 02		lda ($02),y	                lda (dp),y
.8918	09 01		ora #$01	                ora #CO        ; make sure bit 7 is set
.891a	91 02		sta ($02),y	                sta (dp),y
.891c	60		rts		z_compile_only: rts
.891d					xt_value:
.891d					xt_constant:
.891d	20 ec d7	jsr $d7ec	                jsr underflow_1
.8920	20 75 89	jsr $8975	                jsr xt_create
.8923	38		sec		                sec
.8924	a5 00		lda $00		                lda cp
.8926	e9 02		sbc #$02	                sbc #2
.8928	85 24		sta $24		                sta tmp1
.892a	a5 01		lda $01		                lda cp+1
.892c	e9 00		sbc #$00	                sbc #0
.892e	85 25		sta $25		                sta tmp1+1
.8930	a9 a8		lda #$a8	                lda #<doconst           ; LSB of DOCONST
.8932	92 24		sta ($24)	                sta (tmp1)
.8934	a0 01		ldy #$01	                ldy #1
.8936	a9 d6		lda #$d6	                lda #>doconst           ; MSB of DOCONST
.8938	91 24		sta ($24),y	                sta (tmp1),y
.893a	20 7a 87	jsr $877a	                jsr xt_comma            ; drop through to adjust_z
.893d					adjust_z:
.893d	20 47 93	jsr $9347	                jsr xt_latestnt         ; gives us ( -- nt )
.8940	b5 00		lda $00,x	                lda 0,x
.8942	85 24		sta $24		                sta tmp1
.8944	b5 01		lda $01,x	                lda 1,x
.8946	85 25		sta $25		                sta tmp1+1
.8948	a0 06		ldy #$06	                ldy #6
.894a	b1 24		lda ($24),y	                lda (tmp1),y
.894c	18		clc		                clc
.894d	69 02		adc #$02	                adc #2
.894f	91 24		sta ($24),y	                sta (tmp1),y
.8951	c8		iny		                iny
.8952	b1 24		lda ($24),y	                lda (tmp1),y
.8954	69 00		adc #$00	                adc #0                  ; only need carry
.8956	91 24		sta ($24),y	                sta (tmp1),y
.8958	e8		inx		                inx
.8959	e8		inx		                inx
.895a					z_value:
.895a	60		rts		z_constant:     rts
.895b					xt_count:
.895b	20 ec d7	jsr $d7ec	                jsr underflow_1
.895e	a1 00		lda ($00,x)	                lda (0,x)       ; Get number of characters (255 max)
.8960	a8		tay		                tay
.8961	f6 00		inc $00,x	                inc 0,x         ; LSB
.8963	d0 02		bne $8967	                bne +
.8965	f6 01		inc $01,x	                inc 1,x         ; MSB
.8967	98		tya		+               tya
.8968	ca		dex		                dex
.8969	ca		dex		                dex
.896a	95 00		sta $00,x	                sta 0,x         ; LSB
.896c	74 01		stz $01,x	                stz 1,x         ; MSB, always zero
.896e	60		rts		z_count:        rts
.896f					xt_cr:
.896f	a9 0a		lda #$0a	                lda #AscLF
.8971	20 02 8e	jsr $8e02	                jsr emit_a
.8974	60		rts		z_cr:           rts
.8975					xt_create:
.8975	20 eb 98	jsr $98eb	                jsr xt_parse_name       ; ( addr u )
.8978	b5 00		lda $00,x	                lda 0,x
.897a	15 01		ora $01,x	                ora 1,x
.897c	d0 05		bne $8983	                bne _got_name
.897e	a9 05		lda #$05	                lda #err_noname
.8980	4c 02 d8	jmp $d802	                jmp error
.8983					_got_name:
.8983	74 01		stz $01,x	                stz 1,x
.8985	20 95 a3	jsr $a395	                jsr xt_two_dup          ; ( addr u addr u )
.8988	20 e7 8f	jsr $8fe7	                jsr xt_find_name        ; ( addr u flag ) (non-zero nt as flag)
.898b	b5 00		lda $00,x	                lda 0,x
.898d	15 01		ora $01,x	                ora 1,x
.898f	f0 1e		beq $89af	                beq _new_name           ; We haven't seen this one before.
.8991	e8		inx		                inx                     ; Drop flag (nt) from find-name.
.8992	e8		inx		                inx
.8993	24 20		bit $20		                bit status
.8995	10 08		bpl $899f	                bpl _redefined_name     ; Bit 7 is zero, so print the message.
.8997	a9 80		lda #$80	                lda #$80                ; Set bit 7 to indicate dup
.8999	05 20		ora $20		                ora status
.899b	85 20		sta $20		                sta status
.899d	80 18		bra $89b7	                bra _process_name
.899f					_redefined_name:
.899f	a9 02		lda #$02	                lda #str_redefined
.89a1	20 28 d8	jsr $d828	                jsr print_string_no_lf
.89a4	20 95 a3	jsr $a395	                jsr xt_two_dup           ; ( addr u addr u )
.89a7	20 e0 a4	jsr $a4e0	                jsr xt_type
.89aa	20 fb a0	jsr $a0fb	                jsr xt_space
.89ad	80 08		bra $89b7	                bra _process_name
.89af					_new_name:
.89af	e8		inx		                inx                     ; Drop flag (0) from find-name.
.89b0	e8		inx		                inx
.89b1	a9 7f		lda #$7f	                lda #$7F                ; Clear bit 0 of status to indicate new word.
.89b3	25 20		and $20		                and status
.89b5	85 20		sta $20		                sta status
.89b7					_process_name:
.89b7	b5 00		lda $00,x	                lda 0,x
.89b9	85 26		sta $26		                sta tmp2                ; store length of string in tmp2
.89bb	a5 00		lda $00		                lda cp
.89bd	85 24		sta $24		                sta tmp1
.89bf	a5 01		lda $01		                lda cp+1
.89c1	85 25		sta $25		                sta tmp1+1
.89c3	b5 00		lda $00,x	                lda 0,x
.89c5	18		clc		                clc
.89c6	69 08		adc #$08	                adc #8
.89c8	85 28		sta $28		                sta tmp3                ; total header length
.89ca	18		clc		                clc
.89cb	69 03		adc #$03	                adc #3
.89cd	95 00		sta $00,x	                sta 0,x
.89cf	74 01		stz $01,x	                stz 1,x         ; max header size is 255 chars
.89d1	20 95 82	jsr $8295	                jsr xt_allot    ; ( addr )
.89d4	20 2e d7	jsr $d72e	                jsr current_to_dp
.89d7	a0 00		ldy #$00	                ldy #0
.89d9	a5 26		lda $26		                lda tmp2
.89db	91 24		sta ($24),y	                sta (tmp1),y
.89dd	a9 08		lda #$08	                lda #NN
.89df	09 20		ora #$20	                ora #HC
.89e1	c8		iny		                iny
.89e2	91 24		sta ($24),y	                sta (tmp1),y
.89e4	c8		iny		                iny
.89e5	a5 02		lda $02		                lda dp
.89e7	91 24		sta ($24),y	                sta (tmp1),y
.89e9	c8		iny		                iny
.89ea	a5 03		lda $03		                lda dp+1
.89ec	91 24		sta ($24),y	                sta (tmp1),y
.89ee	c8		iny		                iny
.89ef	a5 25		lda $25		                lda tmp1+1
.89f1	85 03		sta $03		                sta dp+1
.89f3	a5 24		lda $24		                lda tmp1
.89f5	85 02		sta $02		                sta dp
.89f7	18		clc		                clc
.89f8	65 28		adc $28		                adc tmp3        ; add total header length
.89fa	91 24		sta ($24),y	                sta (tmp1),y
.89fc	48		pha		                pha             ; we need this in the next step
.89fd	c8		iny		                iny
.89fe	a5 25		lda $25		                lda tmp1+1
.8a00	69 00		adc #$00	                adc #0          ; only need the carry
.8a02	91 24		sta ($24),y	                sta (tmp1),y
.8a04	c8		iny		                iny
.8a05	68		pla		                pla             ; LSB of "z_" address
.8a06	18		clc		                clc
.8a07	69 03		adc #$03	                adc #3
.8a09	91 24		sta ($24),y	                sta (tmp1),y
.8a0b	88		dey		                dey             ; get the MSB of xt back
.8a0c	b1 24		lda ($24),y	                lda (tmp1),y
.8a0e	69 00		adc #$00	                adc #0          ; only need the carry
.8a10	c8		iny		                iny
.8a11	c8		iny		                iny
.8a12	91 24		sta ($24),y	                sta (tmp1),y
.8a14	c8		iny		                iny
.8a15	b5 00		lda $00,x	                lda 0,x
.8a17	38		sec		                sec
.8a18	e9 08		sbc #$08	                sbc #8
.8a1a	85 2c		sta $2c		                sta tmptos
.8a1c	b5 01		lda $01,x	                lda 1,x
.8a1e	e9 00		sbc #$00	                sbc #0          ; only need carry
.8a20	85 2d		sta $2d		                sta tmptos+1
.8a22					_name_loop:
.8a22	b1 2c		lda ($2c),y	                lda (tmptos),y
.8a24	c9 5b		cmp #$5b	                cmp #$5B         ; ASCII '[' (one past Z)
.8a26	b0 07		bcs $8a2f	                bcs _store_name
.8a28	c9 41		cmp #$41	                cmp #$41        ; ASCII 'A'
.8a2a	90 03		bcc $8a2f	                bcc _store_name
.8a2c	18		clc		                clc
.8a2d	69 20		adc #$20	                adc #$20
.8a2f					_store_name:
.8a2f	91 24		sta ($24),y	                sta (tmp1),y
.8a31	c8		iny		                iny
.8a32	c6 26		dec $26		                dec tmp2
.8a34	d0 ec		bne $8a22	                bne _name_loop
.8a36	a9 20		lda #$20	                lda #$20        ; opcode of JSR
.8a38	91 24		sta ($24),y	                sta (tmp1),y
.8a3a	c8		iny		                iny
.8a3b	a9 ee		lda #$ee	                lda #<dovar
.8a3d	91 24		sta ($24),y	                sta (tmp1),y
.8a3f	c8		iny		                iny
.8a40	a9 d6		lda #$d6	                lda #>dovar
.8a42	91 24		sta ($24),y	                sta (tmp1),y
.8a44	20 41 d7	jsr $d741	                jsr dp_to_current
.8a47	e8		inx		                inx
.8a48	e8		inx		                inx
.8a49	60		rts		z_create:       rts
.8a4a					xt_d_minus:
.8a4a	20 fb d7	jsr $d7fb	                jsr underflow_4 ; two double numbers
.8a4d	38		sec		                sec
.8a4e	b5 06		lda $06,x	                lda 6,x         ; LSB of lower word
.8a50	f5 02		sbc $02,x	                sbc 2,x
.8a52	95 06		sta $06,x	                sta 6,x
.8a54	b5 07		lda $07,x	                lda 7,x         ; MSB of lower word
.8a56	f5 03		sbc $03,x	                sbc 3,x
.8a58	95 07		sta $07,x	                sta 7,x
.8a5a	b5 04		lda $04,x	                lda 4,x         ; LSB of upper word
.8a5c	f5 00		sbc $00,x	                sbc 0,x
.8a5e	95 04		sta $04,x	                sta 4,x
.8a60	b5 05		lda $05,x	                lda 5,x         ; MSB of upper word
.8a62	f5 01		sbc $01,x	                sbc 1,x
.8a64	95 05		sta $05,x	                sta 5,x
.8a66	e8		inx		                inx
.8a67	e8		inx		                inx
.8a68	e8		inx		                inx
.8a69	e8		inx		                inx
.8a6a	60		rts		z_d_minus:      rts
.8a6b					xt_d_plus:
.8a6b	20 fb d7	jsr $d7fb	                jsr underflow_4 ; two double numbers
.8a6e	18		clc		                clc
.8a6f	b5 02		lda $02,x	                lda 2,x         ; LSB of lower word
.8a71	75 06		adc $06,x	                adc 6,x
.8a73	95 06		sta $06,x	                sta 6,x
.8a75	b5 03		lda $03,x	                lda 3,x         ; MSB of lower word
.8a77	75 07		adc $07,x	                adc 7,x
.8a79	95 07		sta $07,x	                sta 7,x
.8a7b	b5 00		lda $00,x	                lda 0,x         ; LSB of upper word
.8a7d	75 04		adc $04,x	                adc 4,x
.8a7f	95 04		sta $04,x	                sta 4,x
.8a81	b5 01		lda $01,x	                lda 1,x         ; MSB of upper word
.8a83	75 05		adc $05,x	                adc 5,x
.8a85	95 05		sta $05,x	                sta 5,x
.8a87	e8		inx		                inx
.8a88	e8		inx		                inx
.8a89	e8		inx		                inx
.8a8a	e8		inx		                inx
.8a8b	60		rts		z_d_plus:       rts
.8a8c					xt_d_to_s:
.8a8c	20 f1 d7	jsr $d7f1	                jsr underflow_2
.8a8f	e8		inx		                inx
.8a90	e8		inx		                inx
.8a91	60		rts		z_d_to_s:       rts
.8a92					xt_dabs:
.8a92	20 f1 d7	jsr $d7f1	                jsr underflow_2 ; double number
.8a95	b5 01		lda $01,x	                lda 1,x         ; MSB of high cell
.8a97	10 17		bpl $8ab0	                bpl _done       ; positive, we get off light
.8a99	a0 00		ldy #$00	                ldy #0
.8a9b	38		sec		                sec
.8a9c	98		tya		                tya
.8a9d	f5 02		sbc $02,x	                sbc 2,x         ; LSB of low cell
.8a9f	95 02		sta $02,x	                sta 2,x
.8aa1	98		tya		                tya
.8aa2	f5 03		sbc $03,x	                sbc 3,x         ; MSB of low cell
.8aa4	95 03		sta $03,x	                sta 3,x
.8aa6	98		tya		                tya
.8aa7	f5 00		sbc $00,x	                sbc 0,x         ; LSB of high cell
.8aa9	95 00		sta $00,x	                sta 0,x
.8aab	98		tya		                tya
.8aac	f5 01		sbc $01,x	                sbc 1,x         ; MSB of high cell
.8aae	95 01		sta $01,x	                sta 1,x
.8ab0					_done:
.8ab0	60		rts		z_dabs:         rts
.8ab1					xt_decimal:
.8ab1	a9 0a		lda #$0a	                lda #10
.8ab3	85 18		sta $18		                sta base
.8ab5	64 19		stz $19		                stz base+1              ; paranoid
.8ab7	60		rts		z_decimal:      rts
.8ab8					xt_defer:
.8ab8	20 75 89	jsr $8975	                jsr xt_create
.8abb	a5 00		lda $00		                lda cp          ; LSB
.8abd	38		sec		                sec
.8abe	e9 02		sbc #$02	                sbc #2
.8ac0	85 24		sta $24		                sta tmp1
.8ac2	a5 01		lda $01		                lda cp+1        ; MSB
.8ac4	e9 00		sbc #$00	                sbc #0          ; we only care about the borrow
.8ac6	85 25		sta $25		                sta tmp1+1
.8ac8	a0 00		ldy #$00	                ldy #0
.8aca	a9 bc		lda #$bc	                lda #<dodefer   ; LSB
.8acc	91 24		sta ($24),y	                sta (tmp1),y
.8ace	c8		iny		                iny
.8acf	a9 d6		lda #$d6	                lda #>dodefer   ; MSB
.8ad1	91 24		sta ($24),y	                sta (tmp1),y
.8ad3	a9 d0		lda #$d0	                lda #<defer_error
.8ad5	92 00		sta ($00)	                sta (cp)
.8ad7	e6 00		inc $00		                inc cp
.8ad9	d0 02		bne $8add	                bne +
.8adb	e6 01		inc $01		                inc cp+1
.8add					+
.8add	a9 d6		lda #$d6	                lda #>defer_error
.8adf	92 00		sta ($00)	                sta (cp)
.8ae1	e6 00		inc $00		                inc cp
.8ae3	d0 02		bne $8ae7	                bne +
.8ae5	e6 01		inc $01		                inc cp+1
.8ae7					+
.8ae7	20 3d 89	jsr $893d	                jsr adjust_z    ; adjust header to correct length
.8aea	60		rts		z_defer:        rts
.8aeb					xt_defer_fetch:
.8aeb	20 6a a2	jsr $a26a	                jsr xt_to_body
.8aee	20 8c 8f	jsr $8f8c	                jsr xt_fetch
.8af1	60		rts		z_defer_fetch:  rts
.8af2					xt_defer_store:
.8af2	20 6a a2	jsr $a26a	                jsr xt_to_body
.8af5	20 6a a1	jsr $a16a	                jsr xt_store
.8af8	60		rts		z_defer_store:  rts
.8af9					xt_definitions:
.8af9	a0 1f		ldy #$1f	                ldy #search_order_offset    ; Transfer byte variable
.8afb	b1 1e		lda ($1e),y	                lda (up),y                  ; SEARCH_ORDER[0] to
.8afd	a0 04		ldy #$04	                ldy #current_offset         ; byte variable CURRENT.
.8aff	91 1e		sta ($1e),y	                sta (up),y
.8b01	60		rts		z_definitions:  rts
.8b02					xt_depth:
.8b02	a9 78		lda #$78	                lda #dsp0
.8b04	86 2a		stx $2a		                stx tmpdsp
.8b06	38		sec		                sec
.8b07	e5 2a		sbc $2a		                sbc tmpdsp
.8b09	4a		lsr a		                lsr
.8b0a	ca		dex		                dex
.8b0b	ca		dex		                dex
.8b0c	95 00		sta $00,x	                sta 0,x
.8b0e	74 01		stz $01,x	                stz 1,x
.8b10	60		rts		z_depth:        rts
.8b11					xt_digit_question:
.8b11	20 ec d7	jsr $d7ec	                jsr underflow_1
.8b14	ca		dex		                dex
.8b15	ca		dex		                dex
.8b16	74 00		stz $00,x	                stz 0,x                 ; default flag is failure
.8b18	74 01		stz $01,x	                stz 1,x
.8b1a	74 03		stz $03,x	                stz 3,x                 ; paranoid
.8b1c	b5 02		lda $02,x	                lda 2,x
.8b1e	c9 30		cmp #$30	                cmp #'0'
.8b20	90 23		bcc $8b45	                bcc _done               ; failure flag already set
.8b22	c9 3a		cmp #$3a	                cmp #'9'+1               ; this is actually ":"
.8b24	90 12		bcc $8b38	                bcc _checkbase
.8b26	c9 41		cmp #$41	                cmp #'A'
.8b28	90 1b		bcc $8b45	                bcc _done               ; failure flag is already set
.8b2a	c9 61		cmp #$61	                cmp #'a'
.8b2c	90 07		bcc $8b35	                bcc _case_done          ; not lower case, too low
.8b2e	c9 7b		cmp #$7b	                cmp #'z'+1
.8b30	b0 03		bcs $8b35	                bcs _case_done          ; not lower case, too high
.8b32	18		clc		                clc                     ; just right
.8b33	69 e0		adc #$e0	                adc #$e0                ; offset to upper case (wraps)
.8b35					_case_done:
.8b35	38		sec		                sec
.8b36	e9 07		sbc #$07	                sbc #7                  ; fall through to _checkbase
.8b38					_checkbase:
.8b38	38		sec		                sec
.8b39	e9 30		sbc #$30	                sbc #'0'                 ; this is also the conversion step
.8b3b	c5 18		cmp $18		                cmp base
.8b3d	b0 06		bcs $8b45	                bcs _done               ; already have false flag
.8b3f	95 02		sta $02,x	                sta 2,x                 ; put number in NOS
.8b41	d6 00		dec $00,x	                dec 0,x                 ; set success flag
.8b43	d6 01		dec $01,x	                dec 1,x
.8b45					_done:
.8b45					z_digit_question:
.8b45	60		rts		                rts
.8b46					xt_disasm:
.8b46	20 f1 d7	jsr $d7f1	                jsr underflow_2
.8b49	20 b4 ac	jsr $acb4	                jsr disassembler
.8b4c	60		rts		z_disasm:       rts
.8b4d					xt_dnegate:
.8b4d	20 f1 d7	jsr $d7f1	                jsr underflow_2 ; double number
.8b50	a0 00		ldy #$00	     		ldy #0
.8b52	38		sec		                sec
.8b53	98		tya		                tya
.8b54	f5 02		sbc $02,x	                sbc 2,x         ; LSB of low cell
.8b56	95 02		sta $02,x	                sta 2,x
.8b58	98		tya		                tya
.8b59	f5 03		sbc $03,x	                sbc 3,x         ; MSB of low cell
.8b5b	95 03		sta $03,x	                sta 3,x
.8b5d	98		tya		                tya
.8b5e	f5 00		sbc $00,x	                sbc 0,x         ; LSB of high cell
.8b60	95 00		sta $00,x	                sta 0,x
.8b62	98		tya		                tya
.8b63	f5 01		sbc $01,x	                sbc 1,x         ; MSB of high cell
.8b65	95 01		sta $01,x	                sta 1,x
.8b67	60		rts		z_dnegate:      rts
.8b68					xt_question_do:
.8b68	a9 ff		lda #$ff	                lda #$ff                ; -1 is ?DO, jump to common code
.8b6a	85 24		sta $24		                sta tmp1
.8b6c	80 02		bra $8b70	                bra do_common           ; skip flag for DO
.8b6e					xt_do:
.8b6e	64 24		stz $24		                stz tmp1                ; 0 is DO, drop through to DO_COMMON
.8b70					do_common:
.8b70	ca		dex		                dex
.8b71	ca		dex		                dex
.8b72	a5 00		lda $00		                lda cp
.8b74	95 00		sta $00,x	                sta 0,x                 ; LSB
.8b76	a5 01		lda $01		                lda cp+1
.8b78	95 01		sta $01,x	                sta 1,x                 ; MSB   ( limit start here )
.8b7a	a9 05		lda #$05	                lda #5                  ; we don't really care about the value,
.8b7c	a8		tay		                tay                     ; so we use 5 to be tricky
.8b7d					_loop:
.8b7d	91 00		sta ($00),y	                sta (CP),y
.8b7f	88		dey		                dey
.8b80	10 fb		bpl $8b7d	                bpl _loop
.8b82	1a		inc a		                ina             ; we used 5 as a dummy value, this is why
.8b83	18		clc		                clc
.8b84	65 00		adc $00		                adc CP
.8b86	85 00		sta $00		                sta CP
.8b88	90 02		bcc $8b8c	                bcc +
.8b8a	e6 01		inc $01		                inc CP+1
.8b8c					+
.8b8c	a5 24		lda $24		                lda tmp1
.8b8e	f0 17		beq $8ba7	                beq _compile_do
.8b90	a0 14		ldy #$14	                ldy #question_do_runtime_end-question_do_runtime
.8b92	5a		phy		                phy             ; save counter to calculate new CP
.8b93					-
.8b93	b9 ed 8b	lda $8bed,y	                lda question_do_runtime,y
.8b96	91 00		sta ($00),y	                sta (cp),y
.8b98	88		dey		                dey
.8b99	10 f8		bpl $8b93	                bpl -
.8b9b	68		pla		                pla             ; retrieve counter
.8b9c	18		clc		                clc
.8b9d	65 00		adc $00		                adc cp
.8b9f	85 00		sta $00		                sta cp
.8ba1	a5 01		lda $01		                lda cp+1
.8ba3	69 00		adc #$00	                adc #0          ; only care about carry
.8ba5	85 01		sta $01		                sta cp+1        ; fall through to _compile_do
.8ba7					_compile_do:
.8ba7	a0 24		ldy #$24	                ldy #do_runtime_end-do_runtime  ; counter
.8ba9	5a		phy		                phy             ; save counter to calculate new CP
.8baa					-
.8baa	b9 c9 8b	lda $8bc9,y	                lda do_runtime,y
.8bad	91 00		sta ($00),y	                sta (cp),y
.8baf	88		dey		                dey
.8bb0	10 f8		bpl $8baa	                bpl -
.8bb2	68		pla		                pla             ; retrieve counter
.8bb3	18		clc		                clc
.8bb4	65 00		adc $00		                adc cp
.8bb6	85 00		sta $00		                sta cp
.8bb8	a5 01		lda $01		                lda cp+1
.8bba	69 00		adc #$00	                adc #0          ; only care about carry
.8bbc	85 01		sta $01		                sta cp+1
.8bbe	ca		dex		                dex
.8bbf	ca		dex		                dex
.8bc0	a5 00		lda $00		                lda CP          ; LSB
.8bc2	95 00		sta $00,x	                sta 0,x
.8bc4	a5 01		lda $01		                lda CP+1        ; MSB
.8bc6	95 01		sta $01,x	                sta 1,x
.8bc8					z_question_do:
.8bc8	60		rts		z_do:           rts
.8bc9					do_runtime:
.8bc9	38		sec		                sec
.8bca	a9 00		lda #$00	                lda #0
.8bcc	f5 02		sbc $02,x	                sbc 2,x         ; LSB of limit
.8bce	95 02		sta $02,x	                sta 2,x         ; save FUFA for later use
.8bd0	a9 80		lda #$80	                lda #$80
.8bd2	f5 03		sbc $03,x	                sbc 3,x         ; MSB of limit
.8bd4	95 03		sta $03,x	                sta 3,x         ; save FUFA for later use
.8bd6	48		pha		                pha             ; FUFA replaces limit on R stack
.8bd7	b5 02		lda $02,x	                lda 2,x         ; LSB of limit
.8bd9	48		pha		                pha
.8bda	18		clc		                clc
.8bdb	b5 00		lda $00,x	                lda 0,x         ; LSB of original index
.8bdd	75 02		adc $02,x	                adc 2,x         ; add LSB of FUFA
.8bdf	95 00		sta $00,x	                sta 0,x
.8be1	b5 01		lda $01,x	                lda 1,x         ; MSB of orginal index
.8be3	75 03		adc $03,x	                adc 3,x         ; add MSB of FUFA
.8be5	48		pha		                pha
.8be6	b5 00		lda $00,x	                lda 0,x         ; LSB of index
.8be8	48		pha		                pha
.8be9	e8		inx		                inx
.8bea	e8		inx		                inx
.8beb	e8		inx		                inx
.8bec	e8		inx		                inx             ; no RTS because this is copied into code
.8bed					do_runtime_end:
.8bed					question_do_runtime:
.8bed	20 95 a3	jsr $a395	                jsr xt_two_dup          ; ( n1 n2 n1 n2 )
.8bf0	20 da 8e	jsr $8eda	                jsr xt_equal            ; ( -- n1 n2 f )
.8bf3	b5 00		lda $00,x	                lda 0,x
.8bf5	15 01		ora $01,x	                ora 1,x
.8bf7	f0 06		beq $8bff	                beq _do_do
.8bf9	8a		txa		                txa
.8bfa	18		clc		                clc
.8bfb	69 06		adc #$06	                adc #6
.8bfd	aa		tax		                tax
.8bfe	60		rts		                rts
.8bff					_do_do:
.8bff	e8		inx		                inx             ; clear flag from EQUAL off stack
.8c00	e8		inx		                inx             ; no RTS because this is copied into code
.8c01					question_do_runtime_end:
.8c01					xt_does:
.8c01	a0 8c		ldy #$8c	                ldy #>does_runtime
.8c03	a9 10		lda #$10	                lda #<does_runtime
.8c05	20 8f d6	jsr $d68f	                jsr cmpl_subroutine
.8c08	a0 d6		ldy #$d6	                ldy #>dodoes
.8c0a	a9 d5		lda #$d5	                lda #<dodoes
.8c0c	20 8f d6	jsr $d68f	                jsr cmpl_subroutine
.8c0f	60		rts		z_does:         rts
.8c10					does_runtime:
.8c10	7a		ply		                ply             ; LSB
.8c11	68		pla		                pla             ; MSB
.8c12	c8		iny		                iny
.8c13	d0 01		bne $8c16	                bne +
.8c15	1a		inc a		                ina
.8c16					+
.8c16	84 24		sty $24		                sty tmp1
.8c18	85 25		sta $25		                sta tmp1+1
.8c1a	20 2e d7	jsr $d72e	                jsr current_to_dp   ; Grab the DP from the CURRENT wordlist.
.8c1d	a5 02		lda $02		                lda dp
.8c1f	18		clc		                clc
.8c20	69 04		adc #$04	                adc #4
.8c22	85 26		sta $26		                sta tmp2
.8c24	a5 03		lda $03		                lda dp+1
.8c26	69 00		adc #$00	                adc #0          ; we only care about the carry
.8c28	85 27		sta $27		                sta tmp2+1
.8c2a	b2 26		lda ($26)	                lda (tmp2)
.8c2c	18		clc		                clc
.8c2d	69 01		adc #$01	                adc #1
.8c2f	85 28		sta $28		                sta tmp3
.8c31	a0 01		ldy #$01	                ldy #1
.8c33	b1 26		lda ($26),y	                lda (tmp2),y
.8c35	69 00		adc #$00	                adc #0          ; we only care about the carry
.8c37	85 29		sta $29		                sta tmp3+1
.8c39	a5 24		lda $24		                lda tmp1        ; LSB
.8c3b	92 28		sta ($28)	                sta (tmp3)
.8c3d	a5 25		lda $25		                lda tmp1+1
.8c3f	91 28		sta ($28),y	                sta (tmp3),y    ; Y is still 1
.8c41	60		rts		                rts
.8c42					xt_dot:
.8c42	20 ec d7	jsr $d7ec	                jsr underflow_1
.8c45	20 bb 8d	jsr $8dbb	                jsr xt_dup                      ; ( n n )
.8c48	20 23 81	jsr $8123	                jsr xt_abs                      ; ( n u )
.8c4b	20 85 a7	jsr $a785	                jsr xt_zero                     ; ( n u 0 )
.8c4e	20 66 93	jsr $9366	                jsr xt_less_number_sign         ; ( n u 0 )
.8c51	20 ea 97	jsr $97ea	                jsr xt_number_sign_s            ; ( n ud )
.8c54	20 63 9b	jsr $9b63	                jsr xt_rot                      ; ( ud n )
.8c57	20 c4 9f	jsr $9fc4	                jsr xt_sign                     ; ( ud )
.8c5a	20 c8 97	jsr $97c8	                jsr xt_number_sign_greater      ; ( addr u )
.8c5d	20 e0 a4	jsr $a4e0	                jsr xt_type
.8c60	20 fb a0	jsr $a0fb	                jsr xt_space
.8c63	60		rts		z_dot:          rts
.8c64					xt_dot_paren:
.8c64	ca		dex		                dex
.8c65	ca		dex		                dex
.8c66	a9 29		lda #$29	                lda #41     ; Right parenthesis
.8c68	95 00		sta $00,x	                sta 0,x
.8c6a	74 01		stz $01,x	                stz 1,x
.8c6c	20 46 99	jsr $9946	                jsr xt_parse
.8c6f	20 e0 a4	jsr $a4e0	                jsr xt_type
.8c72	60		rts		z_dot_paren:    rts
.8c73					xt_dot_quote:
.8c73	20 5b 9d	jsr $9d5b	                jsr xt_s_quote
.8c76	a0 a4		ldy #$a4	                ldy #>xt_type
.8c78	a9 e0		lda #$e0	                lda #<xt_type
.8c7a	20 8f d6	jsr $d68f	                jsr cmpl_subroutine
.8c7d	60		rts		z_dot_quote:    rts
.8c7e					xt_dot_r:
.8c7e	20 f1 d7	jsr $d7f1	                jsr underflow_2
.8c81	20 4d a3	jsr $a34d	                jsr xt_to_r
.8c84	20 bb 8d	jsr $8dbb	                jsr xt_dup
.8c87	20 23 81	jsr $8123	                jsr xt_abs
.8c8a	20 85 a7	jsr $a785	                jsr xt_zero
.8c8d	20 66 93	jsr $9366	                jsr xt_less_number_sign
.8c90	20 ea 97	jsr $97ea	                jsr xt_number_sign_s
.8c93	20 63 9b	jsr $9b63	                jsr xt_rot
.8c96	20 c4 9f	jsr $9fc4	                jsr xt_sign
.8c99	20 c8 97	jsr $97c8	                jsr xt_number_sign_greater
.8c9c	20 9e 9a	jsr $9a9e	                jsr xt_r_from
.8c9f	20 9f 98	jsr $989f	                jsr xt_over
.8ca2	20 5c 95	jsr $955c	                jsr xt_minus
.8ca5	20 01 a1	jsr $a101	                jsr xt_spaces
.8ca8	20 e0 a4	jsr $a4e0	                jsr xt_type
.8cab	60		rts		z_dot_r:        rts
.8cac					xt_dot_s:
.8cac	20 02 8b	jsr $8b02	                jsr xt_depth    ; ( -- u )
.8caf	a9 3c		lda #$3c	                lda #$3c        ; ASCII for "<"
.8cb1	20 02 8e	jsr $8e02	                jsr emit_a
.8cb4	b5 00		lda $00,x	                lda 0,x
.8cb6	48		pha		                pha
.8cb7	ca		dex		                dex             ; DUP
.8cb8	ca		dex		                dex
.8cb9	95 00		sta $00,x	                sta 0,x
.8cbb	74 01		stz $01,x	                stz 1,x
.8cbd	20 59 d8	jsr $d859	                jsr print_u
.8cc0	a9 3e		lda #$3e	                lda #$3e        ; ASCII for ">"
.8cc2	20 02 8e	jsr $8e02	                jsr emit_a
.8cc5	a9 20		lda #$20	                lda #AscSP      ; ASCII for SPACE
.8cc7	20 02 8e	jsr $8e02	                jsr emit_a
.8cca	e8		inx		                inx
.8ccb	e8		inx		                inx
.8ccc	e0 78		cpx #$78	                cpx #dsp0
.8cce	f0 1e		beq $8cee	                beq _done
.8cd0					_have_stack:
.8cd0	7a		ply		                ply
.8cd1	a9 77		lda #$77	                lda #dsp0-1     ; go up one to avoid garbage
.8cd3	85 28		sta $28		                sta tmp3
.8cd5	64 29		stz $29		                stz tmp3+1      ; must be zero page on the 65c02
.8cd7					_loop:
.8cd7	ca		dex		                dex
.8cd8	ca		dex		                dex
.8cd9	b2 28		lda ($28)	                lda (tmp3)
.8cdb	95 01		sta $01,x	                sta 1,x
.8cdd	c6 28		dec $28		                dec tmp3
.8cdf	b2 28		lda ($28)	                lda (tmp3)
.8ce1	95 00		sta $00,x	                sta 0,x
.8ce3	c6 28		dec $28		                dec tmp3
.8ce5	5a		phy		                phy
.8ce6	20 42 8c	jsr $8c42	                jsr xt_dot
.8ce9	7a		ply		                ply
.8cea	88		dey		                dey
.8ceb	d0 ea		bne $8cd7	                bne _loop
.8ced	48		pha		                pha             ; dummy to balance stack
.8cee					_done:
.8cee	68		pla		                pla
.8cef	60		rts		z_dot_s:        rts
.8cf0					xt_d_dot:
.8cf0	20 f1 d7	jsr $d7f1	                jsr underflow_2
.8cf3	20 6a a3	jsr $a36a	                jsr xt_tuck
.8cf6	20 92 8a	jsr $8a92	                jsr xt_dabs
.8cf9	20 66 93	jsr $9366	                jsr xt_less_number_sign
.8cfc	20 ea 97	jsr $97ea	                jsr xt_number_sign_s
.8cff	20 63 9b	jsr $9b63	                jsr xt_rot
.8d02	20 c4 9f	jsr $9fc4	                jsr xt_sign
.8d05	20 c8 97	jsr $97c8	                jsr xt_number_sign_greater
.8d08	20 e0 a4	jsr $a4e0	                jsr xt_type
.8d0b	20 fb a0	jsr $a0fb	                jsr xt_space
.8d0e	60		rts		z_d_dot:        rts
.8d0f					xt_d_dot_r:
.8d0f	20 f6 d7	jsr $d7f6	                jsr underflow_3
.8d12	20 4d a3	jsr $a34d	                jsr xt_to_r
.8d15	20 6a a3	jsr $a36a	                jsr xt_tuck
.8d18	20 92 8a	jsr $8a92	                jsr xt_dabs
.8d1b	20 66 93	jsr $9366	                jsr xt_less_number_sign
.8d1e	20 ea 97	jsr $97ea	                jsr xt_number_sign_s
.8d21	20 63 9b	jsr $9b63	                jsr xt_rot
.8d24	20 c4 9f	jsr $9fc4	                jsr xt_sign
.8d27	20 c8 97	jsr $97c8	                jsr xt_number_sign_greater
.8d2a	20 9e 9a	jsr $9a9e	                jsr xt_r_from
.8d2d	20 9f 98	jsr $989f	                jsr xt_over
.8d30	20 5c 95	jsr $955c	                jsr xt_minus
.8d33	20 01 a1	jsr $a101	                jsr xt_spaces
.8d36	20 e0 a4	jsr $a4e0	                jsr xt_type
.8d39	60		rts		z_d_dot_r:      rts
.8d3a					xt_drop:
.8d3a	20 ec d7	jsr $d7ec	                jsr underflow_1
.8d3d	e8		inx		                inx
.8d3e	e8		inx		                inx
.8d3f	60		rts		z_drop:         rts
.8d40					xt_dump:
.8d40	20 f1 d7	jsr $d7f1	                jsr underflow_2
.8d43					_row:
.8d43	a0 10		ldy #$10	                ldy #16
.8d45	64 26		stz $26		                stz tmp2
.8d47	20 6f 89	jsr $896f	                jsr xt_cr
.8d4a	b5 03		lda $03,x	                lda 3,x
.8d4c	20 fc d6	jsr $d6fc	                jsr byte_to_ascii
.8d4f	b5 02		lda $02,x	                lda 2,x
.8d51	20 fc d6	jsr $d6fc	                jsr byte_to_ascii
.8d54	20 fb a0	jsr $a0fb	                jsr xt_space
.8d57	20 fb a0	jsr $a0fb	                jsr xt_space
.8d5a					_loop:
.8d5a	b5 00		lda $00,x	                lda 0,x
.8d5c	15 01		ora $01,x	                ora 1,x
.8d5e	f0 39		beq $8d99	                beq _all_printed
.8d60	a1 02		lda ($02,x)	                lda (2,x)
.8d62	48		pha		                pha                     ; byte_to_ascii destroys A
.8d63	20 fc d6	jsr $d6fc	                jsr byte_to_ascii
.8d66	20 fb a0	jsr $a0fb	                jsr xt_space
.8d69	68		pla		                pla
.8d6a	20 d2 d7	jsr $d7d2	                jsr is_printable
.8d6d	b0 02		bcs $8d71	                bcs _printable
.8d6f	a9 2e		lda #$2e	                lda #'.'                 ; Print dot if not printable
.8d71					_printable:
.8d71	5a		phy		                phy                     ; save counter
.8d72	a4 26		ldy $26		                ldy tmp2
.8d74	91 00		sta ($00),y	                sta (cp),y
.8d76	e6 26		inc $26		                inc tmp2
.8d78	7a		ply		                ply
.8d79	c0 09		cpy #$09	                cpy #9
.8d7b	d0 03		bne $8d80	                bne _next_char
.8d7d	20 fb a0	jsr $a0fb	                jsr xt_space
.8d80					_next_char:
.8d80	f6 02		inc $02,x	                inc 2,x
.8d82	d0 02		bne $8d86	                bne _counter
.8d84	f6 03		inc $03,x	                inc 3,x
.8d86					_counter:
.8d86	b5 00		lda $00,x	                lda 0,x
.8d88	d0 02		bne $8d8c	                bne +
.8d8a	d6 01		dec $01,x	                dec 1,x
.8d8c					+
.8d8c	d6 00		dec $00,x	                dec 0,x
.8d8e	88		dey		                dey
.8d8f	d0 c9		bne $8d5a	                bne _loop               ; next byte
.8d91	20 fb a0	jsr $a0fb	                jsr xt_space
.8d94	20 a7 8d	jsr $8da7	                jsr dump_print_ascii
.8d97	80 aa		bra $8d43	                bra _row                ; new row
.8d99					_all_printed:
.8d99	a5 26		lda $26		                lda tmp2
.8d9b	f0 06		beq $8da3	                beq _done
.8d9d	20 fb a0	jsr $a0fb	                jsr xt_space
.8da0	20 a7 8d	jsr $8da7	                jsr dump_print_ascii
.8da3					_done:
.8da3	20 8d a3	jsr $a38d	                jsr xt_two_drop         ; one byte less than 4x INX
.8da6	60		rts		z_dump:         rts
.8da7					dump_print_ascii:
.8da7	a0 00		ldy #$00	                ldy #0
.8da9					_ascii_loop:
.8da9	b1 00		lda ($00),y	                lda (cp),y
.8dab	20 02 8e	jsr $8e02	                jsr emit_a
.8dae	c8		iny		                iny
.8daf	c0 08		cpy #$08	                cpy #8
.8db1	d0 03		bne $8db6	                bne +
.8db3	20 fb a0	jsr $a0fb	                jsr xt_space
.8db6					+
.8db6	c6 26		dec $26		                dec tmp2
.8db8	d0 ef		bne $8da9	                bne _ascii_loop
.8dba	60		rts		                rts
.8dbb					xt_dup:
.8dbb	20 ec d7	jsr $d7ec	                jsr underflow_1
.8dbe	ca		dex		                dex
.8dbf	ca		dex		                dex
.8dc0	b5 02		lda $02,x	                lda 2,x         ; LSB
.8dc2	95 00		sta $00,x	                sta 0,x
.8dc4	b5 03		lda $03,x	                lda 3,x         ; MSB
.8dc6	95 01		sta $01,x	                sta 1,x
.8dc8	60		rts		z_dup:          rts
.8dc9					xt_ed:
.8dc9	20 50 b5	jsr $b550	                jsr ed6502      ; kept in separate file
.8dcc	60		rts		z_ed:           rts
.8dcd					xt_else:
.8dcd					xt_endof:
.8dcd	a0 8d		ldy #$8d	                ldy #>branch_runtime
.8dcf	a9 e7		lda #$e7	                lda #<branch_runtime
.8dd1	20 8f d6	jsr $d68f	                jsr cmpl_subroutine
.8dd4	20 7e 91	jsr $917e	                jsr xt_here
.8dd7	20 85 a7	jsr $a785	                jsr xt_zero
.8dda	20 7a 87	jsr $877a	                jsr xt_comma
.8ddd	20 7e 91	jsr $917e	                jsr xt_here
.8de0	20 63 9b	jsr $9b63	                jsr xt_rot
.8de3	20 6a a1	jsr $a16a	                jsr xt_store
.8de6					z_else:
.8de6					z_endof:
.8de6	60		rts		                rts
.8de7					branch_runtime:
.8de7	68		pla		                pla
.8de8	85 22		sta $22		                sta tmpbranch
.8dea	68		pla		                pla
.8deb	85 23		sta $23		                sta tmpbranch+1
.8ded	a0 01		ldy #$01	                ldy #1
.8def	b1 22		lda ($22),y	                lda (tmpbranch),y  ; LSB
.8df1	85 24		sta $24		                sta tmp1
.8df3	c8		iny		                iny
.8df4	b1 22		lda ($22),y	                lda (tmpbranch),y  ; MSB
.8df6	85 25		sta $25		                sta tmp1+1
.8df8	6c 24 00	jmp ($0024)	                jmp (tmp1)
.8dfb					xt_emit:
.8dfb	20 ec d7	jsr $d7ec	                jsr underflow_1
.8dfe	b5 00		lda $00,x	                lda 0,x
.8e00	e8		inx		                inx
.8e01	e8		inx		                inx
.8e02					emit_a:
.8e02	6c 10 00	jmp ($0010)	                jmp (output)            ; JSR/RTS
.8e05					z_emit:
.8e05					xt_empty_buffers:
.8e05	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.8e07	a9 00		lda #$00	                lda #0
.8e09	91 1e		sta ($1e),y	                sta (up),y      ; Only LSB is used.
.8e0b					z_empty_buffers:
.8e0b	60		rts		                rts
.8e0c					xt_endcase:
.8e0c	a0 8d		ldy #$8d	                ldy #>xt_drop
.8e0e	a9 3a		lda #$3a	                lda #<xt_drop
.8e10	20 8f d6	jsr $d68f	                jsr cmpl_subroutine
.8e13					_endcase_loop:
.8e13	b5 00		lda $00,x	                lda 0,x
.8e15	15 01		ora $01,x	                ora 1,x
.8e17	f0 05		beq $8e1e	                beq _done
.8e19	20 9f a1	jsr $a19f	                jsr xt_then
.8e1c	80 f5		bra $8e13	                bra _endcase_loop
.8e1e					_done:
.8e1e	e8		inx		                inx
.8e1f	e8		inx		                inx
.8e20	60		rts		z_endcase:      rts
.8e21					xt_environment_q:
.8e21	20 ec d7	jsr $d7ec	                jsr underflow_1
.8e24	a0 00		ldy #$00	                ldy #00                 ; counter for table
.8e26	5a		phy		                phy
.8e27					_table_loop:
.8e27	20 95 a3	jsr $a395	                jsr xt_two_dup          ; ( addr u addr u ) 2DUP does not use Y
.8e2a	ca		dex		                dex
.8e2b	ca		dex		                dex                     ; ( addr u addr u ? )
.8e2c	b9 9e 8e	lda $8e9e,y	                lda env_table_single,y
.8e2f	95 00		sta $00,x	                sta 0,x
.8e31	c8		iny		                iny
.8e32	b9 9e 8e	lda $8e9e,y	                lda env_table_single,y
.8e35	95 01		sta $01,x	                sta 1,x                 ; ( addr u addr u addr-t )
.8e37	c8		iny		                iny
.8e38	15 00		ora $00,x	                ora 0,x
.8e3a	f0 4d		beq $8e89	                beq _table_done
.8e3c	5a		phy		                phy                     ; save Y, which is used by COUNT
.8e3d	20 5b 89	jsr $895b	                jsr xt_count            ; ( addr u addr u addr-s u-s )
.8e40	20 94 87	jsr $8794	                jsr xt_compare          ; ( addr u f )
.8e43	7a		ply		                ply
.8e44	b5 00		lda $00,x	                lda 0,x
.8e46	15 01		ora $01,x	                ora 1,x
.8e48	f0 04		beq $8e4e	                beq _got_result
.8e4a	e8		inx		                inx                     ; DROP, now ( addr u )
.8e4b	e8		inx		                inx
.8e4c	80 d9		bra $8e27	                bra _table_loop
.8e4e					_got_result:
.8e4e	e8		inx		                inx                     ; drop flag, now ( addr u )
.8e4f	e8		inx		                inx
.8e50	88		dey		                dey                     ; go back to index we had
.8e51	88		dey		                dey
.8e52	68		pla		                pla
.8e53	d0 0d		bne $8e62	                bne _double_result
.8e55	b9 bc 8e	lda $8ebc,y	                lda env_results_single,y
.8e58	95 02		sta $02,x	                sta 2,x
.8e5a	c8		iny		                iny
.8e5b	b9 bc 8e	lda $8ebc,y	                lda env_results_single,y
.8e5e	95 03		sta $03,x	                sta 3,x                 ; ( res u )
.8e60	80 1f		bra $8e81	                bra _set_flag
.8e62					_double_result:
.8e62	ca		dex		                dex                     ; ( addr u ? )
.8e63	ca		dex		                dex
.8e64	98		tya		                tya
.8e65	38		sec		                sec
.8e66	e9 18		sbc #$18	                sbc #24
.8e68	0a		asl a		                asl
.8e69	a8		tay		                tay
.8e6a	b9 d2 8e	lda $8ed2,y	                lda env_results_double,y
.8e6d	95 02		sta $02,x	                sta 2,x
.8e6f	c8		iny		                iny
.8e70	b9 d2 8e	lda $8ed2,y	                lda env_results_double,y
.8e73	95 03		sta $03,x	                sta 3,x                 ; ( res u ? )
.8e75	c8		iny		                iny
.8e76	b9 d2 8e	lda $8ed2,y	                lda env_results_double,y
.8e79	95 04		sta $04,x	                sta 4,x
.8e7b	c8		iny		                iny
.8e7c	b9 d2 8e	lda $8ed2,y	                lda env_results_double,y
.8e7f	95 05		sta $05,x	                sta 5,x                 ; ( res res ? )
.8e81					_set_flag:
.8e81	a9 ff		lda #$ff	                lda #$ff
.8e83	95 00		sta $00,x	                sta 0,x
.8e85	95 01		sta $01,x	                sta 1,x                 ; ( res f )
.8e87	80 14		bra $8e9d	                bra _done
.8e89					_table_done:
.8e89	68		pla		                pla
.8e8a	d0 09		bne $8e95	                bne _no_match
.8e8c	1a		inc a		                ina
.8e8d	48		pha		                pha
.8e8e	8a		txa		                txa
.8e8f	18		clc		                clc
.8e90	69 06		adc #$06	                adc #6                  ; skip six bytes
.8e92	aa		tax		                tax                     ; ( addr u )
.8e93	80 92		bra $8e27	                bra _table_loop
.8e95					_no_match:
.8e95	8a		txa		                txa
.8e96	18		clc		                clc
.8e97	69 0a		adc #$0a	                adc #10
.8e99	aa		tax		                tax                     ; ( addr ) - not ( 0 ) !
.8e9a	20 85 8f	jsr $8f85	                jsr xt_false
.8e9d					_done:
.8e9d					z_environment_q:
.8e9d	60		rts		                rts
.8e9e					env_table_single:
>8e9e	0f d6 1f d6 25 d6 2a d6		        .word envs_cs, envs_hold, envs_pad, envs_aub, envs_floored
>8ea6	3c d6
>8ea8	44 d6 4d d6 53 d6 59 d6		        .word envs_max_char, envs_max_n, envs_max_u, envs_rsc
>8eb0	6c d6 78 d6 00 00		        .word envs_sc, envs_wl, 0000
.8eb6					env_table_double:
>8eb6	82 d6 88 d6 00 00		        .word envs_max_d, envs_max_ud, 0000
.8ebc					env_results_single:
>8ebc	ff 7f				        .word $7FFF     ; /COUNTED-STRING
>8ebe	ff 00				        .word $00FF     ; /HOLD
>8ec0	54 00				        .word $0054     ; /PAD (this is 84 decimal)
>8ec2	08 00				        .word $0008     ; ADDRESS-UNIT-BITS (keep "$" to avoid octal!)
>8ec4	00 00				        .word 0000      ; FLOORED ("FALSE", we have symmetric)
>8ec6	ff 00				        .word $00FF     ; MAX-CHAR
>8ec8	ff 7f				        .word $7FFF     ; MAX-N
>8eca	ff ff				        .word $FFFF     ; MAX-U
>8ecc	80 00				        .word $0080     ; RETURN-STACK-CELLS
>8ece	20 00				        .word $0020     ; STACK-CELLS (from definitions.asm)
>8ed0	09 00				        .word $0009     ; WORDLISTS
.8ed2					env_results_double:
>8ed2	ff 7f ff ff			        .word $7FFF, $FFFF      ; MAX-D
>8ed6	ff ff ff ff			        .word $FFFF, $FFFF      ; MAX-UD
.8eda					xt_equal:
.8eda	20 f1 d7	jsr $d7f1	                jsr underflow_2
.8edd	b5 00		lda $00,x	                lda 0,x                 ; LSB
.8edf	d5 02		cmp $02,x	                cmp 2,x
.8ee1	d0 0a		bne $8eed	                bne _false
.8ee3	b5 01		lda $01,x	                lda 1,x                 ; MSB
.8ee5	d5 03		cmp $03,x	                cmp 3,x
.8ee7	d0 04		bne $8eed	                bne _false
.8ee9	a9 ff		lda #$ff	                lda #$ff
.8eeb	80 02		bra $8eef	                bra _done
.8eed	a9 00		lda #$00	_false:         lda #0                  ; drop thru to done
.8eef	95 02		sta $02,x	_done:          sta 2,x
.8ef1	95 03		sta $03,x	                sta 3,x
.8ef3	e8		inx		                inx
.8ef4	e8		inx		                inx
.8ef5	60		rts		z_equal:        rts
.8ef6					xt_blank:
.8ef6	ca		dex		                dex
.8ef7	ca		dex		                dex
.8ef8	a9 20		lda #$20	                lda #AscSP
.8efa	95 00		sta $00,x	                sta 0,x
.8efc	74 01		stz $01,x	                stz 1,x
.8efe	80 06		bra $8f06	                bra xt_fill     ; skip over code for ERASE
.8f00					xt_erase:
.8f00	ca		dex		                dex
.8f01	ca		dex		                dex
.8f02	74 00		stz $00,x	                stz 0,x
.8f04	74 01		stz $01,x	                stz 1,x
.8f06					xt_fill:
.8f06	20 f6 d7	jsr $d7f6	                jsr underflow_3
.8f09	b5 04		lda $04,x	                lda 4,x         ; LSB
.8f0b	85 24		sta $24		                sta tmp1
.8f0d	b5 05		lda $05,x	                lda 5,x
.8f0f	85 25		sta $25		                sta tmp1+1
.8f11	b5 02		lda $02,x	                lda 2,x
.8f13	85 26		sta $26		                sta tmp2
.8f15	b5 03		lda $03,x	                lda 3,x
.8f17	85 27		sta $27		                sta tmp2+1
.8f19	b5 00		lda $00,x	                lda 0,x
.8f1b	a8		tay		                tay
.8f1c					_loop:
.8f1c	a9 7f		lda #$7f	                lda #>ram_end           ; MSB
.8f1e	c5 25		cmp $25		                cmp tmp1+1
.8f20	90 21		bcc $8f43	                bcc _done               ; RAM_END < TMP1, so leave
.8f22	d0 06		bne $8f2a	                bne _check_counter      ; RAM_END is not smaller and not equal
.8f24	a9 ff		lda #$ff	                lda #<ram_end           ; LSB, because MSBs were equal
.8f26	c5 24		cmp $24		                cmp tmp1
.8f28	90 19		bcc $8f43	                bcc _done               ; RAM_END < TMP1, so leave
.8f2a					_check_counter:
.8f2a	a5 26		lda $26		                lda tmp2
.8f2c	05 27		ora $27		                ora tmp2+1
.8f2e	f0 13		beq $8f43	                beq _done
.8f30	98		tya		                tya
.8f31	92 24		sta ($24)	                sta (tmp1)
.8f33	a5 26		lda $26		                lda tmp2
.8f35	d0 02		bne $8f39	                bne +
.8f37	c6 27		dec $27		                dec tmp2+1
.8f39	c6 26		dec $26		+               dec tmp2
.8f3b	e6 24		inc $24		                inc tmp1
.8f3d	d0 dd		bne $8f1c	                bne _loop
.8f3f	e6 25		inc $25		                inc tmp1+1
.8f41	80 d9		bra $8f1c	                bra _loop
.8f43					_done:
.8f43	8a		txa		                txa
.8f44	18		clc		                clc
.8f45	69 06		adc #$06	                adc #6
.8f47	aa		tax		                tax
.8f48					z_blank:
.8f48					z_erase:
.8f48	60		rts		z_fill:         rts
.8f49					xt_execute:
.8f49	20 ec d7	jsr $d7ec	                jsr underflow_1
.8f4c	20 50 8f	jsr $8f50	                jsr doexecute   ; do not combine to JMP (native coding)
.8f4f	60		rts		z_execute:      rts
.8f50					doexecute:
.8f50	b5 00		lda $00,x	                lda 0,x
.8f52	85 0e		sta $0e		                sta ip
.8f54	b5 01		lda $01,x	                lda 1,x
.8f56	85 0f		sta $0f		                sta ip+1
.8f58	e8		inx		                inx
.8f59	e8		inx		                inx
.8f5a	6c 0e 00	jmp ($000e)	                jmp (ip)
.8f5d					xt_execute_parsing:
.8f5d	20 f6 d7	jsr $d7f6	                jsr underflow_3
.8f60	20 6e 92	jsr $926e	                jsr xt_input_to_r       ; save normal input for later
.8f63	20 7a 96	jsr $967a	                jsr xt_not_rote         ; -ROT ( xt addr u )
.8f66	b5 00		lda $00,x	                lda 0,x                 ; TOS is new ciblen
.8f68	85 0a		sta $0a		                sta ciblen
.8f6a	b5 01		lda $01,x	                lda 1,x
.8f6c	85 0b		sta $0b		                sta ciblen+1
.8f6e	b5 02		lda $02,x	                lda 2,x                 ; NOS is new cib
.8f70	85 08		sta $08		                sta cib
.8f72	b5 03		lda $03,x	                lda 3,x
.8f74	85 09		sta $09		                sta cib+1
.8f76	64 0c		stz $0c		                stz toin                ; Set >IN to zero
.8f78	64 0d		stz $0d		                stz toin+1
.8f7a	20 8d a3	jsr $a38d	                jsr xt_two_drop         ; 2DROP ( xt )
.8f7d	20 49 8f	jsr $8f49	                jsr xt_execute
.8f80	20 af 9a	jsr $9aaf	                jsr xt_r_to_input
.8f83					z_execute_parsing:
.8f83	60		rts		                rts
.8f84					xt_exit:
.8f84	60		rts		                rts             ; keep before z_exit
.8f85					z_exit:
.8f85					xt_false:
.8f85	ca		dex		                dex
.8f86	ca		dex		                dex
.8f87	74 00		stz $00,x	                stz 0,x
.8f89	74 01		stz $01,x	                stz 1,x
.8f8b	60		rts		z_false:        rts
.8f8c					xt_fetch:
.8f8c	20 ec d7	jsr $d7ec	                jsr underflow_1
.8f8f	a1 00		lda ($00,x)	                lda (0,x)               ; LSB
.8f91	a8		tay		                tay
.8f92	f6 00		inc $00,x	                inc 0,x
.8f94	d0 02		bne $8f98	                bne +
.8f96	f6 01		inc $01,x	                inc 1,x
.8f98					+
.8f98	a1 00		lda ($00,x)	                lda (0,x)               ; MSB
.8f9a	95 01		sta $01,x	                sta 1,x
.8f9c	94 00		sty $00,x	                sty 0,x
.8f9e	60		rts		z_fetch:        rts
.8f9f					xt_find:
.8f9f	20 ec d7	jsr $d7ec	                jsr underflow_1
.8fa2	b5 01		lda $01,x	                lda 1,x                 ; MSB
.8fa4	48		pha		                pha
.8fa5	b5 00		lda $00,x	                lda 0,x                 ; LSB
.8fa7	48		pha		                pha
.8fa8	20 5b 89	jsr $895b	                jsr xt_count            ; ( caddr -- addr u )
.8fab	20 e7 8f	jsr $8fe7	                jsr xt_find_name        ; ( addr u -- nt | 0 )
.8fae	b5 00		lda $00,x	                lda 0,x
.8fb0	15 01		ora $01,x	                ora 1,x
.8fb2	d0 0b		bne $8fbf	                bne _found_word
.8fb4	20 85 8f	jsr $8f85	                jsr xt_false            ; ( 0 0 )
.8fb7	68		pla		                pla                     ; LSB of address
.8fb8	95 02		sta $02,x	                sta 2,x
.8fba	68		pla		                pla
.8fbb	95 03		sta $03,x	                sta 3,x                 ; MSB of address
.8fbd	80 27		bra $8fe6	                bra _done               ; ( addr 0 )
.8fbf					_found_word:
.8fbf	68		pla		                pla
.8fc0	68		pla		                pla
.8fc1	20 bb 8d	jsr $8dbb	                jsr xt_dup              ; ( nt nt )
.8fc4	20 ed 95	jsr $95ed	                jsr xt_name_to_int      ; ( nt xt )
.8fc7	20 8b a1	jsr $a18b	                jsr xt_swap             ; ( xt nt )
.8fca	a0 00		ldy #$00	                ldy #0                  ; Prepare flag
.8fcc	f6 00		inc $00,x	                inc 0,x
.8fce	d0 02		bne $8fd2	                bne +
.8fd0	f6 01		inc $01,x	                inc 1,x                 ; ( xt nt+1 )
.8fd2					+
.8fd2	a1 00		lda ($00,x)	                lda (0,x)               ; ( xt char )
.8fd4	29 04		and #$04	                and #IM
.8fd6	d0 08		bne $8fe0	                bne _immediate          ; bit set, we're immediate
.8fd8	a9 ff		lda #$ff	                lda #$FF                ; We're not immediate, return -1
.8fda	95 00		sta $00,x	                sta 0,x
.8fdc	95 01		sta $01,x	                sta 1,x
.8fde	80 06		bra $8fe6	                bra _done
.8fe0					_immediate:
.8fe0	a9 01		lda #$01	                lda #1                  ; We're immediate, return 1
.8fe2	95 00		sta $00,x	                sta 0,x
.8fe4	74 01		stz $01,x	                stz 1,x
.8fe6					_done:
.8fe6	60		rts		z_find:         rts
.8fe7					xt_find_name:
.8fe7	20 f1 d7	jsr $d7f1	                jsr underflow_2
.8fea	b5 00		lda $00,x	                lda 0,x
.8fec	15 01		ora $01,x	                ora 1,x
.8fee	d0 03		bne $8ff3	                bne _nonempty
.8ff0	4c 8c 90	jmp $908c	                jmp _fail_done
.8ff3					_nonempty:
.8ff3	64 28		stz $28		                stz tmp3                ; Start at the beginning
.8ff5					_wordlist_loop:
.8ff5	a0 1e		ldy #$1e	                ldy #num_order_offset   ; Compare to byte variable #ORDER
.8ff7	a5 28		lda $28		                lda tmp3
.8ff9	d1 1e		cmp ($1e),y	                cmp (up),y              ; Check to see if we are done
.8ffb	d0 03		bne $9000	                bne _have_string
.8ffd	4c 8c 90	jmp $908c	                jmp _fail_done
.9000					_have_string:
.9000	18		clc		                clc             ; SEARCH-ORDER is array of bytes.
.9001	69 1f		adc #$1f	                adc #search_order_offset
.9003	a8		tay		                tay
.9004	b1 1e		lda ($1e),y	                lda (up),y      ; Get the id byte, which is the offset
.9006	0a		asl a		                asl                     ; Turn offset into cells offset.
.9007	18		clc		                clc
.9008	69 06		adc #$06	                adc #wordlists_offset
.900a	a8		tay		                tay
.900b	b1 1e		lda ($1e),y	                lda (up),y
.900d	85 24		sta $24		                sta tmp1
.900f	c8		iny		                iny
.9010	b1 1e		lda ($1e),y	                lda (up),y
.9012	85 25		sta $25		                sta tmp1+1
.9014	b5 02		lda $02,x	                lda 2,x                 ; Address of mystery string
.9016	85 26		sta $26		                sta tmp2
.9018	b5 03		lda $03,x	                lda 3,x
.901a	85 27		sta $27		                sta tmp2+1
.901c					_loop:
.901c	b2 24		lda ($24)	                lda (tmp1)
.901e	d5 00		cmp $00,x	                cmp 0,x
.9020	d0 54		bne $9076	                bne _next_entry
.9022					_compare_string:
.9022	b2 26		lda ($26)	                lda (tmp2)      ; first character of mystery string
.9024	c9 5b		cmp #$5b	                cmp #$5B        ; ASCII '[' (one past Z)
.9026	b0 07		bcs $902f	                bcs _compare_first
.9028	c9 41		cmp #$41	                cmp #$41        ; ASCII 'A'
.902a	90 03		bcc $902f	                bcc _compare_first
.902c	18		clc		                clc
.902d	69 20		adc #$20	                adc #$20
.902f					_compare_first:
.902f	a0 08		ldy #$08	                ldy #8          ; Offset in nt to name
.9031	d1 24		cmp ($24),y	                cmp (tmp1),y    ; first character of current word
.9033	d0 41		bne $9076	                bne _next_entry
.9035	b5 00		lda $00,x	                lda 0,x
.9037	3a		dec a		                dea
.9038	f0 2c		beq $9066	                beq _success
.903a	a5 24		lda $24		                lda tmp1
.903c	48		pha		                pha             ; Preserve tmp1 on the return stack.
.903d	18		clc		                clc
.903e	69 08		adc #$08	                adc #8
.9040	85 24		sta $24		                sta tmp1        ; Reusing tmp1 temporarily for string check.
.9042	a5 25		lda $25		                lda tmp1+1
.9044	48		pha		                pha             ; Preserve tmp1+1 on the return stack.
.9045	69 00		adc #$00	                adc #0          ; we only need the carry
.9047	85 25		sta $25		                sta tmp1+1
.9049	b4 00		ldy $00,x	                ldy 0,x         ; index is length of string minus 1
.904b	88		dey		                dey
.904c					_string_loop:
.904c	b1 26		lda ($26),y	                lda (tmp2),y    ; last char of mystery string
.904e	c9 5b		cmp #$5b	                cmp #$5B         ; ASCII '[' (one past Z)
.9050	b0 07		bcs $9059	                bcs _check_char
.9052	c9 41		cmp #$41	                cmp #$41        ; ASCII 'A'
.9054	90 03		bcc $9059	                bcc _check_char
.9056	18		clc		                clc
.9057	69 20		adc #$20	                adc #$20
.9059					_check_char:
.9059	d1 24		cmp ($24),y	                cmp (tmp1),y    ; last char of word we're testing against
.905b	d0 13		bne $9070	                bne _next_entry_tmp1
.905d	88		dey		                dey
.905e	d0 ec		bne $904c	                bne _string_loop
.9060					_success_tmp1:
.9060	68		pla		                pla             ; Restore tmp1 from the return stack.
.9061	85 25		sta $25		                sta tmp1+1
.9063	68		pla		                pla
.9064	85 24		sta $24		                sta tmp1
.9066					_success:
.9066	a5 24		lda $24		                lda tmp1
.9068	95 02		sta $02,x	                sta 2,x
.906a	a5 25		lda $25		                lda tmp1+1
.906c	95 03		sta $03,x	                sta 3,x
.906e	80 20		bra $9090	                bra _done
.9070					_next_entry_tmp1:
.9070	68		pla		                pla             ; Restore tmp1 from the return stack.
.9071	85 25		sta $25		                sta tmp1+1
.9073	68		pla		                pla
.9074	85 24		sta $24		                sta tmp1
.9076					_next_entry:
.9076	a0 02		ldy #$02	                ldy #2
.9078	b1 24		lda ($24),y	                lda (tmp1),y
.907a	48		pha		                pha
.907b	c8		iny		                iny
.907c	b1 24		lda ($24),y	                lda (tmp1),y
.907e	85 25		sta $25		                sta tmp1+1
.9080	68		pla		                pla
.9081	85 24		sta $24		                sta tmp1
.9083	05 25		ora $25		                ora tmp1+1
.9085	d0 95		bne $901c	                bne _loop
.9087	e6 28		inc $28		                inc tmp3
.9089	4c f5 8f	jmp $8ff5	                jmp _wordlist_loop
.908c					_fail_done:
.908c	74 02		stz $02,x	                stz 2,x         ; failure flag
.908e	74 03		stz $03,x	                stz 3,x
.9090					_done:
.9090	e8		inx		                inx
.9091	e8		inx		                inx
.9092	60		rts		z_find_name:    rts
.9093					xt_flush:
.9093	20 9b 9e	jsr $9e9b	                jsr xt_save_buffers
.9096	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.9098	a9 00		lda #$00	                lda #0
.909a	91 1e		sta ($1e),y	                sta (up),y      ; Only LSB is used.
.909c					z_flush:
.909c	60		rts		                rts
.909d					xt_fm_slash_mod:
.909d	20 f6 d7	jsr $d7f6	                jsr underflow_3
.90a0	64 26		stz $26		                stz tmp2        ; default: n is positive
.90a2	b5 01		lda $01,x	                lda 1,x         ; MSB of n1
.90a4	10 0e		bpl $90b4	                bpl _check_d
.90a6	e6 26		inc $26		                inc tmp2        ; set flag to negative for n1
.90a8	20 2f 96	jsr $962f	                jsr xt_negate   ; NEGATE
.90ab	20 4d a3	jsr $a34d	                jsr xt_to_r     ; >R
.90ae	20 4d 8b	jsr $8b4d	                jsr xt_dnegate  ; DNEGATE
.90b1	20 9e 9a	jsr $9a9e	                jsr xt_r_from   ; R>
.90b4					_check_d:
.90b4	b5 03		lda $03,x	                lda 3,x         ; MSB of high word of d
.90b6	10 0d		bpl $90c5	                bpl _multiply
.90b8	18		clc		                clc
.90b9	b5 00		lda $00,x	                lda 0,x         ; LSB of n1
.90bb	75 02		adc $02,x	                adc 2,x         ; LSB of dh
.90bd	95 02		sta $02,x	                sta 2,x
.90bf	b5 01		lda $01,x	                lda 1,x         ; MSB of n1
.90c1	75 03		adc $03,x	                adc 3,x         ; MSB of dh
.90c3	95 03		sta $03,x	                sta 3,x
.90c5					_multiply:
.90c5	20 97 a5	jsr $a597	                jsr xt_um_slash_mod     ; ( d n1 -- rem n2 )
.90c8	a5 26		lda $26		                lda tmp2
.90ca	f0 07		beq $90d3	                beq _done
.90cc	e8		inx		                inx             ; pretend that we SWAP
.90cd	e8		inx		                inx
.90ce	20 2f 96	jsr $962f	                jsr xt_negate
.90d1	ca		dex		                dex
.90d2	ca		dex		                dex
.90d3					_done:
.90d3	60		rts		z_fm_slash_mod: rts
.90d4					xt_forth:
.90d4	a0 1f		ldy #$1f	                ldy #search_order_offset
.90d6	a9 00		lda #$00	                lda #0          ; The WID for Forth is 0.
.90d8	91 1e		sta ($1e),y	                sta (up),y
.90da					z_forth:
.90da	60		rts		                rts
.90db					load_evaluate:
.90db	a9 ff		lda #$ff	                lda #$FF
.90dd	85 24		sta $24		                sta tmp1
.90df	80 11		bra $90f2	                bra load_evaluate_start
.90e1					xt_evaluate:
.90e1	20 f1 d7	jsr $d7f1	                jsr underflow_2
.90e4	64 24		stz $24		                stz tmp1
.90e6	b5 00		lda $00,x	                lda 0,x
.90e8	15 01		ora $01,x	                ora 1,x
.90ea	d0 06		bne $90f2	                bne evaluate_got_work
.90ec	e8		inx		                inx
.90ed	e8		inx		                inx
.90ee	e8		inx		                inx
.90ef	e8		inx		                inx
.90f0	80 42		bra $9134	                bra evaluate_done
.90f2					load_evaluate_start:
.90f2					evaluate_got_work:
.90f2	a0 01		ldy #$01	                ldy #blk_offset+1
.90f4	b1 1e		lda ($1e),y	                lda (up),y
.90f6	48		pha		                pha
.90f7	88		dey		                dey
.90f8	b1 1e		lda ($1e),y	                lda (up),y
.90fa	48		pha		                pha
.90fb	a5 24		lda $24		                lda tmp1
.90fd	d0 05		bne $9104	                bne _nozero
.90ff	91 1e		sta ($1e),y	                sta (up),y
.9101	c8		iny		                iny
.9102	91 1e		sta ($1e),y	                sta (up),y
.9104					_nozero:
.9104	20 6e 92	jsr $926e	                jsr xt_input_to_r
.9107	a9 ff		lda #$ff	                lda #$ff
.9109	85 06		sta $06		                sta insrc
.910b	85 07		sta $07		                sta insrc+1
.910d	64 0c		stz $0c		                stz toin
.910f	64 0d		stz $0d		                stz toin+1
.9111	b5 00		lda $00,x	                lda 0,x
.9113	85 0a		sta $0a		                sta ciblen
.9115	b5 01		lda $01,x	                lda 1,x
.9117	85 0b		sta $0b		                sta ciblen+1
.9119	b5 02		lda $02,x	                lda 2,x
.911b	85 08		sta $08		                sta cib
.911d	b5 03		lda $03,x	                lda 3,x
.911f	85 09		sta $09		                sta cib+1
.9121	e8		inx		                inx             ; A clean stack is a clean mind
.9122	e8		inx		                inx
.9123	e8		inx		                inx
.9124	e8		inx		                inx
.9125	20 54 d7	jsr $d754	                jsr interpret   ; ( -- )
.9128	20 af 9a	jsr $9aaf	                jsr xt_r_to_input
.912b	a0 00		ldy #$00	                ldy #blk_offset
.912d	68		pla		                pla
.912e	91 1e		sta ($1e),y	                sta (up),y
.9130	c8		iny		                iny
.9131	68		pla		                pla
.9132	91 1e		sta ($1e),y	                sta (up),y
.9134					evaluate_done:
.9134	60		rts		z_evaluate:     rts
.9135					xt_get_current:
.9135	ca		dex		                dex
.9136	ca		dex		                dex
.9137	a0 04		ldy #$04	                ldy #current_offset
.9139	b1 1e		lda ($1e),y	                lda (up),y
.913b	95 00		sta $00,x	                sta 0,x         ; CURRENT is a byte variable
.913d	74 01		stz $01,x	                stz 1,x         ; so the MSB is zero.
.913f	60		rts		z_get_current:  rts
.9140					xt_get_order:
.9140	a0 1e		ldy #$1e	                ldy #num_order_offset
.9142	b1 1e		lda ($1e),y	                lda (up),y
.9144	85 24		sta $24		                sta tmp1
.9146	f0 16		beq $915e	                beq _done       ; If zero, there are no wordlists.
.9148					_loop:
.9148	c6 24		dec $24		                dec tmp1        ; Count down by bytes.
.914a	a9 1f		lda #$1f	                lda #search_order_offset
.914c	18		clc		                clc
.914d	65 24		adc $24		                adc tmp1
.914f	a8		tay		                tay
.9150	ca		dex		                dex
.9151	ca		dex		                dex
.9152	b1 1e		lda ($1e),y	                lda (up),y
.9154	95 00		sta $00,x	                sta 0,x         ; Search order array is bytes, so
.9156	74 01		stz $01,x	                stz 1,x         ; put a zero in the high byte.
.9158	a9 00		lda #$00	                lda #0
.915a	c5 24		cmp $24		                cmp tmp1
.915c	d0 ea		bne $9148	                bne _loop
.915e					_done:
.915e	ca		dex		                dex
.915f	ca		dex		                dex
.9160	a0 1e		ldy #$1e	                ldy #num_order_offset
.9162	b1 1e		lda ($1e),y	                lda (up),y
.9164	95 00		sta $00,x	                sta 0,x
.9166	74 01		stz $01,x	                stz 1,x         ; We only support 8 wordlists.
.9168	60		rts		z_get_order:    rts
.9169					xt_greater_than:
.9169	20 f1 d7	jsr $d7f1	                jsr underflow_2
.916c	a0 00		ldy #$00	                ldy #0          ; default false
.916e	20 13 d7	jsr $d713	                jsr compare_16bit
.9171	f0 03		beq $9176	                beq _false
.9173	10 01		bpl $9176	                bpl _false
.9175	88		dey		                dey
.9176					_false:
.9176	98		tya		                tya
.9177	e8		inx		                inx
.9178	e8		inx		                inx
.9179	95 00		sta $00,x	                sta 0,x
.917b	95 01		sta $01,x	                sta 1,x
.917d	60		rts		z_greater_than: rts
.917e					xt_here:
.917e					xt_asm_arrow:
.917e	ca		dex		                dex
.917f	ca		dex		                dex
.9180	a5 00		lda $00		                lda cp
.9182	95 00		sta $00,x	                sta 0,x
.9184	a5 01		lda $01		                lda cp+1
.9186	95 01		sta $01,x	                sta 1,x
.9188					z_asm_arrow:
.9188	60		rts		z_here:         rts
.9189					xt_hex:
.9189	a9 10		lda #$10	                lda #16
.918b	85 18		sta $18		                sta base
.918d	64 19		stz $19		                stz base+1              ; paranoid
.918f	60		rts		z_hex:          rts
.9190					xt_hexstore:
.9190	20 f6 d7	jsr $d7f6	                jsr underflow_3
.9193	20 bb 8d	jsr $8dbb	                jsr xt_dup              ; Save copy of original address
.9196	20 7f a4	jsr $a47f	                jsr xt_two_to_r         ; ( addr1 u1 ) ( R: addr2 addr2 )
.9199					_loop:
.9199	b5 00		lda $00,x	                lda 0,x
.919b	15 01		ora $01,x	                ora 1,x
.919d	f0 36		beq $91d5	                beq _done
.919f	20 58 86	jsr $8658	                jsr xt_cleave           ; ( addr1 u1 addr3 u3 ) ( R: addr2 addr2 )
.91a2	20 7f a4	jsr $a47f	                jsr xt_two_to_r
.91a5	20 85 a7	jsr $a785	                jsr xt_zero
.91a8	20 85 a7	jsr $a785	                jsr xt_zero
.91ab	20 05 a4	jsr $a405	                jsr xt_two_r_from       ; ( addr1 u1 0 0 addr3 u3 ) ( R: addr2 addr2 )
.91ae	20 9a a2	jsr $a29a	                jsr xt_to_number        ; ( addr1 u1 n n addr4 u4 ) ( R: addr2 addr2 )
.91b1	b5 00		lda $00,x	                lda 0,x
.91b3	15 01		ora $01,x	                ora 1,x
.91b5	d0 17		bne $91ce	                bne _have_chars_left
.91b7	20 8d a3	jsr $a38d	                jsr xt_two_drop         ; ( addr1 u1 n n ) ( R: addr2 addr2 )
.91ba	20 8c 8a	jsr $8a8c	                jsr xt_d_to_s           ; ( addr1 u1 n ) ( R: addr2 addr2 )
.91bd	20 89 9a	jsr $9a89	                jsr xt_r_fetch          ; ( addr1 u1 n addr2 ) ( R: addr2 addr2 )
.91c0	20 21 86	jsr $8621	                jsr xt_c_store          ; ( addr1 u1 ) ( R: addr2 addr2 )
.91c3	20 9e 9a	jsr $9a9e	                jsr xt_r_from           ; R>
.91c6	20 29 98	jsr $9829	                jsr xt_one_plus         ; 1+
.91c9	20 4d a3	jsr $a34d	                jsr xt_to_r             ; >R ( addr1 u1 ) ( R: addr2+1 addr2 )
.91cc	80 cb		bra $9199	                bra _loop
.91ce					_have_chars_left:
.91ce	8a		txa		                txa
.91cf	18		clc		                clc
.91d0	69 08		adc #$08	                adc #8
.91d2	aa		tax		                tax
.91d3	80 c4		bra $9199	                bra _loop
.91d5					_done:
.91d5	e8		inx		                inx
.91d6	e8		inx		                inx
.91d7	e8		inx		                inx
.91d8	e8		inx		                inx                     ; 2DROP
.91d9	20 05 a4	jsr $a405	                jsr xt_two_r_from       ; ( addr2+n addr2 )
.91dc	20 8b a1	jsr $a18b	                jsr xt_swap
.91df	20 5c 95	jsr $955c	                jsr xt_minus            ; ( n )
.91e2	60		rts		z_hexstore:     rts
.91e3					xt_hold:
.91e3	20 ec d7	jsr $d7ec	                jsr underflow_1
.91e6	a5 34		lda $34		                lda tohold
.91e8	d0 02		bne $91ec	                bne +
.91ea	c6 35		dec $35		                dec tohold+1
.91ec					+
.91ec	c6 34		dec $34		                dec tohold
.91ee	b5 00		lda $00,x	                lda 0,x
.91f0	92 34		sta ($34)	                sta (tohold)
.91f2	e8		inx		                inx
.91f3	e8		inx		                inx
.91f4	60		rts		z_hold:         rts
.91f5					xt_i:
.91f5	ca		dex		                dex
.91f6	ca		dex		                dex
.91f7	86 2a		stx $2a		                stx tmpdsp
.91f9	ba		tsx		                tsx
.91fa	38		sec		                sec
.91fb	bd 01 01	lda $0101,x	                lda $0101,x     ; LSB
.91fe	fd 03 01	sbc $0103,x	                sbc $0103,x
.9201	a8		tay		                tay
.9202	bd 02 01	lda $0102,x	                lda $0102,x     ; MSB
.9205	fd 04 01	sbc $0104,x	                sbc $0104,x
.9208	a6 2a		ldx $2a		                ldx tmpdsp
.920a	95 01		sta $01,x	                sta 1,x         ; MSB of de-fudged index
.920c	94 00		sty $00,x	                sty 0,x         ; LSB of de-fudged index
.920e	60		rts		z_i:            rts
.920f					xt_if:
.920f	a0 92		ldy #$92	                ldy #>zero_branch_runtime
.9211	a9 20		lda #$20	                lda #<zero_branch_runtime
.9213	20 8f d6	jsr $d68f	                jsr cmpl_subroutine
.9216	20 7e 91	jsr $917e	                jsr xt_here
.9219	20 85 a7	jsr $a785	                jsr xt_zero
.921c	20 7a 87	jsr $877a	                jsr xt_comma
.921f	60		rts		z_if:           rts
.9220					zero_branch_runtime:
.9220	68		pla		                pla
.9221	85 22		sta $22		                sta tmpbranch
.9223	68		pla		                pla
.9224	85 23		sta $23		                sta tmpbranch+1
.9226	b5 00		lda $00,x	                lda 0,x
.9228	15 01		ora $01,x	                ora 1,x
.922a	f0 0f		beq $923b	                beq _zero
.922c	a5 22		lda $22		                lda tmpbranch   ; LSB
.922e	18		clc		                clc
.922f	69 02		adc #$02	                adc #2
.9231	85 24		sta $24		                sta tmp1
.9233	a5 23		lda $23		                lda tmpbranch+1 ; MSB
.9235	69 00		adc #$00	                adc #0          ; For carry
.9237	85 25		sta $25		                sta tmp1+1
.9239	80 13		bra $924e	                bra _done
.923b					_zero:
.923b	a0 01		ldy #$01	                ldy #1
.923d	b1 22		lda ($22),y	                lda (tmpbranch),y
.923f	85 24		sta $24		                sta tmp1
.9241	c8		iny		                iny
.9242	b1 22		lda ($22),y	                lda (tmpbranch),y
.9244	85 25		sta $25		                sta tmp1+1
.9246	a5 24		lda $24		                lda tmp1
.9248	d0 02		bne $924c	                bne +
.924a	c6 25		dec $25		                dec tmp1+1
.924c					+
.924c	c6 24		dec $24		                dec tmp1
.924e					_done:
.924e	a5 25		lda $25		                lda tmp1+1
.9250	48		pha		                pha             ; MSB first
.9251	a5 24		lda $24		                lda tmp1
.9253	48		pha		                pha
.9254	e8		inx		                inx
.9255	e8		inx		                inx
.9256	60		rts		                rts
.9257					xt_immediate:
.9257	20 2e d7	jsr $d72e	                jsr current_to_dp
.925a	a0 01		ldy #$01	                ldy #1          ; offset for status byte
.925c	b1 02		lda ($02),y	                lda (dp),y
.925e	09 04		ora #$04	                ora #IM        ; make sure bit 7 is set
.9260	91 02		sta ($02),y	                sta (dp),y
.9262	60		rts		z_immediate:    rts
.9263					xt_input:
.9263	ca		dex		                dex
.9264	ca		dex		                dex
.9265	a9 12		lda #$12	                lda #<input
.9267	95 00		sta $00,x	                sta 0,x
.9269	a9 00		lda #$00	                lda #>input
.926b	95 01		sta $01,x	                sta 1,x
.926d	60		rts		z_input:        rts
.926e					xt_input_to_r:
.926e	68		pla		                pla
.926f	85 24		sta $24		                sta tmp1
.9271	68		pla		                pla
.9272	85 25		sta $25		                sta tmp1+1
.9274	a0 07		ldy #$07	                ldy #7
.9276					_loop:
.9276	b9 06 00	lda $0006,y	                lda insrc,y     ; insrc+7 is toin+1
.9279	48		pha		                pha
.927a	88		dey		                dey
.927b	10 f9		bpl $9276	                bpl _loop
.927d	a5 25		lda $25		                lda tmp1+1
.927f	48		pha		                pha
.9280	a5 24		lda $24		                lda tmp1
.9282	48		pha		                pha
.9283	60		rts		z_input_to_r: 	rts
.9284					xt_int_to_name:
.9284	20 ec d7	jsr $d7ec	                jsr underflow_1
.9287	ca		dex		                dex
.9288	ca		dex		                dex
.9289	74 00		stz $00,x	                stz 0,x
.928b	74 01		stz $01,x	                stz 1,x
.928d					_wordlist_loop:
.928d	b5 00		lda $00,x	                lda 0,x                 ; Get the current wordlist.
.928f	0a		asl a		                asl                     ; Turn offset into cells offset.
.9290	18		clc		                clc
.9291	69 06		adc #$06	                adc #wordlists_offset
.9293	a8		tay		                tay
.9294	b1 1e		lda ($1e),y	                lda (up),y              ; Save the DP for this wordlist
.9296	85 26		sta $26		                sta tmp2                ; into tmp2
.9298	c8		iny		                iny
.9299	b1 1e		lda ($1e),y	                lda (up),y
.929b	85 27		sta $27		                sta tmp2+1
.929d	a5 26		lda $26		                lda tmp2
.929f	05 27		ora $27		                ora tmp2+1
.92a1	f0 38		beq $92db	                beq _next_wordlist
.92a3	b5 02		lda $02,x	                lda 2,x         ; Target xt is now behind wordlist id.
.92a5	85 28		sta $28		                sta tmp3        ; Save target xt in tmp3
.92a7	b5 03		lda $03,x	                lda 3,x
.92a9	85 29		sta $29		                sta tmp3+1
.92ab					_loop:
.92ab	a0 04		ldy #$04	                ldy #4          ; xt is four bytes down
.92ad	b1 26		lda ($26),y	                lda (tmp2),y    ; LSB of xt of current nt
.92af	c5 28		cmp $28		                cmp tmp3
.92b1	d0 07		bne $92ba	                bne _no_match
.92b3	c8		iny		                iny
.92b4	b1 26		lda ($26),y	                lda (tmp2),y    ; MSB of xt of current nt
.92b6	c5 29		cmp $29		                cmp tmp3+1
.92b8	f0 32		beq $92ec	                beq _match
.92ba					_no_match:
.92ba	18		clc		                clc
.92bb	a5 26		lda $26		                lda tmp2
.92bd	69 02		adc #$02	                adc #2
.92bf	85 26		sta $26		                sta tmp2
.92c1	a5 27		lda $27		                lda tmp2+1
.92c3	69 00		adc #$00	                adc #0          ; only care about carry
.92c5	85 27		sta $27		                sta tmp2+1
.92c7	a0 00		ldy #$00	                ldy #0
.92c9	b1 26		lda ($26),y	                lda (tmp2),y
.92cb	48		pha		                pha
.92cc	c8		iny		                iny
.92cd	11 26		ora ($26),y	                ora (tmp2),y
.92cf	f0 09		beq $92da	                beq _zero
.92d1	b1 26		lda ($26),y	                lda (tmp2),y
.92d3	85 27		sta $27		                sta tmp2+1
.92d5	68		pla		                pla
.92d6	85 26		sta $26		                sta tmp2
.92d8	80 d1		bra $92ab	                bra _loop
.92da					_zero:
.92da	68		pla		                pla             ; Leftover from above loop
.92db					_next_wordlist:
.92db	b5 00		lda $00,x	                lda 0,x
.92dd	1a		inc a		                ina
.92de	95 00		sta $00,x	                sta 0,x
.92e0	c9 0c		cmp #$0c	                cmp #max_wordlists
.92e2	d0 a9		bne $928d	                bne _wordlist_loop
.92e4	e8		inx		                inx
.92e5	e8		inx		                inx
.92e6	74 00		stz $00,x	                stz 0,x
.92e8	74 01		stz $01,x	                stz 1,x
.92ea	80 0a		bra $92f6	                bra z_int_to_name
.92ec					_match:
.92ec	e8		inx		                inx
.92ed	e8		inx		                inx
.92ee	a5 26		lda $26		                lda tmp2
.92f0	95 00		sta $00,x	                sta 0,x
.92f2	a5 27		lda $27		                lda tmp2+1
.92f4	95 01		sta $01,x	                sta 1,x
.92f6	60		rts		z_int_to_name:  rts
.92f7					xt_invert:
.92f7	20 ec d7	jsr $d7ec	                jsr underflow_1
.92fa	a9 ff		lda #$ff	                lda #$FF
.92fc	55 00		eor $00,x	                eor 0,x         ; LSB
.92fe	95 00		sta $00,x	                sta 0,x
.9300	a9 ff		lda #$ff	                lda #$FF
.9302	55 01		eor $01,x	                eor 1,x         ; MSB
.9304	95 01		sta $01,x	                sta 1,x
.9306	60		rts		z_invert:       rts
.9307					xt_is:
.9307	a5 16		lda $16		                lda state
.9309	05 17		ora $17		                ora state+1
.930b	f0 0c		beq $9319	                beq _interpreting
.930d					_compiling:
.930d	20 aa 85	jsr $85aa	                jsr xt_bracket_tick
.9310	a0 8a		ldy #$8a	                ldy #>xt_defer_store
.9312	a9 f2		lda #$f2	                lda #<xt_defer_store
.9314	20 8f d6	jsr $d68f	                jsr cmpl_subroutine
.9317	80 06		bra $931f	                bra _done
.9319					_interpreting:
.9319	20 ee a1	jsr $a1ee	                jsr xt_tick
.931c	20 f2 8a	jsr $8af2	                jsr xt_defer_store
.931f					_done:
.931f	60		rts		z_is:           rts
.9320					xt_j:
.9320	ca		dex		                dex
.9321	ca		dex		                dex
.9322	86 2a		stx $2a		                stx tmpdsp
.9324	ba		tsx		                tsx
.9325	38		sec		                sec
.9326	bd 07 01	lda $0107,x	                lda $0107,x     ; LSB
.9329	fd 09 01	sbc $0109,x	                sbc $0109,x
.932c	a8		tay		                tay
.932d	bd 08 01	lda $0108,x	                lda $0108,x     ; MSB
.9330	fd 0a 01	sbc $010a,x	                sbc $010A,x
.9333	a6 2a		ldx $2a		                ldx tmpdsp
.9335	95 01		sta $01,x	                sta 1,x         ; MSB of de-fudged index
.9337	94 00		sty $00,x	                sty 0,x         ; LSB of de-fudged index
.9339	60		rts		z_j:            rts
.933a					xt_key:
.933a	20 44 93	jsr $9344	                jsr key_a               ; returns char in A
.933d	ca		dex		                dex
.933e	ca		dex		                dex
.933f	95 00		sta $00,x	                sta 0,x
.9341	74 01		stz $01,x	                stz 1,x
.9343	60		rts		z_key:          rts
.9344					key_a:
.9344	6c 12 00	jmp ($0012)	                jmp (input)             ; JSR/RTS
.9347					xt_latestnt:
.9347	ca		dex		                dex
.9348	ca		dex		                dex
.9349	20 2e d7	jsr $d72e	                jsr current_to_dp
.934c	a5 02		lda $02		                lda dp
.934e	95 00		sta $00,x	                sta 0,x
.9350	a5 03		lda $03		                lda dp+1
.9352	95 01		sta $01,x	                sta 1,x
.9354	60		rts		z_latestnt:     rts
.9355					xt_latestxt:
.9355	20 47 93	jsr $9347	                jsr xt_latestnt         ; ( nt )
.9358	20 ed 95	jsr $95ed	                jsr xt_name_to_int      ; ( xt )
.935b	60		rts		z_latestxt:     rts
.935c					xt_leave:
.935c	68		pla		                pla
.935d	68		pla		                pla
.935e	68		pla		                pla
.935f	68		pla		                pla
.9360	60		rts		                rts             ; this must be compiled, so keep before z_leave
.9361					z_leave:
.9361					xt_left_bracket:
.9361	64 16		stz $16		                stz state
.9363	64 17		stz $17		                stz state+1
.9365	60		rts		z_left_bracket: rts
.9366					xt_less_number_sign:
.9366	20 ad 98	jsr $98ad	                jsr xt_pad      ; ( addr )
.9369	b5 00		lda $00,x	                lda 0,x
.936b	85 34		sta $34		                sta tohold
.936d	b5 01		lda $01,x	                lda 1,x
.936f	85 35		sta $35		                sta tohold+1
.9371	e8		inx		                inx
.9372	e8		inx		                inx
.9373					z_less_number_sign:
.9373	60		rts		                rts
.9374					xt_less_than:
.9374	20 f1 d7	jsr $d7f1	                jsr underflow_2
.9377	a0 00		ldy #$00	                ldy #0          ; default false
.9379	20 13 d7	jsr $d713	                jsr compare_16bit
.937c	f0 03		beq $9381	                beq _false
.937e	30 01		bmi $9381	                bmi _false
.9380	88		dey		                dey
.9381					_false:
.9381	98		tya		                tya
.9382	e8		inx		                inx
.9383	e8		inx		                inx
.9384	95 00		sta $00,x	                sta 0,x
.9386	95 01		sta $01,x	                sta 1,x
.9388	60		rts		z_less_than:    rts
.9389					xt_list:
.9389	20 ec d7	jsr $d7ec	                jsr underflow_1
.938c	20 b6 9e	jsr $9eb6	                jsr xt_scr
.938f	20 6a a1	jsr $a16a	                jsr xt_store
.9392	20 23 a8	jsr $a823	                jsr xt_editor_l
.9395	60		rts		z_list:         rts
.9396					xt_literal:
.9396	20 ec d7	jsr $d7ec	                jsr underflow_1
.9399	a0 93		ldy #$93	                ldy #>literal_runtime
.939b	a9 a4		lda #$a4	                lda #<literal_runtime
.939d	20 8f d6	jsr $d68f	                jsr cmpl_subroutine
.93a0	20 7a 87	jsr $877a	                jsr xt_comma
.93a3	60		rts		z_literal:      rts
.93a4					literal_runtime:
.93a4	ca		dex		                dex
.93a5	ca		dex		                dex
.93a6	68		pla		                pla             ; LSB
.93a7	85 24		sta $24		                sta tmp1
.93a9	68		pla		                pla             ; MSB
.93aa	85 25		sta $25		                sta tmp1+1
.93ac	a0 01		ldy #$01	                ldy #1
.93ae	b1 24		lda ($24),y	                lda (tmp1),y    ; LSB
.93b0	95 00		sta $00,x	                sta 0,x
.93b2	c8		iny		                iny
.93b3	b1 24		lda ($24),y	                lda (tmp1),y    ; MSB
.93b5	95 01		sta $01,x	                sta 1,x
.93b7	98		tya		                tya
.93b8	18		clc		                clc
.93b9	65 24		adc $24		                adc tmp1
.93bb	a8		tay		                tay
.93bc	a5 25		lda $25		                lda tmp1+1
.93be	69 00		adc #$00	                adc #0
.93c0	48		pha		                pha
.93c1	5a		phy		                phy
.93c2	60		rts		                rts
.93c3					xt_load:
.93c3	20 ec d7	jsr $d7ec	                jsr underflow_1
.93c6	a0 01		ldy #$01	                ldy #blk_offset+1
.93c8	b1 1e		lda ($1e),y	                lda (up),y
.93ca	48		pha		                pha
.93cb	88		dey		                dey
.93cc	b1 1e		lda ($1e),y	                lda (up),y
.93ce	48		pha		                pha
.93cf	b5 00		lda $00,x	                lda 0,x
.93d1	91 1e		sta ($1e),y	                sta (up),y
.93d3	c8		iny		                iny
.93d4	b5 01		lda $01,x	                lda 1,x
.93d6	91 1e		sta ($1e),y	                sta (up),y
.93d8	20 cd 83	jsr $83cd	                jsr xt_block
.93db	ca		dex		                dex
.93dc	ca		dex		                dex
.93dd	a9 04		lda #$04	                lda #4
.93df	95 01		sta $01,x	                sta 1,x
.93e1	74 00		stz $00,x	                stz 0,x
.93e3	20 db 90	jsr $90db	                jsr load_evaluate
.93e6	a0 00		ldy #$00	                ldy #blk_offset
.93e8	68		pla		                pla
.93e9	91 1e		sta ($1e),y	                sta (up),y
.93eb	c8		iny		                iny
.93ec	68		pla		                pla
.93ed	91 1e		sta ($1e),y	                sta (up),y
.93ef	88		dey		                dey
.93f0	11 1e		ora ($1e),y	                ora (up),y
.93f2	f0 12		beq $9406	                beq _done
.93f4	ca		dex		                dex
.93f5	ca		dex		                dex
.93f6	a0 00		ldy #$00	                ldy #blk_offset
.93f8	b1 1e		lda ($1e),y	                lda (up),y
.93fa	95 00		sta $00,x	                sta 0,x
.93fc	c8		iny		                iny
.93fd	b1 1e		lda ($1e),y	                lda (up),y
.93ff	95 01		sta $01,x	                sta 1,x
.9401	20 cd 83	jsr $83cd	                jsr xt_block
.9404	e8		inx		                inx
.9405	e8		inx		                inx
.9406					_done:
.9406	60		rts		z_load:         rts
.9407					xt_loop:
.9407	a0 98		ldy #$98	                ldy #>xt_one
.9409	a9 14		lda #$14	                lda #<xt_one
.940b	20 8f d6	jsr $d68f	                jsr cmpl_subroutine     ; drop through to +LOOP
.940e					xt_plus_loop:
.940e	a0 11		ldy #$11	                ldy #plus_loop_runtime_end-plus_loop_runtime
.9410	5a		phy		                phy             ; save counter to adjust CP
.9411					-
.9411	b9 75 94	lda $9475,y	                lda plus_loop_runtime,y
.9414	91 00		sta ($00),y	                sta (cp),y
.9416	88		dey		                dey
.9417	10 f8		bpl $9411	                bpl -
.9419	68		pla		                pla
.941a	18		clc		                clc
.941b	65 00		adc $00		                adc cp
.941d	85 00		sta $00		                sta cp
.941f	a5 01		lda $01		                lda cp+1
.9421	69 00		adc #$00	                adc #0          ; only need carry
.9423	85 01		sta $01		                sta cp+1
.9425	20 7a 87	jsr $877a	                jsr xt_comma
.9428	a9 68		lda #$68	                lda #$68                ; opcode for PLA
.942a	a0 06		ldy #$06	                ldy #6
.942c					-
.942c	91 00		sta ($00),y	                sta (cp),y
.942e	88		dey		                dey
.942f	10 fb		bpl $942c	                bpl -
.9431	a9 06		lda #$06	                lda #6
.9433	18		clc		                clc
.9434	65 00		adc $00		                adc cp
.9436	85 00		sta $00		                sta cp
.9438	a5 01		lda $01		                lda cp+1
.943a	69 00		adc #$00	                adc #0                  ; only need carry
.943c	85 01		sta $01		                sta cp+1
.943e	b5 00		lda $00,x	                lda 0,x
.9440	85 24		sta $24		                sta tmp1
.9442	b5 01		lda $01,x	                lda 1,x
.9444	85 25		sta $25		                sta tmp1+1
.9446	e8		inx		                inx
.9447	e8		inx		                inx
.9448	a5 00		lda $00		                lda cp
.944a	38		sec		                sec
.944b	e9 01		sbc #$01	                sbc #1
.944d	85 26		sta $26		                sta tmp2
.944f	a5 01		lda $01		                lda cp+1
.9451	e9 00		sbc #$00	                sbc #0
.9453	85 27		sta $27		                sta tmp2+1
.9455	a0 00		ldy #$00	                ldy #0
.9457	a9 a9		lda #$a9	                lda #$A9        ; opcode for LDA immediate
.9459	91 24		sta ($24),y	                sta (tmp1),y
.945b	c8		iny		                iny
.945c	a5 27		lda $27		                lda tmp2+1      ; MSB
.945e	91 24		sta ($24),y	                sta (tmp1),y
.9460	c8		iny		                iny
.9461	a9 48		lda #$48	                lda #$48        ; Opcode for PHA
.9463	91 24		sta ($24),y	                sta (tmp1),y
.9465	c8		iny		                iny
.9466	a9 a9		lda #$a9	                lda #$A9        ; opcode for LDA immediate
.9468	91 24		sta ($24),y	                sta (tmp1),y
.946a	c8		iny		                iny
.946b	a5 26		lda $26		                lda tmp2        ; LSB
.946d	91 24		sta ($24),y	                sta (tmp1),y
.946f	c8		iny		                iny
.9470	a9 48		lda #$48	                lda #$48        ; Opcode for PHA
.9472	91 24		sta ($24),y	                sta (tmp1),y
.9474					z_loop:
.9474	60		rts		z_plus_loop:    rts
.9475					plus_loop_runtime:
.9475	18		clc		                clc
.9476	68		pla		                pla             ; LSB of index
.9477	75 00		adc $00,x	                adc 0,x         ; LSB of step
.9479	a8		tay		                tay             ; temporary storage of LSB
.947a	b8		clv		                clv
.947b	68		pla		                pla             ; MSB of index
.947c	75 01		adc $01,x	                adc 1,x         ; MSB of step
.947e	48		pha		                pha             ; put MSB of index back on stack
.947f	98		tya		                tya             ; put LSB of index back on stack
.9480	48		pha		                pha
.9481	e8		inx		                inx             ; dump step from TOS
.9482	e8		inx		                inx
.9483	70 03		bvs $9488	                bvs _hack+3     ; skip over JMP instruction
.9485					_hack:
>9485	4c				                .byte $4C
.9486					plus_loop_runtime_end:
.9486					xt_lshift:
.9486	20 f1 d7	jsr $d7f1	                jsr underflow_2
.9489	b5 00		lda $00,x	                lda 0,x
.948b	29 0f		and #$0f	                and #%00001111
.948d	f0 08		beq $9497	                beq _done
.948f	a8		tay		                tay
.9490					_loop:
.9490	16 02		asl $02,x	                asl 2,x
.9492	36 03		rol $03,x	                rol 3,x
.9494	88		dey		                dey
.9495	d0 f9		bne $9490	                bne _loop
.9497					_done:
.9497	e8		inx		                inx
.9498	e8		inx		                inx
.9499	60		rts		z_lshift:       rts
.949a					xt_m_star:
.949a	20 f1 d7	jsr $d7f1	                jsr underflow_2
.949d	b5 01		lda $01,x	                lda 1,x         ; MSB of n1
.949f	55 03		eor $03,x	                eor 3,x         ; MSB of n2
.94a1	48		pha		                pha
.94a2	20 23 81	jsr $8123	                jsr xt_abs
.94a5	20 8b a1	jsr $a18b	                jsr xt_swap
.94a8	20 23 81	jsr $8123	                jsr xt_abs
.94ab	20 d9 a5	jsr $a5d9	                jsr xt_um_star          ; ( d )
.94ae	68		pla		                pla
.94af	10 03		bpl $94b4	                bpl _done
.94b1	20 4d 8b	jsr $8b4d	                jsr xt_dnegate
.94b4					_done:
.94b4	60		rts		z_m_star:       rts
.94b5					xt_marker:
.94b5	20 2e d7	jsr $d72e	                jsr current_to_dp
.94b8	a5 02		lda $02		                lda dp
.94ba	48		pha		                pha
.94bb	a5 03		lda $03		                lda dp+1
.94bd	48		pha		                pha
.94be	a5 00		lda $00		                lda cp
.94c0	48		pha		                pha
.94c1	a5 01		lda $01		                lda cp+1
.94c3	48		pha		                pha
.94c4	20 75 89	jsr $8975	                jsr xt_create
.94c7	a5 00		lda $00		                lda cp          ; LSB
.94c9	38		sec		                sec
.94ca	e9 02		sbc #$02	                sbc #2
.94cc	85 00		sta $00		                sta cp
.94ce	a5 01		lda $01		                lda cp+1        ; MSB
.94d0	e9 00		sbc #$00	                sbc #0          ; we only care about the borrow
.94d2	85 01		sta $01		                sta cp+1
.94d4	a0 94		ldy #$94	                ldy #>marker_runtime
.94d6	a9 f3		lda #$f3	                lda #<marker_runtime
.94d8	20 9b d6	jsr $d69b	                jsr cmpl_word
.94db	7a		ply		                ply                     ; MSB
.94dc	68		pla		                pla                     ; LSB
.94dd	20 9b d6	jsr $d69b	                jsr cmpl_word
.94e0	7a		ply		                ply                     ; MSB
.94e1	68		pla		                pla                     ; LSB
.94e2	20 9b d6	jsr $d69b	                jsr cmpl_word
.94e5	a0 04		ldy #$04	                ldy #4                  ; Start at CURRENT
.94e7					_marker_loop:
.94e7	b1 1e		lda ($1e),y	                lda (up),y
.94e9	20 9f d6	jsr $d69f	                jsr cmpl_a
.94ec	c8		iny		                iny
.94ed	98		tya		                tya
.94ee	c9 28		cmp #$28	                cmp #40                 ; One past the end of the search order.
.94f0	d0 f5		bne $94e7	                bne _marker_loop
.94f2	60		rts		z_marker:       rts
.94f3					marker_runtime:
.94f3	68		pla		                pla
.94f4	85 24		sta $24		                sta tmp1        ; LSB of address
.94f6	68		pla		                pla
.94f7	85 25		sta $25		                sta tmp1+1      ; MSB of address
.94f9	e6 24		inc $24		                inc tmp1
.94fb	d0 02		bne $94ff	                bne +
.94fd	e6 25		inc $25		                inc tmp1+1
.94ff					+
.94ff	a0 00		ldy #$00	                ldy #0
.9501	b1 24		lda ($24),y	                lda (tmp1),y
.9503	85 00		sta $00		                sta cp
.9505	c8		iny		                iny
.9506	b1 24		lda ($24),y	                lda (tmp1),y
.9508	85 01		sta $01		                sta cp+1
.950a	c8		iny		                iny
.950b	b1 24		lda ($24),y	                lda (tmp1),y
.950d	85 02		sta $02		                sta dp
.950f	c8		iny		                iny
.9510	b1 24		lda ($24),y	                lda (tmp1),y
.9512	85 03		sta $03		                sta dp+1
.9514	a0 04		ldy #$04	                ldy #4
.9516					_marker_restore_loop:
.9516	b1 24		lda ($24),y	                lda (tmp1), y
.9518	91 1e		sta ($1e),y	                sta (up), y
.951a	c8		iny		                iny
.951b	98		tya		                tya
.951c	c9 28		cmp #$28	                cmp #40                 ; One past the end of the search order.
.951e	d0 f6		bne $9516	                bne _marker_restore_loop
.9520	20 41 d7	jsr $d741	                jsr dp_to_current       ; Move the CURRENT DP back.
.9523	60		rts		                rts
.9524					xt_max:
.9524	20 f1 d7	jsr $d7f1	                jsr underflow_2
.9527	b5 00		lda $00,x	                lda 0,x         ; LSB of TOS
.9529	d5 02		cmp $02,x	                cmp 2,x         ; LSB of NOS, this sets the carry
.952b	b5 01		lda $01,x	                lda 1,x         ; MSB of TOS
.952d	f5 03		sbc $03,x	                sbc 3,x         ; MSB of NOS
.952f	50 02		bvc $9533	                bvc _no_overflow
.9531	49 80		eor #$80	                eor #$80        ; complement negative flag
.9533					_no_overflow:
.9533	30 08		bmi $953d	                bmi _keep_nos
.9535	b5 00		lda $00,x	                lda 0,x
.9537	95 02		sta $02,x	                sta 2,x
.9539	b5 01		lda $01,x	                lda 1,x
.953b	95 03		sta $03,x	                sta 3,x
.953d					_keep_nos:
.953d	e8		inx		                inx
.953e	e8		inx		                inx
.953f	60		rts		z_max:          rts
.9540					xt_min:
.9540	20 f1 d7	jsr $d7f1	                jsr underflow_2
.9543	b5 00		lda $00,x	                lda 0,x         ; LSB of TOS
.9545	d5 02		cmp $02,x	                cmp 2,x         ; LSB of NOS, this sets carry
.9547	b5 01		lda $01,x	                lda 1,x         ; MSB of TOS
.9549	f5 03		sbc $03,x	                sbc 3,x         ; MSB of NOS
.954b	50 02		bvc $954f	                bvc _no_overflow
.954d	49 80		eor #$80	                eor #$80
.954f					_no_overflow:
.954f	10 08		bpl $9559	                bpl _keep_nos
.9551	b5 00		lda $00,x	                lda 0,x
.9553	95 02		sta $02,x	                sta 2,x
.9555	b5 01		lda $01,x	                lda 1,x
.9557	95 03		sta $03,x	                sta 3,x
.9559					_keep_nos:
.9559	e8		inx		                inx
.955a	e8		inx		                inx
.955b	60		rts		z_min:          rts
.955c					xt_minus:
.955c	20 f1 d7	jsr $d7f1	                jsr underflow_2
.955f	38		sec		                sec
.9560	b5 02		lda $02,x	                lda 2,x         ; LSB
.9562	f5 00		sbc $00,x	                sbc 0,x
.9564	95 02		sta $02,x	                sta 2,x
.9566	b5 03		lda $03,x	                lda 3,x         ; MSB
.9568	f5 01		sbc $01,x	                sbc 1,x
.956a	95 03		sta $03,x	                sta 3,x
.956c	e8		inx		                inx
.956d	e8		inx		                inx
.956e	60		rts		z_minus:        rts
.956f					xt_minus_leading:
.956f	20 f1 d7	jsr $d7f1	                jsr underflow_2
.9572					_loop:
.9572	b5 00		lda $00,x	                lda 0,x
.9574	15 01		ora $01,x	                ora 1,x
.9576	f0 0f		beq $9587	                beq _done
.9578	a1 02		lda ($02,x)	                lda (2,x)               ; get first character
.957a	20 df d7	jsr $d7df	                jsr is_whitespace
.957d	90 08		bcc $9587	                bcc _done
.957f	20 14 98	jsr $9814	                jsr xt_one              ; ( addr u 1 )
.9582	20 f6 9f	jsr $9ff6	                jsr xt_slash_string     ; ( addr+ u-1 )
.9585	80 eb		bra $9572	                bra _loop
.9587					_done:
.9587					z_minus_leading:
.9587	60		rts		                rts
.9588					xt_minus_trailing:
.9588	20 f1 d7	jsr $d7f1	                jsr underflow_2
.958b	b5 00		lda $00,x	                lda 0,x         ; LSB of n
.958d	15 01		ora $01,x	                ora 1,x         ; MSB of n
.958f	f0 33		beq $95c4	                beq _done
.9591	18		clc		                clc
.9592	b5 02		lda $02,x	                lda 2,x         ; LSB of addr
.9594	75 00		adc $00,x	                adc 0,x
.9596	85 24		sta $24		                sta tmp1
.9598	b5 03		lda $03,x	                lda 3,x         ; MSB of addr
.959a	75 01		adc $01,x	                adc 1,x
.959c	85 25		sta $25		                sta tmp1+1
.959e	a5 24		lda $24		                lda tmp1
.95a0	d0 02		bne $95a4	                bne +
.95a2	c6 25		dec $25		                dec tmp1+1
.95a4					+
.95a4	c6 24		dec $24		                dec tmp1
.95a6					_loop:
.95a6	b2 24		lda ($24)	                lda (tmp1)
.95a8	c9 20		cmp #$20	                cmp #AscSP
.95aa	d0 18		bne $95c4	                bne _done
.95ac	a5 24		lda $24		                lda tmp1
.95ae	d0 02		bne $95b2	                bne +
.95b0	c6 25		dec $25		                dec tmp1+1
.95b2					+
.95b2	c6 24		dec $24		                dec tmp1
.95b4	b5 00		lda $00,x	                lda 0,x
.95b6	d0 02		bne $95ba	                bne +
.95b8	d6 01		dec $01,x	                dec 1,x
.95ba					+
.95ba	d6 00		dec $00,x	                dec 0,x
.95bc	b5 00		lda $00,x	                lda 0,x
.95be	15 01		ora $01,x	                ora 1,x
.95c0	f0 02		beq $95c4	                beq _done       ; Count has reached zero - we're done!
.95c2	80 e2		bra $95a6	                bra _loop
.95c4					_done:
.95c4					z_minus_trailing:
.95c4	60		rts		                rts
.95c5					xt_mod:
.95c5	20 f1 d7	jsr $d7f1	                jsr underflow_2
.95c8	20 de 9f	jsr $9fde	                jsr xt_slash_mod
.95cb	e8		inx		                inx             ; DROP
.95cc	e8		inx		                inx
.95cd					z_mod:
.95cd	60		rts		                rts
.95ce					xt_move:
.95ce	b5 03		lda $03,x	                lda 3,x                 ; MSB of addr2
.95d0	d5 05		cmp $05,x	                cmp 5,x                 ; MSB of addr1
.95d2	f0 05		beq $95d9	                beq _lsb                ; wasn't helpful, move to LSB
.95d4	b0 0e		bcs $95e4	                bcs _to_move_up         ; we want CMOVE>
.95d6	4c a5 86	jmp $86a5	                jmp xt_cmove            ; JSR/RTS
.95d9					_lsb:
.95d9	b5 02		lda $02,x	                lda 2,x                 ; LSB of addr2
.95db	d5 04		cmp $04,x	                cmp 4,x                 ; LSB of addr1
.95dd	f0 08		beq $95e7	                beq _equal              ; LSB is equal as well
.95df	b0 03		bcs $95e4	                bcs _to_move_up         ; we want CMOVE>
.95e1	4c a5 86	jmp $86a5	                jmp xt_cmove            ; JSR/RTS
.95e4					_to_move_up:
.95e4	4c e0 86	jmp $86e0	                jmp xt_cmove_up         ; JSR/RTS
.95e7					_equal:
.95e7	8a		txa		                txa
.95e8	18		clc		                clc
.95e9	69 06		adc #$06	                adc #6
.95eb	aa		tax		                tax
.95ec	60		rts		z_move:         rts
.95ed					xt_name_to_int:
.95ed	20 ec d7	jsr $d7ec	                jsr underflow_1
.95f0	b5 00		lda $00,x	                lda 0,x
.95f2	18		clc		                clc
.95f3	69 04		adc #$04	                adc #4
.95f5	85 28		sta $28		                sta tmp3
.95f7	b5 01		lda $01,x	                lda 1,x
.95f9	90 01		bcc $95fc	                bcc _done
.95fb	1a		inc a		                ina
.95fc					_done:
.95fc	85 29		sta $29		                sta tmp3+1
.95fe	a0 00		ldy #$00	                ldy #0
.9600	b1 28		lda ($28),y	                lda (tmp3),y
.9602	95 00		sta $00,x	                sta 0,x
.9604	c8		iny		                iny
.9605	b1 28		lda ($28),y	                lda (tmp3),y
.9607	95 01		sta $01,x	                sta 1,x
.9609	60		rts		z_name_to_int:  rts
.960a					xt_name_to_string:
.960a	20 ec d7	jsr $d7ec	                jsr underflow_1
.960d	ca		dex		                dex
.960e	ca		dex		                dex
.960f	a1 02		lda ($02,x)	                lda (2,x)
.9611	95 00		sta $00,x	                sta 0,x
.9613	74 01		stz $01,x	                stz 1,x
.9615	b5 02		lda $02,x	                lda 2,x         ; LSB
.9617	18		clc		                clc
.9618	69 08		adc #$08	                adc #8
.961a	a8		tay		                tay
.961b	b5 03		lda $03,x	                lda 3,x         ; MSB
.961d	69 00		adc #$00	                adc #0          ; just need carry
.961f	95 03		sta $03,x	                sta 3,x
.9621	94 02		sty $02,x	                sty 2,x
.9623					z_name_to_string:
.9623	60		rts		                rts
.9624					xt_nc_limit:
.9624	ca		dex		                dex
.9625	ca		dex		                dex
.9626	a9 1a		lda #$1a	                lda #<nc_limit
.9628	95 00		sta $00,x	                sta 0,x
.962a	a9 00		lda #$00	                lda #>nc_limit
.962c	95 01		sta $01,x	                sta 1,x
.962e	60		rts		z_nc_limit:     rts
.962f					xt_negate:
.962f	20 ec d7	jsr $d7ec	                jsr underflow_1
.9632	a9 00		lda #$00	        	lda #0
.9634	38		sec		                sec
.9635	f5 00		sbc $00,x	                sbc 0,x         ; LSB
.9637	95 00		sta $00,x	                sta 0,x
.9639	a9 00		lda #$00	                lda #0
.963b	f5 01		sbc $01,x	                sbc 1,x         ; MSB
.963d	95 01		sta $01,x	                sta 1,x
.963f	60		rts		z_negate:       rts
.9640					xt_never_native:
.9640	20 2e d7	jsr $d72e	                jsr current_to_dp
.9643	a0 01		ldy #$01	                ldy #1          ; offset for status byte
.9645	b1 02		lda ($02),y	                lda (dp),y
.9647	09 08		ora #$08	                ora #NN         ; Make sure NN flag is set
.9649	29 fd		and #$fd	                and #$ff-AN     ; and AN flag is clear.
.964b	91 02		sta ($02),y	                sta (dp),y
.964d					z_never_native:
.964d	60		rts		                rts
.964e					xt_nip:
.964e	20 f1 d7	jsr $d7f1	                jsr underflow_2
.9651	b5 00		lda $00,x	                lda 0,x         ; LSB
.9653	95 02		sta $02,x	                sta 2,x
.9655	b5 01		lda $01,x	                lda 1,x         ; MSB
.9657	95 03		sta $03,x	                sta 3,x
.9659	e8		inx		                inx
.965a	e8		inx		                inx
.965b	60		rts		z_nip:          rts
.965c					xt_not_equals:
.965c	20 f1 d7	jsr $d7f1	                jsr underflow_2
.965f	a0 00		ldy #$00	                ldy #0                  ; default is true
.9661	b5 00		lda $00,x	                lda 0,x                 ; LSB
.9663	d5 02		cmp $02,x	                cmp 2,x
.9665	d0 0a		bne $9671	                bne _not_equal
.9667	b5 01		lda $01,x	                lda 1,x                 ; MSB
.9669	d5 03		cmp $03,x	                cmp 3,x
.966b	d0 04		bne $9671	                bne _not_equal
.966d	a9 ff		lda #$ff	                lda #$FF
.966f	80 01		bra $9672	                bra _done
.9671					_not_equal:
.9671	88		dey		                dey                     ; drop thru to done
.9672					_done:
.9672	98		tya		                tya
.9673	e8		inx		                inx
.9674	e8		inx		                inx
.9675	95 00		sta $00,x	                sta 0,x
.9677	95 01		sta $01,x	                sta 1,x
.9679	60		rts		z_not_equals:   rts
.967a					xt_not_rote:
.967a	20 f6 d7	jsr $d7f6	                jsr underflow_3
.967d	b4 01		ldy $01,x	                ldy 1,x         ; MSB first
.967f	b5 03		lda $03,x	                lda 3,x
.9681	95 01		sta $01,x	                sta 1,x
.9683	b5 05		lda $05,x	                lda 5,x
.9685	95 03		sta $03,x	                sta 3,x
.9687	94 05		sty $05,x	                sty 5,x
.9689	b4 00		ldy $00,x	                ldy 0,x         ; LSB second
.968b	b5 02		lda $02,x	                lda 2,x
.968d	95 00		sta $00,x	                sta 0,x
.968f	b5 04		lda $04,x	                lda 4,x
.9691	95 02		sta $02,x	                sta 2,x
.9693	94 04		sty $04,x	                sty 4,x
.9695	60		rts		z_not_rote:     rts
.9696					xt_number:
.9696	20 f1 d7	jsr $d7f1	                jsr underflow_2
.9699	64 2a		stz $2a		                stz tmpdsp      ; flag for double
.969b	64 2b		stz $2b		                stz tmpdsp+1    ; flag for minus
.969d	a5 18		lda $18		                lda base
.969f	48		pha		                pha
.96a0	20 95 a3	jsr $a395	                jsr xt_two_dup
.96a3	a1 02		lda ($02,x)	                lda (2,x)
.96a5					_check_dec:
.96a5	c9 23		cmp #$23	                cmp #$23        ; ASCII for "#"
.96a7	d0 04		bne $96ad	                bne _check_hex
.96a9	a9 0a		lda #$0a	                lda #$0A
.96ab	80 42		bra $96ef	                bra _base_changed
.96ad					_check_hex:
.96ad	c9 24		cmp #$24	                cmp #$24        ; ASCII for "$"
.96af	d0 04		bne $96b5	                bne _check_binary
.96b1	a9 10		lda #$10	                lda #$10
.96b3	80 3a		bra $96ef	                bra _base_changed
.96b5					_check_binary:
.96b5	c9 25		cmp #$25	                cmp #$25        ; ASCII for "%"
.96b7	d0 04		bne $96bd	                bne _check_char
.96b9	a9 02		lda #$02	                lda #$02
.96bb	80 32		bra $96ef	                bra _base_changed
.96bd					_check_char:
.96bd	c9 27		cmp #$27	                cmp #$27        ; ASCII for "'"
.96bf	d0 3a		bne $96fb	                bne _check_minus
.96c1	b5 00		lda $00,x	                lda 0,x         ; Get the length
.96c3	c9 03		cmp #$03	                cmp #$03
.96c5	d0 26		bne $96ed	                bne _not_a_char
.96c7	b5 01		lda $01,x	                lda 1,x
.96c9	d0 22		bne $96ed	                bne _not_a_char ; No compare needed to check for non-zero.
.96cb	b5 02		lda $02,x	                lda 2,x         ; LSB of address
.96cd	18		clc		                clc
.96ce	69 02		adc #$02	                adc #2          ; length of string
.96d0	85 2c		sta $2c		                sta tmptos
.96d2	b5 03		lda $03,x	                lda 3,x
.96d4	69 00		adc #$00	                adc #0          ; only need carry
.96d6	85 2d		sta $2d		                sta tmptos+1
.96d8	b2 2c		lda ($2c)	                lda (tmptos)
.96da	c9 27		cmp #$27	                cmp #$27        ; ASCII for "'"
.96dc	d0 0f		bne $96ed	                bne _not_a_char
.96de	f6 02		inc $02,x	                inc 2,x
.96e0	d0 02		bne $96e4	                bne +
.96e2	f6 03		inc $03,x	                inc 3,x
.96e4					+
.96e4	a1 02		lda ($02,x)	                lda (2,x)
.96e6	95 02		sta $02,x	                sta 2,x
.96e8	74 03		stz $03,x	                stz 3,x
.96ea	4c 6b 97	jmp $976b	                jmp _drop_original_string ; Single flag will drop the TOS for us.
.96ed					_not_a_char:
.96ed	80 5a		bra $9749	                bra _number_error
.96ef					_base_changed:
.96ef	85 18		sta $18		                sta base        ; Switch to the new base
.96f1	f6 02		inc $02,x	                inc 2,x         ; start one character later
.96f3	d0 02		bne $96f7	                bne +
.96f5	f6 03		inc $03,x	                inc 3,x
.96f7					+
.96f7	d6 00		dec $00,x	                dec 0,x         ; decrease string length by one
.96f9	a1 02		lda ($02,x)	                lda (2,x)       ; Load the first char again
.96fb					_check_minus:
.96fb	c9 2d		cmp #$2d	                cmp #$2D        ; ASCII for "-"
.96fd	d0 0a		bne $9709	                bne _check_dot
.96ff	c6 2b		dec $2b		                dec tmpdsp+1
.9701	f6 02		inc $02,x	                inc 2,x         ; start one character later
.9703	d0 02		bne $9707	                bne +
.9705	f6 03		inc $03,x	                inc 3,x
.9707					+
.9707	d6 00		dec $00,x	                dec 0,x         ; decrease string length by one
.9709					_check_dot:
.9709	b5 02		lda $02,x	                lda 2,x         ; LSB of address
.970b	18		clc		                clc
.970c	75 00		adc $00,x	                adc 0,x         ; length of string
.970e	85 2c		sta $2c		                sta tmptos
.9710	b5 03		lda $03,x	                lda 3,x
.9712	69 00		adc #$00	                adc #0          ; only need carry
.9714	85 2d		sta $2d		                sta tmptos+1
.9716	a5 2c		lda $2c		                lda tmptos
.9718	d0 02		bne $971c	                bne +
.971a	c6 2d		dec $2d		                dec tmptos+1
.971c					+
.971c	c6 2c		dec $2c		                dec tmptos
.971e	b2 2c		lda ($2c)	                lda (tmptos)
.9720	c9 2e		cmp #$2e	                cmp #'.'
.9722	d0 04		bne $9728	                bne _main
.9724	c6 2a		dec $2a		                dec tmpdsp
.9726	d6 00		dec $00,x	                dec 0,x
.9728					_main:
.9728	ca		dex		                dex
.9729	ca		dex		                dex
.972a	ca		dex		                dex
.972b	ca		dex		                dex
.972c	b5 04		lda $04,x	                lda 4,x         ; LSB of length
.972e	95 00		sta $00,x	                sta 0,x
.9730	74 01		stz $01,x	                stz 1,x         ; MSB, max length 255 chars
.9732	b5 06		lda $06,x	                lda 6,x         ; LSB of address
.9734	95 02		sta $02,x	                sta 2,x
.9736	b5 07		lda $07,x	                lda 7,x         ; MSB of address
.9738	95 03		sta $03,x	                sta 3,x
.973a	74 04		stz $04,x	                stz 4,x         ; clear space for ud
.973c	74 05		stz $05,x	                stz 5,x
.973e	74 06		stz $06,x	                stz 6,x
.9740	74 07		stz $07,x	                stz 7,x
.9742	20 9a a2	jsr $a29a	                jsr xt_to_number        ; (ud addr u -- ud addr u )
.9745	b5 00		lda $00,x	                lda 0,x
.9747	f0 1e		beq $9767	                beq _all_converted
.9749					_number_error:
.9749	20 8d a3	jsr $a38d	                jsr xt_two_drop ; >NUMBER modified addr u
.974c	20 8d a3	jsr $a38d	                jsr xt_two_drop ; ud   (partially converted number)
.974f	a9 3e		lda #$3e	                lda #$3E        ; ASCII for ">"
.9751	20 02 8e	jsr $8e02	                jsr emit_a
.9754	20 e0 a4	jsr $a4e0	                jsr xt_type
.9757	a9 3c		lda #$3c	                lda #$3C        ; ASCII for "<"
.9759	20 02 8e	jsr $8e02	                jsr emit_a
.975c	20 fb a0	jsr $a0fb	                jsr xt_space
.975f	68		pla		                pla
.9760	85 18		sta $18		                sta base
.9762	a9 08		lda #$08	                lda #err_syntax
.9764	4c 02 d8	jmp $d802	                jmp error
.9767					_all_converted:
.9767	e8		inx		                inx ; Drop the current addr u
.9768	e8		inx		                inx
.9769	e8		inx		                inx
.976a	e8		inx		                inx
.976b					_drop_original_string:
.976b	20 5b a4	jsr $a45b	                jsr xt_two_swap  ; Drop the original addr u
.976e	20 8d a3	jsr $a38d	                jsr xt_two_drop  ; (was saved for unknown word error message)
.9771	a5 2a		lda $2a		                lda tmpdsp      ; flag for double
.9773	f0 0d		beq $9782	                beq _single
.9775	a9 20		lda #$20	                lda #%00100000
.9777	04 20		tsb $20		                tsb status
.9779	a5 2b		lda $2b		                lda tmpdsp+1
.977b	f0 12		beq $978f	                beq _done       ; no minus, all done
.977d	20 4d 8b	jsr $8b4d	                jsr xt_dnegate
.9780	80 0d		bra $978f	                bra _done
.9782					_single:
.9782	e8		inx		                inx
.9783	e8		inx		                inx
.9784	a9 20		lda #$20	                lda #%00100000
.9786	14 20		trb $20		                trb status
.9788	a5 2b		lda $2b		                lda tmpdsp+1
.978a	f0 03		beq $978f	                beq _done       ; no minus, all done
.978c	20 2f 96	jsr $962f	                jsr xt_negate
.978f					_done:
.978f	68		pla		                pla
.9790	85 18		sta $18		                sta base
.9792	60		rts		z_number:       rts
.9793					xt_number_sign:
.9793	20 f1 d7	jsr $d7f1	                jsr underflow_2         ; double number
.9796	20 93 83	jsr $8393	                jsr xt_base
.9799	20 8c 8f	jsr $8f8c	                jsr xt_fetch            ; ( ud1 base )
.979c	20 4d a3	jsr $a34d	                jsr xt_to_r             ; >r
.979f	20 85 a7	jsr $a785	                jsr xt_zero             ; 0
.97a2	20 89 9a	jsr $9a89	                jsr xt_r_fetch          ; r@
.97a5	20 97 a5	jsr $a597	                jsr xt_um_slash_mod     ; um/mod
.97a8	20 63 9b	jsr $9b63	                jsr xt_rot              ; rot
.97ab	20 63 9b	jsr $9b63	                jsr xt_rot              ; rot
.97ae	20 9e 9a	jsr $9a9e	                jsr xt_r_from           ; r>
.97b1	20 97 a5	jsr $a597	                jsr xt_um_slash_mod     ; um/mod
.97b4	20 63 9b	jsr $9b63	                jsr xt_rot              ; rot
.97b7	20 63 9b	jsr $9b63	                jsr xt_rot              ; ( ud rem )
.97ba	b5 00		lda $00,x	                lda 0,x
.97bc	a8		tay		                tay
.97bd	b9 cb d3	lda $d3cb,y	                lda s_abc_upper,y
.97c0	95 00		sta $00,x	                sta 0,x
.97c2	74 01		stz $01,x	                stz 1,x                 ; paranoid; now ( ud char )
.97c4	20 e3 91	jsr $91e3	                jsr xt_hold
.97c7					z_number_sign:
.97c7	60		rts		                rts
.97c8					xt_number_sign_greater:
.97c8	20 f1 d7	jsr $d7f1	                jsr underflow_2         ; double number
.97cb	a5 34		lda $34		                lda tohold
.97cd	95 00		sta $00,x	                sta 0,x         ; LSB of tohold
.97cf	95 02		sta $02,x	                sta 2,x
.97d1	a5 35		lda $35		                lda tohold+1
.97d3	95 01		sta $01,x	                sta 1,x         ; MSB of addr
.97d5	95 03		sta $03,x	                sta 3,x         ; ( addr addr )
.97d7	20 ad 98	jsr $98ad	                jsr xt_pad      ; ( addr addr pad )
.97da	38		sec		                sec
.97db	b5 00		lda $00,x	                lda 0,x         ; LSB of pad address
.97dd	f5 02		sbc $02,x	                sbc 2,x
.97df	95 02		sta $02,x	                sta 2,x
.97e1	b5 01		lda $01,x	                lda 1,x         ; MSB, which should always be zero
.97e3	f5 03		sbc $03,x	                sbc 3,x
.97e5	95 03		sta $03,x	                sta 3,x         ; ( addr u pad )
.97e7	e8		inx		                inx
.97e8	e8		inx		                inx
.97e9					z_number_sign_greater:
.97e9	60		rts		                rts
.97ea					xt_number_sign_s:
.97ea	20 f1 d7	jsr $d7f1	                jsr underflow_2
.97ed					_loop:
.97ed	20 93 97	jsr $9793	                jsr xt_number_sign
.97f0	b5 00		lda $00,x	                lda 0,x
.97f2	15 01		ora $01,x	                ora 1,x
.97f4	15 02		ora $02,x	                ora 2,x
.97f6	15 03		ora $03,x	                ora 3,x
.97f8	d0 f3		bne $97ed	                bne _loop
.97fa					z_number_sign_s:
.97fa	60		rts		                rts
.97fb					xt_of:
.97fb	a0 98		ldy #$98	                ldy #>xt_over
.97fd	a9 9f		lda #$9f	                lda #<xt_over
.97ff	20 8f d6	jsr $d68f	                jsr cmpl_subroutine
.9802	a0 8e		ldy #$8e	                ldy #>xt_equal
.9804	a9 da		lda #$da	                lda #<xt_equal
.9806	20 8f d6	jsr $d68f	                jsr cmpl_subroutine
.9809	20 0f 92	jsr $920f	                jsr xt_if
.980c	a0 8d		ldy #$8d	                ldy #>xt_drop
.980e	a9 3a		lda #$3a	                lda #<xt_drop
.9810	20 8f d6	jsr $d68f	                jsr cmpl_subroutine
.9813	60		rts		z_of:           rts
.9814					xt_editor_wordlist:
.9814					xt_one:
.9814	ca		dex		                dex
.9815	ca		dex		                dex
.9816	a9 01		lda #$01	                lda #1
.9818	95 00		sta $00,x	                sta 0,x
.981a	74 01		stz $01,x	                stz 1,x
.981c					z_editor_wordlist:
.981c					z_one:
.981c	60		rts		                rts
.981d					xt_one_minus:
.981d	20 ec d7	jsr $d7ec	                jsr underflow_1
.9820	b5 00		lda $00,x	                lda 0,x
.9822	d0 02		bne $9826	                bne +
.9824	d6 01		dec $01,x	                dec 1,x
.9826					+
.9826	d6 00		dec $00,x	                dec 0,x
.9828	60		rts		z_one_minus:    rts
.9829					xt_char_plus:
.9829					xt_one_plus:
.9829	20 ec d7	jsr $d7ec	                jsr underflow_1
.982c	f6 00		inc $00,x	                inc 0,x
.982e	d0 02		bne $9832	                bne _done
.9830	f6 01		inc $01,x	                inc 1,x
.9832					_done:
.9832					z_char_plus:
.9832	60		rts		z_one_plus:     rts
.9833					xt_only:
.9833	ca		dex		                dex
.9834	ca		dex		                dex
.9835	a9 ff		lda #$ff	                lda #$FF
.9837	95 00		sta $00,x	                sta 0,x
.9839	95 01		sta $01,x	                sta 1,x
.983b	20 27 9d	jsr $9d27	                jsr xt_set_order
.983e	60		rts		z_only:         rts
.983f					xt_or:
.983f	20 f1 d7	jsr $d7f1	                jsr underflow_2
.9842	b5 00		lda $00,x	                lda 0,x
.9844	15 02		ora $02,x	                ora 2,x
.9846	95 02		sta $02,x	                sta 2,x
.9848	b5 01		lda $01,x	                lda 1,x
.984a	15 03		ora $03,x	                ora 3,x
.984c	95 03		sta $03,x	                sta 3,x
.984e	e8		inx		                inx
.984f	e8		inx		                inx
.9850	60		rts		z_or:           rts
.9851					xt_order:
.9851	20 6f 89	jsr $896f	                jsr xt_cr
.9854	20 40 91	jsr $9140	                jsr xt_get_order        ; ( wid_n ... wid_1 n )
.9857	b5 00		lda $00,x	                lda 0,x                 ; assumes no more than 255 wordlists
.9859	f0 1e		beq $9879	                beq _drop_done
.985b					_have_wordlists:
.985b	a8		tay		                tay
.985c					_loop:
.985c	e8		inx		                inx
.985d	e8		inx		                inx                     ; DROP, now ( wid_n ... wid_1 )
.985e	b5 00		lda $00,x	                lda 0,x
.9860	5a		phy		                phy
.9861	20 7c 98	jsr $987c	                jsr order_print_wid_string   ; internal helper function
.9864	7a		ply		                ply
.9865	88		dey		                dey
.9866	d0 f4		bne $985c	                bne _loop
.9868	20 fb a0	jsr $a0fb	                jsr xt_space
.986b	20 fb a0	jsr $a0fb	                jsr xt_space
.986e	20 35 91	jsr $9135	                jsr xt_get_current      ; ( wid )
.9871	b5 00		lda $00,x	                lda 0,x
.9873	20 7c 98	jsr $987c	                jsr order_print_wid_string
.9876	20 6f 89	jsr $896f	                jsr xt_cr
.9879					_drop_done:
.9879	e8		inx		                inx
.987a	e8		inx		                inx
.987b					z_order:
.987b	60		rts		                rts
.987c					order_print_wid_string:
.987c	c9 04		cmp #$04	                cmp #4
.987e	90 09		bcc $9889	                bcc _output_string      ; less than 4, print a real string
.9880	ca		dex		                dex
.9881	ca		dex		                dex
.9882	95 00		sta $00,x	                sta 0,x
.9884	74 01		stz $01,x	                stz 1,x
.9886	4c 0b a5	jmp $a50b	                jmp xt_u_dot            ; JSR/RTS as this routine is not compiled
.9889					_output_string:
.9889	a8		tay		                tay
.988a	b9 90 98	lda $9890,y	                lda _wid_data,y
.988d	4c 28 d8	jmp $d828	                jmp print_string_no_lf  ; JSR/RTS as this routine is not compiled
.9890					_wid_data:
>9890	04				        .byte str_wid_forth            ; WID 0: "Forth"
>9891	05				        .byte str_wid_editor           ; WID 1: "Editor"
>9892	06				        .byte str_wid_assembler        ; WID 2: "Assembler"
>9893	07				        .byte str_wid_root             ; WID 3: "Root"
.9894					xt_output:
.9894	ca		dex		                dex
.9895	ca		dex		                dex
.9896	a9 10		lda #$10	                lda #<output
.9898	95 00		sta $00,x	                sta 0,x
.989a	a9 00		lda #$00	                lda #>output
.989c	95 01		sta $01,x	                sta 1,x
.989e	60		rts		z_output:       rts
.989f					xt_over:
.989f	20 f1 d7	jsr $d7f1	                jsr underflow_2
.98a2	ca		dex		                dex
.98a3	ca		dex		                dex
.98a4	b5 04		lda $04,x	                lda 4,x         ; LSB
.98a6	95 00		sta $00,x	                sta 0,x
.98a8	b5 05		lda $05,x	                lda 5,x         ; MSB
.98aa	95 01		sta $01,x	                sta 1,x
.98ac	60		rts		z_over:         rts
.98ad					xt_pad:
.98ad	ca		dex		                dex
.98ae	ca		dex		                dex
.98af	a5 00		lda $00		                lda cp
.98b1	18		clc		                clc
.98b2	69 ff		adc #$ff	                adc #padoffset  ; assumes padoffset one byte in size
.98b4	95 00		sta $00,x	                sta 0,x
.98b6	a5 01		lda $01		                lda cp+1
.98b8	69 00		adc #$00	                adc #0          ; only need carry
.98ba	95 01		sta $01,x	                sta 1,x
.98bc	60		rts		z_pad:          rts
.98bd					xt_page:
.98bd	a9 1b		lda #$1b	                lda #AscESC
.98bf	20 02 8e	jsr $8e02	                jsr emit_a
.98c2	a9 5b		lda #$5b	                lda #$5B        ; ASCII for "["
.98c4	20 02 8e	jsr $8e02	                jsr emit_a
.98c7	a9 32		lda #$32	                lda #'2'
.98c9	20 02 8e	jsr $8e02	                jsr emit_a
.98cc	a9 4a		lda #$4a	                lda #'J'
.98ce	20 02 8e	jsr $8e02	                jsr emit_a
.98d1	20 85 a7	jsr $a785	                jsr xt_zero
.98d4	20 85 a7	jsr $a785	                jsr xt_zero
.98d7	20 3a 83	jsr $833a	                jsr xt_at_xy
.98da	60		rts		z_page:         rts
.98db					xt_paren:
.98db	ca		dex		                dex
.98dc	ca		dex		                dex
.98dd	a9 29		lda #$29	                lda #41     ; Right parenthesis
.98df	95 00		sta $00,x	                sta 0,x
.98e1	74 01		stz $01,x	                stz 1,x
.98e3	20 46 99	jsr $9946	                jsr xt_parse
.98e6	e8		inx		                inx
.98e7	e8		inx		                inx
.98e8	e8		inx		                inx
.98e9	e8		inx		                inx
.98ea	60		rts		z_paren:        rts
.98eb					xt_parse_name:
.98eb	a5 0a		lda $0a		                lda ciblen              ; LSB of counter
.98ed	38		sec		                sec
.98ee	e5 0c		sbc $0c		                sbc toin
.98f0	85 24		sta $24		                sta tmp1
.98f2	a5 0b		lda $0b		                lda ciblen+1            ; MSB
.98f4	e5 0d		sbc $0d		                sbc toin+1
.98f6	85 25		sta $25		                sta tmp1+1
.98f8	a5 24		lda $24		                lda tmp1
.98fa	05 25		ora $25		                ora tmp1+1
.98fc	f0 28		beq $9926	                beq _empty_line
.98fe	a5 08		lda $08		                lda cib
.9900	18		clc		                clc
.9901	65 0c		adc $0c		                adc toin
.9903	85 26		sta $26		                sta tmp2                ; LSB of first character
.9905	a5 09		lda $09		                lda cib+1
.9907	65 0d		adc $0d		                adc toin+1
.9909	85 27		sta $27		                sta tmp2+1              ; MSB
.990b					_skip_loop:
.990b	b2 26		lda ($26)	                lda (tmp2)              ; work copy of cib
.990d	20 df d7	jsr $d7df	                jsr is_whitespace
.9910	90 1f		bcc $9931	                bcc _char_found
.9912	e6 26		inc $26		                inc tmp2
.9914	d0 02		bne $9918	                bne +
.9916	e6 27		inc $27		                inc tmp2+1
.9918					+
.9918	a5 24		lda $24		                lda tmp1
.991a	d0 02		bne $991e	                bne +
.991c	c6 25		dec $25		                dec tmp1+1
.991e	c6 24		dec $24		+               dec tmp1
.9920	a5 24		lda $24		                lda tmp1
.9922	05 25		ora $25		                ora tmp1+1
.9924	d0 e5		bne $990b	                bne _skip_loop          ; fall through if empty line
.9926					_empty_line:
.9926	ca		dex		                dex
.9927	ca		dex		                dex
.9928	ca		dex		                dex
.9929	ca		dex		                dex
.992a	74 00		stz $00,x	                stz 0,x                 ; TOS is zero
.992c	74 01		stz $01,x	                stz 1,x
.992e	4c dd 99	jmp $99dd	                jmp z_parse_name        ; skip over PARSE
.9931					_char_found:
.9931	a5 26		lda $26		                lda tmp2
.9933	38		sec		                sec
.9934	e5 08		sbc $08		                sbc cib
.9936	85 0c		sta $0c		                sta toin
.9938	a5 27		lda $27		                lda tmp2+1
.993a	e5 09		sbc $09		                sbc cib+1
.993c	85 0d		sta $0d		                sta toin+1
.993e	ca		dex		                dex
.993f	ca		dex		                dex
.9940	a9 20		lda #$20	                lda #AscSP
.9942	95 00		sta $00,x	                sta 0,x
.9944	74 01		stz $01,x	                stz 1,x                 ; paranoid, now ( "name" c )
.9946					xt_parse:
.9946	20 ec d7	jsr $d7ec	                jsr underflow_1
.9949	a5 0a		lda $0a		                lda ciblen
.994b	05 0b		ora $0b		                ora ciblen+1
.994d	f0 0c		beq $995b	                beq _abort_parse
.994f	a5 0d		lda $0d		                lda toin+1              ; MSB
.9951	c5 0b		cmp $0b		                cmp ciblen+1
.9953	90 0e		bcc $9963	                bcc _go_parse           ; unsigned comparison
.9955	a5 0c		lda $0c		                lda toin                ; LSB
.9957	c5 0a		cmp $0a		                cmp ciblen
.9959	90 08		bcc $9963	                bcc _go_parse
.995b					_abort_parse:
.995b	ca		dex		                dex
.995c	ca		dex		                dex
.995d	74 00		stz $00,x	                stz 0,x
.995f	74 01		stz $01,x	                stz 1,x
.9961	80 7a		bra $99dd	                bra _done
.9963					_go_parse:
.9963	b5 00		lda $00,x	                lda 0,x
.9965	85 2c		sta $2c		                sta tmptos
.9967	ca		dex		                dex
.9968	ca		dex		                dex
.9969	a5 08		lda $08		                lda cib
.996b	18		clc		                clc
.996c	65 0c		adc $0c		                adc toin        ; LSB
.996e	85 24		sta $24		                sta tmp1
.9970	85 26		sta $26		                sta tmp2
.9972	95 02		sta $02,x	                sta 2,x
.9974	a5 09		lda $09		                lda cib+1
.9976	65 0d		adc $0d		                adc toin+1      ; MSB
.9978	85 25		sta $25		                sta tmp1+1
.997a	85 27		sta $27		                sta tmp2+1
.997c	95 03		sta $03,x	                sta 3,x
.997e	a5 08		lda $08		                lda cib
.9980	18		clc		                clc
.9981	65 0a		adc $0a		                adc ciblen
.9983	85 28		sta $28		                sta tmp3
.9985	a5 09		lda $09		                lda cib+1
.9987	65 0b		adc $0b		                adc ciblen+1
.9989	85 29		sta $29		                sta tmp3+1
.998b	64 2d		stz $2d		                stz tmptos+1
.998d					_loop:
.998d	a5 26		lda $26		                lda tmp2
.998f	c5 28		cmp $28		                cmp tmp3
.9991	d0 06		bne $9999	                bne _not_empty
.9993	a5 27		lda $27		                lda tmp2+1
.9995	c5 29		cmp $29		                cmp tmp3+1
.9997	f0 1d		beq $99b6	                beq _eol
.9999					_not_empty:
.9999	b2 26		lda ($26)	                lda (tmp2)
.999b	a4 2c		ldy $2c		                ldy tmptos
.999d	c0 20		cpy #$20	                cpy #AscSP
.999f	d0 07		bne $99a8	                bne _not_whitespace
.99a1	20 df d7	jsr $d7df	                jsr is_whitespace
.99a4	90 02		bcc $99a8	                bcc _not_whitespace
.99a6	80 0c		bra $99b4	                bra _found_delimiter
.99a8					_not_whitespace:
.99a8	c5 2c		cmp $2c		                cmp tmptos
.99aa	f0 08		beq $99b4	                beq _found_delimiter
.99ac	e6 26		inc $26		                inc tmp2
.99ae	d0 dd		bne $998d	                bne _loop
.99b0	e6 27		inc $27		                inc tmp2+1
.99b2	80 d9		bra $998d	                bra _loop
.99b4					_found_delimiter:
.99b4	e6 2d		inc $2d		                inc tmptos+1
.99b6					_eol:
.99b6	a5 26		lda $26		                lda tmp2
.99b8	38		sec		                sec
.99b9	e5 24		sbc $24		                sbc tmp1
.99bb	95 00		sta $00,x	                sta 0,x
.99bd	a5 27		lda $27		                lda tmp2+1
.99bf	e5 25		sbc $25		                sbc tmp1+1
.99c1	95 01		sta $01,x	                sta 1,x
.99c3	a5 26		lda $26		                lda tmp2
.99c5	38		sec		                sec
.99c6	e5 08		sbc $08		                sbc cib
.99c8	85 0c		sta $0c		                sta toin
.99ca	a5 27		lda $27		                lda tmp2+1
.99cc	e5 09		sbc $09		                sbc cib+1
.99ce	85 0d		sta $0d		                sta toin+1
.99d0	a5 0c		lda $0c		                lda toin
.99d2	18		clc		                clc
.99d3	65 2d		adc $2d		                adc tmptos+1
.99d5	85 0c		sta $0c		                sta toin
.99d7	a5 0d		lda $0d		                lda toin+1
.99d9	69 00		adc #$00	                adc #0          ; we only need the carry
.99db	85 0d		sta $0d		                sta toin+1
.99dd					_done:
.99dd					z_parse_name:
.99dd	60		rts		z_parse:        rts
.99de					xt_pick:
.99de	16 00		asl $00,x	                asl 0,x         ; we assume u < 128 (stack is small)
.99e0	8a		txa		                txa
.99e1	75 00		adc $00,x	                adc 0,x
.99e3	a8		tay		                tay
.99e4	b9 02 00	lda $0002,y	                lda 0002,y
.99e7	95 00		sta $00,x	                sta 0,x
.99e9	b9 03 00	lda $0003,y	                lda 0003,y
.99ec	95 01		sta $01,x	                sta 1,x
.99ee	60		rts		z_pick:         rts
.99ef					xt_plus:
.99ef	20 f1 d7	jsr $d7f1	                jsr underflow_2
.99f2	18		clc		                clc
.99f3	b5 00		lda $00,x	                lda 0,x         ; LSB
.99f5	75 02		adc $02,x	                adc 2,x
.99f7	95 02		sta $02,x	                sta 2,x
.99f9	b5 01		lda $01,x	                lda 1,x         ; MSB. No CLC, conserve carry bit
.99fb	75 03		adc $03,x	                adc 3,x
.99fd	95 03		sta $03,x	                sta 3,x
.99ff	e8		inx		                inx
.9a00	e8		inx		                inx
.9a01	60		rts		z_plus:         rts
.9a02					xt_plus_store:
.9a02	20 f1 d7	jsr $d7f1	                jsr underflow_2
.9a05	b5 00		lda $00,x	                lda 0,x
.9a07	85 24		sta $24		                sta tmp1
.9a09	b5 01		lda $01,x	                lda 1,x
.9a0b	85 25		sta $25		                sta tmp1+1
.9a0d	a0 00		ldy #$00	                ldy #0          ; LSB
.9a0f	b1 24		lda ($24),y	                lda (tmp1),y
.9a11	18		clc		                clc
.9a12	75 02		adc $02,x	                adc 2,x
.9a14	91 24		sta ($24),y	                sta (tmp1),y
.9a16	c8		iny		                iny             ; MSB
.9a17	b1 24		lda ($24),y	                lda (tmp1),y
.9a19	75 03		adc $03,x	                adc 3,x
.9a1b	91 24		sta ($24),y	                sta (tmp1),y
.9a1d	e8		inx		                inx
.9a1e	e8		inx		                inx
.9a1f	e8		inx		                inx
.9a20	e8		inx		                inx
.9a21	60		rts		z_plus_store:   rts
.9a22					xt_postpone:
.9a22	20 eb 98	jsr $98eb	                jsr xt_parse_name               ; ( -- addr n )
.9a25	b5 00		lda $00,x	                lda 0,x
.9a27	15 01		ora $01,x	                ora 1,x
.9a29	d0 05		bne $9a30	                bne +
.9a2b	a9 05		lda #$05	                lda #err_noname
.9a2d	4c 02 d8	jmp $d802	                jmp error
.9a30					+
.9a30	20 e7 8f	jsr $8fe7	                jsr xt_find_name                ; ( -- nt | 0 )
.9a33	d0 05		bne $9a3a	                bne +
.9a35	a9 05		lda #$05	                lda #err_noname
.9a37	4c 02 d8	jmp $d802	                jmp error
.9a3a					+
.9a3a	b5 00		lda $00,x	                lda 0,x
.9a3c	85 24		sta $24		                sta tmp1
.9a3e	b5 01		lda $01,x	                lda 1,x
.9a40	85 25		sta $25		                sta tmp1+1
.9a42	20 ed 95	jsr $95ed	                jsr xt_name_to_int              ; ( nt -- xt )
.9a45	e6 24		inc $24		                inc tmp1
.9a47	d0 02		bne $9a4b	                bne +
.9a49	e6 25		inc $25		                inc tmp1+1
.9a4b					+
.9a4b	b2 24		lda ($24)	                lda (tmp1)
.9a4d	29 04		and #$04	                and #IM         ; mask all but Intermediate flag
.9a4f	f0 05		beq $9a56	                beq _not_immediate
.9a51	20 f9 87	jsr $87f9	                jsr xt_compile_comma
.9a54	80 0a		bra $9a60	                bra _done
.9a56					_not_immediate:
.9a56	20 96 93	jsr $9396	                jsr xt_literal
.9a59	a0 87		ldy #$87	                ldy #>xt_compile_comma
.9a5b	a9 f9		lda #$f9	                lda #<xt_compile_comma
.9a5d	20 8f d6	jsr $d68f	                jsr cmpl_subroutine
.9a60					_done:
.9a60	60		rts		z_postpone:     rts
.9a61					xt_previous:
.9a61	20 40 91	jsr $9140	                jsr xt_get_order
.9a64	20 4e 96	jsr $964e	                jsr xt_nip
.9a67	20 1d 98	jsr $981d	                jsr xt_one_minus
.9a6a	20 27 9d	jsr $9d27	                jsr xt_set_order
.9a6d	60		rts		z_previous:     rts
.9a6e					xt_question:
.9a6e	20 8c 8f	jsr $8f8c	                jsr xt_fetch
.9a71	20 42 8c	jsr $8c42	                jsr xt_dot
.9a74	60		rts		z_question:     rts
.9a75					xt_question_dup:
.9a75	20 ec d7	jsr $d7ec	                jsr underflow_1
.9a78	b5 00		lda $00,x	                lda 0,x
.9a7a	15 01		ora $01,x	                ora 1,x
.9a7c	f0 0a		beq $9a88	                beq _done
.9a7e	ca		dex		                dex
.9a7f	ca		dex		                dex
.9a80	b5 02		lda $02,x	                lda 2,x
.9a82	95 00		sta $00,x	                sta 0,x
.9a84	b5 03		lda $03,x	                lda 3,x
.9a86	95 01		sta $01,x	                sta 1,x
.9a88					_done:
.9a88	60		rts		z_question_dup: rts
.9a89					xt_r_fetch:
.9a89	7a		ply		                ply             ; LSB
.9a8a	84 24		sty $24		                sty tmp1
.9a8c	7a		ply		                ply             ; MSB
.9a8d	ca		dex		                dex
.9a8e	ca		dex		                dex
.9a8f	68		pla		                pla             ; LSB
.9a90	95 00		sta $00,x	                sta 0,x
.9a92	68		pla		                pla             ; MSB
.9a93	95 01		sta $01,x	                sta 1,x
.9a95	48		pha		                pha
.9a96	b5 00		lda $00,x	                lda 0,x
.9a98	48		pha		                pha
.9a99	5a		phy		                phy             ; MSB
.9a9a	a4 24		ldy $24		                ldy tmp1
.9a9c	5a		phy		                phy             ; LSB
.9a9d	60		rts		z_r_fetch:      rts
.9a9e					xt_r_from:
.9a9e	68		pla		                pla             ; LSB
.9a9f	85 2c		sta $2c		                sta tmptos
.9aa1	7a		ply		                ply             ; MSB
.9aa2	ca		dex		                dex
.9aa3	ca		dex		                dex
.9aa4	68		pla		                pla             ; LSB
.9aa5	95 00		sta $00,x	                sta 0,x
.9aa7	68		pla		                pla             ; MSB
.9aa8	95 01		sta $01,x	                sta 1,x
.9aaa	5a		phy		                phy             ; MSB
.9aab	a5 2c		lda $2c		                lda tmptos
.9aad	48		pha		                pha             ; LSB
.9aae	60		rts		z_r_from:       rts
.9aaf					xt_r_to_input:
.9aaf	68		pla		                pla
.9ab0	85 24		sta $24		                sta tmp1
.9ab2	68		pla		                pla
.9ab3	85 25		sta $25		                sta tmp1+1
.9ab5	a0 00		ldy #$00	                ldy #0
.9ab7					_loop:
.9ab7	68		pla		                pla
.9ab8	99 06 00	sta $0006,y	                sta insrc,y
.9abb	c8		iny		                iny
.9abc	c0 08		cpy #$08	                cpy #8
.9abe	d0 f7		bne $9ab7	                bne _loop
.9ac0	a5 25		lda $25		                lda tmp1+1
.9ac2	48		pha		                pha
.9ac3	a5 24		lda $24		                lda tmp1
.9ac5	48		pha		                pha
.9ac6	60		rts		z_r_to_input: 	rts
.9ac7					xt_recurse:
.9ac7	a0 00		ldy #$00	                ldy #0
.9ac9	a9 20		lda #$20	                lda #$20        ; opcode for JSR
.9acb	91 00		sta ($00),y	                sta (cp),y
.9acd	c8		iny		                iny
.9ace	24 20		bit $20		                bit status
.9ad0	70 0c		bvs $9ade	                bvs _nt_in_workword
.9ad2	a5 04		lda $04		                lda workword
.9ad4	91 00		sta ($00),y	                sta (cp),y
.9ad6	c8		iny		                iny
.9ad7	a5 05		lda $05		                lda workword+1
.9ad9	91 00		sta ($00),y	                sta (cp),y
.9adb	c8		iny		                iny
.9adc	80 1b		bra $9af9	                bra _update_cp
.9ade					_nt_in_workword:
.9ade	a5 04		lda $04		                lda workword            ; LSB
.9ae0	18		clc		                clc
.9ae1	69 04		adc #$04	                adc #4
.9ae3	85 24		sta $24		                sta tmp1
.9ae5	a5 05		lda $05		                lda workword+1          ; MSB
.9ae7	69 00		adc #$00	                adc #0
.9ae9	85 25		sta $25		                sta tmp1+1
.9aeb	b2 24		lda ($24)	                lda (tmp1)
.9aed	91 00		sta ($00),y	                sta (cp),y
.9aef	5a		phy		                phy
.9af0	a0 01		ldy #$01	                ldy #1
.9af2	b1 24		lda ($24),y	                lda (tmp1),y
.9af4	7a		ply		                ply
.9af5	c8		iny		                iny
.9af6	91 00		sta ($00),y	                sta (cp),y
.9af8	c8		iny		                iny
.9af9					_update_cp:
.9af9	98		tya		                tya
.9afa	18		clc		                clc
.9afb	65 00		adc $00		                adc cp
.9afd	85 00		sta $00		                sta cp
.9aff	90 02		bcc $9b03	                bcc _done
.9b01	e6 01		inc $01		                inc cp+1
.9b03					_done:
.9b03	60		rts		z_recurse:      rts
.9b04					xt_refill:
.9b04	a5 06		lda $06		                lda insrc               ; cheat: We only check LSB
.9b06	d0 2d		bne $9b35	                bne _src_not_kbd
.9b08	ca		dex		                dex
.9b09	ca		dex		                dex
.9b0a	ca		dex		                dex
.9b0b	ca		dex		                dex
.9b0c	a5 08		lda $08		                lda cib                 ; address of CIB is NOS
.9b0e	95 02		sta $02,x	                sta 2,x
.9b10	a5 09		lda $09		                lda cib+1
.9b12	95 03		sta $03,x	                sta 3,x
.9b14	64 0a		stz $0a		                stz ciblen              ; go in with empty buffer
.9b16	64 0b		stz $0b		                stz ciblen+1
.9b18	a9 ff		lda #$ff	                lda #bsize              ; max number of chars is TOS
.9b1a	95 00		sta $00,x	                sta 0,x
.9b1c	74 01		stz $01,x	                stz 1,x                 ; cheat: We only accept max 255
.9b1e	20 38 81	jsr $8138	                jsr xt_accept           ; ( addr n1 -- n2)
.9b21	b5 00		lda $00,x	                lda 0,x
.9b23	85 0a		sta $0a		                sta ciblen
.9b25	b5 01		lda $01,x	                lda 1,x
.9b27	85 0b		sta $0b		                sta ciblen+1            ; though we only accept 255 chars
.9b29	64 0c		stz $0c		                stz toin
.9b2b	64 0d		stz $0d		                stz toin+1
.9b2d	a9 ff		lda #$ff	                lda #$FF                ; overwrite with TRUE flag
.9b2f	95 00		sta $00,x	                sta 0,x
.9b31	95 01		sta $01,x	                sta 1,x
.9b33	80 10		bra $9b45	                bra _done
.9b35					_src_not_kbd:
.9b35	1a		inc a		                ina
.9b36	d0 08		bne $9b40	                bne _src_not_string
.9b38	ca		dex		                dex
.9b39	ca		dex		                dex
.9b3a	74 00		stz $00,x	                stz 0,x
.9b3c	74 01		stz $01,x	                stz 1,x
.9b3e	80 05		bra $9b45	                bra z_refill
.9b40					_src_not_string:
.9b40	a9 01		lda #$01	                lda #err_badsource
.9b42	4c 02 d8	jmp $d802	                jmp error
.9b45					_done:
.9b45	60		rts		z_refill:       rts
.9b46					xt_repeat:
.9b46	20 73 82	jsr $8273	                jsr xt_again
.9b49	20 7e 91	jsr $917e	                jsr xt_here
.9b4c	20 8b a1	jsr $a18b	                jsr xt_swap
.9b4f	20 6a a1	jsr $a16a	                jsr xt_store
.9b52	60		rts		z_repeat:       rts
.9b53					xt_right_bracket:
.9b53	a9 ff		lda #$ff	                lda #$FF
.9b55	85 16		sta $16		                sta state
.9b57	85 17		sta $17		                sta state+1
.9b59					z_right_bracket:
.9b59	60		rts		                rts
.9b5a					xt_root_wordlist:
.9b5a	ca		dex		                dex             ; The WID for the Root wordlist is 3.
.9b5b	ca		dex		                dex
.9b5c	a9 03		lda #$03	                lda #3
.9b5e	95 00		sta $00,x	                sta 0,x
.9b60	74 01		stz $01,x	                stz 1,x
.9b62					z_root_wordlist:
.9b62	60		rts		                rts
.9b63					xt_rot:
.9b63	20 f6 d7	jsr $d7f6	                jsr underflow_3
.9b66	b4 05		ldy $05,x	                ldy 5,x         ; MSB first
.9b68	b5 03		lda $03,x	                lda 3,x
.9b6a	95 05		sta $05,x	                sta 5,x
.9b6c	b5 01		lda $01,x	                lda 1,x
.9b6e	95 03		sta $03,x	                sta 3,x
.9b70	94 01		sty $01,x	                sty 1,x
.9b72	b4 04		ldy $04,x	                ldy 4,x         ; LSB next
.9b74	b5 02		lda $02,x	                lda 2,x
.9b76	95 04		sta $04,x	                sta 4,x
.9b78	b5 00		lda $00,x	                lda 0,x
.9b7a	95 02		sta $02,x	                sta 2,x
.9b7c	94 00		sty $00,x	                sty 0,x
.9b7e	60		rts		z_rot:          rts
.9b7f					xt_rshift:
.9b7f	20 f1 d7	jsr $d7f1	                jsr underflow_2
.9b82	b5 00		lda $00,x	                lda 0,x
.9b84	29 0f		and #$0f	                and #%00001111
.9b86	f0 08		beq $9b90	                beq _done               ; if 0 shifts, quit
.9b88	a8		tay		                tay
.9b89					_loop:
.9b89	56 03		lsr $03,x	                lsr 3,x
.9b8b	76 02		ror $02,x	                ror 2,x
.9b8d	88		dey		                dey
.9b8e	d0 f9		bne $9b89	                bne _loop
.9b90					_done:
.9b90	e8		inx		                inx
.9b91	e8		inx		                inx
.9b92	60		rts		z_rshift:       rts
.9b93					xt_s_backslash_quote:
.9b93	a9 ff		lda #$ff	                lda #$FF
.9b95	85 26		sta $26		                sta tmp2
.9b97	64 27		stz $27		                stz tmp2+1
.9b99	20 5f 9d	jsr $9d5f	                jsr s_quote_start
.9b9c					_done:
.9b9c					z_s_backslash_quote:
.9b9c	60		rts		                rts
.9b9d					convert_hex_value:
.9b9d	c9 41		cmp #$41	        cmp #'A'
.9b9f	90 07		bcc $9ba8	        bcc _digit
.9ba1	29 df		and #$df	        and #$DF                ; Make it uppercase.
.9ba3	38		sec		        sec
.9ba4	e9 37		sbc #$37	        sbc #'7'                 ; gives value 10 for 'A'
.9ba6	80 03		bra $9bab	        bra _done
.9ba8					_digit:
.9ba8	38		sec		        sec
.9ba9	e9 30		sbc #$30	        sbc #'0'
.9bab					_done:
.9bab	60		rts		        rts
.9bac					xt_search_wordlist:
.9bac	20 f6 d7	jsr $d7f6	                jsr underflow_3
.9baf	a5 1e		lda $1e		                lda up
.9bb1	18		clc		                clc
.9bb2	69 06		adc #$06	                adc #wordlists_offset
.9bb4	85 26		sta $26		                sta tmp2
.9bb6	a5 1f		lda $1f		                lda up+1
.9bb8	69 00		adc #$00	                adc #0          ; Adding carry
.9bba	85 27		sta $27		                sta tmp2+1
.9bbc	b5 00		lda $00,x	                lda 0,x
.9bbe	0a		asl a		                asl             ; Convert wid to offset in cells (x2)
.9bbf	65 26		adc $26		                adc tmp2
.9bc1	85 26		sta $26		                sta tmp2
.9bc3	90 02		bcc $9bc7	                bcc +
.9bc5	e6 27		inc $27		                inc tmp2+1      ; Propagate carry if needed.
.9bc7					+
.9bc7	e8		inx		                inx
.9bc8	e8		inx		                inx
.9bc9	b5 00		lda $00,x	                lda 0,x
.9bcb	15 01		ora $01,x	                ora 1,x
.9bcd	d0 03		bne $9bd2	                bne _check_wordlist
.9bcf	4c 8a 9c	jmp $9c8a	                jmp _done
.9bd2					_check_wordlist:
.9bd2	a5 26		lda $26		                lda tmp2
.9bd4	05 27		ora $27		                ora tmp2+1
.9bd6	d0 03		bne $9bdb	                bne _have_string
.9bd8	4c 8a 9c	jmp $9c8a	                jmp _done
.9bdb					_have_string:
.9bdb	b2 26		lda ($26)	                lda (tmp2)              ; nt of first word in Dictionary
.9bdd	85 24		sta $24		                sta tmp1
.9bdf	e6 26		inc $26		                inc tmp2                ; Move to the upper byte
.9be1	d0 02		bne $9be5	                bne +
.9be3	e6 27		inc $27		                inc tmp2+1
.9be5					+
.9be5	b2 26		lda ($26)	                lda (tmp2)
.9be7	85 25		sta $25		                sta tmp1+1
.9be9	b5 02		lda $02,x	                lda 2,x                 ; Address of mystery string
.9beb	85 26		sta $26		                sta tmp2
.9bed	b5 03		lda $03,x	                lda 3,x
.9bef	85 27		sta $27		                sta tmp2+1
.9bf1					_loop:
.9bf1	b2 24		lda ($24)	                lda (tmp1)
.9bf3	d5 00		cmp $00,x	                cmp 0,x
.9bf5	d0 7b		bne $9c72	                bne _next_entry
.9bf7					_compare_string:
.9bf7	b2 26		lda ($26)	                lda (tmp2)      ; first character of mystery string
.9bf9	c9 5b		cmp #$5b	                cmp #$5B        ; ASCII '[' (one past Z)
.9bfb	b0 07		bcs $9c04	                bcs _compare_first
.9bfd	c9 41		cmp #$41	                cmp #$41        ; ASCII 'A'
.9bff	90 03		bcc $9c04	                bcc _compare_first
.9c01	18		clc		                clc
.9c02	69 20		adc #$20	                adc #$20
.9c04					_compare_first:
.9c04	a0 08		ldy #$08	                ldy #8          ; Offset in nt to name
.9c06	d1 24		cmp ($24),y	                cmp (tmp1),y    ; first character of current word
.9c08	d0 68		bne $9c72	                bne _next_entry
.9c0a	b5 00		lda $00,x	                lda 0,x
.9c0c	3a		dec a		                dea
.9c0d	f0 2c		beq $9c3b	                beq _success
.9c0f	a5 24		lda $24		                lda tmp1
.9c11	48		pha		                pha             ; Preserve tmp1 on the return stack.
.9c12	18		clc		                clc
.9c13	69 08		adc #$08	                adc #8
.9c15	85 24		sta $24		                sta tmp1        ; Reusing tmp1 temporarily for string check.
.9c17	a5 25		lda $25		                lda tmp1+1
.9c19	48		pha		                pha             ; Preserve tmp1+1 on the return stack.
.9c1a	69 00		adc #$00	                adc #0          ; we only need the carry
.9c1c	85 25		sta $25		                sta tmp1+1
.9c1e	b4 00		ldy $00,x	                ldy 0,x         ; index is length of string minus 1
.9c20	88		dey		                dey
.9c21					_string_loop:
.9c21	b1 26		lda ($26),y	                lda (tmp2),y    ; last char of mystery string
.9c23	c9 5b		cmp #$5b	                cmp #$5B         ; ASCII '[' (one past Z)
.9c25	b0 07		bcs $9c2e	                bcs _check_char
.9c27	c9 41		cmp #$41	                cmp #$41        ; ASCII 'A'
.9c29	90 03		bcc $9c2e	                bcc _check_char
.9c2b	18		clc		                clc
.9c2c	69 20		adc #$20	                adc #$20
.9c2e					_check_char:
.9c2e	d1 24		cmp ($24),y	                cmp (tmp1),y    ; last char of word we're testing against
.9c30	d0 3a		bne $9c6c	                bne _next_entry_tmp1
.9c32	88		dey		                dey
.9c33	d0 ec		bne $9c21	                bne _string_loop
.9c35					_success_tmp1:
.9c35	68		pla		                pla             ; Restore tmp1 from the return stack.
.9c36	85 25		sta $25		                sta tmp1+1
.9c38	68		pla		                pla
.9c39	85 24		sta $24		                sta tmp1
.9c3b					_success:
.9c3b	e8		inx		                inx
.9c3c	e8		inx		                inx
.9c3d	a5 24		lda $24		                lda tmp1
.9c3f	95 00		sta $00,x	                sta 0,x
.9c41	a5 25		lda $25		                lda tmp1+1
.9c43	95 01		sta $01,x	                sta 1,x
.9c45	20 bb 8d	jsr $8dbb	                jsr xt_dup              ; ( nt nt )
.9c48	20 ed 95	jsr $95ed	                jsr xt_name_to_int      ; ( nt xt )
.9c4b	20 8b a1	jsr $a18b	                jsr xt_swap             ; ( xt nt )
.9c4e	a0 00		ldy #$00	                ldy #0                  ; Prepare flag
.9c50	f6 00		inc $00,x	                inc 0,x
.9c52	d0 02		bne $9c56	                bne +
.9c54	f6 01		inc $01,x	                inc 1,x                 ; ( xt nt+1 )
.9c56					+
.9c56	a1 00		lda ($00,x)	                lda (0,x)               ; ( xt char )
.9c58	29 04		and #$04	                and #IM
.9c5a	d0 08		bne $9c64	                bne _immediate          ; bit set, we're immediate
.9c5c	a9 ff		lda #$ff	                lda #$FF                ; We're not immediate, return -1
.9c5e	95 00		sta $00,x	                sta 0,x
.9c60	95 01		sta $01,x	                sta 1,x
.9c62	80 28		bra $9c8c	                bra _done_nodrop
.9c64					_immediate:
.9c64	a9 01		lda #$01	                lda #1                  ; We're immediate, return 1
.9c66	95 00		sta $00,x	                sta 0,x
.9c68	74 01		stz $01,x	                stz 1,x
.9c6a	80 20		bra $9c8c	                bra _done_nodrop
.9c6c					_next_entry_tmp1:
.9c6c	68		pla		                pla             ; Restore tmp1 from the return stack.
.9c6d	85 25		sta $25		                sta tmp1+1
.9c6f	68		pla		                pla
.9c70	85 24		sta $24		                sta tmp1
.9c72					_next_entry:
.9c72	a0 02		ldy #$02	                ldy #2
.9c74	b1 24		lda ($24),y	                lda (tmp1),y
.9c76	48		pha		                pha
.9c77	c8		iny		                iny
.9c78	b1 24		lda ($24),y	                lda (tmp1),y
.9c7a	85 25		sta $25		                sta tmp1+1
.9c7c	68		pla		                pla
.9c7d	85 24		sta $24		                sta tmp1
.9c7f	05 25		ora $25		                ora tmp1+1
.9c81	f0 03		beq $9c86	                beq _fail_done
.9c83	4c f1 9b	jmp $9bf1	                jmp _loop
.9c86					_fail_done:
.9c86	74 02		stz $02,x	                stz 2,x         ; failure flag
.9c88	74 03		stz $03,x	                stz 3,x
.9c8a					_done:
.9c8a	e8		inx		                inx
.9c8b	e8		inx		                inx
.9c8c					_done_nodrop:
.9c8c					z_search_wordlist:
.9c8c	60		rts		                rts
.9c8d					xt_see:
.9c8d	20 eb 98	jsr $98eb	                jsr xt_parse_name       ; ( addr u )
.9c90	20 e7 8f	jsr $8fe7	                jsr xt_find_name        ; ( nt | 0 )
.9c93	b5 00		lda $00,x	                lda 0,x
.9c95	15 01		ora $01,x	                ora 1,x
.9c97	d0 05		bne $9c9e	                bne +
.9c99	a9 05		lda #$05	                lda #err_noname
.9c9b	4c 02 d8	jmp $d802	                jmp error
.9c9e					+
.9c9e	20 6f 89	jsr $896f	                jsr xt_cr
.9ca1	a5 18		lda $18		                lda base
.9ca3	48		pha		                pha
.9ca4	20 89 91	jsr $9189	                jsr xt_hex
.9ca7	a9 09		lda #$09	                lda #str_see_nt
.9ca9	20 28 d8	jsr $d828	                jsr print_string_no_lf
.9cac	20 bb 8d	jsr $8dbb	                jsr xt_dup              ; ( nt nt )
.9caf	20 0b a5	jsr $a50b	                jsr xt_u_dot
.9cb2	20 fb a0	jsr $a0fb	                jsr xt_space            ; ( nt )
.9cb5	20 bb 8d	jsr $8dbb	                jsr xt_dup              ; ( nt nt )
.9cb8	20 ed 95	jsr $95ed	                jsr xt_name_to_int      ; ( nt xt )
.9cbb	a9 0a		lda #$0a	                lda #str_see_xt
.9cbd	20 28 d8	jsr $d828	                jsr print_string_no_lf
.9cc0	20 bb 8d	jsr $8dbb	                jsr xt_dup              ; ( nt xt xt )
.9cc3	20 0b a5	jsr $a50b	                jsr xt_u_dot
.9cc6	20 6f 89	jsr $896f	                jsr xt_cr               ; ( nt xt )
.9cc9	a9 08		lda #$08	                lda #str_see_flags
.9ccb	20 28 d8	jsr $d828	                jsr print_string_no_lf
.9cce	20 9f 98	jsr $989f	                jsr xt_over             ; ( nt xt nt )
.9cd1	20 29 98	jsr $9829	                jsr xt_one_plus         ; ( nt xt nt+1 )
.9cd4	20 8c 8f	jsr $8f8c	                jsr xt_fetch            ; ( nt xt flags )
.9cd7	b5 00		lda $00,x	                lda 0,x
.9cd9	a0 06		ldy #$06	                ldy #6                  ; Not all bits are used
.9cdb					_flag_loop:
.9cdb	48		pha		                pha
.9cdc	29 01		and #$01	                and #%00000001
.9cde	18		clc		                clc
.9cdf	69 30		adc #$30	                adc #$30                ; ASCII "0"
.9ce1	20 02 8e	jsr $8e02	                jsr emit_a
.9ce4	20 fb a0	jsr $a0fb	                jsr xt_space
.9ce7	68		pla		                pla
.9ce8	6a		ror a		                ror                     ; Next flag
.9ce9	88		dey		                dey
.9cea	d0 ef		bne $9cdb	                bne _flag_loop
.9cec	20 6f 89	jsr $896f	                jsr xt_cr
.9cef	e8		inx		                inx
.9cf0	e8		inx		                inx                     ; ( nt xt )
.9cf1	a9 0b		lda #$0b	                lda #str_see_size
.9cf3	20 28 d8	jsr $d828	                jsr print_string_no_lf
.9cf6	20 8b a1	jsr $a18b	                jsr xt_swap             ; ( xt nt )
.9cf9	20 52 a7	jsr $a752	                jsr xt_wordsize         ; ( xt u )
.9cfc	20 bb 8d	jsr $8dbb	                jsr xt_dup              ; ( xt u u ) for DUMP and DISASM
.9cff	20 b1 8a	jsr $8ab1	                jsr xt_decimal
.9d02	20 0b a5	jsr $a50b	                jsr xt_u_dot            ; ( xt u )
.9d05	20 89 91	jsr $9189	                jsr xt_hex
.9d08	20 6f 89	jsr $896f	                jsr xt_cr
.9d0b	20 95 a3	jsr $a395	                jsr xt_two_dup          ; ( xt u xt u )
.9d0e	20 40 8d	jsr $8d40	                jsr xt_dump
.9d11	20 6f 89	jsr $896f	                jsr xt_cr
.9d14	20 46 8b	jsr $8b46	                jsr xt_disasm
.9d17	68		pla		                pla
.9d18	85 18		sta $18		                sta base
.9d1a	60		rts		z_see:          rts
.9d1b					xt_set_current:
.9d1b	20 ec d7	jsr $d7ec	                jsr underflow_1
.9d1e	a0 04		ldy #$04	                ldy #current_offset
.9d20	b5 00		lda $00,x	                lda 0,x         ; CURRENT is byte variable
.9d22	91 1e		sta ($1e),y	                sta (up),y      ; so only the LSB is used.
.9d24	e8		inx		                inx
.9d25	e8		inx		                inx
.9d26	60		rts		z_set_current:  rts
.9d27					xt_set_order:
.9d27	a9 ff		lda #$ff	                lda #$FF
.9d29	d5 01		cmp $01,x	                cmp 1,x
.9d2b	d0 12		bne $9d3f	                bne _start
.9d2d	d5 00		cmp $00,x	                cmp 0,x
.9d2f	d0 0e		bne $9d3f	                bne _start
.9d31	ca		dex		                dex             ; Make room for the count.
.9d32	ca		dex		                dex
.9d33	74 03		stz $03,x	                stz 3,x         ; ROOT-WORDLIST is 3
.9d35	a9 03		lda #$03	                lda #3
.9d37	95 02		sta $02,x	                sta 2,x
.9d39	74 01		stz $01,x	                stz 1,x         ; Count is 1.
.9d3b	a9 01		lda #$01	                lda #1
.9d3d	95 00		sta $00,x	                sta 0,x
.9d3f					_start:
.9d3f	a0 1e		ldy #$1e	                ldy #num_order_offset
.9d41	b5 00		lda $00,x	                lda 0,x
.9d43	91 1e		sta ($1e),y	                sta (up),y      ; #ORDER is a byte variable.
.9d45	85 24		sta $24		                sta tmp1        ; Save a copy for zero check and looping.
.9d47	e8		inx		                inx             ; Drop the count off the data stack.
.9d48	e8		inx		                inx
.9d49	a5 24		lda $24		                lda tmp1
.9d4b	f0 0d		beq $9d5a	                beq _done       ; If zero, there are no wordlists.
.9d4d	a0 1f		ldy #$1f	                ldy #search_order_offset
.9d4f					_loop:
.9d4f	b5 00		lda $00,x	                lda 0,x         ; The search order is a byte array
.9d51	91 1e		sta ($1e),y	                sta (up),y      ; so only save the LSB
.9d53	c8		iny		                iny
.9d54	e8		inx		                inx
.9d55	e8		inx		                inx
.9d56	c6 24		dec $24		                dec tmp1
.9d58	d0 f5		bne $9d4f	                bne _loop
.9d5a					_done:
.9d5a	60		rts		z_set_order:    rts
.9d5b					xt_s_quote:
.9d5b	64 26		stz $26		                stz tmp2
.9d5d	64 27		stz $27		                stz tmp2+1
.9d5f					s_quote_start:
.9d5f	ca		dex		                dex
.9d60	ca		dex		                dex
.9d61	ca		dex		                dex
.9d62	ca		dex		                dex
.9d63	a9 4c		lda #$4c	                lda #$4C
.9d65	20 9f d6	jsr $d69f	                jsr cmpl_a
.9d68	20 9f d6	jsr $d69f	                jsr cmpl_a
.9d6b	20 9f d6	jsr $d69f	                jsr cmpl_a
.9d6e	a5 00		lda $00		                lda cp
.9d70	95 02		sta $02,x	                sta 2,x
.9d72	a5 01		lda $01		                lda cp+1
.9d74	95 03		sta $03,x	                sta 3,x
.9d76					_savechars_loop:
.9d76	a5 0d		lda $0d		                lda toin+1              ; MSB
.9d78	c5 0b		cmp $0b		                cmp ciblen+1
.9d7a	90 2a		bcc $9da6	                bcc _input_fine         ; unsigned comparison
.9d7c	a5 0c		lda $0c		                lda toin                ; LSB
.9d7e	c5 0a		cmp $0a		                cmp ciblen
.9d80	90 24		bcc $9da6	                bcc _input_fine
.9d82	a5 26		lda $26		                lda tmp2
.9d84	48		pha		                pha
.9d85	a5 27		lda $27		                lda tmp2+1
.9d87	48		pha		                pha
.9d88	a5 28		lda $28		                lda tmp3    ; Only tmp3 used, so don't bother with tmp3+1
.9d8a	48		pha		                pha
.9d8b	20 04 9b	jsr $9b04	                jsr xt_refill           ; ( -- f )
.9d8e	68		pla		                pla
.9d8f	85 28		sta $28		                sta tmp3
.9d91	68		pla		                pla
.9d92	85 27		sta $27		                sta tmp2+1
.9d94	68		pla		                pla
.9d95	85 26		sta $26		                sta tmp2
.9d97	b5 00		lda $00,x	                lda 0,x
.9d99	15 01		ora $01,x	                ora 1,x
.9d9b	d0 05		bne $9da2	                bne _refill_ok
.9d9d	a9 06		lda #$06	                lda #err_refill
.9d9f	4c 02 d8	jmp $d802	                jmp error
.9da2					_refill_ok:
.9da2	e8		inx		                inx
.9da3	e8		inx		                inx
.9da4	80 d0		bra $9d76	                bra _savechars_loop
.9da6					_input_fine:
.9da6	a5 08		lda $08		                lda cib
.9da8	18		clc		                clc
.9da9	65 0c		adc $0c		                adc toin        ; LSB
.9dab	85 24		sta $24		                sta tmp1
.9dad	a5 09		lda $09		                lda cib+1
.9daf	65 0d		adc $0d		                adc toin+1      ; MSB
.9db1	85 25		sta $25		                sta tmp1+1
.9db3	b2 24		lda ($24)	                lda (tmp1)
.9db5	24 26		bit $26		                bit tmp2
.9db7	30 03		bmi $9dbc	                bmi _handle_escapes    ; Only checking bit 7
.9db9	4c 45 9e	jmp $9e45	                jmp _regular_char
.9dbc					_handle_escapes:
.9dbc	24 27		bit $27		                bit tmp2+1
.9dbe	30 03		bmi $9dc3	                bmi _escaped
.9dc0	4c 3b 9e	jmp $9e3b	                jmp _not_escaped
.9dc3					_escaped:
.9dc3	70 3c		bvs $9e01	                bvs _check_esc_chars
.9dc5	a9 01		lda #$01	                lda #1
.9dc7	24 27		bit $27		                bit tmp2+1
.9dc9	d0 10		bne $9ddb	                bne _esc_x_second_digit
.9dcb	e6 27		inc $27		                inc tmp2+1  ; Adjust flag for second digit next time.
.9dcd	b2 24		lda ($24)	                lda (tmp1)  ; Get the char again.
.9dcf	20 9d 9b	jsr $9b9d	                jsr convert_hex_value
.9dd2	0a		asl a		                asl
.9dd3	0a		asl a		                asl
.9dd4	0a		asl a		                asl
.9dd5	0a		asl a		                asl
.9dd6	85 28		sta $28		                sta tmp3    ; Save it for later.
.9dd8	4c 4c 9e	jmp $9e4c	                jmp _next_character
.9ddb					_esc_x_second_digit:
.9ddb	64 27		stz $27		                stz tmp2+1
.9ddd	b2 24		lda ($24)	                lda (tmp1)
.9ddf	20 9d 9b	jsr $9b9d	                jsr convert_hex_value
.9de2	05 28		ora $28		                ora tmp3
.9de4	4c 49 9e	jmp $9e49	                jmp _save_character
.9de7					_esc_tr_table:
>9de7	07				    .byte   7               ; a -> BEL (ASCII value 7)
>9de8	08				    .byte   8               ; b -> Backspace (ASCII value 8)
>9de9	00 00				    .byte   0,0             ; c, d no escape
>9deb	1b				    .byte   27              ; e -> ESC (ASCII value 27)
>9dec	0c				    .byte   12              ; f -> FF (ASCII value 12)
>9ded	00 00 00 00 00			    .byte   0,0,0,0,0       ; g,h,i,j,k
>9df2	0a				    .byte   10              ; l -> LF (ASCII value 10)
>9df3	8d				    .byte   13+128          ; m -> CR/LF pair (ASCII values 13, 10)
>9df4	0a				    .byte   10              ; n behaves like l --> lf
>9df5	00 00				    .byte   0,0             ; o,p
>9df7	22				    .byte   34              ; q -> Double quote (ASCII value 34)
>9df8	0d				    .byte   13              ; r ->  CR (ASCII value 13)
>9df9	00				    .byte   0               ; s
>9dfa	09				    .byte   9               ; t -> Horizontal TAB (ASCII value 9)
>9dfb	00				    .byte   0               ; u
>9dfc	0b				    .byte   11              ; v -> Vertical TAB (ASCII value 11)
>9dfd	00 00 00			    .byte   0,0,0           ; w,x,y   (x is a special case later)
>9e00	80				    .byte   0+128           ; z -> NULL (ASCII value 0)
.9e01					_check_esc_chars:
.9e01	64 27		stz $27		                stz tmp2+1
.9e03	c9 61		cmp #$61	                cmp #'a'
.9e05	30 1a		bmi $9e21	                bmi _check_esc_quote
.9e07	c9 7b		cmp #$7b	                cmp #'z'+1
.9e09	10 16		bpl $9e21	                bpl _check_esc_quote
.9e0b	a8		tay		                tay
.9e0c	b9 86 9d	lda $9d86,y	                lda _esc_tr_table - 'a',y   ; fake base address to index with a-z directly
.9e0f	d0 03		bne $9e14	                bne _esc_replace
.9e11	98		tya		                tya                     ; revert if no translation
.9e12	80 0d		bra $9e21	                bra _check_esc_quote
.9e14	10 33		bpl $9e49	_esc_replace:   bpl _save_character     ; simple replacement
.9e16	29 7f		and #$7f	                and #$7f                ; clear hi bit
.9e18	f0 2f		beq $9e49	                beq _save_character     ; NUL we can just output
.9e1a	20 9f d6	jsr $d69f	                jsr cmpl_a              ; else output first char (CR)
.9e1d	a9 0a		lda #$0a	                lda #10                 ; followed by LF
.9e1f	80 28		bra $9e49	                bra _save_character
.9e21					_check_esc_quote:
.9e21	c9 22		cmp #$22	                cmp #$22
.9e23	d0 04		bne $9e29	                bne _check_esc_x
.9e25	a9 22		lda #$22	                lda #34
.9e27	80 20		bra $9e49	                bra _save_character
.9e29					_check_esc_x:
.9e29	c9 78		cmp #$78	                cmp #'x'
.9e2b	d0 06		bne $9e33	                bne _check_esc_backslash
.9e2d	a9 be		lda #$be	                lda #$BE        ; Clear bits 6 and 0
.9e2f	85 27		sta $27		                sta tmp2+1
.9e31	80 19		bra $9e4c	                bra _next_character
.9e33					_check_esc_backslash:
.9e33	c9 5c		cmp #$5c	                cmp #$5C
.9e35	d0 04		bne $9e3b	                bne _not_escaped
.9e37	a9 5c		lda #$5c	                lda #92
.9e39	80 0e		bra $9e49	                bra _save_character
.9e3b					_not_escaped:
.9e3b	c9 5c		cmp #$5c	                cmp #$5C        ; The backslash char
.9e3d	d0 06		bne $9e45	                bne _regular_char
.9e3f	a9 ff		lda #$ff	                lda #$FF
.9e41	85 27		sta $27		                sta tmp2+1
.9e43	80 07		bra $9e4c	                bra _next_character
.9e45					_regular_char:
.9e45	c9 22		cmp #$22	                cmp #$22        ; ASCII for "
.9e47	f0 0c		beq $9e55	                beq _found_string_end
.9e49					_save_character:
.9e49	20 9f d6	jsr $d69f	                jsr cmpl_a
.9e4c					_next_character:
.9e4c	e6 0c		inc $0c		                inc toin
.9e4e	d0 02		bne $9e52	                bne _savechars_loop_longjump
.9e50	e6 0d		inc $0d		                inc toin+1
.9e52					_savechars_loop_longjump:
.9e52	4c 76 9d	jmp $9d76	                jmp _savechars_loop
.9e55					_found_string_end:
.9e55	e6 0c		inc $0c		                inc toin
.9e57	d0 02		bne $9e5b	                bne +
.9e59	e6 0d		inc $0d		                inc toin+1
.9e5b					+
.9e5b	a5 00		lda $00		                lda cp
.9e5d	38		sec		                sec
.9e5e	f5 02		sbc $02,x	                sbc 2,x
.9e60	95 00		sta $00,x	                sta 0,x         ; LSB
.9e62	a5 01		lda $01		                lda cp+1
.9e64	f5 03		sbc $03,x	                sbc 3,x
.9e66	95 01		sta $01,x	                sta 1,x         ; MSB
.9e68	b5 02		lda $02,x	                lda 2,x
.9e6a	38		sec		                sec
.9e6b	e9 02		sbc #$02	                sbc #2
.9e6d	85 24		sta $24		                sta tmp1
.9e6f	b5 03		lda $03,x	                lda 3,x
.9e71	e9 00		sbc #$00	                sbc #0          ; Propagate borrow
.9e73	85 25		sta $25		                sta tmp1+1
.9e75	a5 00		lda $00		                lda cp
.9e77	92 24		sta ($24)	                sta (tmp1)
.9e79	a0 01		ldy #$01	                ldy #1
.9e7b	a5 01		lda $01		                lda cp+1
.9e7d	91 24		sta ($24),y	                sta (tmp1),y
.9e7f	a5 16		lda $16		                lda state
.9e81	05 17		ora $17		                ora state+1             ; paranoid
.9e83	f0 03		beq $9e88	                beq _done
.9e85	20 6c a0	jsr $a06c	                jsr sliteral_const_str         ; ( addr u -- )
.9e88					_done:
.9e88	60		rts		z_s_quote:      rts
.9e89					xt_s_to_d:
.9e89	20 ec d7	jsr $d7ec	                jsr underflow_1
.9e8c	ca		dex		                dex
.9e8d	ca		dex		                dex
.9e8e	74 00		stz $00,x	                stz 0,x
.9e90	74 01		stz $01,x	                stz 1,x
.9e92	b5 03		lda $03,x	                lda 3,x
.9e94	10 04		bpl $9e9a	                bpl _done
.9e96	d6 00		dec $00,x	                dec 0,x
.9e98	d6 01		dec $01,x	                dec 1,x
.9e9a					_done:
.9e9a	60		rts		z_s_to_d:       rts
.9e9b					xt_save_buffers:
.9e9b	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.9e9d	b1 1e		lda ($1e),y	                lda (up),y      ; Only bits 0 and 1 are used, so only
.9e9f	c9 03		cmp #$03	                cmp #3          ; LSB is needed.
.9ea1	d0 12		bne $9eb5	                bne _done       ; Either not used or not dirty = done!
.9ea3	20 bf 83	jsr $83bf	                jsr xt_blkbuffer
.9ea6	20 b1 85	jsr $85b1	                jsr xt_buffblocknum
.9ea9	20 8c 8f	jsr $8f8c	                jsr xt_fetch
.9eac	20 6c 85	jsr $856c	                jsr xt_block_write
.9eaf	a9 01		lda #$01	                lda #1
.9eb1	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.9eb3	91 1e		sta ($1e),y	                sta (up),y
.9eb5					_done:
.9eb5	60		rts		z_save_buffers: rts
.9eb6					xt_scr:
.9eb6	ca		dex		                dex
.9eb7	ca		dex		                dex
.9eb8	18		clc		                clc
.9eb9	a5 1e		lda $1e		                lda up
.9ebb	69 02		adc #$02	                adc #scr_offset ; Add offset
.9ebd	95 00		sta $00,x	                sta 0,x
.9ebf	a5 1f		lda $1f		                lda up+1
.9ec1	69 00		adc #$00	                adc #0          ; Adding carry
.9ec3	95 01		sta $01,x	                sta 1,x
.9ec5	60		rts		z_scr:          rts
.9ec6					xt_search:
.9ec6	20 fb d7	jsr $d7fb	                jsr underflow_4
.9ec9	b5 00		lda $00,x	                lda 0,x
.9ecb	15 01		ora $01,x	                ora 1,x
.9ecd	d0 0b		bne $9eda	                bne _start_search
.9ecf	e8		inx		                inx             ; Remove u2
.9ed0	e8		inx		                inx
.9ed1	a9 ff		lda #$ff	                lda #$FF        ; Turn addr2 into a true flag
.9ed3	95 00		sta $00,x	                sta 0,x
.9ed5	95 01		sta $01,x	                sta 1,x
.9ed7	4c 64 9f	jmp $9f64	                jmp z_search
.9eda					_start_search:
.9eda	20 85 a7	jsr $a785	                jsr xt_zero
.9edd					_search_loop:
.9edd	18		clc		                clc
.9ede	b5 00		lda $00,x	                lda 0,x
.9ee0	75 02		adc $02,x	                adc 2,x
.9ee2	85 24		sta $24		                sta tmp1
.9ee4	b5 01		lda $01,x	                lda 1,x
.9ee6	75 03		adc $03,x	                adc 3,x
.9ee8	d5 07		cmp $07,x	                cmp 7,x
.9eea	90 12		bcc $9efe	                bcc _init_comparison ; Obviously less
.9eec	d0 06		bne $9ef4	                bne _not_found
.9eee	b5 06		lda $06,x	                lda 6,x
.9ef0	c5 24		cmp $24		                cmp tmp1
.9ef2	b0 0a		bcs $9efe	                bcs _init_comparison
.9ef4					_not_found:
.9ef4	e8		inx		                inx             ; Remove offset
.9ef5	e8		inx		                inx
.9ef6	e8		inx		                inx             ; Remove u2
.9ef7	e8		inx		                inx
.9ef8	74 00		stz $00,x	                stz 0,x         ; Turn addr2 into a false flag
.9efa	74 01		stz $01,x	                stz 1,x
.9efc	80 66		bra $9f64	                bra z_search
.9efe					_init_comparison:
.9efe	18		clc		                clc
.9eff	b5 08		lda $08,x	                lda 8,x
.9f01	75 00		adc $00,x	                adc 0,x
.9f03	85 24		sta $24		                sta tmp1
.9f05	b5 09		lda $09,x	                lda 9,x
.9f07	75 01		adc $01,x	                adc 1,x
.9f09	85 25		sta $25		                sta tmp1+1
.9f0b	b5 04		lda $04,x	                lda 4,x
.9f0d	85 26		sta $26		                sta tmp2
.9f0f	b5 05		lda $05,x	                lda 5,x
.9f11	85 27		sta $27		                sta tmp2+1
.9f13	b5 02		lda $02,x	                lda 2,x
.9f15	85 28		sta $28		                sta tmp3
.9f17	b5 03		lda $03,x	                lda 3,x
.9f19	85 29		sta $29		                sta tmp3+1
.9f1b					_comparison_loop:
.9f1b	b2 24		lda ($24)	                lda (tmp1)
.9f1d	d2 26		cmp ($26)	                cmp (tmp2)
.9f1f	f0 05		beq $9f26	                beq _letters_match
.9f21	20 29 98	jsr $9829	                jsr xt_one_plus
.9f24	80 b7		bra $9edd	                bra _search_loop
.9f26					_letters_match:
.9f26	e6 24		inc $24		                inc tmp1
.9f28	d0 02		bne $9f2c	                bne +
.9f2a	e6 25		inc $25		                inc tmp1+1
.9f2c					+
.9f2c	e6 26		inc $26		                inc tmp2
.9f2e	d0 02		bne $9f32	                bne +
.9f30	e6 27		inc $27		                inc tmp2+1
.9f32					+
.9f32	a5 28		lda $28		                lda tmp3
.9f34	d0 02		bne $9f38	                bne +
.9f36	c6 29		dec $29		                dec tmp3+1
.9f38					+
.9f38	c6 28		dec $28		                dec tmp3
.9f3a	a5 28		lda $28		                lda tmp3
.9f3c	05 29		ora $29		                ora tmp3+1
.9f3e	d0 db		bne $9f1b	                bne _comparison_loop ; Check the next letter
.9f40	18		clc		                clc
.9f41	b5 00		lda $00,x	                lda 0,x
.9f43	75 08		adc $08,x	                adc 8,x
.9f45	95 08		sta $08,x	                sta 8,x
.9f47	b5 01		lda $01,x	                lda 1,x
.9f49	75 09		adc $09,x	                adc 9,x
.9f4b	95 09		sta $09,x	                sta 9,x
.9f4d	38		sec		                sec
.9f4e	b5 06		lda $06,x	                lda 6,x
.9f50	f5 00		sbc $00,x	                sbc 0,x
.9f52	95 06		sta $06,x	                sta 6,x
.9f54	b5 07		lda $07,x	                lda 7,x
.9f56	f5 01		sbc $01,x	                sbc 1,x
.9f58	95 07		sta $07,x	                sta 7,x
.9f5a	e8		inx		                inx             ; drop offset
.9f5b	e8		inx		                inx
.9f5c	e8		inx		                inx             ; drop u2
.9f5d	e8		inx		                inx
.9f5e	a9 ff		lda #$ff	                lda #$FF
.9f60	95 00		sta $00,x	                sta 0,x         ; Turn addr2 into a true flag.
.9f62	95 01		sta $01,x	                sta 1,x
.9f64	60		rts		z_search:       rts
.9f65					xt_semicolon:
.9f65	24 20		bit $20		                bit status
.9f67	70 11		bvs $9f7a	                bvs _colonword
.9f69	a9 60		lda #$60	                lda #$60                ; opcode for RTS
.9f6b	20 9f d6	jsr $d69f	                jsr cmpl_a
.9f6e	ca		dex		                dex
.9f6f	ca		dex		                dex
.9f70	a5 04		lda $04		                lda workword
.9f72	95 00		sta $00,x	                sta 0,x
.9f74	a5 05		lda $05		                lda workword+1
.9f76	95 01		sta $01,x	                sta 1,x
.9f78	80 45		bra $9fbf	                bra _semicolon_done
.9f7a					_colonword:
.9f7a	a0 06		ldy #$06	                ldy #6
.9f7c	a5 00		lda $00		                lda cp
.9f7e	91 04		sta ($04),y	                sta (workword),y
.9f80	c8		iny		                iny
.9f81	a5 01		lda $01		                lda cp+1
.9f83	91 04		sta ($04),y	                sta (workword),y
.9f85	a9 60		lda #$60	                lda #$60                ; opcode for RTS
.9f87	20 9f d6	jsr $d69f	                jsr cmpl_a
.9f8a	24 20		bit $20		                bit status
.9f8c	10 26		bpl $9fb4	                bpl _new_word   ; Bit 7 is clear = new word
.9f8e	ca		dex		                dex
.9f8f	ca		dex		                dex
.9f90	ca		dex		                dex
.9f91	ca		dex		                dex
.9f92	b2 04		lda ($04)	                lda (workword)
.9f94	95 00		sta $00,x	                sta 0,x
.9f96	74 01		stz $01,x	                stz 1,x
.9f98	a5 04		lda $04		                lda workword
.9f9a	18		clc		                clc
.9f9b	69 08		adc #$08	                adc #8
.9f9d	95 02		sta $02,x	                sta 2,x
.9f9f	a5 05		lda $05		                lda workword+1
.9fa1	69 00		adc #$00	                adc #0                  ; only want carry
.9fa3	95 03		sta $03,x	                sta 3,x
.9fa5	a9 02		lda #$02	                lda #str_redefined       ; address of string "redefined"
.9fa7	20 28 d8	jsr $d828	                jsr print_string_no_lf
.9faa	20 e0 a4	jsr $a4e0	                jsr xt_type
.9fad	20 fb a0	jsr $a0fb	                jsr xt_space
.9fb0	a9 80		lda #$80	                lda #%10000000
.9fb2	14 20		trb $20		                trb status
.9fb4					_new_word:
.9fb4	a5 04		lda $04		                lda workword
.9fb6	85 02		sta $02		                sta dp
.9fb8	a5 05		lda $05		                lda workword+1
.9fba	85 03		sta $03		                sta dp+1
.9fbc	20 41 d7	jsr $d741	                jsr dp_to_current       ; Save the updated DP to the
.9fbf					_semicolon_done:
.9fbf	64 16		stz $16		                stz state
.9fc1	64 17		stz $17		                stz state+1
.9fc3	60		rts		z_semicolon:    rts
.9fc4					xt_sign:
.9fc4	20 ec d7	jsr $d7ec	                jsr underflow_1
.9fc7	b5 01		lda $01,x	                lda 1,x         ; check MSB of TOS
.9fc9	30 04		bmi $9fcf	                bmi _minus
.9fcb	e8		inx		                inx
.9fcc	e8		inx		                inx
.9fcd	80 09		bra $9fd8	                bra _done
.9fcf					_minus:
.9fcf	a9 2d		lda #$2d	                lda #$2D        ; ASCII for "-"
.9fd1	95 00		sta $00,x	                sta 0,x         ; overwrite TOS
.9fd3	74 01		stz $01,x	                stz 1,x         ; paranoid
.9fd5	20 e3 91	jsr $91e3	                jsr xt_hold
.9fd8					_done:
.9fd8	60		rts		z_sign:         rts
.9fd9					xt_slash:
.9fd9	a9 00		lda #$00	                lda #0
.9fdb	48		pha		                pha
.9fdc	80 03		bra $9fe1	                bra slashmod_common
.9fde					xt_slash_mod:
.9fde	a9 ff		lda #$ff	                lda #$FF
.9fe0	48		pha		                pha             ; falls through to _common
.9fe1					slashmod_common:
.9fe1	20 4d a3	jsr $a34d	                jsr xt_to_r             ; >R
.9fe4	20 89 9e	jsr $9e89	                jsr xt_s_to_d           ; S>D
.9fe7	20 9e 9a	jsr $9a9e	                jsr xt_r_from           ; R>
.9fea	20 b2 a0	jsr $a0b2	                jsr xt_sm_slash_rem     ; SM/REM
.9fed	68		pla		                pla
.9fee	d0 05		bne $9ff5	                bne _done
.9ff0	20 8b a1	jsr $a18b	                jsr xt_swap
.9ff3	e8		inx		                inx             ; DROP
.9ff4	e8		inx		                inx
.9ff5					_done:
.9ff5					z_slash_mod:
.9ff5	60		rts		z_slash:        rts
.9ff6					xt_slash_string:
.9ff6	20 f6 d7	jsr $d7f6	                jsr underflow_3
.9ff9	18		clc		                clc             ; 3OS+TOS
.9ffa	b5 00		lda $00,x	                lda 0,x
.9ffc	75 04		adc $04,x	                adc 4,x
.9ffe	95 04		sta $04,x	                sta 4,x
.a000	b5 01		lda $01,x	                lda 1,x
.a002	75 05		adc $05,x	                adc 5,x
.a004	95 05		sta $05,x	                sta 5,x
.a006	38		sec		                sec             ; NOS-TOS
.a007	b5 02		lda $02,x	                lda 2,x
.a009	f5 00		sbc $00,x	                sbc 0,x
.a00b	95 02		sta $02,x	                sta 2,x
.a00d	b5 03		lda $03,x	                lda 3,x
.a00f	f5 01		sbc $01,x	                sbc 1,x
.a011	95 03		sta $03,x	                sta 3,x
.a013	e8		inx		                inx
.a014	e8		inx		                inx
.a015	60		rts		z_slash_string: rts
.a016					xt_sliteral:
.a016	20 f1 d7	jsr $d7f1	                jsr underflow_2
.a019	a9 4c		lda #$4c	                lda #$4C
.a01b	20 9f d6	jsr $d69f	                jsr cmpl_a
.a01e	20 9f d6	jsr $d69f	                jsr cmpl_a
.a021	20 9f d6	jsr $d69f	                jsr cmpl_a
.a024	8a		txa		                txa
.a025	38		sec		                sec
.a026	e9 06		sbc #$06	                sbc #6
.a028	aa		tax		                tax
.a029	b5 08		lda $08,x	                lda 8,x
.a02b	95 04		sta $04,x	                sta 4,x
.a02d	b5 09		lda $09,x	                lda 9,x
.a02f	95 05		sta $05,x	                sta 5,x
.a031	b5 06		lda $06,x	                lda 6,x
.a033	95 00		sta $00,x	                sta 0,x
.a035	b5 07		lda $07,x	                lda 7,x
.a037	95 01		sta $01,x	                sta 1,x
.a039	a5 00		lda $00		                lda cp
.a03b	95 08		sta $08,x	                sta 8,x
.a03d	95 02		sta $02,x	                sta 2,x
.a03f	a5 01		lda $01		                lda cp+1
.a041	95 09		sta $09,x	                sta 9,x
.a043	95 03		sta $03,x	                sta 3,x
.a045	20 ce 95	jsr $95ce	                jsr xt_move
.a048	18		clc		                clc
.a049	a5 00		lda $00		                lda cp
.a04b	75 00		adc $00,x	                adc 0,x
.a04d	85 00		sta $00		                sta cp
.a04f	a5 01		lda $01		                lda cp+1
.a051	75 01		adc $01,x	                adc 1,x
.a053	85 01		sta $01		                sta cp+1
.a055	b5 02		lda $02,x	                lda 2,x
.a057	38		sec		                sec
.a058	e9 02		sbc #$02	                sbc #2
.a05a	85 24		sta $24		                sta tmp1
.a05c	b5 03		lda $03,x	                lda 3,x
.a05e	e9 00		sbc #$00	                sbc #0          ; Propagate borrow
.a060	85 25		sta $25		                sta tmp1+1
.a062	a5 00		lda $00		                lda cp
.a064	92 24		sta ($24)	                sta (tmp1)
.a066	a0 01		ldy #$01	                ldy #1
.a068	a5 01		lda $01		                lda cp+1
.a06a	91 24		sta ($24),y	                sta (tmp1),y
.a06c					sliteral_const_str:
.a06c	a0 a0		ldy #$a0	                ldy #>sliteral_runtime
.a06e	a9 86		lda #$86	                lda #<sliteral_runtime
.a070	20 8f d6	jsr $d68f	                jsr cmpl_subroutine
.a073	b4 03		ldy $03,x	                ldy 3,x                ; address MSB
.a075	b5 02		lda $02,x	                lda 2,x                ; address LSB
.a077	20 9b d6	jsr $d69b	                jsr cmpl_word
.a07a	b4 01		ldy $01,x	                ldy 1,x                ; length MSB
.a07c	b5 00		lda $00,x	                lda 0,x                ; length LSB
.a07e	20 9b d6	jsr $d69b	                jsr cmpl_word
.a081	e8		inx		                inx
.a082	e8		inx		                inx
.a083	e8		inx		                inx
.a084	e8		inx		                inx
.a085	60		rts		z_sliteral:     rts
.a086					sliteral_runtime:
.a086	ca		dex		                dex
.a087	ca		dex		                dex
.a088	ca		dex		                dex
.a089	ca		dex		                dex
.a08a	68		pla		                pla
.a08b	85 24		sta $24		                sta tmp1        ; LSB of address
.a08d	68		pla		                pla
.a08e	85 25		sta $25		                sta tmp1+1      ; MSB of address
.a090	a0 01		ldy #$01	                ldy #1          ; adjust for JSR/RTS mechanics on 65c02
.a092	b1 24		lda ($24),y	                lda (tmp1),y
.a094	95 02		sta $02,x	                sta 2,x         ; LSB of address
.a096	c8		iny		                iny
.a097	b1 24		lda ($24),y	                lda (tmp1),y
.a099	95 03		sta $03,x	                sta 3,x         ; MSB of address
.a09b	c8		iny		                iny
.a09c	b1 24		lda ($24),y	                lda (tmp1),y
.a09e	95 00		sta $00,x	                sta 0,x         ; LSB of length
.a0a0	c8		iny		                iny
.a0a1	b1 24		lda ($24),y	                lda (tmp1),y
.a0a3	95 01		sta $01,x	                sta 1,x         ; MSB of length
.a0a5	18		clc		                clc
.a0a6	a5 24		lda $24		                lda tmp1
.a0a8	69 04		adc #$04	                adc #4
.a0aa	a8		tay		                tay             ; LSB
.a0ab	a5 25		lda $25		                lda tmp1+1
.a0ad	69 00		adc #$00	                adc #0          ; we only need carry
.a0af	48		pha		                pha             ; MSB
.a0b0	5a		phy		                phy
.a0b1	60		rts		                rts
.a0b2					xt_sm_slash_rem:
.a0b2	20 f6 d7	jsr $d7f6	                jsr underflow_3 ; contains double number
.a0b5	b5 03		lda $03,x	                lda 3,x
.a0b7	48		pha		                pha
.a0b8	b5 01		lda $01,x	                lda 1,x
.a0ba	55 03		eor $03,x	                eor 3,x
.a0bc	48		pha		                pha
.a0bd	20 23 81	jsr $8123	                jsr xt_abs
.a0c0	e8		inx		                inx             ; pretend we pushed n1 to R
.a0c1	e8		inx		                inx
.a0c2	20 92 8a	jsr $8a92	                jsr xt_dabs
.a0c5	ca		dex		                dex
.a0c6	ca		dex		                dex
.a0c7	20 97 a5	jsr $a597	                jsr xt_um_slash_mod     ; UM/MOD
.a0ca	68		pla		                pla
.a0cb	10 03		bpl $a0d0	                bpl +
.a0cd	20 2f 96	jsr $962f	                jsr xt_negate
.a0d0					+
.a0d0	68		pla		                pla
.a0d1	10 07		bpl $a0da	                bpl _done
.a0d3	e8		inx		                inx             ; pretend we pushed quotient to R
.a0d4	e8		inx		                inx
.a0d5	20 2f 96	jsr $962f	                jsr xt_negate
.a0d8	ca		dex		                dex
.a0d9	ca		dex		                dex
.a0da					_done:
.a0da	60		rts		z_sm_slash_rem: rts
.a0db					xt_source:
.a0db	ca		dex		                dex
.a0dc	ca		dex		                dex
.a0dd	a5 08		lda $08		                lda cib
.a0df	95 00		sta $00,x	                sta 0,x
.a0e1	a5 09		lda $09		                lda cib+1
.a0e3	95 01		sta $01,x	                sta 1,x
.a0e5	ca		dex		                dex
.a0e6	ca		dex		                dex
.a0e7	a5 0a		lda $0a		                lda ciblen
.a0e9	95 00		sta $00,x	                sta 0,x
.a0eb	a5 0b		lda $0b		                lda ciblen+1
.a0ed	95 01		sta $01,x	                sta 1,x
.a0ef	60		rts		z_source:       rts
.a0f0					xt_source_id:
.a0f0	ca		dex		                dex
.a0f1	ca		dex		                dex
.a0f2	a5 06		lda $06		                lda insrc
.a0f4	95 00		sta $00,x	                sta 0,x
.a0f6	a5 07		lda $07		                lda insrc+1
.a0f8	95 01		sta $01,x	                sta 1,x
.a0fa	60		rts		z_source_id:    rts
.a0fb					xt_space:
.a0fb	a9 20		lda #$20	                lda #AscSP
.a0fd	20 02 8e	jsr $8e02	                jsr emit_a
.a100	60		rts		z_space:        rts
.a101					xt_spaces:
.a101	20 ec d7	jsr $d7ec	                jsr underflow_1
.a104	20 85 a7	jsr $a785	                jsr xt_zero
.a107	20 24 95	jsr $9524	                jsr xt_max
.a10a	b5 00		lda $00,x	                lda 0,x
.a10c	15 01		ora $01,x	                ora 1,x
.a10e	f0 2a		beq $a13a	                beq _done
.a110	b4 01		ldy $01,x	                ldy 1,x
.a112	d0 0c		bne $a120	                bne _lots_of_spaces
.a114	b4 00		ldy $00,x	                ldy 0,x
.a116					_quick_loop:
.a116	a9 20		lda #$20	                lda #AscSP
.a118	20 02 8e	jsr $8e02	                jsr emit_a
.a11b	88		dey		                dey
.a11c	f0 1c		beq $a13a	                beq _done
.a11e	80 f6		bra $a116	                bra _quick_loop
.a120					_lots_of_spaces:
.a120	b4 00		ldy $00,x	                ldy 0,x
.a122					_first_slow_loop:
.a122	f0 08		beq $a12c	                beq _slow_outer_loop
.a124	a9 20		lda #$20	                lda #AscSP
.a126	20 02 8e	jsr $8e02	                jsr emit_a
.a129	88		dey		                dey
.a12a	80 f6		bra $a122	                bra _first_slow_loop
.a12c					_slow_outer_loop:
.a12c	a0 00		ldy #$00	                ldy #00
.a12e					_slow_inner_loop:
.a12e	a9 20		lda #$20	                lda #AscSP
.a130	20 02 8e	jsr $8e02	                jsr emit_a
.a133	88		dey		                dey
.a134	d0 f8		bne $a12e	                bne _slow_inner_loop
.a136	d6 01		dec $01,x	                dec 1,x
.a138	d0 f2		bne $a12c	                bne _slow_outer_loop
.a13a					_done:
.a13a	e8		inx		                inx             ; drop
.a13b	e8		inx		                inx
.a13c	60		rts		z_spaces:       rts
.a13d					xt_star:
.a13d	20 f1 d7	jsr $d7f1	                jsr underflow_2
.a140	20 d9 a5	jsr $a5d9	                jsr xt_um_star
.a143	e8		inx		                inx
.a144	e8		inx		                inx
.a145	60		rts		z_star:         rts
.a146					xt_star_slash:
.a146	20 4f a1	jsr $a14f	                jsr xt_star_slash_mod
.a149	20 8b a1	jsr $a18b	                jsr xt_swap
.a14c	e8		inx		                inx
.a14d	e8		inx		                inx
.a14e					z_star_slash:
.a14e	60		rts		                rts
.a14f					xt_star_slash_mod:
.a14f	20 f6 d7	jsr $d7f6	                jsr underflow_3
.a152	20 4d a3	jsr $a34d	                jsr xt_to_r
.a155	20 9a 94	jsr $949a	                jsr xt_m_star
.a158	20 9e 9a	jsr $9a9e	                jsr xt_r_from
.a15b	20 b2 a0	jsr $a0b2	                jsr xt_sm_slash_rem
.a15e					z_star_slash_mod:
.a15e	60		rts		                rts
.a15f					xt_state:
.a15f	ca		dex		                dex
.a160	ca		dex		                dex
.a161	a9 16		lda #$16	                lda #<state
.a163	95 00		sta $00,x	                sta 0,x
.a165	a9 00		lda #$00	                lda #>state
.a167	95 01		sta $01,x	                sta 1,x
.a169	60		rts		z_state:        rts
.a16a					xt_store:
.a16a	20 f1 d7	jsr $d7f1	                jsr underflow_2
.a16d	b5 02		lda $02,x	                lda 2,x         ; LSB
.a16f	81 00		sta ($00,x)	                sta (0,x)
.a171	f6 00		inc $00,x	                inc 0,x
.a173	d0 02		bne $a177	                bne +
.a175	f6 01		inc $01,x	                inc 1,x
.a177					+
.a177	b5 03		lda $03,x	                lda 3,x         ; MSB
.a179	81 00		sta ($00,x)	                sta (0,x)
.a17b	e8		inx		                inx             ; 2DROP
.a17c	e8		inx		                inx
.a17d	e8		inx		                inx
.a17e	e8		inx		                inx
.a17f	60		rts		z_store:        rts
.a180					xt_strip_underflow:
.a180	ca		dex		                dex
.a181	ca		dex		                dex
.a182	a9 1c		lda #$1c	                lda #<uf_strip
.a184	95 00		sta $00,x	                sta 0,x
.a186	a9 00		lda #$00	                lda #>uf_strip
.a188	95 01		sta $01,x	                sta 1,x
.a18a					z_strip_underflow:
.a18a	60		rts		                rts
.a18b					xt_swap:
.a18b	20 f1 d7	jsr $d7f1	                jsr underflow_2
.a18e	b5 00		lda $00,x	                lda 0,x         ; LSB
.a190	b4 02		ldy $02,x	                ldy 2,x
.a192	95 02		sta $02,x	                sta 2,x
.a194	94 00		sty $00,x	                sty 0,x
.a196	b5 01		lda $01,x	                lda 1,x         ; MSB
.a198	b4 03		ldy $03,x	                ldy 3,x
.a19a	95 03		sta $03,x	                sta 3,x
.a19c	94 01		sty $01,x	                sty 1,x
.a19e	60		rts		z_swap:         rts
.a19f					xt_then:
.a19f	20 7e 91	jsr $917e	                jsr xt_here
.a1a2	20 8b a1	jsr $a18b	                jsr xt_swap
.a1a5	20 6a a1	jsr $a16a	                jsr xt_store
.a1a8	60		rts		z_then:         rts
.a1a9					xt_thru:
.a1a9	20 f1 d7	jsr $d7f1	                jsr underflow_2
.a1ac	b5 01		lda $01,x	                lda 1,x
.a1ae	48		pha		                pha
.a1af	b5 00		lda $00,x	                lda 0,x
.a1b1	48		pha		                pha
.a1b2	e8		inx		                inx
.a1b3	e8		inx		                inx
.a1b4					_thru_loop:
.a1b4	b5 01		lda $01,x	                lda 1,x
.a1b6	48		pha		                pha
.a1b7	b5 00		lda $00,x	                lda 0,x
.a1b9	48		pha		                pha
.a1ba	20 c3 93	jsr $93c3	                jsr xt_load
.a1bd	68		pla		                pla
.a1be	85 24		sta $24		                sta tmp1
.a1c0	68		pla		                pla
.a1c1	85 25		sta $25		                sta tmp1+1
.a1c3	68		pla		                pla
.a1c4	85 26		sta $26		                sta tmp2
.a1c6	68		pla		                pla
.a1c7	85 27		sta $27		                sta tmp2+1
.a1c9	c5 25		cmp $25		                cmp tmp1+1
.a1cb	d0 08		bne $a1d5	                bne _next_screen
.a1cd	a5 26		lda $26		                lda tmp2        ; Compare the LSB
.a1cf	c5 24		cmp $24		                cmp tmp1
.a1d1	d0 02		bne $a1d5	                bne _next_screen
.a1d3	80 18		bra $a1ed	                bra _done       ; We just did the last screen.
.a1d5					_next_screen:
.a1d5	a5 27		lda $27		                lda tmp2+1
.a1d7	48		pha		                pha
.a1d8	a5 26		lda $26		                lda tmp2
.a1da	48		pha		                pha
.a1db	e6 24		inc $24		                inc tmp1
.a1dd	d0 02		bne $a1e1	                bne +
.a1df	e6 25		inc $25		                inc tmp1+1
.a1e1					+
.a1e1	ca		dex		                dex
.a1e2	ca		dex		                dex
.a1e3	a5 24		lda $24		                lda tmp1
.a1e5	95 00		sta $00,x	                sta 0,x
.a1e7	a5 25		lda $25		                lda tmp1+1
.a1e9	95 01		sta $01,x	                sta 1,x
.a1eb	80 c7		bra $a1b4	                bra _thru_loop
.a1ed					_done:
.a1ed	60		rts		z_thru:         rts
.a1ee					xt_tick:
.a1ee	20 eb 98	jsr $98eb	                jsr xt_parse_name       ; ( -- addr u )
.a1f1	b5 00		lda $00,x	                lda 0,x
.a1f3	15 01		ora $01,x	                ora 1,x
.a1f5	d0 05		bne $a1fc	                bne +
.a1f7	a9 05		lda #$05	                lda #err_noname
.a1f9	4c 02 d8	jmp $d802	                jmp error
.a1fc					+
.a1fc	20 e7 8f	jsr $8fe7	                jsr xt_find_name        ; ( addr u -- nt )
.a1ff	b5 00		lda $00,x	                lda 0,x
.a201	15 01		ora $01,x	                ora 1,x
.a203	d0 05		bne $a20a	                bne +
.a205	a9 08		lda #$08	                lda #err_syntax
.a207	4c 02 d8	jmp $d802	                jmp error
.a20a					+
.a20a	20 ed 95	jsr $95ed	                jsr xt_name_to_int      ; ( nt -- xt )
.a20d	60		rts		z_tick:         rts
.a20e					xt_to:
.a20e	20 ee a1	jsr $a1ee	                jsr xt_tick             ; ( [n] xt )
.a211	b5 00		lda $00,x	                lda 0,x                 ; LSB
.a213	18		clc		                clc
.a214	69 03		adc #$03	                adc #3
.a216	85 24		sta $24		                sta tmp1
.a218	b5 01		lda $01,x	                lda 1,x                 ; MSB
.a21a	69 00		adc #$00	                adc #0                  ; we just want the carry
.a21c	85 25		sta $25		                sta tmp1+1
.a21e	e8		inx		                inx
.a21f	e8		inx		                inx                     ; ( [n] )
.a220	a5 16		lda $16		                lda state
.a222	05 17		ora $17		                ora state+1
.a224	f0 34		beq $a25a	                beq _interpret
.a226	a0 00		ldy #$00	                ldy #$00                ; Code for LDA 0,X
.a228	a9 b5		lda #$b5	                lda #$B5
.a22a	20 9b d6	jsr $d69b	                jsr cmpl_word
.a22d	a9 8d		lda #$8d	                lda #$8D                ; Code for STA abs
.a22f	20 9f d6	jsr $d69f	                jsr cmpl_a
.a232	a4 25		ldy $25		                ldy tmp1+1              ; MSB goes in Y
.a234	a5 24		lda $24		                lda tmp1
.a236	20 9b d6	jsr $d69b	                jsr cmpl_word
.a239	a0 01		ldy #$01	                ldy #$01                ; Code for LDA 1,X
.a23b	a9 b5		lda #$b5	                lda #$B5
.a23d	20 9b d6	jsr $d69b	                jsr cmpl_word
.a240	a9 8d		lda #$8d	                lda #$8D                ; Code for STA abs
.a242	20 9f d6	jsr $d69f	                jsr cmpl_a
.a245	e6 24		inc $24		                inc tmp1                ; Calculate MSB
.a247	d0 02		bne $a24b	                bne +
.a249	e6 25		inc $25		                inc tmp1+1
.a24b					+
.a24b	a4 25		ldy $25		                ldy tmp1+1              ; MSB goes in Y
.a24d	a5 24		lda $24		                lda tmp1
.a24f	20 9b d6	jsr $d69b	                jsr cmpl_word
.a252	a0 e8		ldy #$e8	                ldy #$E8                ; Code for INX
.a254	98		tya		                tya
.a255	20 9b d6	jsr $d69b	                jsr cmpl_word
.a258	80 0f		bra $a269	                bra _done
.a25a					_interpret:
.a25a	20 ec d7	jsr $d7ec	                jsr underflow_1
.a25d	b5 00		lda $00,x	                lda 0,x
.a25f	92 24		sta ($24)	                sta (tmp1)              ; LSB
.a261	a0 01		ldy #$01	                ldy #1
.a263	b5 01		lda $01,x	                lda 1,x                 ; MSB
.a265	91 24		sta ($24),y	                sta (tmp1),y            ; fall through to common
.a267	e8		inx		                inx                     ; DROP
.a268	e8		inx		                inx
.a269					_done:
.a269	60		rts		z_to:           rts
.a26a					xt_to_body:
.a26a	20 ec d7	jsr $d7ec	                jsr underflow_1
.a26d	20 bb 8d	jsr $8dbb	                jsr xt_dup              ; ( xt xt )
.a270	20 84 92	jsr $9284	                jsr xt_int_to_name      ; ( xt nt )
.a273	f6 00		inc $00,x	                inc 0,x
.a275	d0 02		bne $a279	                bne +
.a277	f6 01		inc $01,x	                inc 1,x
.a279					+
.a279	a1 00		lda ($00,x)	                lda (0,x)               ; get status byte
.a27b	29 20		and #$20	                and #HC
.a27d	f0 0d		beq $a28c	                beq _no_cfa
.a27f	18		clc		                clc
.a280	b5 02		lda $02,x	                lda 2,x         ; LSB
.a282	69 03		adc #$03	                adc #3
.a284	95 02		sta $02,x	                sta 2,x
.a286	b5 03		lda $03,x	                lda 3,x         ; MSB
.a288	69 00		adc #$00	                adc #0          ; we conly care about the carry
.a28a	95 03		sta $03,x	                sta 3,x         ; Fall through to _no_cfa
.a28c					_no_cfa:
.a28c	e8		inx		                inx             ; get rid of the nt
.a28d	e8		inx		                inx
.a28e					_done:
.a28e	60		rts		z_to_body:      rts
.a28f					xt_to_in:
.a28f	ca		dex		                dex
.a290	ca		dex		                dex
.a291	a9 0c		lda #$0c	                lda #<toin
.a293	95 00		sta $00,x	                sta 0,x
.a295	a9 00		lda #$00	                lda #>toin      ; paranoid, should be zero
.a297	95 01		sta $01,x	                sta 1,x
.a299	60		rts		z_to_in:        rts
.a29a					xt_to_number:
.a29a	20 fb d7	jsr $d7fb	                jsr underflow_4
.a29d	b5 06		lda $06,x	                lda 6,x         ; ud-lo LSB
.a29f	85 36		sta $36		                sta scratch
.a2a1	b5 07		lda $07,x	                lda 7,x         ; ud-lo MSB
.a2a3	85 37		sta $37		                sta scratch+1
.a2a5	b5 04		lda $04,x	                lda 4,x         ; ud-hi LSB
.a2a7	85 38		sta $38		                sta scratch+2
.a2a9	b5 05		lda $05,x	                lda 5,x         ; ud-hi MSB
.a2ab	85 39		sta $39		                sta scratch+3
.a2ad	ca		dex		                dex
.a2ae	ca		dex		                dex
.a2af					_loop:
.a2af	a1 04		lda ($04,x)	                lda (4,x)
.a2b1	95 00		sta $00,x	                sta 0,x                 ; ( ud-lo ud-hi addr u char )
.a2b3	74 01		stz $01,x	                stz 1,x                 ; paranoid
.a2b5	20 11 8b	jsr $8b11	                jsr xt_digit_question   ; ( char -- n -1 | char 0 )
.a2b8	b5 00		lda $00,x	                lda 0,x
.a2ba	d0 04		bne $a2c0	                bne _digit_ok
.a2bc	e8		inx		                inx
.a2bd	e8		inx		                inx
.a2be	80 67		bra $a327	                bra _done       ; ( ud-lo ud-hi addr u char )
.a2c0					_digit_ok:
.a2c0	b5 02		lda $02,x	                lda 2,x
.a2c2	85 3a		sta $3a		                sta scratch+4
.a2c4	b5 03		lda $03,x	                lda 3,x
.a2c6	85 3b		sta $3b		                sta scratch+5
.a2c8	a5 38		lda $38		                lda scratch+2
.a2ca	95 02		sta $02,x	                sta 2,x         ; NOS
.a2cc	a5 39		lda $39		                lda scratch+3
.a2ce	95 03		sta $03,x	                sta 3,x
.a2d0	a5 18		lda $18		                lda base
.a2d2	95 00		sta $00,x	                sta 0,x         ; TOS
.a2d4	74 01		stz $01,x	                stz 1,x         ; now ( ud-lo ud-hi addr u ud-hi base)
.a2d6	20 d9 a5	jsr $a5d9	                jsr xt_um_star  ; ( ud-lo ud-hi addr u ud-hi-lo ud-hi-hi )
.a2d9	b5 02		lda $02,x	                lda 2,x         ; ud-hi-lo
.a2db	85 3c		sta $3c		                sta scratch+6
.a2dd	b5 03		lda $03,x	                lda 3,x
.a2df	85 3d		sta $3d		                sta scratch+7
.a2e1	a5 36		lda $36		                lda scratch
.a2e3	95 02		sta $02,x	                sta 2,x
.a2e5	a5 37		lda $37		                lda scratch+1
.a2e7	95 03		sta $03,x	                sta 3,x         ; ( ud-lo ud-hi addr u ud-lo ud-hi-hi )
.a2e9	a5 18		lda $18		                lda base
.a2eb	95 00		sta $00,x	                sta 0,x
.a2ed	74 01		stz $01,x	                stz 1,x         ; ( ud-lo ud-hi addr u ud-lo base )
.a2ef	20 d9 a5	jsr $a5d9	                jsr xt_um_star  ; ( ud-lo ud-hi addr u ud-lo-lo ud-lo-hi )
.a2f2	b5 00		lda $00,x	                lda 0,x
.a2f4	85 38		sta $38		                sta scratch+2
.a2f6	b5 01		lda $01,x	                lda 1,x
.a2f8	85 39		sta $39		                sta scratch+3
.a2fa	b5 02		lda $02,x	                lda 2,x
.a2fc	85 36		sta $36		                sta scratch
.a2fe	b5 03		lda $03,x	                lda 3,x
.a300	85 37		sta $37		                sta scratch+1
.a302	18		clc		                clc
.a303	a5 36		lda $36		                lda scratch     ; ud-lo LSB
.a305	65 3a		adc $3a		                adc scratch+4   ; n LSB
.a307	85 36		sta $36		                sta scratch     ; this is the new ud-lo
.a309	a5 37		lda $37		                lda scratch+1   ; ud-lo MSB
.a30b	65 3b		adc $3b		                adc scratch+5   ; n MSB
.a30d	85 37		sta $37		                sta scratch+1
.a30f	a5 38		lda $38		                lda scratch+2   ; LSB
.a311	65 3c		adc $3c		                adc scratch+6
.a313	85 38		sta $38		                sta scratch+2   ; this is the new ud-hi
.a315	a5 39		lda $39		                lda scratch+3   ; MSB
.a317	65 3d		adc $3d		                adc scratch+7
.a319	85 39		sta $39		                sta scratch+3
.a31b	e8		inx		                inx
.a31c	e8		inx		                inx             ; ( ud-lo ud-hi addr u ud-lo-lo )
.a31d	f6 04		inc $04,x	                inc 4,x
.a31f	d0 02		bne $a323	                bne +
.a321	f6 05		inc $05,x	                inc 5,x
.a323					+
.a323	d6 02		dec $02,x	                dec 2,x
.a325	d0 88		bne $a2af	                bne _loop
.a327					_done:
.a327	e8		inx		                inx
.a328	e8		inx		                inx             ; ( ud-lo ud-hi addr u )
.a329	a5 36		lda $36		                lda scratch     ; new ud-lo
.a32b	95 06		sta $06,x	                sta 6,x
.a32d	a5 37		lda $37		                lda scratch+1
.a32f	95 07		sta $07,x	                sta 7,x
.a331	a5 38		lda $38		                lda scratch+2
.a333	95 04		sta $04,x	                sta 4,x
.a335	a5 39		lda $39		                lda scratch+3
.a337	95 05		sta $05,x	                sta 5,x
.a339	60		rts		z_to_number:    rts
.a33a					xt_to_order:
.a33a	20 4d a3	jsr $a34d	                jsr xt_to_r
.a33d	20 40 91	jsr $9140	                jsr xt_get_order
.a340	20 9e 9a	jsr $9a9e	                jsr xt_r_from
.a343	20 8b a1	jsr $a18b	                jsr xt_swap
.a346	20 29 98	jsr $9829	                jsr xt_one_plus
.a349	20 27 9d	jsr $9d27	                jsr xt_set_order
.a34c	60		rts		z_to_order:     rts
.a34d					xt_to_r:
.a34d	68		pla		                pla             ; LSB
.a34e	85 2c		sta $2c		                sta tmptos
.a350	7a		ply		                ply             ; MSB
.a351	20 ec d7	jsr $d7ec	                jsr underflow_1
.a354	b5 01		lda $01,x	                lda 1,x         ; MSB
.a356	48		pha		                pha
.a357	b5 00		lda $00,x	                lda 0,x         ; LSB
.a359	48		pha		                pha
.a35a	e8		inx		                inx
.a35b	e8		inx		                inx
.a35c	5a		phy		                phy             ; MSB
.a35d	a5 2c		lda $2c		                lda tmptos
.a35f	48		pha		                pha             ; LSB
.a360	60		rts		z_to_r:         rts
.a361					xt_true:
.a361	ca		dex		                dex
.a362	ca		dex		                dex
.a363	a9 ff		lda #$ff	                lda #$FF
.a365	95 00		sta $00,x	                sta 0,x
.a367	95 01		sta $01,x	                sta 1,x
.a369	60		rts		z_true:         rts
.a36a					xt_tuck:
.a36a	20 f1 d7	jsr $d7f1	                jsr underflow_2
.a36d	ca		dex		                dex
.a36e	ca		dex		                dex
.a36f	b4 04		ldy $04,x	                ldy 4,x         ; LSB
.a371	b5 02		lda $02,x	                lda 2,x
.a373	95 04		sta $04,x	                sta 4,x
.a375	94 02		sty $02,x	                sty 2,x
.a377	95 00		sta $00,x	                sta 0,x
.a379	b4 05		ldy $05,x	                ldy 5,x         ; MSB
.a37b	b5 03		lda $03,x	                lda 3,x
.a37d	95 05		sta $05,x	                sta 5,x
.a37f	94 03		sty $03,x	                sty 3,x         ; bba
.a381	95 01		sta $01,x	                sta 1,x         ; baa
.a383	60		rts		z_tuck:         rts
.a384					xt_assembler_wordlist:
.a384					xt_two:
.a384	ca		dex		                dex
.a385	ca		dex		                dex
.a386	a9 02		lda #$02	                lda #2
.a388	95 00		sta $00,x	                sta 0,x
.a38a	74 01		stz $01,x	                stz 1,x
.a38c					z_assembler_wordlist:
.a38c	60		rts		z_two:          rts
.a38d					xt_two_drop:
.a38d	20 f1 d7	jsr $d7f1	                jsr underflow_2
.a390	e8		inx		                inx
.a391	e8		inx		                inx
.a392	e8		inx		                inx
.a393	e8		inx		                inx
.a394	60		rts		z_two_drop:     rts
.a395					xt_two_dup:
.a395	20 f1 d7	jsr $d7f1	                jsr underflow_2
.a398	ca		dex		                dex
.a399	ca		dex		                dex
.a39a	ca		dex		                dex
.a39b	ca		dex		                dex
.a39c	b5 04		lda $04,x	                lda 4,x         ; TOS
.a39e	95 00		sta $00,x	                sta 0,x
.a3a0	b5 05		lda $05,x	                lda 5,x
.a3a2	95 01		sta $01,x	                sta 1,x
.a3a4	b5 06		lda $06,x	                lda 6,x         ; NOS
.a3a6	95 02		sta $02,x	                sta 2,x
.a3a8	b5 07		lda $07,x	                lda 7,x
.a3aa	95 03		sta $03,x	                sta 3,x
.a3ac	60		rts		z_two_dup:      rts
.a3ad					xt_two_fetch:
.a3ad	20 ec d7	jsr $d7ec	                jsr underflow_1
.a3b0	b5 00		lda $00,x	                lda 0,x
.a3b2	85 24		sta $24		                sta tmp1
.a3b4	b4 01		ldy $01,x	                ldy 1,x
.a3b6	84 25		sty $25		                sty tmp1+1
.a3b8	ca		dex		                dex             ; reuse one stack element
.a3b9	ca		dex		                dex
.a3ba	b2 24		lda ($24)	                lda (tmp1)      ; copy LSB
.a3bc	95 00		sta $00,x	                sta 0,x
.a3be	a0 01		ldy #$01	                ldy #1          ; copy next
.a3c0	b1 24		lda ($24),y	                lda (tmp1),y
.a3c2	95 01		sta $01,x	                sta 1,x
.a3c4	c8		iny		                iny             ; copy next
.a3c5	b1 24		lda ($24),y	                lda (tmp1),y
.a3c7	95 02		sta $02,x	                sta 2,x
.a3c9	c8		iny		                iny             ; copy next
.a3ca	b1 24		lda ($24),y	                lda (tmp1),y
.a3cc	95 03		sta $03,x	                sta 3,x
.a3ce	60		rts		z_two_fetch:    rts
.a3cf					xt_two_over:
.a3cf	20 fb d7	jsr $d7fb	                jsr underflow_4
.a3d2	ca		dex		                dex
.a3d3	ca		dex		                dex
.a3d4	ca		dex		                dex
.a3d5	ca		dex		                dex
.a3d6	b5 08		lda $08,x	                lda 8,x
.a3d8	95 00		sta $00,x	                sta 0,x
.a3da	b5 09		lda $09,x	                lda 9,x
.a3dc	95 01		sta $01,x	                sta 1,x
.a3de	b5 0a		lda $0a,x	                lda 10,x
.a3e0	95 02		sta $02,x	                sta 2,x
.a3e2	b5 0b		lda $0b,x	                lda 11,x
.a3e4	95 03		sta $03,x	                sta 3,x
.a3e6	60		rts		z_two_over:     rts
.a3e7					xt_two_r_fetch:
.a3e7	ca		dex		                dex
.a3e8	ca		dex		                dex
.a3e9	ca		dex		                dex
.a3ea	ca		dex		                dex
.a3eb	8a		txa		                txa
.a3ec	ba		tsx		                tsx
.a3ed	da		phx		                phx             ; 65c02 has no TXY, so do it the hard way
.a3ee	7a		ply		                ply
.a3ef	aa		tax		                tax
.a3f0	b9 03 01	lda $0103,y	                lda $0103,y     ; LSB of top entry
.a3f3	95 00		sta $00,x	                sta 0,x
.a3f5	b9 04 01	lda $0104,y	                lda $0104,y     ; MSB of top entry
.a3f8	95 01		sta $01,x	                sta 1,x
.a3fa	b9 05 01	lda $0105,y	                lda $0105,y     ; LSB of bottom entry
.a3fd	95 02		sta $02,x	                sta 2,x
.a3ff	b9 06 01	lda $0106,y	                lda $0106,y     ; MSB of top entry
.a402	95 03		sta $03,x	                sta 3,x
.a404	60		rts		z_two_r_fetch:  rts
.a405					xt_two_r_from:
.a405	68		pla		                pla                     ; LSB
.a406	85 24		sta $24		                sta tmp1
.a408	68		pla		                pla                     ; MSB
.a409	85 25		sta $25		                sta tmp1+1
.a40b	ca		dex		                dex
.a40c	ca		dex		                dex
.a40d	ca		dex		                dex
.a40e	ca		dex		                dex
.a40f	68		pla		                pla                     ; LSB
.a410	95 00		sta $00,x	                sta 0,x
.a412	68		pla		                pla                     ; MSB
.a413	95 01		sta $01,x	                sta 1,x
.a415	68		pla		                pla                     ; LSB
.a416	95 02		sta $02,x	                sta 2,x
.a418	68		pla		                pla                     ; MSB
.a419	95 03		sta $03,x	                sta 3,x
.a41b	a5 25		lda $25		                lda tmp1+1              ; MSB
.a41d	48		pha		                pha
.a41e	a5 24		lda $24		                lda tmp1                ; LSB
.a420	48		pha		                pha
.a421	60		rts		z_two_r_from:   rts
.a422					xt_two_slash:
.a422	20 ec d7	jsr $d7ec	                jsr underflow_1
.a425	b5 01		lda $01,x	                lda 1,x
.a427	0a		asl a		                asl                     ; save the sign
.a428	76 01		ror $01,x	                ror 1,x
.a42a	76 00		ror $00,x	                ror 0,x
.a42c	60		rts		z_two_slash:    rts
.a42d					xt_two_star:
.a42d					xt_cells:
.a42d	20 ec d7	jsr $d7ec	                jsr underflow_1
.a430	16 00		asl $00,x	                asl 0,x
.a432	36 01		rol $01,x	                rol 1,x
.a434					z_cells:
.a434	60		rts		z_two_star:     rts
.a435					xt_two_store:
.a435	20 f6 d7	jsr $d7f6	                jsr underflow_3
.a438	b5 00		lda $00,x	                lda 0,x
.a43a	85 24		sta $24		                sta tmp1
.a43c	b4 01		ldy $01,x	                ldy 1,x
.a43e	84 25		sty $25		                sty tmp1+1
.a440	e8		inx		                inx
.a441	e8		inx		                inx
.a442	b5 00		lda $00,x	                lda 0,x         ; copy MSB
.a444	92 24		sta ($24)	                sta (tmp1)
.a446	b5 01		lda $01,x	                lda 1,x         ; copy next
.a448	a0 01		ldy #$01	                ldy #1
.a44a	91 24		sta ($24),y	                sta (tmp1),y
.a44c	b5 02		lda $02,x	                lda 2,x         ; copy next
.a44e	c8		iny		                iny
.a44f	91 24		sta ($24),y	                sta (tmp1),y
.a451	b5 03		lda $03,x	                lda 3,x         ; copy MSB
.a453	c8		iny		                iny
.a454	91 24		sta ($24),y	                sta (tmp1),y
.a456	e8		inx		                inx             ; 2DROP
.a457	e8		inx		                inx
.a458	e8		inx		                inx
.a459	e8		inx		                inx
.a45a	60		rts		z_two_store:    rts
.a45b					xt_two_swap:
.a45b	20 fb d7	jsr $d7fb	                jsr underflow_4
.a45e	b5 00		lda $00,x	                lda 0,x
.a460	b4 04		ldy $04,x	                ldy 4,x
.a462	95 04		sta $04,x	                sta 4,x
.a464	94 00		sty $00,x	                sty 0,x
.a466	b5 01		lda $01,x	                lda 1,x
.a468	b4 05		ldy $05,x	                ldy 5,x
.a46a	95 05		sta $05,x	                sta 5,x
.a46c	94 01		sty $01,x	                sty 1,x
.a46e	b5 02		lda $02,x	                lda 2,x
.a470	b4 06		ldy $06,x	                ldy 6,x
.a472	95 06		sta $06,x	                sta 6,x
.a474	94 02		sty $02,x	                sty 2,x
.a476	b5 03		lda $03,x	                lda 3,x
.a478	b4 07		ldy $07,x	                ldy 7,x
.a47a	95 07		sta $07,x	                sta 7,x
.a47c	94 03		sty $03,x	                sty 3,x
.a47e	60		rts		z_two_swap:     rts
.a47f					xt_two_to_r:
.a47f	68		pla		                pla             ; LSB
.a480	85 24		sta $24		                sta tmp1
.a482	68		pla		                pla             ; MSB
.a483	85 25		sta $25		                sta tmp1+1
.a485	20 f1 d7	jsr $d7f1	                jsr underflow_2
.a488	b5 03		lda $03,x	                lda 3,x         ; MSB
.a48a	48		pha		                pha
.a48b	b5 02		lda $02,x	                lda 2,x         ; LSB
.a48d	48		pha		                pha
.a48e	b5 01		lda $01,x	                lda 1,x         ; MSB
.a490	48		pha		                pha
.a491	b5 00		lda $00,x	                lda 0,x         ; LSB
.a493	48		pha		                pha
.a494	e8		inx		                inx
.a495	e8		inx		                inx
.a496	e8		inx		                inx
.a497	e8		inx		                inx
.a498	a5 25		lda $25		                lda tmp1+1      ; MSB
.a49a	48		pha		                pha
.a49b	a5 24		lda $24		                lda tmp1        ; LSB
.a49d	48		pha		                pha
.a49e	60		rts		z_two_to_r:     rts
.a49f					xt_two_constant:
.a49f	20 f1 d7	jsr $d7f1	                jsr underflow_2
.a4a2	20 75 89	jsr $8975	                jsr xt_create
.a4a5	20 8b a1	jsr $a18b	                jsr xt_swap
.a4a8	20 7a 87	jsr $877a	                jsr xt_comma
.a4ab	20 7a 87	jsr $877a	                jsr xt_comma
.a4ae	20 10 8c	jsr $8c10	                jsr does_runtime    ; does> turns into these two routines.
.a4b1	20 d5 d6	jsr $d6d5	                jsr dodoes
.a4b4	20 bb 8d	jsr $8dbb	                jsr xt_dup
.a4b7	20 8c 8f	jsr $8f8c	                jsr xt_fetch
.a4ba	20 8b a1	jsr $a18b	                jsr xt_swap
.a4bd	20 2d 86	jsr $862d	                jsr xt_cell_plus
.a4c0	20 8c 8f	jsr $8f8c	                jsr xt_fetch
.a4c3	60		rts		z_two_constant: rts
.a4c4					xt_two_literal:
.a4c4	20 f1 d7	jsr $d7f1	                jsr underflow_2 ; double number
.a4c7	20 8b a1	jsr $a18b	                jsr xt_swap
.a4ca	20 96 93	jsr $9396	                jsr xt_literal
.a4cd	20 96 93	jsr $9396	                jsr xt_literal
.a4d0	60		rts		z_two_literal:  rts
.a4d1					xt_two_variable:
.a4d1	20 75 89	jsr $8975	                jsr xt_create
.a4d4	ca		dex		                dex
.a4d5	ca		dex		                dex
.a4d6	a9 04		lda #$04	                lda #4
.a4d8	95 00		sta $00,x	                sta 0,x
.a4da	74 01		stz $01,x	                stz 1,x
.a4dc	20 95 82	jsr $8295	                jsr xt_allot
.a4df	60		rts		z_two_variable: rts
.a4e0					xt_type:
.a4e0	20 f1 d7	jsr $d7f1	                jsr underflow_2
.a4e3	b5 02		lda $02,x	                lda 2,x
.a4e5	85 24		sta $24		                sta tmp1
.a4e7	b5 03		lda $03,x	                lda 3,x
.a4e9	85 25		sta $25		                sta tmp1+1
.a4eb					_loop:
.a4eb	b5 00		lda $00,x	                lda 0,x
.a4ed	15 01		ora $01,x	                ora 1,x
.a4ef	f0 15		beq $a506	                beq _done
.a4f1	b2 24		lda ($24)	                lda (tmp1)
.a4f3	20 02 8e	jsr $8e02	                jsr emit_a      ; avoids stack foolery
.a4f6	e6 24		inc $24		                inc tmp1
.a4f8	d0 02		bne $a4fc	                bne +
.a4fa	e6 25		inc $25		                inc tmp1+1
.a4fc					+
.a4fc	b5 00		lda $00,x	                lda 0,x
.a4fe	d0 02		bne $a502	                bne +
.a500	d6 01		dec $01,x	                dec 1,x
.a502					+
.a502	d6 00		dec $00,x	                dec 0,x
.a504	80 e5		bra $a4eb	                bra _loop
.a506					_done:
.a506	e8		inx		                inx
.a507	e8		inx		                inx
.a508	e8		inx		                inx
.a509	e8		inx		                inx
.a50a	60		rts		z_type:         rts
.a50b					xt_u_dot:
.a50b	20 ec d7	jsr $d7ec	                jsr underflow_1
.a50e	20 59 d8	jsr $d859	                jsr print_u
.a511	a9 20		lda #$20	                lda #AscSP
.a513	20 02 8e	jsr $8e02	                jsr emit_a
.a516	60		rts		z_u_dot:        rts
.a517					xt_u_dot_r:
.a517	20 f1 d7	jsr $d7f1	                jsr underflow_2
.a51a	20 4d a3	jsr $a34d	                jsr xt_to_r
.a51d	20 85 a7	jsr $a785	                jsr xt_zero
.a520	20 66 93	jsr $9366	                jsr xt_less_number_sign
.a523	20 ea 97	jsr $97ea	                jsr xt_number_sign_s
.a526	20 c8 97	jsr $97c8	                jsr xt_number_sign_greater
.a529	20 9e 9a	jsr $9a9e	                jsr xt_r_from
.a52c	20 9f 98	jsr $989f	                jsr xt_over
.a52f	20 5c 95	jsr $955c	                jsr xt_minus
.a532	20 01 a1	jsr $a101	                jsr xt_spaces
.a535	20 e0 a4	jsr $a4e0	                jsr xt_type
.a538	60		rts		z_u_dot_r:      rts
.a539					xt_u_greater_than:
.a539	20 f1 d7	jsr $d7f1	                jsr underflow_2
.a53c	b5 00		lda $00,x	                lda 0,x
.a53e	d5 02		cmp $02,x	                cmp 2,x
.a540	b5 01		lda $01,x	                lda 1,x
.a542	f5 03		sbc $03,x	                sbc 3,x
.a544	e8		inx		                inx
.a545	e8		inx		                inx
.a546	a9 00		lda #$00	                lda #0
.a548	69 ff		adc #$ff	                adc #$ff
.a54a	95 00		sta $00,x	                sta 0,x         ; store flag
.a54c	95 01		sta $01,x	                sta 1,x
.a54e	60		rts		z_u_greater_than:    rts
.a54f					xt_u_less_than:
.a54f	20 f1 d7	jsr $d7f1	                jsr underflow_2
.a552	b5 02		lda $02,x	                lda 2,x
.a554	d5 00		cmp $00,x	                cmp 0,x
.a556	b5 03		lda $03,x	                lda 3,x
.a558	f5 01		sbc $01,x	                sbc 1,x
.a55a	e8		inx		                inx
.a55b	e8		inx		                inx
.a55c	a9 00		lda #$00	                lda #0
.a55e	69 ff		adc #$ff	                adc #$ff
.a560	95 00		sta $00,x	                sta 0,x         ; store flag
.a562	95 01		sta $01,x	                sta 1,x
.a564	60		rts		z_u_less_than:    rts
.a565					xt_ud_dot:
.a565	20 f1 d7	jsr $d7f1	                jsr underflow_2 ; double number
.a568	20 66 93	jsr $9366	                jsr xt_less_number_sign
.a56b	20 ea 97	jsr $97ea	                jsr xt_number_sign_s
.a56e	20 c8 97	jsr $97c8	                jsr xt_number_sign_greater
.a571	20 e0 a4	jsr $a4e0	                jsr xt_type
.a574	20 fb a0	jsr $a0fb	                jsr xt_space
.a577	60		rts		z_ud_dot:        rts
.a578					xt_ud_dot_r:
.a578	20 f6 d7	jsr $d7f6	                jsr underflow_3
.a57b	20 4d a3	jsr $a34d	                jsr xt_to_r
.a57e	20 66 93	jsr $9366	                jsr xt_less_number_sign
.a581	20 ea 97	jsr $97ea	                jsr xt_number_sign_s
.a584	20 c8 97	jsr $97c8	                jsr xt_number_sign_greater
.a587	20 9e 9a	jsr $9a9e	                jsr xt_r_from
.a58a	20 9f 98	jsr $989f	                jsr xt_over
.a58d	20 5c 95	jsr $955c	                jsr xt_minus
.a590	20 01 a1	jsr $a101	                jsr xt_spaces
.a593	20 e0 a4	jsr $a4e0	                jsr xt_type
.a596	60		rts		z_ud_dot_r:      rts
.a597					xt_um_slash_mod:
.a597	20 f6 d7	jsr $d7f6	                jsr underflow_3
.a59a	b5 00		lda $00,x	                lda 0,x
.a59c	15 01		ora $01,x	                ora 1,x
.a59e	d0 05		bne $a5a5	                bne _not_zero
.a5a0	a9 04		lda #$04	                lda #err_divzero
.a5a2	4c 02 d8	jmp $d802	                jmp error
.a5a5					_not_zero:
.a5a5	a9 11		lda #$11	                lda #17
.a5a7	85 2c		sta $2c		                sta tmptos
.a5a9					_loop:
.a5a9	36 04		rol $04,x	                rol 4,x
.a5ab	36 05		rol $05,x	                rol 5,x
.a5ad	c6 2c		dec $2c		                dec tmptos
.a5af	f0 22		beq $a5d3	                beq _done
.a5b1	36 02		rol $02,x	                rol 2,x
.a5b3	36 03		rol $03,x	                rol 3,x
.a5b5	64 24		stz $24		                stz tmp1        ; store the bit we got from hi cell (MSB)
.a5b7	26 24		rol $24		                rol tmp1
.a5b9	38		sec		                sec
.a5ba	b5 02		lda $02,x	                lda 2,x
.a5bc	f5 00		sbc $00,x	                sbc 0,x
.a5be	85 25		sta $25		                sta tmp1+1
.a5c0	b5 03		lda $03,x	                lda 3,x
.a5c2	f5 01		sbc $01,x	                sbc 1,x
.a5c4	a8		tay		                tay
.a5c5	a5 24		lda $24		                lda tmp1
.a5c7	e9 00		sbc #$00	                sbc #0
.a5c9	90 de		bcc $a5a9	                bcc _loop
.a5cb	a5 25		lda $25		                lda tmp1+1
.a5cd	95 02		sta $02,x	                sta 2,x
.a5cf	94 03		sty $03,x	                sty 3,x         ; used as temp storage
.a5d1	80 d6		bra $a5a9	                bra _loop
.a5d3					_done:
.a5d3	e8		inx		                inx
.a5d4	e8		inx		                inx
.a5d5	20 8b a1	jsr $a18b	                jsr xt_swap
.a5d8	60		rts		z_um_slash_mod: rts
.a5d9					xt_um_star:
.a5d9	20 f1 d7	jsr $d7f1	                jsr underflow_2
.a5dc	18		clc		                clc
.a5dd	b5 00		lda $00,x	                lda 0,x         ; copy TOS to tmp2
.a5df	e9 00		sbc #$00	                sbc #0
.a5e1	85 26		sta $26		                sta tmp2
.a5e3	b5 01		lda $01,x	                lda 1,x
.a5e5	e9 00		sbc #$00	                sbc #0
.a5e7	90 31		bcc $a61a	                bcc _zero       ; is TOS zero?
.a5e9	85 27		sta $27		                sta tmp2+1
.a5eb	a9 00		lda #$00	                lda #0
.a5ed	85 24		sta $24		                sta tmp1
.a5ef	86 28		stx $28		                stx tmp3        ; tested for exit from outer loop
.a5f1	ca		dex		                dex
.a5f2	ca		dex		                dex
.a5f3					_outer_loop:
.a5f3	a0 08		ldy #$08	                ldy #8          ; counter inner loop
.a5f5	56 04		lsr $04,x	                lsr 4,x         ; think "2,x" then later "3,x"
.a5f7					_inner_loop:
.a5f7	90 0c		bcc $a605	                bcc _no_add
.a5f9	85 25		sta $25		                sta tmp1+1      ; save time, don't CLC
.a5fb	a5 24		lda $24		                lda tmp1
.a5fd	65 26		adc $26		                adc tmp2
.a5ff	85 24		sta $24		                sta tmp1
.a601	a5 25		lda $25		                lda tmp1+1
.a603	65 27		adc $27		                adc tmp2+1
.a605					_no_add:
.a605	6a		ror a		                ror
.a606	66 24		ror $24		                ror tmp1
.a608	76 04		ror $04,x	                ror 4,x         ; think "2,x" then later "3,x"
.a60a	88		dey		                dey
.a60b	d0 ea		bne $a5f7	                bne _inner_loop ; go back for one more shift?
.a60d	e8		inx		                inx
.a60e	e4 28		cpx $28		                cpx tmp3
.a610	d0 e1		bne $a5f3	                bne _outer_loop ; go back for eight more shifts?
.a612	95 01		sta $01,x	                sta 1,x
.a614	a5 24		lda $24		                lda tmp1
.a616	95 00		sta $00,x	                sta 0,x
.a618	80 04		bra $a61e	                bra _done
.a61a					_zero:
.a61a	74 02		stz $02,x	                stz 2,x
.a61c	74 03		stz $03,x	                stz 3,x
.a61e					_done:
.a61e	60		rts		z_um_star:      rts
.a61f					xt_unloop:
.a61f	68		pla		                pla
.a620	68		pla		                pla
.a621	68		pla		                pla
.a622	68		pla		                pla
.a623	68		pla		                pla
.a624	68		pla		                pla
.a625	60		rts		z_unloop:       rts
.a626					xt_until:
.a626	a0 92		ldy #$92	                ldy #>zero_branch_runtime
.a628	a9 20		lda #$20	                lda #<zero_branch_runtime
.a62a	20 8f d6	jsr $d68f	                jsr cmpl_subroutine
.a62d	20 7a 87	jsr $877a	                jsr xt_comma
.a630	60		rts		z_until:        rts
.a631					xt_unused:
.a631	ca		dex		                dex
.a632	ca		dex		                dex
.a633	a9 00		lda #$00	                lda #<cp_end
.a635	38		sec		                sec
.a636	e5 00		sbc $00		                sbc cp
.a638	95 00		sta $00,x	                sta 0,x
.a63a	a9 7c		lda #$7c	                lda #>cp_end
.a63c	e5 01		sbc $01		                sbc cp+1
.a63e	95 01		sta $01,x	                sta 1,x
.a640	60		rts		z_unused:       rts
.a641					xt_update:
.a641	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.a643	b1 1e		lda ($1e),y	                lda (up),y
.a645	09 02		ora #$02	                ora #2          ; Turn on dirty flag (bit 2)
.a647	91 1e		sta ($1e),y	                sta (up),y
.a649	60		rts		z_update:       rts
.a64a					xt_useraddr:
.a64a	ca		dex		                dex
.a64b	ca		dex		                dex
.a64c	a9 1e		lda #$1e	                lda #<up
.a64e	95 00		sta $00,x	                sta 0,x
.a650	a9 00		lda #$00	                lda #>up
.a652	95 01		sta $01,x	                sta 1,x
.a654	60		rts		z_useraddr:     rts
.a655					xt_variable:
.a655	20 75 89	jsr $8975	                jsr xt_create
.a658	a9 00		lda #$00	                lda #0
.a65a	92 00		sta ($00)	                sta (cp)
.a65c	e6 00		inc $00		                inc cp
.a65e	d0 02		bne $a662	                bne +
.a660	e6 01		inc $01		                inc cp+1
.a662					+
.a662	92 00		sta ($00)	                sta (cp)
.a664	e6 00		inc $00		                inc cp
.a666	d0 02		bne $a66a	                bne +
.a668	e6 01		inc $01		                inc cp+1
.a66a					+
.a66a	20 3d 89	jsr $893d	                jsr adjust_z
.a66d	60		rts		z_variable:     rts
.a66e					xt_while:
.a66e	a0 92		ldy #$92	                ldy #>zero_branch_runtime
.a670	a9 20		lda #$20	                lda #<zero_branch_runtime
.a672	20 8f d6	jsr $d68f	                jsr cmpl_subroutine
.a675	20 7e 91	jsr $917e	                jsr xt_here
.a678	20 85 a7	jsr $a785	                jsr xt_zero
.a67b	20 7a 87	jsr $877a	                jsr xt_comma
.a67e	20 8b a1	jsr $a18b	                jsr xt_swap
.a681	60		rts		z_while:        rts
.a682					xt_within:
.a682	20 f6 d7	jsr $d7f6	                jsr underflow_3
.a685	20 9f 98	jsr $989f	                jsr xt_over
.a688	20 5c 95	jsr $955c	                jsr xt_minus
.a68b	20 4d a3	jsr $a34d	                jsr xt_to_r
.a68e	20 5c 95	jsr $955c	                jsr xt_minus
.a691	20 9e 9a	jsr $9a9e	                jsr xt_r_from
.a694	20 4f a5	jsr $a54f	                jsr xt_u_less_than
.a697	60		rts		z_within:       rts
.a698					xt_word:
.a698	20 ec d7	jsr $d7ec	                jsr underflow_1
.a69b	a4 0c		ldy $0c		                ldy toin                ; >IN
.a69d					_loop:
.a69d	c4 0a		cpy $0a		                cpy ciblen              ; quit if end of input
.a69f	f0 09		beq $a6aa	                beq _found_char
.a6a1	b1 08		lda ($08),y	                lda (cib),y
.a6a3	d5 00		cmp $00,x	                cmp 0,x                 ; ASCII of delimiter
.a6a5	d0 03		bne $a6aa	                bne _found_char
.a6a7	c8		iny		                iny
.a6a8	80 f3		bra $a69d	                bra _loop
.a6aa					_found_char:
.a6aa	84 0c		sty $0c		                sty toin
.a6ac	20 46 99	jsr $9946	                jsr xt_parse            ; Returns ( addr u )
.a6af	b5 00		lda $00,x	                lda 0,x
.a6b1	92 00		sta ($00)	                sta (cp)                ; Save length of string
.a6b3	48		pha		                pha                     ; Keep copy of length for later
.a6b4	20 bb 8d	jsr $8dbb	                jsr xt_dup              ; ( addr u u )
.a6b7	a5 00		lda $00		                lda cp
.a6b9	18		clc		                clc
.a6ba	69 01		adc #$01	                adc #1
.a6bc	95 02		sta $02,x	                sta 2,x                 ; LSB of CP
.a6be	a5 01		lda $01		                lda cp+1
.a6c0	69 00		adc #$00	                adc #0
.a6c2	95 03		sta $03,x	                sta 3,x                 ; ( addr cp+1 u )
.a6c4	20 ce 95	jsr $95ce	                jsr xt_move
.a6c7	ca		dex		                dex
.a6c8	ca		dex		                dex
.a6c9	a5 00		lda $00		                lda cp
.a6cb	95 00		sta $00,x	                sta 0,x
.a6cd	a5 01		lda $01		                lda cp+1
.a6cf	95 01		sta $01,x	                sta 1,x
.a6d1	68		pla		                pla                     ; length of string
.a6d2	18		clc		                clc
.a6d3	65 00		adc $00		                adc cp
.a6d5	85 00		sta $00		                sta cp
.a6d7	a5 01		lda $01		                lda cp+1
.a6d9	69 00		adc #$00	                adc #0                  ; we only need the carry
.a6db	85 01		sta $01		                sta cp+1
.a6dd	60		rts		z_word:         rts
.a6de					xt_wordlist:
.a6de	a0 05		ldy #$05	                ldy #num_wordlists_offset
.a6e0	b1 1e		lda ($1e),y	                lda (up),y      ; This is a byte variable, so only
.a6e2	c9 0c		cmp #$0c	                cmp #max_wordlists
.a6e4	d0 05		bne $a6eb	                bne _ok
.a6e6	a9 0b		lda #$0b	                lda #err_wordlist
.a6e8	4c 02 d8	jmp $d802	                jmp error
.a6eb					_ok:
.a6eb	1a		inc a		                ina             ; Increment the wordlist#
.a6ec	91 1e		sta ($1e),y	                sta (up),y      ; Save it into byte variable #wordlists
.a6ee	ca		dex		                dex             ; and put it on the stack.
.a6ef	ca		dex		                dex
.a6f0	95 00		sta $00,x	                sta 0,x
.a6f2	74 01		stz $01,x	                stz 1,x         ; 12 is the max, so upper byte is always zero.
.a6f4	60		rts		z_wordlist:     rts
.a6f5					xt_words:
.a6f5	20 6f 89	jsr $896f	                jsr xt_cr
.a6f8	a9 00		lda #$00	                lda #0
.a6fa	48		pha		                pha
.a6fb	ca		dex		                dex                     ; Make room on the stack for
.a6fc	ca		dex		                dex                     ; a dictionary pointer.
.a6fd	64 28		stz $28		                stz tmp3                ; Start at the beginning of
.a6ff					_wordlist_loop:
.a6ff	a0 1e		ldy #$1e	                ldy #num_order_offset   ; Check against byte variable #ORDER.
.a701	a5 28		lda $28		                lda tmp3
.a703	d1 1e		cmp ($1e),y	                cmp (up),y              ; See if we are done.
.a705	d0 02		bne $a709	                bne _have_wordlist
.a707	80 45		bra $a74e	                bra _words_done
.a709					_have_wordlist:
.a709	18		clc		                clc                     ; Index into byte array SEARCH-ORDER.
.a70a	69 1f		adc #$1f	                adc #search_order_offset
.a70c	a8		tay		                tay
.a70d	b1 1e		lda ($1e),y	                lda (up),y              ; Get the index into array WORDLISTS
.a70f	0a		asl a		                asl                     ; Turn offset into cells offset.
.a710	18		clc		                clc
.a711	69 06		adc #$06	                adc #wordlists_offset
.a713	a8		tay		                tay
.a714	b1 1e		lda ($1e),y	                lda (up),y              ; Save the DP for this wordlist
.a716	95 00		sta $00,x	                sta 0,x                 ; on the stack. ( nt )
.a718	c8		iny		                iny
.a719	b1 1e		lda ($1e),y	                lda (up),y
.a71b	95 01		sta $01,x	                sta 1,x
.a71d					_loop:
.a71d	20 bb 8d	jsr $8dbb	                jsr xt_dup              ; ( nt nt )
.a720	20 0a 96	jsr $960a	                jsr xt_name_to_string   ; ( nt addr u )
.a723	68		pla		                pla
.a724	18		clc		                clc
.a725	75 00		adc $00,x	                adc 0,x
.a727	1a		inc a		                ina                     ; don't forget the space between words
.a728	c9 4f		cmp #$4f	                cmp #MAX_LINE_LENGTH    ; usually 79
.a72a	90 06		bcc $a732	                bcc +
.a72c	20 6f 89	jsr $896f	                jsr xt_cr
.a72f	b5 00		lda $00,x	                lda 0,x                 ; After going to next line, start
.a731	1a		inc a		                ina                     ; with length of this word.
.a732					+
.a732	48		pha		                pha
.a733	20 e0 a4	jsr $a4e0	                jsr xt_type             ; ( nt )
.a736	a9 20		lda #$20	                lda #AscSP
.a738	20 02 8e	jsr $8e02	                jsr emit_a
.a73b	20 29 98	jsr $9829	                jsr xt_one_plus         ; 1+
.a73e	20 29 98	jsr $9829	                jsr xt_one_plus         ; 1+
.a741	20 8c 8f	jsr $8f8c	                jsr xt_fetch            ; @ ( nt+1 )
.a744	b5 00		lda $00,x	                lda 0,x
.a746	15 01		ora $01,x	                ora 1,x
.a748	d0 d3		bne $a71d	                bne _loop
.a74a	e6 28		inc $28		                inc tmp3
.a74c	80 b1		bra $a6ff	                bra _wordlist_loop
.a74e					_words_done:
.a74e	68		pla		                pla                     ; dump counter
.a74f	e8		inx		                inx
.a750	e8		inx		                inx
.a751	60		rts		z_words:        rts
.a752					xt_wordsize:
.a752	20 ec d7	jsr $d7ec	                jsr underflow_1
.a755	b5 00		lda $00,x	                lda 0,x
.a757	85 24		sta $24		                sta tmp1
.a759	b5 01		lda $01,x	                lda 1,x
.a75b	85 25		sta $25		                sta tmp1+1
.a75d	a0 06		ldy #$06	                ldy #6
.a75f	b1 24		lda ($24),y	                lda (tmp1),y    ; LSB of z
.a761	88		dey		                dey
.a762	88		dey		                dey
.a763	38		sec		                sec
.a764	f1 24		sbc ($24),y	                sbc (tmp1),y    ; LSB of xt
.a766	95 00		sta $00,x	                sta 0,x
.a768	a0 07		ldy #$07	                ldy #7
.a76a	b1 24		lda ($24),y	                lda (tmp1),y    ; MSB of z
.a76c	88		dey		                dey
.a76d	88		dey		                dey
.a76e	f1 24		sbc ($24),y	                sbc (tmp1),y    ; MSB of xt
.a770	95 01		sta $01,x	                sta 1,x
.a772	60		rts		z_wordsize:     rts
.a773					xt_xor:
.a773	20 f1 d7	jsr $d7f1	                jsr underflow_2
.a776	b5 00		lda $00,x	                lda 0,x
.a778	55 02		eor $02,x	                eor 2,x
.a77a	95 02		sta $02,x	                sta 2,x
.a77c	b5 01		lda $01,x	                lda 1,x
.a77e	55 03		eor $03,x	                eor 3,x
.a780	95 03		sta $03,x	                sta 3,x
.a782	e8		inx		                inx
.a783	e8		inx		                inx
.a784	60		rts		z_xor:          rts
.a785					xt_case:
.a785					xt_forth_wordlist:
.a785					xt_zero:
.a785	ca		dex		                dex             ; push
.a786	ca		dex		                dex
.a787	74 00		stz $00,x	                stz 0,x
.a789	74 01		stz $01,x	                stz 1,x
.a78b					z_case:
.a78b					z_forth_wordlist:
.a78b					z_zero:
.a78b	60		rts		                rts
.a78c					xt_zero_equal:
.a78c	20 ec d7	jsr $d7ec	                jsr underflow_1
.a78f	b5 00		lda $00,x	                lda 0,x
.a791	15 01		ora $01,x	                ora 1,x
.a793	f0 04		beq $a799	                beq _zero
.a795	a9 00		lda #$00	                lda #0
.a797	80 02		bra $a79b	                bra _store
.a799					_zero:
.a799	a9 ff		lda #$ff	                lda #$ff
.a79b					_store:
.a79b	95 00		sta $00,x	                sta 0,x
.a79d	95 01		sta $01,x	                sta 1,x
.a79f	60		rts		z_zero_equal:   rts
.a7a0					xt_zero_greater:
.a7a0	20 ec d7	jsr $d7ec	                jsr underflow_1
.a7a3	a0 00		ldy #$00	                ldy #0          ; Default is FALSE (TOS is negative)
.a7a5	b5 01		lda $01,x	                lda 1,x         ; MSB
.a7a7	30 05		bmi $a7ae	                bmi _done       ; TOS is negative, keep FLASE
.a7a9	15 00		ora $00,x	                ora 0,x
.a7ab	f0 01		beq $a7ae	                beq _done       ; TOS is zero, keep FALSE
.a7ad	88		dey		                dey             ; TOS is postive, make true
.a7ae					_done:
.a7ae	98		tya		                tya
.a7af	95 00		sta $00,x	                sta 0,x
.a7b1	95 01		sta $01,x	                sta 1,x
.a7b3	60		rts		z_zero_greater: rts
.a7b4					xt_zero_less:
.a7b4	20 ec d7	jsr $d7ec	                jsr underflow_1
.a7b7	a0 00		ldy #$00	                ldy #0          ; Default is FALSE (TOS positive)
.a7b9	b5 01		lda $01,x	                lda 1,x         ; MSB
.a7bb	10 01		bpl $a7be	                bpl _done       ; TOS is positive, so keep FALSE
.a7bd	88		dey		                dey             ; TOS is negative, make TRUE
.a7be					_done:
.a7be	98		tya		                tya
.a7bf	95 00		sta $00,x	                sta 0,x
.a7c1	95 01		sta $01,x	                sta 1,x
.a7c3	60		rts		z_zero_less:    rts
.a7c4					xt_zero_unequal:
.a7c4	20 ec d7	jsr $d7ec	                jsr underflow_1
.a7c7	a0 00		ldy #$00	                ldy #0          ; default false
.a7c9	b5 00		lda $00,x	                lda 0,x
.a7cb	15 01		ora $01,x	                ora 1,x
.a7cd	f0 01		beq $a7d0	                beq _got_zero
.a7cf	88		dey		                dey
.a7d0					_got_zero:
.a7d0	98		tya		                tya
.a7d1	95 00		sta $00,x	                sta 0,x
.a7d3	95 01		sta $01,x	                sta 1,x
.a7d5	60		rts		z_zero_unequal: rts
.a7d6					xt_editor_screen_helper:
.a7d6	20 bb 8d	jsr $8dbb	                jsr xt_dup
.a7d9	20 b6 9e	jsr $9eb6	                jsr xt_scr
.a7dc	20 6a a1	jsr $a16a	                jsr xt_store
.a7df	20 c1 85	jsr $85c1	                jsr xt_buffer
.a7e2					z_editor_screen_helper:
.a7e2	60		rts		                rts
.a7e3					xt_editor_enter_screen:
.a7e3	20 d6 a7	jsr $a7d6	                jsr xt_editor_screen_helper
.a7e6	20 3a 8d	jsr $8d3a	                jsr xt_drop
.a7e9	64 2e		stz $2e		                stz editor1
.a7eb					_prompt_loop:
.a7eb	ca		dex		                dex
.a7ec	ca		dex		                dex
.a7ed	a5 2e		lda $2e		                lda editor1
.a7ef	95 00		sta $00,x	                sta 0,x
.a7f1	74 01		stz $01,x	                stz 1,x
.a7f3	20 b8 a8	jsr $a8b8	                jsr xt_editor_o
.a7f6	e6 2e		inc $2e		                inc editor1
.a7f8	a9 10		lda #$10	                lda #16
.a7fa	c5 2e		cmp $2e		                cmp editor1
.a7fc	d0 ed		bne $a7eb	                bne _prompt_loop
.a7fe					z_editor_enter_screen:
.a7fe	60		rts		                rts
.a7ff					xt_editor_erase_screen:
.a7ff	20 d6 a7	jsr $a7d6	                jsr xt_editor_screen_helper
.a802	ca		dex		                dex
.a803	ca		dex		                dex
.a804	74 00		stz $00,x	                stz 0,x
.a806	a9 04		lda #$04	                lda #4          ; 4 in MSB makes 1024 ($400).
.a808	95 01		sta $01,x	                sta 1,x
.a80a	20 f6 8e	jsr $8ef6	                jsr xt_blank
.a80d	20 41 a6	jsr $a641	                jsr xt_update
.a810					z_editor_erase_screen:
.a810	60		rts		                rts
.a811					xt_editor_el:
.a811	20 9f a8	jsr $a89f	                jsr xt_editor_line
.a814	ca		dex		                dex
.a815	ca		dex		                dex
.a816	a9 40		lda #$40	                lda #64
.a818	95 00		sta $00,x	                sta 0,x
.a81a	74 01		stz $01,x	                stz 1,x
.a81c	20 f6 8e	jsr $8ef6	                jsr xt_blank
.a81f	20 41 a6	jsr $a641	                jsr xt_update
.a822	60		rts		z_editor_el:    rts
.a823					xt_editor_l:
.a823	ca		dex		                dex             ; Put SCR on the stack.
.a824	ca		dex		                dex
.a825	a0 02		ldy #$02	                ldy #scr_offset
.a827	b1 1e		lda ($1e),y	                lda (up),y
.a829	95 00		sta $00,x	                sta 0,x
.a82b	c8		iny		                iny
.a82c	b1 1e		lda ($1e),y	                lda (up),y
.a82e	95 01		sta $01,x	                sta 1,x
.a830	20 cd 83	jsr $83cd	                jsr xt_block    ; Get the current screen.
.a833	20 6f 89	jsr $896f	                jsr xt_cr
.a836	80 08		bra $a840	                bra _after_screen_msg
.a838					_screen_msg:
>a838	53 63 72 65 65 6e 20 23		                .text "Screen #"
.a840					_after_screen_msg:
.a840	20 86 a0	jsr $a086	                jsr sliteral_runtime
>a843	38 a8 08 00			                .word _screen_msg, _after_screen_msg-_screen_msg
.a847	20 e0 a4	jsr $a4e0	                jsr xt_type
.a84a	20 b6 9e	jsr $9eb6	                jsr xt_scr
.a84d	20 8c 8f	jsr $8f8c	                jsr xt_fetch
.a850	ca		dex		                dex
.a851	ca		dex		                dex
.a852	a9 04		lda #$04	                lda #4          ; four spaces
.a854	95 00		sta $00,x	                sta 0,x
.a856	74 01		stz $01,x	                stz 1,x
.a858	20 17 a5	jsr $a517	                jsr xt_u_dot_r
.a85b	64 28		stz $28		                stz tmp3
.a85d					_line_loop:
.a85d	20 6f 89	jsr $896f	                jsr xt_cr
.a860	ca		dex		                dex
.a861	ca		dex		                dex
.a862	ca		dex		                dex
.a863	ca		dex		                dex
.a864	74 03		stz $03,x	                stz 3,x
.a866	a5 28		lda $28		                lda tmp3
.a868	95 02		sta $02,x	                sta 2,x
.a86a	74 01		stz $01,x	                stz 1,x
.a86c	a9 02		lda #$02	                lda #2
.a86e	95 00		sta $00,x	                sta 0,x
.a870	20 17 a5	jsr $a517	                jsr xt_u_dot_r
.a873	20 fb a0	jsr $a0fb	                jsr xt_space
.a876	20 bb 8d	jsr $8dbb	                jsr xt_dup
.a879	ca		dex		                dex
.a87a	ca		dex		                dex
.a87b	a9 40		lda #$40	                lda #64
.a87d	95 00		sta $00,x	                sta 0,x
.a87f	74 01		stz $01,x	                stz 1,x
.a881	20 e0 a4	jsr $a4e0	                jsr xt_type
.a884	18		clc		                clc
.a885	a9 40		lda #$40	                lda #64
.a887	75 00		adc $00,x	                adc 0,x
.a889	95 00		sta $00,x	                sta 0,x
.a88b	b5 01		lda $01,x	                lda 1,x
.a88d	69 00		adc #$00	                adc #0      ; Add carry
.a88f	95 01		sta $01,x	                sta 1,x
.a891	e6 28		inc $28		                inc tmp3
.a893	a5 28		lda $28		                lda tmp3
.a895	c9 10		cmp #$10	                cmp #16
.a897	d0 c4		bne $a85d	                bne _line_loop
.a899	20 6f 89	jsr $896f	                jsr xt_cr
.a89c	e8		inx		                inx
.a89d	e8		inx		                inx
.a89e	60		rts		z_editor_l:            rts
.a89f					xt_editor_line:
.a89f	20 ec d7	jsr $d7ec	                jsr underflow_1
.a8a2	a0 06		ldy #$06	                ldy #6          ; *64 is same as left shift 6 times.
.a8a4					_shift_tos_left:
.a8a4	16 00		asl $00,x	                asl 0,x         ; Shift TOS to the left
.a8a6	36 01		rol $01,x	                rol 1,x         ; ROL brings MSb from lower byte.
.a8a8	88		dey		                dey
.a8a9	d0 f9		bne $a8a4	                bne _shift_tos_left
.a8ab	20 b6 9e	jsr $9eb6	                jsr xt_scr
.a8ae	20 8c 8f	jsr $8f8c	                jsr xt_fetch
.a8b1	20 cd 83	jsr $83cd	                jsr xt_block
.a8b4	20 ef 99	jsr $99ef	                jsr xt_plus
.a8b7	60		rts		z_editor_line:  rts
.a8b8					xt_editor_o:
.a8b8	20 6f 89	jsr $896f	                jsr xt_cr
.a8bb	20 bb 8d	jsr $8dbb	                jsr xt_dup
.a8be	20 84 a3	jsr $a384	                jsr xt_two
.a8c1	20 17 a5	jsr $a517	                jsr xt_u_dot_r
.a8c4	20 fb a0	jsr $a0fb	                jsr xt_space
.a8c7	a9 2a		lda #$2a	                lda #42         ; ASCII for *
.a8c9	20 02 8e	jsr $8e02	                jsr emit_a
.a8cc	20 fb a0	jsr $a0fb	                jsr xt_space
.a8cf	20 9f a8	jsr $a89f	                jsr xt_editor_line
.a8d2	20 bb 8d	jsr $8dbb	                jsr xt_dup      ; Save a copy of the line address for later.
.a8d5	ca		dex		                dex
.a8d6	ca		dex		                dex
.a8d7	a9 40		lda #$40	                lda #64         ; chars/line
.a8d9	95 00		sta $00,x	                sta 0,x
.a8db	74 01		stz $01,x	                stz 1,x
.a8dd	20 38 81	jsr $8138	                jsr xt_accept
.a8e0	20 bb 8d	jsr $8dbb	                jsr xt_dup
.a8e3	20 7a 96	jsr $967a	                jsr xt_not_rote ; -rot
.a8e6	20 ef 99	jsr $99ef	                jsr xt_plus
.a8e9	ca		dex		                dex
.a8ea	ca		dex		                dex
.a8eb	a9 40		lda #$40	                lda #64         ; chars/line
.a8ed	95 00		sta $00,x	                sta 0,x
.a8ef	74 01		stz $01,x	                stz 1,x
.a8f1	20 63 9b	jsr $9b63	                jsr xt_rot
.a8f4	20 5c 95	jsr $955c	                jsr xt_minus
.a8f7	20 f6 8e	jsr $8ef6	                jsr xt_blank
.a8fa	20 41 a6	jsr $a641	                jsr xt_update
.a8fd	60		rts		z_editor_o:     rts

;******  Return to file: platform/../taliforth.asm


;******  Processing file: platform/../assembler.asm

.a8fe					assembler:
.a8fe					xt_asm_adc_h:
.a8fe	a9 69		lda #$69	                lda #$69
.a900	4c 59 ac	jmp $ac59	                jmp asm_common
.a903					z_asm_adc_h:
.a903					xt_asm_adc_x:
.a903	a9 7d		lda #$7d	                lda #$7D
.a905	4c 59 ac	jmp $ac59	                jmp asm_common
.a908					z_asm_adc_x:
.a908					xt_asm_adc_y:
.a908	a9 79		lda #$79	                lda #$79
.a90a	4c 59 ac	jmp $ac59	                jmp asm_common
.a90d					z_asm_adc_y:
.a90d					xt_asm_adc_z:
.a90d	a9 65		lda #$65	                lda #$65
.a90f	4c 59 ac	jmp $ac59	                jmp asm_common
.a912					z_asm_adc_z:
.a912					xt_asm_adc_zi:
.a912	a9 72		lda #$72	                lda #$72
.a914	4c 59 ac	jmp $ac59	                jmp asm_common
.a917					z_asm_adc_zi:
.a917					xt_asm_adc_ziy:
.a917	a9 71		lda #$71	                lda #$71
.a919	4c 59 ac	jmp $ac59	                jmp asm_common
.a91c					z_asm_adc_ziy:
.a91c					xt_asm_adc_zx:
.a91c	a9 75		lda #$75	                lda #$75
.a91e	4c 59 ac	jmp $ac59	                jmp asm_common
.a921					z_asm_adc_zx:
.a921					xt_asm_adc_zxi:
.a921	a9 61		lda #$61	                lda #$61
.a923	4c 59 ac	jmp $ac59	                jmp asm_common
.a926					z_asm_adc_zxi:
.a926					xt_asm_and:
.a926	a9 2d		lda #$2d	                lda #$2D
.a928	4c 59 ac	jmp $ac59	                jmp asm_common
.a92b					z_asm_and:
.a92b					xt_asm_and_h:
.a92b	a9 29		lda #$29	                lda #$29
.a92d	4c 59 ac	jmp $ac59	                jmp asm_common
.a930					z_asm_and_h:
.a930					xt_asm_and_x:
.a930	a9 3d		lda #$3d	                lda #$3D
.a932	4c 59 ac	jmp $ac59	                jmp asm_common
.a935					z_asm_and_x:
.a935					xt_asm_and_y:
.a935	a9 39		lda #$39	                lda #$39
.a937	4c 59 ac	jmp $ac59	                jmp asm_common
.a93a					z_asm_and_y:
.a93a					xt_asm_and_z:
.a93a	a9 25		lda #$25	                lda #$25
.a93c	4c 59 ac	jmp $ac59	                jmp asm_common
.a93f					z_asm_and_z:
.a93f					xt_asm_and_zi:
.a93f	a9 32		lda #$32	                lda #$32
.a941	4c 59 ac	jmp $ac59	                jmp asm_common
.a944					z_asm_and_zi:
.a944					xt_asm_and_ziy:
.a944	a9 31		lda #$31	                lda #$31
.a946	4c 59 ac	jmp $ac59	                jmp asm_common
.a949					z_asm_and_ziy:
.a949					xt_asm_and_zx:
.a949	a9 35		lda #$35	                lda #$35
.a94b	4c 59 ac	jmp $ac59	                jmp asm_common
.a94e					z_asm_and_zx:
.a94e					xt_asm_and_zxi:
.a94e	a9 21		lda #$21	                lda #$21
.a950	4c 59 ac	jmp $ac59	                jmp asm_common
.a953					z_asm_and_zxi:
.a953					xt_asm_asl:
.a953	a9 0e		lda #$0e	                lda #$0E
.a955	4c 59 ac	jmp $ac59	                jmp asm_common
.a958					z_asm_asl:
.a958					xt_asm_asl_a:
.a958	a9 0a		lda #$0a	                lda #$0A
.a95a	4c 59 ac	jmp $ac59	                jmp asm_common
.a95d					z_asm_asl_a:
.a95d					xt_asm_asl_x:
.a95d	a9 1e		lda #$1e	                lda #$1E
.a95f	4c 59 ac	jmp $ac59	                jmp asm_common
.a962					z_asm_asl_x:
.a962					xt_asm_asl_z:
.a962	a9 06		lda #$06	                lda #$06
.a964	4c 59 ac	jmp $ac59	                jmp asm_common
.a967					z_asm_asl_z:
.a967					xt_asm_asl_zx:
.a967	a9 16		lda #$16	                lda #$16
.a969	4c 59 ac	jmp $ac59	                jmp asm_common
.a96c					z_asm_asl_zx:
.a96c					xt_asm_bcc:
.a96c	a9 90		lda #$90	                lda #$90
.a96e	4c 59 ac	jmp $ac59	                jmp asm_common
.a971					z_asm_bcc:
.a971					xt_asm_bcs:
.a971	a9 b0		lda #$b0	                lda #$B0
.a973	a0 02		ldy #$02	                ldy #2
.a975	4c 59 ac	jmp $ac59	                jmp asm_common
.a978					z_asm_bcs:
.a978					xt_asm_beq:
.a978	a9 f0		lda #$f0	                lda #$F0
.a97a	4c 59 ac	jmp $ac59	                jmp asm_common
.a97d					z_asm_beq:
.a97d					xt_asm_bit:
.a97d	a9 2c		lda #$2c	                lda #$2C
.a97f	4c 59 ac	jmp $ac59	                jmp asm_common
.a982					z_asm_bit:
.a982					xt_asm_bit_h:
.a982	a9 89		lda #$89	                lda #$89
.a984	4c 59 ac	jmp $ac59	                jmp asm_common
.a987					z_asm_bit_h:
.a987					xt_asm_bit_x:
.a987	a9 3c		lda #$3c	                lda #$3C
.a989	4c 59 ac	jmp $ac59	                jmp asm_common
.a98c					z_asm_bit_x:
.a98c					xt_asm_bit_z:
.a98c	a9 24		lda #$24	                lda #$24
.a98e	4c 59 ac	jmp $ac59	                jmp asm_common
.a991					z_asm_bit_z:
.a991					xt_asm_bit_zx:
.a991	a9 34		lda #$34	                lda #$34
.a993	4c 59 ac	jmp $ac59	                jmp asm_common
.a996					z_asm_bit_zx:
.a996					xt_asm_bmi:
.a996	a9 30		lda #$30	                lda #$30
.a998	4c 59 ac	jmp $ac59	                jmp asm_common
.a99b					z_asm_bmi:
.a99b					xt_asm_bne:
.a99b	a9 d0		lda #$d0	                lda #$D0
.a99d	4c 59 ac	jmp $ac59	                jmp asm_common
.a9a0					z_asm_bne:
.a9a0					xt_asm_bpl:
.a9a0	a9 10		lda #$10	                lda #$10
.a9a2	4c 59 ac	jmp $ac59	                jmp asm_common
.a9a5					z_asm_bpl:
.a9a5					xt_asm_bra:
.a9a5	a9 80		lda #$80	                lda #$80
.a9a7	4c 59 ac	jmp $ac59	                jmp asm_common
.a9aa					z_asm_bra:
.a9aa					xt_asm_brk:
.a9aa	a9 00		lda #$00	                lda #$00
.a9ac	4c 59 ac	jmp $ac59	                jmp asm_common
.a9af					z_asm_brk:
.a9af					xt_asm_bvc:
.a9af	a9 50		lda #$50	                lda #$50
.a9b1	4c 59 ac	jmp $ac59	                jmp asm_common
.a9b4					z_asm_bvc:
.a9b4					xt_asm_bvs:
.a9b4	a9 70		lda #$70	                lda #$70
.a9b6	4c 59 ac	jmp $ac59	                jmp asm_common
.a9b9					z_asm_bvs:
.a9b9					xt_asm_clc:
.a9b9	a9 18		lda #$18	                lda #$18
.a9bb	4c 59 ac	jmp $ac59	                jmp asm_common
.a9be					z_asm_clc:
.a9be					xt_asm_cld:
.a9be	a9 d8		lda #$d8	                lda #$D8
.a9c0	4c 59 ac	jmp $ac59	                jmp asm_common
.a9c3					z_asm_cld:
.a9c3					xt_asm_cli:
.a9c3	a9 58		lda #$58	                lda #$58
.a9c5	4c 59 ac	jmp $ac59	                jmp asm_common
.a9c8					z_asm_cli:
.a9c8					xt_asm_clv:
.a9c8	a9 b8		lda #$b8	                lda #$B8
.a9ca	4c 59 ac	jmp $ac59	                jmp asm_common
.a9cd					z_asm_clv:
.a9cd					xt_asm_cmp:
.a9cd	a9 cd		lda #$cd	                lda #$CD
.a9cf	4c 59 ac	jmp $ac59	                jmp asm_common
.a9d2					z_asm_cmp:
.a9d2					xt_asm_cmp_h:
.a9d2	a9 c9		lda #$c9	                lda #$C9
.a9d4	4c 59 ac	jmp $ac59	                jmp asm_common
.a9d7					z_asm_cmp_h:
.a9d7					xt_asm_cmp_x:
.a9d7	a9 dd		lda #$dd	                lda #$DD
.a9d9	4c 59 ac	jmp $ac59	                jmp asm_common
.a9dc					z_asm_cmp_x:
.a9dc					xt_asm_cmp_y:
.a9dc	a9 d9		lda #$d9	                lda #$D9
.a9de	4c 59 ac	jmp $ac59	                jmp asm_common
.a9e1					z_asm_cmp_y:
.a9e1					xt_asm_cmp_z:
.a9e1	a9 c5		lda #$c5	                lda #$C5
.a9e3	4c 59 ac	jmp $ac59	                jmp asm_common
.a9e6					z_asm_cmp_z:
.a9e6					xt_asm_cmp_zi:
.a9e6	a9 d2		lda #$d2	                lda #$D2
.a9e8	4c 59 ac	jmp $ac59	                jmp asm_common
.a9eb					z_asm_cmp_zi:
.a9eb					xt_asm_cmp_ziy:
.a9eb	a9 d1		lda #$d1	                lda #$D1
.a9ed	4c 59 ac	jmp $ac59	                jmp asm_common
.a9f0					z_asm_cmp_ziy:
.a9f0					xt_asm_cmp_zx:
.a9f0	a9 d5		lda #$d5	                lda #$D5
.a9f2	4c 59 ac	jmp $ac59	                jmp asm_common
.a9f5					z_asm_cmp_zx:
.a9f5					xt_asm_cmp_zxi:
.a9f5	a9 c1		lda #$c1	                lda #$C1
.a9f7	4c 59 ac	jmp $ac59	                jmp asm_common
.a9fa					z_asm_cmp_zxi:
.a9fa					xt_asm_cpx:
.a9fa	a9 ec		lda #$ec	                lda #$EC
.a9fc	4c 59 ac	jmp $ac59	                jmp asm_common
.a9ff					z_asm_cpx:
.a9ff					xt_asm_cpx_h:
.a9ff	a9 e0		lda #$e0	                lda #$E0
.aa01	4c 59 ac	jmp $ac59	                jmp asm_common
.aa04					z_asm_cpx_h:
.aa04					xt_asm_cpx_z:
.aa04	a9 e4		lda #$e4	                lda #$E4
.aa06	4c 59 ac	jmp $ac59	                jmp asm_common
.aa09					z_asm_cpx_z:
.aa09					xt_asm_cpy:
.aa09	a9 cc		lda #$cc	                lda #$CC
.aa0b	a0 03		ldy #$03	                ldy #3
.aa0d	4c 59 ac	jmp $ac59	                jmp asm_common
.aa10					z_asm_cpy:
.aa10					xt_asm_cpy_h:
.aa10	a9 c0		lda #$c0	                lda #$C0
.aa12	4c 59 ac	jmp $ac59	                jmp asm_common
.aa15					z_asm_cpy_h:
.aa15					xt_asm_cpy_z:
.aa15	a9 c4		lda #$c4	                lda #$C4
.aa17	4c 59 ac	jmp $ac59	                jmp asm_common
.aa1a					z_asm_cpy_z:
.aa1a					xt_asm_dec:
.aa1a	a9 ce		lda #$ce	                lda #$CE
.aa1c	4c 59 ac	jmp $ac59	                jmp asm_common
.aa1f					z_asm_dec:
.aa1f					xt_asm_dec_a:
.aa1f	a9 3a		lda #$3a	                lda #$3A
.aa21	4c 59 ac	jmp $ac59	                jmp asm_common
.aa24					z_asm_dec_a:
.aa24					xt_asm_dec_x:
.aa24	a9 de		lda #$de	                lda #$DE
.aa26	4c 59 ac	jmp $ac59	                jmp asm_common
.aa29					z_asm_dec_x:
.aa29					xt_asm_dec_z:
.aa29	a9 c6		lda #$c6	                lda #$C6
.aa2b	4c 59 ac	jmp $ac59	                jmp asm_common
.aa2e					z_asm_dec_z:
.aa2e					xt_asm_dec_zx:
.aa2e	a9 d6		lda #$d6	                lda #$D6
.aa30	4c 59 ac	jmp $ac59	                jmp asm_common
.aa33					z_asm_dec_zx:
.aa33					xt_asm_dex:
.aa33	a9 ca		lda #$ca	                lda #$CA
.aa35	4c 59 ac	jmp $ac59	                jmp asm_common
.aa38					z_asm_dex:
.aa38					xt_asm_dey:
.aa38	a9 88		lda #$88	                lda #$88
.aa3a	4c 59 ac	jmp $ac59	                jmp asm_common
.aa3d					z_asm_dey:
.aa3d					xt_asm_eor:
.aa3d	a9 4d		lda #$4d	                lda #$4D
.aa3f	4c 59 ac	jmp $ac59	                jmp asm_common
.aa42					z_asm_eor:
.aa42					xt_asm_eor_h:
.aa42	a9 49		lda #$49	                lda #$49
.aa44	4c 59 ac	jmp $ac59	                jmp asm_common
.aa47					z_asm_eor_h:
.aa47					xt_asm_eor_x:
.aa47	a9 5d		lda #$5d	                lda #$5D
.aa49	4c 59 ac	jmp $ac59	                jmp asm_common
.aa4c					z_asm_eor_x:
.aa4c					xt_asm_eor_y:
.aa4c	a9 59		lda #$59	                lda #$59
.aa4e	4c 59 ac	jmp $ac59	                jmp asm_common
.aa51					z_asm_eor_y:
.aa51					xt_asm_eor_z:
.aa51	a9 45		lda #$45	                lda #$45
.aa53	4c 59 ac	jmp $ac59	                jmp asm_common
.aa56					z_asm_eor_z:
.aa56					xt_asm_eor_zi:
.aa56	a9 52		lda #$52	                lda #$52
.aa58	4c 59 ac	jmp $ac59	                jmp asm_common
.aa5b					z_asm_eor_zi:
.aa5b					xt_asm_eor_ziy:
.aa5b	a9 51		lda #$51	                lda #$51
.aa5d	4c 59 ac	jmp $ac59	                jmp asm_common
.aa60					z_asm_eor_ziy:
.aa60					xt_asm_eor_zx:
.aa60	a9 55		lda #$55	                lda #$55
.aa62	4c 59 ac	jmp $ac59	                jmp asm_common
.aa65					z_asm_eor_zx:
.aa65					xt_asm_eor_zxi:
.aa65	a9 41		lda #$41	                lda #$41
.aa67	4c 59 ac	jmp $ac59	                jmp asm_common
.aa6a					z_asm_eor_zxi:
.aa6a					xt_asm_inc:
.aa6a	a9 ee		lda #$ee	                lda #$EE
.aa6c	4c 59 ac	jmp $ac59	                jmp asm_common
.aa6f					z_asm_inc:
.aa6f					xt_asm_inc_a:
.aa6f	a9 1a		lda #$1a	                lda #$1A
.aa71	4c 59 ac	jmp $ac59	                jmp asm_common
.aa74					z_asm_inc_a:
.aa74					xt_asm_inc_x:
.aa74	a9 fe		lda #$fe	                lda #$FE
.aa76	4c 59 ac	jmp $ac59	                jmp asm_common
.aa79					z_asm_inc_x:
.aa79					xt_asm_inc_z:
.aa79	a9 e6		lda #$e6	                lda #$E6
.aa7b	4c 59 ac	jmp $ac59	                jmp asm_common
.aa7e					z_asm_inc_z:
.aa7e					xt_asm_inc_zx:
.aa7e	a9 f6		lda #$f6	                lda #$F6
.aa80	4c 59 ac	jmp $ac59	                jmp asm_common
.aa83					z_asm_inc_zx:
.aa83					xt_asm_inx:
.aa83	a9 e8		lda #$e8	                lda #$E8
.aa85	4c 59 ac	jmp $ac59	                jmp asm_common
.aa88					z_asm_inx:
.aa88					xt_asm_iny:
.aa88	a9 c8		lda #$c8	                lda #$C8
.aa8a	4c 59 ac	jmp $ac59	                jmp asm_common
.aa8d					z_asm_iny:
.aa8d					xt_asm_jmp:
.aa8d	a9 4c		lda #$4c	                lda #$4C
.aa8f	4c 59 ac	jmp $ac59	                jmp asm_common
.aa92					z_asm_jmp:
.aa92					xt_asm_jmp_i:
.aa92	a9 6c		lda #$6c	                lda #$6C
.aa94	4c 59 ac	jmp $ac59	                jmp asm_common
.aa97					z_asm_jmp_i:
.aa97					xt_asm_jmp_xi:
.aa97	a9 7c		lda #$7c	                lda #$7C
.aa99	4c 59 ac	jmp $ac59	                jmp asm_common
.aa9c					z_asm_jmp_xi:
.aa9c					xt_asm_jsr:
.aa9c	a9 20		lda #$20	                lda #$20
.aa9e	4c 59 ac	jmp $ac59	                jmp asm_common
.aaa1					z_asm_jsr:
.aaa1					xt_asm_lda:
.aaa1	a9 ad		lda #$ad	                lda #$AD
.aaa3	4c 59 ac	jmp $ac59	                jmp asm_common
.aaa6					z_asm_lda:
.aaa6					xt_asm_lda_h:
.aaa6	a9 a9		lda #$a9	                lda #$A9
.aaa8	4c 59 ac	jmp $ac59	                jmp asm_common
.aaab					z_asm_lda_h:
.aaab					xt_asm_lda_x:
.aaab	a9 bd		lda #$bd	                lda #$BD
.aaad	4c 59 ac	jmp $ac59	                jmp asm_common
.aab0					z_asm_lda_x:
.aab0					xt_asm_lda_y:
.aab0	a9 b9		lda #$b9	                lda #$B9
.aab2	4c 59 ac	jmp $ac59	                jmp asm_common
.aab5					z_asm_lda_y:
.aab5					xt_asm_lda_z:
.aab5	a9 a5		lda #$a5	                lda #$A5
.aab7	4c 59 ac	jmp $ac59	                jmp asm_common
.aaba					z_asm_lda_z:
.aaba					xt_asm_lda_zi:
.aaba	a9 b2		lda #$b2	                lda #$B2
.aabc	4c 59 ac	jmp $ac59	                jmp asm_common
.aabf					z_asm_lda_zi:
.aabf					xt_asm_lda_ziy:
.aabf	a9 b1		lda #$b1	                lda #$B1
.aac1	4c 59 ac	jmp $ac59	                jmp asm_common
.aac4					z_asm_lda_ziy:
.aac4					xt_asm_lda_zx:
.aac4	a9 b5		lda #$b5	                lda #$B5
.aac6	4c 59 ac	jmp $ac59	                jmp asm_common
.aac9					z_asm_lda_zx:
.aac9					xt_asm_lda_zxi:
.aac9	a9 a1		lda #$a1	                lda #$A1
.aacb	4c 59 ac	jmp $ac59	                jmp asm_common
.aace					z_asm_lda_zxi:
.aace					xt_asm_ldx:
.aace	a9 ae		lda #$ae	                lda #$AE
.aad0	4c 59 ac	jmp $ac59	                jmp asm_common
.aad3					z_asm_ldx:
.aad3					xt_asm_ldx_h:
.aad3	a9 a2		lda #$a2	                lda #$A2
.aad5	4c 59 ac	jmp $ac59	                jmp asm_common
.aad8					z_asm_ldx_h:
.aad8					xt_asm_ldx_y:
.aad8	a9 be		lda #$be	                lda #$BE
.aada	4c 59 ac	jmp $ac59	                jmp asm_common
.aadd					z_asm_ldx_y:
.aadd					xt_asm_ldx_z:
.aadd	a9 a6		lda #$a6	                lda #$A6
.aadf	4c 59 ac	jmp $ac59	                jmp asm_common
.aae2					z_asm_ldx_z:
.aae2					xt_asm_ldx_zy:
.aae2	a9 b6		lda #$b6	                lda #$B6
.aae4	4c 59 ac	jmp $ac59	                jmp asm_common
.aae7					z_asm_ldx_zy:
.aae7					xt_asm_ldy:
.aae7	a9 ac		lda #$ac	                lda #$AC
.aae9	4c 59 ac	jmp $ac59	                jmp asm_common
.aaec					z_asm_ldy:
.aaec					xt_asm_ldy_h:
.aaec	a9 a0		lda #$a0	                lda #$A0
.aaee	4c 59 ac	jmp $ac59	                jmp asm_common
.aaf1					z_asm_ldy_h:
.aaf1					xt_asm_ldy_x:
.aaf1	a9 bc		lda #$bc	                lda #$BC
.aaf3	4c 59 ac	jmp $ac59	                jmp asm_common
.aaf6					z_asm_ldy_x:
.aaf6					xt_asm_ldy_z:
.aaf6	a9 a4		lda #$a4	                lda #$A4
.aaf8	4c 59 ac	jmp $ac59	                jmp asm_common
.aafb					z_asm_ldy_z:
.aafb					xt_asm_ldy_zx:
.aafb	a9 b4		lda #$b4	                lda #$B4
.aafd	4c 59 ac	jmp $ac59	                jmp asm_common
.ab00					z_asm_ldy_zx:
.ab00					xt_asm_lsr:
.ab00	a9 4e		lda #$4e	                lda #$4E
.ab02	4c 59 ac	jmp $ac59	                jmp asm_common
.ab05					z_asm_lsr:
.ab05					xt_asm_lsr_a:
.ab05	a9 4a		lda #$4a	                lda #$4A
.ab07	4c 59 ac	jmp $ac59	                jmp asm_common
.ab0a					z_asm_lsr_a:
.ab0a					xt_asm_lsr_x:
.ab0a	a9 5e		lda #$5e	                lda #$5E
.ab0c	4c 59 ac	jmp $ac59	                jmp asm_common
.ab0f					z_asm_lsr_x:
.ab0f					xt_asm_lsr_z:
.ab0f	a9 46		lda #$46	                lda #$46
.ab11	4c 59 ac	jmp $ac59	                jmp asm_common
.ab14					z_asm_lsr_z:
.ab14					xt_asm_lsr_zx:
.ab14	a9 56		lda #$56	                lda #$56
.ab16	4c 59 ac	jmp $ac59	                jmp asm_common
.ab19					z_asm_lsr_zx:
.ab19					xt_asm_nop:
.ab19	a9 ea		lda #$ea	                lda #$EA
.ab1b	4c 59 ac	jmp $ac59	                jmp asm_common
.ab1e					z_asm_nop:
.ab1e					xt_asm_ora:
.ab1e	a9 0d		lda #$0d	                lda #$0D
.ab20	4c 59 ac	jmp $ac59	                jmp asm_common
.ab23					z_asm_ora:
.ab23					xt_asm_ora_h:
.ab23	a9 09		lda #$09	                lda #$09
.ab25	4c 59 ac	jmp $ac59	                jmp asm_common
.ab28					z_asm_ora_h:
.ab28					xt_asm_ora_x:
.ab28	a9 1d		lda #$1d	                lda #$1D
.ab2a	4c 59 ac	jmp $ac59	                jmp asm_common
.ab2d					z_asm_ora_x:
.ab2d					xt_asm_ora_y:
.ab2d	a9 19		lda #$19	                lda #$19
.ab2f	4c 59 ac	jmp $ac59	                jmp asm_common
.ab32					z_asm_ora_y:
.ab32					xt_asm_ora_z:
.ab32	a9 05		lda #$05	                lda #$05
.ab34	4c 59 ac	jmp $ac59	                jmp asm_common
.ab37					z_asm_ora_z:
.ab37					xt_asm_ora_zi:
.ab37	a9 12		lda #$12	                lda #$12
.ab39	a0 02		ldy #$02	                ldy #2
.ab3b	4c 59 ac	jmp $ac59	                jmp asm_common
.ab3e					z_asm_ora_zi:
.ab3e					xt_asm_ora_ziy:
.ab3e	a9 11		lda #$11	                lda #$11
.ab40	4c 59 ac	jmp $ac59	                jmp asm_common
.ab43					z_asm_ora_ziy:
.ab43					xt_asm_ora_zx:
.ab43	a9 15		lda #$15	                lda #$15
.ab45	4c 59 ac	jmp $ac59	                jmp asm_common
.ab48					z_asm_ora_zx:
.ab48					xt_asm_ora_zxi:
.ab48	a9 01		lda #$01	                lda #$01
.ab4a	4c 59 ac	jmp $ac59	                jmp asm_common
.ab4d					z_asm_ora_zxi:
.ab4d					xt_asm_pha:
.ab4d	a9 48		lda #$48	                lda #$48
.ab4f	4c 59 ac	jmp $ac59	                jmp asm_common
.ab52					z_asm_pha:
.ab52					xt_asm_php:
.ab52	a9 08		lda #$08	                lda #$08
.ab54	4c 59 ac	jmp $ac59	                jmp asm_common
.ab57					z_asm_php:
.ab57					xt_asm_phx:
.ab57	a9 da		lda #$da	                lda #$DA
.ab59	4c 59 ac	jmp $ac59	                jmp asm_common
.ab5c					z_asm_phx:
.ab5c					xt_asm_phy:
.ab5c	a9 5a		lda #$5a	                lda #$5A
.ab5e	4c 59 ac	jmp $ac59	                jmp asm_common
.ab61					z_asm_phy:
.ab61					xt_asm_pla:
.ab61	a9 68		lda #$68	                lda #$68
.ab63	4c 59 ac	jmp $ac59	                jmp asm_common
.ab66					z_asm_pla:
.ab66					xt_asm_plp:
.ab66	a9 28		lda #$28	                lda #$28
.ab68	4c 59 ac	jmp $ac59	                jmp asm_common
.ab6b					z_asm_plp:
.ab6b					xt_asm_plx:
.ab6b	a9 fa		lda #$fa	                lda #$FA
.ab6d	4c 59 ac	jmp $ac59	                jmp asm_common
.ab70					z_asm_plx:
.ab70					xt_asm_ply:
.ab70	a9 7a		lda #$7a	                lda #$7A
.ab72	4c 59 ac	jmp $ac59	                jmp asm_common
.ab75					z_asm_ply:
.ab75					xt_asm_rol:
.ab75	a9 2e		lda #$2e	                lda #$2E
.ab77	4c 59 ac	jmp $ac59	                jmp asm_common
.ab7a					z_asm_rol:
.ab7a					xt_asm_rol_a:
.ab7a	a9 2a		lda #$2a	                lda #$2A
.ab7c	4c 59 ac	jmp $ac59	                jmp asm_common
.ab7f					z_asm_rol_a:
.ab7f					xt_asm_rol_x:
.ab7f	a9 3e		lda #$3e	                lda #$3E
.ab81	4c 59 ac	jmp $ac59	                jmp asm_common
.ab84					z_asm_rol_x:
.ab84					xt_asm_rol_z:
.ab84	a9 26		lda #$26	                lda #$26
.ab86	4c 59 ac	jmp $ac59	                jmp asm_common
.ab89					z_asm_rol_z:
.ab89					xt_asm_rol_zx:
.ab89	a9 36		lda #$36	                lda #$36
.ab8b	4c 59 ac	jmp $ac59	                jmp asm_common
.ab8e					z_asm_rol_zx:
.ab8e					xt_asm_ror:
.ab8e	a9 6e		lda #$6e	                lda #$6E
.ab90	4c 59 ac	jmp $ac59	                jmp asm_common
.ab93					z_asm_ror:
.ab93					xt_asm_ror_a:
.ab93	a9 6a		lda #$6a	                lda #$6A
.ab95	4c 59 ac	jmp $ac59	                jmp asm_common
.ab98					z_asm_ror_a:
.ab98					xt_asm_ror_x:
.ab98	a9 7e		lda #$7e	                lda #$7E
.ab9a	4c 59 ac	jmp $ac59	                jmp asm_common
.ab9d					z_asm_ror_x:
.ab9d					xt_asm_ror_z:
.ab9d	a9 66		lda #$66	                lda #$66
.ab9f	4c 59 ac	jmp $ac59	                jmp asm_common
.aba2					z_asm_ror_z:
.aba2					xt_asm_ror_zx:
.aba2	a9 76		lda #$76	                lda #$76
.aba4	4c 59 ac	jmp $ac59	                jmp asm_common
.aba7					z_asm_ror_zx:
.aba7					xt_asm_rti:
.aba7	a9 40		lda #$40	                lda #$40
.aba9	4c 59 ac	jmp $ac59	                jmp asm_common
.abac					z_asm_rti:
.abac					xt_asm_rts:
.abac	a9 60		lda #$60	                lda #$60
.abae	4c 59 ac	jmp $ac59	                jmp asm_common
.abb1					z_asm_rts:
.abb1					xt_asm_sbc:
.abb1	a9 ed		lda #$ed	                lda #$ED
.abb3	4c 59 ac	jmp $ac59	                jmp asm_common
.abb6					z_asm_sbc:
.abb6					xt_asm_sbc_h:
.abb6	a9 e9		lda #$e9	                lda #$E9
.abb8	4c 59 ac	jmp $ac59	                jmp asm_common
.abbb					z_asm_sbc_h:
.abbb					xt_asm_sbc_x:
.abbb	a9 fd		lda #$fd	                lda #$FD
.abbd	4c 59 ac	jmp $ac59	                jmp asm_common
.abc0					z_asm_sbc_x:
.abc0					xt_asm_sbc_y:
.abc0	a9 f9		lda #$f9	                lda #$F9
.abc2	4c 59 ac	jmp $ac59	                jmp asm_common
.abc5					z_asm_sbc_y:
.abc5					xt_asm_sbc_z:
.abc5	a9 e5		lda #$e5	                lda #$E5
.abc7	4c 59 ac	jmp $ac59	                jmp asm_common
.abca					z_asm_sbc_z:
.abca					xt_asm_sbc_zi:
.abca	a9 f2		lda #$f2	                lda #$F2
.abcc	4c 59 ac	jmp $ac59	                jmp asm_common
.abcf					z_asm_sbc_zi:
.abcf					xt_asm_sbc_ziy:
.abcf	a9 f1		lda #$f1	                lda #$F1
.abd1	4c 59 ac	jmp $ac59	                jmp asm_common
.abd4					z_asm_sbc_ziy:
.abd4					xt_asm_sbc_zx:
.abd4	a9 f5		lda #$f5	                lda #$F5
.abd6	4c 59 ac	jmp $ac59	                jmp asm_common
.abd9					z_asm_sbc_zx:
.abd9					xt_asm_sbc_zxi:
.abd9	a9 e1		lda #$e1	                lda #$E1
.abdb	80 7c		bra $ac59	                bra asm_common  ; <-- limit for BRA instead of JMP
.abdd					z_asm_sbc_zxi:
.abdd					xt_asm_sec:
.abdd	a9 38		lda #$38	                lda #$38
.abdf	80 78		bra $ac59	                bra asm_common
.abe1					z_asm_sec:
.abe1					xt_asm_sed:
.abe1	a9 f8		lda #$f8	                lda #$F8
.abe3	80 74		bra $ac59	                bra asm_common
.abe5					z_asm_sed:
.abe5					xt_asm_sei:
.abe5	a9 78		lda #$78	                lda #$78
.abe7	80 70		bra $ac59	                bra asm_common
.abe9					z_asm_sei:
.abe9					xt_asm_sta:
.abe9	a9 8d		lda #$8d	                lda #$8D
.abeb	80 6c		bra $ac59	                bra asm_common
.abed					z_asm_sta:
.abed					xt_asm_sta_x:
.abed	a9 9d		lda #$9d	                lda #$9D
.abef	80 68		bra $ac59	                bra asm_common
.abf1					z_asm_sta_x:
.abf1					xt_asm_sta_y:
.abf1	a9 99		lda #$99	                lda #$99
.abf3	80 64		bra $ac59	                bra asm_common
.abf5					z_asm_sta_y:
.abf5					xt_asm_sta_z:
.abf5	a9 85		lda #$85	                lda #$85
.abf7	80 60		bra $ac59	                bra asm_common
.abf9					z_asm_sta_z:
.abf9					xt_asm_sta_zi:
.abf9	a9 92		lda #$92	                lda #$92
.abfb	80 5c		bra $ac59	                bra asm_common
.abfd					z_asm_sta_zi:
.abfd					xt_asm_sta_ziy:
.abfd	a9 91		lda #$91	                lda #$91
.abff	80 58		bra $ac59	                bra asm_common
.ac01					z_asm_sta_ziy:
.ac01					xt_asm_sta_zx:
.ac01	a9 95		lda #$95	                lda #$95
.ac03	80 54		bra $ac59	                bra asm_common
.ac05					z_asm_sta_zx:
.ac05					xt_asm_sta_zxi:
.ac05	a9 81		lda #$81	                lda #$81
.ac07	80 50		bra $ac59	                bra asm_common
.ac09					z_asm_sta_zxi:
.ac09					xt_asm_stx:
.ac09	a9 8e		lda #$8e	                lda #$8E
.ac0b	80 4c		bra $ac59	                bra asm_common
.ac0d					z_asm_stx:
.ac0d					xt_asm_stx_z:
.ac0d	a9 86		lda #$86	                lda #$86
.ac0f	80 48		bra $ac59	                bra asm_common
.ac11					z_asm_stx_z:
.ac11					xt_asm_stx_zy:
.ac11	a9 96		lda #$96	                lda #$96
.ac13	80 44		bra $ac59	                bra asm_common
.ac15					z_asm_stx_zy:
.ac15					xt_asm_sty:
.ac15	a9 8c		lda #$8c	                lda #$8C
.ac17	80 40		bra $ac59	                bra asm_common
.ac19					z_asm_sty:
.ac19					xt_asm_sty_z:
.ac19	a9 84		lda #$84	                lda #$84
.ac1b	80 3c		bra $ac59	                bra asm_common
.ac1d					z_asm_sty_z:
.ac1d					xt_asm_sty_zx:
.ac1d	a9 94		lda #$94	                lda #$94
.ac1f	80 38		bra $ac59	                bra asm_common
.ac21					z_asm_sty_zx:
.ac21					xt_asm_stz:
.ac21	a9 9c		lda #$9c	                lda #$9C
.ac23	80 34		bra $ac59	                bra asm_common
.ac25					z_asm_stz:
.ac25					xt_asm_stz_x:
.ac25	a9 9e		lda #$9e	                lda #$9E
.ac27	80 30		bra $ac59	                bra asm_common
.ac29					z_asm_stz_x:
.ac29					xt_asm_stz_z:
.ac29	a9 64		lda #$64	                lda #$64
.ac2b	80 2c		bra $ac59	                bra asm_common
.ac2d					z_asm_stz_z:
.ac2d					xt_asm_stz_zx:
.ac2d	a9 74		lda #$74	                lda #$74
.ac2f	80 28		bra $ac59	                bra asm_common
.ac31					z_asm_stz_zx:
.ac31					xt_asm_tax:
.ac31	a9 aa		lda #$aa	                lda #$AA
.ac33	80 24		bra $ac59	                bra asm_common
.ac35					z_asm_tax:
.ac35					xt_asm_tay:
.ac35	a9 a8		lda #$a8	                lda #$A8
.ac37	80 20		bra $ac59	                bra asm_common
.ac39					z_asm_tay:
.ac39					xt_asm_trb:
.ac39	a9 1c		lda #$1c	                lda #$1C
.ac3b	80 1c		bra $ac59	                bra asm_common
.ac3d					z_asm_trb:
.ac3d					xt_asm_trb_z:
.ac3d	a9 14		lda #$14	                lda #$14
.ac3f	80 18		bra $ac59	                bra asm_common
.ac41					z_asm_trb_z:
.ac41					xt_asm_tsb:
.ac41	a9 0c		lda #$0c	                lda #$0C
.ac43	80 14		bra $ac59	                bra asm_common
.ac45					z_asm_tsb:
.ac45					xt_asm_tsb_z:
.ac45	a9 04		lda #$04	                lda #$04
.ac47	80 10		bra $ac59	                bra asm_common
.ac49					z_asm_tsb_z:
.ac49					xt_asm_tsx:
.ac49	a9 ba		lda #$ba	                lda #$BA
.ac4b	80 0c		bra $ac59	                bra asm_common
.ac4d					z_asm_tsx:
.ac4d					xt_asm_txa:
.ac4d	a9 8a		lda #$8a	                lda #$8A
.ac4f	80 08		bra $ac59	                bra asm_common
.ac51					z_asm_txa:
.ac51					xt_asm_txs:
.ac51	a9 9a		lda #$9a	                lda #$9A
.ac53	80 04		bra $ac59	                bra asm_common
.ac55					z_asm_txs:
.ac55					xt_asm_tya:
.ac55	a9 98		lda #$98	                lda #$98
.ac57	80 00		bra $ac59	                bra asm_common
.ac59					z_asm_tya:
.ac59					asm_common:
.ac59	a8		tay		                tay
.ac5a	20 9f d6	jsr $d69f	                jsr cmpl_a
.ac5d	a9 b6		lda #$b6	                lda #<oc_index_table
.ac5f	85 26		sta $26		                sta tmp2
.ac61	a9 ae		lda #$ae	                lda #>oc_index_table
.ac63	85 27		sta $27		                sta tmp2+1
.ac65	98		tya		                tya             ; retrieve opcode
.ac66	0a		asl a		                asl             ; times two for offset
.ac67	90 02		bcc $ac6b	                bcc +
.ac69	e6 27		inc $27		                inc tmp2+1
.ac6b					+
.ac6b	a8		tay		                tay             ; use Y as the index
.ac6c	b1 26		lda ($26),y	                lda (tmp2),y    ; LSB
.ac6e	85 28		sta $28		                sta tmp3
.ac70	c8		iny		                iny
.ac71	b1 26		lda ($26),y	                lda (tmp2),y    ; MSB
.ac73	85 29		sta $29		                sta tmp3+1
.ac75	b2 28		lda ($28)	                lda (tmp3)      ; get "lengths byte"
.ac77	2a		rol a		                rol
.ac78	2a		rol a		                rol
.ac79	2a		rol a		                rol             ; Three times because we go through Carry
.ac7a	29 03		and #$03	                and #%00000011
.ac7c	a8		tay		                tay
.ac7d	88		dey		                dey
.ac7e	f0 12		beq $ac92	                beq _done
.ac80	20 ec d7	jsr $d7ec	                jsr underflow_1
.ac83	b5 00		lda $00,x	                lda 0,x
.ac85	20 9f d6	jsr $d69f	                jsr cmpl_a      ; does not use Y
.ac88	88		dey		                dey
.ac89	f0 05		beq $ac90	                beq _done_drop
.ac8b	b5 01		lda $01,x	                lda 1,x
.ac8d	20 9f d6	jsr $d69f	                jsr cmpl_a      ; Fall through to _done_drop
.ac90					_done_drop:
.ac90	e8		inx		                inx
.ac91	e8		inx		                inx             ; Fall through to _done
.ac92					_done:
.ac92	60		rts		                rts             ; Returns to original caller
.ac93					xt_asm_push_a:
.ac93	a0 00		ldy #$00	                ldy #0
.ac95					_loop:
.ac95	b9 a3 ac	lda $aca3,y	                lda asm_push_a_data,y
.ac98	c9 ff		cmp #$ff	                cmp #$FF
.ac9a	f0 06		beq $aca2	                beq _done
.ac9c	20 9f d6	jsr $d69f	                jsr cmpl_a      ; does not change Y
.ac9f	c8		iny		                iny
.aca0	80 f3		bra $ac95	                bra _loop
.aca2					_done:
.aca2					z_asm_push_a:
.aca2	60		rts		                rts
.aca3					asm_push_a_data:
>aca3	ca ca 95 00 74 01		        .byte $CA, $CA, $95, 00, $74, $01
>aca9	ff				        .byte $FF               ; terminator
.acaa					xt_asm_back_jump:
.acaa					z_asm_back_jump:
.acaa	60		rts		                rts
.acab					xt_asm_back_branch:
.acab	20 7e 91	jsr $917e	                jsr xt_here             ; ( addr-l addr-h )
.acae	20 5c 95	jsr $955c	                jsr xt_minus            ; ( offset )
.acb1	3a		dec a		                dea
.acb2	3a		dec a		                dea
.acb3					z_asm_back_branch:
.acb3	60		rts		                rts
.acb4					assembler_end:

;******  Return to file: platform/../taliforth.asm


;******  Processing file: platform/../disassembler.asm

.acb4					disassembler:
.acb4	20 6f 89	jsr $896f	                jsr xt_cr       ; ( addr u )
.acb7					_byte_loop:
.acb7	20 9f 98	jsr $989f	                jsr xt_over     ; ( addr u addr )
.acba	20 0b a5	jsr $a50b	                jsr xt_u_dot    ; ( addr u )
.acbd	20 fb a0	jsr $a0fb	                jsr xt_space
.acc0	a9 b6		lda #$b6	                lda #<oc_index_table
.acc2	85 26		sta $26		                sta tmp2
.acc4	a9 ae		lda #$ae	                lda #>oc_index_table
.acc6	85 27		sta $27		                sta tmp2+1
.acc8	a1 02		lda ($02,x)	                lda (2,x)       ; get opcode that addr points to
.acca	85 36		sta $36		                sta scratch     ; Save opcode
.accc	0a		asl a		                asl             ; multiply by two for offset
.accd	90 02		bcc $acd1	                bcc +
.accf	e6 27		inc $27		                inc tmp2+1      ; we're on second page
.acd1					+
.acd1	a8		tay		                tay             ; use Y as the index
.acd2	b1 26		lda ($26),y	                lda (tmp2),y    ; LSB
.acd4	85 28		sta $28		                sta tmp3
.acd6	48		pha		                pha
.acd7	c8		iny		                iny
.acd8	b1 26		lda ($26),y	                lda (tmp2),y    ; MSB
.acda	85 29		sta $29		                sta tmp3+1
.acdc	48		pha		                pha
.acdd	b2 28		lda ($28)	                lda (tmp3)
.acdf	a8		tay		                tay                     ; save copy of lengths byte
.ace0	10 3c		bpl $ad1e	                bpl _no_operand         ; bit 7 clear, single-byte instruction
.ace2	20 85 a7	jsr $a785	                jsr xt_zero             ; ( addr u 0 ) ZERO does not use Y
.ace5	f6 04		inc $04,x	                inc 4,x
.ace7	d0 02		bne $aceb	                bne +
.ace9	f6 05		inc $05,x	                inc 5,x                 ; ( addr+1 u 0 )
.aceb					+
.aceb	b5 02		lda $02,x	                lda 2,x
.aced	d0 02		bne $acf1	                bne +
.acef	d6 03		dec $03,x	                dec 3,x
.acf1					+
.acf1	d6 02		dec $02,x	                dec 2,x                 ; ( addr+1 u-1 0 )
.acf3	a1 04		lda ($04,x)	                lda (4,x)
.acf5	95 00		sta $00,x	                sta 0,x                 ; LSB of operand ( addr+1 u-1 LSB )
.acf7	85 37		sta $37		                sta scratch+1           ; Save a copy in the scratch buffer
.acf9	98		tya		                tya                     ; retrieve copy of lengths byte
.acfa	2a		rol a		                rol                     ; shift bit 6 to bit 7
.acfb	10 14		bpl $ad11	                bpl _print_operand
.acfd	f6 04		inc $04,x	                inc 4,x
.acff	d0 02		bne $ad03	                bne +
.ad01	f6 05		inc $05,x	                inc 5,x                 ; ( addr+2 u-1 LSB )
.ad03					+
.ad03	b5 02		lda $02,x	                lda 2,x
.ad05	d0 02		bne $ad09	                bne +
.ad07	d6 03		dec $03,x	                dec 3,x
.ad09					+
.ad09	d6 02		dec $02,x	                dec 2,x                 ; ( addr+2 u-2 LSB )
.ad0b	a1 04		lda ($04,x)	                lda (4,x)
.ad0d	95 01		sta $01,x	                sta 1,x                 ; MSB of operand ( addr+2 u-2 opr )
.ad0f	85 38		sta $38		                sta scratch+2           ; Save a copy in the scratch buffer
.ad11					_print_operand:
.ad11	ca		dex		                dex
.ad12	ca		dex		                dex
.ad13	a9 05		lda #$05	                lda #5
.ad15	95 00		sta $00,x	                sta 0,x
.ad17	74 01		stz $01,x	                stz 1,x                 ; ( addr+n u-n opr 5 )
.ad19	20 17 a5	jsr $a517	                jsr xt_u_dot_r          ; U.R ( addr+n u-n )
.ad1c	80 0b		bra $ad29	                bra _print_mnemonic
.ad1e					_no_operand:
.ad1e	ca		dex		                dex
.ad1f	ca		dex		                dex
.ad20	a9 05		lda #$05	                lda #5
.ad22	95 00		sta $00,x	                sta 0,x
.ad24	74 01		stz $01,x	                stz 1,x                 ; ( addr u 5 )
.ad26	20 01 a1	jsr $a101	                jsr xt_spaces           ; ( addr u )
.ad29					_print_mnemonic:
.ad29	20 fb a0	jsr $a0fb	                jsr xt_space
.ad2c	ca		dex		                dex
.ad2d	ca		dex		                dex                     ; ( addr u ? )
.ad2e	68		pla		                pla                     ; MSB
.ad2f	95 01		sta $01,x	                sta 1,x                 ; ( addr u MSB )
.ad31	68		pla		                pla                     ; LSB
.ad32	95 00		sta $00,x	                sta 0,x                 ; ( addr u addr-o )
.ad34	20 5b 89	jsr $895b	                jsr xt_count            ; ( addr u addr-o u-o )
.ad37	74 01		stz $01,x	                stz 1,x                 ; paranoid
.ad39	b5 00		lda $00,x	                lda 0,x
.ad3b	29 07		and #$07	                and #%00000111          ; ( addr u addr-o u-o )
.ad3d	95 00		sta $00,x	                sta 0,x
.ad3f	20 e0 a4	jsr $a4e0	                jsr xt_type             ; ( addr u )
.ad42	a5 36		lda $36		                lda scratch
.ad44	c9 20		cmp #$20	                cmp #$20
.ad46	d0 4a		bne $ad92	                bne _not_jsr
.ad48	ca		dex		                dex
.ad49	ca		dex		                dex
.ad4a	a9 05		lda #$05	                lda #5
.ad4c	95 00		sta $00,x	                sta 0,x
.ad4e	74 01		stz $01,x	                stz 1,x
.ad50	20 01 a1	jsr $a101	                jsr xt_spaces
.ad53	a0 0c		ldy #$0c	                ldy #(_end_handlers - _special_handlers - 4)
.ad55	b9 82 ad	lda $ad82,y	_check_handler: lda _special_handlers,y
.ad58	c5 37		cmp $37		                cmp scratch+1
.ad5a	d0 07		bne $ad63	                bne _next_handler
.ad5c	b9 83 ad	lda $ad83,y	                lda _special_handlers+1,y
.ad5f	c5 38		cmp $38		                cmp scratch+2
.ad61	f0 0c		beq $ad6f	                beq _run_handler
.ad63	88		dey		_next_handler:  dey
.ad64	88		dey		                dey
.ad65	88		dey		                dey
.ad66	88		dey		                dey
.ad67	10 ec		bpl $ad55	                bpl _check_handler
.ad69					_not_special:
.ad69	20 66 ae	jsr $ae66	                jsr disasm_jsr
.ad6c	4c bf ad	jmp $adbf	                jmp _printing_done
.ad6f					_run_handler:
.ad6f	b9 84 ad	lda $ad84,y	                lda _special_handlers+2,y
.ad72	85 39		sta $39		                sta scratch+3
.ad74	b9 85 ad	lda $ad85,y	                lda _special_handlers+3,y
.ad77	85 3a		sta $3a		                sta scratch+4
.ad79	20 7f ad	jsr $ad7f	                jsr _dispatch_handler
.ad7c	4c bf ad	jmp $adbf	                jmp _printing_done
.ad7f					_dispatch_handler:
.ad7f	6c 39 00	jmp ($0039)	                jmp (scratch+3)
.ad82					_special_handlers:
>ad82	a4 93 48 ae			    .word literal_runtime,      disasm_literal
>ad86	86 a0 05 ae			    .word sliteral_runtime,     disasm_sliteral
>ad8a	20 92 3c ae			    .word zero_branch_runtime,  disasm_0branch
>ad8e	e7 8d 41 ae			    .word branch_runtime,       disasm_branch
.ad92					_end_handlers:
.ad92					_not_jsr:
.ad92	c9 4c		cmp #$4c	                cmp #$4C
.ad94	d0 29		bne $adbf	                bne _printing_done
.ad96	a5 37		lda $37		                lda scratch+1   ; Copy the pointer.
.ad98	85 39		sta $39		                sta scratch+3
.ad9a	a5 38		lda $38		                lda scratch+2
.ad9c	85 3a		sta $3a		                sta scratch+4
.ad9e	b2 39		lda ($39)	                lda (scratch+3)
.ada0	c9 20		cmp #$20	                cmp #$20 ; check for JSR
.ada2	d0 1b		bne $adbf	                bne _printing_done
.ada4	e6 39		inc $39		                inc scratch+3
.ada6	d0 02		bne $adaa	                bne +
.ada8	e6 3a		inc $3a		                inc scratch+4
.adaa					+
.adaa	b2 39		lda ($39)	                lda (scratch+3)
.adac	c9 86		cmp #$86	                cmp #<sliteral_runtime
.adae	d0 0f		bne $adbf	                bne _printing_done
.adb0	e6 39		inc $39		                inc scratch+3
.adb2	d0 02		bne $adb6	                bne +
.adb4	e6 3a		inc $3a		                inc scratch+4
.adb6					+
.adb6	b2 39		lda ($39)	                lda (scratch+3)
.adb8	c9 a0		cmp #$a0	                cmp #>sliteral_runtime
.adba	d0 03		bne $adbf	                bne _printing_done
.adbc	20 db ad	jsr $addb	                jsr disasm_sliteral_jump
.adbf					_printing_done:
.adbf	20 6f 89	jsr $896f	                jsr xt_cr
.adc2	f6 02		inc $02,x	                inc 2,x
.adc4	d0 02		bne $adc8	                bne +
.adc6	f6 03		inc $03,x	                inc 3,x                 ; ( addr+1 u )
.adc8					+
.adc8	20 1d 98	jsr $981d	                jsr xt_one_minus        ; ( addr+1 u-1 )
.adcb	b5 00		lda $00,x	                lda 0,x                 ; All done?
.adcd	15 01		ora $01,x	                ora 1,x
.adcf	f0 07		beq $add8	                beq _done
.add1	b5 01		lda $01,x	                lda 1,x                 ; Catch mid-instruction ranges
.add3	30 03		bmi $add8	                bmi _done
.add5	4c b7 ac	jmp $acb7	                jmp _byte_loop          ; out of range for BRA
.add8					_done:
.add8	4c 8d a3	jmp $a38d	                jmp xt_two_drop         ; JSR/RTS
.addb					disasm_sliteral_jump:
.addb	20 8b a1	jsr $a18b	                jsr xt_swap
.adde	ca		dex		                dex
.addf	ca		dex		                dex
.ade0	a5 37		lda $37		                lda scratch+1
.ade2	95 00		sta $00,x	                sta 0,x
.ade4	a5 38		lda $38		                lda scratch+2
.ade6	95 01		sta $01,x	                sta 1,x
.ade8	20 8b a1	jsr $a18b	                jsr xt_swap
.adeb	20 5c 95	jsr $955c	                jsr xt_minus
.adee	20 1d 98	jsr $981d	                jsr xt_one_minus
.adf1	20 5c 95	jsr $955c	                jsr xt_minus
.adf4	ca		dex		                dex
.adf5	ca		dex		                dex
.adf6	a5 37		lda $37		                lda scratch+1
.adf8	95 00		sta $00,x	                sta 0,x
.adfa	a5 38		lda $38		                lda scratch+2
.adfc	95 01		sta $01,x	                sta 1,x
.adfe	20 1d 98	jsr $981d	                jsr xt_one_minus
.ae01	20 8b a1	jsr $a18b	                jsr xt_swap ; ( new_addr new_n )
.ae04	60		rts		                rts
.ae05					disasm_sliteral:
.ae05	a9 53		lda #$53	                lda #'S'
.ae07	20 02 8e	jsr $8e02	                jsr emit_a ; Print S before LITERAL so it becomes SLITERAL
.ae0a	a9 0c		lda #$0c	                lda #str_disasm_lit     ; "LITERAL "
.ae0c	20 28 d8	jsr $d828	                jsr print_string_no_lf
.ae0f	20 8b a1	jsr $a18b	                jsr xt_swap             ; switch to (u addr)
.ae12	20 29 98	jsr $9829	                jsr xt_one_plus
.ae15	20 bb 8d	jsr $8dbb	                jsr xt_dup
.ae18	20 8c 8f	jsr $8f8c	                jsr xt_fetch
.ae1b	20 0b a5	jsr $a50b	                jsr xt_u_dot            ; Print the address of the string
.ae1e	20 84 a3	jsr $a384	                jsr xt_two
.ae21	20 ef 99	jsr $99ef	                jsr xt_plus
.ae24	20 bb 8d	jsr $8dbb	                jsr xt_dup
.ae27	20 6e 9a	jsr $9a6e	                jsr xt_question         ; Print the length of the string
.ae2a	20 29 98	jsr $9829	                jsr xt_one_plus
.ae2d	20 8b a1	jsr $a18b	                jsr xt_swap            ; ( addr+4 u )
.ae30	ca		dex		                dex
.ae31	ca		dex		                dex
.ae32	a9 04		lda #$04	                lda #4
.ae34	95 00		sta $00,x	                sta 0,x
.ae36	74 01		stz $01,x	                stz 1,x
.ae38	20 5c 95	jsr $955c	                jsr xt_minus            ; ( addr+4 u-4 )
.ae3b	60		rts		                rts
.ae3c					disasm_0branch:
.ae3c	a9 30		lda #$30	                lda #'0'
.ae3e	20 02 8e	jsr $8e02	                jsr emit_a ; Print 0 before BRANCH so it becomes 0BRANCH
.ae41					disasm_branch:
.ae41	a9 0e		lda #$0e	                lda #str_disasm_bra
.ae43	20 28 d8	jsr $d828	                jsr print_string_no_lf ; "BRANCH "
.ae46	80 05		bra $ae4d	                bra disasm_print_literal
.ae48					disasm_literal:
.ae48	a9 0c		lda #$0c	                lda #str_disasm_lit
.ae4a	20 28 d8	jsr $d828	                jsr print_string_no_lf ; "LITERAL "
.ae4d					disasm_print_literal:
.ae4d	20 8b a1	jsr $a18b	                jsr xt_swap ; switch to (u addr)
.ae50	20 29 98	jsr $9829	                jsr xt_one_plus
.ae53	20 bb 8d	jsr $8dbb	                jsr xt_dup
.ae56	20 6e 9a	jsr $9a6e	                jsr xt_question ; Print the value at the address
.ae59	20 29 98	jsr $9829	                jsr xt_one_plus
.ae5c	20 8b a1	jsr $a18b	                jsr xt_swap ; (addr+2 u)
.ae5f	20 1d 98	jsr $981d	                jsr xt_one_minus
.ae62	20 1d 98	jsr $981d	                jsr xt_one_minus ; (addr+2 u-2)
.ae65	60		rts		                rts
.ae66					disasm_jsr:
.ae66	ca		dex		                dex
.ae67	ca		dex		                dex
.ae68	a5 37		lda $37		                lda scratch+1
.ae6a	95 00		sta $00,x	                sta 0,x
.ae6c	a5 38		lda $38		                lda scratch+2
.ae6e	95 01		sta $01,x	                sta 1,x
.ae70	20 84 92	jsr $9284	                jsr xt_int_to_name
.ae73	b5 00		lda $00,x	                lda 0,x
.ae75	15 01		ora $01,x	                ora 1,x
.ae77	f0 07		beq $ae80	                beq _disasm_no_nt
.ae79	20 0a 96	jsr $960a	                jsr xt_name_to_string
.ae7c	20 e0 a4	jsr $a4e0	                jsr xt_type
.ae7f	60		rts		                rts
.ae80					_disasm_no_nt:
.ae80	20 3a 8d	jsr $8d3a	                jsr xt_drop ; the 0 indicating no name token
.ae83	ca		dex		                dex
.ae84	ca		dex		                dex
.ae85	a5 37		lda $37		                lda scratch+1
.ae87	95 00		sta $00,x	                sta 0,x
.ae89	a5 38		lda $38		                lda scratch+2
.ae8b	95 01		sta $01,x	                sta 1,x
.ae8d	ca		dex		                dex
.ae8e	ca		dex		                dex
.ae8f	a9 ec		lda #$ec	                lda #<underflow_1
.ae91	95 00		sta $00,x	                sta 0,x
.ae93	a9 d7		lda #$d7	                lda #>underflow_1
.ae95	95 01		sta $01,x	                sta 1,x
.ae97	20 13 d7	jsr $d713	                jsr compare_16bit
.ae9a	f0 02		beq $ae9e	                beq _disasm_jsr_uflow_check_upper
.ae9c	b0 14		bcs $aeb2	                bcs _disasm_jsr_unknown
.ae9e					_disasm_jsr_uflow_check_upper:
.ae9e	a9 fb		lda #$fb	                lda #<underflow_4
.aea0	95 00		sta $00,x	                sta 0,x
.aea2	a9 d7		lda #$d7	                lda #>underflow_4
.aea4	95 01		sta $01,x	                sta 1,x
.aea6	20 13 d7	jsr $d713	                jsr compare_16bit
.aea9	f0 02		beq $aead	                beq _disasm_jsr_soc
.aeab	90 05		bcc $aeb2	                bcc _disasm_jsr_unknown
.aead					_disasm_jsr_soc:
.aead	a9 0d		lda #$0d	                lda #str_disasm_sdc
.aeaf	20 28 d8	jsr $d828	                jsr print_string_no_lf  ; "STACK DEPTH CHECK"
.aeb2					_disasm_jsr_unknown:
.aeb2	20 8d a3	jsr $a38d	                jsr xt_two_drop
.aeb5	60		rts		                rts
.aeb6					oc_index_table:
>aeb6	b6 b0 ba b0 4e b5 4e b5		        .word oc00, oc01, oc__, oc__, oc04, oc05, oc06, oc__
>aebe	c2 b0 c8 b0 ce b0 4e b5
>aec6	d4 b0 d8 b0 de b0 4e b5		        .word oc08, oc09, oc0a, oc__, oc0c, oc0d, oc0e, oc0f
>aece	e4 b0 e8 b0 ec b0 f0 b0
>aed6	f5 b0 f9 b0 01 b1 4e b5		        .word oc10, oc11, oc12, oc__, oc14, oc15, oc16, oc17
>aede	08 b1 0e b1 15 b1 1c b1
>aee6	23 b1 27 b1 2d b1 4e b5		        .word oc18, oc19, oc1a, oc__, oc1c, oc1d, oc__, oc1f
>aeee	33 b1 37 b1 4e b5 3d b1
>aef6	43 b1 47 b1 4e b5 4e b5		        .word oc20, oc21, oc__, oc__, oc24, oc25, oc26, oc27
>aefe	4f b1 55 b1 5b b1 61 b1
>af06	68 b1 6c b1 72 b1 4e b5		        .word oc28, oc29, oc2a, oc__, oc2c, oc2d, oc2e, oc2f
>af0e	78 b1 7c b1 81 b1 85 b1
>af16	8a b1 8e b1 96 b1 4e b5		        .word oc30, oc31, oc32, oc__, oc34, oc35, oc36, oc37
>af1e	9d b1 a5 b1 ac b1 b3 b1
>af26	ba b1 be b1 c4 b1 4e b5		        .word oc38, oc39, oc3a, oc__, oc3c, oc3d, oc3e, oc0f
>af2e	ca b1 d0 b1 d6 b1 f0 b0
>af36	e1 b1 e5 b1 4e b5 4e b5		        .word oc40, oc41, oc__, oc__, oc__, oc45, oc46, oc47
>af3e	4e b5 ed b1 f3 b1 f9 b1
>af46	00 b2 04 b2 0a b2 4e b5		        .word oc48, oc49, oc4a, oc__, oc4c, oc4d, oc4e, oc4f
>af4e	10 b2 14 b2 18 b2 1c b2
>af56	21 b2 25 b2 2d b2 4e b5		        .word oc50, oc51, oc52, oc__, oc__, oc55, oc56, oc57
>af5e	4e b5 34 b2 3b b2 42 b2
>af66	49 b2 4d b2 53 b2 4e b5		        .word oc58, oc59, oc5a, oc__, oc__, oc__, oc5e, oc5f
>af6e	4e b5 4e b5 5d b2 63 b2
>af76	68 b2 6c b2 4e b5 4e b5		        .word oc60, oc61, oc__, oc__, oc64, oc65, oc66, oc67
>af7e	74 b2 7a b2 80 b2 86 b2
>af86	8d b2 91 b2 97 b2 4e b5		        .word oc68, oc69, oc6a, oc__, oc6c, oc6d, oc6e, oc6f
>af8e	9d b2 a3 b2 a7 b2 ab b2
>af96	b0 b2 b4 b2 bc b2 4e b5		        .word oc70, oc71, oc72, oc__, oc74, oc75, oc76, oc77
>af9e	c3 b2 ca b2 d1 b2 d8 b2
>afa6	df b2 e3 b2 e9 b2 4e b5		        .word oc78, oc79, oc7a, oc__, oc7c, oc7d, oc7e, oc7f
>afae	ed b2 f4 b2 fa b2 00 b3
>afb6	05 b3 09 b3 4e b5 4e b5		        .word oc80, oc81, oc__, oc__, oc84, oc85, oc86, oc__
>afbe	11 b3 17 b3 1d b3 4e b5
>afc6	23 b3 27 b3 2d b3 4e b5		        .word oc88, oc89, oc8a, oc__, oc8c, oc8d, oc8e, oc8f
>afce	31 b3 35 b3 39 b3 3d b3
>afd6	42 b3 46 b3 4e b3 4e b5		        .word oc90, oc91, oc92, oc__, oc94, oc95, oc96, oc97
>afde	55 b3 5c b3 63 b3 6a b3
>afe6	71 b3 75 b3 7b b3 4e b5		        .word oc98, oc99, oc9a, oc__, oc9c, oc9d, oc9e, oc9f
>afee	7f b3 83 b3 89 b3 8f b3
>aff6	94 b3 9a b3 a2 b3 4e b5		        .word oca0, oca1, oca2, oc__, oca4, oca5, oca6, oca7
>affe	a8 b3 ae b3 b4 b3 ba b3
>b006	c1 b3 c5 b3 cb b3 4e b5		        .word oca8, oca9, ocaa, oc__, ocac, ocad, ocae, ocaf
>b00e	cf b3 d3 b3 d7 b3 db b3
>b016	e0 b3 e4 b3 ec b3 4e b5		        .word ocb0, ocb1, ocb2, oc__, ocb4, ocb5, ocb6, ocb7
>b01e	f3 b3 fa b3 01 b4 08 b4
>b026	0f b4 13 b4 19 b4 4e b5		        .word ocb8, ocb9, ocba, oc__, ocbc, ocbd, ocbe, ocbf
>b02e	1d b4 23 b4 29 b4 2f b4
>b036	34 b4 3a b4 4e b5 4e b5		        .word occ0, occ1, oc__, oc__, occ4, occ5, occ6, occ7
>b03e	42 b4 48 b4 4e b4 54 b4
>b046	5b b4 5f b4 65 b4 4e b5		        .word occ8, occ9, occa, oc__, occc, occd, occe, occf
>b04e	69 b4 6d b4 71 b4 75 b4
>b056	7a b4 7e b4 86 b4 4e b5		        .word ocd0, ocd1, ocd2, oc__, oc__, ocd5, ocd6, ocd7
>b05e	4e b5 8d b4 94 b4 9b b4
>b066	a2 b4 a6 b4 ac b4 4e b5		        .word ocd8, ocd9, ocda, oc__, oc__, ocdd, ocde, ocdf
>b06e	4e b5 b0 b4 b6 b4 bc b4
>b076	c1 b4 c7 b4 4e b5 4e b5		        .word oce0, oce1, oc__, oc__, oce4, oce5, oce6, oce7
>b07e	cf b4 d5 b4 db b4 e1 b4
>b086	e8 b4 ec b4 f2 b4 4e b5		        .word oce8, oce9, ocea, oc__, ocec, oced, ocee, ocef
>b08e	f6 b4 fa b4 fe b4 02 b5
>b096	07 b5 0b b5 13 b5 4e b5		        .word ocf0, ocf1, ocf2, oc__, oc__, ocf5, ocf6, ocf7
>b09e	4e b5 1a b5 21 b5 28 b5
>b0a6	2f b5 33 b5 39 b5 4e b5		        .word ocf8, ocf9, ocfa, oc__, oc__, ocfd, ocfe, ocff
>b0ae	4e b5 3d b5 43 b5 49 b5
.b0b6					oc_table:
>b0b6	83 62 72 6b				oc00:	.text 2*64+3, "brk"              ; enforce the signature byte
>b0ba	87 6f 72 61 2e 7a 78 69			oc01:	.text 2*64+7, "ora.zxi"
>b0c2	85 74 73 62 2e 7a		    oc04:   .text 2*64+5, "tsb.z"
>b0c8	85 6f 72 61 2e 7a			oc05:	.text 2*64+5, "ora.z"
>b0ce	85 61 73 6c 2e 7a			oc06:	.text 2*64+5, "asl.z"
>b0d4	43 70 68 70				oc08:	.text 1*64+3, "php"
>b0d8	85 6f 72 61 2e 23			oc09:	.text 2*64+5, "ora.#"
>b0de	45 61 73 6c 2e 61			oc0a:	.text 1*64+5, "asl.a"
>b0e4	c3 74 73 62				oc0c:	.text 3*64+3, "tsb"
>b0e8	c3 6f 72 61				oc0d:	.text 3*64+3, "ora"
>b0ec	c3 61 73 6c				oc0e:	.text 3*64+3, "asl"
>b0f0	c4 62 62 72 30				oc0f:	.text 3*64+4, "bbr0"
>b0f5	83 62 70 6c				oc10:	.text 2*64+3, "bpl"
>b0f9	87 6f 72 61 2e 7a 69 79			oc11:	.text 2*64+7, "ora.ziy"
>b101	86 6f 72 61 2e 7a 69			oc12:	.text 2*64+6, "ora.zi"
>b108	85 74 72 62 2e 7a			oc14:	.text 2*64+5, "trb.z"
>b10e	86 6f 72 61 2e 7a 78			oc15:	.text 2*64+6, "ora.zx"
>b115	86 61 73 6c 2e 7a 78			oc16:	.text 2*64+6, "asl.zx"
>b11c	86 72 6d 62 31 2e 7a			oc17:	.text 2*64+6, "rmb1.z"
>b123	43 63 6c 63				oc18:	.text 1*64+3, "clc"
>b127	c5 6f 72 61 2e 79			oc19:	.text 3*64+5, "ora.y"
>b12d	45 69 6e 63 2e 61			oc1a:	.text 1*64+5, "inc.a"
>b133	c3 74 72 62				oc1c:	.text 3*64+3, "trb"
>b137	c5 6f 72 61 2e 78			oc1d:	.text 3*64+5, "ora.x"
>b13d	c5 61 73 6c 2e 78			oc1f:	.text 3*64+5, "asl.x"
>b143	c3 6a 73 72				oc20:	.text 3*64+3, "jsr"
>b147	87 61 6e 64 2e 7a 78 69			oc21:	.text 2*64+7, "and.zxi"
>b14f	85 62 69 74 2e 7a			oc24:	.text 2*64+5, "bit.z"
>b155	85 61 6e 64 2e 7a			oc25:	.text 2*64+5, "and.z"
>b15b	85 72 6f 6c 2e 7a			oc26:	.text 2*64+5, "rol.z"
>b161	86 72 6d 62 32 2e 7a			oc27:	.text 2*64+6, "rmb2.z"
>b168	43 70 6c 70				oc28:	.text 1*64+3, "plp"
>b16c	85 61 6e 64 2e 23			oc29:	.text 2*64+5, "and.#"
>b172	45 72 6f 6c 2e 61			oc2a:	.text 1*64+5, "rol.a"
>b178	c3 62 69 74				oc2c:	.text 3*64+3, "bit"
>b17c	c4 61 6e 64 2e				oc2d:	.text 3*64+4, "and."
>b181	c3 72 6f 6c				oc2e:	.text 3*64+3, "rol"
>b185	c4 62 62 72 32				oc2f:	.text 3*64+4, "bbr2"
>b18a	83 62 6d 69				oc30:	.text 2*64+3, "bmi"
>b18e	87 61 6e 64 2e 7a 69 79			oc31:	.text 2*64+7, "and.ziy"
>b196	86 61 6e 64 2e 7a 69			oc32:	.text 2*64+6, "and.zi"
>b19d	87 62 69 74 2e 7a 78 69			oc34:	.text 2*64+7, "bit.zxi"
>b1a5	86 61 6e 64 2e 7a 78			oc35:	.text 2*64+6, "and.zx"
>b1ac	86 72 6f 6c 2e 7a 78			oc36:	.text 2*64+6, "rol.zx"
>b1b3	86 72 6d 62 33 2e 7a			oc37:	.text 2*64+6, "rmb3.z"
>b1ba	43 73 65 63				oc38:	.text 1*64+3, "sec"
>b1be	c5 61 6e 64 2e 79			oc39:	.text 3*64+5, "and.y"
>b1c4	45 64 65 63 2e 61			oc3a:	.text 1*64+5, "dec.a"
>b1ca	c5 62 69 74 2e 78			oc3c:	.text 3*64+5, "bit.x"
>b1d0	c5 61 6e 64 2e 78			oc3d:	.text 3*64+5, "and.x"
>b1d6	c5 72 6f 6c 2e 78			oc3e:	.text 3*64+5, "rol.x"
>b1dc	c4 62 62 72 33				oc3f:	.text 3*64+4, "bbr3"
>b1e1	43 72 74 69				oc40:	.text 1*64+3, "rti"
>b1e5	87 65 6f 72 2e 7a 78 69			oc41:	.text 2*64+7, "eor.zxi"
>b1ed	85 65 6f 72 2e 7a			oc45:	.text 2*64+5, "eor.z"
>b1f3	85 6c 73 72 2e 7a			oc46:	.text 2*64+5, "lsr.z"
>b1f9	86 72 62 6d 34 2e 7a			oc47:	.text 2*64+6, "rbm4.z"
>b200	43 70 68 61				oc48:	.text 1*64+3, "pha"
>b204	85 65 6f 72 2e 23			oc49:	.text 2*64+5, "eor.#"
>b20a	45 6c 73 72 2e 61			oc4a:	.text 1*64+5, "lsr.a"
>b210	c3 6a 6d 70				oc4c:	.text 3*64+3, "jmp"
>b214	c3 65 6f 72				oc4d:	.text 3*64+3, "eor"
>b218	c3 6c 73 72				oc4e:	.text 3*64+3, "lsr"
>b21c	c4 62 62 72 34				oc4f:	.text 3*64+4, "bbr4"
>b221	83 62 76 63				oc50:	.text 2*64+3, "bvc"
>b225	87 65 6f 72 2e 7a 69 79			oc51:	.text 2*64+7, "eor.ziy"
>b22d	86 65 6f 72 2e 7a 69			oc52:	.text 2*64+6, "eor.zi"
>b234	86 65 6f 72 2e 7a 78			oc55:	.text 2*64+6, "eor.zx"
>b23b	86 6c 73 72 2e 7a 78			oc56:	.text 2*64+6, "lsr.zx"
>b242	86 72 62 6d 35 2e 7a			oc57:	.text 2*64+6, "rbm5.z"
>b249	43 63 6c 69				oc58:	.text 1*64+3, "cli"
>b24d	c5 65 6f 72 2e 79			oc59:	.text 3*64+5, "eor.y"
>b253	43 70 68 79				oc5a:	.text 1*64+3, "phy"
>b257	c5 65 6f 72 2e 78			oc5d:	.text 3*64+5, "eor.x"
>b25d	c5 6c 73 72 2e 78			oc5e:	.text 3*64+5, "lsr.x"
>b263	c4 62 62 72 35				oc5f:	.text 3*64+4, "bbr5"
>b268	43 72 74 73				oc60:	.text 1*64+3, "rts"
>b26c	87 61 64 63 2e 7a 78 69			oc61:	.text 2*64+7, "adc.zxi"
>b274	85 73 74 7a 2e 7a			oc64:	.text 2*64+5, "stz.z"
>b27a	85 61 64 63 2e 7a			oc65:	.text 2*64+5, "adc.z"
>b280	85 72 6f 72 2e 7a			oc66:	.text 2*64+5, "ror.z"
>b286	86 72 6d 62 36 2e 7a			oc67:	.text 2*64+6, "rmb6.z"
>b28d	43 70 6c 61				oc68:	.text 1*64+3, "pla"
>b291	85 61 64 63 2e 23			oc69:	.text 2*64+5, "adc.#"
>b297	45 72 6f 72 2e 61			oc6a:	.text 1*64+5, "ror.a"
>b29d	c5 6a 6d 70 2e 69			oc6c:	.text 3*64+5, "jmp.i"
>b2a3	c3 61 64 63				oc6d:	.text 3*64+3, "adc"
>b2a7	c3 72 6f 72				oc6e:	.text 3*64+3, "ror"
>b2ab	c4 62 62 72 36				oc6f:	.text 3*64+4, "bbr6"
>b2b0	83 62 76 73				oc70:	.text 2*64+3, "bvs"
>b2b4	87 61 64 63 2e 7a 69 79			oc71:	.text 2*64+7, "adc.ziy"
>b2bc	86 61 64 63 2e 7a 69			oc72:	.text 2*64+6, "adc.zi"
>b2c3	86 73 74 7a 2e 7a 78			oc74:	.text 2*64+6, "stz.zx"
>b2ca	86 61 64 63 2e 7a 78			oc75:	.text 2*64+6, "adc.zx"
>b2d1	86 72 6f 72 2e 7a 78			oc76:	.text 2*64+6, "ror.zx"
>b2d8	86 72 6d 62 37 2e 7a			oc77:	.text 2*64+6, "rmb7.z"
>b2df	43 73 65 69				oc78:	.text 1*64+3, "sei"
>b2e3	c5 61 64 63 2e 79			oc79:	.text 3*64+5, "adc.y"
>b2e9	43 70 6c 79				oc7a:	.text 1*64+3, "ply"
>b2ed	c6 6a 6d 70 2e 78 69			oc7c:	.text 3*64+6, "jmp.xi"
>b2f4	c5 61 64 63 2e 78			oc7d:	.text 3*64+5, "adc.x"
>b2fa	c5 72 6f 72 2e 78			oc7e:	.text 3*64+5, "ror.x"
>b300	c4 62 62 72 37				oc7f:	.text 3*64+4, "bbr7"
>b305	83 62 72 61				oc80:	.text 2*64+3, "bra"
>b309	87 73 74 61 2e 7a 78 69			oc81:	.text 2*64+7, "sta.zxi"
>b311	85 73 74 79 2e 7a			oc84:	.text 2*64+5, "sty.z"
>b317	85 73 74 61 2e 7a			oc85:	.text 2*64+5, "sta.z"
>b31d	85 73 74 78 2e 7a			oc86:	.text 2*64+5, "stx.z"
>b323	43 64 65 79				oc88:	.text 1*64+3, "dey"
>b327	85 62 69 74 2e 23			oc89:	.text 2*64+5, "bit.#"
>b32d	43 74 78 61				oc8a:	.text 1*64+3, "txa"
>b331	c3 73 74 79				oc8c:	.text 3*64+3, "sty"
>b335	c3 73 74 61				oc8d:	.text 3*64+3, "sta"
>b339	c3 73 74 78				oc8e:	.text 3*64+3, "stx"
>b33d	c4 62 62 73 30				oc8f:	.text 3*64+4, "bbs0"
>b342	83 62 63 63				oc90:	.text 2*64+3, "bcc"
>b346	87 73 74 61 2e 7a 69 79			oc91:	.text 2*64+7, "sta.ziy"
>b34e	86 73 74 61 2e 7a 69			oc92:	.text 2*64+6, "sta.zi"
>b355	86 73 74 79 2e 7a 78			oc94:	.text 2*64+6, "sty.zx"
>b35c	86 73 74 61 2e 7a 78			oc95:	.text 2*64+6, "sta.zx"
>b363	86 73 74 78 2e 7a 79			oc96:	.text 2*64+6, "stx.zy"
>b36a	86 73 6d 62 31 2e 7a			oc97:	.text 2*64+6, "smb1.z"
>b371	43 74 79 61				oc98:	.text 1*64+3, "tya"
>b375	c5 73 74 61 2e 79			oc99:	.text 3*64+5, "sta.y"
>b37b	43 74 78 73				oc9a:	.text 1*64+3, "txs"
>b37f	c3 73 74 7a				oc9c:	.text 3*64+3, "stz"
>b383	c5 73 74 61 2e 78			oc9d:	.text 3*64+5, "sta.x"
>b389	c5 73 74 7a 2e 78			oc9e:	.text 3*64+5, "stz.x"
>b38f	c4 62 62 73 31				oc9f:	.text 3*64+4, "bbs1"
>b394	85 6c 64 79 2e 23			oca0:	.text 2*64+5, "ldy.#"
>b39a	87 6c 64 61 2e 7a 78 69			oca1:	.text 2*64+7, "lda.zxi"
>b3a2	85 6c 64 78 2e 23			oca2:	.text 2*64+5, "ldx.#"
>b3a8	85 6c 64 79 2e 7a			oca4:	.text 2*64+5, "ldy.z"
>b3ae	85 6c 64 61 2e 7a			oca5:	.text 2*64+5, "lda.z"
>b3b4	85 6c 64 78 2e 7a			oca6:	.text 2*64+5, "ldx.z"
>b3ba	86 73 6d 62 32 2e 7a			oca7:	.text 2*64+6, "smb2.z"
>b3c1	43 74 61 79				oca8:	.text 1*64+3, "tay"
>b3c5	85 6c 64 61 2e 23			oca9:	.text 2*64+5, "lda.#"
>b3cb	43 74 61 78				ocaa:	.text 1*64+3, "tax"
>b3cf	c3 6c 64 79				ocac:	.text 3*64+3, "ldy"
>b3d3	c3 6c 64 61				ocad:	.text 3*64+3, "lda"
>b3d7	c3 6c 64 78				ocae:	.text 3*64+3, "ldx"
>b3db	c4 62 62 73 32				ocaf:	.text 3*64+4, "bbs2"
>b3e0	83 62 63 73				ocb0:	.text 2*64+3, "bcs"
>b3e4	87 6c 64 61 2e 7a 69 79			ocb1:	.text 2*64+7, "lda.ziy"
>b3ec	86 6c 64 61 2e 7a 69			ocb2:	.text 2*64+6, "lda.zi"
>b3f3	86 6c 64 79 2e 7a 78			ocb4:	.text 2*64+6, "ldy.zx"
>b3fa	86 6c 64 61 2e 7a 78			ocb5:	.text 2*64+6, "lda.zx"
>b401	86 6c 64 78 2e 7a 79			ocb6:	.text 2*64+6, "ldx.zy"
>b408	86 73 6d 62 33 2e 7a			ocb7:	.text 2*64+6, "smb3.z"
>b40f	43 63 6c 76				ocb8:	.text 1*64+3, "clv"
>b413	c5 6c 64 61 2e 79			ocb9:	.text 3*64+5, "lda.y"
>b419	43 74 73 78				ocba:	.text 1*64+3, "tsx"
>b41d	c5 6c 64 79 2e 78			ocbc:	.text 3*64+5, "ldy.x"
>b423	c5 6c 64 61 2e 78			ocbd:	.text 3*64+5, "lda.x"
>b429	c5 6c 64 78 2e 79			ocbe:	.text 3*64+5, "ldx.y"
>b42f	c4 62 62 73 34				ocbf:	.text 3*64+4, "bbs4"
>b434	85 63 70 79 2e 23			occ0:	.text 2*64+5, "cpy.#"
>b43a	87 63 6d 70 2e 7a 78 69			occ1:	.text 2*64+7, "cmp.zxi"
>b442	85 63 70 79 2e 7a			occ4:	.text 2*64+5, "cpy.z"
>b448	85 63 6d 70 2e 7a			occ5:	.text 2*64+5, "cmp.z"
>b44e	85 64 65 63 2e 7a			occ6:	.text 2*64+5, "dec.z"
>b454	86 73 6d 62 34 2e 7a			occ7:	.text 2*64+6, "smb4.z"
>b45b	43 69 6e 79				occ8:	.text 1*64+3, "iny"
>b45f	85 63 6d 70 2e 23			occ9:	.text 2*64+5, "cmp.#"
>b465	43 64 65 78				occa:	.text 1*64+3, "dex"
>b469	c3 63 70 79				occc:	.text 3*64+3, "cpy"
>b46d	c3 63 6d 70				occd:	.text 3*64+3, "cmp"
>b471	c3 64 65 63				occe:	.text 3*64+3, "dec"
>b475	c4 62 62 73 34				occf:	.text 3*64+4, "bbs4"
>b47a	83 62 6e 65				ocd0:	.text 2*64+3, "bne"
>b47e	87 63 6d 70 2e 7a 69 79			ocd1:	.text 2*64+7, "cmp.ziy"
>b486	86 63 6d 70 2e 7a 69			ocd2:	.text 2*64+6, "cmp.zi"
>b48d	86 63 6d 70 2e 7a 78			ocd5:	.text 2*64+6, "cmp.zx"
>b494	86 64 65 63 2e 7a 78			ocd6:	.text 2*64+6, "dec.zx"
>b49b	86 73 6d 62 35 2e 7a			ocd7:	.text 2*64+6, "smb5.z"
>b4a2	43 63 6c 64				ocd8:	.text 1*64+3, "cld"
>b4a6	c5 63 6d 70 2e 79			ocd9:	.text 3*64+5, "cmp.y"
>b4ac	43 70 68 78				ocda:	.text 1*64+3, "phx"
>b4b0	c5 63 6d 70 2e 78			ocdd:	.text 3*64+5, "cmp.x"
>b4b6	c5 64 65 63 2e 78			ocde:	.text 3*64+5, "dec.x"
>b4bc	c4 62 62 73 35				ocdf:	.text 3*64+4, "bbs5"
>b4c1	85 63 70 78 2e 23			oce0:	.text 2*64+5, "cpx.#"
>b4c7	87 73 62 63 2e 7a 78 69			oce1:	.text 2*64+7, "sbc.zxi"
>b4cf	85 63 70 78 2e 7a			oce4:	.text 2*64+5, "cpx.z"
>b4d5	85 73 62 63 2e 7a			oce5:	.text 2*64+5, "sbc.z"
>b4db	85 69 6e 63 2e 7a			oce6:	.text 2*64+5, "inc.z"
>b4e1	86 73 6d 62 36 2e 7a			oce7:	.text 2*64+6, "smb6.z"
>b4e8	43 69 6e 78				oce8:	.text 1*64+3, "inx"
>b4ec	85 73 62 63 2e 23			oce9:	.text 2*64+5, "sbc.#"
>b4f2	43 6e 6f 70				ocea:	.text 1*64+3, "nop"
>b4f6	c3 63 70 78				ocec:	.text 3*64+3, "cpx"
>b4fa	c3 73 62 63				oced:	.text 3*64+3, "sbc"
>b4fe	c3 69 6e 63				ocee:	.text 3*64+3, "inc"
>b502	c4 62 62 73 36				ocef:	.text 3*64+4, "bbs6"
>b507	83 62 65 71				ocf0:	.text 2*64+3, "beq"
>b50b	87 73 62 63 2e 7a 69 79			ocf1:	.text 2*64+7, "sbc.ziy"
>b513	86 73 62 63 2e 7a 69			ocf2:	.text 2*64+6, "sbc.zi"
>b51a	86 73 62 63 2e 7a 78			ocf5:	.text 2*64+6, "sbc.zx"
>b521	86 69 6e 63 2e 7a 78			ocf6:	.text 2*64+6, "inc.zx"
>b528	86 73 6d 62 37 2e 7a			ocf7:	.text 2*64+6, "smb7.z"
>b52f	43 73 65 64				ocf8:	.text 1*64+3, "sed"
>b533	c5 73 62 63 2e 79			ocf9:	.text 3*64+5, "sbc.y"
>b539	43 70 6c 78				ocfa:	.text 1*64+3, "plx"
>b53d	c5 73 62 63 2e 78			ocfd:	.text 3*64+5, "sbc.x"
>b543	c5 69 6e 63 2e 78			ocfe:	.text 3*64+5, "inc.x"
>b549	c4 62 62 73 37				ocff:	.text 3*64+4, "bbs7"
>b54e	01 3f					oc__:	.text 1, "?"
.b550					disassembler_end:

;******  Return to file: platform/../taliforth.asm


;******  Processing file: platform/../ed.asm

=46					ed_head  = editor1  ; pointer to first list element (addr) (2 bytes)
=48					ed_cur   = editor2  ; current line number (1 is first line) (2 bytes)
=50					ed_flags = editor3  ; Flags used by ed, where
.b550					ed6502:
.b550	a5 18		lda $18		                lda base
.b552	85 33		sta $33		                sta editor3+1
.b554	a9 0a		lda #$0a	                lda #10
.b556	85 18		sta $18		                sta base
.b558	64 2e		stz $2e		                stz ed_head
.b55a	64 2f		stz $2f		                stz ed_head+1
.b55c	64 30		stz $30		                stz ed_cur
.b55e	64 31		stz $31		                stz ed_cur+1
.b560	64 32		stz $32		                stz ed_flags
.b562	20 85 a7	jsr $a785	                jsr xt_zero
.b565	20 85 a7	jsr $a785	                jsr xt_zero             ; ( addr-t u-t )
.b568	20 6f 89	jsr $896f	                jsr xt_cr
.b56b					ed_input_loop:
.b56b	a9 81		lda #$81	                lda #%10000001
.b56d	14 32		trb $32		                trb ed_flags
.b56f	20 4a ba	jsr $ba4a	                jsr ed_get_input
.b572	a5 0a		lda $0a		                lda ciblen
.b574	d0 1f		bne $b595	                bne _command_mode
.b576	ca		dex		                dex
.b577	ca		dex		                dex                     ; ( addr-t u-t ? )
.b578	a5 30		lda $30		                lda ed_cur
.b57a	95 00		sta $00,x	                sta 0,x
.b57c	a5 31		lda $31		                lda ed_cur+1
.b57e	95 01		sta $01,x	                sta 1,x                 ; ( addr-t u-t u )
.b580	a9 80		lda #$80	                lda #%10000000
.b582	04 32		tsb $32		                tsb ed_flags
.b584	20 29 98	jsr $9829	                jsr xt_one_plus         ; ( addr-t u-t u+1 )
.b587	20 66 ba	jsr $ba66	                jsr ed_is_valid_line
.b58a	b0 03		bcs $b58f	                bcs +
.b58c	4c 3a ba	jmp $ba3a	                jmp ed_error_1drop
.b58f					+
.b58f	20 85 a7	jsr $a785	                jsr xt_zero             ; ( addr-t u-t u+1 0 )
.b592	4c 60 b6	jmp $b660	                jmp _line_number_only_from_external
.b595					_command_mode:
.b595	20 85 a7	jsr $a785	                jsr xt_zero             ; parameter 1 is NOS ( addr-t u-t 0 )
.b598	20 85 a7	jsr $a785	                jsr xt_zero             ; parameter 2 is TOS ( addr-t u-t 0 0 )
.b59b					_prefix_dot:
.b59b	b2 08		lda ($08)	                lda (cib)
.b59d	c9 2e		cmp #$2e	                cmp #$2e                ; ASCII '.'
.b59f	d0 3a		bne $b5db	                bne _prefix_dollar
.b5a1	20 5b ba	jsr $ba5b	                jsr ed_have_text
.b5a4	a5 30		lda $30		                lda ed_cur
.b5a6	95 02		sta $02,x	                sta 2,x
.b5a8	a5 31		lda $31		                lda ed_cur+1
.b5aa	95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t cur 0 )
.b5ac	a9 80		lda #$80	                lda #%10000000
.b5ae	04 32		tsb $32		                tsb ed_flags
.b5b0	a5 0a		lda $0a		                lda ciblen
.b5b2	3a		dec a		                dea                     ; sets Z if A was 1
.b5b3	d0 03		bne $b5b8	                bne +
.b5b5	4c 60 b6	jmp $b660	                jmp _line_number_only_from_external
.b5b8					+
.b5b8	ca		dex		                dex
.b5b9	ca		dex		                dex
.b5ba	ca		dex		                dex
.b5bb	ca		dex		                dex
.b5bc	a5 08		lda $08		                lda cib
.b5be	95 02		sta $02,x	                sta 2,x
.b5c0	a5 09		lda $09		                lda cib+1
.b5c2	95 03		sta $03,x	                sta 3,x
.b5c4	a5 0a		lda $0a		                lda ciblen
.b5c6	95 00		sta $00,x	                sta 0,x
.b5c8	a5 0b		lda $0b		                lda ciblen+1
.b5ca	95 01		sta $01,x	                sta 1,x
.b5cc	20 1d 98	jsr $981d	                jsr xt_one_minus        ; ( addr-t u-t para1 0 addr u-1 )
.b5cf	20 8b a1	jsr $a18b	                jsr xt_swap             ; ( addr-t u-t para1 0 u-1 addr )
.b5d2	20 29 98	jsr $9829	                jsr xt_one_plus         ; ( addr-t u-t para1 0 u-1 addr+1 )
.b5d5	20 8b a1	jsr $a18b	                jsr xt_swap             ; ( addr-t u-t para1 0 addr+1 u-1 )
.b5d8	4c b8 b6	jmp $b6b8	                jmp _check_for_para2
.b5db					_prefix_dollar:
.b5db	b2 08		lda ($08)	                lda (cib)
.b5dd	c9 24		cmp #$24	                cmp #'$'
.b5df	d0 1c		bne $b5fd	                bne _prefix_percent
.b5e1	20 5b ba	jsr $ba5b	                jsr ed_have_text
.b5e4	e8		inx		                inx
.b5e5	e8		inx		                inx                     ; ( addr-t u-t 0 )
.b5e6	20 88 ba	jsr $ba88	                jsr ed_last_line          ; ( addr-t u-t 0 para1 )
.b5e9	20 8b a1	jsr $a18b	                jsr xt_swap             ; SWAP ( addr-t u-t para1 0 )
.b5ec	a9 80		lda #$80	                lda #%10000000
.b5ee	04 32		tsb $32		                tsb ed_flags
.b5f0	a5 0a		lda $0a		                lda ciblen
.b5f2	3a		dec a		                dea                     ; sets Z if A was 1
.b5f3	d0 03		bne $b5f8	                bne +
.b5f5	4c 60 b6	jmp $b660	                jmp _line_number_only_from_external
.b5f8					+
.b5f8	a0 01		ldy #$01	                ldy #01
.b5fa	4c 34 b7	jmp $b734	                jmp _check_command
.b5fd					_prefix_percent:
.b5fd	b2 08		lda ($08)	                lda (cib)
.b5ff	c9 25		cmp #$25	                cmp #$25                ; ASCII '%'
.b601	f0 04		beq $b607	                beq _whole_text
.b603	c9 2c		cmp #$2c	                cmp #$2c                ; ASCII ','
.b605	d0 17		bne $b61e	                bne _prefix_semicolon
.b607					_whole_text:
.b607	20 5b ba	jsr $ba5b	                jsr ed_have_text
.b60a	a9 01		lda #$01	                lda #01
.b60c	95 02		sta $02,x	                sta 2,x                 ; LSB of NOS is para 1
.b60e	74 03		stz $03,x	                stz 3,x                 ; ( addr-t u-t para1 0 )
.b610					_semicolon_entry:
.b610	e8		inx		                inx
.b611	e8		inx		                inx                     ; DROP ( addr-t u-t para1 )
.b612	20 88 ba	jsr $ba88	                jsr ed_last_line          ; ( addr-t u-t para1 para2 )
.b615	a9 80		lda #$80	                lda #%10000000
.b617	04 32		tsb $32		                tsb ed_flags
.b619	a0 01		ldy #$01	                ldy #01
.b61b	4c 34 b7	jmp $b734	                jmp _check_command
.b61e					_prefix_semicolon:
.b61e	b2 08		lda ($08)	                lda (cib)
.b620	c9 3b		cmp #$3b	                cmp #$3b                ; ASCII ';'
.b622	d0 0d		bne $b631	                bne _prefix_number
.b624	20 5b ba	jsr $ba5b	                jsr ed_have_text
.b627	a5 30		lda $30		                lda ed_cur
.b629	95 02		sta $02,x	                sta 2,x
.b62b	a5 31		lda $31		                lda ed_cur+1
.b62d	95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t cur 0 )
.b62f	80 df		bra $b610	                bra _semicolon_entry
.b631					_prefix_number:
.b631	20 85 a7	jsr $a785	                jsr xt_zero
.b634	20 85 a7	jsr $a785	                jsr xt_zero             ; ( addr-t u-t 0 0 0 0 )
.b637	ca		dex		                dex
.b638	ca		dex		                dex
.b639	ca		dex		                dex
.b63a	ca		dex		                dex                     ; ( addr-t u-t 0 0 0 0 ? ? )
.b63b	a5 08		lda $08		                lda cib
.b63d	95 02		sta $02,x	                sta 2,x
.b63f	a5 09		lda $09		                lda cib+1
.b641	95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t 0 0 0 0 cib ? )
.b643	a5 0a		lda $0a		                lda ciblen
.b645	95 00		sta $00,x	                sta 0,x
.b647	a5 0b		lda $0b		                lda ciblen+1
.b649	95 01		sta $01,x	                sta 1,x                 ; ( addr-t u-t 0 0 0 0 cib ciblen )
.b64b	20 9a a2	jsr $a29a	                jsr xt_to_number        ; ( addr-t u-t 0 0 ud addr2 u2 )
.b64e	b5 00		lda $00,x	                lda 0,x
.b650	15 01		ora $01,x	                ora 1,x
.b652	d0 24		bne $b678	                bne _have_unconverted_chars
.b654	e8		inx		                inx
.b655	e8		inx		                inx
.b656	e8		inx		                inx
.b657	e8		inx		                inx                     ; 2DROP ( addr-t u-t 0 0 ud )
.b658	20 8c 8a	jsr $8a8c	                jsr xt_d_to_s           ; D>S ( addr-t u-t 0 0 u )
.b65b	20 7a 96	jsr $967a	                jsr xt_not_rote         ; -ROT ( addr-t u-t u 0 0 )
.b65e	e8		inx		                inx
.b65f	e8		inx		                inx                     ; ( addr-t u-t u 0 ) drop through
.b660					_line_number_only_from_external:
.b660	20 8b a1	jsr $a18b	                jsr xt_swap             ; ( addr-t u-t 0 u )
.b663	20 66 ba	jsr $ba66	                jsr ed_is_valid_line
.b666	b0 03		bcs $b66b	                bcs +
.b668	4c 38 ba	jmp $ba38	                jmp ed_error_2drop
.b66b					+
.b66b	20 8b a1	jsr $a18b	                jsr xt_swap             ; ( addr-t u-t u 0 )
.b66e	20 f5 ba	jsr $baf5	                jsr ed_para1_to_cur
.b671	a9 80		lda #$80	                lda #%10000000
.b673	04 32		tsb $32		                tsb ed_flags
.b675	4c 13 b9	jmp $b913	                jmp ed_cmd_p_from_external
.b678					_have_unconverted_chars:
.b678	20 bb 8d	jsr $8dbb	                jsr xt_dup              ; ( addr-t u-t 0 0 ud addr2 u2 u2 )
.b67b	ca		dex		                dex
.b67c	ca		dex		                dex                     ; ( addr-t u-t 0 0 ud addr2 u2 u2 ? )
.b67d	a5 0a		lda $0a		                lda ciblen
.b67f	95 00		sta $00,x	                sta 0,x
.b681	a5 0b		lda $0b		                lda ciblen+1
.b683	95 01		sta $01,x	                sta 1,x                 ; ( addr-t u-t 0 0 ud addr2 u2 u2 ciblen )
.b685	20 da 8e	jsr $8eda	                jsr xt_equal            ; ( addr-t u-t 0 0 ud addr2 u2 f )
.b688	b5 00		lda $00,x	                lda 0,x
.b68a	15 01		ora $01,x	                ora 1,x
.b68c	f0 0e		beq $b69c	                beq _no_command_yet
.b68e	8a		txa		                txa
.b68f	18		clc		                clc
.b690	69 0a		adc #$0a	                adc #10
.b692	aa		tax		                tax                     ; ( addr-t u-t 0 0 )
.b693	a9 80		lda #$80	                lda #%10000000
.b695	14 32		trb $32		                trb ed_flags
.b697	a0 00		ldy #$00	                ldy #00
.b699	4c 34 b7	jmp $b734	                jmp _check_command
.b69c					_no_command_yet:
.b69c	e8		inx		                inx
.b69d	e8		inx		                inx                     ; ( ... 0 0 ud addr2 u2 )
.b69e	20 4d a3	jsr $a34d	                jsr xt_to_r             ; >R ( ... 0 0 ud addr2 ) (R: u2)
.b6a1	20 7a 96	jsr $967a	                jsr xt_not_rote         ; -ROT ( ... 0 0 addr2 ud ) (R: u2)
.b6a4	20 8c 8a	jsr $8a8c	                jsr xt_d_to_s           ; D>S  ( ... 0 0 addr2 para1 ) (R: u2)
.b6a7	b5 00		lda $00,x	                lda 0,x                 ; LSB
.b6a9	95 06		sta $06,x	                sta 6,x
.b6ab	b5 01		lda $01,x	                lda 1,x                 ; MSB
.b6ad	95 07		sta $07,x	                sta 7,x                 ; ( ... para1 0 addr2 para1 ) (R: u2)
.b6af	e8		inx		                inx
.b6b0	e8		inx		                inx                     ; ( addr-t u-t para1 0 addr2 ) (R: u2)
.b6b1	20 9e 9a	jsr $9a9e	                jsr xt_r_from           ; R> ( addr-t u-t para1 0 addr2 u2 ) fall through
.b6b4	a9 80		lda #$80	                lda #%10000000
.b6b6	04 32		tsb $32		                tsb ed_flags
.b6b8					_check_for_para2:
.b6b8	a1 02		lda ($02,x)	                lda (2,x)
.b6ba	c9 2c		cmp #$2c	                cmp #$2c                ; ASCII code for ',' (comma)
.b6bc	f0 0d		beq $b6cb	                beq _got_comma
.b6be	38		sec		                sec
.b6bf	a5 0a		lda $0a		                lda ciblen
.b6c1	f5 00		sbc $00,x	                sbc 0,x
.b6c3	a8		tay		                tay
.b6c4	e8		inx		                inx
.b6c5	e8		inx		                inx
.b6c6	e8		inx		                inx
.b6c7	e8		inx		                inx                     ; 2DROP ( addr-t u-t para1 0 )
.b6c8	4c 34 b7	jmp $b734	                jmp _check_command
.b6cb					_got_comma:
.b6cb	f6 02		inc $02,x	                inc 2,x
.b6cd	d0 02		bne $b6d1	                bne +
.b6cf	f6 03		inc $03,x	                inc 3,x                 ; ( addr-t u-t para1 0 addr2+1 u2 )
.b6d1					+
.b6d1	b5 01		lda $01,x	                lda 1,x
.b6d3	f0 02		beq $b6d7	                beq +
.b6d5	d6 01		dec $01,x	                dec 1,x
.b6d7					+
.b6d7	d6 00		dec $00,x	                dec 0,x                 ; ( addr-t u-t para1 0 addr2+1 u2-1 )
.b6d9	a1 02		lda ($02,x)	                lda (2,x)
.b6db	c9 24		cmp #$24	                cmp #$24                ; ASCII for '$'
.b6dd	d0 14		bne $b6f3	                bne _para2_not_dollar
.b6df	38		sec		                sec
.b6e0	a5 0a		lda $0a		                lda ciblen
.b6e2	f5 02		sbc $02,x	                sbc 2,x
.b6e4	a8		tay		                tay
.b6e5	c8		iny		                iny
.b6e6	5a		phy		                phy
.b6e7	8a		txa		                txa
.b6e8	18		clc		                clc
.b6e9	69 06		adc #$06	                adc #06
.b6eb	aa		tax		                tax                     ; ( addr-t u-t para1 )
.b6ec	20 88 ba	jsr $ba88	                jsr ed_last_line          ; ( addr-t u-t para1 para2 )
.b6ef	7a		ply		                ply
.b6f0	4c 34 b7	jmp $b734	                jmp _check_command
.b6f3					_para2_not_dollar:
.b6f3	20 4d a3	jsr $a34d	                jsr xt_to_r             ; >R ( ... para1 0 addr2+1 ) (R: u2-1)
.b6f6	20 85 a7	jsr $a785	                jsr xt_zero             ; 0 ( ... para1 0 addr2+1 0 ) (R: u2-1)
.b6f9	20 85 a7	jsr $a785	                jsr xt_zero             ; 0 ( ... para1 0 addr2+1 0 0 ) (R: u2-1)
.b6fc	20 63 9b	jsr $9b63	                jsr xt_rot              ; ROT ( ... para1 0 0 0 addr2+1 ) (R: u2-1)
.b6ff	20 9e 9a	jsr $9a9e	                jsr xt_r_from           ; R> ( ... para1 0 0 0 addr2+1 u2-1)
.b702	20 bb 8d	jsr $8dbb	                jsr xt_dup              ; DUP ( ... para1 0 0 0 addr2+1 u2-1 u2-1)
.b705	20 4d a3	jsr $a34d	                jsr xt_to_r             ; >R ( ... para1 0 0 0 addr2+1 u2-1 ) (R: u2-1)
.b708	20 9a a2	jsr $a29a	                jsr xt_to_number        ; >NUMBER ( ... para1 0 ud addr3 u3 ) (R: u2-1)
.b70b	20 bb 8d	jsr $8dbb	                jsr xt_dup              ; DUP ( ... para1 0 ud addr3 u3 u3 ) (R: u2-1)
.b70e	20 9e 9a	jsr $9a9e	                jsr xt_r_from           ; R> ( ... para1 0 ud addr3 u3 u3 u2-1 )
.b711	20 da 8e	jsr $8eda	                jsr xt_equal            ; = ( ... para1 0 ud addr3 u3 f )
.b714	b5 00		lda $00,x	                lda 0,x
.b716	15 01		ora $01,x	                ora 1,x
.b718	f0 08		beq $b722	                beq _second_number
.b71a	8a		txa		                txa
.b71b	18		clc		                clc
.b71c	69 0c		adc #$0c	                adc #12
.b71e	aa		tax		                tax                     ; back to ( addr-t u-t )
.b71f	4c 3c ba	jmp $ba3c	                jmp ed_error
.b722					_second_number:
.b722	e8		inx		                inx
.b723	e8		inx		                inx                     ; ( addr-t u-t para1 0 ud addr3 u3 )
.b724	38		sec		                sec
.b725	a5 0a		lda $0a		                lda ciblen
.b727	f5 00		sbc $00,x	                sbc 0,x
.b729	48		pha		                pha
.b72a	20 8d a3	jsr $a38d	                jsr xt_two_drop         ; 2DROP ( addr-t u-t para1 0 ud )
.b72d	20 8c 8a	jsr $8a8c	                jsr xt_d_to_s           ; D>S  ( addr-t u-t para1 0 para2 )
.b730	20 4e 96	jsr $964e	                jsr xt_nip              ; NIP ( addr-t u-t para1 para2 )
.b733	7a		ply		                ply
.b734					_check_command:
.b734	24 32		bit $32		                bit ed_flags
.b736	30 08		bmi $b740	                bmi _check_command_have_arg
.b738	a5 30		lda $30		                lda ed_cur
.b73a	95 02		sta $02,x	                sta 2,x
.b73c	a5 31		lda $31		                lda ed_cur+1
.b73e	95 03		sta $03,x	                sta 3,x
.b740					_check_command_have_arg:
.b740	b1 08		lda ($08),y	                lda (cib),y             ; get mystery char from input
.b742	85 24		sta $24		                sta tmp1
.b744	da		phx		                phx
.b745	a2 00		ldx #$00	                ldx #00
.b747					_cmd_loop:
.b747	bd 20 bb	lda $bb20,x	                lda ed_cmd_list,x
.b74a	f0 07		beq $b753	                beq _illegal_command    ; zero marks end of list
.b74c	c5 24		cmp $24		                cmp tmp1
.b74e	f0 07		beq $b757	                beq _found_cmd
.b750	e8		inx		                inx
.b751	80 f4		bra $b747	                bra _cmd_loop
.b753					_illegal_command:
.b753	fa		plx		                plx
.b754	4c 38 ba	jmp $ba38	                jmp ed_error_2drop
.b757					_found_cmd:
.b757	8a		txa		                txa
.b758	0a		asl a		                asl
.b759	aa		tax		                tax                     ; X * 2 for table
.b75a	7c 2b bb	jmp ($bb2b,x)	                jmp (ed_cmd_table,x)
.b75d					ed_next_command:
.b75d	e8		inx		                inx
.b75e	e8		inx		                inx
.b75f	e8		inx		                inx
.b760	e8		inx		                inx                     ; ( addr-t u-t ) Fall through
.b761					_next_command_empty:
.b761	4c 6b b5	jmp $b56b	                jmp ed_input_loop
.b764					ed_all_done:
.b764	64 0a		stz $0a		                stz ciblen
.b766	64 0b		stz $0b		                stz ciblen+1
.b768	20 8d a3	jsr $a38d	                jsr xt_two_drop                 ; 2DROP ( addr-t u-t )
.b76b	a5 33		lda $33		                lda editor3+1
.b76d	85 18		sta $18		                sta base
.b76f	60		rts		                rts
.b770					ed_cmd_a:
.b770	fa		plx		                plx
.b771	e8		inx		                inx
.b772	e8		inx		                inx                     ;  DROP ( addr-t u-t para1 )
.b773					ed_entry_cmd_i:
.b773					ed_cmd_a_have_para:
.b773	20 be ba	jsr $babe	                jsr ed_num_to_addr        ;  ( addr-t u-t addr1 )
.b776	20 6f 89	jsr $896f	                jsr xt_cr
.b779					_next_string_loop:
.b779	20 4a ba	jsr $ba4a	                jsr ed_get_input
.b77c	b2 08		lda ($08)	                lda (cib)
.b77e	c9 2e		cmp #$2e	                cmp #$2e                ; ASCII for '.'
.b780	d0 16		bne $b798	                bne _add_line
.b782	a4 0a		ldy $0a		                ldy ciblen
.b784	c0 01		cpy #$01	                cpy #01
.b786	d0 10		bne $b798	                bne _add_line
.b788	a4 0b		ldy $0b		                ldy ciblen+1
.b78a	d0 0c		bne $b798	                bne _add_line
.b78c	e8		inx		                inx
.b78d	e8		inx		                inx
.b78e	a9 40		lda #$40	                lda #%01000000
.b790	04 32		tsb $32		                tsb ed_flags
.b792	20 6f 89	jsr $896f	                jsr xt_cr
.b795	4c 6b b5	jmp $b56b	                jmp ed_input_loop
.b798					_add_line:
.b798	20 bb 8d	jsr $8dbb	                jsr xt_dup              ; DUP ( addr-t u-t addr1 addr1 )
.b79b	20 7e 91	jsr $917e	                jsr xt_here             ; HERE ( addr-t u-t addr1 addr1 here )
.b79e	20 8b a1	jsr $a18b	                jsr xt_swap             ; SWAP ( addr-t u-t addr1 here addr1 )
.b7a1	20 8c 8f	jsr $8f8c	                jsr xt_fetch            ; @  ( addr-t u-t addr1 here addr2 )
.b7a4	20 7a 87	jsr $877a	                jsr xt_comma            ; ,  ( addr-t u-t addr1 here )
.b7a7	20 6a a3	jsr $a36a	                jsr xt_tuck             ; TUCK ( addr-t u-t here addr1 here )
.b7aa	20 8b a1	jsr $a18b	                jsr xt_swap             ; SWAP ( addr-t u-t here here addr1 )
.b7ad	20 6a a1	jsr $a16a	                jsr xt_store            ; ! ( addr-t u-t here )
.b7b0	20 7e 91	jsr $917e	                jsr xt_here             ; HERE ( addr-t u-t here here2)
.b7b3	a5 00		lda $00		                lda cp
.b7b5	18		clc		                clc
.b7b6	69 04		adc #$04	                adc #04
.b7b8	85 00		sta $00		                sta cp
.b7ba	90 02		bcc $b7be	                bcc +
.b7bc	e6 01		inc $01		                inc cp+1
.b7be					+
.b7be	e6 30		inc $30		                inc ed_cur
.b7c0	d0 02		bne $b7c4	                bne +
.b7c2	e6 31		inc $31		                inc ed_cur+1
.b7c4					+
.b7c4	20 7e 91	jsr $917e	                jsr xt_here     ; HERE ( addr-t u-t here here2 here3 )
.b7c7	20 bb 8d	jsr $8dbb	                jsr xt_dup      ; DUP ( addr-t u-t here here2 here3 here3 )
.b7ca	ca		dex		                dex
.b7cb	ca		dex		                dex             ; ( addr-t u-t here here2 here3 here3 ? )
.b7cc	a5 08		lda $08		                lda cib
.b7ce	95 00		sta $00,x	                sta 0,x
.b7d0	a5 09		lda $09		                lda cib+1
.b7d2	95 01		sta $01,x	                sta 1,x         ; ( addr-t u-t here here2 here3 here3 cib )
.b7d4	20 8b a1	jsr $a18b	                jsr xt_swap     ; SWAP ( addr-t u-t here here2 here3 cib here3 )
.b7d7	ca		dex		                dex
.b7d8	ca		dex		                dex             ; ( addr-t u-t here here2 here3 cib here3 ? )
.b7d9	a5 0a		lda $0a		                lda ciblen
.b7db	95 00		sta $00,x	                sta 0,x
.b7dd	a5 0b		lda $0b		                lda ciblen+1
.b7df	95 01		sta $01,x	                sta 1,x         ; ( addr-t u-t here here2 here3 cib here3 ciblen )
.b7e1	20 ce 95	jsr $95ce	                jsr xt_move     ; ( addr-t u-t here here2 here3 )
.b7e4	18		clc		                clc
.b7e5	a5 00		lda $00		                lda cp
.b7e7	65 0a		adc $0a		                adc ciblen
.b7e9	85 00		sta $00		                sta cp
.b7eb	90 06		bcc $b7f3	                bcc +
.b7ed	a5 01		lda $01		                lda cp+1
.b7ef	65 0b		adc $0b		                adc ciblen+1
.b7f1	85 01		sta $01		                sta cp+1
.b7f3					+
.b7f3	20 9f 98	jsr $989f	                jsr xt_over             ; OVER ( addr-t u-t here here2 here3 here2 )
.b7f6	20 6a a1	jsr $a16a	                jsr xt_store            ; ! ( addr-t u-t here here2 )
.b7f9	20 29 98	jsr $9829	                jsr xt_one_plus         ; 1+
.b7fc	20 29 98	jsr $9829	                jsr xt_one_plus         ; 1+ ( addr-t u-t here here2+2 )
.b7ff	20 bb 8d	jsr $8dbb	                jsr xt_dup              ; DUP ( addr-t u-t here here2+2 here2+2 )
.b802	a5 0a		lda $0a		                lda ciblen
.b804	95 02		sta $02,x	                sta 2,x
.b806	a5 0b		lda $0b		                lda ciblen+1
.b808	95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t here ciblen here2+2 )
.b80a	20 6a a1	jsr $a16a	                jsr xt_store            ; ! ( addr-t u-t here )
.b80d	20 6f 89	jsr $896f	                jsr xt_cr
.b810	4c 79 b7	jmp $b779	                jmp _next_string_loop
.b813					ed_cmd_d:
.b813	fa		plx		                plx
.b814	20 5b ba	jsr $ba5b	                jsr ed_have_text
.b817	20 b0 ba	jsr $bab0	                jsr ed_no_line_zero
.b81a	b5 00		lda $00,x	                lda 0,x
.b81c	15 01		ora $01,x	                ora 1,x
.b81e	d0 08		bne $b828	                bne +
.b820	20 9f 98	jsr $989f	                jsr xt_over             ; ( addr-t u-t para1 0 para1 )
.b823	20 65 b8	jsr $b865	                jsr _cmd_d_common       ; ( addr-t u-t para1 0 )
.b826	80 33		bra $b85b	                bra _cmd_d_done
.b828					+
.b828	20 66 ba	jsr $ba66	                jsr ed_is_valid_line      ; result is in C flag
.b82b	b0 03		bcs $b830	                bcs _cmd_d_loop
.b82d	4c 38 ba	jmp $ba38	                jmp ed_error_2drop
.b830					_cmd_d_loop:
.b830	20 95 a3	jsr $a395	                jsr xt_two_dup          ; 2DUP ( addr-t u-t para1 para2 para1 para2 )
.b833	20 69 91	jsr $9169	                jsr xt_greater_than     ; > ( addr-t u-t para1 para2 f )
.b836	b5 00		lda $00,x	                lda 0,x
.b838	15 01		ora $01,x	                ora 1,x
.b83a	d0 0d		bne $b849	                bne _cmd_d_done_with_flag
.b83c	e8		inx		                inx
.b83d	e8		inx		                inx                     ; Get rid of the flag from >
.b83e	20 bb 8d	jsr $8dbb	                jsr xt_dup              ; DUP ( addr-t u-t para1 para2 para2 )
.b841	20 65 b8	jsr $b865	                jsr _cmd_d_common       ; ( addr-t u-t para1 para2 )
.b844	20 1d 98	jsr $981d	                jsr xt_one_minus        ; 1- ( addr-t u-t para1 para2-1 )
.b847	80 e7		bra $b830	                bra _cmd_d_loop
.b849					_cmd_d_done_with_flag:
.b849	e8		inx		                inx                     ; ( addr-t u-t para1 para2 )
.b84a	e8		inx		                inx
.b84b	b5 02		lda $02,x	                lda 2,x
.b84d	d0 02		bne $b851	                bne +
.b84f	d6 03		dec $03,x	                dec 3,x
.b851					+
.b851	d6 02		dec $02,x	                dec 2,x
.b853	b5 02		lda $02,x	                lda 2,x
.b855	85 30		sta $30		                sta ed_cur
.b857	b5 03		lda $03,x	                lda 3,x
.b859	85 31		sta $31		                sta ed_cur+1            ; drop through to _cmd_d_done
.b85b					_cmd_d_done:
.b85b	a9 40		lda #$40	                lda #%01000000
.b85d	04 32		tsb $32		                tsb ed_flags
.b85f	20 6f 89	jsr $896f	                jsr xt_cr
.b862	4c 5d b7	jmp $b75d	                jmp ed_next_command
.b865					_cmd_d_common:
.b865	20 bb 8d	jsr $8dbb	                jsr xt_dup              ; DUP ( addr-t u-t u u )
.b868	20 be ba	jsr $babe	                jsr ed_num_to_addr        ; ( addr-t u-t u addr )
.b86b	20 8c 8f	jsr $8f8c	                jsr xt_fetch            ; @ ( addr-t u-t u addr1 )
.b86e	20 8b a1	jsr $a18b	                jsr xt_swap             ; SWAP ( addr-t u-t addr1 u )
.b871	20 1d 98	jsr $981d	                jsr xt_one_minus        ; 1- ( addr-t u-t addr1 u-1 )
.b874	20 be ba	jsr $babe	                jsr ed_num_to_addr        ; ( addr-t u-t addr1 addr-1 )
.b877	20 6a a1	jsr $a16a	                jsr xt_store            ; ! ( addr-t u-t )
.b87a	60		rts		                rts
.b87b					ed_cmd_equ:
.b87b	fa		plx		                plx
.b87c	a5 2e		lda $2e		                lda ed_head
.b87e	05 2f		ora $2f		                ora ed_head+1
.b880	d0 08		bne $b88a	                bne _cmd_equ_have_text
.b882	ca		dex		                dex
.b883	ca		dex		                dex
.b884	74 00		stz $00,x	                stz 0,x
.b886	74 01		stz $01,x	                stz 1,x                 ; ( addr-t u-t para1 para2 0 )
.b888	80 21		bra $b8ab	                bra _cmd_equ_done
.b88a					_cmd_equ_have_text:
.b88a	20 b0 ba	jsr $bab0	                jsr ed_no_line_zero
.b88d	24 32		bit $32		                bit ed_flags
.b88f	30 0c		bmi $b89d	                bmi _cmd_equ_have_para
.b891	ca		dex		                dex
.b892	ca		dex		                dex                     ; ( addr-t u-t para1 para2 ? )
.b893	a5 30		lda $30		                lda ed_cur
.b895	95 00		sta $00,x	                sta 0,x
.b897	a5 31		lda $31		                lda ed_cur+1
.b899	95 01		sta $01,x	                sta 1,x
.b89b	80 0e		bra $b8ab	                bra _cmd_equ_done       ; ( addr-t u-t para1 para2 cur )
.b89d					_cmd_equ_have_para:
.b89d	b5 00		lda $00,x	                lda 0,x
.b89f	15 01		ora $01,x	                ora 1,x
.b8a1	d0 05		bne $b8a8	                bne _cmd_equ_two_paras
.b8a3	20 9f 98	jsr $989f	                jsr xt_over             ; ( addr-t u-t para1 para2 para1)
.b8a6	80 03		bra $b8ab	                bra _cmd_equ_done
.b8a8					_cmd_equ_two_paras:
.b8a8	20 bb 8d	jsr $8dbb	                jsr xt_dup              ; ( addr-t u-t para1 para2 para2) drop through
.b8ab					_cmd_equ_done:
.b8ab	20 6f 89	jsr $896f	                jsr xt_cr               ; number goes on new line
.b8ae	20 0b a5	jsr $a50b	                jsr xt_u_dot            ; ( addr-t u-t para1 para2 )
.b8b1	20 6f 89	jsr $896f	                jsr xt_cr
.b8b4	4c 5d b7	jmp $b75d	                jmp ed_next_command
.b8b7					ed_cmd_f:
.b8b7	fa		plx		                plx
.b8b8	24 32		bit $32		                bit ed_flags
.b8ba	30 17		bmi $b8d3	                bmi _cmd_f_have_para
.b8bc	20 6f 89	jsr $896f	                jsr xt_cr
.b8bf	20 4d a3	jsr $a34d	                jsr xt_to_r             ; >R   ( addr-t u-t 0 ) ( R: 0 )
.b8c2	20 63 9b	jsr $9b63	                jsr xt_rot              ; ROT  ( u-t 0 addr-t ) ( R: 0 )
.b8c5	20 bb 8d	jsr $8dbb	                jsr xt_dup              ; DUP  ( u-t 0 addr-t addr-t ) ( R: 0 )
.b8c8	20 0b a5	jsr $a50b	                jsr xt_u_dot            ; U.   ( u-t 0 addr-t ) ( R: 0 )
.b8cb	20 7a 96	jsr $967a	                jsr xt_not_rote         ; -ROT ( addr-t u-t 0 ) ( R: 0 )
.b8ce	20 9e 9a	jsr $9a9e	                jsr xt_r_from           ; R>   ( addr-t u-t 0 0 )
.b8d1	80 11		bra $b8e4	                bra _cmd_f_done
.b8d3					_cmd_f_have_para:
.b8d3	20 9f 98	jsr $989f	                jsr xt_over
.b8d6	20 6f 89	jsr $896f	                jsr xt_cr
.b8d9	20 0b a5	jsr $a50b	                jsr xt_u_dot
.b8dc	b5 02		lda $02,x	                lda 2,x
.b8de	95 06		sta $06,x	                sta 6,x
.b8e0	b5 03		lda $03,x	                lda 3,x
.b8e2	95 07		sta $07,x	                sta 7,x                 ; fall through to _cmd_f_done
.b8e4					_cmd_f_done:
.b8e4	20 6f 89	jsr $896f	                jsr xt_cr
.b8e7	4c 5d b7	jmp $b75d	                jmp ed_next_command
.b8ea					ed_cmd_i:
.b8ea	fa		plx		                plx
.b8eb	e8		inx		                inx
.b8ec	e8		inx		                inx                     ;  DROP ( addr-t u-t para1 )
.b8ed	24 32		bit $32		                bit ed_flags
.b8ef	30 08		bmi $b8f9	                bmi _cmd_i_have_para
.b8f1	a5 30		lda $30		                lda ed_cur
.b8f3	95 00		sta $00,x	                sta 0,x
.b8f5	a5 31		lda $31		                lda ed_cur+1
.b8f7	95 01		sta $01,x	                sta 1,x                 ;  ( addr-t u-t cur ) drop through
.b8f9					_cmd_i_have_para:
.b8f9	b5 00		lda $00,x	                lda 0,x
.b8fb	15 01		ora $01,x	                ora 1,x
.b8fd	f0 09		beq $b908	                beq _cmd_i_done
.b8ff	20 1d 98	jsr $981d	                jsr xt_one_minus        ; 1-  ( addr-t u-t para1-1 )
.b902	20 85 a7	jsr $a785	                jsr xt_zero             ; 0   ( addr-t u-t para1-1 0 )
.b905	20 24 95	jsr $9524	                jsr xt_max              ; MAX ( addr-t u-t para1-1 | 0 )
.b908					_cmd_i_done:
.b908	4c 73 b7	jmp $b773	                jmp ed_entry_cmd_i
.b90b					ed_cmd_n:
.b90b	fa		plx		                plx
.b90c	a9 01		lda #$01	                lda #%00000001
.b90e	04 32		tsb $32		                tsb ed_flags
.b910	80 05		bra $b917	                bra ed_cmd_p_entry_for_cmd_n
.b912					ed_cmd_p:
.b912	fa		plx		                plx
.b913					ed_cmd_p_from_external:
.b913	a9 01		lda #$01	                lda #%00000001
.b915	14 32		trb $32		                trb ed_flags
.b917					ed_cmd_p_entry_for_cmd_n:
.b917	20 5b ba	jsr $ba5b	                jsr ed_have_text
.b91a	20 b0 ba	jsr $bab0	                jsr ed_no_line_zero
.b91d	20 6f 89	jsr $896f	                jsr xt_cr
.b920	b5 00		lda $00,x	                lda 0,x
.b922	15 01		ora $01,x	                ora 1,x
.b924	d0 10		bne $b936	                bne _cmd_p_loop
.b926	b5 02		lda $02,x	                lda 2,x
.b928	85 30		sta $30		                sta ed_cur
.b92a	b5 03		lda $03,x	                lda 3,x
.b92c	85 31		sta $31		                sta ed_cur+1
.b92e	20 9f 98	jsr $989f	                jsr xt_over             ; OVER ( addr-t u-t para1 para2 para1 )
.b931	20 5f b9	jsr $b95f	                jsr _cmd_p_common       ; ( addr-t u-t para1 para2 )
.b934	80 26		bra $b95c	                bra _cmd_p_all_done
.b936					_cmd_p_loop:
.b936	20 95 a3	jsr $a395	                jsr xt_two_dup          ; 2DUP ( addr-t u-t para1 para2 para1 para2 )
.b939	20 69 91	jsr $9169	                jsr xt_greater_than     ; > ( addr-t u-t para1 para2 f )
.b93c	b5 00		lda $00,x	                lda 0,x
.b93e	15 01		ora $01,x	                ora 1,x
.b940	d0 10		bne $b952	                bne _cmd_p_done
.b942	e8		inx		                inx
.b943	e8		inx		                inx                     ; Get rid of the flag from >
.b944	20 9f 98	jsr $989f	                jsr xt_over             ; ( addr-t u-t para1 para2 para1 )
.b947	20 5f b9	jsr $b95f	                jsr _cmd_p_common       ; ( addr-t u-t para1 para2 )
.b94a	f6 02		inc $02,x	                inc 2,x
.b94c	d0 02		bne $b950	                bne +
.b94e	f6 03		inc $03,x	                inc 3,x
.b950					+
.b950	80 e4		bra $b936	                bra _cmd_p_loop
.b952					_cmd_p_done:
.b952	e8		inx		                inx
.b953	e8		inx		                inx                     ; fall through to _cmp_p_all_done
.b954	b5 00		lda $00,x	                lda 0,x
.b956	85 30		sta $30		                sta ed_cur
.b958	b5 01		lda $01,x	                lda 1,x
.b95a	85 31		sta $31		                sta ed_cur+1
.b95c					_cmd_p_all_done:
.b95c	4c 5d b7	jmp $b75d	                jmp ed_next_command
.b95f					_cmd_p_common:
.b95f	a5 32		lda $32		                lda ed_flags
.b961	4a		lsr a		                lsr                     ; bit 0 now in carry
.b962	90 0b		bcc $b96f	                bcc _cmd_p_common_no_num
.b964	20 bb 8d	jsr $8dbb	                jsr xt_dup              ; DUP ( addr-t u-t para1 para1 )
.b967	20 0b a5	jsr $a50b	                jsr xt_u_dot            ; U. ( addr-t u-t para1 )
.b96a	a9 09		lda #$09	                lda #$09                 ; ASCII for Tab
.b96c	20 02 8e	jsr $8e02	                jsr emit_a
.b96f					_cmd_p_common_no_num:
.b96f	20 be ba	jsr $babe	                jsr ed_num_to_addr        ; ( addr-t u-t addr )
.b972	20 fe ba	jsr $bafe	                jsr ed_print_addr
.b975	60		rts		                rts
.b976					ed_cmd_q:
.b976	fa		plx		                plx
.b977	24 32		bit $32		                bit ed_flags            ; bit 6 is change flag
.b979	50 03		bvc $b97e	                bvc +
.b97b	4c 38 ba	jmp $ba38	                jmp ed_error_2drop
.b97e					+
.b97e	4c 64 b7	jmp $b764	                jmp ed_all_done            ; can't fall thru because of PLX
.b981					ed_cmd_qq:
.b981	fa		plx		                plx
.b982	4c 64 b7	jmp $b764	                jmp ed_all_done
.b985					ed_cmd_w:
.b985	fa		plx		                plx
.b986	20 5b ba	jsr $ba5b	                jsr ed_have_text
.b989	24 32		bit $32		                bit ed_flags
.b98b	30 13		bmi $b9a0	                bmi _cmd_w_have_para
.b98d	b5 06		lda $06,x	                lda 6,x
.b98f	15 07		ora $07,x	                ora 7,x
.b991	d0 03		bne $b996	                bne +
.b993	4c 38 ba	jmp $ba38	                jmp ed_error_2drop
.b996					+
.b996	b5 06		lda $06,x	                lda 6,x
.b998	95 02		sta $02,x	                sta 2,x
.b99a	b5 07		lda $07,x	                lda 7,x
.b99c	95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t addr-t ? )
.b99e	80 08		bra $b9a8	                bra _cmd_w_para_ready
.b9a0					_cmd_w_have_para:
.b9a0	b5 02		lda $02,x	                lda 2,x
.b9a2	95 06		sta $06,x	                sta 6,x
.b9a4	b5 03		lda $03,x	                lda 3,x
.b9a6	95 07		sta $07,x	                sta 7,x                 ; drop through to _cmd_w_para_ready
.b9a8					_cmd_w_para_ready:
.b9a8	a9 2e		lda #$2e	                lda #<ed_head
.b9aa	95 00		sta $00,x	                sta 0,x
.b9ac	a9 00		lda #$00	                lda #>ed_head
.b9ae	95 01		sta $01,x	                sta 1,x                 ; ( addr-t u-t addr-t addr-h )
.b9b0	20 9f 98	jsr $989f	                jsr xt_over             ; OVER ( addr-t u-t addr-t addr-h addr-t )
.b9b3	20 4d a3	jsr $a34d	                jsr xt_to_r             ; >R ( addr-t u-t addr-t addr-h ) ( R: addr-t )
.b9b6					_cmd_w_loop:
.b9b6	20 8c 8f	jsr $8f8c	                jsr xt_fetch            ; @ ( addr-t u-t addr-t addr1 ) ( R: addr-t )
.b9b9	b5 00		lda $00,x	                lda 0,x
.b9bb	15 01		ora $01,x	                ora 1,x
.b9bd	f0 55		beq $ba14	                beq _cmd_w_eol
.b9bf	20 95 a3	jsr $a395	                jsr xt_two_dup          ; 2DUP ( addr-t addr-1 addr-t addr-1 ) ( R: addr-t addr-1 addr-t )
.b9c2	20 7f a4	jsr $a47f	                jsr xt_two_to_r         ; 2>R  ( addr-t addr-1 ) (R: ... )
.b9c5	20 29 98	jsr $9829	                jsr xt_one_plus         ; 1+ ( addr-t addr1+1 ) (R: ... )
.b9c8	20 29 98	jsr $9829	                jsr xt_one_plus         ; 1+ ( addr-t addr1+2 ) (R: ... )
.b9cb	20 bb 8d	jsr $8dbb	                jsr xt_dup              ; DUP ( addr-t addr1+2 addr1+2 ) ( R: ... )
.b9ce	20 8c 8f	jsr $8f8c	                jsr xt_fetch            ; @ ( addr-t addr1+2 addr-s ) ( R: ... )
.b9d1	20 8b a1	jsr $a18b	                jsr xt_swap             ; SWAP ( addr-t addr-s addr1+2 ) ( R: ... )
.b9d4	20 29 98	jsr $9829	                jsr xt_one_plus         ; 1+ ( addr-t addr-s addr1+1 ) (R: ... )
.b9d7	20 29 98	jsr $9829	                jsr xt_one_plus         ; 1+ ( addr-t addr-s addr1+2 ) (R: ... )
.b9da	20 8c 8f	jsr $8f8c	                jsr xt_fetch            ; @ ( addr-t addr-s u-s ) ( R: ... )
.b9dd	20 7a 96	jsr $967a	                jsr xt_not_rote         ; -ROT ( u-s addr-t addr-s ) ( R: ... )
.b9e0	20 8b a1	jsr $a18b	                jsr xt_swap             ; SWAP ( u-s addr-s addr-t ) ( R: ... )
.b9e3	20 63 9b	jsr $9b63	                jsr xt_rot              ; ROT (addr-s addr-t u-s ) ( R: ... )
.b9e6	20 bb 8d	jsr $8dbb	                jsr xt_dup              ; DUP (addr-s addr-t u-s u-s ) ( R: ... )
.b9e9	20 4d a3	jsr $a34d	                jsr xt_to_r             ; >R (addr-s addr-t u-s ) ( R: ... u-s )
.b9ec	20 ce 95	jsr $95ce	                jsr xt_move             ; MOVE ( )( R: addr-t addr-1 addr-t )
.b9ef	20 9e 9a	jsr $9a9e	                jsr xt_r_from           ; R> ( u-s )  ( R: addr-t addr-h addr-t )
.b9f2	20 05 a4	jsr $a405	                jsr xt_two_r_from       ; 2R> ( u-s addr-t addr-h ) ( R: addr-t )
.b9f5	20 7a 96	jsr $967a	                jsr xt_not_rote         ; -ROT ( addr-h u-s addr-t ) ( R: addr-t )
.b9f8	20 ef 99	jsr $99ef	                jsr xt_plus             ; + ( addr-h addr-t1 ) ( R: addr-t )
.b9fb	20 bb 8d	jsr $8dbb	                jsr xt_dup              ; DUP ( addr-h addr-t1 addr-t1 ) ( R: addr-t )
.b9fe	ca		dex		                dex
.b9ff	ca		dex		                dex                     ; ( addr-h addr-t1 addr-t1 ? ) ( R: addr-t )
.ba00	a9 0a		lda #$0a	                lda #AscLF              ; ASCII for LF
.ba02	95 00		sta $00,x	                sta 0,x
.ba04	74 01		stz $01,x	                stz 1,x                 ; ( addr-h addr-t1 addr-t1 c ) ( R: addr-t )
.ba06	20 8b a1	jsr $a18b	                jsr xt_swap             ; SWAP ( addr-h addr-t1 c addr-t1 ) ( R: addr-t )
.ba09	20 6a a1	jsr $a16a	                jsr xt_store            ; ! ( addr-h addr-t1 ) ( R: addr-t )
.ba0c	20 29 98	jsr $9829	                jsr xt_one_plus         ; 1+ ( addr-h addr-t1+1 ) ( R: addr-t )
.ba0f	20 8b a1	jsr $a18b	                jsr xt_swap             ; SWAP ( addr-t1+1 addr-h ) ( R: addr-t )
.ba12	80 a2		bra $b9b6	                bra _cmd_w_loop
.ba14					_cmd_w_eol:
.ba14	20 8b a1	jsr $a18b	                jsr xt_swap             ; SWAP ( addr-t u-t addr-n addr-tn ) ( R: addr-t )
.ba17	20 9e 9a	jsr $9a9e	                jsr xt_r_from           ; R> ( addr-t u-t addr-n addr-tn addr-t )
.ba1a	20 5c 95	jsr $955c	                jsr xt_minus            ; - ( addr-t u-t addr-n u )
.ba1d	b5 00		lda $00,x	                lda 0,x
.ba1f	95 04		sta $04,x	                sta 4,x
.ba21	b5 01		lda $01,x	                lda 1,x
.ba23	95 05		sta $05,x	                sta 5,x                 ; ( addr-t u addr-n u )
.ba25	20 6f 89	jsr $896f	                jsr xt_cr
.ba28	20 bb 8d	jsr $8dbb	                jsr xt_dup              ; DUP ( addr-t u addr-n u u )
.ba2b	20 0b a5	jsr $a50b	                jsr xt_u_dot            ; U. ( addr-t u addr-n u )
.ba2e	20 6f 89	jsr $896f	                jsr xt_cr
.ba31	a9 40		lda #$40	                lda #%01000000
.ba33	14 32		trb $32		                trb ed_flags
.ba35	4c 5d b7	jmp $b75d	                jmp ed_next_command
.ba38					ed_error_2drop:
.ba38	e8		inx		                inx
.ba39	e8		inx		                inx                     ; drop through to _error_1drop
.ba3a					ed_error_1drop:
.ba3a	e8		inx		                inx
.ba3b	e8		inx		                inx                     ; drop through to _error
.ba3c					ed_error:
.ba3c	20 6f 89	jsr $896f	                jsr xt_cr
.ba3f	a9 3f		lda #$3f	                lda #'?'
.ba41	20 02 8e	jsr $8e02	                jsr emit_a
.ba44	20 6f 89	jsr $896f	                jsr xt_cr
.ba47	4c 6b b5	jmp $b56b	                jmp ed_input_loop
.ba4a					ed_get_input:
.ba4a	20 04 9b	jsr $9b04	                jsr xt_refill           ;  ( addr-t u-t f )
.ba4d	b5 00		lda $00,x	                lda 0,x
.ba4f	15 01		ora $01,x	                ora 1,x
.ba51	d0 05		bne $ba58	                bne +
.ba53	7a		ply		                ply
.ba54	7a		ply		                ply
.ba55	4c 3a ba	jmp $ba3a	                jmp ed_error_1drop
.ba58					+
.ba58	e8		inx		                inx
.ba59	e8		inx		                inx
.ba5a	60		rts		                rts
.ba5b					ed_have_text:
.ba5b	a5 2e		lda $2e		                lda ed_head
.ba5d	05 2f		ora $2f		                ora ed_head+1
.ba5f	d0 04		bne $ba65	                bne +
.ba61	7a		ply		                ply
.ba62	7a		ply		                ply
.ba63	80 d7		bra $ba3c	                bra ed_error
.ba65					+
.ba65	60		rts		                rts
.ba66					ed_is_valid_line:
.ba66	38		sec		                sec                             ; default is legal line number
.ba67	b5 00		lda $00,x	                lda 0,x
.ba69	15 01		ora $01,x	                ora 1,x
.ba6b	f0 19		beq $ba86	                beq _is_valid_line_nope_zero    ; ( n )
.ba6d	20 bb 8d	jsr $8dbb	                jsr xt_dup                      ; DUP ( n n )
.ba70	20 88 ba	jsr $ba88	                jsr ed_last_line                  ; ( n n last )
.ba73	20 8b a1	jsr $a18b	                jsr xt_swap                     ; SWAP ( n last n )
.ba76	20 74 93	jsr $9374	                jsr xt_less_than                ; < ( n f )
.ba79	b5 00		lda $00,x	                lda 0,x                         ; 0 flag is good
.ba7b	15 01		ora $01,x	                ora 1,x
.ba7d	d0 05		bne $ba84	                bne _is_valid_line_too_small
.ba7f	e8		inx		                inx
.ba80	e8		inx		                inx                     ; DROP flag ( n )
.ba81	38		sec		                sec                     ; Who knows what's happened to C by now
.ba82	80 03		bra $ba87	                bra _is_valid_line_done ; only one exit from this routine
.ba84					_is_valid_line_too_small:
.ba84	e8		inx		                inx
.ba85	e8		inx		                inx                     ; drop through to _is_valid_line_zero
.ba86					_is_valid_line_nope_zero:
.ba86	18		clc		                clc                     ; drop through to _is_valid_line_done
.ba87					_is_valid_line_done:
.ba87	60		rts		                rts
.ba88					ed_last_line:
.ba88	64 24		stz $24		                stz tmp1
.ba8a	64 25		stz $25		                stz tmp1+1
.ba8c	ca		dex		                dex
.ba8d	ca		dex		                dex                     ; ( ? )
.ba8e	a9 2e		lda #$2e	                lda #<ed_head
.ba90	95 00		sta $00,x	                sta 0,x
.ba92	a9 00		lda #$00	                lda #>ed_head
.ba94	95 01		sta $01,x	                sta 1,x                 ; ( addr )
.ba96					_last_line_loop:
.ba96	20 8c 8f	jsr $8f8c	                jsr xt_fetch            ; ( addr | 0 )
.ba99	b5 00		lda $00,x	                lda 0,x
.ba9b	15 01		ora $01,x	                ora 1,x
.ba9d	f0 08		beq $baa7	                beq _last_line_done
.ba9f	e6 24		inc $24		                inc tmp1
.baa1	d0 02		bne $baa5	                bne +
.baa3	e6 25		inc $25		                inc tmp1+1
.baa5					+
.baa5	80 ef		bra $ba96	                bra _last_line_loop
.baa7					_last_line_done:
.baa7	a5 24		lda $24		                lda tmp1
.baa9	95 00		sta $00,x	                sta 0,x
.baab	a5 25		lda $25		                lda tmp1+1
.baad	95 01		sta $01,x	                sta 1,x                 ; ( u )
.baaf	60		rts		                rts
.bab0					ed_no_line_zero:
.bab0	b5 02		lda $02,x	                lda 2,x
.bab2	15 03		ora $03,x	                ora 3,x
.bab4	d0 07		bne $babd	                bne _no_line_zero_done
.bab6	24 32		bit $32		                bit ed_flags
.bab8	10 03		bpl $babd	                bpl _no_line_zero_done
.baba	4c 38 ba	jmp $ba38	                jmp ed_error_2drop
.babd					_no_line_zero_done:
.babd	60		rts		                rts
.babe					ed_num_to_addr:
.babe	ca		dex		                dex
.babf	ca		dex		                dex                     ; ( u ? )
.bac0	a9 2e		lda #$2e	                lda #<ed_head
.bac2	95 00		sta $00,x	                sta 0,x
.bac4	a9 00		lda #$00	                lda #>ed_head
.bac6	95 01		sta $01,x	                sta 1,x                 ; ( u addr-h )
.bac8	b5 02		lda $02,x	                lda 2,x
.baca	15 03		ora $03,x	                ora 3,x
.bacc	d0 05		bne $bad3	                bne _num_to_addr_loop
.bace	20 4e 96	jsr $964e	                jsr xt_nip              ; ( addr-h )
.bad1	80 21		bra $baf4	                bra _num_to_addr_done
.bad3					_num_to_addr_loop:
.bad3	20 8c 8f	jsr $8f8c	                jsr xt_fetch            ; @ ( u addr1 )
.bad6	b5 00		lda $00,x	                lda 0,x
.bad8	15 01		ora $01,x	                ora 1,x
.bada	d0 05		bne $bae1	                bne +
.badc	20 4e 96	jsr $964e	                jsr xt_nip              ; NIP ( addr1 )
.badf	80 13		bra $baf4	                bra _num_to_addr_done
.bae1					+
.bae1	20 8b a1	jsr $a18b	                jsr xt_swap             ; SWAP ( addr1 u )
.bae4	20 1d 98	jsr $981d	                jsr xt_one_minus        ; 1- ( addr1 u-1 )
.bae7	b5 00		lda $00,x	                lda 0,x
.bae9	15 01		ora $01,x	                ora 1,x
.baeb	f0 05		beq $baf2	                beq _num_to_addr_finished
.baed	20 8b a1	jsr $a18b	                jsr xt_swap             ; SWAP ( u-1 addr1 )
.baf0	80 e1		bra $bad3	                bra _num_to_addr_loop
.baf2					_num_to_addr_finished:
.baf2	e8		inx		                inx
.baf3	e8		inx		                inx                     ; ( addr )
.baf4					_num_to_addr_done:
.baf4	60		rts		                rts
.baf5					ed_para1_to_cur:
.baf5	b5 02		lda $02,x	                lda 2,x
.baf7	85 30		sta $30		                sta ed_cur
.baf9	b5 03		lda $03,x	                lda 3,x
.bafb	85 31		sta $31		                sta ed_cur+1
.bafd	60		rts		                rts
.bafe					ed_print_addr:
.bafe	20 29 98	jsr $9829	                jsr xt_one_plus
.bb01	20 29 98	jsr $9829	                jsr xt_one_plus         ; ( addr+2 )
.bb04	20 bb 8d	jsr $8dbb	                jsr xt_dup              ; ( addr+2 addr+2 )
.bb07	20 29 98	jsr $9829	                jsr xt_one_plus
.bb0a	20 29 98	jsr $9829	                jsr xt_one_plus         ; ( addr+2 addr+4 )
.bb0d	20 8c 8f	jsr $8f8c	                jsr xt_fetch            ; ( addr+2 u-s )
.bb10	20 8b a1	jsr $a18b	                jsr xt_swap             ; ( u-s addr+2 )
.bb13	20 8c 8f	jsr $8f8c	                jsr xt_fetch            ; ( u-s addr-s )
.bb16	20 8b a1	jsr $a18b	                jsr xt_swap             ; ( addr-s u-s )
.bb19	20 e0 a4	jsr $a4e0	                jsr xt_type
.bb1c	20 6f 89	jsr $896f	                jsr xt_cr
.bb1f	60		rts		                rts
>bb20	61 66 69 64 70 6e 3d 77		ed_cmd_list:    .text "afidpn=wqQ", 0
>bb28	71 51 00
.bb2b					ed_cmd_table:
>bb2b	70 b7 b7 b8 ea b8 13 b8		                .word ed_cmd_a, ed_cmd_f, ed_cmd_i, ed_cmd_d, ed_cmd_p, ed_cmd_n
>bb33	12 b9 0b b9
>bb37	7b b8 85 b9 76 b9 81 b9		                .word ed_cmd_equ, ed_cmd_w, ed_cmd_q, ed_cmd_qq
.bb3f					ed6502_end:

;******  Return to file: platform/../taliforth.asm

.bb3f					forth_words_start:
>bb3f	20 63 72 20 2e 28 20 54		.binary "forth_words.asc"
>bb47	61 6c 69 20 46 6f 72 74 68 20 32 20 66 6f 72 20
>bb57	74 68 65 20 36 35 63 30 32 29 20 63 72 20 2e 28
>bb67	20 56 65 72 73 69 6f 6e 20 31 2e 30 20 30 34 2e
>bb77	20 44 65 63 20 32 30 32 32 20 29 20 63 72 20 2e
>bb87	28 20 43 6f 70 79 72 69 67 68 74 20 32 30 31 34
>bb97	2d 32 30 32 32 20 53 63 6f 74 20 57 2e 20 53 74
>bba7	65 76 65 6e 73 6f 6e 2c 20 53 61 6d 20 43 6f 6c
>bbb7	77 65 6c 6c 29 20 63 72 20 2e 28 20 54 61 6c 69
>bbc7	20 46 6f 72 74 68 20 32 20 63 6f 6d 65 73 20 77
>bbd7	69 74 68 20 61 62 73 6f 6c 75 74 65 6c 79 20 4e
>bbe7	4f 20 57 41 52 52 41 4e 54 59 29 20 63 72 20 2e
>bbf7	28 20 54 79 70 65 20 27 62 79 65 27 20 74 6f 20
>bc07	65 78 69 74 29 20 63 72 20
.bc10					forth_words_end:
.bc10					user_words_start:
>bc10	20 20				.binary "user_words.asc"
.bc12					user_words_end:

;******  Processing file: platform/../headers.asm

.bc12					dictionary_start:
.bc12					nt_drop:
>bc12	04 10				        .byte 4, UF
>bc14	1e bc 3a 8d 3f 8d		        .word nt_dup, xt_drop, z_drop
>bc1a	64 72 6f 70			        .text "drop"
.bc1e					nt_dup:
>bc1e	03 10				        .byte 3, UF
>bc20	29 bc bb 8d c8 8d		        .word nt_swap, xt_dup, z_dup
>bc26	64 75 70			        .text "dup"
.bc29					nt_swap:
>bc29	04 10				        .byte 4, UF
>bc2b	35 bc 8b a1 9e a1		        .word nt_store, xt_swap, z_swap
>bc31	73 77 61 70			        .text "swap"
.bc35					nt_store:
>bc35	01 10				        .byte 1, UF
>bc37	3e bc 6a a1 7f a1		        .word nt_fetch, xt_store, z_store
>bc3d	21				        .text "!"
.bc3e					nt_fetch:
>bc3e	01 10				        .byte 1, UF
>bc40	47 bc 8c 8f 9e 8f		        .word nt_over, xt_fetch, z_fetch
>bc46	40				        .text "@"
.bc47					nt_over:
>bc47	04 10				        .byte 4, UF
>bc49	53 bc 9f 98 ac 98		        .word nt_to_r, xt_over, z_over
>bc4f	6f 76 65 72			        .text "over"
.bc53					nt_to_r:
>bc53	02 11				        .byte 2, CO+UF ; native is special case
>bc55	5d bc 4d a3 60 a3		        .word nt_r_from, xt_to_r, z_to_r
>bc5b	3e 72				        .text ">r"
.bc5d					nt_r_from:
>bc5d	02 01				        .byte 2, CO    ; native is special case
>bc5f	67 bc 9e 9a ae 9a		        .word nt_r_fetch, xt_r_from, z_r_from
>bc65	72 3e				        .text "r>"
.bc67					nt_r_fetch:
>bc67	02 01				        .byte 2, CO    ; native is special case
>bc69	71 bc 89 9a 9d 9a		        .word nt_nip, xt_r_fetch, z_r_fetch
>bc6f	72 40				        .text "r@"
.bc71					nt_nip:
>bc71	03 10				        .byte 3, UF
>bc73	7c bc 4e 96 5b 96		        .word nt_rot, xt_nip, z_nip
>bc79	6e 69 70			        .text "nip"
.bc7c					nt_rot:
>bc7c	03 10				        .byte 3, UF
>bc7e	87 bc 63 9b 7e 9b		        .word nt_not_rote, xt_rot, z_rot
>bc84	72 6f 74			        .text "rot"
.bc87					nt_not_rote:
>bc87	04 10				        .byte 4, UF
>bc89	93 bc 7a 96 95 96		        .word nt_tuck, xt_not_rote, z_not_rote
>bc8f	2d 72 6f 74			        .text "-rot"
.bc93					nt_tuck:
>bc93	04 10				        .byte 4, UF
>bc95	9f bc 6a a3 83 a3		        .word nt_comma, xt_tuck, z_tuck
>bc9b	74 75 63 6b			        .text "tuck"
.bc9f					nt_comma:
>bc9f	01 10				        .byte 1, UF
>bca1	a8 bc 7a 87 93 87		        .word nt_c_fetch, xt_comma, z_comma
>bca7	2c				        .text ","
.bca8					nt_c_fetch:
>bca8	02 10				        .byte 2, UF
>bcaa	b2 bc 17 86 20 86		        .word nt_c_store, xt_c_fetch, z_c_fetch
>bcb0	63 40				        .text "c@"
.bcb2					nt_c_store:
>bcb2	02 10				        .byte 2, UF
>bcb4	bc bc 21 86 2c 86		        .word nt_plus_store, xt_c_store, z_c_store
>bcba	63 21				        .text "c!"
.bcbc					nt_plus_store:
>bcbc	02 10				        .byte 2, UF
>bcbe	c6 bc 02 9a 21 9a		        .word nt_execute, xt_plus_store, z_plus_store
>bcc4	2b 21				        .text "+!"
.bcc6					nt_execute:
>bcc6	07 10				        .byte 7, UF
>bcc8	d5 bc 49 8f 4f 8f		        .word nt_emit, xt_execute, z_execute
>bcce	65 78 65 63 75 74 65		        .text "execute"
.bcd5					nt_emit:
>bcd5	04 18				        .byte 4, NN+UF
>bcd7	e1 bc fb 8d 05 8e		        .word nt_type, xt_emit, z_emit
>bcdd	65 6d 69 74			        .text "emit"
.bce1					nt_type:
>bce1	04 10				        .byte 4, UF
>bce3	ed bc e0 a4 0a a5		        .word nt_dot, xt_type, z_type
>bce9	74 79 70 65			        .text "type"
.bced					nt_dot:
>bced	01 10				        .byte 1, UF
>bcef	f6 bc 42 8c 63 8c		        .word nt_u_dot, xt_dot, z_dot
>bcf5	2e				        .text "."
.bcf6					nt_u_dot:
>bcf6	02 10				        .byte 2, UF
>bcf8	00 bd 0b a5 16 a5		        .word nt_u_dot_r, xt_u_dot, z_u_dot
>bcfe	75 2e				        .text "u."
.bd00					nt_u_dot_r:
>bd00	03 10				        .byte 3, UF
>bd02	0b bd 17 a5 38 a5		        .word nt_dot_r, xt_u_dot_r, z_u_dot_r
>bd08	75 2e 72			        .text "u.r"
.bd0b					nt_dot_r:
>bd0b	02 10				        .byte 2, UF
>bd0d	15 bd 7e 8c ab 8c		        .word nt_d_dot, xt_dot_r, z_dot_r
>bd13	2e 72				        .text ".r"
.bd15					nt_d_dot:
>bd15	02 10				        .byte 2, UF
>bd17	1f bd f0 8c 0e 8d		        .word nt_d_dot_r, xt_d_dot, z_d_dot
>bd1d	64 2e				        .text "d."
.bd1f					nt_d_dot_r:
>bd1f	03 10				        .byte 3, UF
>bd21	2a bd 0f 8d 39 8d		        .word nt_ud_dot, xt_d_dot_r, z_d_dot_r
>bd27	64 2e 72			        .text "d.r"
.bd2a					nt_ud_dot:
>bd2a	03 10				        .byte 3, UF
>bd2c	35 bd 65 a5 77 a5		        .word nt_ud_dot_r, xt_ud_dot, z_ud_dot
>bd32	75 64 2e			        .text "ud."
.bd35					nt_ud_dot_r:
>bd35	04 10				        .byte 4, UF
>bd37	41 bd 78 a5 96 a5		        .word nt_question, xt_ud_dot_r, z_ud_dot_r
>bd3d	75 64 2e 72			        .text "ud.r"
.bd41					nt_question:
>bd41	01 00				        .byte 1, 0
>bd43	4a bd 6e 9a 74 9a		        .word nt_false, xt_question, z_question
>bd49	3f				        .text "?"
.bd4a					nt_false:
>bd4a	05 00				        .byte 5, 0
>bd4c	57 bd 85 8f 8b 8f		        .word nt_true, xt_false, z_false
>bd52	66 61 6c 73 65			        .text "false"
.bd57					nt_true:
>bd57	04 00				        .byte 4, 0
>bd59	63 bd 61 a3 69 a3		        .word nt_space, xt_true, z_true
>bd5f	74 72 75 65			        .text "true"
.bd63					nt_space:
>bd63	05 00				        .byte 5, 0
>bd65	70 bd fb a0 00 a1		        .word nt_zero, xt_space, z_space
>bd6b	73 70 61 63 65			        .text "space"
.bd70					nt_zero:
>bd70	01 00				        .byte 1, 0
>bd72	79 bd 85 a7 8b a7		        .word nt_one, xt_zero, z_zero
>bd78	30				        .text "0"
.bd79					nt_one:
>bd79	01 00				        .byte 1, 0
>bd7b	82 bd 14 98 1c 98		        .word nt_two, xt_one, z_one
>bd81	31				        .text "1"
.bd82					nt_two:
>bd82	01 00				        .byte 1, 0
>bd84	8b bd 84 a3 8c a3		        .word nt_two_dup, xt_two, z_two
>bd8a	32				        .text "2"
.bd8b					nt_two_dup:
>bd8b	04 10				        .byte 4, UF
>bd8d	97 bd 95 a3 ac a3		        .word nt_question_dup, xt_two_dup, z_two_dup
>bd93	32 64 75 70			        .text "2dup"
.bd97					nt_question_dup:
>bd97	04 10				        .byte 4, UF
>bd99	a3 bd 75 9a 88 9a		        .word nt_plus, xt_question_dup, z_question_dup
>bd9f	3f 64 75 70			        .text "?dup"
.bda3					nt_plus:
>bda3	01 10				        .byte 1, UF
>bda5	ac bd ef 99 01 9a		        .word nt_minus, xt_plus, z_plus
>bdab	2b				        .text "+"
.bdac					nt_minus:
>bdac	01 10				        .byte 1, UF
>bdae	b5 bd 5c 95 6e 95		        .word nt_one_minus, xt_minus, z_minus
>bdb4	2d				        .text "-"
.bdb5					nt_one_minus:
>bdb5	02 10				        .byte 2, UF
>bdb7	bf bd 1d 98 28 98		        .word nt_one_plus, xt_one_minus, z_one_minus
>bdbd	31 2d				        .text "1-"
.bdbf					nt_one_plus:
>bdbf	02 10				        .byte 2, UF
>bdc1	c9 bd 29 98 32 98		        .word nt_two_star, xt_one_plus, z_one_plus
>bdc7	31 2b				        .text "1+"
.bdc9					nt_two_star:
>bdc9	02 10				        .byte 2, UF
>bdcb	d3 bd 2d a4 34 a4		        .word nt_two_slash, xt_two_star, z_two_star
>bdd1	32 2a				        .text "2*"
.bdd3					nt_two_slash:
>bdd3	02 10				        .byte 2, UF
>bdd5	dd bd 22 a4 2c a4		        .word nt_abs, xt_two_slash, z_two_slash
>bddb	32 2f				        .text "2/"
.bddd					nt_abs:
>bddd	03 10				        .byte 3, UF
>bddf	e8 bd 23 81 37 81		        .word nt_dabs, xt_abs, z_abs
>bde5	61 62 73			        .text "abs"
.bde8					nt_dabs:
>bde8	04 10				        .byte 4, UF
>bdea	f4 bd 92 8a b0 8a		        .word nt_and, xt_dabs, z_dabs
>bdf0	64 61 62 73			        .text "dabs"
.bdf4					nt_and:
>bdf4	03 10				        .byte 3, UF
>bdf6	ff bd 28 83 39 83		        .word nt_or, xt_and, z_and
>bdfc	61 6e 64			        .text "and"
.bdff					nt_or:
>bdff	02 10				        .byte 2, UF
>be01	09 be 3f 98 50 98		        .word nt_xor, xt_or, z_or
>be07	6f 72				        .text "or"
.be09					nt_xor:
>be09	03 10				        .byte 3, UF
>be0b	14 be 73 a7 84 a7		        .word nt_rshift, xt_xor, z_xor
>be11	78 6f 72			        .text "xor"
.be14					nt_rshift:
>be14	06 10				        .byte 6, UF
>be16	22 be 7f 9b 92 9b		        .word nt_lshift, xt_rshift, z_rshift
>be1c	72 73 68 69 66 74		        .text "rshift"
.be22					nt_lshift:
>be22	06 10				        .byte 6, UF
>be24	30 be 86 94 99 94		        .word nt_pick, xt_lshift, z_lshift
>be2a	6c 73 68 69 66 74		        .text "lshift"
.be30					nt_pick:
>be30	04 00				        .byte 4, 0    ; underflow check is complicated, leave off here
>be32	3c be de 99 ee 99		        .word nt_char, xt_pick, z_pick
>be38	70 69 63 6b			        .text "pick"
.be3c					nt_char:
>be3c	04 00				        .byte 4, 0
>be3e	48 be 3d 86 53 86		        .word nt_bracket_char, xt_char, z_char
>be44	63 68 61 72			        .text "char"
.be48					nt_bracket_char:
>be48	06 05				        .byte 6, CO+IM
>be4a	56 be a3 85 a9 85		        .word nt_char_plus, xt_bracket_char, z_bracket_char
>be50	5b 63 68 61 72 5d		        .text "[char]"
.be56					nt_char_plus:
>be56	05 00				        .byte 5, 0
>be58	63 be 29 98 32 98		        .word nt_chars, xt_one_plus, z_one_plus ; same as 1+
>be5e	63 68 61 72 2b			        .text "char+"
.be63					nt_chars:
>be63	05 12				        .byte 5, AN+UF   ; deleted during compile
>be65	70 be 54 86 57 86		        .word nt_cells, xt_chars, z_chars
>be6b	63 68 61 72 73			        .text "chars"
.be70					nt_cells:
>be70	05 00				        .byte 5, 0
>be72	7d be 2d a4 34 a4		        .word nt_cell_plus, xt_two_star, z_two_star  ; same as 2*
>be78	63 65 6c 6c 73			        .text "cells"
.be7d					nt_cell_plus:
>be7d	05 10				        .byte 5, UF
>be7f	8a be 2d 86 3c 86		        .word nt_here, xt_cell_plus, z_cell_plus
>be85	63 65 6c 6c 2b			        .text "cell+"
.be8a					nt_here:
>be8a	04 00				        .byte 4, 0
>be8c	96 be 7e 91 88 91		        .word nt_equal, xt_here, z_here
>be92	68 65 72 65			        .text "here"
.be96					nt_equal:
>be96	01 10				        .byte 1, UF
>be98	9f be da 8e f5 8e		        .word nt_not_equals, xt_equal, z_equal
>be9e	3d				        .text "="
.be9f					nt_not_equals:
>be9f	02 10				        .byte 2, UF
>bea1	a9 be 5c 96 79 96		        .word nt_less_than, xt_not_equals, z_not_equals
>bea7	3c 3e				        .text "<>"
.bea9					nt_less_than:
>bea9	01 10				        .byte 1, UF
>beab	b2 be 74 93 88 93		        .word nt_u_less_than, xt_less_than, z_less_than
>beb1	3c				        .text "<"
.beb2					nt_u_less_than:
>beb2	02 10				        .byte 2, UF
>beb4	bc be 4f a5 64 a5		        .word nt_u_greater_than, xt_u_less_than, z_u_less_than
>beba	75 3c				        .text "u<"
.bebc					nt_u_greater_than:
>bebc	02 10				        .byte 2, UF
>bebe	c6 be 39 a5 4e a5		        .word nt_greater_than, xt_u_greater_than, z_u_greater_than
>bec4	75 3e				        .text "u>"
.bec6					nt_greater_than:
>bec6	01 10				        .byte 1, UF
>bec8	cf be 69 91 7d 91		        .word nt_zero_equal, xt_greater_than, z_greater_than
>bece	3e				        .text ">"
.becf					nt_zero_equal:
>becf	02 10				        .byte 2, UF
>bed1	d9 be 8c a7 9f a7		        .word nt_zero_unequal, xt_zero_equal, z_zero_equal
>bed7	30 3d				        .text "0="
.bed9					nt_zero_unequal:
>bed9	03 10				        .byte 3, UF
>bedb	e4 be c4 a7 d5 a7		        .word nt_zero_greater, xt_zero_unequal, z_zero_unequal
>bee1	30 3c 3e			        .text "0<>"
.bee4					nt_zero_greater:
>bee4	02 10				        .byte 2, UF
>bee6	ee be a0 a7 b3 a7		        .word nt_zero_less, xt_zero_greater, z_zero_greater
>beec	30 3e				        .text "0>"
.beee					nt_zero_less:
>beee	02 10				        .byte 2, UF
>bef0	f8 be b4 a7 c3 a7		        .word nt_min, xt_zero_less, z_zero_less
>bef6	30 3c				        .text "0<"
.bef8					nt_min:
>bef8	03 10				        .byte 3, UF
>befa	03 bf 40 95 5b 95		        .word nt_max, xt_min, z_min
>bf00	6d 69 6e			        .text "min"
.bf03					nt_max:
>bf03	03 10				        .byte 3, UF
>bf05	0e bf 24 95 3f 95		        .word nt_two_drop, xt_max, z_max
>bf0b	6d 61 78			        .text "max"
.bf0e					nt_two_drop:
>bf0e	05 10				        .byte 5, UF
>bf10	1b bf 8d a3 94 a3		        .word nt_two_swap, xt_two_drop, z_two_drop
>bf16	32 64 72 6f 70			        .text "2drop"
.bf1b					nt_two_swap:
>bf1b	05 10				        .byte 5, UF
>bf1d	28 bf 5b a4 7e a4		        .word nt_two_over, xt_two_swap, z_two_swap
>bf23	32 73 77 61 70			        .text "2swap"
.bf28					nt_two_over:
>bf28	05 10				        .byte 5, UF
>bf2a	35 bf cf a3 e6 a3		        .word nt_two_store, xt_two_over, z_two_over
>bf30	32 6f 76 65 72			        .text "2over"
.bf35					nt_two_store:
>bf35	02 10				        .byte 2, UF
>bf37	3f bf 35 a4 5a a4		        .word nt_two_fetch, xt_two_store, z_two_store
>bf3d	32 21				        .text "2!"
.bf3f					nt_two_fetch:
>bf3f	02 10				        .byte 2, UF
>bf41	49 bf ad a3 ce a3		        .word nt_two_variable, xt_two_fetch, z_two_fetch
>bf47	32 40				        .text "2@"
.bf49					nt_two_variable:
>bf49	09 00				        .byte 9, 0
>bf4b	5a bf d1 a4 df a4		        .word nt_two_constant, xt_two_variable, z_two_variable
>bf51	32 76 61 72 69 61 62 6c		        .text "2variable"
>bf59	65
.bf5a					nt_two_constant:
>bf5a	09 10				        .byte 9, UF
>bf5c	6b bf 9f a4 c3 a4		        .word nt_two_literal, xt_two_constant, z_two_constant
>bf62	32 63 6f 6e 73 74 61 6e		        .text "2constant"
>bf6a	74
.bf6b					nt_two_literal:
>bf6b	08 14				        .byte 8, UF+IM
>bf6d	7b bf c4 a4 d0 a4		        .word nt_two_r_fetch, xt_two_literal, z_two_literal
>bf73	32 6c 69 74 65 72 61 6c		        .text "2literal"
.bf7b					nt_two_r_fetch:
>bf7b	03 09				        .byte 3, CO+NN          ; native is special case, leave NN for now
>bf7d	86 bf e7 a3 04 a4		        .word nt_two_r_from, xt_two_r_fetch, z_two_r_fetch
>bf83	32 72 40			        .text "2r@"
.bf86					nt_two_r_from:
>bf86	03 01				        .byte 3, CO             ; native is special case
>bf88	91 bf 05 a4 21 a4		        .word nt_two_to_r, xt_two_r_from, z_two_r_from
>bf8e	32 72 3e			        .text "2r>"
.bf91					nt_two_to_r:
>bf91	03 11				        .byte 3, CO+UF          ; native is special case
>bf93	9c bf 7f a4 9e a4		        .word nt_invert, xt_two_to_r, z_two_to_r
>bf99	32 3e 72			        .text "2>r"
.bf9c					nt_invert:
>bf9c	06 10				        .byte 6, UF
>bf9e	aa bf f7 92 06 93		        .word nt_negate, xt_invert, z_invert
>bfa4	69 6e 76 65 72 74		        .text "invert"
.bfaa					nt_negate:
>bfaa	06 10				        .byte 6, UF
>bfac	b8 bf 2f 96 3f 96		        .word nt_dnegate, xt_negate, z_negate
>bfb2	6e 65 67 61 74 65		        .text "negate"
.bfb8					nt_dnegate:
>bfb8	07 10				        .byte 7, UF
>bfba	c7 bf 4d 8b 67 8b		        .word nt_c_comma, xt_dnegate, z_dnegate
>bfc0	64 6e 65 67 61 74 65		        .text "dnegate"
.bfc7					nt_c_comma:
>bfc7	02 10				        .byte 2, UF
>bfc9	d1 bf 0c 86 16 86		        .word nt_bounds, xt_c_comma, z_c_comma
>bfcf	63 2c				        .text "c,"
.bfd1					nt_bounds:
>bfd1	06 10				        .byte 6, UF
>bfd3	df bf 8a 85 a2 85		        .word nt_spaces, xt_bounds, z_bounds
>bfd9	62 6f 75 6e 64 73		        .text "bounds"
.bfdf					nt_spaces:
>bfdf	06 10				        .byte 6, UF
>bfe1	ed bf 01 a1 3c a1		        .word nt_bl, xt_spaces, z_spaces
>bfe7	73 70 61 63 65 73		        .text "spaces"
.bfed					nt_bl:
>bfed	02 00				        .byte 2, 0
>bfef	f7 bf a6 83 ae 83		        .word nt_minus_trailing, xt_bl, z_bl
>bff5	62 6c				        .text "bl"
.bff7					nt_minus_trailing:
>bff7	09 10				        .byte 9, UF
>bff9	08 c0 88 95 c4 95		        .word nt_minus_leading, xt_minus_trailing, z_minus_trailing
>bfff	2d 74 72 61 69 6c 69 6e		        .text "-trailing"
>c007	67
.c008					nt_minus_leading:
>c008	08 10				        .byte 8, UF
>c00a	18 c0 6f 95 87 95		        .word nt_slash_string, xt_minus_leading, z_minus_leading
>c010	2d 6c 65 61 64 69 6e 67		        .text "-leading"
.c018					nt_slash_string:
>c018	07 10				        .byte 7, UF
>c01a	27 c0 f6 9f 15 a0		        .word nt_refill, xt_slash_string, z_slash_string
>c020	2f 73 74 72 69 6e 67		        .text "/string"
.c027					nt_refill:
>c027	06 00				        .byte 6, 0
>c029	35 c0 04 9b 45 9b		        .word nt_accept, xt_refill, z_refill
>c02f	72 65 66 69 6c 6c		        .text "refill"
.c035					nt_accept:
>c035	06 18				        .byte 6, UF+NN
>c037	43 c0 38 81 30 82		        .word nt_input_to_r, xt_accept, z_accept
>c03d	61 63 63 65 70 74		        .text "accept"
.c043					nt_input_to_r:
>c043	07 08				        .byte 7, NN
>c045	52 c0 6e 92 83 92		        .word nt_r_to_input, xt_input_to_r, z_input_to_r
>c04b	69 6e 70 75 74 3e 72		        .text "input>r"
.c052					nt_r_to_input:
>c052	07 08				        .byte 7, NN
>c054	61 c0 af 9a c6 9a		        .word nt_unused, xt_r_to_input, z_r_to_input
>c05a	72 3e 69 6e 70 75 74		        .text "r>input"
.c061					nt_unused:
>c061	06 00				        .byte 6, 0
>c063	6f c0 31 a6 40 a6		        .word nt_depth, xt_unused, z_unused
>c069	75 6e 75 73 65 64		        .text "unused"
.c06f					nt_depth:
>c06f	05 00				        .byte 5, 0
>c071	7c c0 02 8b 10 8b		        .word nt_key, xt_depth, z_depth
>c077	64 65 70 74 68			        .text "depth"
.c07c					nt_key:
>c07c	03 00				        .byte 3, 0
>c07e	87 c0 3a 93 43 93		        .word nt_allot, xt_key, z_key
>c084	6b 65 79			        .text "key"
.c087					nt_allot:
>c087	05 10				        .byte 5, UF
>c089	94 c0 95 82 fd 82		        .word nt_create, xt_allot, z_allot
>c08f	61 6c 6c 6f 74			        .text "allot"
.c094					nt_create:
>c094	06 00				        .byte 6, 0
>c096	a2 c0 75 89 49 8a		        .word nt_does, xt_create, z_create
>c09c	63 72 65 61 74 65		        .text "create"
.c0a2					nt_does:
>c0a2	05 05				        .byte 5, CO+IM
>c0a4	af c0 01 8c 0f 8c		        .word nt_variable, xt_does, z_does
>c0aa	64 6f 65 73 3e			        .text "does>"
.c0af					nt_variable:
>c0af	08 00				        .byte 8, 0
>c0b1	bf c0 55 a6 6d a6		        .word nt_constant, xt_variable, z_variable
>c0b7	76 61 72 69 61 62 6c 65		        .text "variable"
.c0bf					nt_constant:
>c0bf	08 10				        .byte 8, UF
>c0c1	cf c0 1d 89 5a 89		        .word nt_value, xt_constant, z_constant
>c0c7	63 6f 6e 73 74 61 6e 74		        .text "constant"
.c0cf					nt_value:
>c0cf	05 10				        .byte 5, UF
>c0d1	dc c0 1d 89 5a 89		        .word nt_to, xt_constant, z_constant
>c0d7	76 61 6c 75 65			        .text "value"
.c0dc					nt_to:
>c0dc	02 0c				        .byte 2, NN+IM
>c0de	e6 c0 0e a2 69 a2		        .word nt_s_to_d, xt_to, z_to
>c0e4	74 6f				        .text "to"
.c0e6					nt_s_to_d:
>c0e6	03 10				        .byte 3, UF
>c0e8	f1 c0 89 9e 9a 9e		        .word nt_d_to_s, xt_s_to_d, z_s_to_d
>c0ee	73 3e 64			        .text "s>d"
.c0f1					nt_d_to_s:
>c0f1	03 10				        .byte 3, UF
>c0f3	fc c0 8c 8a 91 8a		        .word nt_d_minus, xt_d_to_s, z_d_to_s
>c0f9	64 3e 73			        .text "d>s"
.c0fc					nt_d_minus:
>c0fc	02 10				        .byte 2, UF
>c0fe	06 c1 4a 8a 6a 8a		        .word nt_d_plus, xt_d_minus, z_d_minus
>c104	64 2d				        .text "d-"
.c106					nt_d_plus:
>c106	02 10				        .byte 2, UF
>c108	10 c1 6b 8a 8b 8a		        .word nt_erase, xt_d_plus, z_d_plus
>c10e	64 2b				        .text "d+"
.c110					nt_erase:
>c110	05 00				        .byte 5, 0      ; underflow checked by FILL
>c112	1d c1 00 8f 48 8f		        .word nt_blank, xt_erase, z_erase
>c118	65 72 61 73 65			        .text "erase"
.c11d					nt_blank:
>c11d	05 00				        .byte 5, 0     ; underflow checked by FILL
>c11f	2a c1 f6 8e 48 8f		        .word nt_fill, xt_blank, z_blank
>c125	62 6c 61 6e 6b			        .text "blank"
.c12a					nt_fill:
>c12a	04 10				        .byte 4, UF
>c12c	36 c1 06 8f 48 8f		        .word nt_find_name, xt_fill, z_fill
>c132	66 69 6c 6c			        .text "fill"
.c136					nt_find_name:
>c136	09 10				        .byte 9, UF
>c138	47 c1 e7 8f 92 90		        .word nt_tick, xt_find_name, z_find_name
>c13e	66 69 6e 64 2d 6e 61 6d		        .text "find-name"
>c146	65
.c147					nt_tick:
>c147	01 00				        .byte 1, 0
>c149	50 c1 ee a1 0d a2		        .word nt_bracket_tick, xt_tick, z_tick
>c14f	27				        .text "'"
.c150					nt_bracket_tick:
>c150	03 05				        .byte 3, CO+IM
>c152	5b c1 aa 85 b0 85		        .word nt_name_to_int, xt_bracket_tick, z_bracket_tick
>c158	5b 27 5d			        .text "[']"
.c15b					nt_name_to_int:
>c15b	08 10				        .byte 8, UF
>c15d	6b c1 ed 95 09 96		        .word nt_int_to_name, xt_name_to_int, z_name_to_int
>c163	6e 61 6d 65 3e 69 6e 74		        .text "name>int"
.c16b					nt_int_to_name:
>c16b	08 10				        .byte 8, UF
>c16d	7b c1 84 92 f6 92		        .word nt_name_to_string, xt_int_to_name, z_int_to_name
>c173	69 6e 74 3e 6e 61 6d 65		        .text "int>name"
.c17b					nt_name_to_string:
>c17b	0b 10				        .byte 11, UF
>c17d	8e c1 0a 96 23 96		        .word nt_to_body, xt_name_to_string, z_name_to_string
>c183	6e 61 6d 65 3e 73 74 72		        .text "name>string"
>c18b	69 6e 67
.c18e					nt_to_body:
>c18e	05 10				        .byte 5, UF
>c190	9b c1 6a a2 8e a2		        .word nt_defer, xt_to_body, z_to_body
>c196	3e 62 6f 64 79			        .text ">body"
.c19b					nt_defer:
>c19b	05 00				        .byte 5, 0
>c19d	a8 c1 b8 8a ea 8a		        .word nt_latestxt, xt_defer, z_defer
>c1a3	64 65 66 65 72			        .text "defer"
.c1a8					nt_latestxt:
>c1a8	08 00				        .byte 8, 0
>c1aa	b8 c1 55 93 5b 93		        .word nt_latestnt, xt_latestxt, z_latestxt
>c1b0	6c 61 74 65 73 74 78 74		        .text "latestxt"
.c1b8					nt_latestnt:
>c1b8	08 00				        .byte 8, 0
>c1ba	c8 c1 47 93 54 93		        .word nt_parse_name, xt_latestnt, z_latestnt
>c1c0	6c 61 74 65 73 74 6e 74		        .text "latestnt"
.c1c8					nt_parse_name:
>c1c8	0a 08				        .byte 10, NN
>c1ca	da c1 eb 98 dd 99		        .word nt_parse, xt_parse_name, z_parse_name
>c1d0	70 61 72 73 65 2d 6e 61		        .text "parse-name"
>c1d8	6d 65
.c1da					nt_parse:
>c1da	05 10				        .byte 5, UF
>c1dc	e7 c1 46 99 dd 99		        .word nt_execute_parsing, xt_parse, z_parse
>c1e2	70 61 72 73 65			        .text "parse"
.c1e7					nt_execute_parsing:
>c1e7	0f 10				        .byte 15, UF
>c1e9	fe c1 5d 8f 83 8f		        .word nt_source, xt_execute_parsing, z_execute_parsing
>c1ef	65 78 65 63 75 74 65 2d		        .text "execute-parsing"
>c1f7	70 61 72 73 69 6e 67
.c1fe					nt_source:
>c1fe	06 00				        .byte 6, 0
>c200	0c c2 db a0 ef a0		        .word nt_source_id, xt_source, z_source
>c206	73 6f 75 72 63 65		        .text "source"
.c20c					nt_source_id:
>c20c	09 00				        .byte 9, 0
>c20e	1d c2 f0 a0 fa a0		        .word nt_colon, xt_source_id, z_source_id
>c214	73 6f 75 72 63 65 2d 69		        .text "source-id"
>c21c	64
.c21d					nt_colon:
>c21d	01 00				        .byte 1, 0
>c21f	26 c2 1b 87 5d 87		        .word nt_semicolon, xt_colon, z_colon
>c225	3a				        .text ":"
.c226					nt_semicolon:
>c226	01 05				        .byte 1, CO+IM
>c228	2f c2 65 9f c3 9f		        .word nt_colon_noname, xt_semicolon, z_semicolon
>c22e	3b				        .text ";"
.c22f					nt_colon_noname:
>c22f	07 00				        .byte 7, 0
>c231	3e c2 5e 87 79 87		        .word nt_compile_comma, xt_colon_noname, z_colon_noname
>c237	3a 6e 6f 6e 61 6d 65		        .text ":noname"
.c23e					nt_compile_comma:
>c23e	08 18				        .byte 8, UF+NN
>c240	4e c2 f9 87 10 89		        .word nt_left_bracket, xt_compile_comma, z_compile_comma
>c246	63 6f 6d 70 69 6c 65 2c		        .text "compile,"
.c24e					nt_left_bracket:
>c24e	01 05				        .byte 1, IM+CO
>c250	57 c2 61 93 65 93		        .word nt_right_bracket, xt_left_bracket, z_left_bracket
>c256	5b				        .text "["
.c257					nt_right_bracket:
>c257	01 04				        .byte 1, IM
>c259	60 c2 53 9b 59 9b		        .word nt_literal, xt_right_bracket, z_right_bracket
>c25f	5d				        .text "]"
.c260					nt_literal:
>c260	07 15				        .byte 7, IM+CO+UF
>c262	6f c2 96 93 a3 93		        .word nt_sliteral, xt_literal, z_literal
>c268	6c 69 74 65 72 61 6c		        .text "literal"
.c26f					nt_sliteral:
>c26f	08 15				        .byte 8, CO+IM+UF
>c271	7f c2 16 a0 85 a0		        .word nt_dot_quote, xt_sliteral, z_sliteral
>c277	73 6c 69 74 65 72 61 6c		        .text "sliteral"
.c27f					nt_dot_quote:
>c27f	02 05				        .byte 2, CO+IM
>c281	89 c2 73 8c 7d 8c		        .word nt_s_quote, xt_dot_quote, z_dot_quote
>c287	2e 22				        .text ".", $22
.c289					nt_s_quote:
>c289	02 0c				        .byte 2, IM+NN
>c28b	93 c2 5b 9d 88 9e		        .word nt_s_backslash_quote, xt_s_quote, z_s_quote
>c291	73 22				        .text "s", $22
.c293					nt_s_backslash_quote:
>c293	03 04				        .byte 3, IM
>c295	9e c2 93 9b 9c 9b		        .word nt_postpone, xt_s_backslash_quote, z_s_backslash_quote
>c29b	73 5c 22			        .text "s", $5C, $22
.c29e					nt_postpone:
>c29e	08 05				        .byte 8, IM+CO
>c2a0	ae c2 22 9a 60 9a		        .word nt_immediate, xt_postpone, z_postpone
>c2a6	70 6f 73 74 70 6f 6e 65		        .text "postpone"
.c2ae					nt_immediate:
>c2ae	09 00				        .byte 9, 0
>c2b0	bf c2 57 92 62 92		        .word nt_compile_only, xt_immediate, z_immediate
>c2b6	69 6d 6d 65 64 69 61 74		        .text "immediate"
>c2be	65
.c2bf					nt_compile_only:
>c2bf	0c 00				        .byte 12, 0
>c2c1	d3 c2 11 89 1c 89		        .word nt_never_native, xt_compile_only, z_compile_only
>c2c7	63 6f 6d 70 69 6c 65 2d		        .text "compile-only"
>c2cf	6f 6e 6c 79
.c2d3					nt_never_native:
>c2d3	0c 00				        .byte 12, 0
>c2d5	e7 c2 40 96 4d 96		        .word nt_always_native, xt_never_native, z_never_native
>c2db	6e 65 76 65 72 2d 6e 61		        .text "never-native"
>c2e3	74 69 76 65
.c2e7					nt_always_native:
>c2e7	0d 00				        .byte 13, 0
>c2e9	fc c2 1a 83 27 83		        .word nt_allow_native, xt_always_native, z_always_native
>c2ef	61 6c 77 61 79 73 2d 6e		        .text "always-native"
>c2f7	61 74 69 76 65
.c2fc					nt_allow_native:
>c2fc	0c 00				        .byte 12, 0
>c2fe	10 c3 fe 82 09 83		        .word nt_nc_limit, xt_allow_native, z_allow_native
>c304	61 6c 6c 6f 77 2d 6e 61		        .text "allow-native"
>c30c	74 69 76 65
.c310					nt_nc_limit:
>c310	08 00				        .byte 8, 0
>c312	20 c3 24 96 2e 96		        .word nt_strip_underflow, xt_nc_limit, z_nc_limit
>c318	6e 63 2d 6c 69 6d 69 74		        .text "nc-limit"
.c320					nt_strip_underflow:
>c320	0f 00				        .byte 15, 0
>c322	37 c3 80 a1 8a a1		        .word nt_abort, xt_strip_underflow, z_strip_underflow
>c328	73 74 72 69 70 2d 75 6e		        .text "strip-underflow"
>c330	64 65 72 66 6c 6f 77
.c337					nt_abort:
>c337	05 00				        .byte 5, 0
>c339	44 c3 60 80 ad 80		        .word nt_abort_quote, xt_abort, z_abort
>c33f	61 62 6f 72 74			        .text "abort"
.c344					nt_abort_quote:
>c344	06 0d				        .byte 6, CO+IM+NN
>c346	52 c3 03 81 0d 81		        .word nt_do, xt_abort_quote, z_abort_quote
>c34c	61 62 6f 72 74 22		        .text "abort", $22
.c352					nt_do:
>c352	02 0d				        .byte 2, CO+IM+NN
>c354	5c c3 6e 8b c8 8b		        .word nt_question_do, xt_do, z_do
>c35a	64 6f				        .text "do"
.c35c					nt_question_do:
>c35c	03 0d				        .byte 3, CO+IM+NN
>c35e	67 c3 68 8b c8 8b		        .word nt_i, xt_question_do, z_question_do
>c364	3f 64 6f			        .text "?do"
.c367					nt_i:
>c367	01 03				        .byte 1, AN+CO
>c369	70 c3 f5 91 0e 92		        .word nt_j, xt_i, z_i
>c36f	69				        .text "i"
.c370					nt_j:
>c370	01 03				        .byte 1, AN+CO
>c372	79 c3 20 93 39 93		        .word nt_loop, xt_j, z_j
>c378	6a				        .text "j"
.c379					nt_loop:
>c379	04 05				        .byte 4, CO+IM
>c37b	85 c3 07 94 74 94		        .word nt_plus_loop, xt_loop, z_loop
>c381	6c 6f 6f 70			        .text "loop"
.c385					nt_plus_loop:
>c385	05 05				        .byte 5, CO+IM
>c387	92 c3 0e 94 74 94		        .word nt_exit, xt_plus_loop, z_plus_loop
>c38d	2b 6c 6f 6f 70			        .text "+loop"
.c392					nt_exit:
>c392	04 03				        .byte 4, AN+CO
>c394	9e c3 84 8f 85 8f		        .word nt_unloop, xt_exit, z_exit
>c39a	65 78 69 74			        .text "exit"
.c39e					nt_unloop:
>c39e	06 03				        .byte 6, AN+CO
>c3a0	ac c3 1f a6 25 a6		        .word nt_leave, xt_unloop, z_unloop
>c3a6	75 6e 6c 6f 6f 70		        .text "unloop"
.c3ac					nt_leave:
>c3ac	05 03				        .byte 5, AN+CO
>c3ae	b9 c3 5c 93 61 93		        .word nt_recurse, xt_leave, z_leave
>c3b4	6c 65 61 76 65			        .text "leave"
.c3b9					nt_recurse:
>c3b9	07 0d				        .byte 7, CO+IM+NN
>c3bb	c8 c3 c7 9a 03 9b		        .word nt_quit, xt_recurse, z_recurse
>c3c1	72 65 63 75 72 73 65		        .text "recurse"
.c3c8					nt_quit:
>c3c8	04 00				        .byte 4, 0
>c3ca	d4 c3 62 80 ad 80		        .word nt_begin, xt_quit, z_quit
>c3d0	71 75 69 74			        .text "quit"
.c3d4					nt_begin:
>c3d4	05 07				        .byte 5, AN+CO+IM
>c3d6	e1 c3 9c 83 9f 83		        .word nt_again, xt_begin, z_begin
>c3dc	62 65 67 69 6e			        .text "begin"
.c3e1					nt_again:
>c3e1	05 17				        .byte 5, AN+CO+IM+UF
>c3e3	ee c3 73 82 93 82		        .word nt_state, xt_again, z_again
>c3e9	61 67 61 69 6e			        .text "again"
.c3ee					nt_state:
>c3ee	05 00				        .byte 5, 0
>c3f0	fb c3 5f a1 69 a1		        .word nt_evaluate, xt_state, z_state
>c3f6	73 74 61 74 65			        .text "state"
.c3fb					nt_evaluate:
>c3fb	08 10				        .byte 8, UF
>c3fd	0b c4 e1 90 34 91		        .word nt_base, xt_evaluate, z_evaluate
>c403	65 76 61 6c 75 61 74 65		        .text "evaluate"
.c40b					nt_base:
>c40b	04 00				        .byte 4, 0
>c40d	17 c4 93 83 9b 83		        .word nt_digit_question, xt_base, z_base
>c413	62 61 73 65			        .text "base"
.c417					nt_digit_question:
>c417	06 10				        .byte 6, UF
>c419	25 c4 11 8b 45 8b		        .word nt_number, xt_digit_question, z_digit_question
>c41f	64 69 67 69 74 3f		        .text "digit?"
.c425					nt_number:
>c425	06 10				        .byte 6, UF
>c427	33 c4 96 96 92 97		        .word nt_to_number, xt_number, z_number
>c42d	6e 75 6d 62 65 72		        .text "number"
.c433					nt_to_number:
>c433	07 10				        .byte 7, UF
>c435	42 c4 9a a2 39 a3		        .word nt_hex, xt_to_number, z_to_number
>c43b	3e 6e 75 6d 62 65 72		        .text ">number"
.c442					nt_hex:
>c442	03 00				        .byte 3, 0
>c444	4d c4 89 91 8f 91		        .word nt_decimal, xt_hex, z_hex
>c44a	68 65 78			        .text "hex"
.c44d					nt_decimal:
>c44d	07 00				        .byte 7, 0
>c44f	5c c4 b1 8a b7 8a		        .word nt_count, xt_decimal, z_decimal
>c455	64 65 63 69 6d 61 6c		        .text "decimal"
.c45c					nt_count:
>c45c	05 10				        .byte 5, UF
>c45e	69 c4 5b 89 6e 89		        .word nt_m_star, xt_count, z_count
>c464	63 6f 75 6e 74			        .text "count"
.c469					nt_m_star:
>c469	02 10				        .byte 2, UF
>c46b	73 c4 9a 94 b4 94		        .word nt_um_star, xt_m_star, z_m_star
>c471	6d 2a				        .text "m*"
.c473					nt_um_star:
>c473	03 10				        .byte 3, UF
>c475	7e c4 d9 a5 1e a6		        .word nt_star, xt_um_star, z_um_star
>c47b	75 6d 2a			        .text "um*"
.c47e					nt_star:
>c47e	01 10				        .byte 1, UF
>c480	87 c4 3d a1 45 a1		        .word nt_um_slash_mod, xt_star, z_star
>c486	2a				        .text "*"
.c487					nt_um_slash_mod:
>c487	06 10				        .byte 6, UF
>c489	95 c4 97 a5 d8 a5		        .word nt_sm_slash_rem, xt_um_slash_mod, z_um_slash_mod
>c48f	75 6d 2f 6d 6f 64		        .text "um/mod"
.c495					nt_sm_slash_rem:
>c495	06 10				        .byte 6, UF
>c497	a3 c4 b2 a0 da a0		        .word nt_fm_slash_mod, xt_sm_slash_rem, z_sm_slash_rem
>c49d	73 6d 2f 72 65 6d		        .text "sm/rem"
.c4a3					nt_fm_slash_mod:
>c4a3	06 10				        .byte 6, UF
>c4a5	b1 c4 9d 90 d3 90		        .word nt_slash, xt_fm_slash_mod, z_fm_slash_mod
>c4ab	66 6d 2f 6d 6f 64		        .text "fm/mod"
.c4b1					nt_slash:
>c4b1	01 10				        .byte 1, UF
>c4b3	ba c4 d9 9f f5 9f		        .word nt_slash_mod, xt_slash, z_slash
>c4b9	2f				        .text "/"
.c4ba					nt_slash_mod:
>c4ba	04 10				        .byte 4, UF
>c4bc	c6 c4 de 9f f5 9f		        .word nt_mod, xt_slash_mod, z_slash_mod
>c4c2	2f 6d 6f 64			        .text "/mod"
.c4c6					nt_mod:
>c4c6	03 10				        .byte 3, UF
>c4c8	d1 c4 c5 95 cd 95		        .word nt_star_slash_mod, xt_mod, z_mod
>c4ce	6d 6f 64			        .text "mod"
.c4d1					nt_star_slash_mod:
>c4d1	05 10				        .byte 5, UF
>c4d3	de c4 4f a1 5e a1		        .word nt_star_slash, xt_star_slash_mod, z_star_slash_mod
>c4d9	2a 2f 6d 6f 64			        .text "*/mod"
.c4de					nt_star_slash:
>c4de	02 10				        .byte 2, UF
>c4e0	e8 c4 46 a1 4e a1		        .word nt_backslash, xt_star_slash, z_star_slash
>c4e6	2a 2f				        .text "*/"
.c4e8					nt_backslash:
>c4e8	01 04				        .byte 1, IM
>c4ea	f1 c4 68 83 92 83		        .word nt_move, xt_backslash, z_backslash
>c4f0	5c				        .byte $5c
.c4f1					nt_move:
>c4f1	04 18				        .byte 4, NN+UF
>c4f3	fd c4 ce 95 ec 95		        .word nt_cmove_up, xt_move, z_move
>c4f9	6d 6f 76 65			        .text "move"
.c4fd					nt_cmove_up:
>c4fd	06 10				        .byte 6, UF
>c4ff	0b c5 e0 86 1a 87		        .word nt_cmove, xt_cmove_up, z_cmove_up
>c505	63 6d 6f 76 65 3e		        .text "cmove>"
.c50b					nt_cmove:
>c50b	05 10				        .byte 5, UF
>c50d	18 c5 a5 86 df 86		        .word nt_pad, xt_cmove, z_cmove
>c513	63 6d 6f 76 65			        .text "cmove"
.c518					nt_pad:
>c518	03 00				        .byte 3, 0
>c51a	23 c5 ad 98 bc 98		        .word nt_cleave, xt_pad, z_pad
>c520	70 61 64			        .text "pad"
.c523					nt_cleave:
>c523	06 10				        .byte 6, UF
>c525	31 c5 58 86 a4 86		        .word nt_hexstore, xt_cleave, z_cleave
>c52b	63 6c 65 61 76 65		        .text "cleave"
.c531					nt_hexstore:
>c531	08 10				        .byte 8, UF
>c533	41 c5 90 91 e2 91		        .word nt_within, xt_hexstore, z_hexstore
>c539	68 65 78 73 74 6f 72 65		        .text "hexstore"
.c541					nt_within:
>c541	06 10				        .byte 6, UF
>c543	4f c5 82 a6 97 a6		        .word nt_to_in, xt_within, z_within
>c549	77 69 74 68 69 6e		        .text "within"
.c54f					nt_to_in:
>c54f	03 00				        .byte 3, 0
>c551	5a c5 8f a2 99 a2		        .word nt_less_number_sign, xt_to_in, z_to_in
>c557	3e 69 6e			        .text ">in"
.c55a					nt_less_number_sign:
>c55a	02 00				        .byte 2, 0
>c55c	64 c5 66 93 73 93		        .word nt_number_sign, xt_less_number_sign, z_less_number_sign
>c562	3c 23				        .text "<#"
.c564					nt_number_sign:
>c564	01 10				        .byte 1, UF
>c566	6d c5 93 97 c7 97		        .word nt_number_sign_s, xt_number_sign, z_number_sign
>c56c	23				        .text "#"
.c56d					nt_number_sign_s:
>c56d	02 10				        .byte 2, UF
>c56f	77 c5 ea 97 fa 97		        .word nt_number_sign_greater, xt_number_sign_s, z_number_sign_s
>c575	23 73				        .text "#s"
.c577					nt_number_sign_greater:
>c577	02 10				        .byte 2, UF
>c579	81 c5 c8 97 e9 97		        .word nt_hold, xt_number_sign_greater, z_number_sign_greater
>c57f	23 3e				        .text "#>"
.c581					nt_hold:
>c581	04 10				        .byte 4, UF
>c583	8d c5 e3 91 f4 91		        .word nt_sign, xt_hold, z_hold
>c589	68 6f 6c 64			        .text "hold"
.c58d					nt_sign:
>c58d	04 10				        .byte 4, UF
>c58f	99 c5 c4 9f d8 9f		        .word nt_output, xt_sign, z_sign
>c595	73 69 67 6e			        .text "sign"
.c599					nt_output:
>c599	06 00				        .byte 6, 0
>c59b	a7 c5 94 98 9e 98		        .word nt_input, xt_output, z_output
>c5a1	6f 75 74 70 75 74		        .text "output"
.c5a7					nt_input:
>c5a7	05 00				        .byte 5, 0
>c5a9	b4 c5 63 92 6d 92		        .word nt_cr, xt_input, z_input
>c5af	69 6e 70 75 74			        .text "input"
.c5b4					nt_cr:
>c5b4	02 00				        .byte 2, 0
>c5b6	be c5 6f 89 74 89		        .word nt_page, xt_cr, z_cr
>c5bc	63 72				        .text "cr"
.c5be					nt_page:
>c5be	04 00				        .byte 4, 0
>c5c0	ca c5 bd 98 da 98		        .word nt_at_xy, xt_page, z_page
>c5c6	70 61 67 65			        .text "page"
.c5ca					nt_at_xy:
>c5ca	05 10				        .byte 5, UF
>c5cc	d7 c5 3a 83 67 83		        .word nt_marker, xt_at_xy, z_at_xy
>c5d2	61 74 2d 78 79			        .text "at-xy"
.c5d7					nt_marker:
>c5d7	06 04				        .byte 6, IM
>c5d9	e5 c5 b5 94 f2 94		        .word nt_words, xt_marker, z_marker
>c5df	6d 61 72 6b 65 72		        .text "marker"
.c5e5					nt_words:
>c5e5	05 00				        .byte 5, 0
>c5e7	f2 c5 f5 a6 51 a7		        .word nt_wordsize, xt_words, z_words
>c5ed	77 6f 72 64 73			        .text "words"
.c5f2					nt_wordsize:
>c5f2	08 10				        .byte 8, UF
>c5f4	02 c6 52 a7 72 a7		        .word nt_aligned, xt_wordsize, z_wordsize
>c5fa	77 6f 72 64 73 69 7a 65		        .text "wordsize"
.c602					nt_aligned:
>c602	07 00				        .byte 7, 0
>c604	11 c6 94 82 94 82		        .word nt_align, xt_align, z_align
>c60a	61 6c 69 67 6e 65 64		        .text "aligned"
.c611					nt_align:
>c611	05 00				        .byte 5, 0
>c613	1e c6 94 82 94 82		        .word nt_bell, xt_align, z_align
>c619	61 6c 69 67 6e			        .text "align"
.c61e					nt_bell:
>c61e	04 00				        .byte 4, 0
>c620	2a c6 a0 83 a5 83		        .word nt_dump, xt_bell, z_bell
>c626	62 65 6c 6c			        .text "bell"
.c62a					nt_dump:
>c62a	04 10				        .byte 4, UF
>c62c	36 c6 40 8d a6 8d		        .word nt_dot_s, xt_dump, z_dump
>c632	64 75 6d 70			        .text "dump"
.c636					nt_dot_s:
>c636	02 00				        .byte 2, 0
>c638	40 c6 ac 8c ef 8c		        .word +, xt_dot_s, z_dot_s
>c63e	2e 73				        .text ".s"
.c640					+
.c640					nt_disasm:
>c640	06 10				        .byte 6, UF
>c642	4e c6 46 8b 4c 8b		        .word +, xt_disasm, z_disasm
>c648	64 69 73 61 73 6d		        .text "disasm"
.c64e					+
.c64e					nt_compare:
>c64e	07 10				        .byte 7, UF
>c650	5d c6 94 87 f8 87		        .word nt_search, xt_compare, z_compare
>c656	63 6f 6d 70 61 72 65		        .text "compare"
.c65d					nt_search:
>c65d	06 18				        .byte 6, UF+NN
>c65f	6b c6 c6 9e 64 9f		        .word +, xt_search, z_search
>c665	73 65 61 72 63 68		        .text "search"
.c66b					+
.c66b					nt_environment_q:
>c66b	0c 10				        .byte 12, UF
>c66d	7f c6 21 8e 9d 8e		        .word +, xt_environment_q, z_environment_q
>c673	65 6e 76 69 72 6f 6e 6d		        .text "environment?"
>c67b	65 6e 74 3f
.c67f					+
.c67f					nt_find:
>c67f	04 10				        .byte 4, UF
>c681	8b c6 9f 8f e6 8f		        .word nt_word, xt_find, z_find
>c687	66 69 6e 64			        .text "find"
.c68b					nt_word:
>c68b	04 10				        .byte 4, UF
>c68d	97 c6 98 a6 dd a6		        .word nt_paren, xt_word, z_word
>c693	77 6f 72 64			        .text "word"
.c697					nt_paren:
>c697	01 04				        .byte 1, IM
>c699	a0 c6 db 98 ea 98		        .word nt_dot_paren, xt_paren, z_paren
>c69f	28				        .text "("
.c6a0					nt_dot_paren:
>c6a0	02 04				        .byte 2, IM
>c6a2	aa c6 64 8c 72 8c		        .word nt_if, xt_dot_paren, z_dot_paren
>c6a8	2e 28				        .text ".("
.c6aa					nt_if:
>c6aa	02 0d				        .byte 2, IM+CO+NN
>c6ac	b4 c6 0f 92 1f 92		        .word nt_then, xt_if, z_if
>c6b2	69 66				        .text "if"
.c6b4					nt_then:
>c6b4	04 0d				        .byte 4, IM+CO+NN
>c6b6	c0 c6 9f a1 a8 a1		        .word nt_else, xt_then, z_then
>c6bc	74 68 65 6e			        .text "then"
.c6c0					nt_else:
>c6c0	04 0d				        .byte 4, IM+CO+NN
>c6c2	cc c6 cd 8d e6 8d		        .word nt_repeat, xt_else, z_else
>c6c8	65 6c 73 65			        .text "else"
.c6cc					nt_repeat:
>c6cc	06 0d				        .byte 6, IM+CO+NN
>c6ce	da c6 46 9b 52 9b		        .word nt_until, xt_repeat, z_repeat
>c6d4	72 65 70 65 61 74		        .text "repeat"
.c6da					nt_until:
>c6da	05 0d				        .byte 5, IM+CO+NN
>c6dc	e7 c6 26 a6 30 a6		        .word nt_while, xt_until, z_until
>c6e2	75 6e 74 69 6c			        .text "until"
.c6e7					nt_while:
>c6e7	05 0d				        .byte 5, IM+CO+NN
>c6e9	f4 c6 6e a6 81 a6		        .word nt_case, xt_while, z_while
>c6ef	77 68 69 6c 65			        .text "while"
.c6f4					nt_case:
>c6f4	04 0d				        .byte 4, IM+CO+NN
>c6f6	00 c7 85 a7 8b a7		        .word nt_of, xt_case, z_case    ; shares code with ZERO
>c6fc	63 61 73 65			        .text "case"
.c700					nt_of:
>c700	02 0d				        .byte 2, IM+CO+NN
>c702	0a c7 fb 97 13 98		        .word nt_endof, xt_of, z_of
>c708	6f 66				        .text "of"
.c70a					nt_endof:
>c70a	05 0d				        .byte 5, IM+CO+NN
>c70c	17 c7 cd 8d e6 8d		        .word nt_endcase, xt_endof, z_endof ; shares code with ELSE
>c712	65 6e 64 6f 66			        .text "endof"
.c717					nt_endcase:
>c717	07 0d				        .byte 7, IM+CO+NN
>c719	26 c7 0c 8e 20 8e		        .word nt_defer_fetch, xt_endcase, z_endcase
>c71f	65 6e 64 63 61 73 65		        .text "endcase"
.c726					nt_defer_fetch:
>c726	06 00				        .byte 6, 0
>c728	34 c7 eb 8a f1 8a		        .word nt_defer_store, xt_defer_fetch, z_defer_fetch
>c72e	64 65 66 65 72 40		        .text "defer@"
.c734					nt_defer_store:
>c734	06 00				        .byte 6, 0
>c736	42 c7 f2 8a f8 8a		        .word nt_is, xt_defer_store, z_defer_store
>c73c	64 65 66 65 72 21		        .text "defer!"
.c742					nt_is:
>c742	02 04				        .byte 2, IM
>c744	4c c7 07 93 1f 93		        .word nt_action_of, xt_is, z_is
>c74a	69 73				        .text "is"
.c74c					nt_action_of:
>c74c	09 04				        .byte 9, IM
>c74e	5d c7 5a 82 72 82		        .word nt_useraddr, xt_action_of, z_action_of
>c754	61 63 74 69 6f 6e 2d 6f		        .text "action-of"
>c75c	66
.c75d					nt_useraddr:
>c75d	08 00				        .byte 8, 0
>c75f	6d c7 4a a6 54 a6		        .word nt_buffer_colon, xt_useraddr, z_useraddr
>c765	75 73 65 72 61 64 64 72		        .text "useraddr"
.c76d					nt_buffer_colon:
>c76d	07 00				        .byte 7, 0
>c76f	7c c7 f2 85 f8 85		        .word +, xt_buffer_colon, z_buffer_colon
>c775	62 75 66 66 65 72 3a		        .text "buffer:"
.c77c					+
.c77c					nt_buffstatus:
>c77c	0a 00				        .byte 10, 0
>c77e	8e c7 f9 85 08 86		        .word nt_buffblocknum, xt_buffstatus, z_buffstatus
>c784	62 75 66 66 73 74 61 74		        .text "buffstatus"
>c78c	75 73
.c78e					nt_buffblocknum:
>c78e	0c 00				        .byte 12, 0
>c790	a2 c7 b1 85 c0 85		        .word nt_blkbuffer, xt_buffblocknum, z_buffblocknum
>c796	62 75 66 66 62 6c 6f 63		        .text "buffblocknum"
>c79e	6b 6e 75 6d
.c7a2					nt_blkbuffer:
>c7a2	09 00				        .byte 9, 0
>c7a4	b3 c7 bf 83 cc 83		        .word nt_scr, xt_blkbuffer, z_blkbuffer
>c7aa	62 6c 6b 62 75 66 66 65		        .text "blkbuffer"
>c7b2	72
.c7b3					nt_scr:
>c7b3	03 00				        .byte 3, 0
>c7b5	be c7 b6 9e c5 9e		        .word nt_blk, xt_scr, z_scr
>c7bb	73 63 72			        .text "scr"
.c7be					nt_blk:
>c7be	03 00				        .byte 3, 0
>c7c0	c9 c7 af 83 be 83		        .word nt_block_write, xt_blk, z_blk
>c7c6	62 6c 6b			        .text "blk"
.c7c9					nt_block_write:
>c7c9	0b 08				        .byte 11, NN ; Deferred words need the HC (Code Field) flag.
>c7cb	dc c7 6c 85 7a 85		        .word nt_block_write_vector, xt_block_write, z_block_write
>c7d1	62 6c 6f 63 6b 2d 77 72		        .text "block-write"
>c7d9	69 74 65
.c7dc					nt_block_write_vector:
>c7dc	12 08				        .byte 18, NN ; Deferred words need the HC (Code Field) flag.
>c7de	f6 c7 7a 85 89 85		        .word nt_block_read, xt_block_write_vector, z_block_write_vector
>c7e4	62 6c 6f 63 6b 2d 77 72		        .text "block-write-vector"
>c7ec	69 74 65 2d 76 65 63 74 6f 72
.c7f6					nt_block_read:
>c7f6	0a 28				        .byte 10, HC+NN ; Deferred words need the HC (Code Field) flag.
>c7f8	08 c8 49 85 57 85		        .word nt_block_read_vector, xt_block_read, z_block_read
>c7fe	62 6c 6f 63 6b 2d 72 65		        .text "block-read"
>c806	61 64
.c808					nt_block_read_vector:
>c808	11 28				        .byte 17, HC+NN ; Deferred words need the HC (Code Field) flag.
>c80a	21 c8 57 85 66 85		        .word nt_save_buffers, xt_block_read_vector, z_block_read_vector
>c810	62 6c 6f 63 6b 2d 72 65		        .text "block-read-vector"
>c818	61 64 2d 76 65 63 74 6f 72
.c821					nt_save_buffers:
>c821	0c 00				        .byte 12, 0
>c823	35 c8 9b 9e b5 9e		        .word nt_block, xt_save_buffers, z_save_buffers
>c829	73 61 76 65 2d 62 75 66		        .text "save-buffers"
>c831	66 65 72 73
.c835					nt_block:
>c835	05 00				        .byte 5, 0
>c837	42 c8 cd 83 1f 84		        .word nt_update, xt_block, z_block
>c83d	62 6c 6f 63 6b			        .text "block"
.c842					nt_update:
>c842	06 00				        .byte 6, 0
>c844	50 c8 41 a6 49 a6		        .word nt_buffer, xt_update, z_update
>c84a	75 70 64 61 74 65		        .text "update"
.c850					nt_buffer:
>c850	06 00				        .byte 6, 0
>c852	5e c8 c1 85 f1 85		        .word nt_empty_buffers, xt_buffer, z_buffer
>c858	62 75 66 66 65 72		        .text "buffer"
.c85e					nt_empty_buffers:
>c85e	0d 00				        .byte 13, 0
>c860	73 c8 05 8e 0b 8e		        .word nt_flush, xt_empty_buffers, z_empty_buffers
>c866	65 6d 70 74 79 2d 62 75		        .text "empty-buffers"
>c86e	66 66 65 72 73
.c873					nt_flush:
>c873	05 00				        .byte 5, 0
>c875	80 c8 93 90 9c 90		        .word nt_load, xt_flush, z_flush
>c87b	66 6c 75 73 68			        .text "flush"
.c880					nt_load:
>c880	04 10				        .byte 4, UF
>c882	8c c8 c3 93 06 94		        .word nt_thru, xt_load, z_load
>c888	6c 6f 61 64			        .text "load"
.c88c					nt_thru:
>c88c	04 10				        .byte 4, UF
>c88e	98 c8 a9 a1 ed a1		        .word nt_list, xt_thru, z_thru
>c894	74 68 72 75			        .text "thru"
.c898					nt_list:
>c898	04 10				        .byte 4, UF
>c89a	a4 c8 89 93 95 93		        .word +, xt_list, z_list
>c8a0	6c 69 73 74			        .text "list"
.c8a4					+
.c8a4					nt_block_ramdrive_init:
>c8a4	13 10				        .byte 19, UF
>c8a6	bf c8 20 84 48 85		        .word +, xt_block_ramdrive_init, z_block_ramdrive_init
>c8ac	62 6c 6f 63 6b 2d 72 61		        .text "block-ramdrive-init"
>c8b4	6d 64 72 69 76 65 2d 69 6e 69 74
.c8bf					+
.c8bf					nt_definitions:
>c8bf	0b 00				        .byte 11, 0
>c8c1	d2 c8 f9 8a 01 8b		        .word nt_wordlist, xt_definitions, z_definitions
>c8c7	64 65 66 69 6e 69 74 69		        .text "definitions"
>c8cf	6f 6e 73
.c8d2					nt_wordlist:
>c8d2	08 00				        .byte 8, 0
>c8d4	e2 c8 de a6 f4 a6		        .word nt_search_wordlist, xt_wordlist, z_wordlist
>c8da	77 6f 72 64 6c 69 73 74		        .text "wordlist"
.c8e2					nt_search_wordlist:
>c8e2	0f 10				        .byte 15, UF
>c8e4	f9 c8 ac 9b 8c 9c		        .word nt_set_current, xt_search_wordlist, z_search_wordlist
>c8ea	73 65 61 72 63 68 2d 77		        .text "search-wordlist"
>c8f2	6f 72 64 6c 69 73 74
.c8f9					nt_set_current:
>c8f9	0b 10				        .byte 11, UF
>c8fb	0c c9 1b 9d 26 9d		        .word nt_get_current, xt_set_current, z_set_current
>c901	73 65 74 2d 63 75 72 72		        .text "set-current"
>c909	65 6e 74
.c90c					nt_get_current:
>c90c	0b 00				        .byte 11, 0
>c90e	1f c9 35 91 3f 91		        .word nt_set_order, xt_get_current, z_get_current
>c914	67 65 74 2d 63 75 72 72		        .text "get-current"
>c91c	65 6e 74
.c91f					nt_set_order:
>c91f	09 00				        .byte 9, 0
>c921	30 c9 27 9d 5a 9d		        .word nt_get_order, xt_set_order, z_set_order
>c927	73 65 74 2d 6f 72 64 65		        .text "set-order"
>c92f	72
.c930					nt_get_order:
>c930	09 00				        .byte 9, 0
>c932	41 c9 40 91 68 91		        .word nt_root_wordlist, xt_get_order, z_get_order
>c938	67 65 74 2d 6f 72 64 65		        .text "get-order"
>c940	72
.c941					nt_root_wordlist:
>c941	0d 00				        .byte 13, 0
>c943	56 c9 5a 9b 62 9b		        .word +, xt_root_wordlist, z_root_wordlist
>c949	72 6f 6f 74 2d 77 6f 72		        .text "root-wordlist"
>c951	64 6c 69 73 74
.c956					+
.c956					nt_assembler_wordlist:
>c956	12 00				        .byte 18, 0
>c958	70 c9 84 a3 8c a3		        .word +, xt_assembler_wordlist, z_assembler_wordlist
>c95e	61 73 73 65 6d 62 6c 65		        .text "assembler-wordlist"
>c966	72 2d 77 6f 72 64 6c 69 73 74
.c970					+
.c970					nt_editor_wordlist:
>c970	0f 00				        .byte 15, 0
>c972	87 c9 14 98 1c 98		        .word +, xt_editor_wordlist, z_editor_wordlist
>c978	65 64 69 74 6f 72 2d 77		        .text "editor-wordlist"
>c980	6f 72 64 6c 69 73 74
.c987					+
.c987					nt_forth_wordlist:
>c987	0e 00				        .byte 14, 0
>c989	9d c9 85 a7 8b a7		        .word nt_only, xt_forth_wordlist, z_forth_wordlist
>c98f	66 6f 72 74 68 2d 77 6f		        .text "forth-wordlist"
>c997	72 64 6c 69 73 74
.c99d					nt_only:
>c99d	04 00				        .byte 4, 0
>c99f	a9 c9 33 98 3e 98		        .word nt_also, xt_only, z_only
>c9a5	6f 6e 6c 79			        .text "only"
.c9a9					nt_also:
>c9a9	04 00				        .byte 4, 0
>c9ab	b5 c9 0a 83 19 83		        .word nt_previous, xt_also, z_also
>c9b1	61 6c 73 6f			        .text "also"
.c9b5					nt_previous:
>c9b5	08 00				        .byte 8, 0
>c9b7	c5 c9 61 9a 6d 9a		        .word nt_to_order, xt_previous, z_previous
>c9bd	70 72 65 76 69 6f 75 73		        .text "previous"
.c9c5					nt_to_order:
>c9c5	06 00				        .byte 6, 0
>c9c7	d3 c9 3a a3 4c a3		        .word nt_order, xt_to_order, z_to_order
>c9cd	3e 6f 72 64 65 72		        .text ">order"
.c9d3					nt_order:
>c9d3	05 00				        .byte 5, 0
>c9d5	e0 c9 51 98 7b 98		        .word nt_forth, xt_order, z_order
>c9db	6f 72 64 65 72			        .text "order"
.c9e0					nt_forth:
>c9e0	05 00				        .byte 5, 0
>c9e2	ed c9 d4 90 da 90		        .word +, xt_forth, z_forth
>c9e8	66 6f 72 74 68			        .text "forth"
.c9ed					+
>c9ed	03 08				nt_see: .byte 3, NN
>c9ef	f8 c9 8d 9c 1a 9d		        .word +, xt_see, z_see
>c9f5	73 65 65			        .text "see"
.c9f8					+
.c9f8					nt_ed:
>c9f8	02 08				        .byte 2, NN
>c9fa	02 ca c9 8d cc 8d		        .word +, xt_ed, z_ed
>ca00	65 64				        .text "ed"
.ca02					+
.ca02					nt_cold:
>ca02	04 00				        .byte 4, 0
>ca04	0e ca 00 80 ad 80		        .word nt_bye, xt_cold, z_cold
>ca0a	63 6f 6c 64			        .text "cold"
.ca0e					nt_bye:
>ca0e	03				        .byte 3         ; length of word strings
>ca0f	00				        .byte 0         ; status byte
>ca10	00 00				        .word 0000      ; next word in Dictionary, 0000 signals end
>ca12	09 86				        .word xt_bye    ; start of code block (xt of this word)
>ca14	0c 86				        .word z_bye     ; end of code (RTS)
>ca16	62 79 65			        .text "bye"     ; word name, always lower case, not zero-terminated
.ca19					root_dictionary_start:
.ca19					nt_root_set_order:
>ca19	09 00				        .byte 9, 0
>ca1b	2a ca 27 9d 5a 9d		        .word nt_root_forth, xt_set_order, z_set_order
>ca21	73 65 74 2d 6f 72 64 65		        .text "set-order"
>ca29	72
.ca2a					nt_root_forth:
>ca2a	05 00				        .byte 5, 0
>ca2c	37 ca d4 90 da 90		        .word nt_root_forth_wordlist, xt_forth, z_forth
>ca32	66 6f 72 74 68			        .text "forth"
.ca37					nt_root_forth_wordlist:
>ca37	0e 00				        .byte 14, 0
>ca39	4d ca 85 a7 8b a7		        .word nt_root_words, xt_forth_wordlist, z_forth_wordlist
>ca3f	66 6f 72 74 68 2d 77 6f		        .text "forth-wordlist"
>ca47	72 64 6c 69 73 74
.ca4d					nt_root_words:
>ca4d	05 00				        .byte 5, 0
>ca4f	00 00 f5 a6 51 a7		        .word 0000, xt_words, z_words
>ca55	77 6f 72 64 73			        .text "words"
.ca5a					editor_dictionary_start:
.ca5a					nt_editor_o:
>ca5a	01 00				        .byte 1, 0
>ca5c	63 ca b8 a8 fd a8		        .word nt_editor_line, xt_editor_o, z_editor_o
>ca62	6f				        .text "o"
.ca63					nt_editor_line:
>ca63	04 10				        .byte 4, UF
>ca65	6f ca 9f a8 b7 a8		        .word nt_editor_l, xt_editor_line, z_editor_line
>ca6b	6c 69 6e 65			        .text "line"
.ca6f					nt_editor_l:
>ca6f	01 00				        .byte 1, 0
>ca71	78 ca 23 a8 9e a8		        .word nt_editor_el, xt_editor_l, z_editor_l
>ca77	6c				        .text "l"
.ca78					nt_editor_el:
>ca78	02 00				        .byte 2, 0
>ca7a	82 ca 11 a8 22 a8		        .word nt_editor_erase_screen, xt_editor_el, z_editor_el
>ca80	65 6c				        .text "el"
.ca82					nt_editor_erase_screen:
>ca82	0c 00				        .byte 12, 0
>ca84	96 ca ff a7 10 a8		        .word nt_editor_enter_screen, xt_editor_erase_screen, z_editor_erase_screen
>ca8a	65 72 61 73 65 2d 73 63		        .text "erase-screen"
>ca92	72 65 65 6e
.ca96					nt_editor_enter_screen:
>ca96	0c 00				        .byte 12, 0
>ca98	00 00 e3 a7 fe a7		        .word 0000, xt_editor_enter_screen, z_editor_enter_screen
>ca9e	65 6e 74 65 72 2d 73 63		        .text "enter-screen"
>caa6	72 65 65 6e
.caaa					assembler_dictionary_start:
.caaa					nt_asm_adc_h:
>caaa	05 0c						.byte 5, IM+NN
>caac	b7 ca				                .word nt_asm_adc_x
>caae	fe a8 03 a9					.word xt_asm_adc_h, z_asm_adc_h
>cab2	61 64 63 2e 23					.text "adc.#"
.cab7					nt_asm_adc_x:
>cab7	05 0c						.byte 5, IM+NN
>cab9	c4 ca				                .word nt_asm_adc_y
>cabb	03 a9 08 a9					.word xt_asm_adc_x, z_asm_adc_x
>cabf	61 64 63 2e 78					.text "adc.x"
.cac4					nt_asm_adc_y:
>cac4	05 0c						.byte 5, IM+NN
>cac6	d1 ca				                .word nt_asm_adc_z
>cac8	08 a9 0d a9					.word xt_asm_adc_y, z_asm_adc_y
>cacc	61 64 63 2e 79					.text "adc.y"
.cad1					nt_asm_adc_z:
>cad1	05 0c						.byte 5, IM+NN
>cad3	de ca				                .word nt_asm_adc_zi
>cad5	0d a9 12 a9					.word xt_asm_adc_z, z_asm_adc_z
>cad9	61 64 63 2e 7a					.text "adc.z"
.cade					nt_asm_adc_zi:
>cade	06 0c						.byte 6, IM+NN
>cae0	ec ca				                .word nt_asm_adc_ziy
>cae2	12 a9 17 a9					.word xt_asm_adc_zi, z_asm_adc_zi
>cae6	61 64 63 2e 7a 69				.text "adc.zi"
.caec					nt_asm_adc_ziy:
>caec	07 0c						.byte 7, IM+NN
>caee	fb ca				                .word nt_asm_adc_zx
>caf0	17 a9 1c a9					.word xt_asm_adc_ziy, z_asm_adc_ziy
>caf4	61 64 63 2e 7a 69 79				.text "adc.ziy"
.cafb					nt_asm_adc_zx:
>cafb	06 0c						.byte 6, IM+NN
>cafd	09 cb				                .word nt_asm_adc_zxi
>caff	1c a9 21 a9					.word xt_asm_adc_zx, z_asm_adc_zx
>cb03	61 64 63 2e 7a 78				.text "adc.zx"
.cb09					nt_asm_adc_zxi:
>cb09	07 0c						.byte 7, IM+NN
>cb0b	18 cb				                .word nt_asm_and
>cb0d	21 a9 26 a9					.word xt_asm_adc_zxi, z_asm_adc_zxi
>cb11	61 64 63 2e 7a 78 69				.text "adc.zxi"
.cb18					nt_asm_and:
>cb18	04 0c						.byte 4, IM+NN
>cb1a	24 cb				                .word nt_asm_and_h
>cb1c	26 a9 2b a9					.word xt_asm_and, z_asm_and
>cb20	61 6e 64 2e					.text "and."
.cb24					nt_asm_and_h:
>cb24	05 0c						.byte 5, IM+NN
>cb26	31 cb				                .word nt_asm_and_x
>cb28	2b a9 30 a9					.word xt_asm_and_h, z_asm_and_h
>cb2c	61 6e 64 2e 23					.text "and.#"
.cb31					nt_asm_and_x:
>cb31	05 0c						.byte 5, IM+NN
>cb33	3e cb				                .word nt_asm_and_y
>cb35	30 a9 35 a9					.word xt_asm_and_x, z_asm_and_x
>cb39	61 6e 64 2e 78					.text "and.x"
.cb3e					nt_asm_and_y:
>cb3e	05 0c						.byte 5, IM+NN
>cb40	4b cb				                .word nt_asm_and_z
>cb42	35 a9 3a a9					.word xt_asm_and_y, z_asm_and_y
>cb46	61 6e 64 2e 79					.text "and.y"
.cb4b					nt_asm_and_z:
>cb4b	05 0c						.byte 5, IM+NN
>cb4d	58 cb				                .word nt_asm_and_zi
>cb4f	3a a9 3f a9					.word xt_asm_and_z, z_asm_and_z
>cb53	61 6e 64 2e 7a					.text "and.z"
.cb58					nt_asm_and_zi:
>cb58	06 0c						.byte 6, IM+NN
>cb5a	66 cb				                .word nt_asm_and_ziy
>cb5c	3f a9 44 a9					.word xt_asm_and_zi, z_asm_and_zi
>cb60	61 6e 64 2e 7a 69				.text "and.zi"
.cb66					nt_asm_and_ziy:
>cb66	07 0c						.byte 7, IM+NN
>cb68	75 cb				                .word nt_asm_and_zx
>cb6a	44 a9 49 a9					.word xt_asm_and_ziy, z_asm_and_ziy
>cb6e	61 6e 64 2e 7a 69 79				.text "and.ziy"
.cb75					nt_asm_and_zx:
>cb75	06 0c						.byte 6, IM+NN
>cb77	83 cb				                .word nt_asm_and_zxi
>cb79	49 a9 4e a9					.word xt_asm_and_zx, z_asm_and_zx
>cb7d	61 6e 64 2e 7a 78				.text "and.zx"
.cb83					nt_asm_and_zxi:
>cb83	07 0c						.byte 7, IM+NN
>cb85	92 cb				                .word nt_asm_asl
>cb87	4e a9 53 a9					.word xt_asm_and_zxi, z_asm_and_zxi
>cb8b	61 6e 64 2e 7a 78 69				.text "and.zxi"
.cb92					nt_asm_asl:
>cb92	03 0c						.byte 3, IM+NN
>cb94	9d cb				                .word nt_asm_asl_a
>cb96	53 a9 58 a9					.word xt_asm_asl, z_asm_asl
>cb9a	61 73 6c					.text "asl"
.cb9d					nt_asm_asl_a:
>cb9d	05 0c						.byte 5, IM+NN
>cb9f	aa cb				                .word nt_asm_asl_x
>cba1	58 a9 5d a9					.word xt_asm_asl_a, z_asm_asl_a
>cba5	61 73 6c 2e 61					.text "asl.a"
.cbaa					nt_asm_asl_x:
>cbaa	05 0c						.byte 5, IM+NN
>cbac	b7 cb				                .word nt_asm_asl_z
>cbae	5d a9 62 a9					.word xt_asm_asl_x, z_asm_asl_x
>cbb2	61 73 6c 2e 78					.text "asl.x"
.cbb7					nt_asm_asl_z:
>cbb7	05 0c						.byte 5, IM+NN
>cbb9	c4 cb				                .word nt_asm_asl_zx
>cbbb	62 a9 67 a9					.word xt_asm_asl_z, z_asm_asl_z
>cbbf	61 73 6c 2e 7a					.text "asl.z"
.cbc4					nt_asm_asl_zx:
>cbc4	06 0c						.byte 6, IM+NN
>cbc6	d2 cb				                .word nt_asm_bcc
>cbc8	67 a9 6c a9					.word xt_asm_asl_zx, z_asm_asl_zx
>cbcc	61 73 6c 2e 7a 78				.text "asl.zx"
.cbd2					nt_asm_bcc:
>cbd2	03 0c						.byte 3, IM+NN
>cbd4	dd cb				                .word nt_asm_bcs
>cbd6	6c a9 71 a9					.word xt_asm_bcc, z_asm_bcc
>cbda	62 63 63					.text "bcc"
.cbdd					nt_asm_bcs:
>cbdd	03 0c						.byte 3, IM+NN
>cbdf	e8 cb				                .word nt_asm_beq
>cbe1	71 a9 78 a9					.word xt_asm_bcs, z_asm_bcs
>cbe5	62 63 73					.text "bcs"
.cbe8					nt_asm_beq:
>cbe8	03 0c						.byte 3, IM+NN
>cbea	f3 cb				                .word nt_asm_bit
>cbec	78 a9 7d a9					.word xt_asm_beq, z_asm_beq
>cbf0	62 65 71					.text "beq"
.cbf3					nt_asm_bit:
>cbf3	03 0c						.byte 3, IM+NN
>cbf5	fe cb				                .word nt_asm_bit_h
>cbf7	7d a9 82 a9					.word xt_asm_bit, z_asm_bit
>cbfb	62 69 74					.text "bit"
.cbfe					nt_asm_bit_h:
>cbfe	05 0c						.byte 5, IM+NN
>cc00	0b cc				                .word nt_asm_bit_x
>cc02	82 a9 87 a9					.word xt_asm_bit_h, z_asm_bit_h
>cc06	62 69 74 2e 23					.text "bit.#"
.cc0b					nt_asm_bit_x:
>cc0b	05 0c						.byte 5, IM+NN
>cc0d	18 cc				                .word nt_asm_bit_z
>cc0f	87 a9 8c a9					.word xt_asm_bit_x, z_asm_bit_x
>cc13	62 69 74 2e 78					.text "bit.x"
.cc18					nt_asm_bit_z:
>cc18	05 0c						.byte 5, IM+NN
>cc1a	25 cc				                .word nt_asm_bit_zx
>cc1c	8c a9 91 a9					.word xt_asm_bit_z, z_asm_bit_z
>cc20	62 69 74 2e 7a					.text "bit.z"
.cc25					nt_asm_bit_zx:
>cc25	06 0c						.byte 6, IM+NN
>cc27	33 cc				                .word nt_asm_bmi
>cc29	91 a9 96 a9					.word xt_asm_bit_zx, z_asm_bit_zx
>cc2d	62 69 74 2e 7a 78				.text "bit.zx"
.cc33					nt_asm_bmi:
>cc33	03 0c						.byte 3, IM+NN
>cc35	3e cc				                .word nt_asm_bne
>cc37	96 a9 9b a9					.word xt_asm_bmi, z_asm_bmi
>cc3b	62 6d 69					.text "bmi"
.cc3e					nt_asm_bne:
>cc3e	03 0c						.byte 3, IM+NN
>cc40	49 cc				                .word nt_asm_bpl
>cc42	9b a9 a0 a9					.word xt_asm_bne, z_asm_bne
>cc46	62 6e 65					.text "bne"
.cc49					nt_asm_bpl:
>cc49	03 0c						.byte 3, IM+NN
>cc4b	54 cc				                .word nt_asm_bra
>cc4d	a0 a9 a5 a9					.word xt_asm_bpl, z_asm_bpl
>cc51	62 70 6c					.text "bpl"
.cc54					nt_asm_bra:
>cc54	03 0c						.byte 3, IM+NN
>cc56	5f cc				                .word nt_asm_brk
>cc58	a5 a9 aa a9					.word xt_asm_bra, z_asm_bra
>cc5c	62 72 61					.text "bra"
.cc5f					nt_asm_brk:
>cc5f	03 0c						.byte 3, IM+NN
>cc61	6a cc				                .word nt_asm_bvc
>cc63	aa a9 af a9					.word xt_asm_brk, z_asm_brk
>cc67	62 72 6b					.text "brk"
.cc6a					nt_asm_bvc:
>cc6a	03 0c						.byte 3, IM+NN
>cc6c	75 cc				                .word nt_asm_bvs
>cc6e	af a9 b4 a9					.word xt_asm_bvc, z_asm_bvc
>cc72	62 76 63					.text "bvc"
.cc75					nt_asm_bvs:
>cc75	03 0c						.byte 3, IM+NN
>cc77	80 cc				                .word nt_asm_clc
>cc79	b4 a9 b9 a9					.word xt_asm_bvs, z_asm_bvs
>cc7d	62 76 73					.text "bvs"
.cc80					nt_asm_clc:
>cc80	03 0c						.byte 3, IM+NN
>cc82	8b cc				                .word nt_asm_cld
>cc84	b9 a9 be a9					.word xt_asm_clc, z_asm_clc
>cc88	63 6c 63					.text "clc"
.cc8b					nt_asm_cld:
>cc8b	03 0c						.byte 3, IM+NN
>cc8d	96 cc				                .word nt_asm_cli
>cc8f	be a9 c3 a9					.word xt_asm_cld, z_asm_cld
>cc93	63 6c 64					.text "cld"
.cc96					nt_asm_cli:
>cc96	03 0c						.byte 3, IM+NN
>cc98	a1 cc				                .word nt_asm_clv
>cc9a	c3 a9 c8 a9					.word xt_asm_cli, z_asm_cli
>cc9e	63 6c 69					.text "cli"
.cca1					nt_asm_clv:
>cca1	03 0c						.byte 3, IM+NN
>cca3	ac cc				                .word nt_asm_cmp
>cca5	c8 a9 cd a9					.word xt_asm_clv, z_asm_clv
>cca9	63 6c 76					.text "clv"
.ccac					nt_asm_cmp:
>ccac	03 0c						.byte 3, IM+NN
>ccae	b7 cc				                .word nt_asm_cmp_h
>ccb0	cd a9 d2 a9					.word xt_asm_cmp, z_asm_cmp
>ccb4	63 6d 70					.text "cmp"
.ccb7					nt_asm_cmp_h:
>ccb7	05 0c						.byte 5, IM+NN
>ccb9	c4 cc				                .word nt_asm_cmp_x
>ccbb	d2 a9 d7 a9					.word xt_asm_cmp_h, z_asm_cmp_h
>ccbf	63 6d 70 2e 23					.text "cmp.#"
.ccc4					nt_asm_cmp_x:
>ccc4	05 0c						.byte 5, IM+NN
>ccc6	d1 cc				                .word nt_asm_cmp_y
>ccc8	d7 a9 dc a9					.word xt_asm_cmp_x, z_asm_cmp_x
>cccc	63 6d 70 2e 78					.text "cmp.x"
.ccd1					nt_asm_cmp_y:
>ccd1	05 0c						.byte 5, IM+NN
>ccd3	de cc				                .word nt_asm_cmp_z
>ccd5	dc a9 e1 a9					.word xt_asm_cmp_y, z_asm_cmp_y
>ccd9	63 6d 70 2e 79					.text "cmp.y"
.ccde					nt_asm_cmp_z:
>ccde	05 0c						.byte 5, IM+NN
>cce0	eb cc				                .word nt_asm_cmp_zi
>cce2	e1 a9 e6 a9					.word xt_asm_cmp_z, z_asm_cmp_z
>cce6	63 6d 70 2e 7a					.text "cmp.z"
.cceb					nt_asm_cmp_zi:
>cceb	06 0c						.byte 6, IM+NN
>cced	f9 cc				                .word nt_asm_cmp_ziy
>ccef	e6 a9 eb a9					.word xt_asm_cmp_zi, z_asm_cmp_zi
>ccf3	63 6d 70 2e 7a 69				.text "cmp.zi"
.ccf9					nt_asm_cmp_ziy:
>ccf9	07 0c						.byte 7, IM+NN
>ccfb	08 cd				                .word nt_asm_cmp_zx
>ccfd	eb a9 f0 a9					.word xt_asm_cmp_ziy, z_asm_cmp_ziy
>cd01	63 6d 70 2e 7a 69 79				.text "cmp.ziy"
.cd08					nt_asm_cmp_zx:
>cd08	06 0c						.byte 6, IM+NN
>cd0a	16 cd				                .word nt_asm_cmp_zxi
>cd0c	f0 a9 f5 a9					.word xt_asm_cmp_zx, z_asm_cmp_zx
>cd10	63 6d 70 2e 7a 78				.text "cmp.zx"
.cd16					nt_asm_cmp_zxi:
>cd16	07 0c						.byte 7, IM+NN
>cd18	25 cd				                .word nt_asm_cpx
>cd1a	f5 a9 fa a9					.word xt_asm_cmp_zxi, z_asm_cmp_zxi
>cd1e	63 6d 70 2e 7a 78 69				.text "cmp.zxi"
.cd25					nt_asm_cpx:
>cd25	03 0c						.byte 3, IM+NN
>cd27	30 cd				                .word nt_asm_cpx_h
>cd29	fa a9 ff a9					.word xt_asm_cpx, z_asm_cpx
>cd2d	63 70 78					.text "cpx"
.cd30					nt_asm_cpx_h:
>cd30	05 0c						.byte 5, IM+NN
>cd32	3d cd				                .word nt_asm_cpx_z
>cd34	ff a9 04 aa					.word xt_asm_cpx_h, z_asm_cpx_h
>cd38	63 70 78 2e 23					.text "cpx.#"
.cd3d					nt_asm_cpx_z:
>cd3d	05 0c						.byte 5, IM+NN
>cd3f	4a cd				                .word nt_asm_cpy
>cd41	04 aa 09 aa					.word xt_asm_cpx_z, z_asm_cpx_z
>cd45	63 70 78 2e 7a					.text "cpx.z"
.cd4a					nt_asm_cpy:
>cd4a	03 0c						.byte 3, IM+NN
>cd4c	55 cd				                .word nt_asm_cpy_h
>cd4e	09 aa 10 aa					.word xt_asm_cpy, z_asm_cpy
>cd52	63 70 79					.text "cpy"
.cd55					nt_asm_cpy_h:
>cd55	05 0c						.byte 5, IM+NN
>cd57	62 cd				                .word nt_asm_cpy_z
>cd59	10 aa 15 aa					.word xt_asm_cpy_h, z_asm_cpy_h
>cd5d	63 70 79 2e 23					.text "cpy.#"
.cd62					nt_asm_cpy_z:
>cd62	05 0c						.byte 5, IM+NN
>cd64	6f cd				                .word nt_asm_dec
>cd66	15 aa 1a aa					.word xt_asm_cpy_z, z_asm_cpy_z
>cd6a	63 70 79 2e 7a					.text "cpy.z"
.cd6f					nt_asm_dec:
>cd6f	03 0c						.byte 3, IM+NN
>cd71	7a cd				                .word nt_asm_dec_a
>cd73	1a aa 1f aa					.word xt_asm_dec, z_asm_dec
>cd77	64 65 63					.text "dec"
.cd7a					nt_asm_dec_a:
>cd7a	05 0c						.byte 5, IM+NN
>cd7c	87 cd				                .word nt_asm_dec_x
>cd7e	1f aa 24 aa					.word xt_asm_dec_a, z_asm_dec_a
>cd82	64 65 63 2e 61					.text "dec.a"
.cd87					nt_asm_dec_x:
>cd87	05 0c						.byte 5, IM+NN
>cd89	94 cd				                .word nt_asm_dec_z
>cd8b	24 aa 29 aa					.word xt_asm_dec_x, z_asm_dec_x
>cd8f	64 65 63 2e 78					.text "dec.x"
.cd94					nt_asm_dec_z:
>cd94	05 0c						.byte 5, IM+NN
>cd96	a1 cd				                .word nt_asm_dec_zx
>cd98	29 aa 2e aa					.word xt_asm_dec_z, z_asm_dec_z
>cd9c	64 65 63 2e 7a					.text "dec.z"
.cda1					nt_asm_dec_zx:
>cda1	06 0c						.byte 6, IM+NN
>cda3	af cd				                .word nt_asm_dex
>cda5	2e aa 33 aa					.word xt_asm_dec_zx, z_asm_dec_zx
>cda9	64 65 63 2e 7a 78				.text "dec.zx"
.cdaf					nt_asm_dex:
>cdaf	03 0c						.byte 3, IM+NN
>cdb1	ba cd				                .word nt_asm_dey
>cdb3	33 aa 38 aa					.word xt_asm_dex, z_asm_dex
>cdb7	64 65 78					.text "dex"
.cdba					nt_asm_dey:
>cdba	03 0c						.byte 3, IM+NN
>cdbc	c5 cd				                .word nt_asm_eor
>cdbe	38 aa 3d aa					.word xt_asm_dey, z_asm_dey
>cdc2	64 65 79					.text "dey"
.cdc5					nt_asm_eor:
>cdc5	03 0c						.byte 3, IM+NN
>cdc7	d0 cd				                .word nt_asm_eor_h
>cdc9	3d aa 42 aa					.word xt_asm_eor, z_asm_eor
>cdcd	65 6f 72					.text "eor"
.cdd0					nt_asm_eor_h:
>cdd0	05 0c						.byte 5, IM+NN
>cdd2	dd cd				                .word nt_asm_eor_x
>cdd4	42 aa 47 aa					.word xt_asm_eor_h, z_asm_eor_h
>cdd8	65 6f 72 2e 23					.text "eor.#"
.cddd					nt_asm_eor_x:
>cddd	05 0c						.byte 5, IM+NN
>cddf	ea cd				                .word nt_asm_eor_y
>cde1	47 aa 4c aa					.word xt_asm_eor_x, z_asm_eor_x
>cde5	65 6f 72 2e 78					.text "eor.x"
.cdea					nt_asm_eor_y:
>cdea	05 0c						.byte 5, IM+NN
>cdec	f7 cd				                .word nt_asm_eor_z
>cdee	4c aa 51 aa					.word xt_asm_eor_y, z_asm_eor_y
>cdf2	65 6f 72 2e 79					.text "eor.y"
.cdf7					nt_asm_eor_z:
>cdf7	05 0c						.byte 5, IM+NN
>cdf9	04 ce				                .word nt_asm_eor_zi
>cdfb	51 aa 56 aa					.word xt_asm_eor_z, z_asm_eor_z
>cdff	65 6f 72 2e 7a					.text "eor.z"
.ce04					nt_asm_eor_zi:
>ce04	06 0c						.byte 6, IM+NN
>ce06	12 ce				                .word nt_asm_eor_ziy
>ce08	56 aa 5b aa					.word xt_asm_eor_zi, z_asm_eor_zi
>ce0c	65 6f 72 2e 7a 69				.text "eor.zi"
.ce12					nt_asm_eor_ziy:
>ce12	07 0c						.byte 7, IM+NN
>ce14	21 ce				                .word nt_asm_eor_zx
>ce16	5b aa 60 aa					.word xt_asm_eor_ziy, z_asm_eor_ziy
>ce1a	65 6f 72 2e 7a 69 79				.text "eor.ziy"
.ce21					nt_asm_eor_zx:
>ce21	06 0c						.byte 6, IM+NN
>ce23	2f ce				                .word nt_asm_eor_zxi
>ce25	60 aa 65 aa					.word xt_asm_eor_zx, z_asm_eor_zx
>ce29	65 6f 72 2e 7a 78				.text "eor.zx"
.ce2f					nt_asm_eor_zxi:
>ce2f	07 0c						.byte 7, IM+NN
>ce31	3e ce				                .word nt_asm_inc
>ce33	65 aa 6a aa					.word xt_asm_eor_zxi, z_asm_eor_zxi
>ce37	65 6f 72 2e 7a 78 69				.text "eor.zxi"
.ce3e					nt_asm_inc:
>ce3e	03 0c						.byte 3, IM+NN
>ce40	49 ce				                .word nt_asm_inc_a
>ce42	6a aa 6f aa					.word xt_asm_inc, z_asm_inc
>ce46	69 6e 63					.text "inc"
.ce49					nt_asm_inc_a:
>ce49	05 0c						.byte 5, IM+NN
>ce4b	56 ce				                .word nt_asm_inc_x
>ce4d	6f aa 74 aa					.word xt_asm_inc_a, z_asm_inc_a
>ce51	69 6e 63 2e 61					.text "inc.a"
.ce56					nt_asm_inc_x:
>ce56	05 0c						.byte 5, IM+NN
>ce58	63 ce				                .word nt_asm_inc_z
>ce5a	74 aa 79 aa					.word xt_asm_inc_x, z_asm_inc_x
>ce5e	69 6e 63 2e 78					.text "inc.x"
.ce63					nt_asm_inc_z:
>ce63	05 0c						.byte 5, IM+NN
>ce65	70 ce				                .word nt_asm_inc_zx
>ce67	79 aa 7e aa					.word xt_asm_inc_z, z_asm_inc_z
>ce6b	69 6e 63 2e 7a					.text "inc.z"
.ce70					nt_asm_inc_zx:
>ce70	06 0c						.byte 6, IM+NN
>ce72	7e ce				                .word nt_asm_inx
>ce74	7e aa 83 aa					.word xt_asm_inc_zx, z_asm_inc_zx
>ce78	69 6e 63 2e 7a 78				.text "inc.zx"
.ce7e					nt_asm_inx:
>ce7e	03 0c						.byte 3, IM+NN
>ce80	89 ce				                .word nt_asm_iny
>ce82	83 aa 88 aa					.word xt_asm_inx, z_asm_inx
>ce86	69 6e 78					.text "inx"
.ce89					nt_asm_iny:
>ce89	03 0c						.byte 3, IM+NN
>ce8b	94 ce				                .word nt_asm_jmp
>ce8d	88 aa 8d aa					.word xt_asm_iny, z_asm_iny
>ce91	69 6e 79					.text "iny"
.ce94					nt_asm_jmp:
>ce94	03 0c						.byte 3, IM+NN
>ce96	9f ce				                .word nt_asm_jmp_i
>ce98	8d aa 92 aa					.word xt_asm_jmp, z_asm_jmp
>ce9c	6a 6d 70					.text "jmp"
.ce9f					nt_asm_jmp_i:
>ce9f	05 0c						.byte 5, IM+NN
>cea1	ac ce				                .word nt_asm_jmp_xi
>cea3	92 aa 97 aa					.word xt_asm_jmp_i, z_asm_jmp_i
>cea7	6a 6d 70 2e 69					.text "jmp.i"
.ceac					nt_asm_jmp_xi:
>ceac	06 0c						.byte 6, IM+NN
>ceae	ba ce				                .word nt_asm_jsr
>ceb0	97 aa 9c aa					.word xt_asm_jmp_xi, z_asm_jmp_xi
>ceb4	6a 6d 70 2e 78 69				.text "jmp.xi"
.ceba					nt_asm_jsr:
>ceba	03 0c						.byte 3, IM+NN
>cebc	c5 ce				                .word nt_asm_lda
>cebe	9c aa a1 aa					.word xt_asm_jsr, z_asm_jsr
>cec2	6a 73 72					.text "jsr"
.cec5					nt_asm_lda:
>cec5	03 0c						.byte 3, IM+NN
>cec7	d0 ce				                .word nt_asm_lda_h
>cec9	a1 aa a6 aa					.word xt_asm_lda, z_asm_lda
>cecd	6c 64 61					.text "lda"
.ced0					nt_asm_lda_h:
>ced0	05 0c						.byte 5, IM+NN
>ced2	dd ce				                .word nt_asm_lda_x
>ced4	a6 aa ab aa					.word xt_asm_lda_h, z_asm_lda_h
>ced8	6c 64 61 2e 23					.text "lda.#"
.cedd					nt_asm_lda_x:
>cedd	05 0c						.byte 5, IM+NN
>cedf	ea ce				                .word nt_asm_lda_y
>cee1	ab aa b0 aa					.word xt_asm_lda_x, z_asm_lda_x
>cee5	6c 64 61 2e 78					.text "lda.x"
.ceea					nt_asm_lda_y:
>ceea	05 0c						.byte 5, IM+NN
>ceec	f7 ce				                .word nt_asm_lda_z
>ceee	b0 aa b5 aa					.word xt_asm_lda_y, z_asm_lda_y
>cef2	6c 64 61 2e 79					.text "lda.y"
.cef7					nt_asm_lda_z:
>cef7	05 0c						.byte 5, IM+NN
>cef9	04 cf				                .word nt_asm_lda_zi
>cefb	b5 aa ba aa					.word xt_asm_lda_z, z_asm_lda_z
>ceff	6c 64 61 2e 7a					.text "lda.z"
.cf04					nt_asm_lda_zi:
>cf04	06 0c						.byte 6, IM+NN
>cf06	12 cf				                .word nt_asm_lda_ziy
>cf08	ba aa bf aa					.word xt_asm_lda_zi, z_asm_lda_zi
>cf0c	6c 64 61 2e 7a 69				.text "lda.zi"
.cf12					nt_asm_lda_ziy:
>cf12	07 0c						.byte 7, IM+NN
>cf14	21 cf				                .word nt_asm_lda_zx
>cf16	bf aa c4 aa					.word xt_asm_lda_ziy, z_asm_lda_ziy
>cf1a	6c 64 61 2e 7a 69 79				.text "lda.ziy"
.cf21					nt_asm_lda_zx:
>cf21	06 0c						.byte 6, IM+NN
>cf23	2f cf				                .word nt_asm_lda_zxi
>cf25	c4 aa c9 aa					.word xt_asm_lda_zx, z_asm_lda_zx
>cf29	6c 64 61 2e 7a 78				.text "lda.zx"
.cf2f					nt_asm_lda_zxi:
>cf2f	07 0c						.byte 7, IM+NN
>cf31	3e cf				                .word nt_asm_ldx
>cf33	c9 aa ce aa					.word xt_asm_lda_zxi, z_asm_lda_zxi
>cf37	6c 64 61 2e 7a 78 69				.text "lda.zxi"
.cf3e					nt_asm_ldx:
>cf3e	03 0c						.byte 3, IM+NN
>cf40	49 cf				                .word nt_asm_ldx_h
>cf42	ce aa d3 aa					.word xt_asm_ldx, z_asm_ldx
>cf46	6c 64 78					.text "ldx"
.cf49					nt_asm_ldx_h:
>cf49	05 0c						.byte 5, IM+NN
>cf4b	56 cf				                .word nt_asm_ldx_y
>cf4d	d3 aa d8 aa					.word xt_asm_ldx_h, z_asm_ldx_h
>cf51	6c 64 78 2e 23					.text "ldx.#"
.cf56					nt_asm_ldx_y:
>cf56	05 0c						.byte 5, IM+NN
>cf58	63 cf				                .word nt_asm_ldx_z
>cf5a	d8 aa dd aa					.word xt_asm_ldx_y, z_asm_ldx_y
>cf5e	6c 64 78 2e 79					.text "ldx.y"
.cf63					nt_asm_ldx_z:
>cf63	05 0c						.byte 5, IM+NN
>cf65	70 cf				                .word nt_asm_ldx_zy
>cf67	dd aa e2 aa					.word xt_asm_ldx_z, z_asm_ldx_z
>cf6b	6c 64 78 2e 7a					.text "ldx.z"
.cf70					nt_asm_ldx_zy:
>cf70	06 0c						.byte 6, IM+NN
>cf72	7e cf				                .word nt_asm_ldy
>cf74	e2 aa e7 aa					.word xt_asm_ldx_zy, z_asm_ldx_zy
>cf78	6c 64 78 2e 7a 79				.text "ldx.zy"
.cf7e					nt_asm_ldy:
>cf7e	03 0c						.byte 3, IM+NN
>cf80	89 cf				                .word nt_asm_ldy_h
>cf82	e7 aa ec aa					.word xt_asm_ldy, z_asm_ldy
>cf86	6c 64 79					.text "ldy"
.cf89					nt_asm_ldy_h:
>cf89	05 0c						.byte 5, IM+NN
>cf8b	96 cf				                .word nt_asm_ldy_x
>cf8d	ec aa f1 aa					.word xt_asm_ldy_h, z_asm_ldy_h
>cf91	6c 64 79 2e 23					.text "ldy.#"
.cf96					nt_asm_ldy_x:
>cf96	05 0c						.byte 5, IM+NN
>cf98	a3 cf				                .word nt_asm_ldy_z
>cf9a	f1 aa f6 aa					.word xt_asm_ldy_x, z_asm_ldy_x
>cf9e	6c 64 79 2e 78					.text "ldy.x"
.cfa3					nt_asm_ldy_z:
>cfa3	05 0c						.byte 5, IM+NN
>cfa5	b0 cf				                .word nt_asm_ldy_zx
>cfa7	f6 aa fb aa					.word xt_asm_ldy_z, z_asm_ldy_z
>cfab	6c 64 79 2e 7a					.text "ldy.z"
.cfb0					nt_asm_ldy_zx:
>cfb0	06 0c						.byte 6, IM+NN
>cfb2	be cf				                .word nt_asm_lsr
>cfb4	fb aa 00 ab					.word xt_asm_ldy_zx, z_asm_ldy_zx
>cfb8	6c 64 79 2e 7a 78				.text "ldy.zx"
.cfbe					nt_asm_lsr:
>cfbe	03 0c						.byte 3, IM+NN
>cfc0	c9 cf				                .word nt_asm_lsr_a
>cfc2	00 ab 05 ab					.word xt_asm_lsr, z_asm_lsr
>cfc6	6c 73 72					.text "lsr"
.cfc9					nt_asm_lsr_a:
>cfc9	05 0c						.byte 5, IM+NN
>cfcb	d6 cf				                .word nt_asm_lsr_x
>cfcd	05 ab 0a ab					.word xt_asm_lsr_a, z_asm_lsr_a
>cfd1	6c 73 72 2e 61					.text "lsr.a"
.cfd6					nt_asm_lsr_x:
>cfd6	05 0c						.byte 5, IM+NN
>cfd8	e3 cf				                .word nt_asm_lsr_z
>cfda	0a ab 0f ab					.word xt_asm_lsr_x, z_asm_lsr_x
>cfde	6c 73 72 2e 78					.text "lsr.x"
.cfe3					nt_asm_lsr_z:
>cfe3	05 0c						.byte 5, IM+NN
>cfe5	f0 cf				                .word nt_asm_lsr_zx
>cfe7	0f ab 14 ab					.word xt_asm_lsr_z, z_asm_lsr_z
>cfeb	6c 73 72 2e 7a					.text "lsr.z"
.cff0					nt_asm_lsr_zx:
>cff0	06 0c						.byte 6, IM+NN
>cff2	fe cf				                .word nt_asm_nop
>cff4	14 ab 19 ab					.word xt_asm_lsr_zx, z_asm_lsr_zx
>cff8	6c 73 72 2e 7a 78				.text "lsr.zx"
.cffe					nt_asm_nop:
>cffe	03 0c						.byte 3, IM+NN
>d000	09 d0				                .word nt_asm_ora
>d002	19 ab 1e ab					.word xt_asm_nop, z_asm_nop
>d006	6e 6f 70					.text "nop"
.d009					nt_asm_ora:
>d009	03 0c						.byte 3, IM+NN
>d00b	14 d0				                .word nt_asm_ora_h
>d00d	1e ab 23 ab					.word xt_asm_ora, z_asm_ora
>d011	6f 72 61					.text "ora"
.d014					nt_asm_ora_h:
>d014	05 0c						.byte 5, IM+NN
>d016	21 d0				                .word nt_asm_ora_x
>d018	23 ab 28 ab					.word xt_asm_ora_h, z_asm_ora_h
>d01c	6f 72 61 2e 23					.text "ora.#"
.d021					nt_asm_ora_x:
>d021	05 0c						.byte 5, IM+NN
>d023	2e d0				                .word nt_asm_ora_y
>d025	28 ab 2d ab					.word xt_asm_ora_x, z_asm_ora_x
>d029	6f 72 61 2e 78					.text "ora.x"
.d02e					nt_asm_ora_y:
>d02e	05 0c						.byte 5, IM+NN
>d030	3b d0				                .word nt_asm_ora_z
>d032	2d ab 32 ab					.word xt_asm_ora_y, z_asm_ora_y
>d036	6f 72 61 2e 79					.text "ora.y"
.d03b					nt_asm_ora_z:
>d03b	05 0c						.byte 5, IM+NN
>d03d	48 d0				                .word nt_asm_ora_zi
>d03f	32 ab 37 ab					.word xt_asm_ora_z, z_asm_ora_z
>d043	6f 72 61 2e 7a					.text "ora.z"
.d048					nt_asm_ora_zi:
>d048	06 0c						.byte 6, IM+NN
>d04a	56 d0				                .word nt_asm_ora_ziy
>d04c	37 ab 3e ab					.word xt_asm_ora_zi, z_asm_ora_zi
>d050	6f 72 61 2e 7a 69				.text "ora.zi"
.d056					nt_asm_ora_ziy:
>d056	07 0c						.byte 7, IM+NN
>d058	65 d0				                .word nt_asm_ora_zx
>d05a	3e ab 43 ab					.word xt_asm_ora_ziy, z_asm_ora_ziy
>d05e	6f 72 61 2e 7a 69 79				.text "ora.ziy"
.d065					nt_asm_ora_zx:
>d065	06 0c						.byte 6, IM+NN
>d067	73 d0				                .word nt_asm_ora_zxi
>d069	43 ab 48 ab					.word xt_asm_ora_zx, z_asm_ora_zx
>d06d	6f 72 61 2e 7a 78				.text "ora.zx"
.d073					nt_asm_ora_zxi:
>d073	07 0c						.byte 7, IM+NN
>d075	82 d0				                .word nt_asm_pha
>d077	48 ab 4d ab					.word xt_asm_ora_zxi, z_asm_ora_zxi
>d07b	6f 72 61 2e 7a 78 69				.text "ora.zxi"
.d082					nt_asm_pha:
>d082	03 0c						.byte 3, IM+NN
>d084	8d d0				                .word nt_asm_php
>d086	4d ab 52 ab					.word xt_asm_pha, z_asm_pha
>d08a	70 68 61					.text "pha"
.d08d					nt_asm_php:
>d08d	03 0c						.byte 3, IM+NN
>d08f	98 d0				                .word nt_asm_phx
>d091	52 ab 57 ab					.word xt_asm_php, z_asm_php
>d095	70 68 70					.text "php"
.d098					nt_asm_phx:
>d098	03 0c						.byte 3, IM+NN
>d09a	a3 d0				                .word nt_asm_phy
>d09c	57 ab 5c ab					.word xt_asm_phx, z_asm_phx
>d0a0	70 68 78					.text "phx"
.d0a3					nt_asm_phy:
>d0a3	03 0c						.byte 3, IM+NN
>d0a5	ae d0				                .word nt_asm_pla
>d0a7	5c ab 61 ab					.word xt_asm_phy, z_asm_phy
>d0ab	70 68 79					.text "phy"
.d0ae					nt_asm_pla:
>d0ae	03 0c						.byte 3, IM+NN
>d0b0	b9 d0				                .word nt_asm_plp
>d0b2	61 ab 66 ab					.word xt_asm_pla, z_asm_pla
>d0b6	70 6c 61					.text "pla"
.d0b9					nt_asm_plp:
>d0b9	03 0c						.byte 3, IM+NN
>d0bb	c4 d0				                .word nt_asm_plx
>d0bd	66 ab 6b ab					.word xt_asm_plp, z_asm_plp
>d0c1	70 6c 70					.text "plp"
.d0c4					nt_asm_plx:
>d0c4	03 0c						.byte 3, IM+NN
>d0c6	cf d0				                .word nt_asm_ply
>d0c8	6b ab 70 ab					.word xt_asm_plx, z_asm_plx
>d0cc	70 6c 78					.text "plx"
.d0cf					nt_asm_ply:
>d0cf	03 0c						.byte 3, IM+NN
>d0d1	da d0				                .word nt_asm_rol
>d0d3	70 ab 75 ab					.word xt_asm_ply, z_asm_ply
>d0d7	70 6c 79					.text "ply"
.d0da					nt_asm_rol:
>d0da	03 0c						.byte 3, IM+NN
>d0dc	e5 d0				                .word nt_asm_rol_a
>d0de	75 ab 7a ab					.word xt_asm_rol, z_asm_rol
>d0e2	72 6f 6c					.text "rol"
.d0e5					nt_asm_rol_a:
>d0e5	05 0c						.byte 5, IM+NN
>d0e7	f2 d0				                .word nt_asm_rol_x
>d0e9	7a ab 7f ab					.word xt_asm_rol_a, z_asm_rol_a
>d0ed	72 6f 6c 2e 61					.text "rol.a"
.d0f2					nt_asm_rol_x:
>d0f2	05 0c						.byte 5, IM+NN
>d0f4	ff d0				                .word nt_asm_rol_z
>d0f6	7f ab 84 ab					.word xt_asm_rol_x, z_asm_rol_x
>d0fa	72 6f 6c 2e 78					.text "rol.x"
.d0ff					nt_asm_rol_z:
>d0ff	05 0c						.byte 5, IM+NN
>d101	0c d1				                .word nt_asm_rol_zx
>d103	84 ab 89 ab					.word xt_asm_rol_z, z_asm_rol_z
>d107	72 6f 6c 2e 7a					.text "rol.z"
.d10c					nt_asm_rol_zx:
>d10c	06 0c						.byte 6, IM+NN
>d10e	1a d1				                .word nt_asm_ror
>d110	89 ab 8e ab					.word xt_asm_rol_zx, z_asm_rol_zx
>d114	72 6f 6c 2e 7a 78				.text "rol.zx"
.d11a					nt_asm_ror:
>d11a	03 0c						.byte 3, IM+NN
>d11c	25 d1				                .word nt_asm_ror_a
>d11e	8e ab 93 ab					.word xt_asm_ror, z_asm_ror
>d122	72 6f 72					.text "ror"
.d125					nt_asm_ror_a:
>d125	05 0c						.byte 5, IM+NN
>d127	32 d1				                .word nt_asm_ror_x
>d129	93 ab 98 ab					.word xt_asm_ror_a, z_asm_ror_a
>d12d	72 6f 72 2e 61					.text "ror.a"
.d132					nt_asm_ror_x:
>d132	05 0c						.byte 5, IM+NN
>d134	3f d1				                .word nt_asm_ror_z
>d136	98 ab 9d ab					.word xt_asm_ror_x, z_asm_ror_x
>d13a	72 6f 72 2e 78					.text "ror.x"
.d13f					nt_asm_ror_z:
>d13f	05 0c						.byte 5, IM+NN
>d141	4c d1				                .word nt_asm_ror_zx
>d143	9d ab a2 ab					.word xt_asm_ror_z, z_asm_ror_z
>d147	72 6f 72 2e 7a					.text "ror.z"
.d14c					nt_asm_ror_zx:
>d14c	06 0c						.byte 6, IM+NN
>d14e	5a d1				                .word nt_asm_rti
>d150	a2 ab a7 ab					.word xt_asm_ror_zx, z_asm_ror_zx
>d154	72 6f 72 2e 7a 78				.text "ror.zx"
.d15a					nt_asm_rti:
>d15a	03 0c						.byte 3, IM+NN
>d15c	65 d1				                .word nt_asm_rts
>d15e	a7 ab ac ab					.word xt_asm_rti, z_asm_rti
>d162	72 74 69					.text "rti"
.d165					nt_asm_rts:
>d165	03 0c						.byte 3, IM+NN
>d167	70 d1				                .word nt_asm_sbc
>d169	ac ab b1 ab					.word xt_asm_rts, z_asm_rts
>d16d	72 74 73					.text "rts"
.d170					nt_asm_sbc:
>d170	03 0c						.byte 3, IM+NN
>d172	7b d1				                .word nt_asm_sbc_h
>d174	b1 ab b6 ab					.word xt_asm_sbc, z_asm_sbc
>d178	73 62 63					.text "sbc"
.d17b					nt_asm_sbc_h:
>d17b	05 0c						.byte 5, IM+NN
>d17d	88 d1				                .word nt_asm_sbc_x
>d17f	b6 ab bb ab					.word xt_asm_sbc_h, z_asm_sbc_h
>d183	73 62 63 2e 23					.text "sbc.#"
.d188					nt_asm_sbc_x:
>d188	05 0c						.byte 5, IM+NN
>d18a	95 d1				                .word nt_asm_sbc_y
>d18c	bb ab c0 ab					.word xt_asm_sbc_x, z_asm_sbc_x
>d190	73 62 63 2e 78					.text "sbc.x"
.d195					nt_asm_sbc_y:
>d195	05 0c						.byte 5, IM+NN
>d197	a2 d1				                .word nt_asm_sbc_z
>d199	c0 ab c5 ab					.word xt_asm_sbc_y, z_asm_sbc_y
>d19d	73 62 63 2e 79					.text "sbc.y"
.d1a2					nt_asm_sbc_z:
>d1a2	05 0c						.byte 5, IM+NN
>d1a4	af d1				                .word nt_asm_sbc_zi
>d1a6	c5 ab ca ab					.word xt_asm_sbc_z, z_asm_sbc_z
>d1aa	73 62 63 2e 7a					.text "sbc.z"
.d1af					nt_asm_sbc_zi:
>d1af	06 0c						.byte 6, IM+NN
>d1b1	bd d1				                .word nt_asm_sbc_ziy
>d1b3	ca ab cf ab					.word xt_asm_sbc_zi, z_asm_sbc_zi
>d1b7	73 62 63 2e 7a 69				.text "sbc.zi"
.d1bd					nt_asm_sbc_ziy:
>d1bd	07 0c						.byte 7, IM+NN
>d1bf	cc d1				                .word nt_asm_sbc_zx
>d1c1	cf ab d4 ab					.word xt_asm_sbc_ziy, z_asm_sbc_ziy
>d1c5	73 62 63 2e 7a 69 79				.text "sbc.ziy"
.d1cc					nt_asm_sbc_zx:
>d1cc	06 0c						.byte 6, IM+NN
>d1ce	da d1				                .word nt_asm_sbc_zxi
>d1d0	d4 ab d9 ab					.word xt_asm_sbc_zx, z_asm_sbc_zx
>d1d4	73 62 63 2e 7a 78				.text "sbc.zx"
.d1da					nt_asm_sbc_zxi:
>d1da	07 0c						.byte 7, IM+NN
>d1dc	e9 d1				                .word nt_asm_sec
>d1de	d9 ab dd ab					.word xt_asm_sbc_zxi, z_asm_sbc_zxi
>d1e2	73 62 63 2e 7a 78 69				.text "sbc.zxi"
.d1e9					nt_asm_sec:
>d1e9	03 0c						.byte 3, IM+NN
>d1eb	f4 d1				                .word nt_asm_sed
>d1ed	dd ab e1 ab					.word xt_asm_sec, z_asm_sec
>d1f1	73 65 63					.text "sec"
.d1f4					nt_asm_sed:
>d1f4	03 0c						.byte 3, IM+NN
>d1f6	ff d1				                .word nt_asm_sei
>d1f8	e1 ab e5 ab					.word xt_asm_sed, z_asm_sed
>d1fc	73 65 64					.text "sed"
.d1ff					nt_asm_sei:
>d1ff	03 0c						.byte 3, IM+NN
>d201	0a d2				                .word nt_asm_sta
>d203	e5 ab e9 ab					.word xt_asm_sei, z_asm_sei
>d207	73 65 69					.text "sei"
.d20a					nt_asm_sta:
>d20a	03 0c						.byte 3, IM+NN
>d20c	15 d2				                .word nt_asm_sta_x
>d20e	e9 ab ed ab					.word xt_asm_sta, z_asm_sta
>d212	73 74 61					.text "sta"
.d215					nt_asm_sta_x:
>d215	05 0c						.byte 5, IM+NN
>d217	22 d2				                .word nt_asm_sta_y
>d219	ed ab f1 ab					.word xt_asm_sta_x, z_asm_sta_x
>d21d	73 74 61 2e 78					.text "sta.x"
.d222					nt_asm_sta_y:
>d222	05 0c						.byte 5, IM+NN
>d224	2f d2				                .word nt_asm_sta_z
>d226	f1 ab f5 ab					.word xt_asm_sta_y, z_asm_sta_y
>d22a	73 74 61 2e 79					.text "sta.y"
.d22f					nt_asm_sta_z:
>d22f	05 0c						.byte 5, IM+NN
>d231	3c d2				                .word nt_asm_sta_zi
>d233	f5 ab f9 ab					.word xt_asm_sta_z, z_asm_sta_z
>d237	73 74 61 2e 7a					.text "sta.z"
.d23c					nt_asm_sta_zi:
>d23c	06 0c						.byte 6, IM+NN
>d23e	4a d2				                .word nt_asm_sta_ziy
>d240	f9 ab fd ab					.word xt_asm_sta_zi, z_asm_sta_zi
>d244	73 74 61 2e 7a 69				.text "sta.zi"
.d24a					nt_asm_sta_ziy:
>d24a	07 0c						.byte 7, IM+NN
>d24c	59 d2				                .word nt_asm_sta_zx
>d24e	fd ab 01 ac					.word xt_asm_sta_ziy, z_asm_sta_ziy
>d252	73 74 61 2e 7a 69 79				.text "sta.ziy"
.d259					nt_asm_sta_zx:
>d259	06 0c						.byte 6, IM+NN
>d25b	67 d2				                .word nt_asm_sta_zxi
>d25d	01 ac 05 ac					.word xt_asm_sta_zx, z_asm_sta_zx
>d261	73 74 61 2e 7a 78				.text "sta.zx"
.d267					nt_asm_sta_zxi:
>d267	07 0c						.byte 7, IM+NN
>d269	76 d2				                .word nt_asm_stx
>d26b	05 ac 09 ac					.word xt_asm_sta_zxi, z_asm_sta_zxi
>d26f	73 74 61 2e 7a 78 69				.text "sta.zxi"
.d276					nt_asm_stx:
>d276	03 0c						.byte 3, IM+NN
>d278	81 d2				                .word nt_asm_stx_z
>d27a	09 ac 0d ac					.word xt_asm_stx, z_asm_stx
>d27e	73 74 78					.text "stx"
.d281					nt_asm_stx_z:
>d281	05 0c						.byte 5, IM+NN
>d283	8e d2				                .word nt_asm_stx_zy
>d285	0d ac 11 ac					.word xt_asm_stx_z, z_asm_stx_z
>d289	73 74 78 2e 7a					.text "stx.z"
.d28e					nt_asm_stx_zy:
>d28e	06 0c						.byte 6, IM+NN
>d290	9c d2				                .word nt_asm_sty
>d292	11 ac 15 ac					.word xt_asm_stx_zy, z_asm_stx_zy
>d296	73 74 78 2e 7a 79				.text "stx.zy"
.d29c					nt_asm_sty:
>d29c	03 0c						.byte 3, IM+NN
>d29e	a7 d2				                .word nt_asm_sty_z
>d2a0	15 ac 19 ac					.word xt_asm_sty, z_asm_sty
>d2a4	73 74 79					.text "sty"
.d2a7					nt_asm_sty_z:
>d2a7	05 0c						.byte 5, IM+NN
>d2a9	b4 d2				                .word nt_asm_sty_zx
>d2ab	19 ac 1d ac					.word xt_asm_sty_z, z_asm_sty_z
>d2af	73 74 79 2e 7a					.text "sty.z"
.d2b4					nt_asm_sty_zx:
>d2b4	06 0c						.byte 6, IM+NN
>d2b6	c2 d2				                .word nt_asm_stz
>d2b8	1d ac 21 ac					.word xt_asm_sty_zx, z_asm_sty_zx
>d2bc	73 74 79 2e 7a 78				.text "sty.zx"
.d2c2					nt_asm_stz:
>d2c2	03 0c						.byte 3, IM+NN
>d2c4	cd d2				                .word nt_asm_stz_x
>d2c6	21 ac 25 ac					.word xt_asm_stz, z_asm_stz
>d2ca	73 74 7a					.text "stz"
.d2cd					nt_asm_stz_x:
>d2cd	05 0c						.byte 5, IM+NN
>d2cf	da d2				                .word nt_asm_stz_z
>d2d1	25 ac 29 ac					.word xt_asm_stz_x, z_asm_stz_x
>d2d5	73 74 7a 2e 78					.text "stz.x"
.d2da					nt_asm_stz_z:
>d2da	05 0c						.byte 5, IM+NN
>d2dc	e7 d2				                .word nt_asm_stz_zx
>d2de	29 ac 2d ac					.word xt_asm_stz_z, z_asm_stz_z
>d2e2	73 74 7a 2e 7a					.text "stz.z"
.d2e7					nt_asm_stz_zx:
>d2e7	06 0c						.byte 6, IM+NN
>d2e9	f5 d2				                .word nt_asm_tax
>d2eb	2d ac 31 ac					.word xt_asm_stz_zx, z_asm_stz_zx
>d2ef	73 74 7a 2e 7a 78				.text "stz.zx"
.d2f5					nt_asm_tax:
>d2f5	03 0c						.byte 3, IM+NN
>d2f7	00 d3				                .word nt_asm_tay
>d2f9	31 ac 35 ac					.word xt_asm_tax, z_asm_tax
>d2fd	74 61 78					.text "tax"
.d300					nt_asm_tay:
>d300	03 0c						.byte 3, IM+NN
>d302	0b d3				                .word nt_asm_trb
>d304	35 ac 39 ac					.word xt_asm_tay, z_asm_tay
>d308	74 61 79					.text "tay"
.d30b					nt_asm_trb:
>d30b	03 0c						.byte 3, IM+NN
>d30d	16 d3				                .word nt_asm_trb_z
>d30f	39 ac 3d ac					.word xt_asm_trb, z_asm_trb
>d313	74 72 62					.text "trb"
.d316					nt_asm_trb_z:
>d316	05 0c						.byte 5, IM+NN
>d318	23 d3				                .word nt_asm_tsb
>d31a	3d ac 41 ac					.word xt_asm_trb_z, z_asm_trb_z
>d31e	74 72 62 2e 7a					.text "trb.z"
.d323					nt_asm_tsb:
>d323	03 0c						.byte 3, IM+NN
>d325	2e d3				                .word nt_asm_tsb_z
>d327	41 ac 45 ac					.word xt_asm_tsb, z_asm_tsb
>d32b	74 73 62					.text "tsb"
.d32e					nt_asm_tsb_z:
>d32e	05 0c						.byte 5, IM+NN
>d330	3b d3				                .word nt_asm_tsx
>d332	45 ac 49 ac					.word xt_asm_tsb_z, z_asm_tsb_z
>d336	74 73 62 2e 7a					.text "tsb.z"
.d33b					nt_asm_tsx:
>d33b	03 0c						.byte 3, IM+NN
>d33d	46 d3				                .word nt_asm_txa
>d33f	49 ac 4d ac					.word xt_asm_tsx, z_asm_tsx
>d343	74 73 78					.text "tsx"
.d346					nt_asm_txa:
>d346	03 0c						.byte 3, IM+NN
>d348	51 d3				                .word nt_asm_txs
>d34a	4d ac 51 ac					.word xt_asm_txa, z_asm_txa
>d34e	74 78 61					.text "txa"
.d351					nt_asm_txs:
>d351	03 0c						.byte 3, IM+NN
>d353	5c d3				                .word nt_asm_tya
>d355	51 ac 55 ac					.word xt_asm_txs, z_asm_txs
>d359	74 78 73					.text "txs"
.d35c					nt_asm_tya:
>d35c	03 0c						.byte 3, IM+NN
>d35e	67 d3				                .word nt_asm_arrow
>d360	55 ac 59 ac					.word xt_asm_tya, z_asm_tya
>d364	74 79 61					.text "tya"
.d367					nt_asm_arrow:
>d367	03 04				                .byte 3, IM
>d369	72 d3				                .word nt_asm_back_jump
>d36b	7e 91 88 91			                .word xt_asm_arrow, z_asm_arrow
>d36f	2d 2d 3e			                .text "-->"
.d372					nt_asm_back_jump:
>d372	02 04				                .byte 2, IM
>d374	7c d3				                .word nt_asm_back_branch
>d376	aa ac aa ac			                .word xt_asm_back_jump, z_asm_back_jump
>d37a	3c 6a				                .text "<j"
.d37c					nt_asm_back_branch:
>d37c	02 04				                .byte 2, IM
>d37e	86 d3				                .word nt_asm_push_a
>d380	ab ac b3 ac			                .word xt_asm_back_branch, z_asm_back_branch
>d384	3c 62				                .text "<b"
.d386					nt_asm_push_a:
>d386	06 0c				                .byte 6, IM+NN
>d388	00 00				                .word 0000
>d38a	93 ac a2 ac			                .word xt_asm_push_a, z_asm_push_a
>d38e	70 75 73 68 2d 61		                .text "push-a"

;******  Return to file: platform/../taliforth.asm


;******  Processing file: platform/../strings.asm

=0					ix := 0
=0					str_ok             = ix
=1					ix += 1
=1					str_compile        = ix
=2					ix += 1
=2					str_redefined      = ix
=3					ix += 1
=3					str_abc_upper      = ix
=4					ix += 1
=4					str_wid_forth      = ix
=5					ix += 1
=5					str_wid_editor     = ix
=6					ix += 1
=6					str_wid_assembler  = ix
=7					ix += 1
=7					str_wid_root       = ix
=8					ix += 1
=8					str_see_flags      = ix
=9					ix += 1
=9					str_see_nt         = ix
=10					ix += 1
=10					str_see_xt         = ix
=11					ix += 1
=11					str_see_size       = ix
=12					ix += 1
=12					str_disasm_lit     = ix
=13					ix += 1
=13					str_disasm_sdc     = ix
=14					ix += 1
=14					str_disasm_bra     = ix
=15					ix += 1
.d394					string_table:
>d394	b2 d3 b6 d3 c0 d3 cb d3		        .word s_ok, s_compiled, s_redefined, s_abc_upper              ; 0-3
>d39c	02 d4 fa d3 ef d3 09 d4		        .word s_wid_forth, s_wid_editor, s_wid_asm, s_wid_root        ; 4-7
>d3a4	0f d4 2b d4 30 d4 35 d4		        .word s_see_flags, s_see_nt, s_see_xt, s_see_size             ; 8-11
>d3ac	46 d4 4f d4 61 d4		        .word s_disasm_lit, s_disasm_sdc, s_disasm_bra                ; 12-14
>d3b2	20 6f 6b 00			s_ok:         .text " ok", 0         ; note space at beginning
>d3b6	20 63 6f 6d 70 69 6c 65		s_compiled:   .text " compiled", 0   ; note space at beginning
>d3be	64 00
>d3c0	72 65 64 65 66 69 6e 65		s_redefined:  .text "redefined ", 0  ; note space at end
>d3c8	64 20 00
>d3cb	30 31 32 33 34 35 36 37		s_abc_upper:  .text "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
>d3d3	38 39 41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e
>d3e3	4f 50 51 52 53 54 55 56 57 58 59 5a
>d3ef	41 73 73 65 6d 62 6c 65		s_wid_asm:    .text "Assembler ", 0  ; Wordlist ID 2, note space at end
>d3f7	72 20 00
>d3fa	45 64 69 74 6f 72 20 00		s_wid_editor: .text "Editor ", 0     ; Wordlist ID 1, note space at end
>d402	46 6f 72 74 68 20 00		s_wid_forth:  .text "Forth ", 0      ; Wordlist ID 0, note space at end
>d409	52 6f 6f 74 20 00		s_wid_root:   .text "Root ", 0       ; Wordlist ID 3, note space at end
>d40f	66 6c 61 67 73 20 28 43		s_see_flags:  .text "flags (CO AN IM NN UF HC): ", 0
>d417	4f 20 41 4e 20 49 4d 20 4e 4e 20 55 46 20 48 43
>d427	29 3a 20 00
>d42b	6e 74 3a 20 00			s_see_nt:     .text "nt: ", 0
>d430	78 74 3a 20 00			s_see_xt:     .text "xt: ", 0
>d435	73 69 7a 65 20 28 64 65		s_see_size:   .text "size (decimal): ", 0
>d43d	63 69 6d 61 6c 29 3a 20 00
>d446	4c 49 54 45 52 41 4c 20		s_disasm_lit: .text "LITERAL ", 0
>d44e	00
>d44f	53 54 41 43 4b 20 44 45		s_disasm_sdc: .text "STACK DEPTH CHECK", 0
>d457	50 54 48 20 43 48 45 43 4b 00
>d461	42 52 41 4e 43 48 20 00		s_disasm_bra: .text "BRANCH ",0
=0					err_allot        = 0
=1					err_badsource    = 1
=2					err_compileonly  = 2
=3					err_defer        = 3
=4					err_divzero      = 4
=5					err_noname       = 5
=6					err_refill       = 6
=7					err_state        = 7
=8					err_syntax       = 8
=9					err_underflow    = 9
=10					err_negallot     = 10
=11					err_wordlist     = 11
=12					err_blockwords   = 12
=13					err_returnstack  = 13
.d469					error_table:
>d469	85 d4 a6 d4 c6 d4 e7 d4		        .word es_allot, es_badsource, es_compileonly, es_defer  ;  0-3
>d471	04 d5 15 d5 25 d5 53 d5		        .word es_divzero, es_noname, es_refill, es_state        ;  4-7
>d479	6b d5 7a d5 8f d5 ab d5		        .word es_syntax, es_underflow, es_negallot, es_wordlist ;  8-11
>d481	c2 d5 01 d6			        .word es_blockwords, es_returnstack                     ; 12-13
>d485	41 4c 4c 4f 54 20 75 73		es_allot:       .text "ALLOT using all available memory", 0
>d48d	69 6e 67 20 61 6c 6c 20 61 76 61 69 6c 61 62 6c
>d49d	65 20 6d 65 6d 6f 72 79 00
>d4a6	49 6c 6c 65 67 61 6c 20		es_badsource:   .text "Illegal SOURCE-ID during REFILL", 0
>d4ae	53 4f 55 52 43 45 2d 49 44 20 64 75 72 69 6e 67
>d4be	20 52 45 46 49 4c 4c 00
>d4c6	49 6e 74 65 72 70 72 65		es_compileonly: .text "Interpreting a compile-only word", 0
>d4ce	74 69 6e 67 20 61 20 63 6f 6d 70 69 6c 65 2d 6f
>d4de	6e 6c 79 20 77 6f 72 64 00
>d4e7	44 45 46 45 52 65 64 20		es_defer:       .text "DEFERed word not defined yet", 0
>d4ef	77 6f 72 64 20 6e 6f 74 20 64 65 66 69 6e 65 64
>d4ff	20 79 65 74 00
>d504	44 69 76 69 73 69 6f 6e		es_divzero:     .text "Division by zero", 0
>d50c	20 62 79 20 7a 65 72 6f 00
>d515	50 61 72 73 69 6e 67 20		es_noname:      .text "Parsing failure", 0
>d51d	66 61 69 6c 75 72 65 00
>d525	51 55 49 54 20 63 6f 75		es_refill:      .text "QUIT could not get input (REFILL returned -1)", 0
>d52d	6c 64 20 6e 6f 74 20 67 65 74 20 69 6e 70 75 74
>d53d	20 28 52 45 46 49 4c 4c 20 72 65 74 75 72 6e 65
>d54d	64 20 2d 31 29 00
>d553	41 6c 72 65 61 64 79 20		es_state:       .text "Already in compile mode", 0
>d55b	69 6e 20 63 6f 6d 70 69 6c 65 20 6d 6f 64 65 00
>d56b	55 6e 64 65 66 69 6e 65		es_syntax:      .text "Undefined word", 0
>d573	64 20 77 6f 72 64 00
>d57a	44 61 74 61 20 73 74 61		es_underflow:   .text "Data stack underflow", 0
>d582	63 6b 20 75 6e 64 65 72 66 6c 6f 77 00
>d58f	4d 61 78 20 6d 65 6d 6f		es_negallot:    .text "Max memory freed with ALLOT", 0
>d597	72 79 20 66 72 65 65 64 20 77 69 74 68 20 41 4c
>d5a7	4c 4f 54 00
>d5ab	4e 6f 20 77 6f 72 64 6c		es_wordlist:    .text "No wordlists available", 0
>d5b3	69 73 74 73 20 61 76 61 69 6c 61 62 6c 65 00
>d5c2	50 6c 65 61 73 65 20 61		es_blockwords:  .text "Please assign vectors BLOCK-READ-VECTOR and BLOCK-WRITE-VECTOR",0
>d5ca	73 73 69 67 6e 20 76 65 63 74 6f 72 73 20 42 4c
>d5da	4f 43 4b 2d 52 45 41 44 2d 56 45 43 54 4f 52 20
>d5ea	61 6e 64 20 42 4c 4f 43 4b 2d 57 52 49 54 45 2d
>d5fa	56 45 43 54 4f 52 00
>d601	52 65 74 75 72 6e 20 73		es_returnstack: .text "Return stack:", 0
>d609	74 61 63 6b 3a 00
>d60f	0f 2f 43 4f 55 4e 54 45		envs_cs:        .text 15, "/COUNTED-STRING"
>d617	44 2d 53 54 52 49 4e 47
>d61f	05 2f 48 4f 4c 44		envs_hold:      .text 5, "/HOLD"
>d625	04 2f 50 41 44			envs_pad:       .text 4, "/PAD"
>d62a	11 41 44 44 52 45 53 53		envs_aub:       .text 17, "ADDRESS-UNIT-BITS"
>d632	2d 55 4e 49 54 2d 42 49 54 53
>d63c	07 46 4c 4f 4f 52 45 44		envs_floored:   .text 7, "FLOORED"
>d644	08 4d 41 58 2d 43 48 41		envs_max_char:  .text 8, "MAX-CHAR"
>d64c	52
>d64d	05 4d 41 58 2d 4e		envs_max_n:     .text 5, "MAX-N"
>d653	05 4d 41 58 2d 55		envs_max_u:     .text 5, "MAX-U"
>d659	12 52 45 54 55 52 4e 2d		envs_rsc:       .text 18, "RETURN-STACK-CELLS"
>d661	53 54 41 43 4b 2d 43 45 4c 4c 53
>d66c	0b 53 54 41 43 4b 2d 43		envs_sc:        .text 11, "STACK-CELLS"
>d674	45 4c 4c 53
>d678	09 57 4f 52 44 4c 49 53		envs_wl:        .text 9, "WORDLISTS"
>d680	54 53
>d682	05 4d 41 58 2d 44		envs_max_d:     .text 5, "MAX-D"
>d688	06 4d 41 58 2d 55 44		envs_max_ud:    .text 6, "MAX-UD"

;******  Return to file: platform/../taliforth.asm

.d68f					cmpl_subroutine:
.d68f	48		pha		                pha             ; save LSB of address
.d690	a9 20		lda #$20	                lda #$20        ; load opcode for JSR
.d692	80 03		bra $d697	                bra cmpl_common
.d694					cmpl_jump:
.d694	48		pha		                pha             ; save LSB of address
.d695	a9 4c		lda #$4c	                lda #$4c        ; load opcode for JMP, fall thru to cmpl_common
.d697					cmpl_common:
.d697	20 9f d6	jsr $d69f	                jsr cmpl_a      ; compile opcode
.d69a	68		pla		                pla             ; retrieve address LSB; fall thru to cmpl_word
.d69b					cmpl_word:
.d69b	20 9f d6	jsr $d69f	                jsr cmpl_a      ; compile LSB of address
.d69e	98		tya		                tya             ; fall thru for MSB
.d69f					cmpl_a:
.d69f	92 00		sta ($00)	                sta (cp)
.d6a1	e6 00		inc $00		                inc cp
.d6a3	d0 02		bne $d6a7	                bne _done
.d6a5	e6 01		inc $01		                inc cp+1
.d6a7					_done:
.d6a7	60		rts		                rts
.d6a8					doconst:
.d6a8	ca		dex		                dex             ; make room for constant
.d6a9	ca		dex		                dex
.d6aa	68		pla		                pla             ; LSB of return address
.d6ab	85 24		sta $24		                sta tmp1
.d6ad	68		pla		                pla             ; MSB of return address
.d6ae	85 25		sta $25		                sta tmp1+1
.d6b0	a0 01		ldy #$01	                ldy #1
.d6b2	b1 24		lda ($24),y	                lda (tmp1),y
.d6b4	95 00		sta $00,x	                sta 0,x
.d6b6	c8		iny		                iny
.d6b7	b1 24		lda ($24),y	                lda (tmp1),y
.d6b9	95 01		sta $01,x	                sta 1,x
.d6bb	60		rts		                rts
.d6bc					dodefer:
.d6bc	68		pla		                pla             ; LSB
.d6bd	85 24		sta $24		                sta tmp1
.d6bf	68		pla		                pla             ; MSB
.d6c0	85 25		sta $25		                sta tmp1+1
.d6c2	a0 01		ldy #$01	                ldy #1
.d6c4	b1 24		lda ($24),y	                lda (tmp1),y
.d6c6	85 26		sta $26		                sta tmp2
.d6c8	c8		iny		                iny
.d6c9	b1 24		lda ($24),y	                lda (tmp1),y
.d6cb	85 27		sta $27		                sta tmp2+1
.d6cd	6c 26 00	jmp ($0026)	                jmp (tmp2)      ; This is actually a jump to the new target
.d6d0					defer_error:
.d6d0	a9 03		lda #$03	                lda #err_defer
.d6d2	4c 02 d8	jmp $d802	                jmp error
.d6d5					dodoes:
.d6d5	7a		ply		                ply             ; LSB
.d6d6	68		pla		                pla             ; MSB
.d6d7	c8		iny		                iny
.d6d8	d0 01		bne $d6db	                bne +
.d6da	1a		inc a		                ina
.d6db					+
.d6db	84 26		sty $26		                sty tmp2
.d6dd	85 27		sta $27		                sta tmp2+1
.d6df	ca		dex		                dex
.d6e0	ca		dex		                dex
.d6e1	7a		ply		                ply
.d6e2	68		pla		                pla
.d6e3	c8		iny		                iny
.d6e4	d0 01		bne $d6e7	                bne +
.d6e6	1a		inc a		                ina
.d6e7					+
.d6e7	94 00		sty $00,x	                sty 0,x         ; LSB
.d6e9	95 01		sta $01,x	                sta 1,x         ; MSB
.d6eb	6c 26 00	jmp ($0026)	                jmp (tmp2)
.d6ee					dovar:
.d6ee	7a		ply		                ply             ; LSB
.d6ef	68		pla		                pla             ; MSB
.d6f0	c8		iny		                iny
.d6f1	d0 01		bne $d6f4	                bne +
.d6f3	1a		inc a		                ina
.d6f4					+
.d6f4	ca		dex		                dex
.d6f5	ca		dex		                dex
.d6f6	95 01		sta $01,x	                sta 1,x
.d6f8	98		tya		                tya
.d6f9	95 00		sta $00,x	                sta 0,x
.d6fb	60		rts		                rts
.d6fc					byte_to_ascii:
.d6fc	48		pha		                pha
.d6fd	4a		lsr a		                lsr             ; convert high nibble first
.d6fe	4a		lsr a		                lsr
.d6ff	4a		lsr a		                lsr
.d700	4a		lsr a		                lsr
.d701	20 05 d7	jsr $d705	                jsr _nibble_to_ascii
.d704	68		pla		                pla
.d705					_nibble_to_ascii:
.d705	29 0f		and #$0f	                and #$0F
.d707	09 30		ora #$30	                ora #'0'
.d709	c9 3a		cmp #$3a	                cmp #$3A        ; '9+1
.d70b	90 02		bcc $d70f	                bcc +
.d70d	69 06		adc #$06	                adc #$06
.d70f	4c 02 8e	jmp $8e02	+               jmp emit_a
.d712	60		rts		                rts
.d713					compare_16bit:
.d713	b5 00		lda $00,x	                lda 0,x                 ; LSB of TOS
.d715	d5 02		cmp $02,x	                cmp 2,x                 ; LSB of NOS
.d717	f0 0a		beq $d723	                beq _equal
.d719	b5 01		lda $01,x	                lda 1,x                 ; MSB of TOS
.d71b	f5 03		sbc $03,x	                sbc 3,x                 ; MSB of NOS
.d71d	09 01		ora #$01	                ora #1                  ; Make zero flag 0 because not equal
.d71f	70 08		bvs $d729	                bvs _overflow
.d721	80 08		bra $d72b	                bra _not_equal
.d723					_equal:
.d723	b5 01		lda $01,x	                lda 1,x                 ; MSB of TOS
.d725	f5 03		sbc $03,x	                sbc 3,x                 ; MSB of NOS
.d727	50 04		bvc $d72d	                bvc _done
.d729					_overflow:
.d729	49 80		eor #$80	                eor #$80                ; complement negative flag
.d72b					_not_equal:
.d72b	09 01		ora #$01	                ora #1                  ; if overflow, we can't be eqal
.d72d					_done:
.d72d	60		rts		                rts
.d72e					current_to_dp:
.d72e	a0 04		ldy #$04	                ldy #current_offset
.d730	b1 1e		lda ($1e),y	                lda (up),y      ; current is a byte variable
.d732	0a		asl a		                asl             ; turn it into an offset (in cells)
.d733	18		clc		                clc
.d734	69 06		adc #$06	                adc #wordlists_offset   ; add offset to wordlists base.
.d736	a8		tay		                tay
.d737	b1 1e		lda ($1e),y	                lda (up),y              ; get the dp for that wordlist.
.d739	85 02		sta $02		                sta dp
.d73b	c8		iny		                iny
.d73c	b1 1e		lda ($1e),y	                lda (up),y
.d73e	85 03		sta $03		                sta dp+1
.d740	60		rts		                rts
.d741					dp_to_current:
.d741	a0 04		ldy #$04	                ldy #current_offset
.d743	b1 1e		lda ($1e),y	                lda (up),y      ; current is a byte variable
.d745	0a		asl a		                asl             ; turn it into an offset (in cells)
.d746	18		clc		                clc
.d747	69 06		adc #$06	                adc #wordlists_offset   ; add offset to wordlists base.
.d749	a8		tay		                tay
.d74a	a5 02		lda $02		                lda dp
.d74c	91 1e		sta ($1e),y	                sta (up),y              ; get the dp for that wordlist.
.d74e	c8		iny		                iny
.d74f	a5 03		lda $03		                lda dp+1
.d751	91 1e		sta ($1e),y	                sta (up),y
.d753	60		rts		                rts
.d754					interpret:
.d754					_loop:
.d754	20 eb 98	jsr $98eb	                jsr xt_parse_name       ; ( "string" -- addr u )
.d757	b5 00		lda $00,x	                lda 0,x
.d759	15 01		ora $01,x	                ora 1,x
.d75b	f0 70		beq $d7cd	                beq _line_done
.d75d	20 95 a3	jsr $a395	                jsr xt_two_dup          ; ( addr u -- addr u addr u )
.d760	20 e7 8f	jsr $8fe7	                jsr xt_find_name        ; ( addr u addr u -- addr u nt|0 )
.d763	b5 00		lda $00,x	                lda 0,x
.d765	15 01		ora $01,x	                ora 1,x
.d767	d0 28		bne $d791	                bne _got_name_token
.d769	e8		inx		                inx                     ; ( addr u 0 -- addr u )
.d76a	e8		inx		                inx
.d76b	20 96 96	jsr $9696	                jsr xt_number           ; ( addr u -- u|d )
.d76e	a5 16		lda $16		                lda state
.d770	f0 e2		beq $d754	                beq _loop
.d772	a9 20		lda #$20	                lda #$20
.d774	24 20		bit $20		                bit status
.d776	f0 0d		beq $d785	                beq _single_number
.d778	20 8b a1	jsr $a18b	                jsr xt_swap
.d77b	a0 93		ldy #$93	                ldy #>literal_runtime
.d77d	a9 a4		lda #$a4	                lda #<literal_runtime
.d77f	20 8f d6	jsr $d68f	                jsr cmpl_subroutine
.d782	20 7a 87	jsr $877a	                jsr xt_comma
.d785					_single_number:
.d785	a0 93		ldy #$93	                ldy #>literal_runtime
.d787	a9 a4		lda #$a4	                lda #<literal_runtime
.d789	20 8f d6	jsr $d68f	                jsr cmpl_subroutine
.d78c	20 7a 87	jsr $877a	                jsr xt_comma
.d78f	80 c3		bra $d754	                bra _loop
.d791					_got_name_token:
.d791	b5 00		lda $00,x	                lda 0,x
.d793	95 04		sta $04,x	                sta 4,x
.d795	b5 01		lda $01,x	                lda 1,x
.d797	95 05		sta $05,x	                sta 5,x
.d799	e8		inx		                inx
.d79a	e8		inx		                inx
.d79b	e8		inx		                inx
.d79c	e8		inx		                inx                     ; ( nt )
.d79d	b5 00		lda $00,x	                lda 0,x
.d79f	85 22		sta $22		                sta tmpbranch
.d7a1	b5 01		lda $01,x	                lda 1,x
.d7a3	85 23		sta $23		                sta tmpbranch+1
.d7a5	20 ed 95	jsr $95ed	                jsr xt_name_to_int      ; ( nt - xt )
.d7a8	a5 16		lda $16		                lda state
.d7aa	d0 13		bne $d7bf	                bne _compile
.d7ac	a0 01		ldy #$01	                ldy #1
.d7ae	b1 22		lda ($22),y	                lda (tmpbranch),y
.d7b0	29 01		and #$01	                and #CO                 ; mask everything but Compile Only bit
.d7b2	f0 05		beq $d7b9	                beq _interpret
.d7b4	a9 02		lda #$02	                lda #err_compileonly
.d7b6	4c 02 d8	jmp $d802	                jmp error
.d7b9					_interpret:
.d7b9	20 49 8f	jsr $8f49	                jsr xt_execute
.d7bc	4c 54 d7	jmp $d754	                jmp _loop
.d7bf					_compile:
.d7bf	a0 01		ldy #$01	                ldy #1
.d7c1	b1 22		lda ($22),y	                lda (tmpbranch),y
.d7c3	29 04		and #$04	                and #IM                 ; Mask all but IM bit
.d7c5	d0 f2		bne $d7b9	                bne _interpret          ; IMMEDIATE word, execute right now
.d7c7	20 f9 87	jsr $87f9	                jsr xt_compile_comma
.d7ca	4c 54 d7	jmp $d754	                jmp _loop
.d7cd					_line_done:
.d7cd	e8		inx		                inx
.d7ce	e8		inx		                inx
.d7cf	e8		inx		                inx
.d7d0	e8		inx		                inx
.d7d1	60		rts		                rts
.d7d2					is_printable:
.d7d2	c9 20		cmp #$20	                cmp #AscSP              ; $20
.d7d4	90 08		bcc $d7de	                bcc _done
.d7d6	c9 80		cmp #$80	                cmp #$7F + 1             ; '~'
.d7d8	b0 03		bcs $d7dd	                bcs _failed
.d7da	38		sec		                sec
.d7db	80 01		bra $d7de	                bra _done
.d7dd					_failed:
.d7dd	18		clc		                clc
.d7de					_done:
.d7de	60		rts		                rts
.d7df					is_whitespace:
.d7df	c9 00		cmp #$00	                cmp #00         ; explicit comparison to leave Y untouched
.d7e1	90 08		bcc $d7eb	                bcc _done
.d7e3	c9 21		cmp #$21	                cmp #AscSP+1
.d7e5	b0 03		bcs $d7ea	                bcs _failed
.d7e7	38		sec		                sec
.d7e8	80 01		bra $d7eb	                bra _done
.d7ea					_failed:
.d7ea	18		clc		                clc
.d7eb					_done:
.d7eb	60		rts		                rts
.d7ec					underflow_1:
.d7ec	e0 77		cpx #$77	                cpx #dsp0-1
.d7ee	10 10		bpl $d800	                bpl underflow_error
.d7f0	60		rts		                rts
.d7f1					underflow_2:
.d7f1	e0 75		cpx #$75	                cpx #dsp0-3
.d7f3	10 0b		bpl $d800	                bpl underflow_error
.d7f5	60		rts		                rts
.d7f6					underflow_3:
.d7f6	e0 73		cpx #$73	                cpx #dsp0-5
.d7f8	10 06		bpl $d800	                bpl underflow_error
.d7fa	60		rts		                rts
.d7fb					underflow_4:
.d7fb	e0 71		cpx #$71	                cpx #dsp0-7
.d7fd	10 01		bpl $d800	                bpl underflow_error
.d7ff	60		rts		                rts
.d800					underflow_error:
.d800	a9 09		lda #$09	                lda #err_underflow      ; fall through to error
.d802					error:
.d802	48		pha		                pha                     ; save error
.d803	20 42 d8	jsr $d842	                jsr print_error
.d806	20 6f 89	jsr $896f	                jsr xt_cr
.d809	68		pla		                pla
.d80a	c9 09		cmp #$09	                cmp #err_underflow      ; should we display return stack?
.d80c	d0 17		bne $d825	                bne _no_underflow
.d80e	a9 0d		lda #$0d	                lda #err_returnstack
.d810	20 42 d8	jsr $d842	                jsr print_error
.d813	ba		tsx		                tsx
.d814					-
.d814	e8		inx		                inx
.d815	f0 0b		beq $d822	                beq +
.d817	20 fb a0	jsr $a0fb	                jsr xt_space
.d81a	bd 00 01	lda $0100,x	                lda $100,x
.d81d	20 fc d6	jsr $d6fc	                jsr byte_to_ascii
.d820	80 f2		bra $d814	                bra -
.d822					+
.d822	20 6f 89	jsr $896f	                jsr xt_cr
.d825					_no_underflow:
.d825	4c 60 80	jmp $8060	                jmp xt_abort            ; no jsr, as we clobber return stack
.d828					print_string_no_lf:
.d828	0a		asl a		                asl
.d829	a8		tay		                tay
.d82a	b9 94 d3	lda $d394,y	                lda string_table,y
.d82d	85 28		sta $28		                sta tmp3                ; LSB
.d82f	c8		iny		                iny
.d830	b9 94 d3	lda $d394,y	                lda string_table,y
.d833	85 29		sta $29		                sta tmp3+1              ; MSB
.d835					print_common:
.d835	a0 00		ldy #$00	                ldy #0
.d837					_loop:
.d837	b1 28		lda ($28),y	                lda (tmp3),y
.d839	f0 06		beq $d841	                beq _done               ; strings are zero-terminated
.d83b	20 02 8e	jsr $8e02	                jsr emit_a              ; allows vectoring via output
.d83e	c8		iny		                iny
.d83f	80 f6		bra $d837	                bra _loop
.d841					_done:
.d841	60		rts		                rts
.d842					print_error:
.d842	0a		asl a		                asl
.d843	a8		tay		                tay
.d844	b9 69 d4	lda $d469,y	                lda error_table,y
.d847	85 28		sta $28		                sta tmp3                ; LSB
.d849	c8		iny		                iny
.d84a	b9 69 d4	lda $d469,y	                lda error_table,y
.d84d	85 29		sta $29		                sta tmp3+1              ; MSB
.d84f	20 35 d8	jsr $d835	                jsr print_common
.d852	60		rts		                rts
.d853					print_string:
.d853	20 28 d8	jsr $d828	                jsr print_string_no_lf
.d856	4c 6f 89	jmp $896f	                jmp xt_cr               ; JSR/RTS because never compiled
.d859					print_u:
.d859	20 85 a7	jsr $a785	                jsr xt_zero                     ; 0
.d85c	20 66 93	jsr $9366	                jsr xt_less_number_sign         ; <#
.d85f	20 ea 97	jsr $97ea	                jsr xt_number_sign_s            ; #S
.d862	20 c8 97	jsr $97c8	                jsr xt_number_sign_greater      ; #>
.d865	4c e0 a4	jmp $a4e0	                jmp xt_type                     ; JSR/RTS because never compiled

;******  Return to file: platform/platform-py65mon.asm

.f010					v_nmi:
.f010					v_reset:
.f010					v_irq:
.f010					kernel_init:
.f010	78		sei		                sei             ; Disable interrupts
.f011	a2 00		ldx #$00	                ldx #0
.f013	bd 2c f0	lda $f02c,x	-               lda s_kernel_id,x
.f016	f0 06		beq $f01e	                beq _done
.f018	20 27 f0	jsr $f027	                jsr kernel_putc
.f01b	e8		inx		                inx
.f01c	80 f5		bra $f013	                bra -
.f01e					_done:
.f01e	4c 00 80	jmp $8000	                jmp forth
.f021					kernel_getc:
.f021					_loop:
.f021	ad 04 f0	lda $f004	                lda $f004
.f024	f0 fb		beq $f021	                beq _loop
.f026	60		rts		                rts
.f027					kernel_putc:
.f027	8d 01 f0	sta $f001	                sta $f001
.f02a	60		rts		                rts
.f02b					platform_bye:
.f02b	00		brk #		                brk
.f02c					s_kernel_id:
>f02c	54 61 6c 69 20 46 6f 72		        .text "Tali Forth 2 default kernel for py65mon (04. Dec 2022)", AscLF, 0
>f034	74 68 20 32 20 64 65 66 61 75 6c 74 20 6b 65 72
>f044	6e 65 6c 20 66 6f 72 20 70 79 36 35 6d 6f 6e 20
>f054	28 30 34 2e 20 44 65 63 20 32 30 32 32 29 0a 00
>fffa	10 f0				.word v_nmi
>fffc	10 f0				.word v_reset
>fffe	10 f0				.word v_irq

;******  End of listing
