<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc?>
<?asciidoc-numbered?>
<book xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
<info>
<title>Manual for Tali Forth 2 for the 65c02</title>
<date>03. Nov 2018</date>
<author>
<personname>
<firstname>Scot</firstname>
<othername>W.</othername>
<surname>Stevenson</surname>
</personname>
<email>scot.stevenson@gmail.com</email>
</author>
<authorinitials>SWS</authorinitials>
<revhistory>
<revision>
<revnumber>BETA</revnumber>
<date>03. Nov 2018</date>
<authorinitials>SWS</authorinitials>
</revision>
</revhistory>
</info>
<preface>
<title></title>
<simpara>Tali Forth 2 is a bare-metal ANS(ish) Forth for the 65c02 8-bit MPU. It aims
to be, roughly in order of importance, easy to try out (just run the included
binary), simple (subroutine threading model), specific (for the 65c02 only), and
standardized (ANS Forth).</simpara>
</preface>
<dedication xml:id="_dedication">
<title>Dedication</title>
<simpara>For the crew at 6502.org, who made this possible in more ways than one.</simpara>
</dedication>
<part xml:id="_introduction">
<title>Introduction</title>
<chapter xml:id="_but_why">
<title>But why?</title>
<blockquote>
<attribution>
Charles H. Moore
<citetitle>redgate Hub 2009</citetitle>
</attribution>
<simpara>Forth is well suited to resource-constrained situations. It doesn&#8217;t need lots
of memory and doesn&#8217;t have much overhead. <xref linkend="CHM1"/></simpara>
</blockquote>
<section xml:id="_the_big_picture">
<title>The Big Picture</title>
<simpara>This section provides background information on Forth, the 6502 processor, and
why anybody would want to combine the two. It can be skipped if you already know
all those things.</simpara>
<section xml:id="_the_6502_cpu">
<title>The 6502 CPU</title>
<simpara>It is a well-established fact that humanity reached the apex of processor design
with the 6502<indexterm>
<primary>6502</primary>
</indexterm> in 1976.</simpara>
<simpara>Created by a team including Chuck Peddle<indexterm>
<primary>Peddle, Chuck</primary>
</indexterm> and Bill
Mensch<indexterm>
<primary>Mensch, Bill</primary>
</indexterm>, it was the engine that powered the 8-bit home
computer revolution of the 1980s.<footnote><simpara>Rumor has it that there was another MPU called "Z80",<indexterm> <primary>Z80</primary> </indexterm> but it ended up being a mere footnote.</simpara></footnote> The
VIC-20<indexterm>
<primary>VIC-20</primary>
</indexterm>, Commodore PET<indexterm>
<primary>Commodore PET</primary>
</indexterm>, Apple II<indexterm>
<primary>Apple II</primary>
</indexterm>,
and Atari 800<indexterm>
<primary>Atari 800</primary>
</indexterm> all used the 6502, among others.</simpara>
<figure xml:id="img_65c02">
<title>The 65c02 MPU. Photo: Anthony King, released in the public domain</title>
<mediaobject>
<imageobject>
<imagedata fileref="pics/W65c02.jpg"/>
</imageobject>
<textobject><phrase>W65c02</phrase></textobject>
</mediaobject>
</figure>
<simpara>More than 40 years later, the processor is still in production by the
<link xl:href="http://www.westerndesigncenter.com/wdc/w65c02s-chip.cfm">Western Design
Center</link><indexterm>
<primary>WDC</primary>
</indexterm>. Apart from commercial uses, there is an active hobbyist scene
centered on the website <link xl:href="http://6502.org/">6502.org</link>.<indexterm>
<primary>6502.org</primary>
</indexterm> A
number of people have built their own 8-bit computers based on this chip and
the instructions there, including a
<link xl:href="http://wilsonminesco.com/6502primer/">primer</link> by Garth Wilson<indexterm>
<primary>Wilson, Garth</primary>
</indexterm>. It is for these systems that Tali Forth 2 was created.</simpara>
<simpara>The most important variant of the 6502 produced today is the
<link xl:href="https://en.wikipedia.org/wiki/WDC\_65C02">65c02</link><indexterm>
<primary>65c02</primary>
</indexterm>, a CMOS chip with
some additional instructions. It is for this chip that Tali Forth 2 was written.</simpara>
<simpara>But why program in 8-bit assembler at all? The 65c02 is fun to work with
because of its clean instruction set architecture (ISA)<indexterm>
<primary>instruction set architecture (ISA)</primary>
</indexterm> This is not the place to explain the joys of assembler.
The official handbook for the 65c02 is <emphasis>Programming the 65816</emphasis> <xref linkend="EnL"/>.</simpara>
<tip>
<simpara>Garth  Wilson<indexterm>
<primary>Wilson, Garth</primary>
</indexterm> answers this question in greater
detail as part of his 6502 primer at <link xl:href="http://wilsonminesco.com/6502primer/">http://wilsonminesco.com/6502primer/</link> .</simpara>
</tip>
</section>
</section>
<section xml:id="_forth">
<title>Forth</title>
<blockquote>
<attribution>
Elliot Williams
<citetitle>Forth: The Hacker's language</citetitle>
</attribution>
<simpara>If C gives you enough rope to hang yourself, Forth is a flamethrower crawling with
cobras. <xref linkend="EW"/></simpara>
</blockquote>
<simpara>Forth<indexterm><primary>(Forth</primary></indexterm>(Forth is the <emphasis>enfant terrible</emphasis> of programming languages. It was
invented by Charles "Chuck" H. Moore<indexterm>
<primary>Moore, Charles</primary>
</indexterm> in the 1960s to do
work with radio astronomy, way before there were modern operating systems or
programming languages.</simpara>
<tip>
<simpara>A brief history of Forth can be found at
<link xl:href="https://www.forth.com/resources/forth-programming-language">https://www.forth.com/resources/forth-programming-language</link></simpara>
</tip>
<simpara>As a language for people who actually need to get things done, it lets you run
with scissors, play with fire, and cut corners until you&#8217;ve turned a square
into a circle. Forth is not for the faint-hearted: It is trivial, for
instance, to redefine <literal>1</literal> as <literal>2</literal> and <literal>true</literal> as <literal>false</literal>. Though you can do really,
really clever things with few lines of code, the result can be hard for other
people to understand, leading to the reputation of Forth begin a "write-only
language". However, Forth excels when you positively, absolutely have to get
something done with hardware that is really too weak for the job.</simpara>
<simpara>It should be no surprise that NASA<indexterm>
<primary>NASA</primary>
</indexterm> is one of the organizations that
uses Forth. The <emphasis>Cassini</emphasis> mission<indexterm>
<primary>Cassini</primary>
</indexterm> to Saturn used a
<link xl:href="http://www.cpushack.com/2013/02/21/charles-moore-forth-stack-processors/">Forth
CPU</link>, for instance. It is also perfect for small computers like the 8-bit
65c02. After a small boom in the 1980s, more powerful computers led to a
decline of the language. The "Internet of Things" (IOT) <indexterm>
<primary>Internet of Things</primary>
</indexterm> with embedded small processors has led to a certain amount of
<link xl:href="https://www.embedded.com/design/programming-languages-and-tools/4431133/Go-Forth-">renewed
interest</link> in the language. It helps that Forth is easy to implement: It is
stack-based, uses Reverse Polish Notation (RPN)<indexterm>
<primary>Reverse Polish Notation</primary>
</indexterm>
and a simple threaded<indexterm>
<primary>threading</primary>
</indexterm> interpreter model.</simpara>
<simpara>There is no way this document can provide an adequate introduction to Forth.
There are quite a number of tutorials, however, such as <emphasis>A Beginner&#8217;s Guide to
Forth</emphasis> by J.V. Nobel <indexterm>
<primary>Nobel, J.V.</primary>
</indexterm><xref linkend="JVN"/> or the classic (but slightly
dated) <emphasis>Starting Forth</emphasis> by Leo Brodie.<indexterm>
<primary>Brodie, Leo</primary>
</indexterm><xref linkend="LB1"/>
Gforth,<indexterm>
<primary>Gforth</primary>
</indexterm> one of the more powerful free Forths, comes with its own
<link xl:href="http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Tutorial.html">tutorial</link>.</simpara>
<tip>
<simpara>Once you have understood the basics of the language, do yourself a favor
and read <emphasis>Thinking Forth</emphasis> by Brodie<indexterm>
<primary>Brodie, Leo</primary>
</indexterm><xref linkend="LB2"/> which deals with
the philosophy of the language. Even if you never code a line of Forth in your
life, exposure to Forth will change the way you think about programming, much
like Lisp<indexterm>
<primary>Lisp</primary>
</indexterm>.</simpara>
</tip>
</section>
<section xml:id="_writing_your_own_forth">
<title>Writing Your Own Forth</title>
<simpara>Even if the 65c02 is great and Forth is brilliant, why got to the effort of
writing a new, bare-metal version of the languages? After almost 50 years,
shouldn&#8217;t there be a bunch of Forths around already?</simpara>
<section xml:id="_fig_forth">
<title>FIG Forth</title>
<simpara>In fact, the classic Forth available for the whole group of 8-bit MPUs is FIG
Forth<indexterm>
<primary>FIG Forth</primary>
</indexterm>. "FIG" stands for "Forth Interest Group". Ported to various
architectures, it was original based on an incarnation for the 6502 written by
Bill Ragsdale<indexterm>
<primary>Ragsdale, Bill</primary>
</indexterm> and Robert Selzer<indexterm>
<primary>Selzer, Robert</primary>
</indexterm>.
There are PDFs of the <link xl:href="http://www.forth.org/fig-forth/fig-forth\_6502.pdf">6502
version</link> from September 1980 freely available&#8201;&#8212;&#8201;there is a tradition of placing
Forth in the public domain&#8201;&#8212;&#8201;and more than one hobbyist has revised it to his
machine.</simpara>
<simpara>However, Forth has changed a lot in the past three decades. There is now a
standardized version called <link xl:href="https://forth-standard.org/">ANS Forth</link>, which
includes very basic changes such as how the <literal>do</literal> loop works. Learning the
language with FIG Forth is like learning English with <emphasis>The Canterbury
Tales</emphasis>.<indexterm>
<primary>Canterbury Tales, The</primary>
</indexterm></simpara>
</section>
<section xml:id="_a_modern_forth_for_the_65c02">
<title>A Modern Forth for the 65c02</title>
<simpara>Tali Forth was created to provide an easy to understand modern Forth written
especially for the 65c02 that anybody can understand, adapt to their own use,
and maybe actually work with. As part of that effort, the source code is heavily
commented. And this document tries to explain the internals in more detail.</simpara>
</section>
</section>
</chapter>
<chapter xml:id="_overview_of_tali_forth">
<title>Overview of Tali Forth</title>
<section xml:id="_design_considerations">
<title>Design Considerations</title>
<simpara>When creating a new Forth, there are a bunch of design decisions to be
made.</simpara>
<note>
<simpara>Probably the best introduction to these questions is found in "Design
Decisions in the Forth Kernel" at
<link xl:href="http://www.bradrodriguez.com/papers/moving1.htm">http://www.bradrodriguez.com/papers/moving1.htm</link> by Brad Rodriguez.</simpara>
</note>
<simpara>Spoiler alert: Tali Forth is a subroutine-threaded (STC) variant with a 16-bit
cell size and a dictionary that keeps headers and code separate. If you don&#8217;t
care and just want to use the program, skip ahead.</simpara>
<section xml:id="_characteristics_of_the_65c02">
<title>Characteristics of the 65c02</title>
<simpara>Since this is a bare-metal Forth, the most important consideration is the target
processor. The 65c02 only has one full register, the accumulator A, as well as
two secondary registers X and Y. All are 8-bit wide. There are 256 bytes that
are more easily addressable on the Zero Page. A single hardware stack is used
for subroutine jumps. The address bus is 16 bits wide for a maximum of 64 KiB of
RAM and ROM.</simpara>
<simpara>For the default setup, we assume 32 KiB of each, but allow this to be changed so
people can adapt Tali to their own hardware.</simpara>
</section>
<section xml:id="_cell_size">
<title>Cell Size</title>
<simpara>The 16-bit address bus suggests the cell size should be 16 bits as well. This is
still easy enough to realize on a 8-bit MPU.</simpara>
</section>
<section xml:id="_threading_technique">
<title>Threading Technique</title>
<simpara>A "thread" in Forth is simply a list of addresses of words to be executed.
There are four basic threading techniques: <xref linkend="GK"/></simpara>
<variablelist>
<varlistentry>
<term>Indirect threading (ITC)</term>
<listitem>
<simpara>The oldest, original variant, used by FIG Forth. All
other versions are modifications of this model.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Direct threading (DTC)</term>
<listitem>
<simpara>Includes more assembler code to speed things up, but
slightly larger than ITC.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Token threading (TTC)</term>
<listitem>
<simpara>The reverse of DTC in that it is slower, but uses less
space than the other Forths. Words are created as a table of tokens.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Subroutine threading (STC)</term>
<listitem>
<simpara>Converts the words to a simple
series of <literal>jsr</literal> combinations. Easy to understand and less complex than the other
variants, but uses more space and is slower.</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>Our lack of registers and the goal of creating a simple and easy to understand
Forth makes subroutine threading the most attractive solution. We try to
mitigate the pain caused by the 12 cycle cost of each and every <literal>jsr</literal>-<literal>rts</literal>
combination by including a relatively high number of native words.</simpara>
</section>
<section xml:id="_register_use">
<title>Register Use</title>
<simpara>The lack of registers&#8201;&#8212;&#8201;and any registers larger than 8 bit at that&#8201;&#8212;&#8201;becomes
apparent when you realize that Forth classically uses at least four virtual
registers:</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>The classic Forth registers</title>
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<thead>
<row>
<entry align="left" valign="top">Register</entry>
<entry align="left" valign="top">Name</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>W</simpara></entry>
<entry align="left" valign="top"><simpara>Working Register</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>IP</simpara></entry>
<entry align="left" valign="top"><simpara>Interpreter Pointer</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>DSP</simpara></entry>
<entry align="left" valign="top"><simpara>Data Stack Pointer</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>RSP</simpara></entry>
<entry align="left" valign="top"><simpara>Return Stack Pointer</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara>On a modern processor like a RISC-V RV32I with 32 registers of 32 bit each, none
of this would be a problem (in fact, we&#8217;d probably run out of ways to use the
registers). On the 65c02, at least we get the RSP for free with the built-in
stack pointer. This still leaves three registers. We cut that number down by one
through subroutine threading, which gets rid of the IP. For the DSP, we use the
65c02&#8217;s Zero Page indirect addressing mode with the X register. This leaves W,
which we put on the Zero Page as well.</simpara>
</section>
<section xml:id="_data_stack_design">
<title>Data Stack Design</title>
<simpara>We&#8217;ll go into greater detail on how the Data Stack works in a later chapter
when we look at the internals. Briefly, the stack is realized on the Zero Page
for speed. For stability, we provide underflow checks in the relevant words, but
give the user the option of stripping it out for native compilation. There are
no checks for overflow because those cases tend to be rare.</simpara>
</section>
<section xml:id="_dictionary_structure">
<title>Dictionary Structure</title>
<simpara>Each Forth word consists of the actual code and the header that holds the
meta-data. The headers are arranged as a simple single-linked list.</simpara>
<simpara>In contrast to Tali Forth 1, which kept the header and body of the words
together, Tali Forth 2 keeps them separate. This lets us play various tricks
with the code to make it more effective.</simpara>
</section>
</section>
<section xml:id="_deeper_down_the_rabbit_hole">
<title>Deeper down the rabbit hole</title>
<simpara>This concludes our overview of the basic Tali Forth 2 structure. For those
interested, a later chapter will provide far more detail.</simpara>
</section>
</chapter>
</part>
<part xml:id="_user_guide">
<title>User Guide</title>
<chapter xml:id="_installing_tali_forth">
<title>Installing Tali Forth</title>
<section xml:id="_downloading">
<title>Downloading</title>
<simpara>Tali Forth 2 lives on GitHub<indexterm>
<primary>GitHub</primary>
</indexterm> at
<link xl:href="https://github.com/scotws/TaliForth2">https://github.com/scotws/TaliForth2</link>. This is where you will always find the
current version. You can either clone the code with git<indexterm>
<primary>git</primary>
</indexterm> or simply
download it. To just test Tali Forth, all you need is the binary file
<literal>taliforth-py65mon.bin</literal>.</simpara>
</section>
<section xml:id="_running">
<title>Running</title>
<section xml:id="_downloading_the_py65mon_simulator">
<title>Downloading the py65mon Simulator</title>
<simpara>Tali was written to run out of the box on the py65mon simulator from
<link xl:href="https://github.com/mnaberez/py65">https://github.com/mnaberez/py65</link>.<indexterm>
<primary>py65mon</primary>
</indexterm> This is a Python<indexterm>
<primary>Python</primary>
</indexterm>
program that should run on various operating systems. Py65mon is also required
for the test suite.</simpara>
<simpara>To install py65mon on Linux<indexterm>
<primary>Linux</primary>
</indexterm>, use the command</simpara>
<programlisting language="bash" linenumbering="unnumbered">sudo pip install -U py65</programlisting>
<simpara>If you don&#8217;t have <literal>pip</literal><indexterm>
<primary>pip</primary>
</indexterm> installed, you will have to add it first with
something like <literal>sudo apt-get install python-pip</literal> (Ubuntu Linux). There is a
<literal>setup.py</literal> script as part of the package.</simpara>
</section>
<section xml:id="_running_the_binary">
<title>Running the Binary</title>
<simpara>To start the emulator, run:</simpara>
<programlisting language="bash" linenumbering="unnumbered">py65mon -m 65c02 -r taliforth-py65mon.bin</programlisting>
<simpara>Note that the option <literal>-m 65c02</literal> is required, because Tali Forth makes extensive
use of the additional commands of the CMOS version and will not run on a stock
6502 MPU.</simpara>
</section>
</section>
<section xml:id="_installing_on_your_own_hardware">
<title>Installing on Your Own Hardware</title>
<simpara>The Tali Forth project started out as a way to run Forth on my own 65c02
computer, the Übersquirrel<indexterm>
<primary>Übersquirrel</primary>
</indexterm>. Though it soon developed a life of
its own, a central aim of the project is to provide a working, modern Forth that
people can install on their projects.</simpara>
<figure xml:id="img_uebersquirrel">
<title>The functioning Übersquirrel Mark Zero prototype, August 2013. Photo by Scot W. Stevenson</title>
<mediaobject>
<imageobject>
<imagedata fileref="pics/uebersquirrel.jpg" contentwidth="50%"/>
</imageobject>
<textobject><phrase>uebersquirrel</phrase></textobject>
</mediaobject>
</figure>
<section xml:id="_the_platform_files">
<title>The Platform Files</title>
<simpara>For this to work, you need to go to the <literal>platform</literal> folder and create your own
kernel<indexterm>
<primary>kernel</primary>
</indexterm> code to replace <literal>platform-py65mon.asm</literal>, the default kernel
for use with the py65mon<indexterm>
<primary>py65mon</primary>
</indexterm> kernel. By convention, the name should
start with <literal>platform-</literal>. See the <literal>README.md</literal> file in the the <literal>platform</literal> folder
for details.</simpara>
</section>
</section>
<section xml:id="_hardware_projects_with_tali_forth_2">
<title>Hardware Projects with Tali Forth 2</title>
<simpara>This is a list of projects known to run Tali Forth 2. Please let me know if you
want to have your project added to the list.</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">Steckschwein</emphasis> (<link xl:href="https://steckschwein.de/">https://steckschwein.de/</link>) by Thomas Woinke and Marko
Lauke. A multi-board 8 MHz 65c02 system. Platform file:
<literal>platform-steckschwein.asm</literal> (26. Oct 2018)</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">SamCo&#8217;s SBC</emphasis> (<link xl:href="https://github.com/SamCoVT/SBC">https://github.com/SamCoVT/SBC</link>) by Sam Colwell.  A
single-board computer running at 4MHz.  Platform file:
<literal>platform-sbc.asm</literal> (29. Oct 2018)</simpara>
</listitem>
</itemizedlist>
</section>
</chapter>
<chapter xml:id="_running_tali_forth">
<title>Running Tali Forth</title>
<blockquote>
<attribution>
Charles Moore
<citetitle>Masterminds of Programming</citetitle>
</attribution>
<simpara>One doesn&#8217;t write programs in Forth. Forth is the program.</simpara>
</blockquote>
<section xml:id="_booting">
<title>Booting</title>
<simpara>Out of the box, Tali Forth boots a minimal kernel<indexterm>
<primary>kernel</primary>
</indexterm> to connect to the
<literal>py65mon</literal> <indexterm>
<primary>py65mon</primary>
</indexterm> simulator. By default, this stage ends with a line such
as</simpara>
<screen>Tali Forth 2 default kernel for py65mon (18. Feb 2018)</screen>
<simpara>When you port Tali Forth to your own hardware, you&#8217;ll have to include your own
kernel (and probably should print out a different line).</simpara>
<simpara>Tali Forth itself boots next, and after setting up various internal
things, compiles the high level words. This causes a slight delay, depending on
the number and length of these words. As the last step, Forth should spit out a
boot string like</simpara>
<screen>Tali Forth 2 for the 65c02
Version ALPHA 02. July 2018
Copyright 2014-2018 Scot W. Stevenson
Tali Forth 2 comes with absolutely NO WARRANTY
Type 'bye' to exit</screen>
<simpara>Because these are the last high-level commands Tali Forth executes, this
functions as a primitive self-test. If you have modified the high level Forth
words in either <literal>forth_words.fs</literal> or <literal>user_words.fs</literal>, the boot process might
fail with a variant of the error message "unknown word". The built-in, native
words should always work. For this <literal>dump</literal> <indexterm>
<primary>dump</primary>
</indexterm> is a built-in word&#8201;&#8212;&#8201;it is very
useful for testing.</simpara>
</section>
<section xml:id="_command_line_history">
<title>Command-Line History</title>
<simpara>Tali&#8217;s command line includes a simple, eight-element history function. To
access the previous entries, press <literal>CONTROL-p</literal>, to go forward to the next
entry, press <literal>CONTROL-n</literal>.</simpara>
</section>
<section xml:id="_words">
<title>Words</title>
<simpara>Tali Forth comes with the following Forth words out of the
box:</simpara>
<screen>see block_init_ramdrive evaluate thru load flush empty-buffers buffer update
block save-buffers block_words_deferred blockwrite blockread scr blk buffstatus
buffblocknum blkbuffer 2literal 2constant d.r d. ud.r ud. .r u.r action-of is defer@
defer! endcase endof of case while until repeat else then if .( ( drop dup swap ! @
over &gt;r r&gt; r@ nip rot -rot tuck , c@ c! +! execute emit type . u. ? false true
space 0 1 2 2dup ?dup + - abs dabs and or xor rshift lshift pick char [char] char+
chars cells cell+ here 1- 1+ 2* 2/ = &lt;&gt; &lt; u&lt; u&gt; &gt; 0= 0&lt;&gt; 0&gt; 0&lt; min max 2drop 2swap
2over 2! 2@ 2variable 2r@ 2r&gt; 2&gt;r invert negate dnegate c, bounds spaces bl
-trailing /string refill accept unused depth key allot create does&gt; variable constant
value to s&gt;d d&gt;s d- d+ erase blank fill find-name ' ['] name&gt;int int&gt;name
name&gt;string &gt;body defer latestxt latestnt parse-name parse source source-id : ; :noname
compile, [ ] 0branch branch literal sliteral ." s" postpone immediate compile-only
never-native always-native nc-limit uf-strip abort abort" do ?do i j loop +loop exit
unloop leave recurse quit begin again state evaluate base digit? number &gt;number hex
decimal count m* um* * um/mod sm/rem fm/mod / /mod mod */mod */ \ move cmove&gt; cmove
pad within &gt;in &lt;# # #s #&gt; hold sign output input cr page at-xy marker words
wordsize aligned align bell dump .s disasm compare search environment? find word cold
bye</screen>
<note>
<simpara>This list might be outdated. To get the current list, run <literal>words</literal> from
inside Tali Forth.</simpara>
</note>
<simpara>Though the list might look unsorted, it actually reflects the priority in the
dictionary<indexterm>
<primary>dictionary</primary>
</indexterm>, that is, which words are found first. For instance,
the native words <indexterm>
<primary>native words</primary>
</indexterm>&#8201;&#8212;&#8201;those coded in assembler&#8201;&#8212;&#8201;always start
with <literal>drop</literal> and end with <literal>bye</literal>. This is the last word that Tali will find in
the dictionary. <footnote><simpara>If you&#8217;re going to quit anyway, speed can&#8217;t be that important</simpara></footnote> The words before <literal>drop</literal> are those that are defined in high-level
Forth. For more information on individual the words, use the <literal>see</literal> command.</simpara>
<simpara>Note that the built-in words are lower case.  While Tali is not case sensitive&#8201;&#8212;&#8201;<literal>KASUMI</literal> is the same word as <literal>Kasumi</literal> <indexterm>
<primary>Kasumi</primary>
</indexterm>&#8201;&#8212;&#8201;newly defined words will be
lowercased as they are created and entered into the dictionary.  There is a
slight speed advantage during lookup to using lowercase words (because Tali
doesn&#8217;t have to lowercase the entered text), so all of the tests for Tali are
in lowercase.</simpara>
<section xml:id="_the_ans_standard">
<title>The ANS Standard</title>
<simpara>Tali Forth is orientated on ANS Forth, the standard defined by the American
National Standards Institute (ANSI). Tali also adopted some words from Gforth
such as <literal>bounds</literal>. In practical terms, Tali aims to be a subset of Gforth: If a
program runs on Tali, it should run on Gforth the same way or have a very good
reason not to.</simpara>
</section>
<section xml:id="_tali_specific_words">
<title>Tali-Specific Words</title>
<simpara>In addition, there are words that are specific to Tali Forth.</simpara>
<informaltable tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara>0branch</simpara>
</entry>
<entry>
<simpara><literal>( f&#8201;&#8212;&#8201;)</literal> Branch if zero. Used internally for branching commands such as <literal>if</literal>.
In modern Forths, this is usually replaced by <literal>cs-pick</literal> and <literal>cs-roll</literal>; Tali Forth
might switch to these words in the future.</simpara>
</entry>
</row>
<row>
<entry>
<simpara>0</simpara>
</entry>
<entry>
<simpara><literal>(&#8201;&#8212;&#8201;0 )</literal> Push the number 0 on the Data Stack.</simpara>
</entry>
</row>
<row>
<entry>
<simpara>1</simpara>
</entry>
<entry>
<simpara><literal>(&#8201;&#8212;&#8201;0 )</literal> Push the number 1 on the Data Stack.</simpara>
</entry>
</row>
<row>
<entry>
<simpara>2</simpara>
</entry>
<entry>
<simpara><literal>(&#8201;&#8212;&#8201;0 )</literal> Push the number 2 on the Data Stack.</simpara>
</entry>
</row>
<row>
<entry>
<simpara>always-native</simpara>
</entry>
<entry>
<simpara>Mark last word in dictionary so that it is always natively compiled.</simpara>
</entry>
</row>
<row>
<entry>
<simpara>bell</simpara>
</entry>
<entry>
<simpara>Ring the terminal bell (ASCII 07).</simpara>
</entry>
</row>
<row>
<entry>
<simpara>block-read</simpara>
</entry>
<entry>
<simpara><literal>( addr blk#&#8201;&#8212;&#8201;)</literal> This is a deferred word the user can change to point
to their own routine for reading 1K blocks into memory from storage.</simpara>
</entry>
</row>
<row>
<entry>
<simpara>block-write</simpara>
</entry>
<entry>
<simpara><literal>( addr blk#&#8201;&#8212;&#8201;)</literal> This is a deferred word the user can change to point
to their own routine for writing 1K blocks from memory to storage.</simpara>
</entry>
</row>
<row>
<entry>
<simpara>block-ramdrive-init</simpara>
</entry>
<entry>
<simpara><literal>( u&#8201;&#8212;&#8201;)</literal> Create a ram drive with the given number of blocks
(numbered 0 to (u-1)) to
allow use of the block words with no additional hardware.  Because the blocks are
only held in ram, they will be lost when the hardware is powered down or the simulator
is stopped.</simpara>
</entry>
</row>
<row>
<entry>
<simpara>branch</simpara>
</entry>
<entry>
<simpara>Always take branch. See <literal>0branch</literal>.</simpara>
</entry>
</row>
<row>
<entry>
<simpara>cleave</simpara>
</entry>
<entry>
<simpara><literal>( addr u c&#8201;&#8212;&#8201;addr2 u2 addr1 u1 )</literal> Given a block of character memory and
a delimiter character, split off the first sub-block and put it in TOS and NOS.
Leave the rest lower down on the stack. This allows breaking off single words (or
zero-terminated strings in memory, with a different delimiter) for further
processing. Use with loops:</simpara>
<screen>: tokenloop ( addr u -- addr u addr u)
    cr begin
        bl cleave
        type cr  \ &lt;-- processing of single word ( addr u ) here
    dup 0= until
    2drop ;</screen>
<simpara>For a string such as <literal>s" emergency induction port"</literal>, this gives us:</simpara>
<screen>emergency
induction
port
 ok</screen>
</entry>
</row>
<row>
<entry>
<simpara>compile-only</simpara>
</entry>
<entry>
<simpara>Mark last word in dictionary as compile-only.</simpara>
</entry>
</row>
<row>
<entry>
<simpara>digit?</simpara>
</entry>
<entry>
<simpara><literal>( char&#8201;&#8212;&#8201;u f | char f )</literal> If character is a digit, convert and set flag to
<literal>true</literal>, otherwise return the offending character and a <literal>false</literal> flag.</simpara>
</entry>
</row>
<row>
<entry>
<simpara>ed</simpara>
</entry>
<entry>
<simpara>Start the command-line editor. There is a whole chapter on this father
down.</simpara>
</entry>
</row>
<row>
<entry>
<simpara>input</simpara>
</entry>
<entry>
<simpara>Return the address where the vector for the input routine is
stored (not the vector itself). Used for input redirection for
<literal>emit</literal> and others.</simpara>
</entry>
</row>
<row>
<entry>
<simpara>int&gt;name</simpara>
</entry>
<entry>
<simpara><literal>( xt&#8201;&#8212;&#8201;nt )</literal> Given the execution execution token (xt), return the
name token (nt).</simpara>
</entry>
</row>
<row>
<entry>
<simpara>latestnt</simpara>
</entry>
<entry>
<simpara><literal>(&#8201;&#8212;&#8201;nt )</literal> Return the last used name token. The Gforth version of this
word is called <literal>latest</literal>.</simpara>
</entry>
</row>
<row>
<entry>
<simpara>nc-limit</simpara>
</entry>
<entry>
<simpara><literal>(&#8201;&#8212;&#8201;addr )</literal> Return the address where the threshold value for native
compiling native compiling is kept. To check the value of this parameter, use <literal>nc-limit ?</literal>.
The default value is 20.</simpara>
</entry>
</row>
<row>
<entry>
<simpara>never-native</simpara>
</entry>
<entry>
<simpara>Mark most recent word so it is never natively compiled.</simpara>
</entry>
</row>
<row>
<entry>
<simpara>number</simpara>
</entry>
<entry>
<simpara><literal>( addr u&#8201;&#8212;&#8201;u | d )</literal> Convert a string to a number.  Gforth uses
<literal>s&gt;number?</literal> and returns a success flag as well.</simpara>
</entry>
</row>
<row>
<entry>
<simpara>output</simpara>
</entry>
<entry>
<simpara><literal>(&#8201;&#8212;&#8201;addr )</literal> Return the address where the vector for the output routine is
stored (not the vector itself). Used for output redirection for <literal>emit</literal> and
others.</simpara>
</entry>
</row>
<row>
<entry>
<simpara>uf-strip</simpara>
</entry>
<entry>
<simpara><literal>(&#8201;&#8212;&#8201;addr)</literal> Return the address where the flag is kept that decides
if the underflow checks are removed during native compiling. To check the value
of this flag, use <literal>uf-strip ?</literal>.</simpara>
</entry>
</row>
<row>
<entry>
<simpara>wordsize</simpara>
</entry>
<entry>
<simpara><literal>( nt&#8201;&#8212;&#8201;u )</literal> Given the name token (nt) of a Forth word, return its
size in bytes. Used to help tune native compiling.</simpara>
</entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
</section>
<section xml:id="_native_compiling">
<title>Native Compiling</title>
<simpara>As the name says, subroutine threaded code encodes the words as a series of
subroutine jumps. Because of the overhead caused by these jumps, this can make
the code slow. Therefore, Tali Forth enables native compiling, where the
machine code from the word itself is included instead of a subroutine jump. This
is also called "inlining".</simpara>
<simpara>The parameter <literal>nc-limit</literal> sets the limit of how small words have to be to be
natively compiled. To get the current value (usually 20), check the value of
the system variable:</simpara>
<screen>nc-limit ?</screen>
<simpara>To set a new limit, save the maximal allowed number of bytes in the machine
code like any other Forth variable:</simpara>
<screen>40 nc-limit !</screen>
<simpara>To complete turn off native compiling, set this value to zero.</simpara>
</section>
<section xml:id="_underflow_detection">
<title>Underflow Detection</title>
<simpara>When a word tries to access more words on the stack than it is holding, an
"underflow" error occurs. Whereas Tali Forth 1 didn&#8217;t check
for these errors, this version does.</simpara>
<simpara>However, this slows the program down. Because of this, the user can turn off
underflow detection for words that are natively compiled into new words. To do
this, set the system variable <literal>uf-strip</literal> to <literal>true</literal>. Note this does not turn off
underflow detection in the built-in words. Also, words with underflow detection
that are not included in new words through native compiling will also retain
their tests.</simpara>
</section>
<section xml:id="_restarting">
<title>Restarting</title>
<simpara>Tali Forth has a non-standard word <literal>cold</literal> that resets the system. This doesn&#8217;t
erase any data in memory, but just moves the pointers back. When in doubt, you
might be better off quitting and restarting completely.</simpara>
</section>
<section xml:id="_gotchas">
<title>Gotchas</title>
<simpara>Some things to look out for when using Tali Forth.</simpara>
<section xml:id="_cell_size_2">
<title>Cell Size</title>
<simpara>Tali has a 16-bit cell size.</simpara>
<note>
<simpara>Use <literal>1 cells 8 * .</literal> to get the cell size in bits with any Forth.</simpara>
</note>
<simpara>This can trip up calculations when compared to the <emphasis>de facto</emphasis> standard Gforth
with 64 bits. Take this example:</simpara>
<screen>( Gforth )      decimal 1000 100 um* hex swap u. u.  ( returns 186a0 0  ok )
( Tali Forth)   decimal 1000 100 um* hex swap u. u.  ( returns 86a0 1  ok )</screen>
<simpara>Tali has to use the upper cell of a double-celled number to correctly report
the result, while Gforth doesn&#8217;t. If the conversion from double to single is
only via a <literal>drop</literal> instruction, this will produce different results.</simpara>
<simpara>There is a similar effect with the Gforth word <literal>bounds</literal>: Because of Tali&#8217;s 16
bit address space, it wraps the upper address if we go beyond $FFFF:</simpara>
<screen>( Gforth )      hex FFFF 2 bounds  swap u. u.  ( returns 10001 ffff  ok  )
( Tali )        hex FFFF 2 bounds  swap u. u.  ( returns     1 ffff  ok )</screen>
</section>
<section xml:id="_delimiters_during_parsing">
<title>Delimiters During Parsing</title>
<simpara>Both <literal>parse-name</literal> and <literal>parse</literal> skip white space - defined as ASCII characters
from 00 to 32 (SPACE) inclusive - when the standard talks about "spaces".
Otherwise, Tali would choke on TABs during compiling, and the <literal>ed</literal> editor
couldn&#8217;t be used to edit programs because of the Line Feed characters. This is
covered in the standard, see the footnote at
<link xl:href="https://forth-standard.org/standard/core/PARSE-NAME">https://forth-standard.org/standard/core/PARSE-NAME</link> by Anton Ertl, referencing
<link xl:href="http://forth-standard.org/standard/usage#subsubsection.3.4.1.1">http://forth-standard.org/standard/usage#subsubsection.3.4.1.1</link> and
<link xl:href="http://forth-standard.org/standard/file#subsection.11.3.5">http://forth-standard.org/standard/file#subsection.11.3.5</link> .</simpara>
</section>
<section xml:id="_negative_literal_allot_literal">
<title>Negative <literal>allot</literal></title>
<simpara>The ANSI standard does not define what happens if there is an attempt to free
more memory with <literal>allot</literal> by passing a negative value than is available. Tali
will let the user free memory up the beginning of RAM assigned to the Dictionary
(marked with <literal>cp0</literal> in the code), even though this can mean that the Dictionary
itself is compromised. This is Forth, you&#8217;re the boss.</simpara>
<simpara>However, any attempt to free more memory than that will set the beginning of RAM
to <literal>cp0</literal>. Also, the Dictionary Pointer <literal>dp</literal> will point to the <emphasis>last native word</emphasis>
of the Dictionary, which is usually <literal>drop</literal>. Because of this, the high level
words defined during boot will <emphasis>not</emphasis> be available. There will be an error
message to document this. Realistically, you&#8217;ll probably want to restart with
<literal>cold</literal> if any of this happens.</simpara>
</section>
</section>
</chapter>
<chapter xml:id="_major_components">
<title>Major Components</title>
<section xml:id="_blocks">
<title>Blocks</title>
<simpara>Tali supports the optional BLOCK word set. The 2012 Forth standard
defines a block as 1024 bytes, and the buffers for them are the same
size (as opposed to some older forths that had smaller buffers.) Tali
currently comes with one buffer.</simpara>
<simpara>Before these words can be used, the user needs to write two routines: one for
reading blocks into RAM and one for writing blocks out from RAM. Both of these
should have the signature <literal>( addr blk#&#8201;&#8212;&#8201;)</literal>. Once these have been written, they
can be incorporated into the BLOCK word set by changing the deferred words
<literal>block-read</literal> and <literal>block-write</literal>. That might look like:</simpara>
<screen>' myblockreader IS BLOCK-READ
' myblockwriter IS BLOCK-WRITE</screen>
<simpara>Once these two deferred words have been updated, you can use the block
words.</simpara>
<simpara>If you would like to play with some blocks, but don&#8217;t have any
hardware or are running Tali in a simulator, fear not!  Tali has a
built-in RAM drive that can be accessed by running:</simpara>
<screen>4 block-ramdrive-init</screen>
<simpara>This reserves a chunk of ram with four blocks in it (numbered 0-3) which is
enough to play around with. It also sets up the routines for reading and writing
blocks in this ramdrive for you. If you want more blocks, you can change the
number. Because they start at zero, the last valid block will always be one less
than the number you provide.</simpara>
<simpara>Be careful about creating too many blocks as they are 1K each.  It&#8217;s also worth
noting that running <literal>block-ramdrive-init</literal> again will create another ramdrive and
the existing one will be inaccessible while still taking up space in RAM.</simpara>
</section>
<section xml:id="_the_block_editor">
<title>The Block Editor</title>
<simpara>If you are using blocks (see the block chapter), you can use the following code
to create a very basic screen editor that allows you to replace a single line or
an entire screen. Screens are 16 lines (numbered 0-15) of 64 characters each,
for a total of 1K characters.  Because newlines are not stored in the blocks
(the remainder of each line is filled with spaces,) you should leave a space in
the very last character of each line to separate the words in that line from the
words in the next line.</simpara>
<note>
<simpara>This editor uses a word named <literal>E</literal> which may interfere with the use
of hex. Once you have entered the editor words, you will need to use
the hex value "0E" anywhere you want a single "E" value. This will not
interfere with hex numbers that have additional digits.  Alternately,
you can rename the <literal>E</literal> word and update the <literal>O</literal> word which uses it.</simpara>
</note>
<screen>( Simple Editor for screens /blocks )
decimal
( line provides the address, in the buffer, of the given line )
: line  ( line# - c-addr)
    64 *        ( Convert line number to # characters offset )
    scr @ block ( Get the buffer address for that block )
    + ;         ( Add the offset )

: E ( line# - ) ( Erase the given line number with spaces )
    line 64 blank update ;

: O     ( line# - ) ( Overwrite line with new text )
    dup E                    ( Erase existing text on line )
    cr dup 2 u.r ."  * " line 64 accept drop update ;

( Editor, continued )
: enter-screen ( scr# - )
  dup scr ! buffer drop
  16 0 do i o loop ;
: erase-screen ( scr# - )
  dup scr ! buffer 1024 blank update ;</screen>
<simpara>To use this editor, first select a screen to work with by running list on it. If
you are planning on using <literal>load</literal> to run some code later, it&#8217;s worth noting that
only screens above 0 can be LOADed. Screen 0 is reserved for comments describing
what is on the other screens.  It can be LISTed and edited, but cannot be
LOADed.</simpara>
<screen>1 list</screen>
<simpara>Tali will show you the current (blank) contents of that screen.</simpara>
<screen>Screen #   1
 0
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
 ok</screen>
<simpara>To add some text to line 3, you might say</simpara>
<screen>3 o</screen>
<simpara>This will give you a prompt to enter the text to overwrite line 3.
You can enter up to 64 characters.  Once you have selected a screen
with <literal>list</literal>, you can use just <literal>L</literal> to list it again.</simpara>
<simpara>To replace the contents of an entire screen, you can say something
like:</simpara>
<screen>2 enter-screen</screen>
<simpara>This will prompt you, line by line, for the new contents to screen 2.</simpara>
<simpara>Once you have your screens the way you want them, you can type</simpara>
<screen>flush</screen>
<simpara>to flush your changes out to storage.</simpara>
<simpara>You can enter Forth code on these screens. At the moment, Tali only
supports comments in parentheses inside of blocks, so make sure you
put your comments ( like this ) rather than using \ when entering
Forth code.  To load the Forth code on a screen, just type something
like:</simpara>
<screen>2 load</screen>
<simpara>Because a screen only holds 16 lines, you may need to split your code
across multiple screens.  You can load a series of screens (in order)
using the <literal>thru</literal> command like so:</simpara>
<screen>1 3 thru</screen>
</section>
<section xml:id="_the_line_based_editor_literal_ed_literal">
<title>The Line-Based Editor <literal>ed</literal></title>
<tip>
<simpara>This manual includes <link linkend="ed-tutorial">a tutorial</link> for <literal>ed</literal></simpara>
</tip>
<blockquote>
<attribution>
B. W. Kernighan
<citetitle>A Tutorial Introduction to the UNIX Text Editor</citetitle>
</attribution>
<simpara>Ed makes no response to most commands – there is no prompting or typing of
messages like "ready". (This silence is preferred by experienced users, but
sometimes a hangup for beginners.) <xref linkend="BWK"/></simpara>
</blockquote>
<simpara>Tali Forth 2 currently ships with a clone of the <literal>ed</literal> line-based editor of
Unix fame. It is envoked with <literal>ed</literal> and does not change the data stack. The
formal name is <literal>ed6502</literal>.</simpara>
<warning>
<simpara><literal>ed</literal> is included in a very primitive form only and should be considered
ALPHA.</simpara>
</warning>
<section xml:id="_supported_commands">
<title>Supported Commands</title>
<simpara><literal>ed</literal> currently supports only a small number of the commands of the Unix version:</simpara>
<informaltable tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara>a</simpara>
</entry>
<entry>
<simpara>Add new lines below given line</simpara>
</entry>
</row>
<row>
<entry>
<simpara>d</simpara>
</entry>
<entry>
<simpara>Delete line</simpara>
</entry>
</row>
<row>
<entry>
<simpara>i</simpara>
</entry>
<entry>
<simpara>Add new lines above given line</simpara>
</entry>
</row>
<row>
<entry>
<simpara>q</simpara>
</entry>
<entry>
<simpara>Quit if no unsaved work</simpara>
</entry>
</row>
<row>
<entry>
<simpara>Q</simpara>
</entry>
<entry>
<simpara>Unconditional quit, unsaved work is lost</simpara>
</entry>
</row>
<row>
<entry>
<simpara>w</simpara>
</entry>
<entry>
<simpara>Write text to given memory location (eg <literal>7000w</literal>)</simpara>
</entry>
</row>
<row>
<entry>
<simpara>=</simpara>
</entry>
<entry>
<simpara>Print value of given parameter (eg <literal>$=</literal> gives number of last line)</simpara>
</entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>For the parameters, these are currently available:</simpara>
<informaltable tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara>.</simpara>
</entry>
<entry>
<simpara>Current line number</simpara>
</entry>
</row>
<row>
<entry>
<simpara>,</simpara>
</entry>
<entry>
<simpara>When alone: All lines, the same as <literal>1,$</literal> or <literal>%</literal></simpara>
</entry>
</row>
<row>
<entry>
<simpara>$</simpara>
</entry>
<entry>
<simpara>Last line</simpara>
</entry>
</row>
<row>
<entry>
<simpara>%</simpara>
</entry>
<entry>
<simpara>All lines, the same as <literal>1,$</literal> or <literal>,</literal> alone</simpara>
</entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>An empty line (pressing the ENTER key) will advance by one line and print it. A
simple number will print that line without the line number and make that line
the new current line.</simpara>
</section>
<section xml:id="_future_planned_commands">
<title>Future planned commands</title>
<simpara>There is no time frame for these additions.</simpara>
<informaltable tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara>+</simpara>
</entry>
<entry>
<simpara>Advance by one line, print it and make it the new current line</simpara>
</entry>
</row>
<row>
<entry>
<simpara>-</simpara>
</entry>
<entry>
<simpara>Go back by one line, print it and make it the new current line</simpara>
</entry>
</row>
<row>
<entry>
<simpara>c</simpara>
</entry>
<entry>
<simpara>Change a line, possibly adding new lines</simpara>
</entry>
</row>
<row>
<entry>
<simpara>e</simpara>
</entry>
<entry>
<simpara>Edit lines given as <literal>addr,u</literal> in text buffer</simpara>
</entry>
</row>
<row>
<entry>
<simpara>f</simpara>
</entry>
<entry>
<simpara>Show current target address for writes</simpara>
</entry>
</row>
<row>
<entry>
<simpara>j</simpara>
</entry>
<entry>
<simpara>Join two lines to a new line</simpara>
</entry>
</row>
<row>
<entry>
<simpara>m</simpara>
</entry>
<entry>
<simpara>Move block of text to new line</simpara>
</entry>
</row>
<row>
<entry>
<simpara>r</simpara>
</entry>
<entry>
<simpara>Read lines into text buffer</simpara>
</entry>
</row>
<row>
<entry>
<simpara>s</simpara>
</entry>
<entry>
<simpara>Substitute one string on line with another</simpara>
</entry>
</row>
<row>
<entry>
<simpara>!</simpara>
</entry>
<entry>
<simpara>Execute a shell command (Forth command in our case)</simpara>
</entry>
</row>
<row>
<entry>
<simpara>#</simpara>
</entry>
<entry>
<simpara>Comment, ignore rest of the line</simpara>
</entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>The following parameter features:</simpara>
<informaltable tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara>;</simpara>
</entry>
<entry>
<simpara>Range from current line to end, same as <literal>.,$</literal></simpara>
</entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
<section xml:id="_differences_to_unix_ed">
<title>Differences to Unix ed</title>
<simpara>(Apart from missing about 90 percent of the features, that is)</simpara>
<itemizedlist>
<listitem>
<simpara>The <literal>w</literal> (write) command takes its parameter before and not after the word.
Where Unix ed uses the format <literal>w &lt;FILENAME&gt;</literal>, ed6502 takes the address
to write the text to as <literal>7000w</literal>.</simpara>
</listitem>
</itemizedlist>
<warning>
<simpara>At this point, it isn&#8217;t totally clear what happens if the number base
is set to hexadecimal via <literal>hex</literal>. Use at your own risk.</simpara>
</warning>
</section>
<section xml:id="_using_literal_ed_literal_for_programming">
<title>Using <literal>ed</literal> for programming</title>
<simpara><literal>Ed</literal> can be used to write programs and then execute them with <literal>evaluate</literal>. For
instance, a session to add a small string could look something like this:</simpara>
<screen>ed
a
.( Shepard, is that ... You're alive?)
.
7000w <co xml:id="CO1-1"/>
22 <co xml:id="CO1-2"/>
q</screen>
<calloutlist>
<callout arearefs="CO1-1">
<para>Address we save the command to</para>
</callout>
<callout arearefs="CO1-2">
<para>Number of characters saved including final line feed</para>
</callout>
</calloutlist>
<simpara>It is a common mistake to forget the <literal>.</literal> (dot) to end the input, and try to
go immediately to saving the text. Then, we can run the program:</simpara>
<screen>7000 22 evaluate</screen>
<simpara>Ǹote that <literal>evaluate</literal> will handle line feeds, carriage returns and other white
space apart from simple spaces without problems.</simpara>
</section>
<section xml:id="_known_issues">
<title>Known Issues</title>
<section xml:id="_memory_use">
<title>Memory use</title>
<simpara><literal>Ed</literal> currently uses memory without releasing it when done. For small, quick
edits, this probably is not a problem. However, if you known you are going to be
using more memory, you probably will want to set a marker first.</simpara>
<screen>marker pre-edit <co xml:id="CO2-1"/>
ed <co xml:id="CO2-2"/>
pre-edit <co xml:id="CO2-3"/></screen>
<calloutlist>
<callout arearefs="CO2-1">
<para>Set marker at current value of <literal>here</literal></para>
</callout>
<callout arearefs="CO2-2">
<para>Edit normally</para>
</callout>
<callout arearefs="CO2-3">
<para>Call marker, releasing memory</para>
</callout>
</calloutlist>
<simpara>This issue might be taken care of in a future release.</simpara>
</section>
<section xml:id="_address_of_saved_text">
<title>Address of Saved Text</title>
<simpara>Currently, <literal>ed</literal> returns the data stack just the way it found it. This means
that you have to remember where you saved the text to with <literal>w</literal> and how long it
was. A different option would be to return <literal>(&#8201;&#8212;&#8201;addr u )</literal>, that is, the address
and length of the text we saved. If nothing is saved, the program would return a
zero length as TOS.</simpara>
</section>
</section>
<section xml:id="_developer_information">
<title>Developer Information</title>
<simpara><literal>Ed</literal> will be massively rewritten under the hood once the code has been
stabilized, has all features, and a testing suite. Currently, it&#8217;s somewhat of a
mess and contains some testing routines that will be removed in the final
version.</simpara>
<simpara>The "buffer" of <literal>ed</literal> is a simple linked list of nodes, consisting of a pointer
to the next entry, a pointer to the string address, and the length of that
string. Each entry is two byte, making six bytes in total for each node. A value
of 0000 in the pointer to the next address signals the end of the list. The
buffer starts at the point of the <literal>cp</literal> (accessed with the Forth word <literal>here</literal>) and
is only saved to the given location when the <literal>w</literal> command is given.</simpara>
</section>
</section>
<section xml:id="_assembler">
<title>Assembler</title>
<warning>
<simpara>Currently, there is no assembler included. The plan is to include a simple
assembler based on Simpler Assembler Notation (SAN).</simpara>
</warning>
</section>
<section xml:id="_disassembler">
<title>Disassembler</title>
<simpara>Tali Forth is currently shipped with a very primitive disassembler, which is
started with <literal>disasm ( addr u&#8201;&#8212;&#8201;)</literal>.</simpara>
<section xml:id="_format">
<title>Format</title>
<simpara>The output format is in Simpler Assembler Notation (SAN) which adds the mode of
an instruction to the main mnemonic, simplifying parsing of code. For instance,</simpara>
<screen>lda #1
sta $1000,x
sta $80
lda ($80)</screen>
<simpara>becomes</simpara>
<screen>lda.# 1
sta.x $1000
sta.z $80
lda.di $80</screen>
<simpara>A full discussion of SAN is beyond the scope of this document, see
<link xl:href="https://docs.google.com/document/d/16Sv3Y-3rHPXyxT1J3zLBVq4reSPYtY2G6OSojNTm4SQ/edit#heading=h.ik059qk0tz7r">this
link</link> for an overview of the format (currently still under a different name).</simpara>
</section>
<section xml:id="_replacing_the_disassembler">
<title>Replacing the Disassembler</title>
<simpara>Tali was designed to make it easy for the user to swap in a different
disassembler. The code is in a separate file, <literal>disassembler.asm</literal>. To replace
this by your version, move the file to a different name, make sure that it
accepts <literal>( addr u )</literal> on the Forth Data Stack as parameters, and start your code
after the label <literal>disassembler:</literal>.</simpara>
</section>
</section>
</chapter>
</part>
<part xml:id="_developer_guide">
<title>Developer Guide</title>
<chapter xml:id="_how_tali_forth_works">
<title>How Tali Forth Works</title>
<blockquote>
<attribution>
Dennis M. Ritchie
<citetitle>Reflections on Software Research</citetitle>
</attribution>
<simpara>Our intent was to create a pleasant computing environment
for ourselves, and our hope was that others liked it. <xref linkend="DMR"/></simpara>
</blockquote>
<section xml:id="_the_data_stack">
<title>The Data Stack</title>
<simpara>Tali Forth uses the lowest part of the top half of the Zero Page<indexterm>
<primary>Zero Page</primary>
</indexterm> for the Data Stack (DS). This leaves the lower half of the Zero Page
for any kernel stuff the user might require. The DS grows towards the initial
user variables. See the file <literal>definitions.asm</literal> for details. Because of the
danger of underflow,<indexterm>
<primary>underflow</primary>
</indexterm> it is recommended that the user kernel&#8217;s
variables are kept closer to $0100 than to $007F.</simpara>
<simpara>The X register<indexterm>
<primary>X register</primary>
</indexterm> is used as the Data Stack Pointer (DSP). It
points to the least significant byte of the current top element of the stack
("Top of the Stack", TOS).</simpara>
<note>
<simpara>In the first versions of Tali Forth 1, the DSP pointed to the next <emphasis>free</emphasis>
element of the stack. The new system makes detecting underflow easier and
follows the convention in Liara Forth.<indexterm>
<primary>Liara</primary>
</indexterm></simpara>
</note>
<simpara>Initially, the DSP points to $78, not $7F as might be expected. This provides a
few bytes as a "floodplain" for underflow.<indexterm>
<primary>underflow</primary>
</indexterm> The initial value of
the DSP is defined as <literal>dsp0</literal> in the code.</simpara>
<section xml:id="_single_cell_values">
<title>Single Cell Values</title>
<simpara>Since the cell size is 16 bits, each stack entry consists of two bytes. They are
stored little endian (least significant byte first). Therefore, the DSP points
to the LSB of the current TOS. <footnote><simpara>Try reading that last sentence to a friend who isn&#8217;t into computers. Aren&#8217;t abbreviations fun?</simpara></footnote></simpara>
<simpara>Because the DSP points to the current top of the stack, the byte it points to
after boot&#8201;&#8212;&#8201;<literal>dsp0</literal>&#8201;&#8212;&#8201;will never be accessed: The DSP is decremented first
with two <literal>dex</literal> instructions, and then the new value is placed on the stack.
This means that the initial byte is garbage and can be considered part of the
floodplain.</simpara>
<formalpara>
<title>Snapshot of the Data Stack with one entry as TOS. The DSP has been increased by one and the value written.</title>
<para>
<literallayout class="monospaced">              +--------------+
              |          ... |
              +-            -+
              |              |   ...
              +-  (empty)   -+
              |              |  FE,X
              +-            -+
        ...   |              |  FF,X
              +==============+
       $0076  |           LSB|  00,X   &lt;-- DSP (X Register)
              +-    TOS     -+
       $0077  |           MSB|  01,X
              +==============+
       $0078  |  (garbage)   |  02,X   &lt;-- DSP0
              +--------------+
       $0079  |              |  03,X
              + (floodplain) +
       $007A  |              |  04,X
              +--------------+</literallayout>
</para>
</formalpara>
<simpara>Note that the 65c02 system stack&#8201;&#8212;&#8201;used as the Return Stack (RS) by Tali&#8201;&#8212;&#8201;pushes the MSB on first and then the LSB (preserving little endian), so the
basic structure is the same for both stacks.</simpara>
<simpara>Because of this stack design, the second entry ("next on stack", NOS) starts at
<literal>02,X</literal> and the third entry ("third on stack", 3OS) at <literal>04,X</literal>.</simpara>
</section>
<section xml:id="_underflow_detection_2">
<title>Underflow Detection</title>
<simpara>Most native words come with built-in underflow detection. This works by
comparing the Data Stack Pointer (X) to values that it must be smaller than
(because the stack grows towards 0000). For instance, to make sure we have one
element on the stack, we write</simpara>
<screen>                cpx #dsp0-1
                bmi _ok
                jmp underflow
_ok:
                (...)</screen>
<simpara>For the most common cases, this gives us:</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>DSP values for underflow testing</title>
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<thead>
<row>
<entry align="center" valign="top">Test for</entry>
<entry align="center" valign="top">Pointer offset</entry>
</row>
</thead>
<tbody>
<row>
<entry align="center" valign="top"><simpara>one element</simpara></entry>
<entry align="center" valign="top"><simpara><literal>dsp0-1</literal></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>two elements</simpara></entry>
<entry align="center" valign="top"><simpara><literal>dsp0-3</literal></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>three elements</simpara></entry>
<entry align="center" valign="top"><simpara><literal>dsp0-5</literal></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>four elements</simpara></entry>
<entry align="center" valign="top"><simpara><literal>dsp0-7</literal></simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara>Underflow detection adds seven bytes to the words that have it. However, it
increases the stability of the program. There is an option for stripping it out
during for user-defined words (see below).</simpara>
</section>
<section xml:id="_double_cell_values">
<title>Double Cell Values</title>
<simpara>The double cell is stored on top of the single cell. Note this places the sign
bit at the beginning of the byte below the DSP.</simpara>
<literallayout class="monospaced">              +---------------+
              |               |
              +===============+
              |            LSB|  $0,x   &lt;-- DSP (X Register)
              +-+  Top Cell  -+
              |S|          MSB|  $1,x
              +-+-------------+
              |            LSB|  $2,x
              +- Bottom Cell -+
              |            MSB|  $3,x
              +===============+</literallayout>
<simpara>Tali Forth does not check for overflow, which in normal operation is too rare
to justify the computing expense.</simpara>
</section>
</section>
<section xml:id="_dictionary">
<title>Dictionary</title>
<simpara>Tali Forth follows the traditional model of a Forth dictionary&#8201;&#8212;&#8201;a linked list
of words terminated with a zero pointer. The headers and code are kept separate
to allow various tricks in the code.</simpara>
<section xml:id="_elements_of_the_header">
<title>Elements of the Header</title>
<simpara>Each header is at least eight bytes long:</simpara>
<literallayout class="monospaced">              8 bit     8 bit
               LSB       MSB
nt_word -&gt;  +--------+--------+
         +0 | Length | Status |
            +--------+--------+
         +2 | Next Header     | next nt_word
            +-----------------+
         +4 | Start of Code   | xt_word
            +-----------------+
         +6 | End of Code     | z_word
            +--------+--------+
         +8 | Name   |        |
            +--------+--------+
            |        |        |
            +--------+--------+
            |        |  ...   |
         +n +--------+--------+</literallayout>
<simpara>Each word has a <literal>name token</literal> (nt, <literal>nt_word</literal> in the code) that points to the
first byte of the header. This is the length of the word&#8217;s name string, which
is limited to 255 characters.</simpara>
<simpara>The second byte in the header (index 1) is the status byte. It is created by
the flags defined in the file <literal>definitions.asm</literal>:</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Header flags</title>
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<thead>
<row>
<entry align="left" valign="top">Flag</entry>
<entry align="left" valign="top">Function</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>CO</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Compile Only</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>IM</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Immediate Word</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>NN</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Never Native Compile</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>AN</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Always Native Compile</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>UF</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Underflow detection</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>HC</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Has Code Field Area (CFA)</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara>Note there are currently two bits unused.</simpara>
<informaltable tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara>CO</simpara>
</entry>
<entry>
<simpara>This word may only be used inside definitions of new words.</simpara>
</entry>
</row>
<row>
<entry>
<simpara>IM</simpara>
</entry>
<entry>
<simpara>Word is executed immediately during definitions of new words.</simpara>
</entry>
</row>
<row>
<entry>
<simpara>NN</simpara>
</entry>
<entry>
<simpara>Word is never inlined. Usually means that the return address from a
subroutine jump is required for processing.</simpara>
</entry>
</row>
<row>
<entry>
<simpara>AN</simpara>
</entry>
<entry>
<simpara>Word must always be inlined.</simpara>
</entry>
</row>
<row>
<entry>
<simpara>HC</simpara>
</entry>
<entry>
<simpara>Consider first three bytes of the word&#8217;s code the Code Field Area (CFA)
of the word. Used by words defined with <literal>create</literal> so <literal>&gt;body</literal> returns
the correct value.</simpara>
</entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>The status byte is followed by the <emphasis role="strong">pointer to the next header</emphasis> in the linked
list, which makes it the name token of the next word. A 0000 in this position
signals the end of the linked list, which by convention is the word <literal>bye</literal> for
the native code words.</simpara>
<simpara>This is followed by the current word&#8217;s <emphasis role="strong">execution token</emphasis> (xt, <literal>xt_word</literal>) that
points to the start of the actual code. Some words that have the same
functionality point to the same code block.</simpara>
<note>
<simpara>Because Tali uses a subroutine threaded model (STC), the classic Forth
distinction between the Code Field Area (CFA) and the Parameter Field Area
(PFA, also Data Field Area) is meaningless&#8201;&#8212;&#8201;it&#8217;s all "payload".</simpara>
</note>
<simpara>The next pointer is for the <emphasis role="strong">end of the code</emphasis> (<literal>z_word</literal>) to enable native
compilation of the word (if allowed and requested).</simpara>
<simpara>The <emphasis role="strong">name string</emphasis> starts at the eighth byte. The string is <emphasis>not</emphasis>
zero-terminated.  Tali Forth lowercases names as they are copied into the
dictionary and also lowercases during lookup, so <literal>quarian</literal> is the same word as
<literal>QUARIAN</literal>.  If the name in the dictionary is directly modified, it is important
to ensure that only lowercase letters are used, or else Tali will not be able
to find that word.</simpara>
</section>
<section xml:id="_structure_of_the_header_list">
<title>Structure of the Header List</title>
<simpara>Tali Forth distinguishes between three different word sources: The <emphasis role="strong">native
words</emphasis> that are hard-coded in the file <literal>native_words.asm</literal>, the <emphasis role="strong">Forth words</emphasis>
from <literal>forth_words.asm</literal> which are defined as high-level words and then generated
at run-time when Tali Forth starts up, and <emphasis role="strong">user words</emphasis> in the file
<literal>user_words.asm</literal>.</simpara>
<simpara>Tali has an unusually high number of native words in an attempt to make the
Forth as fast as possible on the 65c02 and compensate for the disadvantages of
the subroutine threading model (STC). The first word on that list&#8201;&#8212;&#8201;the one
that is checked first&#8201;&#8212;&#8201;is always <literal>drop</literal>, the last one&#8201;&#8212;&#8201;the one checked for
last&#8201;&#8212;&#8201;is always <literal>bye</literal>. The words which are (or are assumed to be) used more
than others come first. Since humans are slow, words that are used more
interactively like <literal>words</literal> always come later.</simpara>
<simpara>The list of Forth words ends with the intro strings. This functions as a
primitive form of a self-test: If you see the welcome message, compilation of
the Forth words worked.</simpara>
<literallayout class="monospaced">   $0000  +-------------------+  ram_start, zpage, user0
          |  User variables  |
          +-------------------+
          |                   |
          |  ^  Data Stack    |  &lt;-- dsp
          |  |                |
   $0078  +-------------------+  dsp0, stack
          |                   |
          |   (Reserved for   |
          |      kernel)      |
          |                   |
   $0100  +===================+
          |                   |
          |  ^  Return Stack  |  &lt;-- rsp
          |  |                |
   $0200  +-------------------+  rsp0, buffer, buffer0
          |  |                |
          |  v  Input Buffer  |
          |                   |
   $0300  +-------------------+  cp0
          |  |                |
          |  v  Dictionary    |
          |       (RAM)       |
          |                   |
          ~~~~~~~~~~~~~~~~~~~~~  &lt;-- cp
          |                   |
          |                   |
          +-------------------+
          |                   |
          | ACCEPT history    |
          |                   |
   $7FFF  #####################  ram_end
   $8000  |                   |  forth, code0
          |                   |
          |                   |
          |    Tali Forth     |
          |     (24 KiB)      |
          |                   |
          |                   |
   $E000  +-------------------+
          |                   |  kernel_putc, kernel_getc
          |      Kernel       |
          |                   |
   $F000  +-------------------+
          |   I/O addresses   |
          +-------------------+
          |                   |
          |      Kernel       |
          |                   |
   $FFFA  +-------------------+
          |  65c02 vectors    |
   $FFFF  +-------------------+</literallayout>
<simpara>Note that some of these values are hard-coded into the test suite; see the file
<literal>definitions.txt</literal> for details.</simpara>
</section>
</section>
<section xml:id="_input">
<title>Input</title>
<simpara>Tali Forth follows the ANS Forth input model with <literal>refill</literal> instead of older
forms. There are four possible input sources:</simpara>
<itemizedlist>
<listitem>
<simpara>The keyboard ("user input device")</simpara>
</listitem>
<listitem>
<simpara>A character string in memory</simpara>
</listitem>
<listitem>
<simpara>A block file</simpara>
</listitem>
<listitem>
<simpara>A text file</simpara>
</listitem>
</itemizedlist>
<simpara>To check which one is being used, we first call <literal>blk</literal> which gives us the number
of a mass storage block being used, or 0 for the "user input device" (keyboard).
In the second case, we use <literal>source-id</literal> to find out where input is coming from:</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Non-block input sources</title>
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<thead>
<row>
<entry align="left" valign="top">Value</entry>
<entry align="left" valign="top">Source</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>0</simpara></entry>
<entry align="left" valign="top"><simpara>keyboard</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>-1</simpara></entry>
<entry align="left" valign="top"><simpara>string in memory</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>n</literal></simpara></entry>
<entry align="left" valign="top"><simpara>file-id</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara>Since Tali currently doesn&#8217;t support blocks, we can skip the <literal>blk</literal> instruction
and go right to <literal>source-id</literal>.</simpara>
<section xml:id="_booting_2">
<title>Booting</title>
<simpara>The initial commands after reboot flow into each other: <literal>cold</literal> to <literal>abort</literal> to
<literal>quit</literal>. This is the same as with pre-ANS Forths.  However, <literal>quit</literal> now calls
<literal>refill</literal> to get the input.  <literal>refill</literal> does different things based on which of the
four input sources (see above) is active:</simpara>
<informaltable tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara>Keyboard entry</simpara>
</entry>
<entry>
<simpara>This is the default. Get line of input via <literal>accept</literal> and return <literal>true</literal>
even if the input string was empty.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>evaluate</literal> string</simpara>
</entry>
<entry>
<simpara>Return a <literal>false</literal> flag</simpara>
</entry>
</row>
<row>
<entry>
<simpara>Input from a buffer</simpara>
</entry>
<entry>
<simpara><emphasis>Not implemented at this time</emphasis></simpara>
</entry>
</row>
<row>
<entry>
<simpara>Input from a file</simpara>
</entry>
<entry>
<simpara><emphasis>Not implemented at this time</emphasis></simpara>
</entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
<section xml:id="_the_command_line_interface_cli">
<title>The Command Line Interface (CLI)</title>
<simpara>Tali Forth accepts input lines of up to 256 characters. The address of the
current input buffer is stored in <literal>cib</literal>. The length of the current buffer is
stored in <literal>ciblen</literal>&#8201;&#8212;&#8201;this is the address that <literal>&gt;in</literal> returns.  <literal>source</literal> by
default returns <literal>cib</literal> and <literal>ciblen</literal> as the address and length of the input
buffer.</simpara>
</section>
<section xml:id="_the_word_literal_evaluate_literal">
<title>The Word <literal>evaluate</literal></title>
<simpara>The word `evaluate`is used to execute commands that are in a string. A simple example:</simpara>
<screen>s" 1 2 + ." evaluate</screen>
<simpara>Tali Forth uses <literal>evaluate</literal> to load high-level Forth words from the file
<literal>forth_words.asc</literal> and, if present, any extra, user-defined words from
<literal>user_words.asc</literal>.</simpara>
</section>
</section>
<section xml:id="_the_words_literal_create_literal_and_literal_does_literal">
<title>The Words <literal>create</literal> and <literal>does&gt;</literal></title>
<simpara>The tandem of words <literal>create</literal> and <literal>does&gt;</literal> is the most complex, but also most
powerful part of Forth. Understanding how it works in Tali Forth is important
if you want to be able to modify the code. In this text, we walk through the
generation process for a subroutine threaded code (STC) such as Tali Forth.</simpara>
<note>
<simpara>For a more general explanation, see Brad Rodriguez' series of articles at
<link xl:href="http://www.bradrodriguez.com/papers/moving3.htm">http://www.bradrodriguez.com/papers/moving3.htm</link> There is a discussion of this
walkthrough at <link xl:href="http://forum.6502.org/viewtopic.php?f=9&amp;t=3153">http://forum.6502.org/viewtopic.php?f=9&amp;t=3153</link></simpara>
</note>
<simpara>We start with the following standard example, a high-level Forth version of the
word <literal>constant</literal>.</simpara>
<screen>: constant  ( "name" -- )  create , does&gt; @ ;</screen>
<simpara>We examine this in three phases or "sequences", following Rodriguez (based on
<xref linkend="DB"/>).</simpara>
<section xml:id="_sequence_1_compiling_the_word_literal_constant_literal">
<title>Sequence 1: Compiling the Word <literal>constant</literal></title>
<simpara><literal>constant</literal> is a defining word, one that makes new words. In pseudocode,
ignoring any compilation to native 65c02 assembler, the above compiles to:</simpara>
<screen>        jsr CREATE
        jsr COMMA
        jsr (DOES&gt;)         ; from DOES&gt;
   a:   jsr DODOES          ; from DOES&gt;
   b:   jsr FETCH
        rts</screen>
<simpara>To make things easier to explain later, we&#8217;ve added the labels <literal>a</literal> and
<literal>b</literal> in the listing.</simpara>
<note>
<simpara>This example uses the traditional word <literal>(does&gt;)</literal>, which in Tali Forth 2
is actually an internal routine that does not appear as a separate word. This
version is easier to explain.</simpara>
</note>
<simpara><literal>does&gt;</literal> is an immediate word that adds not one, but two subroutine jumps, one
to <literal>(does&gt;)</literal> and one to <literal>dodoes</literal>, which is a pre-defined system routine like
<literal>dovar</literal>. We&#8217;ll discuss those later.</simpara>
<simpara>In Tali Forth, a number of words such as <literal>defer</literal> are "hand-compiled", that is,
instead of using forth such as</simpara>
<screen>: defer create ['] abort , does&gt; @ execute ;</screen>
<simpara>we write an optimized assembler version ourselves (see the actual <literal>defer</literal> code).
In these cases, we need to use <literal>(does&gt;)</literal> and <literal>dodoes</literal> instead of <literal>does&gt;</literal> as
well.</simpara>
</section>
<section xml:id="_sequence_2_executing_the_word_literal_constant_literal">
<title>Sequence 2: Executing the Word <literal>constant</literal></title>
<simpara>Now when we execute</simpara>
<screen>42 constant life</screen>
<simpara>This pushes the <literal>rts</literal> of the calling routine&#8201;&#8212;&#8201;call it "main"&#8201;&#8212;&#8201;to the
65c02&#8217;s stack (the Return Stack, as Forth calls it), which now looks like this:</simpara>
<screen>        (1) rts                 ; to main routine</screen>
<simpara>Without going into detail, the first two subroutine jumps of <literal>constant</literal> give us
this word:</simpara>
<screen>        (Header "LIFE")
        jsr DOVAR               ; in CFA, from LIFE's CREATE
        4200                    ; in PFA (little-endian)</screen>
<simpara>Next, we <literal>jsr</literal> to <literal>(does&gt;)</literal>. The address that this pushes on the Return Stack
is the instruction of <literal>constant</literal> we had labeled <literal>a</literal>.</simpara>
<screen>        (2) rts to CONSTANT ("a")
        (1) rts to main routine</screen>
<simpara>Now the tricks start. <literal>(does&gt;)</literal> takes this address off the stack and uses it to
replace the <literal>dovar jsr</literal> target in the CFA of our freshly created <literal>life</literal> word.
We now have this:</simpara>
<screen>        (Header "LIFE")
        jsr a                   ; in CFA, modified by (DOES&gt;)
   c:   4200                    ; in PFA (little-endian)</screen>
<simpara>Note we added a label <literal>c</literal>. Now, when <literal>(does&gt;)</literal> reaches its own <literal>rts</literal>, it finds
the <literal>rts</literal> to the main routine on its stack. This is Good Thing&#8482;, because it
aborts the execution of the rest of <literal>constant</literal>, and we don&#8217;t want to do
<literal>dodoes</literal> or <literal>fetch</literal> now. We&#8217;re back at the main routine.</simpara>
</section>
<section xml:id="_sequence_3_executing_literal_life_literal">
<title>Sequence 3: Executing <literal>life</literal></title>
<simpara>Now we execute the word <literal>life</literal> from our "main" program. In a STC Forth
such as Tali Forth, this executes a subroutine jump.</simpara>
<screen>        jsr LIFE</screen>
<simpara>The first thing this call does is push the return address to the main routine
on the 65c02&#8217;s stack:</simpara>
<screen>        (1) rts to main</screen>
<simpara>The CFA of <literal>life</literal> executes a subroutine jump to label <literal>a</literal> in <literal>constant</literal>. This
pushes the <literal>rts</literal> of <literal>life</literal> on the 65c02&#8217;s stack:</simpara>
<screen>        (2) rts to LIFE ("c")
        (1) rts to main</screen>
<simpara>This <literal>jsr</literal> to a lands us at the subroutine jump to <literal>dodoes</literal>, so the return
address to <literal>constant</literal> gets pushed on the stack as well. We had given this
instruction the label <literal>b</literal>. After all of this, we have three addresses on the
65c02&#8217;s stack:</simpara>
<screen>        (3) RTS to CONSTANT ("b")
        (2) RTS to LIFE ("c")
        (1) RTS to main</screen>
<simpara><literal>dodoes</literal> pops address <literal>b</literal> off the 65c02&#8217;s stack and puts it in a nice safe place
on Zero Page, which we&#8217;ll call <literal>z</literal>. More on that in a moment. First, <literal>dodoes</literal>
pops the <literal>rts</literal> to <literal>life</literal>. This is <literal>c</literal>, the address of the PFA or <literal>life</literal>, where
we stored the payload of this constant. Basically, <literal>dodoes</literal> performs a <literal>dovar</literal>
here, and pushes <literal>c</literal> on the Data Stack. Now all we have left on the 65c02&#8217;s
stack is the <literal>rts</literal> to the main routine.</simpara>
<screen>        [1] RTS to main</screen>
<simpara>This is where <literal>z</literal> comes in, the location in Zero Page where we stored address
<literal>b</literal> of <literal>constant</literal>. Remember, this is where the PFA of <literal>constant</literal> begins, the
<literal>fetch</literal> command we had originally codes after <literal>does&gt;</literal> in the very first
definition. The really clever part: We perform an indirect <literal>jmp</literal>&#8201;&#8212;&#8201;not a
<literal>jsr</literal>!&#8201;&#8212;&#8201;to this address.</simpara>
<screen>        jmp (z)</screen>
<simpara>Now the little payload program of <literal>constant</literal> is executed, the subroutine jump
to <literal>fetch</literal>. Since we just put the PFA (<literal>c</literal>) on the Data Stack, <literal>fetch</literal> replaces
this by 42, which is what we were aiming for all along.  And since <literal>constant</literal>
ends with a <literal>rts</literal>, we pull the last remaining address off the 65c02&#8217;s stack,
which is the return address to the main routine where we started. And that&#8217;s
all.</simpara>
<simpara>Put together, this is what we have to code:</simpara>
<variablelist>
<varlistentry>
<term><literal>does&gt;</literal></term>
<listitem>
<simpara>Compiles a subroutine jump to <literal>(does&gt;)</literal>, then compiles a subroutine
jump to <literal>dodoes</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>(does&gt;)</literal></term>
<listitem>
<simpara>Pops the stack (address of subroutine jump to <literal>dodoes</literal> in
<literal>constant</literal>, increase this by one, replace the original <literal>dovar</literal> jump target in
<literal>life</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>dodoes</literal></term>
<listitem>
<simpara>Pop stack (PFA of <literal>constant</literal>), increase address by one, store on
Zero Page; pop stack (PFA of <literal>life</literal>), increase by one, store on Data Stack;
<literal>jmp</literal> to address we stored in Zero Page.</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>Remember we have to increase the addresses by one because of the way <literal>jsr</literal>
stores the return address for <literal>rts</literal> on the stack on the 65c02: It points to the
third byte of the <literal>jsr</literal> instruction itself, not the actual return address. This
can be annoying, because it requires a sequence like:</simpara>
<screen>        inc z
        bne +
        inc z+1
*
        (...)</screen>
<simpara>Note that with most words in Tali Forth, as any STC Forth, the distinction
between PFA and CFA is meaningless or at least blurred, because we go native
anyway. It is only with words generated by <literal>create</literal> and <literal>does&gt;</literal> where this
really makes sense.</simpara>
</section>
</section>
<section xml:id="_control_flow">
<title>Control Flow</title>
<section xml:id="_branches">
<title>Branches</title>
<simpara>For <literal>if</literal> and <literal>then</literal>, we need to compile something called a "conditional forward
branch", traditionally called <literal>0branch</literal>.</simpara>
<note>
<simpara>Many Forths now use the words <literal>cs-pick</literal> and <literal>cs-roll</literal> instead of the
<literal>branch</literal> variants, see
<link xl:href="http://lars.nocrew.org/forth2012/rationale.html\#rat:tools:CS-PICK">http://lars.nocrew.org/forth2012/rationale.html\#rat:tools:CS-PICK</link> Tali Forth
will probably switch to this variant in the future.</simpara>
</note>
<simpara>At run-time, if the value on the Data Stack is false (flag is zero), the branch
is taken ("branch on zero", therefore the name). Except that we don&#8217;t have the
target of that branch yet&#8201;&#8212;&#8201;it will later be added by <literal>then</literal>. For this to work,
we remember the address after the <literal>0branch</literal> instruction during the compilation
of <literal>if</literal>. This is put on the Data Stack, so that <literal>then</literal> knows where to compile
it&#8217;s address in the second step. Until then, a dummy value is compiled after
<literal>0branch</literal> to reserve the space we need.</simpara>
<note>
<simpara>This section and the next one are based on a discussion at
<link xl:href="http://forum.6502.org/viewtopic.php?f=9\&amp;t=3176">http://forum.6502.org/viewtopic.php?f=9\&amp;t=3176</link> see there for more details.
Another take on this subject that handles things a bit differently is at
<link xl:href="http://blogs.msdn.com/b/ashleyf/archive/2011/02/06/loopty-do-i-loop.aspx">http://blogs.msdn.com/b/ashleyf/archive/2011/02/06/loopty-do-i-loop.aspx</link></simpara>
</note>
<simpara>In Forth, this can be realized by</simpara>
<screen>: if  postpone 0branch here 0 , ; immediate</screen>
<simpara>and</simpara>
<screen>: then  here swap ! ; immediate</screen>
<simpara>Note <literal>then</literal> doesn&#8217;t actually compile anything at the location in memory where
it is at. It&#8217;s job is simply to help <literal>if</literal> out of the mess it has created. If we
have an <literal>else</literal>, we have to add an unconditional <literal>branch</literal> and manipulate the
address that <literal>if</literal> left on the Data Stack. The Forth for this is:</simpara>
<screen>: else  postpone branch here 0 , here rot ! ; immediate</screen>
<simpara>Note that <literal>then</literal> has no idea what has just happened, and just like before
compiles its address where the value on the top of the Data Stack told it to&#8201;&#8212;&#8201;except that this value now comes from <literal>else</literal>, not <literal>if</literal>.</simpara>
</section>
<section xml:id="_loops">
<title>Loops</title>
<simpara>Loops are more complicated, because we have <literal>do</literal>, <literal>?do</literal>, <literal>loop</literal>, <literal>+loop</literal>,
<literal>unloop</literal>, and <literal>leave</literal> to take care of. These can call up to three addresses: One
for the normal looping action (<literal>loop</literal> and <literal>+loop</literal>), one to skip over the loop at
the beginning (<literal>?do</literal>) and one to skip out of the loop (<literal>leave</literal>).</simpara>
<simpara>Based on a suggestion by Garth Wilson, we begin each loop in run-time by saving
the address after the whole loop construct to the Return Stack. That way,
<literal>leave</literal> and <literal>?do</literal> know where to jump to when called, and we don&#8217;t interfere with
any <literal>if</literal>-<literal>then</literal> structures. On top of that address, we place the limit and start
values for the loop.</simpara>
<simpara>The key to staying sane while designing these constructs is to first make
a list of what we want to happen at compile time and what at run time. Let&#8217;s
start with a simple <literal>do</literal>-<literal>loop</literal>.</simpara>
<section xml:id="__literal_do_literal_at_compile_time">
<title><literal>do</literal> at compile-time:</title>
<itemizedlist>
<listitem>
<simpara>Remember current address (in other words, <literal>here</literal>) on the Return Stack (!) so
we can later compile the code for the post-loop address to the Return Stack</simpara>
</listitem>
<listitem>
<simpara>Compile some dummy values to reserve the space for said code</simpara>
</listitem>
<listitem>
<simpara>Compile the run-time code; we&#8217;ll call that fragment (<literal>do</literal>)</simpara>
</listitem>
<listitem>
<simpara>Push the current address (the new <literal>here</literal>) to the Data Stack so <literal>loop</literal> knows
where the loop contents begin</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="__literal_do_literal_at_run_time">
<title><literal>do</literal> at run-time:</title>
<itemizedlist>
<listitem>
<simpara>Take limit and start off Data Stack and push them to the Return Stack</simpara>
</listitem>
</itemizedlist>
<simpara>Since <literal>loop</literal> is just a special case of <literal>+loop</literal> with an index of one, we can get
away with considering them at the same time.</simpara>
</section>
<section xml:id="__literal_loop_literal_at_compile_time">
<title><literal>loop</literal> at compile time:</title>
<itemizedlist>
<listitem>
<simpara>Compile the run-time part <literal>(+loop)</literal></simpara>
</listitem>
<listitem>
<simpara>Consume the address that is on top of the Data Stack as the jump target for
normal looping and compile it</simpara>
</listitem>
<listitem>
<simpara>Compile <literal>unloop</literal> for when we&#8217;re done with the loop, getting rid of the
limit/start and post-loop addresses on the Return Stack</simpara>
</listitem>
<listitem>
<simpara>Get the address on the top of the Return Stack which points to
the dummy code compiled by <literal>do</literal></simpara>
</listitem>
<listitem>
<simpara>At that address, compile the code that pushes the address after the list
construct to the Return Stack at run-time</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="__literal_loop_literal_at_run_time_which_is_literal_loop_literal">
<title><literal>loop</literal> at run-time (which is <literal>(+loop)</literal>)</title>
<itemizedlist>
<listitem>
<simpara>Add loop step to count</simpara>
</listitem>
<listitem>
<simpara>Loop again if we haven&#8217;t crossed the limit, otherwise continue after loop</simpara>
</listitem>
</itemizedlist>
<simpara>At one glance, we can see that the complicated stuff happens at compile-time.
This is good, because we only have to do that once for each loop.</simpara>
<simpara>In Tali Forth, these routines are coded in assembler. With this setup, <literal>unloop</literal>
becomes simple (six <literal>pla</literal> instructions&#8201;&#8212;&#8201;four for the limit/count of <literal>do</literal>, two
for the address pushed to the stack just before it) and <literal>leave</literal> even simpler
(four <literal>pla</literal> instructions for the address).</simpara>
</section>
</section>
</section>
<section xml:id="_native_compiling_2">
<title>Native Compiling</title>
<simpara>In a pure subroutine threaded code, higher-level words are merely a series of
subroutine jumps. For instance, the Forth word <literal>[char]</literal>, formally defined in
high-level Forth as</simpara>
<screen>: [char] char postpone literal ; immediate</screen>
<simpara>in assembler is simply</simpara>
<screen>                jsr xt_char
                jsr xt_literal</screen>
<simpara>as an immediate, compile-only word. There are two problems with this method:
First, it is slow, because each <literal>jsr</literal>-<literal>rts</literal> pair consumes four bytes and 12
cycles as overhead. Second, for smaller words, the jumps use far more bytes than
the actual code. Take for instance <literal>drop</literal>, which in its naive form is simply</simpara>
<screen>                inx
                inx</screen>
<simpara>for two bytes and four cycles. If we jump to this word as is assumed with pure
subroutine threaded Forth, we add four bytes and 12 cycles&#8201;&#8212;&#8201;double the space
and three times the time required by the actual working code.</simpara>
<simpara>(In practice, it&#8217;s even worse, because <literal>drop</literal> checks for underflow. The actual
assembler code is</simpara>
<screen>                cpx #dsp0-1
                bmi +
                jmp underflow
*
                inx
                inx</screen>
<simpara>for eleven bytes. We&#8217;ll discuss the underflow checks further below.)</simpara>
<simpara>To get rid of this problem, Tali Forth supports <emphasis role="strong">native compiling</emphasis> (also known
as inlining). The system variable <literal>nc-limit</literal> sets the threshold up to which a
word will be included not as a subroutine jump, but in machine language. Let&#8217;s
start with an example where <literal>nc-limit</literal> is set to zero, that is, all words are
compiled as subroutine jumps. Take a simple word such as</simpara>
<screen>: aaa 0 drop ;</screen>
<simpara>and check the actual code with <literal>see</literal></simpara>
<screen>see aaa
  nt: 7CD  xt: 7D8
 size (decimal): 6

07D8  20 52 99 20 6B 88  ok</screen>
<simpara>(The actual addresses might be different, this is from the ALPHA release). Our
word <literal>aaa</literal> consists of two subroutine jumps, one to zero and one to <literal>drop</literal>.
Now, if we increase the threshold to 20, we get different code, as this
console session shows:</simpara>
<screen>20 nc-limit !  ok
: bbb 0 drop ;  ok
see bbb
  nt: 7DF  xt: 7EA
 size (decimal): 17

07EA  CA CA 74 00 74 01 E0 77  30 05 A9 0B 4C C7 AC E8
07FA  E8  ok</screen>
<simpara>Even though the definition of <literal>bbb</literal> is the same as <literal>aaa</literal>, we have totally
different code: The number 0001 is pushed to the Data Stack (the first six
bytes), then we check for underflow (the next nine bytes), and finally we
<literal>drop</literal> by moving X register, the Data Stack Pointer. Our word is definitely
longer, but have just saved 12 cycles.</simpara>
<simpara>To experiment with various parameters for native compiling, the Forth word
<literal>words&amp;sizes</literal> is included in <literal>user_words.fs</literal> (but commented out by default).
The Forth is:</simpara>
<screen>: words&amp;sizes ( -- )
        latestnt
        begin
                dup
        0&lt;&gt; while
                dup name&gt;string type space
                dup wordsize u. cr
                2 + @
        repeat
        drop ;</screen>
<simpara>An alternative is <literal>see</literal> which also displays the length of a word. One way or
another, changing <literal>nc-limit</literal> should show differences in the Forth words.</simpara>
<section xml:id="_return_stack_special_cases">
<title>Return Stack Special Cases</title>
<simpara>There are a few words that cause problems with subroutine threaded code (STC):
Those that access the Return Stack such as <literal>r&gt;</literal>, <literal>&gt;r</literal>, <literal>r@</literal>, <literal>2r&gt;</literal>, and <literal>2&gt;r</literal>.
We first have to remove the return address on the top of the stack, only to
replace it again before we return to the caller. This mechanism would normally
prevent the word from being natively compiled at all, because we&#8217;d try to remove
a return address that doesn&#8217;t exit.</simpara>
<simpara>This becomes clearer when we examine the code for <literal>&gt;r</literal> (comments
removed):</simpara>
<screen>xt_r_from:
                pla
                sta tmptos
                ply

                ; --- CUT FOR NATIVE CODING ---

                dex
                dex
                pla
                sta 0,x
                pla
                sta 1,x

                ; --- CUT FOR NATIVE CODING ---

                phy
                lda tmptos
                pha

z_r_from:       rts</screen>
<simpara>The first three and last three instructions are purely for housekeeping with
subroutine threaded code. To enable this routine to be included as native code,
they are removed when native compiling is enabled by the word <literal>compile,</literal> This
leaves us with just the six actual instructions in the center of the routine to
be compiled into the new word.</simpara>
</section>
<section xml:id="_underflow_stripping">
<title>Underflow Stripping</title>
<simpara>As described above, every underflow check adds seven bytes to the word being
coded. Stripping this check by setting the <literal>uf-strip</literal> system variable to <literal>true</literal>
simply removes these seven bytes from new natively compiled words.</simpara>
<simpara>It is possible, of course, to have lice and fleas at the same time. For
instance, this is the code for <literal>&gt;r</literal>:</simpara>
<screen>xt_to_r:
                pla
                sta tmptos
                ply

                ; --- CUT HERE FOR NATIVE CODING ---

                cpx #dsp0-1
                bmi +
                jmp underflow
*
                lda 1,x
                pha
                lda 0,x
                pha

                inx
                inx

                ; --- CUT HERE FOR NATIVE CODING ---

                phy
                lda tmptos
                pha

z_to_r:         rts</screen>
<simpara>This word has <emphasis>both</emphasis> native compile stripping and underflow detection. However,
both can be removed from newly native code words, leaving only the eight byte
core of the word to be compiled.</simpara>
</section>
<section xml:id="_enabling_native_compling_on_new_words">
<title>Enabling Native Compling on New Words</title>
<simpara>By default, user-defined words are flagged with the Never-Native (NN)
flag.  While the words used in the definition of the new word might
have been natively compiled into the new word, this new word will
always be compiled with a JSR when used in future new words.  To
override this behavior and allow a user-defined word to be natively
compiled, the user can use the <literal>always-native</literal> word just after the
definition has been completed (with a semicolon).  An example of doing
this might be:</simpara>
<screen>: double dup + ; always-native</screen>
<simpara>Please note adding the always-native flag to a word overrides the
never-native flag and it also causes the word to be natively compiled
regardless of the setting of <literal>nc_limit</literal>.</simpara>
<warning>
<simpara>Do not apply always-native to a word that has any kind of
control structures in it, such as <literal>if</literal>, <literal>case</literal> or any kind of loop.
If these words ever get native compiled, the JMP instructions used in
the control structures are copied verbatim, causing them to jump back
into the original words.</simpara>
</warning>
<warning>
<simpara>When adding your own words in assembly, if a word has a <literal>jmp</literal>
instruction in it, it should have the NN (Never Native) flag set in the
headers.asm file and should never have the AN (Always Native) flag set.</simpara>
</warning>
</section>
</section>
<section xml:id="__literal_cmove_literal_literal_cmove_literal_and_literal_move_literal">
<title><literal>cmove</literal>, <literal>cmove&gt;</literal> and <literal>move</literal></title>
<simpara>The three moving words <literal>cmove</literal>, <literal>cmove&gt;</literal> and <literal>move</literal> show subtle differences
that can trip up new users and are reflected by different code under the hood.
<literal>cmove</literal> and <literal>cmove&gt;</literal> are the traditional Forth words that work on characters
(which in the case of Tali Forth are bytes), whereas <literal>move</literal> is a more modern
word that works on address units (which in our case is also bytes).</simpara>
<simpara>If the source and destination regions show no overlap, all three words work the
same. However, if there is overlap, <literal>cmove</literal> and <literal>cmove&gt;</literal> demonstrate a behavior
called "propagation" or "clobbering" : Some of the characters are overwritten.
`move: does not show this behavior. This example shows the difference:</simpara>
<screen>create testbuf  char a c,  char b c,  char c c,  char d c,  ( ok )
testbuf 4 type  ( abcd ok )
testbuf dup char+ 3  cmove  ( ok )
testbuf 4 type ( aaaa ok )</screen>
<simpara>Note the propagation in the result. <literal>move</literal>, however, doesn&#8217;t propagate.
The last two lines would be:</simpara>
<screen>testbuf dup char+ 3  move  ( ok )
testbuf 4 type  ( aabc ok )</screen>
<simpara>In practice, <literal>move</literal> is usually what you want to use.</simpara>
</section>
</chapter>
<chapter xml:id="_developing">
<title>Developing</title>
<blockquote>
<attribution>
Doug Hoffman
<citetitle>Some notes on Forth from a novice user</citetitle>
</attribution>
<simpara>After spending an entire weekend wrestling with blocks files, stacks, and
the like, I was horrified and convinced that I had made a mistake. Who
in their right mind would want to program in this godforsaken language! <xref linkend="DH"/></simpara>
</blockquote>
<section xml:id="_adding_new_words">
<title>Adding New Words</title>
<simpara>The simplest way to add new words to Tali Forth is to include them in the file
<literal>forth_code/user_words.fs</literal>. This is the suggested place to put them for personal
use.</simpara>
<simpara>To add words to the permanent set, it is best to start a pull request on the
GitHub page of Tali Forth. How to setup and use <literal>git</literal> and GitHub is beyond the
scope of this document&#8201;&#8212;&#8201;we&#8217;ll just point out it they are not as complicated as
they look, and the make experimenting a lot easier.</simpara>
<simpara>During development, Tali Forth tends to follow a sequence of steps for new words:</simpara>
<itemizedlist>
<listitem>
<simpara>If it is an ANS Forth word, first review the standard online. In some cases,
there is a reference implementation that can be used.</simpara>
</listitem>
<listitem>
<simpara>Otherwise, check other sources for a high-level realization of the word, for
instance Jonesforth or Gforth. A direct copy is usually not possible (or legally
allowed, given different licenses), but studying the code provides hints for
a Tali Forth version.</simpara>
</listitem>
<listitem>
<simpara>Write the word in Forth in the interpreter. After it has been tested tested
interactively, add a high-level version to the file <literal>forth_code/forth_words.fs</literal>.</simpara>
</listitem>
<listitem>
<simpara>Add automatic tests for the new word to the test suite. Ideally, there will
be test code included in the ANS Forth specification. If not, document what
the test does.</simpara>
</listitem>
<listitem>
<simpara>In a further step, if appropriate, convert the word to assembler. This
requires adding an entry to <literal>headers.asm</literal> and the code itself to <literal>native_words.asm</literal>.
In this first step, it will usually be a simple 1:1 sequence of <literal>jsr</literal> subroutine
jumps to the existing native Forth words.</simpara>
</listitem>
<listitem>
<simpara>If appropriate, rewrite all or some of the subroutine jumps in direct
assembler. Because we have the automatic tests in place, we can be confident
that the assembly version is correct as well.</simpara>
</listitem>
</itemizedlist>
<simpara>However, if you are contributing code, feel free to happily ignore this sequence
and just submit whatever you have.</simpara>
</section>
<section xml:id="_deeper_changes">
<title>Deeper Changes</title>
<simpara>Tali Forth was not only placed in the public domain to honor the tradition of
giving the code away freely. It is also to let people play around with it and
adapt it to their own machines. This is also the reason it is (perversely)
over-commented.</simpara>
<simpara>To work on the internals of Tali Forth, you will need the Ophis assembler.</simpara>
<section xml:id="_the_ophis_assembler">
<title>The Ophis Assembler</title>
<simpara>Michael Martin&#8217;s Ophis Cross-Assembler can be downloaded from
<link xl:href="http://michaelcmartin.github.io/Ophis/">http://michaelcmartin.github.io/Ophis/</link>. It uses a slightly different format than
other assemblers, but is in Python and therefore will run on pretty much any
operating system. To install Ophis on Windows, use the link provided above. For
Linux:</simpara>
<screen>git clone https://github.com/michaelcmartin/Ophis
cd Ophis/src
sudo python setup.py install</screen>
<simpara>Switch to the folder where the Tali code lives, and run the Makefile with a
simple <literal>make</literal> command. This also updates the file listings in the <literal>docs</literal> folder.</simpara>
<simpara>Ophis has some quirks. For instance, you cannot use math symbols in label names,
because it will try to perform those operations. Use underscores instead.</simpara>
</section>
<section xml:id="_general_notes">
<title>General Notes</title>
<itemizedlist>
<listitem>
<simpara>The X register is used as the Data Stack Pointer (DSP) and should only be used
if there is no other alternative.</simpara>
</listitem>
<listitem>
<simpara>The Y register, however, is free to be changed by subroutines. This also means
it should not be expected to survive subroutines unchanged.</simpara>
</listitem>
<listitem>
<simpara>Naively coded words generally should have exactly one point of entry&#8201;&#8212;&#8201;the
<literal>xt_word</literal> link&#8201;&#8212;&#8201;and exactly one point of exit at <literal>z_word</literal>. In may cases,
this requires a branch to an internal label <literal>_done</literal> right before <literal>z_word</literal>.</simpara>
</listitem>
<listitem>
<simpara>Because of the way native compiling works, the trick of combining
<literal>jsr</literal>-<literal>rts</literal> pairs to a single <literal>jmp</literal> instruction (usually) doesn&#8217;t work.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="_coding_style">
<title>Coding Style</title>
<simpara>Until there is a tool for Ophis assembly code that formats the source file the
way gofmt does for Go (golang), the following format is suggested.</simpara>
<itemizedlist>
<listitem>
<simpara>Tabs are <emphasis role="strong">eight characters long</emphasis> and converted to spaces.</simpara>
</listitem>
<listitem>
<simpara>Opcodes are indented by <emphasis role="strong">two tabs</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>Function-like routines are followed by a one-tab indented "function doc string"
based on the Python 3 format: Three quotation marks at the start, three at the
end in their own line, unless it is a one-liner. This should make it easier to
automatically extract the docs for them at some point.</simpara>
</listitem>
<listitem>
<simpara>The native words have a special comment format with lines that start with <literal>##</literal>
that allows the automatic generation of word lists by a tool in the tools
folder, see there for details.</simpara>
</listitem>
<listitem>
<simpara>Assembler mnemonics are lower case. I get enough uppercase insanity writing German,
thank you very much.</simpara>
</listitem>
<listitem>
<simpara>Hex numbers are, however, upper case, such as <literal>$FFFE</literal>.</simpara>
</listitem>
</itemizedlist>
<warning>
<simpara>The Ophis assembler interprets numbers with a leading zero as octal.
This can be an annoying source of errors.</simpara>
</warning>
<itemizedlist>
<listitem>
<simpara>Numbers in mnemonics are a stripped-down as possible to reduce
visual clutter: use <literal>lda 0,x</literal> instead of <literal>lda $00,x</literal>.</simpara>
</listitem>
<listitem>
<simpara>Comments are included like popcorn to help readers who are new both to Forth
and 6502 assembler.</simpara>
</listitem>
</itemizedlist>
</section>
</section>
<section xml:id="_code_cheat_sheets">
<title>Code Cheat Sheets</title>
<blockquote>
<attribution>
Leo Brodie
<citetitle>Thinking Forth</citetitle>
</attribution>
<simpara>Programming computers can be crazy-making. <xref linkend="LB2"/></simpara>
</blockquote>
<section xml:id="_the_stack_drawing">
<title>The Stack Drawing</title>
<simpara>This is your friend and should probably go on your wall or something.</simpara>
<literallayout class="monospaced">                +--------------+
                |          ... |
                +-            -+
                |              |   ...
                +-  (empty)   -+
                |              |  FE,X
                +-            -+
          ...   |              |  FF,X
                +==============+
         $0076  |           LSB|  00,X   &lt;-- DSP (X Register)
                +-    TOS     -+
         $0077  |           MSB|  01,X
                +==============+
         $0078  |  (garbage)   |  02,X   &lt;-- DSP0
                +--------------+
         $0079  |              |  03,X
                + (floodplain) +
         $007A  |              |  04,X
                +--------------+</literallayout>
</section>
<section xml:id="_coding_idioms">
<title>Coding Idioms</title>
<blockquote>
<attribution>
Charles Moore
<citetitle>The Evolution of FORTH</citetitle>
</attribution>
<simpara>The first modern FORTH was coded in FORTRAN. Shortly thereafter it was recoded
in assembler. Much later it was coded in FORTH. <xref linkend="CHM2"/></simpara>
</blockquote>
<simpara>While coding a Forth, there are certain assembler fragments that get repeated
over and over again. These could be included as macros, but that can make the
code harder to read for somebody only familiar with basic assembly.</simpara>
<simpara>Some of these fragments could be written in other variants, such as the "push
value" version, which could increment the DSP twice before storing a value. We
try to keep these in the same sequence (a "dialect" or "code mannerism" if you
will) so we have the option of adding code analysis tools later.</simpara>
<itemizedlist>
<listitem>
<simpara><literal>drop</literal> cell of top of the Data Stack</simpara>
</listitem>
</itemizedlist>
<screen>                inx
                inx</screen>
<itemizedlist>
<listitem>
<simpara><literal>push</literal> a value to the Data Stack. Remember the Data Stack Pointer (DSP, the
X register of the 65c02) points to the LSB of the TOS value.</simpara>
</listitem>
</itemizedlist>
<screen>                dex
                dex
                lda &lt;LSB&gt;      ; or pla, jsr kernel_getc, etc.
                sta 0,x
                lda &lt;MSB&gt;      ; or pla, jsr kernel_getc, etc.
                sta 1,x</screen>
<itemizedlist>
<listitem>
<simpara><literal>pop</literal> a value off the Data Stack</simpara>
</listitem>
</itemizedlist>
<screen>                lda 0,x
                sta &lt;LSB&gt;      ; or pha, jsr kernel_putc, etc
                lda 1,x
                sta &lt;MSB&gt;      ; or pha, jsr kernel_putc, etc
                inx
                inx</screen>
</section>
<section xml:id="_vim_shortcuts">
<title>vim Shortcuts</title>
<simpara>One option for these is to add abbreviations to your favorite editor, which
should of course be vim, because vim is cool. There are examples farther down.
They all assume that auto-indent is on and we are two tabs into the code, and
use <literal>#</literal> at the end of the abbreviation to keep them separate from the normal
words. My <literal>~/.vimrc</literal> file contains the following lines for work on <literal>.asm</literal> files:</simpara>
<screen>ab drop# inx&lt;tab&gt;&lt;tab&gt;; drop&lt;cr&gt;inx&lt;cr&gt;&lt;left&gt;
ab push# dex&lt;tab&gt;&lt;tab&gt;; push&lt;cr&gt;dex&lt;cr&gt;lda $&lt;LSB&gt;&lt;cr&gt;sta $00,x&lt;cr&gt;lda $&lt;MSB&gt;&lt;cr&gt;sta $01,x&lt;cr&gt;&lt;up&gt;&lt;up&gt;&lt;u&gt;
ab pop# lda $00,x&lt;tab&gt;&lt;tab&gt;; pop&lt;cr&gt;sta $&lt;LSB&gt;&lt;cr&gt;lda $01,x&lt;cr&gt;sta $&lt;MSB&gt;&lt;cr&gt;inx&lt;cr&gt;inx&lt;cr&gt;&lt;up&gt;&lt;up&gt;&lt;up&gt;&gt;</screen>
</section>
</section>
</chapter>
<chapter xml:id="_future_and_long_term_plans">
<title>Future and Long-Term plans</title>
<warning>
<simpara>This section is missing. See the GitHub page for further details.</simpara>
</warning>
</chapter>
</part>
<part xml:id="_tutorials">
<title>Tutorials</title>
<chapter xml:id="_working_with_blocks">
<title>Working with Blocks</title>
<warning>
<simpara>This section is currently missing.</simpara>
</warning>
</chapter>
<chapter xml:id="_the_literal_ed_literal_line_based_editor_anchor_xml_id_ed_tutorial_xreflabel_ed_tutorial">
<title>The <literal>ed</literal> Line-Based Editor<anchor xml:id="ed-tutorial" xreflabel="[ed-tutorial]"/></title>
<blockquote>
<attribution>
Peter H. Saulus
<citetitle>The Daemon, the Gnu and the Penguin</citetitle>
</attribution>
<simpara>While TECO was known for its complex syntax, ed must have been
the most user-hostile editor ever created.<xref linkend="PHS"/></simpara>
</blockquote>
<simpara>Tali Forth 2 comes with two editors, a traditional block-based editor of the
type common with Forth, and the line-based editor <literal>ed</literal>, formally known as
<literal>ed6502</literal>. This second editor is included because I like line-based editors.
More to the point, the saved text uses less space than the block editor, where
every block, regardless of how much text is in it, uses 1024 bytes. In contrast,
<literal>ed</literal> uses one byte per character plus one end-of-line character per line. We&#8217;ll
see an example of this later.</simpara>
<simpara>The original <literal>ed</literal> was created by Ken Thompson and Dennis Ritchie along with the
Unix operating system, sometime about 1971. It is terse, small, robust, and has
a reputation for being completely unhelpful. An error is just signaled with a
question mark (<literal>?</literal>). There isn&#8217;t even a prompt unless it is explicitly turned
on.</simpara>
<note>
<simpara>Newer versions of <literal>ed</literal> allow an option to display an explanation of the
last error, but Tali doesn&#8217;t have space for that. Error messages are for wimps.
And who really needs a prompt anyway?</simpara>
</note>
<simpara>Commands in <literal>ed</literal> are single-letter commands like <literal>a</literal> or <literal>p</literal>. They can be
prefixed with a combination of letters and special characters to designate the
line numbers the command is supposed to work on. For example, <literal>1,4d</literal> deletes
lines one to four.</simpara>
<section xml:id="_first_steps_with_literal_ed_literal">
<title>First steps with <literal>ed</literal></title>
<simpara>Like its big brother <literal>vi</literal> (or its newer incarnation <literal>vim</literal>), <literal>ed</literal> has various
modes, except that <literal>ed</literal> is so small it only has two. We start out in the
<emphasis>command mode</emphasis> in which we accept, well, commands. Using <literal>a</literal> or <literal>i</literal> switches to
<emphasis>input mode</emphasis> where all of the characters are added to the buffer. The first
important thing is about how to get out of command mode: You type <literal>.</literal> (the
period or dot) at the beginning of the line as the only character to return to
command mode. A typical <literal>ed</literal> session will look something like this:<footnote><simpara>All quotes in the <literal>ed</literal> tutorial are taken from the <emphasis>Mass Effect</emphasis> games by BioWare/EA. As stated already, they hold the rights to all characters and whatnot.</simpara></footnote></simpara>
<screen>        ed      <co xml:id="CO3-1"/>
        a       <co xml:id="CO3-2"/>
        After time adrift among open stars
        Along tides of light
        And through shoals of dust
        I will return to where I began.
        .       <co xml:id="CO3-3"/>
                <co xml:id="CO3-4"/></screen>
<calloutlist>
<callout arearefs="CO3-1">
<para>Start the editor from Tali Forth. It doesn&#8217;t take anything on the stack.</para>
</callout>
<callout arearefs="CO3-2">
<para>Switch to insert mode and type the text.</para>
</callout>
<callout arearefs="CO3-3">
<para>The dot alone on the line signals the end of the text. We return to command
mode.</para>
</callout>
<callout arearefs="CO3-4">
<para>The cursor moves down to the next line, without printing any confirmation.
This is where you continue typing.</para>
</callout>
</calloutlist>
<simpara>When you first use <literal>ed</literal>, you&#8217;ll spend lots of time print what you&#8217;ve written and
trying to figure out what the line numbers are. The commands for this are <literal>p</literal>
(print without line numbers) and <literal>n</literal> (print with line numbers). The first
special character prefix we&#8217;ll learn for this is <literal>%</literal> (the percent symbol,
alternatively a comma) works as well. This makes the command that
follows it apply to the whole text.</simpara>
<screen>        %p      <co xml:id="CO4-1"/>
        After time adrift among open stars
        Along tides of light
        And through shoals of dust
        I will return to where I began.
                <co xml:id="CO4-2"/></screen>
<calloutlist>
<callout arearefs="CO4-1">
<para>This could also be <literal>,p</literal></para>
</callout>
<callout arearefs="CO4-2">
<para>Note again we return to an empty line.</para>
</callout>
</calloutlist>
<simpara>The <literal>%n</literal> (or <literal>,n</literal>) command is usually more helpful because it gives you line
numbers:</simpara>
<screen>        ,n      <co xml:id="CO5-1"/>
        1       After time adrift among open stars
        2       Along tides of light
        3       And through shoals of dust
        4       I will return to where I began.</screen>
<calloutlist>
<callout arearefs="CO5-1">
<para>This could also be <literal>%n</literal></para>
</callout>
</calloutlist>
<simpara>Line numbers are indented automatically by one tab. Note we start counting with
1, not 0, because this is an editor for real humans.</simpara>
<simpara>Just entering the command directly without a line number will print the
<emphasis>current line</emphasis>, which <literal>ed</literal> adjusts depending on what you are doing. After <literal>a</literal> it
is the last line.</simpara>
<tip>
<simpara>To find out which is the current line, type the <literal>=</literal> (equal sign) command.</simpara>
</tip>
<simpara>This session could continue as such:</simpara>
<screen>        n
        4       I will return to where I began.</screen>
<simpara>The <literal>d</literal> (delete) command removes a line. Let&#8217;s explicitly remove the second
line:</simpara>
<screen>        2d</screen>
<simpara>Again, <literal>ed</literal> provides absolutely no feedback on what just happened. We need to
call <literal>%n</literal> (or <literal>,n</literal>) again if we are unsure:</simpara>
<screen>        %n
        1       After time adrift among open stars
        2       And through shoals of dust
        3       I will return to where I began.</screen>
<simpara>Note that lines three and four have moved up&#8201;&#8212;&#8201;they are now lines two and
three.</simpara>
<tip>
<simpara>To avoid confusion, when you have to delete a large number of lines, start
at the bottom and move upwards towards the beginning of the text.</simpara>
</tip>
<simpara>We can also use comma-separated numbers to indicate a range of lines (say,
<literal>1,2d</literal>). As you probably will have guessed, or the <literal>,</literal> (or <literal>%</literal>) prefix can be
used to delete the complete text. Be careful&#8201;&#8212;&#8201;in the real version of <literal>ed</literal>, you
can undo changes with the <literal>u</literal> command.  Tali&#8217;s version currently doesn&#8217;t support
this option. If you delete it, it&#8217;s gone.</simpara>
<note>
<simpara>The undo (<literal>u</literal>) function may be added to a future version of <literal>ed</literal> if space
allows, at least for the last change.</simpara>
</note>
<simpara>Now, let&#8217;s say we want to put back the second line. We can do this again with <literal>a</literal>, to
add text <emphasis>after</emphasis> the first line. Note there is currently no way to paste the
line we have just deleted. If we can&#8217;t remember it, we&#8217;re in trouble.</simpara>
<screen>        1a      <co xml:id="CO6-1"/>
        And then, I, uh, did something
        .       <co xml:id="CO6-2"/>
                <co xml:id="CO6-3"/></screen>
<calloutlist>
<callout arearefs="CO6-1">
<para>Add text <emphasis>after</emphasis> the first line.</para>
</callout>
<callout arearefs="CO6-2">
<para>The dot takes us out again.</para>
</callout>
<callout arearefs="CO6-3">
<para>Still no feedback.</para>
</callout>
</calloutlist>
<simpara>Displaying our whole text with <literal>%n</literal> again, we get:</simpara>
<screen>        %n
        1       After time adrift among open stars
        2       And then, I, uh, did something
        3       And through shoals of dust
        4       I will return to where I began.</screen>
<simpara>Lines three and four are numbered again as they were.</simpara>
<simpara>Instead of using <literal>1a</literal>, we could have used <literal>2i</literal> to insert the new line <emphasis>before</emphasis>
line number two. Most long-term users of <literal>ed</literal> (like, all three of them) develop
a preference for <literal>a</literal> or <literal>i</literal>. This is easy because <literal>ed</literal> accepts <literal>0a</literal> as a way to
add new lines <emphasis>before</emphasis> the first line. In most other circumstances, line <literal>0</literal> is
illegal. There is also the <literal>$</literal> prefix for the last line.</simpara>
<tip>
<simpara>The combination <literal>$=</literal> will print the number of the last line.</simpara>
</tip>
</section>
<section xml:id="_saving_your_text">
<title>Saving Your Text</title>
<simpara>The only way to currently save text with <literal>ed</literal> on Tali is to write the buffer to
a location in memory.</simpara>
<screen>        7000w   <co xml:id="CO7-1"/>
        128     <co xml:id="CO7-2"/></screen>
<calloutlist>
<callout arearefs="CO7-1">
<para>The address in memory comes immediately before the <literal>w</literal> command with no
space.</para>
</callout>
<callout arearefs="CO7-2">
<para><literal>ed</literal> returns the number of characters written, including the end-of-line
characters. Yes, this is actually feedback of sorts. But don&#8217;t get cocky!</para>
</callout>
</calloutlist>
<warning>
<simpara>Changing the number base hasn&#8217;t been tested yet, so stick to decimal
numbers for the time being when saving text.</simpara>
</warning>
<simpara>The <literal>w</literal> command was originally created for files. Tali doesn&#8217;t have files, just
addresses. This means that you can write anything anywhere, at the risk of
completely destroying your system. Really, really don&#8217;t write anything to 0000,
which will overwrite the zero page of the 65c02.</simpara>
</section>
<section xml:id="_getting_out_of_literal_ed_literal">
<title>Getting Out of <literal>ed</literal></title>
<simpara>We can leave <literal>ed</literal> at any time with <literal>Q</literal> - note this is the capital letter "q".
Any unsaved (unwritten, rather) text will be lost. The lowercase <literal>q</literal> will refuse
to quit if there is still unwritten text. When it doubt, use <literal>q</literal>.</simpara>
<simpara>To access your text from the Forth command line, you can use standard Forth
words like <literal>type</literal> with the address chosen and the length of the text provided
after the <literal>w</literal> command.</simpara>
<screen>        7000 128 cr type        <co xml:id="CO8-1"/>
        After time adrift among open stars
        And then I, uh, did something
        And through the shoals of dust
        I will return to where I began.
         ok                     <co xml:id="CO8-2"/></screen>
<calloutlist>
<callout arearefs="CO8-1">
<para>Place the <literal>cr</literal> word before the <literal>type</literal> word to prevent the first line of the
text being placed right after the Forth command.</para>
</callout>
<callout arearefs="CO8-2">
<para>We&#8217;re back to the helpful Forth interpreter.</para>
</callout>
</calloutlist>
<note>
<simpara>In future, <literal>ed</literal> might provide the address and length of the saved text on
the data stack when quitting. The stack signature of <literal>ed</literal> would then change to
<literal>(&#8201;&#8212;&#8201;addr u )</literal>. This would make further processing of the text easier.</simpara>
</note>
<simpara>You can also use <literal>dump</literal> to show how compact <literal>ed</literal> stores the text:</simpara>
<screen>7000 128 dump
1B58  41 66 74 65 72 20 74 69  6D 65 20 61 64 72 69 66  After ti me adrif
1B68  74 20 61 6D 6F 6E 67 20  6F 70 65 6E 20 73 74 61  t among  open sta
1B78  72 73 0A 41 6E 64 20 74  68 65 6E 20 49 2C 20 75  rs.And t hen I, u <co xml:id="CO9-1"/>
1B88  68 2C 20 64 69 64 20 73  6F 6D 65 74 68 69 6E 67  h, did s omething
1B98  0A 41 6E 64 20 74 68 72  6F 75 67 68 20 74 68 65  .And thr ough the
1BA8  20 73 68 6F 61 6C 73 20  6F 66 20 64 75 73 74 0A   shoals  of dust.
1BB8  49 20 77 69 6C 6C 20 72  65 74 75 72 6E 20 74 6F  I will r eturn to
1BC8  20 77 68 65 72 65 20 49  20 62 65 67 61 6E 2E 0A   where I  began..
1BD8   ok</screen>
<calloutlist>
<callout arearefs="CO9-1">
<para>The dot in the text part of the hexdump at address $157A is not the period at
the end of the line, but the way <literal>dump</literal> displays the non-printable $0A
character. This control character marks the end of the line.</para>
</callout>
</calloutlist>
<simpara>Note this text uses 128 bytes, in the block editor it would use one block of
1024 bytes.</simpara>
</section>
<section xml:id="_programming_with_literal_ed_literal">
<title>Programming with <literal>ed</literal></title>
<simpara>You can use <literal>ed</literal> to write and save programs. Fire it up as usual:</simpara>
<screen>	ed
	a
	: myloop ( -- )         <co xml:id="CO10-1"/>
	    101 1 do i . loop   <co xml:id="CO10-2"/>
	;
	myloop
	.
	7000w
	48
	q</screen>
<calloutlist>
<callout arearefs="CO10-1">
<para>Type normally as you would with any other editor.</para>
</callout>
<callout arearefs="CO10-2">
<para>Any indentation has to be provided by hand. There is no auto-indent.</para>
</callout>
</calloutlist>
<simpara>Running <literal>7000 48 evaluate</literal> will now print the numbers from 1 to 100.</simpara>
</section>
<section xml:id="_further_information">
<title>Further Information</title>
<simpara>This tutorial will be expanded as new commands become available. In the meantime,
there are other sources:</simpara>
<itemizedlist>
<listitem>
<simpara><link xl:href="https://en.wikipedia.org/wiki/Ed_(text_editor">https://en.wikipedia.org/wiki/Ed_(text_editor</link>) Background and history</simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://www.gnu.org/software/ed/ed.html">https://www.gnu.org/software/ed/ed.html</link> The official GNU ed page</simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://www.gnu.org/software/ed/manual/ed_manual.html">https://www.gnu.org/software/ed/manual/ed_manual.html</link> The official GNU ed manual</simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://sanctum.geek.nz/arabesque/actually-using-ed/">https://sanctum.geek.nz/arabesque/actually-using-ed/</link> Small tutorial of Unix ed</simpara>
</listitem>
<listitem>
<simpara><link xl:href="http://www.psue.uni-hannover.de/wise2017_2018/material/ed.pdf">http://www.psue.uni-hannover.de/wise2017_2018/material/ed.pdf</link> A tutorial by B. W. Kernighan (yes, <emphasis>that</emphasis> Kernighan).</simpara>
</listitem>
</itemizedlist>
</section>
</chapter>
</part>
<part xml:id="_appendix">
<title>Appendix</title>
<chapter xml:id="_reporting_problems">
<title>Reporting Problems</title>
<simpara>The best way to point out a bug or make any other form of a comment is on Tali
Forth&#8217;s page on GitHub at <link xl:href="https://github.com/scotws/TaliForth2">https://github.com/scotws/TaliForth2</link> There, you can
"open an issue", which allows other people who might have the same problem to
help even when the author is not available.</simpara>
</chapter>
<chapter xml:id="_faq">
<title>FAQ</title>
<variablelist>
<varlistentry>
<term>Why does Tali Forth take so long to start up?</term>
<listitem>
<simpara>After the default kernel string is printed, you&#8217;ll notice a short pause that
didn&#8217;t occur with Tali Forth 1. This is because Tali Forth 2 has more words
defined in high-level Forth (see <literal>forth_code/forth-words.fs</literal>). The pause
happens because they are being compiled on the fly.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>What happened to Tali Forth 1 anyway?</term>
<listitem>
<simpara>Tali Forth 1<indexterm>
<primary>Tali Forth 1</primary>
</indexterm>, informally just Tali Forth, was my first Forth.
As such, it is fondly remembered as a learning experience. You can still find
it online at GitHub<indexterm>
<primary>GitHub</primary>
</indexterm> at <link xl:href="https://github.com/scotws/TaliForth">https://github.com/scotws/TaliForth</link>.  When
Tali Forth 2 entered BETA, Tali Forth was discontinued. It does not
receive bug fixes. In fact, new bugs are not even documented.</simpara>
</listitem>
</varlistentry>
</variablelist>
<figure xml:id="img_talialpha">
<title>Screenshot of the Tali Forth 1 boot screen, version Alpha 3, April 2014</title>
<mediaobject>
<imageobject>
<imagedata fileref="pics/tali_forth_alpha003.png" align="center"/>
</imageobject>
<textobject><phrase>tali forth alpha003</phrase></textobject>
</mediaobject>
</figure>
<variablelist>
<varlistentry>
<term>What does the word "FEHLT" mean in unfinished code?</term>
<listitem>
<simpara>That&#8217;s German for "missing". During development, I use it as a marker
where stuff has to be added, sort of like another level of "TODO". Since there
is no English word like that, it&#8217;s very easy to find with <literal>grep</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Who&#8217;s "Tali"?</term>
<listitem>
<simpara>I like the name, and we&#8217;re probably not going to have any more kids I can give
it to. If it sounds vaguely familiar, you&#8217;re probably thinking of Tali&#8217;Zorah vas
Normandy<indexterm>
<primary>vas Normandy, Tali&#8217;Zorah</primary>
</indexterm> a character in the <emphasis>Mass
Effect</emphasis> <indexterm>
<primary>Mass Effect</primary>
</indexterm> universe created by BioWare<indexterm>
<primary>BioWare</primary>
</indexterm>. This
software has absolutely nothing to do with neither the game nor the companies and
neither do I, expect that I&#8217;ve played the whole series and enjoyed it.<footnote><simpara>Though I do wish they would tell us what happened to the quarian ark in <emphasis>Andromeda</emphasis>.</simpara></footnote></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>And who is "Liara"?<indexterm>
<primary>Liara Forth</primary>
</indexterm></term>
<listitem>
<simpara>Liara Forth is another STC Forth for the big sibling of the 6502, the
65816<indexterm>
<primary>65816</primary>
</indexterm>. Tali Forth 1<indexterm>
<primary>Tali Forth 1</primary>
</indexterm> came first, then I wrote Liara
with that knowledge and learned even more, and now Tali 2 is such much better
for the experience. And yes, it&#8217;s another <emphasis>Mass Effect</emphasis> <indexterm>
<primary>Mass Effect</primary>
</indexterm>
character.</simpara>
</listitem>
</varlistentry>
</variablelist>
</chapter>
<chapter xml:id="_testing_tali_forth_2">
<title>Testing Tali Forth 2</title>
<simpara>Tali Forth 2 comes with a test suite<indexterm>
<primary>testing</primary>
</indexterm> in the <literal>tests</literal> folder. It is
based on the official ANS test code by John Hayes<indexterm>
<primary>Hayes, John</primary>
</indexterm> and was
first adapted for Tali Forth by Sam Colwell<indexterm>
<primary>Colwell, Sam</primary>
</indexterm>.</simpara>
<simpara>To run the complete test, type <literal>make test</literal> from the main folder (this assumes a
Unix-type system). Alternatively, switch to the test folder and start the
<literal>talitest.py</literal> <indexterm>
<primary>talitest.py</primary>
</indexterm> program with Python3. The tests should take only
a very few minutes to run and produce a lot of output, including, at the end, a
list of words that didn&#8217;t work. A detailed list of results is saved to the file
<literal>results.txt</literal>. <indexterm>
<primary>results.txt</primary>
</indexterm></simpara>
<section xml:id="_user_tests">
<title>User Tests</title>
<simpara>A special test file named <literal>user.fs</literal> <indexterm>
<primary>user.fs</primary>
</indexterm> is available for users to add
their own tests.  The results of this will be found just before the cycle
tests near the end of <literal>results.txt</literal>.  To run only this set of tests, you can
use the command:</simpara>
<screen>./talitest.py -t user</screen>
<simpara>in the tests folder.</simpara>
</section>
<section xml:id="_cycle_tests">
<title>Cycle Tests</title>
<simpara>The last set of tests, found in <literal>cycles.fs</literal>, determines cycle counts for the
various built-in words.  Users who are adding words may want to add cycle
tests as well and there are instructions for doing that in that file.  The
cycle tests only work with the simulator and will not work on real hardware.</simpara>
<simpara>The cycle tests time (in 65C02 clock cycles) from the jsr that calls a word to
the rts that returns from the word, including the jsr and rts.  These cycle
counts are the number of cycles if the word was used directly in interpreted
mode.  Some words will use more or fewer cycles depending on their input, so
the cycles reported are for the input provided in the <literal>cycles.fs</literal> file.</simpara>
<simpara>The cycle tests work with some help from the py65mon simulator and extensions
to it in <literal>talitest.py</literal>.  Accesses to special addresses in the 65C02 memory map
are used to start, stop, and read back the cycle counter in the simulator.
A special word named <literal>cycle_test</literal> is created near the top of <literal>cycles.fs</literal> to
help with this.  It accepts the xt of the word you want to test (you
can get the xt of any word by using the word <literal>'</literal>) and runs that word with the special memory
accesses before and after, printing out the results.</simpara>
<section xml:id="_cycle_tests_and_native_compiling">
<title>Cycle Tests and Native Compiling</title>
<simpara>Because Tali Forth 2 has native compiling capability, small words used in a
word declaration will have their assembly code compiled directly into the word
being defined, rather than using a <literal>jsr</literal>.  This means that small words will not
have the overhead of a <literal>jsr</literal> and <literal>rts</literal> when they are compiled into other words.</simpara>
<simpara>A perfect example of that is the built-in word <literal>ALIGN</literal>.  This word has no
assembly instructions (except for an <literal>rts</literal>), but the cycle testing shows it
takes 12 cycles.  This is the number of cycles to run the word by itself, and
it&#8217;s the number of cycles to run a <literal>jsr</literal> instruction followed immediately by
an <literal>rts</literal> instruction.</simpara>
<simpara>When this word is compiled into another word, however, Tali will use native
compiling and will put the (empty) body of this word into the word being
compiled rather than using a <literal>jsr</literal>.  This results in 0 extra cycles for the
word being defined.  Twelve cycles will be saved for each small word that is
natively compiled into a new definition.  See the section on Native Compiling
for more information.</simpara>
</section>
</section>
<section xml:id="_old_tests">
<title>Old Tests</title>
<note>
<simpara>During early development, testing was done by hand with a list of words that has
since been placed in the <literal>old</literal> <indexterm>
<primary>old</primary>
</indexterm> folder. These tests might be still useful if you
are in the very early stages of developing your own Forth.</simpara>
</note>
</section>
</chapter>
<chapter xml:id="_thanks">
<title>Thanks</title>
<simpara>Tali Forth would never have been possible without the help of a very large
number of people, very few of whom I have actually met.</simpara>
<simpara>First, there is the crew at <link xl:href="http://6502.org">6502.org</link><indexterm>
<primary>6502.org</primary>
</indexterm> who not
only helped me build my own actual, working 6502 computer, but also introduced
me to Forth. Tali would not exist without their inspiration, support, and
feedback.</simpara>
<simpara>Special thanks go out to Mike Barry<indexterm>
<primary>Barry, Mike</primary>
</indexterm> and Lee
Pivonka<indexterm>
<primary>Pivonka, Lee</primary>
</indexterm>, who both suggested vast improvements to the code
in size, structure, and speed. And then there is Sam Colwell<indexterm>
<primary>Colwell, Sam</primary>
</indexterm>
who contributed the invaluable test suite and a whole lot of code.</simpara>
<simpara>Thank you, everybody.</simpara>
</chapter>
<bibliography xml:id="_references_and_further_reading">
<title>References and Further Reading</title>
<simpara><anchor xml:id="FB" xreflabel="[FB]"/>[FB] <emphasis>Masterminds of Programming</emphasis>, Federico Biancuzzi,
O&#8217;Reilly Media 1st edition, 2009.</simpara>
<simpara><anchor xml:id="CHM1" xreflabel="[CHM1]"/>[CHM1] "Charles H. Moore: Geek of the Week", redgate Hub 2009
<link xl:href="https://www.red-gate.com/simple-talk/opinion/geek-of-the-week/chuck-moore-geek">https://www.red-gate.com/simple-talk/opinion/geek-of-the-week/chuck-moore-geek</link></simpara>
<simpara><anchor xml:id="CHM2" xreflabel="[CHM2]"/>[CHM2] "The Evolution of FORTH, an Unusual Language", Charles H. Moore,
<emphasis>Byte</emphasis> 1980, <link xl:href="https://wiki.forth-ev.de/doku.php/projects:the_evolution_of_forth">https://wiki.forth-ev.de/doku.php/projects:the_evolution_of_forth</link></simpara>
<simpara><anchor xml:id="CnR" xreflabel="[CnR]"/>[CnR] <emphasis>Forth Programmer&#8217;s Handbook</emphasis>, Edward K. Conklin and Elizabeth Rather,
3rd edition 2010</simpara>
<simpara><anchor xml:id="DB" xreflabel="[DB]"/>[DB] <emphasis>Forth Enzyclopedia</emphasis>, Mitch Derick and Linda Baker,
Mountain View Press 1982</simpara>
<simpara><anchor xml:id="DH" xreflabel="[DH]"/>[DH] "Some notes on Forth from a novice user", Douglas Hoffman, Feb 1988
<link xl:href="https://wiki.forth-ev.de/doku.php/projects:some_notes_on_forth_from_a_novice_user">https://wiki.forth-ev.de/doku.php/projects:some_notes_on_forth_from_a_novice_user</link></simpara>
<simpara><anchor xml:id="DMR" xreflabel="[DMR]"/>[DMR] "Reflections on Software Research", Dennis M. Ritchie, Turing Award
Lecture in <emphasis>Communications of the ACM</emphasis> August 1984 Volume 27 Number 8
<link xl:href="http://www.valleytalk.org/wp-content/uploads/2011/10/p758-ritchie.pdf">http://www.valleytalk.org/wp-content/uploads/2011/10/p758-ritchie.pdf</link></simpara>
<simpara><anchor xml:id="EnL" xreflabel="[EnL]"/>[EnL] <emphasis>Programming the 65816, including the 6502, 65C02 and 65802</emphasis>,
David Eyes and Ron Lichty
(Currently not available from the WDC website)</simpara>
<simpara><anchor xml:id="EW" xreflabel="[EW]"/>[EW] "Forth: The Hacker&#8217;s Language", Elliot Williams,
<link xl:href="https://hackaday.com/2017/01/27/forth-the-hackers-language/">https://hackaday.com/2017/01/27/forth-the-hackers-language/</link></simpara>
<simpara><anchor xml:id="GK" xreflabel="[GK]"/>[GK] "Forth System Comparisons", Guy Kelly, in <emphasis>Forth Dimensions</emphasis> V13N6,
March/April 1992
<link xl:href="http://www.forth.org/fd/FD-V13N6.pdf}{http://www.forth.org/fd/FD-V13N6.pdf">http://www.forth.org/fd/FD-V13N6.pdf}{http://www.forth.org/fd/FD-V13N6.pdf</link></simpara>
<simpara><anchor xml:id="JN" xreflabel="[JN]"/>[JN] <emphasis>A Beginner&#8217;s Guide to Forth</emphasis>, J.V. Nobel,
<link xl:href="http://galileo.phys.virginia.edu/classes/551.jvn.fall01/primer.htm">http://galileo.phys.virginia.edu/classes/551.jvn.fall01/primer.htm</link></simpara>
<simpara><anchor xml:id="BWK" xreflabel="[BWK]"/>[BWK] <emphasis>A Tutorial Introduction to the UNIX Text Editor</emphasis>, B. W. Kernighan,
<link xl:href="http://www.psue.uni-hannover.de/wise2017_2018/material/ed.pdf">http://www.psue.uni-hannover.de/wise2017_2018/material/ed.pdf</link></simpara>
<simpara><anchor xml:id="LB1" xreflabel="[LB1]"/>[LB1] <emphasis>Starting Forth</emphasis>, Leo Brodie, new edition 2003,
<link xl:href="https://www.forth.com/starting-forth/}{https://www.forth.com/starting-forth/">https://www.forth.com/starting-forth/}{https://www.forth.com/starting-forth/</link></simpara>
<simpara><anchor xml:id="LB2" xreflabel="[LB2]"/>[LB2] <emphasis>Thinking Forth</emphasis>, Leo Brodie, 1984,
<link xl:href="http://thinking-forth.sourceforge.net/\#21CENTURY">http://thinking-forth.sourceforge.net/\#21CENTURY</link></simpara>
<simpara><anchor xml:id="LL" xreflabel="[LL]"/>[LL] <emphasis>6502 Assembly Language Programming</emphasis>, Lance A. Leventhal,
OSBORNE/McGRAW-HILL 1979</simpara>
<simpara><anchor xml:id="PHS" xreflabel="[PHS]"/>[PHS] "The Daemon, the Gnu and the Penguin", Peter H. Saulus,
22. April 2005, <link xl:href="http://www.groklaw.net/article.php?story=20050422235450910">http://www.groklaw.net/article.php?story=20050422235450910</link></simpara>
</bibliography>
<colophon xml:id="_colophon">
<title>Colophon</title>
<simpara>The Tali Forth 2 Manual was written with the <link xl:href="https://www.vim.org/">vim</link> editor in
<link xl:href="https://asciidoctor.org/docs/what-is-asciidoc/">AsciiDoc</link> format, formatted to
HTML with AsciiDoctor, and version controlled with <link xl:href="https://git-scm.com/">Git</link>, all
under <link xl:href="https://www.ubuntu.com/">Ubuntu</link> Linux 16.04 LTS.</simpara>
</colophon>
</part>
</book>