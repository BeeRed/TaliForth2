; Dictionary Headers for Tali Forth 2
; Scot W. Stevenson <scot.stevenson@gmail.com>
; Updated by Sam Colwell
; First version: 05. Dec 2016 (Liara Forth)
; This version: 01. Jan 2023

; Dictionary headers are kept separately from the code, which allows various
; tricks in the code. We roughly follow the Gforth terminology: The Execution
; Token (xt) is the address of the first byte of a word's code that can be, uh,
; executed; the Name Token (nt) is a pointer to the beginning of the word's
; header in the Dictionary. There the link to the next word in the Dictionary
; is always one cell down from the current word's own nt. In the code itself,
; we use "nt_<WORD>" for the nt and "xt_<WORD>" for the xt.

; This gives us the following header structure:

;              8 bit     8 bit
;               LSB       MSB
; nt_word ->  +--------+--------+
;          +0 | Length | Status |
;             +--------+--------+
;          +2 | Next Header     | -> nt_next_word
;             +-----------------+
;          +4 | Start of Code   | -> xt_word
;             +-----------------+
;          +6 | End of Code     | -> z_word
;             +--------+--------+
;          +8 | Name   |        |
;             +--------+--------+
;             |        |        |
;             +--------+--------+
;             |        |  ...   | (name string does not end with a zero)
;          +n +--------+--------+

; The Status Byte is created by adding the flags defined in definitions.asm,
; which are:

;       CO - Compile Only
;       IM - Immediate Word
;       NN - Never Native Compile (must always be called by JSR)
;       AN - Always Native Compile (may not be called by JSR)
;       HC - Has CFA (words created by CREATE and DOES> only)
;
;       The NN and AN flags are intrepreted together like this:
;
;            NN  AN
;           +---+---+
;           | 0 | 0 |  -- : Normal word called by JSR (non-native) or inlined (native)
;           | 1 | 0 |  NN : Word can only be called by JSR (never native)
;           | 0 | 1 |  AN : Word can only be inlined (always native)
;           | 1 | 1 |  ST : Normal word with return stack juggling that
;           +---+---+       must be removed when inlining (R>, R@, >R etc)
;
; Note there are currently two bits unused.

; By default, all existing words can be natively compiled (compiled inline) or
; as a subroutine jump target; the system decides which variant to use based on
; a threshold the user can set. By default, all user-created words are flagged
; never-native. The user can override this by using the always-native word
; just after defining their new word.  The NN flag forbids native compiling,
; the AN flag forces it.

; The last word (top word in code) is always BYE. It is marked as the last word
; by its value of 0000 in its Next Header field. The words are sorted with the
; more common ones first (further down in code) so they are found earlier.
; Anything to do with output comes later (further up) because things will
; always be slow if there is a human involved.

; The initial skeleton of this list was automatically generated by a script
; in the tools folder and then sorted by hand.

; FORTH-WORDLIST

; DROP is always the first native word in the Dictionary
dictionary_start:
nt_drop:
        .byte 4, 0
        .word nt_dup, xt_drop, z_drop
        .text "drop"

nt_dup:
        .byte 3, 0
        .word nt_swap, xt_dup, z_dup
        .text "dup"

nt_swap:
        .byte 4, 0
        .word nt_store, xt_swap, z_swap
        .text "swap"

nt_store:
        .byte 1, 0
        .word nt_fetch, xt_store, z_store
        .text "!"

nt_fetch:
        .byte 1, 0
        .word nt_over, xt_fetch, z_fetch
        .text "@"

nt_over:
        .byte 4, 0
        .word nt_to_r, xt_over, z_over
        .text "over"

nt_to_r:
        .byte 2, CO+ST       ; native skips stack juggling
        .word nt_r_from, xt_to_r, z_to_r
        .text ">r"

nt_r_from:
        .byte 2, CO+ST          ; native skips stack juggling
        .word nt_r_fetch, xt_r_from, z_r_from
        .text "r>"

nt_r_fetch:
        .byte 2, CO+ST          ; native skips stack juggling
        .word nt_nip, xt_r_fetch, z_r_fetch
        .text "r@"

nt_nip:
        .byte 3, 0
        .word nt_rot, xt_nip, z_nip
        .text "nip"

nt_rot:
        .byte 3, 0
        .word nt_not_rot, xt_rot, z_rot
        .text "rot"

nt_not_rot:
        .byte 4, 0
        .word nt_tuck, xt_not_rot, z_not_rot
        .text "-rot"

nt_tuck:
        .byte 4, 0
        .word nt_comma, xt_tuck, z_tuck
        .text "tuck"

nt_comma:
        .byte 1, 0
        .word nt_c_fetch, xt_comma, z_comma
        .text ","

nt_c_fetch:
        .byte 2, 0
        .word nt_c_store, xt_c_fetch, z_c_fetch
        .text "c@"

nt_c_store:
        .byte 2, 0
        .word nt_plus_store, xt_c_store, z_c_store
        .text "c!"

nt_plus_store:
        .byte 2, 0
        .word nt_zero, xt_plus_store, z_plus_store
        .text "+!"

nt_zero:
        .byte 1, 0
        .word nt_one, xt_zero, z_zero
        .text "0"

nt_one:
        .byte 1, 0
        .word nt_two, xt_one, z_one
        .text "1"

nt_two:
        .byte 1, 0
        .word nt_execute, xt_two, z_two
        .text "2"

nt_execute:
        .byte 7, 0
        .word nt_emit, xt_execute, z_execute
        .text "execute"

nt_emit:
        .byte 4, NN
        .word nt_type, xt_emit, z_emit
        .text "emit"

nt_type:
        .byte 4, 0
        .word nt_dot, xt_type, z_type
        .text "type"

nt_dot:
        .byte 1, 0
        .word nt_u_dot, xt_dot, z_dot
        .text "."

nt_u_dot:
        .byte 2, 0
        .word nt_u_dot_r, xt_u_dot, z_u_dot
        .text "u."

nt_u_dot_r:
        .byte 3, 0
        .word nt_dot_r, xt_u_dot_r, z_u_dot_r
        .text "u.r"

nt_dot_r:
        .byte 2, 0
        .word nt_d_dot, xt_dot_r, z_dot_r
        .text ".r"

nt_d_dot:
        .byte 2, 0
        .word nt_d_dot_r, xt_d_dot, z_d_dot
        .text "d."

nt_d_dot_r:
        .byte 3, 0
        .word nt_m_star_slash, xt_d_dot_r, z_d_dot_r
        .text "d.r"

nt_m_star_slash:
        .byte 3, 0
        .word nt_ud_dot, xt_m_star_slash, z_m_star_slash
        .text "m*/"

nt_ud_dot:
        .byte 3, 0
        .word nt_ud_dot_r, xt_ud_dot, z_ud_dot
        .text "ud."

nt_ud_dot_r:
        .byte 4, 0
        .word nt_question, xt_ud_dot_r, z_ud_dot_r
        .text "ud.r"

nt_question:
        .byte 1, 0
        .word nt_false, xt_question, z_question
        .text "?"

nt_false:
        .byte 5, 0
        .word nt_true, xt_false, z_false
        .text "false"

nt_true:
        .byte 4, 0
        .word nt_space, xt_true, z_true
        .text "true"

nt_space:
        .byte 5, 0
        .word nt_two_dup, xt_space, z_space
        .text "space"

nt_two_dup:
        .byte 4, 0
        .word nt_question_dup, xt_two_dup, z_two_dup
        .text "2dup"

nt_question_dup:
        .byte 4, 0
        .word nt_plus, xt_question_dup, z_question_dup
        .text "?dup"

nt_plus:
        .byte 1, 0
        .word nt_minus, xt_plus, z_plus
        .text "+"

nt_minus:
        .byte 1, 0
        .word nt_one_minus, xt_minus, z_minus
        .text "-"

nt_one_minus:
        .byte 2, 0
        .word nt_one_plus, xt_one_minus, z_one_minus
        .text "1-"

nt_one_plus:
        .byte 2, 0
        .word nt_two_star, xt_one_plus, z_one_plus
        .text "1+"

nt_two_star:
        .byte 2, 0
        .word nt_two_slash, xt_two_star, z_two_star
        .text "2*"

nt_two_slash:
        .byte 2, 0
        .word nt_abs, xt_two_slash, z_two_slash
        .text "2/"

nt_abs:
        .byte 3, 0
        .word nt_dabs, xt_abs, z_abs
        .text "abs"

nt_dabs:
        .byte 4, 0
        .word nt_and, xt_dabs, z_dabs
        .text "dabs"

nt_and:
        .byte 3, 0
        .word nt_or, xt_and, z_and
        .text "and"

nt_or:
        .byte 2, 0
        .word nt_xor, xt_or, z_or
        .text "or"

nt_xor:
        .byte 3, 0
        .word nt_rshift, xt_xor, z_xor
        .text "xor"

nt_rshift:
        .byte 6, 0
        .word nt_lshift, xt_rshift, z_rshift
        .text "rshift"

nt_lshift:
        .byte 6, 0
        .word nt_pick, xt_lshift, z_lshift
        .text "lshift"

nt_pick:
        .byte 4, 0    ; underflow check is complicated, leave off here
        .word nt_char, xt_pick, z_pick
        .text "pick"

nt_char:
        .byte 4, 0
        .word nt_bracket_char, xt_char, z_char
        .text "char"

nt_bracket_char:
        .byte 6, CO+IM
        .word nt_char_plus, xt_bracket_char, z_bracket_char
        .text "[char]"

nt_char_plus:
        .byte 5, 0
        .word nt_chars, xt_char_plus, z_char_plus ; same as 1+
        .text "char+"

nt_chars:
        .byte 5, 0      ; deleted during compile
        .word nt_cells, xt_chars, z_chars
        .text "chars"

nt_cells:
        .byte 5, 0
        .word nt_cell_plus, xt_cells, z_cells  ; same as 2*
        .text "cells"

nt_cell_plus:
        .byte 5, 0
        .word nt_here, xt_cell_plus, z_cell_plus
        .text "cell+"

nt_here:
        .byte 4, 0
        .word nt_equal, xt_here, z_here
        .text "here"

nt_equal:
        .byte 1, 0
        .word nt_not_equals, xt_equal, z_equal
        .text "="

nt_not_equals:
        .byte 2, 0
        .word nt_less_than, xt_not_equals, z_not_equals
        .text "<>"

nt_less_than:
        .byte 1, 0
        .word nt_u_less_than, xt_less_than, z_less_than
        .text "<"

nt_u_less_than:
        .byte 2, 0
        .word nt_u_greater_than, xt_u_less_than, z_u_less_than
        .text "u<"

nt_u_greater_than:
        .byte 2, 0
        .word nt_greater_than, xt_u_greater_than, z_u_greater_than
        .text "u>"

nt_greater_than:
        .byte 1, 0
        .word nt_zero_equal, xt_greater_than, z_greater_than
        .text ">"

nt_zero_equal:
        .byte 2, 0
        .word nt_zero_unequal, xt_zero_equal, z_zero_equal
        .text "0="

nt_zero_unequal:
        .byte 3, 0
        .word nt_zero_greater, xt_zero_unequal, z_zero_unequal
        .text "0<>"

nt_zero_greater:
        .byte 2, 0
        .word nt_zero_less, xt_zero_greater, z_zero_greater
        .text "0>"

nt_zero_less:
        .byte 2, 0
        .word nt_min, xt_zero_less, z_zero_less
        .text "0<"

nt_min:
        .byte 3, 0
        .word nt_max, xt_min, z_min
        .text "min"

nt_max:
        .byte 3, 0
        .word nt_two_drop, xt_max, z_max
        .text "max"

nt_two_drop:
        .byte 5, 0
        .word nt_two_swap, xt_two_drop, z_two_drop
        .text "2drop"

nt_two_swap:
        .byte 5, 0
        .word nt_two_over, xt_two_swap, z_two_swap
        .text "2swap"

nt_two_over:
        .byte 5, 0
        .word nt_two_store, xt_two_over, z_two_over
        .text "2over"

nt_two_store:
        .byte 2, 0
        .word nt_two_fetch, xt_two_store, z_two_store
        .text "2!"

nt_two_fetch:
        .byte 2, 0
        .word nt_two_variable, xt_two_fetch, z_two_fetch
        .text "2@"

nt_two_variable:
        .byte 9, 0
        .word nt_two_constant, xt_two_variable, z_two_variable
        .text "2variable"

nt_two_constant:
        .byte 9, 0
        .word nt_two_literal, xt_two_constant, z_two_constant
        .text "2constant"

nt_two_literal:
        .byte 8, IM
        .word nt_two_r_fetch, xt_two_literal, z_two_literal
        .text "2literal"

nt_two_r_fetch:
        .byte 3, CO+ST          ; native skips stack juggling
        .word nt_two_r_from, xt_two_r_fetch, z_two_r_fetch
        .text "2r@"

nt_two_r_from:
        .byte 3, CO+ST          ; native skips stack juggling
        .word nt_two_to_r, xt_two_r_from, z_two_r_from
        .text "2r>"

nt_two_to_r:
        .byte 3, CO+ST       ; native skips stack juggling
        .word nt_invert, xt_two_to_r, z_two_to_r
        .text "2>r"

nt_invert:
        .byte 6, 0
        .word nt_negate, xt_invert, z_invert
        .text "invert"

nt_negate:
        .byte 6, 0
        .word nt_dnegate, xt_negate, z_negate
        .text "negate"

nt_dnegate:
        .byte 7, 0
        .word nt_c_comma, xt_dnegate, z_dnegate
        .text "dnegate"

nt_c_comma:
        .byte 2, 0
        .word nt_bounds, xt_c_comma, z_c_comma
        .text "c,"

nt_bounds:
        .byte 6, 0
        .word nt_spaces, xt_bounds, z_bounds
        .text "bounds"

nt_spaces:
        .byte 6, 0
        .word nt_bl, xt_spaces, z_spaces
        .text "spaces"

nt_bl:
        .byte 2, 0
        .word nt_minus_trailing, xt_bl, z_bl
        .text "bl"

nt_minus_trailing:
        .byte 9, 0
        .word nt_minus_leading, xt_minus_trailing, z_minus_trailing
        .text "-trailing"

nt_minus_leading:
        .byte 8, 0
        .word nt_slash_string, xt_minus_leading, z_minus_leading
        .text "-leading"

nt_slash_string:
        .byte 7, 0
        .word nt_refill, xt_slash_string, z_slash_string
        .text "/string"

nt_refill:
        .byte 6, 0
        .word nt_accept, xt_refill, z_refill
        .text "refill"

nt_accept:
        .byte 6, NN
        .word nt_input_to_r, xt_accept, z_accept
        .text "accept"

nt_input_to_r:
        .byte 7, NN
        .word nt_r_to_input, xt_input_to_r, z_input_to_r
        .text "input>r"

nt_r_to_input:
        .byte 7, NN
        .word nt_unused, xt_r_to_input, z_r_to_input
        .text "r>input"

nt_unused:
        .byte 6, 0
        .word nt_depth, xt_unused, z_unused
        .text "unused"

nt_depth:
        .byte 5, 0
        .word nt_key, xt_depth, z_depth
        .text "depth"

nt_key:
        .byte 3, 0
        .word nt_keyq, xt_key, z_key
        .text "key"

nt_keyq:
        .byte 4, 0
        .word nt_allot, xt_keyq, z_keyq
        .text "key?"

nt_allot:
        .byte 5, 0
        .word nt_create, xt_allot, z_allot
        .text "allot"

nt_create:
        .byte 6, 0
        .word nt_does, xt_create, z_create
        .text "create"

nt_does:
        .byte 5, CO+IM
        .word nt_variable, xt_does, z_does
        .text "does>"

nt_variable:
        .byte 8, 0
        .word nt_constant, xt_variable, z_variable
        .text "variable"

nt_constant:
        .byte 8, 0
        .word nt_value, xt_constant, z_constant
        .text "constant"

nt_value:
        .byte 5, 0
        .word nt_to, xt_value, z_value          ; same code as CONSTANT
        .text "value"

nt_to:
        .byte 2, NN+IM
        .word nt_s_to_d, xt_to, z_to
        .text "to"

nt_s_to_d:
        .byte 3, 0
        .word nt_d_to_s, xt_s_to_d, z_s_to_d
        .text "s>d"

nt_d_to_s:
        .byte 3, 0
        .word nt_d_minus, xt_d_to_s, z_d_to_s
        .text "d>s"

nt_d_minus:
        .byte 2, 0
        .word nt_d_plus, xt_d_minus, z_d_minus
        .text "d-"

nt_d_plus:
        .byte 2, 0
        .word nt_erase, xt_d_plus, z_d_plus
        .text "d+"

nt_erase:
        .byte 5, 0
        .word nt_blank, xt_erase, z_erase
        .text "erase"

nt_blank:
        .byte 5, 0
        .word nt_fill, xt_blank, z_blank
        .text "blank"

nt_fill:
        .byte 4, 0
        .word nt_find_name, xt_fill, z_fill
        .text "fill"

nt_find_name:
        .byte 9, 0
        .word nt_tick, xt_find_name, z_find_name
        .text "find-name"

nt_tick:
        .byte 1, 0
        .word nt_bracket_tick, xt_tick, z_tick
        .text "'"

nt_bracket_tick:
        .byte 3, CO+IM
        .word nt_name_to_int, xt_bracket_tick, z_bracket_tick
        .text "[']"

nt_name_to_int:
        .byte 8, 0
        .word nt_int_to_name, xt_name_to_int, z_name_to_int
        .text "name>int"

nt_int_to_name:
        .byte 8, 0
        .word nt_name_to_string, xt_int_to_name, z_int_to_name
        .text "int>name"

nt_name_to_string:
        .byte 11, 0
        .word nt_to_body, xt_name_to_string, z_name_to_string
        .text "name>string"

nt_to_body:
        .byte 5, 0
        .word nt_defer, xt_to_body, z_to_body
        .text ">body"

nt_defer:
        .byte 5, 0
        .word nt_latestxt, xt_defer, z_defer
        .text "defer"

nt_latestxt:
        .byte 8, 0
        .word nt_latestnt, xt_latestxt, z_latestxt
        .text "latestxt"

nt_latestnt:
        .byte 8, 0
        .word nt_parse_name, xt_latestnt, z_latestnt
        .text "latestnt"

nt_parse_name:
        .byte 10, NN
        .word nt_parse, xt_parse_name, z_parse_name
        .text "parse-name"

nt_parse:
        .byte 5, 0
        .word nt_execute_parsing, xt_parse, z_parse
        .text "parse"

nt_execute_parsing:
        .byte 15, 0
        .word nt_source, xt_execute_parsing, z_execute_parsing
        .text "execute-parsing"

nt_source:
        .byte 6, 0
        .word nt_source_id, xt_source, z_source
        .text "source"

nt_source_id:
        .byte 9, 0
        .word nt_colon, xt_source_id, z_source_id
        .text "source-id"

nt_colon:
        .byte 1, 0
        .word nt_semicolon, xt_colon, z_colon
        .text ":"

nt_semicolon:
        .byte 1, CO+IM
        .word nt_colon_noname, xt_semicolon, z_semicolon
        .text ";"

nt_colon_noname:
        .byte 7, 0
        .word nt_compile_comma, xt_colon_noname, z_colon_noname
        .text ":noname"

nt_compile_comma:
        .byte 8, NN
        .word nt_left_bracket, xt_compile_comma, z_compile_comma
        .text "compile,"

nt_left_bracket:
        .byte 1, IM+CO
        .word nt_right_bracket, xt_left_bracket, z_left_bracket
        .text "["

nt_right_bracket:
        .byte 1, IM
        .word nt_literal, xt_right_bracket, z_right_bracket
        .text "]"

nt_literal:
        .byte 7, IM+CO
        .word nt_sliteral, xt_literal, z_literal
        .text "literal"

nt_sliteral:
        .byte 8, CO+IM
        .word nt_dot_quote, xt_sliteral, z_sliteral
        .text "sliteral"

nt_dot_quote:
        .byte 2, CO+IM
        .word nt_s_quote, xt_dot_quote, z_dot_quote
        .text ".", $22

nt_s_quote:
        .byte 2, IM+NN
        .word nt_s_backslash_quote, xt_s_quote, z_s_quote
        .text "s", $22

nt_s_backslash_quote:
        .byte 3, IM
        .word nt_postpone, xt_s_backslash_quote, z_s_backslash_quote
        .text "s", $5C, $22

nt_postpone:
        .byte 8, IM+CO
        .word nt_immediate, xt_postpone, z_postpone
        .text "postpone"

nt_immediate:
        .byte 9, 0
        .word nt_compile_only, xt_immediate, z_immediate
        .text "immediate"

nt_compile_only:
        .byte 12, 0
        .word nt_never_native, xt_compile_only, z_compile_only
        .text "compile-only"

nt_never_native:
        .byte 12, 0
        .word nt_always_native, xt_never_native, z_never_native
        .text "never-native"

nt_always_native:
        .byte 13, 0
        .word nt_allow_native, xt_always_native, z_always_native
        .text "always-native"

nt_allow_native:
        .byte 12, 0
        .word nt_nc_limit, xt_allow_native, z_allow_native
        .text "allow-native"

nt_nc_limit:
        .byte 8, NN
        .word nt_strip_underflow, xt_nc_limit, z_nc_limit
        .text "nc-limit"

nt_strip_underflow:
        .byte 15, NN
        .word nt_abort, xt_strip_underflow, z_strip_underflow
        .text "strip-underflow"

nt_abort:
        .byte 5, 0
        .word nt_abort_quote, xt_abort, z_abort
        .text "abort"

nt_abort_quote:
        .byte 6, CO+IM+NN
        .word nt_do, xt_abort_quote, z_abort_quote
        .text "abort", $22

nt_do:
        .byte 2, CO+IM+NN
        .word nt_question_do, xt_do, z_do
        .text "do"

nt_question_do:
        .byte 3, CO+IM+NN
        .word nt_i, xt_question_do, z_question_do
        .text "?do"

nt_i:
        .byte 1, CO
        .word nt_j, xt_i, z_i
        .text "i"

nt_j:
        .byte 1, CO
        .word nt_loop, xt_j, z_j
        .text "j"

nt_loop:
        .byte 4, CO+IM
        .word nt_plus_loop, xt_loop, z_loop
        .text "loop"

nt_plus_loop:
        .byte 5, CO+IM
        .word nt_exit, xt_plus_loop, z_plus_loop
        .text "+loop"

nt_exit:
        .byte 4, AN+CO
        .word nt_unloop, xt_exit, z_exit
        .text "exit"

nt_unloop:
        .byte 6, CO
        .word nt_leave, xt_unloop, z_unloop
        .text "unloop"

nt_leave:
        .byte 5, CO+IM
        .word nt_recurse, xt_leave, z_leave
        .text "leave"

nt_recurse:
        .byte 7, CO+IM+NN
        .word nt_quit, xt_recurse, z_recurse
        .text "recurse"

nt_quit:
        .byte 4, 0
        .word nt_begin, xt_quit, z_quit
        .text "quit"

nt_begin:
        .byte 5, CO+IM
        .word nt_again, xt_begin, z_begin
        .text "begin"

nt_again:
        .byte 5, CO+IM
        .word nt_state, xt_again, z_again
        .text "again"

nt_state:
        .byte 5, 0
        .word nt_evaluate, xt_state, z_state
        .text "state"

nt_evaluate:
        .byte 8, 0
        .word nt_base, xt_evaluate, z_evaluate
        .text "evaluate"

nt_base:
        .byte 4, 0
        .word nt_digit_question, xt_base, z_base
        .text "base"

nt_digit_question:
        .byte 6, 0
        .word nt_number, xt_digit_question, z_digit_question
        .text "digit?"

nt_number:
        .byte 6, 0
        .word nt_to_number, xt_number, z_number
        .text "number"

nt_to_number:
        .byte 7, 0
        .word nt_hex, xt_to_number, z_to_number
        .text ">number"

nt_hex:
        .byte 3, 0
        .word nt_decimal, xt_hex, z_hex
        .text "hex"

nt_decimal:
        .byte 7, 0
        .word nt_count, xt_decimal, z_decimal
        .text "decimal"

nt_count:
        .byte 5, 0
        .word nt_m_star, xt_count, z_count
        .text "count"

nt_m_star:
        .byte 2, 0
        .word nt_um_star, xt_m_star, z_m_star
        .text "m*"

nt_um_star:
        .byte 3, 0
        .word nt_star, xt_um_star, z_um_star
        .text "um*"

nt_star:
        .byte 1, 0
        .word nt_um_slash_mod, xt_star, z_star
        .text "*"

nt_um_slash_mod:
        .byte 6, 0
        .word nt_sm_slash_rem, xt_um_slash_mod, z_um_slash_mod
        .text "um/mod"

nt_sm_slash_rem:
        .byte 6, 0
        .word nt_fm_slash_mod, xt_sm_slash_rem, z_sm_slash_rem
        .text "sm/rem"

nt_fm_slash_mod:
        .byte 6, 0
        .word nt_slash, xt_fm_slash_mod, z_fm_slash_mod
        .text "fm/mod"

nt_slash:
        .byte 1, 0
        .word nt_slash_mod, xt_slash, z_slash
        .text "/"

nt_slash_mod:
        .byte 4, 0
        .word nt_mod, xt_slash_mod, z_slash_mod
        .text "/mod"

nt_mod:
        .byte 3, 0
        .word nt_star_slash_mod, xt_mod, z_mod
        .text "mod"

nt_star_slash_mod:
        .byte 5, 0
        .word nt_star_slash, xt_star_slash_mod, z_star_slash_mod
        .text "*/mod"

nt_star_slash:
        .byte 2, 0
        .word nt_backslash, xt_star_slash, z_star_slash
        .text "*/"

nt_backslash:
        .byte 1, IM
        .word nt_move, xt_backslash, z_backslash
        .byte '\'

nt_move:
        .byte 4, NN
        .word nt_cmove_up, xt_move, z_move
        .text "move"

nt_cmove_up:
        .byte 6, 0
        .word nt_cmove, xt_cmove_up, z_cmove_up
        .text "cmove>"

nt_cmove:
        .byte 5, 0
        .word nt_pad, xt_cmove, z_cmove
        .text "cmove"

nt_pad:
        .byte 3, 0
        .word nt_cleave, xt_pad, z_pad
        .text "pad"

nt_cleave:
        .byte 6, 0
        .word nt_hexstore, xt_cleave, z_cleave
        .text "cleave"

nt_hexstore:
        .byte 8, 0
        .word nt_within, xt_hexstore, z_hexstore
        .text "hexstore"

nt_within:
        .byte 6, 0
        .word nt_to_in, xt_within, z_within
        .text "within"

nt_to_in:
        .byte 3, 0
        .word nt_less_number_sign, xt_to_in, z_to_in
        .text ">in"

nt_less_number_sign:
        .byte 2, 0
        .word nt_number_sign, xt_less_number_sign, z_less_number_sign
        .text "<#"

nt_number_sign:
        .byte 1, 0
        .word nt_number_sign_s, xt_number_sign, z_number_sign
        .text "#"

nt_number_sign_s:
        .byte 2, 0
        .word nt_number_sign_greater, xt_number_sign_s, z_number_sign_s
        .text "#s"

nt_number_sign_greater:
        .byte 2, 0
        .word nt_hold, xt_number_sign_greater, z_number_sign_greater
        .text "#>"

nt_hold:
        .byte 4, 0
        .word nt_sign, xt_hold, z_hold
        .text "hold"

nt_sign:
        .byte 4, 0
        .word nt_output, xt_sign, z_sign
        .text "sign"

nt_output:
        .byte 6, 0
        .word nt_input, xt_output, z_output
        .text "output"

nt_input:
        .byte 5, 0
        .word nt_havekey, xt_input, z_input
        .text "input"

nt_havekey:
        .byte 7, 0
        .word nt_cr, xt_havekey, z_havekey
        .text "havekey"

nt_cr:
        .byte 2, 0
        .word nt_page, xt_cr, z_cr
        .text "cr"

nt_page:
        .byte 4, 0
        .word nt_at_xy, xt_page, z_page
        .text "page"

nt_at_xy:
        .byte 5, 0
        .word nt_marker, xt_at_xy, z_at_xy
        .text "at-xy"

nt_marker:
        .byte 6, IM
        .word nt_words, xt_marker, z_marker
        .text "marker"

nt_words:
        .byte 5, 0
        .word nt_wordsize, xt_words, z_words
        .text "words"

nt_wordsize:
        .byte 8, 0
        .word nt_aligned, xt_wordsize, z_wordsize
        .text "wordsize"

nt_aligned:
        .byte 7, 0
        .word nt_align, xt_aligned, z_aligned   ; same code as ALIGN
        .text "aligned"

nt_align:
        .byte 5, 0
        .word nt_bell, xt_align, z_align
        .text "align"

nt_bell:
        .byte 4, 0
        .word nt_dump, xt_bell, z_bell
        .text "bell"

nt_dump:
        .byte 4, 0
        .word nt_dot_s, xt_dump, z_dump
        .text "dump"

nt_dot_s:
        .byte 2, 0
        .word +, xt_dot_s, z_dot_s
        .text ".s"
+

.if "disassembler" in TALI_OPTIONAL_WORDS
nt_disasm:
        .byte 6, 0
        .word +, xt_disasm, z_disasm
        .text "disasm"
+
.endif

nt_compare:
        .byte 7, 0
        .word nt_search, xt_compare, z_compare
        .text "compare"

nt_search:
        .byte 6, NN
        .word +, xt_search, z_search
        .text "search"
+
.if "environment?" in TALI_OPTIONAL_WORDS
nt_environment_q:
        .byte 12, 0
        .word +, xt_environment_q, z_environment_q
        .text "environment?"
+
.endif
nt_find:
        .byte 4, 0
        .word nt_word, xt_find, z_find
        .text "find"

nt_word:
        .byte 4, 0
        .word nt_paren, xt_word, z_word
        .text "word"

nt_paren:
        .byte 1, IM
        .word nt_dot_paren, xt_paren, z_paren
        .text "("

nt_dot_paren:
        .byte 2, IM
        .word nt_if, xt_dot_paren, z_dot_paren
        .text ".("

nt_if:
        .byte 2, IM+CO+NN
        .word nt_then, xt_if, z_if
        .text "if"

nt_then:
        .byte 4, IM+CO+NN
        .word nt_else, xt_then, z_then
        .text "then"

nt_else:
        .byte 4, IM+CO+NN
        .word nt_repeat, xt_else, z_else
        .text "else"

nt_repeat:
        .byte 6, IM+CO+NN
        .word nt_until, xt_repeat, z_repeat
        .text "repeat"

nt_until:
        .byte 5, IM+CO+NN
        .word nt_while, xt_until, z_until
        .text "until"

nt_while:
        .byte 5, IM+CO+NN
        .word nt_case, xt_while, z_while
        .text "while"

nt_case:
        .byte 4, IM+CO+NN
        .word nt_of, xt_case, z_case    ; shares code with ZERO
        .text "case"

nt_of:
        .byte 2, IM+CO+NN
        .word nt_endof, xt_of, z_of
        .text "of"

nt_endof:
        .byte 5, IM+CO+NN
        .word nt_endcase, xt_endof, z_endof ; shares code with ELSE
        .text "endof"

nt_endcase:
        .byte 7, IM+CO+NN
        .word nt_defer_fetch, xt_endcase, z_endcase
        .text "endcase"

nt_defer_fetch:
        .byte 6, 0
        .word nt_defer_store, xt_defer_fetch, z_defer_fetch
        .text "defer@"

nt_defer_store:
        .byte 6, 0
        .word nt_is, xt_defer_store, z_defer_store
        .text "defer!"

nt_is:
        .byte 2, IM
        .word nt_action_of, xt_is, z_is
        .text "is"

nt_action_of:
        .byte 9, IM
        .word nt_useraddr, xt_action_of, z_action_of
        .text "action-of"

nt_useraddr:
        .byte 8, 0
        .word nt_buffer_colon, xt_useraddr, z_useraddr
        .text "useraddr"

nt_buffer_colon:
        .byte 7, 0
        .word +, xt_buffer_colon, z_buffer_colon
        .text "buffer:"
+
.if "block" in TALI_OPTIONAL_WORDS
nt_buffstatus:
        .byte 10, 0
        .word nt_buffblocknum, xt_buffstatus, z_buffstatus
        .text "buffstatus"

nt_buffblocknum:
        .byte 12, 0
        .word nt_blkbuffer, xt_buffblocknum, z_buffblocknum
        .text "buffblocknum"

nt_blkbuffer:
        .byte 9, 0
        .word nt_scr, xt_blkbuffer, z_blkbuffer
        .text "blkbuffer"

nt_scr:
        .byte 3, NN
        .word nt_blk, xt_scr, z_scr
        .text "scr"

nt_blk:
        .byte 3, NN
        .word nt_block_write, xt_blk, z_blk
        .text "blk"

nt_block_write:
        .byte 11, NN
        .word nt_block_write_vector, xt_block_write, z_block_write
        .text "block-write"

nt_block_write_vector:
        .byte 18, NN
        .word nt_block_read, xt_block_write_vector, z_block_write_vector
        .text "block-write-vector"

nt_block_read:
        .byte 10, NN
        .word nt_block_read_vector, xt_block_read, z_block_read
        .text "block-read"

nt_block_read_vector:
        .byte 17, NN
        .word nt_save_buffers, xt_block_read_vector, z_block_read_vector
        .text "block-read-vector"

nt_save_buffers:
        .byte 12, 0
        .word nt_block, xt_save_buffers, z_save_buffers
        .text "save-buffers"

nt_block:
        .byte 5, 0
        .word nt_update, xt_block, z_block
        .text "block"

nt_update:
        .byte 6, 0
        .word nt_buffer, xt_update, z_update
        .text "update"

nt_buffer:
        .byte 6, 0
        .word nt_empty_buffers, xt_buffer, z_buffer
        .text "buffer"

nt_empty_buffers:
        .byte 13, 0
        .word nt_flush, xt_empty_buffers, z_empty_buffers
        .text "empty-buffers"

nt_flush:
        .byte 5, 0
        .word nt_load, xt_flush, z_flush
        .text "flush"

nt_load:
        .byte 4, 0
        .word nt_thru, xt_load, z_load
        .text "load"

nt_thru:
        .byte 4, 0
        .word +, xt_thru, z_thru
        .text "thru"
+
.if TALI_ARCH == "c65"
nt_block_c65_init:
        .byte 14, 0
        .word +, xt_block_c65_init, z_block_c65_init
        .text "block-c65-init"
+
.endif
.if "editor" in TALI_OPTIONAL_WORDS
nt_list:
        .byte 4, 0
        .word +, xt_list, z_list
        .text "list"
+
.endif
.endif

.if "block" in TALI_OPTIONAL_WORDS && "ramdrive" in TALI_OPTIONAL_WORDS
nt_block_ramdrive_init:
        .byte 19, 0
        .word +, xt_block_ramdrive_init, z_block_ramdrive_init
        .text "block-ramdrive-init"
+
.endif

.if "wordlist" in TALI_OPTIONAL_WORDS
nt_definitions:
        .byte 11, 0
        .word nt_wordlist, xt_definitions, z_definitions
        .text "definitions"

nt_wordlist:
        .byte 8, 0
        .word nt_search_wordlist, xt_wordlist, z_wordlist
        .text "wordlist"

nt_search_wordlist:
        .byte 15, 0
        .word nt_set_current, xt_search_wordlist, z_search_wordlist
        .text "search-wordlist"

nt_set_current:
        .byte 11, 0
        .word nt_get_current, xt_set_current, z_set_current
        .text "set-current"

nt_get_current:
        .byte 11, 0
        .word nt_set_order, xt_get_current, z_get_current
        .text "get-current"

nt_set_order:
        .byte 9, 0
        .word nt_get_order, xt_set_order, z_set_order
        .text "set-order"

nt_get_order:
        .byte 9, 0
        .word nt_root_wordlist, xt_get_order, z_get_order
        .text "get-order"

nt_root_wordlist:
        .byte 13, 0
        .word +, xt_root_wordlist, z_root_wordlist
        .text "root-wordlist"
+
.endif

.if "assembler" in TALI_OPTIONAL_WORDS && "wordlist" in TALI_OPTIONAL_WORDS
nt_assembler_wordlist:  ; shares code with TWO
        .byte 18, 0
        .word +, xt_assembler_wordlist, z_assembler_wordlist
        .text "assembler-wordlist"
+
.endif

.if "editor" in TALI_OPTIONAL_WORDS && "wordlist" in TALI_OPTIONAL_WORDS
nt_editor_wordlist:     ; shares code with ONE
        .byte 15, 0
        .word +, xt_editor_wordlist, z_editor_wordlist
        .text "editor-wordlist"
+
.endif

.if "wordlist" in TALI_OPTIONAL_WORDS
nt_forth_wordlist:      ; shares code with ZERO
        .byte 14, 0
        .word nt_only, xt_forth_wordlist, z_forth_wordlist
        .text "forth-wordlist"

nt_only:
        .byte 4, 0
        .word nt_also, xt_only, z_only
        .text "only"

nt_also:
        .byte 4, 0
        .word nt_previous, xt_also, z_also
        .text "also"

nt_previous:
        .byte 8, 0
        .word nt_to_order, xt_previous, z_previous
        .text "previous"

nt_to_order:
        .byte 6, 0
        .word nt_order, xt_to_order, z_to_order
        .text ">order"

nt_order:
        .byte 5, 0
        .word nt_forth, xt_order, z_order
        .text "order"

nt_forth:
        .byte 5, 0
        .word +, xt_forth, z_forth
        .text "forth"
+
.endif

nt_see: .byte 3, NN
        .word +, xt_see, z_see
        .text "see"
+

.if "ed" in TALI_OPTIONAL_WORDS
nt_ed:                  ; ed6502
        .byte 3, NN
        .word +, xt_ed, z_ed
        .text "ed:"
+
.endif

nt_cold:
        .byte 4, 0
        .word nt_bye, xt_cold, z_cold
        .text "cold"

nt_bye:
        .byte 3         ; length of word strings
        .byte 0         ; status byte
        .word 0000      ; next word in Dictionary, 0000 signals end
        .word xt_bye    ; start of code block (xt of this word)
        .word z_bye     ; end of code (RTS)
        .text "bye"     ; word name, always lower case, not zero-terminated

; END of FORTH-WORDLIST


; ROOT-WORDLIST
        ; This is a short wordlist that has just the words needed to
        ; set the wordlists. These words are also included in the
        ; FORTH-WORDLIST as well.

root_dictionary_start:
.if "wordlist" in TALI_OPTIONAL_WORDS
nt_root_set_order:
        .byte 9, 0
        .word nt_root_forth, xt_set_order, z_set_order
        .text "set-order"

nt_root_forth:
        .byte 5, 0
        .word nt_root_forth_wordlist, xt_forth, z_forth
        .text "forth"

nt_root_forth_wordlist: ; shares code with ZERO
        .byte 14, 0
        .word nt_root_words, xt_forth_wordlist, z_forth_wordlist
        .text "forth-wordlist"

nt_root_words:
        .byte 5, 0
        .word 0000, xt_words, z_words
        .text "words"
.endif
; END of ROOT-WORDLIST


; EDITOR-WORDLIST

editor_dictionary_start:
.if "editor" in TALI_OPTIONAL_WORDS && "block" in TALI_OPTIONAL_WORDS
nt_editor_o:
        .byte 1, 0
        .word nt_editor_line, xt_editor_o, z_editor_o
        .text "o"

nt_editor_line:
        .byte 4, 0
        .word nt_editor_l, xt_editor_line, z_editor_line
        .text "line"

nt_editor_l:
        .byte 1, 0
        .word nt_editor_el, xt_editor_l, z_editor_l
        .text "l"

nt_editor_el:
        .byte 2, 0
        .word nt_editor_erase_screen, xt_editor_el, z_editor_el
        .text "el"

nt_editor_erase_screen:
        .byte 12, 0
        .word nt_editor_enter_screen, xt_editor_erase_screen, z_editor_erase_screen
        .text "erase-screen"

nt_editor_enter_screen:
        .byte 12, 0
        .word 0000, xt_editor_enter_screen, z_editor_enter_screen
        .text "enter-screen"
.endif
; END of EDITOR-WORDLIST


; ASSEMBLER-WORDLIST

; Labels for the opcodes have the format "nt_asm_<OPC>" where a futher
; underscore replaces any dot present in the SAN mnemonic. The hash sign for
; immediate addressing is replaced by an "h" (for example, the label code for
; "lda.#" is "xt_adm_lda_h"). All opcodes are immediate.

assembler_dictionary_start:

.if "assembler" in TALI_OPTIONAL_WORDS

; TODO add traditional mnemonics
; TODO merge assembler/disassembler options
; TODO consider adding/testing  rmbN (typo rbm4/5), smbN, bbrN, bbsN
; TODO broken test again?

nt_asm_first:
nt_asm_adc:     .nt_asm $6d, "adc"
nt_asm_adc_h:   .nt_asm $69, "adc.#"
nt_asm_adc_x:   .nt_asm $7d, "adc.x"
nt_asm_adc_y:   .nt_asm $79, "adc.y"
nt_asm_adc_z:   .nt_asm $65, "adc.z"
nt_asm_adc_zi:  .nt_asm $72, "adc.zi"
nt_asm_adc_ziy: .nt_asm $71, "adc.ziy"
nt_asm_adc_zx:  .nt_asm $75, "adc.zx"
nt_asm_adc_zxi: .nt_asm $61, "adc.zxi"

nt_asm_and:     .nt_asm $2d, "and."     ; not "and" because of conflicts with Forth word
nt_asm_and_h:   .nt_asm $29, "and.#"
nt_asm_and_x:   .nt_asm $3d, "and.x"
nt_asm_and_y:   .nt_asm $39, "and.y"
nt_asm_and_z:   .nt_asm $25, "and.z"
nt_asm_and_zi:  .nt_asm $32, "and.zi"
nt_asm_and_ziy: .nt_asm $31, "and.ziy"
nt_asm_and_zx:  .nt_asm $35, "and.zx"
nt_asm_and_zxi: .nt_asm $21, "and.zxi"

nt_asm_asl:     .nt_asm $0e, "asl"
nt_asm_asl_a:   .nt_asm $0a, "asl.a"
nt_asm_asl_x:   .nt_asm $1e, "asl.x"
nt_asm_asl_z:   .nt_asm $06, "asl.z"
nt_asm_asl_zx:  .nt_asm $16, "asl.zx"

nt_asm_bcc:     .nt_asm $90, "bcc"
nt_asm_bcs:     .nt_asm $b0, "bcs"
nt_asm_beq:     .nt_asm $f0, "beq"
nt_asm_bmi:     .nt_asm $30, "bmi"
nt_asm_bne:     .nt_asm $d0, "bne"
nt_asm_bpl:     .nt_asm $10, "bpl"
nt_asm_bra:     .nt_asm $80, "bra"
nt_asm_bvc:     .nt_asm $50, "bvc"
nt_asm_bvs:     .nt_asm $70, "bvs"

nt_asm_bit:     .nt_asm $2c, "bit"
nt_asm_bit_h:   .nt_asm $89, "bit.#"
nt_asm_bit_x:   .nt_asm $3c, "bit.x"
nt_asm_bit_z:   .nt_asm $24, "bit.z"
nt_asm_bit_zx:  .nt_asm $34, "bit.zx"

nt_asm_brk:     .nt_asm $00, "brk"

nt_asm_clc:     .nt_asm $18, "clc"
nt_asm_cld:     .nt_asm $d8, "cld"
nt_asm_cli:     .nt_asm $58, "cli"
nt_asm_clv:     .nt_asm $b8, "clv"

nt_asm_cmp:     .nt_asm $cd, "cmp"
nt_asm_cmp_h:   .nt_asm $c9, "cmp.#"
nt_asm_cmp_x:   .nt_asm $dd, "cmp.x"
nt_asm_cmp_y:   .nt_asm $d9, "cmp.y"
nt_asm_cmp_z:   .nt_asm $c5, "cmp.z"
nt_asm_cmp_zi:  .nt_asm $d2, "cmp.zi"
nt_asm_cmp_ziy: .nt_asm $d1, "cmp.ziy"
nt_asm_cmp_zx:  .nt_asm $d5, "cmp.zx"
nt_asm_cmp_zxi: .nt_asm $c1, "cmp.zxi"

nt_asm_cpx:     .nt_asm $ec, "cpx"
nt_asm_cpx_h:   .nt_asm $e0, "cpx.#"
nt_asm_cpx_z:   .nt_asm $e4, "cpx.z"

nt_asm_cpy:     .nt_asm $cc, "cpy"
nt_asm_cpy_h:   .nt_asm $c0, "cpy.#"
nt_asm_cpy_z:   .nt_asm $c4, "cpy.z"

nt_asm_dec:     .nt_asm $ce, "dec"
nt_asm_dec_a:   .nt_asm $3a, "dec.a"
nt_asm_dec_x:   .nt_asm $de, "dec.x"
nt_asm_dec_z:   .nt_asm $c6, "dec.z"
nt_asm_dec_zx:  .nt_asm $d6, "dec.zx"

nt_asm_dex:     .nt_asm $ca, "dex"
nt_asm_dey:     .nt_asm $88, "dey"

nt_asm_eor:     .nt_asm $4d, "eor"
nt_asm_eor_h:   .nt_asm $49, "eor.#"
nt_asm_eor_x:   .nt_asm $5d, "eor.x"
nt_asm_eor_y:   .nt_asm $59, "eor.y"
nt_asm_eor_z:   .nt_asm $45, "eor.z"
nt_asm_eor_zi:  .nt_asm $52, "eor.zi"
nt_asm_eor_ziy: .nt_asm $51, "eor.ziy"
nt_asm_eor_zx:  .nt_asm $55, "eor.zx"
nt_asm_eor_zxi: .nt_asm $41, "eor.zxi"

nt_asm_inc:     .nt_asm $ee, "inc"
nt_asm_inc_a:   .nt_asm $1a, "inc.a"
nt_asm_inc_x:   .nt_asm $fe, "inc.x"
nt_asm_inc_z:   .nt_asm $e6, "inc.z"
nt_asm_inc_zx:  .nt_asm $f6, "inc.zx"

nt_asm_inx:     .nt_asm $e8, "inx"
nt_asm_iny:     .nt_asm $c8, "iny"

nt_asm_jmp:     .nt_asm $4c, "jmp"
nt_asm_jmp_i:   .nt_asm $6c, "jmp.i"
nt_asm_jmp_xi:  .nt_asm $7c, "jmp.xi"

nt_asm_jsr:     .nt_asm $20, "jsr"

nt_asm_lda:     .nt_asm $ad, "lda"
nt_asm_lda_h:   .nt_asm $a9, "lda.#"
nt_asm_lda_x:   .nt_asm $bd, "lda.x"
nt_asm_lda_y:   .nt_asm $b9, "lda.y"
nt_asm_lda_z:   .nt_asm $a5, "lda.z"
nt_asm_lda_zi:  .nt_asm $b2, "lda.zi"
nt_asm_lda_ziy: .nt_asm $b1, "lda.ziy"
nt_asm_lda_zx:  .nt_asm $b5, "lda.zx"
nt_asm_lda_zxi: .nt_asm $a1, "lda.zxi"

nt_asm_ldx:     .nt_asm $ae, "ldx"
nt_asm_ldx_h:   .nt_asm $a2, "ldx.#"
nt_asm_ldx_y:   .nt_asm $be, "ldx.y"
nt_asm_ldx_z:   .nt_asm $a6, "ldx.z"
nt_asm_ldx_zy:  .nt_asm $b6, "ldx.zy"

nt_asm_ldy:     .nt_asm $ac, "ldy"
nt_asm_ldy_h:   .nt_asm $a0, "ldy.#"
nt_asm_ldy_x:   .nt_asm $bc, "ldy.x"
nt_asm_ldy_z:   .nt_asm $a4, "ldy.z"
nt_asm_ldy_zx:  .nt_asm $b4, "ldy.zx"

nt_asm_lsr:     .nt_asm $4e, "lsr"
nt_asm_lsr_a:   .nt_asm $4a, "lsr.a"
nt_asm_lsr_x:   .nt_asm $5e, "lsr.x"
nt_asm_lsr_z:   .nt_asm $46, "lsr.z"
nt_asm_lsr_zx:  .nt_asm $56, "lsr.zx"

nt_asm_nop:     .nt_asm $ea, "nop"

nt_asm_ora:     .nt_asm $0d, "ora"
nt_asm_ora_h:   .nt_asm $09, "ora.#"
nt_asm_ora_x:   .nt_asm $1d, "ora.x"
nt_asm_ora_y:   .nt_asm $19, "ora.y"
nt_asm_ora_z:   .nt_asm $05, "ora.z"
nt_asm_ora_zi:  .nt_asm $12, "ora.zi"
nt_asm_ora_ziy: .nt_asm $11, "ora.ziy"
nt_asm_ora_zx:  .nt_asm $15, "ora.zx"
nt_asm_ora_zxi: .nt_asm $01, "ora.zxi"

nt_asm_pha:     .nt_asm $48, "pha"
nt_asm_php:     .nt_asm $08, "php"
nt_asm_phx:     .nt_asm $da, "phx"
nt_asm_phy:     .nt_asm $5a, "phy"

nt_asm_pla:     .nt_asm $68, "pla"
nt_asm_plp:     .nt_asm $28, "plp"
nt_asm_plx:     .nt_asm $fa, "plx"
nt_asm_ply:     .nt_asm $7a, "ply"

nt_asm_rol:     .nt_asm $2e, "rol"
nt_asm_rol_a:   .nt_asm $2a, "rol.a"
nt_asm_rol_x:   .nt_asm $3e, "rol.x"
nt_asm_rol_z:   .nt_asm $26, "rol.z"
nt_asm_rol_zx:  .nt_asm $36, "rol.zx"

nt_asm_ror:     .nt_asm $6e, "ror"
nt_asm_ror_a:   .nt_asm $6a, "ror.a"
nt_asm_ror_x:   .nt_asm $7e, "ror.x"
nt_asm_ror_z:   .nt_asm $66, "ror.z"
nt_asm_ror_zx:  .nt_asm $76, "ror.zx"

nt_asm_rti:     .nt_asm $40, "rti"
nt_asm_rts:     .nt_asm $60, "rts"

nt_asm_sbc:     .nt_asm $ed, "sbc"
nt_asm_sbc_h:   .nt_asm $e9, "sbc.#"
nt_asm_sbc_x:   .nt_asm $fd, "sbc.x"
nt_asm_sbc_y:   .nt_asm $f9, "sbc.y"
nt_asm_sbc_z:   .nt_asm $e5, "sbc.z"
nt_asm_sbc_zi:  .nt_asm $f2, "sbc.zi"
nt_asm_sbc_ziy: .nt_asm $f1, "sbc.ziy"
nt_asm_sbc_zx:  .nt_asm $f5, "sbc.zx"
nt_asm_sbc_zxi: .nt_asm $e1, "sbc.zxi"

nt_asm_sec:     .nt_asm $38, "sec"
nt_asm_sed:     .nt_asm $f8, "sed"
nt_asm_sei:     .nt_asm $78, "sei"

nt_asm_sta:     .nt_asm $8d, "sta"
nt_asm_sta_x:   .nt_asm $9d, "sta.x"
nt_asm_sta_y:   .nt_asm $99, "sta.y"
nt_asm_sta_z:   .nt_asm $85, "sta.z"
nt_asm_sta_zi:  .nt_asm $92, "sta.zi"
nt_asm_sta_ziy: .nt_asm $91, "sta.ziy"
nt_asm_sta_zx:  .nt_asm $95, "sta.zx"
nt_asm_sta_zxi: .nt_asm $81, "sta.zxi"

nt_asm_stx:     .nt_asm $8e, "stx"
nt_asm_stx_z:   .nt_asm $86, "stx.z"
nt_asm_stx_zy:  .nt_asm $96, "stx.zy"

nt_asm_sty:     .nt_asm $8c, "sty"
nt_asm_sty_z:   .nt_asm $84, "sty.z"
nt_asm_sty_zx:  .nt_asm $94, "sty.zx"

nt_asm_stz:     .nt_asm $9c, "stz"
nt_asm_stz_x:   .nt_asm $9e, "stz.x"
nt_asm_stz_z:   .nt_asm $64, "stz.z"
nt_asm_stz_zx:  .nt_asm $74, "stz.zx"

nt_asm_tax:     .nt_asm $aa, "tax"
nt_asm_tay:     .nt_asm $a8, "tay"

nt_asm_trb:     .nt_asm $1c, "trb"
nt_asm_trb_z:   .nt_asm $14, "trb.z"

nt_asm_tsb:     .nt_asm $0c, "tsb"
nt_asm_tsb_z:   .nt_asm $04, "tsb.z"

nt_asm_tsx:     .nt_asm $ba, "tsx"
nt_asm_txa:     .nt_asm $8a, "txa"
nt_asm_txs:     .nt_asm $9a, "txs"
nt_asm_tya:     .nt_asm $98, "tya"
nt_asm_last:

; Assembler pseudo-instructions, directives and macros

nt_asm_arrow:   ; uses same code as HERE, but immediate
                .byte 3, IM
                .word nt_asm_back_jump
                .word xt_asm_arrow, z_asm_arrow
                .text "-->"


nt_asm_back_jump:  ; syntactic sugar, does nothing
                .byte 2, IM
                .word nt_asm_back_branch
                .word xt_asm_back_jump, z_asm_back_jump
                .text "<j"

nt_asm_back_branch:
                .byte 2, IM
                .word nt_asm_push_a
                .word xt_asm_back_branch, z_asm_back_branch
                .text "<b"

nt_asm_push_a:
                .byte 6, IM+NN
                .word 0000
                .word xt_asm_push_a, z_asm_push_a
                .text "push-a"
.endif
; END of ASSEMBLER-WORDLIST

; END
